/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelectionCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelectionCriteria::OAISelectionCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelectionCriteria::OAISelectionCriteria() {
    this->initializeModel();
}

OAISelectionCriteria::~OAISelectionCriteria() {}

void OAISelectionCriteria::initializeModel() {

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_max_depth_isSet = false;
    m_max_depth_isValid = false;

    m_min_storage_bytes_percentage_isSet = false;
    m_min_storage_bytes_percentage_isValid = false;
}

void OAISelectionCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelectionCriteria::fromJsonObject(QJsonObject json) {

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("Delimiter")]);
    m_delimiter_isSet = !json[QString("Delimiter")].isNull() && m_delimiter_isValid;

    m_max_depth_isValid = ::OpenAPI::fromJsonValue(m_max_depth, json[QString("MaxDepth")]);
    m_max_depth_isSet = !json[QString("MaxDepth")].isNull() && m_max_depth_isValid;

    m_min_storage_bytes_percentage_isValid = ::OpenAPI::fromJsonValue(m_min_storage_bytes_percentage, json[QString("MinStorageBytesPercentage")]);
    m_min_storage_bytes_percentage_isSet = !json[QString("MinStorageBytesPercentage")].isNull() && m_min_storage_bytes_percentage_isValid;
}

QString OAISelectionCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelectionCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_delimiter_isSet) {
        obj.insert(QString("Delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_max_depth_isSet) {
        obj.insert(QString("MaxDepth"), ::OpenAPI::toJsonValue(m_max_depth));
    }
    if (m_min_storage_bytes_percentage_isSet) {
        obj.insert(QString("MinStorageBytesPercentage"), ::OpenAPI::toJsonValue(m_min_storage_bytes_percentage));
    }
    return obj;
}

QString OAISelectionCriteria::getDelimiter() const {
    return m_delimiter;
}
void OAISelectionCriteria::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAISelectionCriteria::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAISelectionCriteria::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

qint32 OAISelectionCriteria::getMaxDepth() const {
    return m_max_depth;
}
void OAISelectionCriteria::setMaxDepth(const qint32 &max_depth) {
    m_max_depth = max_depth;
    m_max_depth_isSet = true;
}

bool OAISelectionCriteria::is_max_depth_Set() const{
    return m_max_depth_isSet;
}

bool OAISelectionCriteria::is_max_depth_Valid() const{
    return m_max_depth_isValid;
}

double OAISelectionCriteria::getMinStorageBytesPercentage() const {
    return m_min_storage_bytes_percentage;
}
void OAISelectionCriteria::setMinStorageBytesPercentage(const double &min_storage_bytes_percentage) {
    m_min_storage_bytes_percentage = min_storage_bytes_percentage;
    m_min_storage_bytes_percentage_isSet = true;
}

bool OAISelectionCriteria::is_min_storage_bytes_percentage_Set() const{
    return m_min_storage_bytes_percentage_isSet;
}

bool OAISelectionCriteria::is_min_storage_bytes_percentage_Valid() const{
    return m_min_storage_bytes_percentage_isValid;
}

bool OAISelectionCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_storage_bytes_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelectionCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
