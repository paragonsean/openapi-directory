/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBucketRequest_CreateBucketConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBucketRequest_CreateBucketConfiguration::OAICreateBucketRequest_CreateBucketConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBucketRequest_CreateBucketConfiguration::OAICreateBucketRequest_CreateBucketConfiguration() {
    this->initializeModel();
}

OAICreateBucketRequest_CreateBucketConfiguration::~OAICreateBucketRequest_CreateBucketConfiguration() {}

void OAICreateBucketRequest_CreateBucketConfiguration::initializeModel() {

    m_location_constraint_isSet = false;
    m_location_constraint_isValid = false;
}

void OAICreateBucketRequest_CreateBucketConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBucketRequest_CreateBucketConfiguration::fromJsonObject(QJsonObject json) {

    m_location_constraint_isValid = ::OpenAPI::fromJsonValue(m_location_constraint, json[QString("LocationConstraint")]);
    m_location_constraint_isSet = !json[QString("LocationConstraint")].isNull() && m_location_constraint_isValid;
}

QString OAICreateBucketRequest_CreateBucketConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBucketRequest_CreateBucketConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_location_constraint.isSet()) {
        obj.insert(QString("LocationConstraint"), ::OpenAPI::toJsonValue(m_location_constraint));
    }
    return obj;
}

OAIBucketLocationConstraint OAICreateBucketRequest_CreateBucketConfiguration::getLocationConstraint() const {
    return m_location_constraint;
}
void OAICreateBucketRequest_CreateBucketConfiguration::setLocationConstraint(const OAIBucketLocationConstraint &location_constraint) {
    m_location_constraint = location_constraint;
    m_location_constraint_isSet = true;
}

bool OAICreateBucketRequest_CreateBucketConfiguration::is_location_constraint_Set() const{
    return m_location_constraint_isSet;
}

bool OAICreateBucketRequest_CreateBucketConfiguration::is_location_constraint_Valid() const{
    return m_location_constraint_isValid;
}

bool OAICreateBucketRequest_CreateBucketConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBucketRequest_CreateBucketConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
