/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceSelectionCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceSelectionCriteria::OAISourceSelectionCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceSelectionCriteria::OAISourceSelectionCriteria() {
    this->initializeModel();
}

OAISourceSelectionCriteria::~OAISourceSelectionCriteria() {}

void OAISourceSelectionCriteria::initializeModel() {

    m_sse_kms_encrypted_objects_isSet = false;
    m_sse_kms_encrypted_objects_isValid = false;

    m_replica_modifications_isSet = false;
    m_replica_modifications_isValid = false;
}

void OAISourceSelectionCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceSelectionCriteria::fromJsonObject(QJsonObject json) {

    m_sse_kms_encrypted_objects_isValid = ::OpenAPI::fromJsonValue(m_sse_kms_encrypted_objects, json[QString("SseKmsEncryptedObjects")]);
    m_sse_kms_encrypted_objects_isSet = !json[QString("SseKmsEncryptedObjects")].isNull() && m_sse_kms_encrypted_objects_isValid;

    m_replica_modifications_isValid = ::OpenAPI::fromJsonValue(m_replica_modifications, json[QString("ReplicaModifications")]);
    m_replica_modifications_isSet = !json[QString("ReplicaModifications")].isNull() && m_replica_modifications_isValid;
}

QString OAISourceSelectionCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceSelectionCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_sse_kms_encrypted_objects.isSet()) {
        obj.insert(QString("SseKmsEncryptedObjects"), ::OpenAPI::toJsonValue(m_sse_kms_encrypted_objects));
    }
    if (m_replica_modifications.isSet()) {
        obj.insert(QString("ReplicaModifications"), ::OpenAPI::toJsonValue(m_replica_modifications));
    }
    return obj;
}

OAISourceSelectionCriteria_SseKmsEncryptedObjects OAISourceSelectionCriteria::getSseKmsEncryptedObjects() const {
    return m_sse_kms_encrypted_objects;
}
void OAISourceSelectionCriteria::setSseKmsEncryptedObjects(const OAISourceSelectionCriteria_SseKmsEncryptedObjects &sse_kms_encrypted_objects) {
    m_sse_kms_encrypted_objects = sse_kms_encrypted_objects;
    m_sse_kms_encrypted_objects_isSet = true;
}

bool OAISourceSelectionCriteria::is_sse_kms_encrypted_objects_Set() const{
    return m_sse_kms_encrypted_objects_isSet;
}

bool OAISourceSelectionCriteria::is_sse_kms_encrypted_objects_Valid() const{
    return m_sse_kms_encrypted_objects_isValid;
}

OAISourceSelectionCriteria_ReplicaModifications OAISourceSelectionCriteria::getReplicaModifications() const {
    return m_replica_modifications;
}
void OAISourceSelectionCriteria::setReplicaModifications(const OAISourceSelectionCriteria_ReplicaModifications &replica_modifications) {
    m_replica_modifications = replica_modifications;
    m_replica_modifications_isSet = true;
}

bool OAISourceSelectionCriteria::is_replica_modifications_Set() const{
    return m_replica_modifications_isSet;
}

bool OAISourceSelectionCriteria::is_replica_modifications_Valid() const{
    return m_replica_modifications_isValid;
}

bool OAISourceSelectionCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sse_kms_encrypted_objects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_modifications.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceSelectionCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
