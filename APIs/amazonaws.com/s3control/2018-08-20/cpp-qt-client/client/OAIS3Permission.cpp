/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Permission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Permission::OAIS3Permission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Permission::OAIS3Permission() {
    this->initializeModel();
}

OAIS3Permission::~OAIS3Permission() {}

void OAIS3Permission::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIS3Permission::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIS3Permission::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FULL_CONTROL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3Permission::FULL_CONTROL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3Permission::READ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WRITE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3Permission::WRITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READ_ACP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3Permission::READ_ACP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WRITE_ACP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3Permission::WRITE_ACP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIS3Permission::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIS3Permission::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIS3Permission::FULL_CONTROL:
            val = "FULL_CONTROL";
            break;
        case eOAIS3Permission::READ:
            val = "READ";
            break;
        case eOAIS3Permission::WRITE:
            val = "WRITE";
            break;
        case eOAIS3Permission::READ_ACP:
            val = "READ_ACP";
            break;
        case eOAIS3Permission::WRITE_ACP:
            val = "WRITE_ACP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIS3Permission::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIS3Permission::eOAIS3Permission OAIS3Permission::getValue() const {
    return m_value;
}

void OAIS3Permission::setValue(const OAIS3Permission::eOAIS3Permission& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIS3Permission::isSet() const {
    
    return m_value_isSet;
}

bool OAIS3Permission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
