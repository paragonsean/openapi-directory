/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3AccessControlPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3AccessControlPolicy::OAIS3AccessControlPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3AccessControlPolicy::OAIS3AccessControlPolicy() {
    this->initializeModel();
}

OAIS3AccessControlPolicy::~OAIS3AccessControlPolicy() {}

void OAIS3AccessControlPolicy::initializeModel() {

    m_access_control_list_isSet = false;
    m_access_control_list_isValid = false;

    m_canned_access_control_list_isSet = false;
    m_canned_access_control_list_isValid = false;
}

void OAIS3AccessControlPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3AccessControlPolicy::fromJsonObject(QJsonObject json) {

    m_access_control_list_isValid = ::OpenAPI::fromJsonValue(m_access_control_list, json[QString("AccessControlList")]);
    m_access_control_list_isSet = !json[QString("AccessControlList")].isNull() && m_access_control_list_isValid;

    m_canned_access_control_list_isValid = ::OpenAPI::fromJsonValue(m_canned_access_control_list, json[QString("CannedAccessControlList")]);
    m_canned_access_control_list_isSet = !json[QString("CannedAccessControlList")].isNull() && m_canned_access_control_list_isValid;
}

QString OAIS3AccessControlPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3AccessControlPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_access_control_list.isSet()) {
        obj.insert(QString("AccessControlList"), ::OpenAPI::toJsonValue(m_access_control_list));
    }
    if (m_canned_access_control_list.isSet()) {
        obj.insert(QString("CannedAccessControlList"), ::OpenAPI::toJsonValue(m_canned_access_control_list));
    }
    return obj;
}

OAIS3AccessControlPolicy_AccessControlList OAIS3AccessControlPolicy::getAccessControlList() const {
    return m_access_control_list;
}
void OAIS3AccessControlPolicy::setAccessControlList(const OAIS3AccessControlPolicy_AccessControlList &access_control_list) {
    m_access_control_list = access_control_list;
    m_access_control_list_isSet = true;
}

bool OAIS3AccessControlPolicy::is_access_control_list_Set() const{
    return m_access_control_list_isSet;
}

bool OAIS3AccessControlPolicy::is_access_control_list_Valid() const{
    return m_access_control_list_isValid;
}

OAIS3CannedAccessControlList OAIS3AccessControlPolicy::getCannedAccessControlList() const {
    return m_canned_access_control_list;
}
void OAIS3AccessControlPolicy::setCannedAccessControlList(const OAIS3CannedAccessControlList &canned_access_control_list) {
    m_canned_access_control_list = canned_access_control_list;
    m_canned_access_control_list_isSet = true;
}

bool OAIS3AccessControlPolicy::is_canned_access_control_list_Set() const{
    return m_canned_access_control_list_isSet;
}

bool OAIS3AccessControlPolicy::is_canned_access_control_list_Valid() const{
    return m_canned_access_control_list_isValid;
}

bool OAIS3AccessControlPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_control_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canned_access_control_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3AccessControlPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
