/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3AccessControlList_Owner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3AccessControlList_Owner::OAIS3AccessControlList_Owner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3AccessControlList_Owner::OAIS3AccessControlList_Owner() {
    this->initializeModel();
}

OAIS3AccessControlList_Owner::~OAIS3AccessControlList_Owner() {}

void OAIS3AccessControlList_Owner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;
}

void OAIS3AccessControlList_Owner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3AccessControlList_Owner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;
}

QString OAIS3AccessControlList_Owner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3AccessControlList_Owner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    return obj;
}

QString OAIS3AccessControlList_Owner::getId() const {
    return m_id;
}
void OAIS3AccessControlList_Owner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIS3AccessControlList_Owner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIS3AccessControlList_Owner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIS3AccessControlList_Owner::getDisplayName() const {
    return m_display_name;
}
void OAIS3AccessControlList_Owner::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIS3AccessControlList_Owner::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIS3AccessControlList_Owner::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIS3AccessControlList_Owner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3AccessControlList_Owner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
