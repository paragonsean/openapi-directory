/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketLocationConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketLocationConstraint::OAIBucketLocationConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketLocationConstraint::OAIBucketLocationConstraint() {
    this->initializeModel();
}

OAIBucketLocationConstraint::~OAIBucketLocationConstraint() {}

void OAIBucketLocationConstraint::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBucketLocationConstraint::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBucketLocationConstraint::fromJson(QString jsonString) {
    
    if ( jsonString.compare("EU", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::EU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eu-west-1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::EU_WEST_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("us-west-1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::US_WEST_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("us-west-2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::US_WEST_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ap-south-1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::AP_SOUTH_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ap-southeast-1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::AP_SOUTHEAST_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ap-southeast-2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::AP_SOUTHEAST_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ap-northeast-1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::AP_NORTHEAST_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sa-east-1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::SA_EAST_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cn-north-1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::CN_NORTH_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eu-central-1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBucketLocationConstraint::EU_CENTRAL_1;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBucketLocationConstraint::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBucketLocationConstraint::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBucketLocationConstraint::EU:
            val = "EU";
            break;
        case eOAIBucketLocationConstraint::EU_WEST_1:
            val = "eu-west-1";
            break;
        case eOAIBucketLocationConstraint::US_WEST_1:
            val = "us-west-1";
            break;
        case eOAIBucketLocationConstraint::US_WEST_2:
            val = "us-west-2";
            break;
        case eOAIBucketLocationConstraint::AP_SOUTH_1:
            val = "ap-south-1";
            break;
        case eOAIBucketLocationConstraint::AP_SOUTHEAST_1:
            val = "ap-southeast-1";
            break;
        case eOAIBucketLocationConstraint::AP_SOUTHEAST_2:
            val = "ap-southeast-2";
            break;
        case eOAIBucketLocationConstraint::AP_NORTHEAST_1:
            val = "ap-northeast-1";
            break;
        case eOAIBucketLocationConstraint::SA_EAST_1:
            val = "sa-east-1";
            break;
        case eOAIBucketLocationConstraint::CN_NORTH_1:
            val = "cn-north-1";
            break;
        case eOAIBucketLocationConstraint::EU_CENTRAL_1:
            val = "eu-central-1";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBucketLocationConstraint::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBucketLocationConstraint::eOAIBucketLocationConstraint OAIBucketLocationConstraint::getValue() const {
    return m_value;
}

void OAIBucketLocationConstraint::setValue(const OAIBucketLocationConstraint::eOAIBucketLocationConstraint& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBucketLocationConstraint::isSet() const {
    
    return m_value_isSet;
}

bool OAIBucketLocationConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
