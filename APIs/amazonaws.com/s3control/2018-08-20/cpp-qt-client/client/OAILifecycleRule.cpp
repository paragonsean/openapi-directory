/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifecycleRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifecycleRule::OAILifecycleRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifecycleRule::OAILifecycleRule() {
    this->initializeModel();
}

OAILifecycleRule::~OAILifecycleRule() {}

void OAILifecycleRule::initializeModel() {

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transitions_isSet = false;
    m_transitions_isValid = false;

    m_noncurrent_version_transitions_isSet = false;
    m_noncurrent_version_transitions_isValid = false;

    m_noncurrent_version_expiration_isSet = false;
    m_noncurrent_version_expiration_isValid = false;

    m_abort_incomplete_multipart_upload_isSet = false;
    m_abort_incomplete_multipart_upload_isValid = false;
}

void OAILifecycleRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILifecycleRule::fromJsonObject(QJsonObject json) {

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("Expiration")]);
    m_expiration_isSet = !json[QString("Expiration")].isNull() && m_expiration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_transitions_isValid = ::OpenAPI::fromJsonValue(m_transitions, json[QString("Transitions")]);
    m_transitions_isSet = !json[QString("Transitions")].isNull() && m_transitions_isValid;

    m_noncurrent_version_transitions_isValid = ::OpenAPI::fromJsonValue(m_noncurrent_version_transitions, json[QString("NoncurrentVersionTransitions")]);
    m_noncurrent_version_transitions_isSet = !json[QString("NoncurrentVersionTransitions")].isNull() && m_noncurrent_version_transitions_isValid;

    m_noncurrent_version_expiration_isValid = ::OpenAPI::fromJsonValue(m_noncurrent_version_expiration, json[QString("NoncurrentVersionExpiration")]);
    m_noncurrent_version_expiration_isSet = !json[QString("NoncurrentVersionExpiration")].isNull() && m_noncurrent_version_expiration_isValid;

    m_abort_incomplete_multipart_upload_isValid = ::OpenAPI::fromJsonValue(m_abort_incomplete_multipart_upload, json[QString("AbortIncompleteMultipartUpload")]);
    m_abort_incomplete_multipart_upload_isSet = !json[QString("AbortIncompleteMultipartUpload")].isNull() && m_abort_incomplete_multipart_upload_isValid;
}

QString OAILifecycleRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILifecycleRule::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration.isSet()) {
        obj.insert(QString("Expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transitions.isSet()) {
        obj.insert(QString("Transitions"), ::OpenAPI::toJsonValue(m_transitions));
    }
    if (m_noncurrent_version_transitions.isSet()) {
        obj.insert(QString("NoncurrentVersionTransitions"), ::OpenAPI::toJsonValue(m_noncurrent_version_transitions));
    }
    if (m_noncurrent_version_expiration.isSet()) {
        obj.insert(QString("NoncurrentVersionExpiration"), ::OpenAPI::toJsonValue(m_noncurrent_version_expiration));
    }
    if (m_abort_incomplete_multipart_upload.isSet()) {
        obj.insert(QString("AbortIncompleteMultipartUpload"), ::OpenAPI::toJsonValue(m_abort_incomplete_multipart_upload));
    }
    return obj;
}

OAILifecycleRule_Expiration OAILifecycleRule::getExpiration() const {
    return m_expiration;
}
void OAILifecycleRule::setExpiration(const OAILifecycleRule_Expiration &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAILifecycleRule::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAILifecycleRule::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAILifecycleRule::getId() const {
    return m_id;
}
void OAILifecycleRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILifecycleRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAILifecycleRule::is_id_Valid() const{
    return m_id_isValid;
}

OAILifecycleRule_Filter OAILifecycleRule::getFilter() const {
    return m_filter;
}
void OAILifecycleRule::setFilter(const OAILifecycleRule_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAILifecycleRule::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAILifecycleRule::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIExpirationStatus OAILifecycleRule::getStatus() const {
    return m_status;
}
void OAILifecycleRule::setStatus(const OAIExpirationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILifecycleRule::is_status_Set() const{
    return m_status_isSet;
}

bool OAILifecycleRule::is_status_Valid() const{
    return m_status_isValid;
}

QList OAILifecycleRule::getTransitions() const {
    return m_transitions;
}
void OAILifecycleRule::setTransitions(const QList &transitions) {
    m_transitions = transitions;
    m_transitions_isSet = true;
}

bool OAILifecycleRule::is_transitions_Set() const{
    return m_transitions_isSet;
}

bool OAILifecycleRule::is_transitions_Valid() const{
    return m_transitions_isValid;
}

QList OAILifecycleRule::getNoncurrentVersionTransitions() const {
    return m_noncurrent_version_transitions;
}
void OAILifecycleRule::setNoncurrentVersionTransitions(const QList &noncurrent_version_transitions) {
    m_noncurrent_version_transitions = noncurrent_version_transitions;
    m_noncurrent_version_transitions_isSet = true;
}

bool OAILifecycleRule::is_noncurrent_version_transitions_Set() const{
    return m_noncurrent_version_transitions_isSet;
}

bool OAILifecycleRule::is_noncurrent_version_transitions_Valid() const{
    return m_noncurrent_version_transitions_isValid;
}

OAILifecycleRule_NoncurrentVersionExpiration OAILifecycleRule::getNoncurrentVersionExpiration() const {
    return m_noncurrent_version_expiration;
}
void OAILifecycleRule::setNoncurrentVersionExpiration(const OAILifecycleRule_NoncurrentVersionExpiration &noncurrent_version_expiration) {
    m_noncurrent_version_expiration = noncurrent_version_expiration;
    m_noncurrent_version_expiration_isSet = true;
}

bool OAILifecycleRule::is_noncurrent_version_expiration_Set() const{
    return m_noncurrent_version_expiration_isSet;
}

bool OAILifecycleRule::is_noncurrent_version_expiration_Valid() const{
    return m_noncurrent_version_expiration_isValid;
}

OAILifecycleRule_AbortIncompleteMultipartUpload OAILifecycleRule::getAbortIncompleteMultipartUpload() const {
    return m_abort_incomplete_multipart_upload;
}
void OAILifecycleRule::setAbortIncompleteMultipartUpload(const OAILifecycleRule_AbortIncompleteMultipartUpload &abort_incomplete_multipart_upload) {
    m_abort_incomplete_multipart_upload = abort_incomplete_multipart_upload;
    m_abort_incomplete_multipart_upload_isSet = true;
}

bool OAILifecycleRule::is_abort_incomplete_multipart_upload_Set() const{
    return m_abort_incomplete_multipart_upload_isSet;
}

bool OAILifecycleRule::is_abort_incomplete_multipart_upload_Valid() const{
    return m_abort_incomplete_multipart_upload_isValid;
}

bool OAILifecycleRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_noncurrent_version_transitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_noncurrent_version_expiration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_abort_incomplete_multipart_upload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILifecycleRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
