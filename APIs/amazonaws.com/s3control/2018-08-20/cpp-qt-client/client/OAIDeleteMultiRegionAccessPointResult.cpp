/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteMultiRegionAccessPointResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteMultiRegionAccessPointResult::OAIDeleteMultiRegionAccessPointResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteMultiRegionAccessPointResult::OAIDeleteMultiRegionAccessPointResult() {
    this->initializeModel();
}

OAIDeleteMultiRegionAccessPointResult::~OAIDeleteMultiRegionAccessPointResult() {}

void OAIDeleteMultiRegionAccessPointResult::initializeModel() {

    m_request_token_arn_isSet = false;
    m_request_token_arn_isValid = false;
}

void OAIDeleteMultiRegionAccessPointResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteMultiRegionAccessPointResult::fromJsonObject(QJsonObject json) {

    m_request_token_arn_isValid = ::OpenAPI::fromJsonValue(m_request_token_arn, json[QString("RequestTokenARN")]);
    m_request_token_arn_isSet = !json[QString("RequestTokenARN")].isNull() && m_request_token_arn_isValid;
}

QString OAIDeleteMultiRegionAccessPointResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteMultiRegionAccessPointResult::asJsonObject() const {
    QJsonObject obj;
    if (m_request_token_arn_isSet) {
        obj.insert(QString("RequestTokenARN"), ::OpenAPI::toJsonValue(m_request_token_arn));
    }
    return obj;
}

QString OAIDeleteMultiRegionAccessPointResult::getRequestTokenArn() const {
    return m_request_token_arn;
}
void OAIDeleteMultiRegionAccessPointResult::setRequestTokenArn(const QString &request_token_arn) {
    m_request_token_arn = request_token_arn;
    m_request_token_arn_isSet = true;
}

bool OAIDeleteMultiRegionAccessPointResult::is_request_token_arn_Set() const{
    return m_request_token_arn_isSet;
}

bool OAIDeleteMultiRegionAccessPointResult::is_request_token_arn_Valid() const{
    return m_request_token_arn_isValid;
}

bool OAIDeleteMultiRegionAccessPointResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_token_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteMultiRegionAccessPointResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
