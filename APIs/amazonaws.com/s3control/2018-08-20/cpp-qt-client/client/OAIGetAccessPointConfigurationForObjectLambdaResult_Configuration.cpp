/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration() {
    this->initializeModel();
}

OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::~OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration() {}

void OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::initializeModel() {

    m_supporting_access_point_isSet = false;
    m_supporting_access_point_isValid = false;

    m_cloud_watch_metrics_enabled_isSet = false;
    m_cloud_watch_metrics_enabled_isValid = false;

    m_allowed_features_isSet = false;
    m_allowed_features_isValid = false;

    m_transformation_configurations_isSet = false;
    m_transformation_configurations_isValid = false;
}

void OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::fromJsonObject(QJsonObject json) {

    m_supporting_access_point_isValid = ::OpenAPI::fromJsonValue(m_supporting_access_point, json[QString("SupportingAccessPoint")]);
    m_supporting_access_point_isSet = !json[QString("SupportingAccessPoint")].isNull() && m_supporting_access_point_isValid;

    m_cloud_watch_metrics_enabled_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_metrics_enabled, json[QString("CloudWatchMetricsEnabled")]);
    m_cloud_watch_metrics_enabled_isSet = !json[QString("CloudWatchMetricsEnabled")].isNull() && m_cloud_watch_metrics_enabled_isValid;

    m_allowed_features_isValid = ::OpenAPI::fromJsonValue(m_allowed_features, json[QString("AllowedFeatures")]);
    m_allowed_features_isSet = !json[QString("AllowedFeatures")].isNull() && m_allowed_features_isValid;

    m_transformation_configurations_isValid = ::OpenAPI::fromJsonValue(m_transformation_configurations, json[QString("TransformationConfigurations")]);
    m_transformation_configurations_isSet = !json[QString("TransformationConfigurations")].isNull() && m_transformation_configurations_isValid;
}

QString OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_supporting_access_point_isSet) {
        obj.insert(QString("SupportingAccessPoint"), ::OpenAPI::toJsonValue(m_supporting_access_point));
    }
    if (m_cloud_watch_metrics_enabled_isSet) {
        obj.insert(QString("CloudWatchMetricsEnabled"), ::OpenAPI::toJsonValue(m_cloud_watch_metrics_enabled));
    }
    if (m_allowed_features.isSet()) {
        obj.insert(QString("AllowedFeatures"), ::OpenAPI::toJsonValue(m_allowed_features));
    }
    if (m_transformation_configurations.isSet()) {
        obj.insert(QString("TransformationConfigurations"), ::OpenAPI::toJsonValue(m_transformation_configurations));
    }
    return obj;
}

QString OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::getSupportingAccessPoint() const {
    return m_supporting_access_point;
}
void OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::setSupportingAccessPoint(const QString &supporting_access_point) {
    m_supporting_access_point = supporting_access_point;
    m_supporting_access_point_isSet = true;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::is_supporting_access_point_Set() const{
    return m_supporting_access_point_isSet;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::is_supporting_access_point_Valid() const{
    return m_supporting_access_point_isValid;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::getCloudWatchMetricsEnabled() const {
    return m_cloud_watch_metrics_enabled;
}
void OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::setCloudWatchMetricsEnabled(const bool &cloud_watch_metrics_enabled) {
    m_cloud_watch_metrics_enabled = cloud_watch_metrics_enabled;
    m_cloud_watch_metrics_enabled_isSet = true;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::is_cloud_watch_metrics_enabled_Set() const{
    return m_cloud_watch_metrics_enabled_isSet;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::is_cloud_watch_metrics_enabled_Valid() const{
    return m_cloud_watch_metrics_enabled_isValid;
}

QList OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::getAllowedFeatures() const {
    return m_allowed_features;
}
void OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::setAllowedFeatures(const QList &allowed_features) {
    m_allowed_features = allowed_features;
    m_allowed_features_isSet = true;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::is_allowed_features_Set() const{
    return m_allowed_features_isSet;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::is_allowed_features_Valid() const{
    return m_allowed_features_isValid;
}

QList OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::getTransformationConfigurations() const {
    return m_transformation_configurations;
}
void OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::setTransformationConfigurations(const QList &transformation_configurations) {
    m_transformation_configurations = transformation_configurations;
    m_transformation_configurations_isSet = true;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::is_transformation_configurations_Set() const{
    return m_transformation_configurations_isSet;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::is_transformation_configurations_Valid() const{
    return m_transformation_configurations_isValid;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_supporting_access_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_metrics_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_features.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAccessPointConfigurationForObjectLambdaResult_Configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_supporting_access_point_isValid && m_transformation_configurations_isValid && true;
}

} // namespace OpenAPI
