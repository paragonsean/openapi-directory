/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3JobManifestGenerator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3JobManifestGenerator::OAIS3JobManifestGenerator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3JobManifestGenerator::OAIS3JobManifestGenerator() {
    this->initializeModel();
}

OAIS3JobManifestGenerator::~OAIS3JobManifestGenerator() {}

void OAIS3JobManifestGenerator::initializeModel() {

    m_expected_bucket_owner_isSet = false;
    m_expected_bucket_owner_isValid = false;

    m_source_bucket_isSet = false;
    m_source_bucket_isValid = false;

    m_manifest_output_location_isSet = false;
    m_manifest_output_location_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_enable_manifest_output_isSet = false;
    m_enable_manifest_output_isValid = false;
}

void OAIS3JobManifestGenerator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3JobManifestGenerator::fromJsonObject(QJsonObject json) {

    m_expected_bucket_owner_isValid = ::OpenAPI::fromJsonValue(m_expected_bucket_owner, json[QString("ExpectedBucketOwner")]);
    m_expected_bucket_owner_isSet = !json[QString("ExpectedBucketOwner")].isNull() && m_expected_bucket_owner_isValid;

    m_source_bucket_isValid = ::OpenAPI::fromJsonValue(m_source_bucket, json[QString("SourceBucket")]);
    m_source_bucket_isSet = !json[QString("SourceBucket")].isNull() && m_source_bucket_isValid;

    m_manifest_output_location_isValid = ::OpenAPI::fromJsonValue(m_manifest_output_location, json[QString("ManifestOutputLocation")]);
    m_manifest_output_location_isSet = !json[QString("ManifestOutputLocation")].isNull() && m_manifest_output_location_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_enable_manifest_output_isValid = ::OpenAPI::fromJsonValue(m_enable_manifest_output, json[QString("EnableManifestOutput")]);
    m_enable_manifest_output_isSet = !json[QString("EnableManifestOutput")].isNull() && m_enable_manifest_output_isValid;
}

QString OAIS3JobManifestGenerator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3JobManifestGenerator::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_bucket_owner_isSet) {
        obj.insert(QString("ExpectedBucketOwner"), ::OpenAPI::toJsonValue(m_expected_bucket_owner));
    }
    if (m_source_bucket_isSet) {
        obj.insert(QString("SourceBucket"), ::OpenAPI::toJsonValue(m_source_bucket));
    }
    if (m_manifest_output_location.isSet()) {
        obj.insert(QString("ManifestOutputLocation"), ::OpenAPI::toJsonValue(m_manifest_output_location));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_enable_manifest_output_isSet) {
        obj.insert(QString("EnableManifestOutput"), ::OpenAPI::toJsonValue(m_enable_manifest_output));
    }
    return obj;
}

QString OAIS3JobManifestGenerator::getExpectedBucketOwner() const {
    return m_expected_bucket_owner;
}
void OAIS3JobManifestGenerator::setExpectedBucketOwner(const QString &expected_bucket_owner) {
    m_expected_bucket_owner = expected_bucket_owner;
    m_expected_bucket_owner_isSet = true;
}

bool OAIS3JobManifestGenerator::is_expected_bucket_owner_Set() const{
    return m_expected_bucket_owner_isSet;
}

bool OAIS3JobManifestGenerator::is_expected_bucket_owner_Valid() const{
    return m_expected_bucket_owner_isValid;
}

QString OAIS3JobManifestGenerator::getSourceBucket() const {
    return m_source_bucket;
}
void OAIS3JobManifestGenerator::setSourceBucket(const QString &source_bucket) {
    m_source_bucket = source_bucket;
    m_source_bucket_isSet = true;
}

bool OAIS3JobManifestGenerator::is_source_bucket_Set() const{
    return m_source_bucket_isSet;
}

bool OAIS3JobManifestGenerator::is_source_bucket_Valid() const{
    return m_source_bucket_isValid;
}

OAIS3JobManifestGenerator_ManifestOutputLocation OAIS3JobManifestGenerator::getManifestOutputLocation() const {
    return m_manifest_output_location;
}
void OAIS3JobManifestGenerator::setManifestOutputLocation(const OAIS3JobManifestGenerator_ManifestOutputLocation &manifest_output_location) {
    m_manifest_output_location = manifest_output_location;
    m_manifest_output_location_isSet = true;
}

bool OAIS3JobManifestGenerator::is_manifest_output_location_Set() const{
    return m_manifest_output_location_isSet;
}

bool OAIS3JobManifestGenerator::is_manifest_output_location_Valid() const{
    return m_manifest_output_location_isValid;
}

OAIS3JobManifestGenerator_Filter OAIS3JobManifestGenerator::getFilter() const {
    return m_filter;
}
void OAIS3JobManifestGenerator::setFilter(const OAIS3JobManifestGenerator_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIS3JobManifestGenerator::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIS3JobManifestGenerator::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAIS3JobManifestGenerator::getEnableManifestOutput() const {
    return m_enable_manifest_output;
}
void OAIS3JobManifestGenerator::setEnableManifestOutput(const bool &enable_manifest_output) {
    m_enable_manifest_output = enable_manifest_output;
    m_enable_manifest_output_isSet = true;
}

bool OAIS3JobManifestGenerator::is_enable_manifest_output_Set() const{
    return m_enable_manifest_output_isSet;
}

bool OAIS3JobManifestGenerator::is_enable_manifest_output_Valid() const{
    return m_enable_manifest_output_isValid;
}

bool OAIS3JobManifestGenerator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_bucket_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_output_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_manifest_output_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3JobManifestGenerator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_bucket_isValid && m_enable_manifest_output_isValid && true;
}

} // namespace OpenAPI
