/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutBucketTaggingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutBucketTaggingRequest::OAIPutBucketTaggingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutBucketTaggingRequest::OAIPutBucketTaggingRequest() {
    this->initializeModel();
}

OAIPutBucketTaggingRequest::~OAIPutBucketTaggingRequest() {}

void OAIPutBucketTaggingRequest::initializeModel() {

    m_tagging_isSet = false;
    m_tagging_isValid = false;
}

void OAIPutBucketTaggingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutBucketTaggingRequest::fromJsonObject(QJsonObject json) {

    m_tagging_isValid = ::OpenAPI::fromJsonValue(m_tagging, json[QString("Tagging")]);
    m_tagging_isSet = !json[QString("Tagging")].isNull() && m_tagging_isValid;
}

QString OAIPutBucketTaggingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutBucketTaggingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_tagging.isSet()) {
        obj.insert(QString("Tagging"), ::OpenAPI::toJsonValue(m_tagging));
    }
    return obj;
}

OAIPutBucketTaggingRequest_Tagging OAIPutBucketTaggingRequest::getTagging() const {
    return m_tagging;
}
void OAIPutBucketTaggingRequest::setTagging(const OAIPutBucketTaggingRequest_Tagging &tagging) {
    m_tagging = tagging;
    m_tagging_isSet = true;
}

bool OAIPutBucketTaggingRequest::is_tagging_Set() const{
    return m_tagging_isSet;
}

bool OAIPutBucketTaggingRequest::is_tagging_Valid() const{
    return m_tagging_isValid;
}

bool OAIPutBucketTaggingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tagging.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutBucketTaggingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tagging_isValid && true;
}

} // namespace OpenAPI
