/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3ManifestOutputLocation_ManifestEncryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3ManifestOutputLocation_ManifestEncryption::OAIS3ManifestOutputLocation_ManifestEncryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3ManifestOutputLocation_ManifestEncryption::OAIS3ManifestOutputLocation_ManifestEncryption() {
    this->initializeModel();
}

OAIS3ManifestOutputLocation_ManifestEncryption::~OAIS3ManifestOutputLocation_ManifestEncryption() {}

void OAIS3ManifestOutputLocation_ManifestEncryption::initializeModel() {

    m_sses3_isSet = false;
    m_sses3_isValid = false;

    m_ssekms_isSet = false;
    m_ssekms_isValid = false;
}

void OAIS3ManifestOutputLocation_ManifestEncryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3ManifestOutputLocation_ManifestEncryption::fromJsonObject(QJsonObject json) {

    m_sses3_isValid = ::OpenAPI::fromJsonValue(m_sses3, json[QString("SSES3")]);
    m_sses3_isSet = !json[QString("SSES3")].isNull() && m_sses3_isValid;

    m_ssekms_isValid = ::OpenAPI::fromJsonValue(m_ssekms, json[QString("SSEKMS")]);
    m_ssekms_isSet = !json[QString("SSEKMS")].isNull() && m_ssekms_isValid;
}

QString OAIS3ManifestOutputLocation_ManifestEncryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3ManifestOutputLocation_ManifestEncryption::asJsonObject() const {
    QJsonObject obj;
    if (m_sses3.isSet()) {
        obj.insert(QString("SSES3"), ::OpenAPI::toJsonValue(m_sses3));
    }
    if (m_ssekms.isSet()) {
        obj.insert(QString("SSEKMS"), ::OpenAPI::toJsonValue(m_ssekms));
    }
    return obj;
}

OAIObject OAIS3ManifestOutputLocation_ManifestEncryption::getSses3() const {
    return m_sses3;
}
void OAIS3ManifestOutputLocation_ManifestEncryption::setSses3(const OAIObject &sses3) {
    m_sses3 = sses3;
    m_sses3_isSet = true;
}

bool OAIS3ManifestOutputLocation_ManifestEncryption::is_sses3_Set() const{
    return m_sses3_isSet;
}

bool OAIS3ManifestOutputLocation_ManifestEncryption::is_sses3_Valid() const{
    return m_sses3_isValid;
}

OAIGeneratedManifestEncryption_SSEKMS OAIS3ManifestOutputLocation_ManifestEncryption::getSsekms() const {
    return m_ssekms;
}
void OAIS3ManifestOutputLocation_ManifestEncryption::setSsekms(const OAIGeneratedManifestEncryption_SSEKMS &ssekms) {
    m_ssekms = ssekms;
    m_ssekms_isSet = true;
}

bool OAIS3ManifestOutputLocation_ManifestEncryption::is_ssekms_Set() const{
    return m_ssekms_isSet;
}

bool OAIS3ManifestOutputLocation_ManifestEncryption::is_ssekms_Valid() const{
    return m_ssekms_isValid;
}

bool OAIS3ManifestOutputLocation_ManifestEncryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sses3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssekms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3ManifestOutputLocation_ManifestEncryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
