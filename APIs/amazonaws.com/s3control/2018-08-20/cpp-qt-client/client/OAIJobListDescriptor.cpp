/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobListDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobListDescriptor::OAIJobListDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobListDescriptor::OAIJobListDescriptor() {
    this->initializeModel();
}

OAIJobListDescriptor::~OAIJobListDescriptor() {}

void OAIJobListDescriptor::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_termination_date_isSet = false;
    m_termination_date_isValid = false;

    m_progress_summary_isSet = false;
    m_progress_summary_isValid = false;
}

void OAIJobListDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobListDescriptor::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("Operation")]);
    m_operation_isSet = !json[QString("Operation")].isNull() && m_operation_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_termination_date_isValid = ::OpenAPI::fromJsonValue(m_termination_date, json[QString("TerminationDate")]);
    m_termination_date_isSet = !json[QString("TerminationDate")].isNull() && m_termination_date_isValid;

    m_progress_summary_isValid = ::OpenAPI::fromJsonValue(m_progress_summary, json[QString("ProgressSummary")]);
    m_progress_summary_isSet = !json[QString("ProgressSummary")].isNull() && m_progress_summary_isValid;
}

QString OAIJobListDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobListDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_operation.isSet()) {
        obj.insert(QString("Operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_termination_date_isSet) {
        obj.insert(QString("TerminationDate"), ::OpenAPI::toJsonValue(m_termination_date));
    }
    if (m_progress_summary.isSet()) {
        obj.insert(QString("ProgressSummary"), ::OpenAPI::toJsonValue(m_progress_summary));
    }
    return obj;
}

QString OAIJobListDescriptor::getJobId() const {
    return m_job_id;
}
void OAIJobListDescriptor::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobListDescriptor::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobListDescriptor::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIJobListDescriptor::getDescription() const {
    return m_description;
}
void OAIJobListDescriptor::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJobListDescriptor::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJobListDescriptor::is_description_Valid() const{
    return m_description_isValid;
}

OAIOperationName OAIJobListDescriptor::getOperation() const {
    return m_operation;
}
void OAIJobListDescriptor::setOperation(const OAIOperationName &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIJobListDescriptor::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIJobListDescriptor::is_operation_Valid() const{
    return m_operation_isValid;
}

qint32 OAIJobListDescriptor::getPriority() const {
    return m_priority;
}
void OAIJobListDescriptor::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIJobListDescriptor::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIJobListDescriptor::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIJobStatus OAIJobListDescriptor::getStatus() const {
    return m_status;
}
void OAIJobListDescriptor::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobListDescriptor::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobListDescriptor::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIJobListDescriptor::getCreationTime() const {
    return m_creation_time;
}
void OAIJobListDescriptor::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIJobListDescriptor::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIJobListDescriptor::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIJobListDescriptor::getTerminationDate() const {
    return m_termination_date;
}
void OAIJobListDescriptor::setTerminationDate(const QDateTime &termination_date) {
    m_termination_date = termination_date;
    m_termination_date_isSet = true;
}

bool OAIJobListDescriptor::is_termination_date_Set() const{
    return m_termination_date_isSet;
}

bool OAIJobListDescriptor::is_termination_date_Valid() const{
    return m_termination_date_isValid;
}

OAIJobDescriptor_ProgressSummary OAIJobListDescriptor::getProgressSummary() const {
    return m_progress_summary;
}
void OAIJobListDescriptor::setProgressSummary(const OAIJobDescriptor_ProgressSummary &progress_summary) {
    m_progress_summary = progress_summary;
    m_progress_summary_isSet = true;
}

bool OAIJobListDescriptor::is_progress_summary_Set() const{
    return m_progress_summary_isSet;
}

bool OAIJobListDescriptor::is_progress_summary_Valid() const{
    return m_progress_summary_isValid;
}

bool OAIJobListDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobListDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
