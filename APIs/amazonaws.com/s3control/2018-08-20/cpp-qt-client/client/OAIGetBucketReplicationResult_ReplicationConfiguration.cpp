/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBucketReplicationResult_ReplicationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBucketReplicationResult_ReplicationConfiguration::OAIGetBucketReplicationResult_ReplicationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBucketReplicationResult_ReplicationConfiguration::OAIGetBucketReplicationResult_ReplicationConfiguration() {
    this->initializeModel();
}

OAIGetBucketReplicationResult_ReplicationConfiguration::~OAIGetBucketReplicationResult_ReplicationConfiguration() {}

void OAIGetBucketReplicationResult_ReplicationConfiguration::initializeModel() {

    m_role_isSet = false;
    m_role_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIGetBucketReplicationResult_ReplicationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBucketReplicationResult_ReplicationConfiguration::fromJsonObject(QJsonObject json) {

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("Rules")]);
    m_rules_isSet = !json[QString("Rules")].isNull() && m_rules_isValid;
}

QString OAIGetBucketReplicationResult_ReplicationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBucketReplicationResult_ReplicationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("Rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

QString OAIGetBucketReplicationResult_ReplicationConfiguration::getRole() const {
    return m_role;
}
void OAIGetBucketReplicationResult_ReplicationConfiguration::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIGetBucketReplicationResult_ReplicationConfiguration::is_role_Set() const{
    return m_role_isSet;
}

bool OAIGetBucketReplicationResult_ReplicationConfiguration::is_role_Valid() const{
    return m_role_isValid;
}

QList OAIGetBucketReplicationResult_ReplicationConfiguration::getRules() const {
    return m_rules;
}
void OAIGetBucketReplicationResult_ReplicationConfiguration::setRules(const QList &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIGetBucketReplicationResult_ReplicationConfiguration::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIGetBucketReplicationResult_ReplicationConfiguration::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIGetBucketReplicationResult_ReplicationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBucketReplicationResult_ReplicationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_isValid && m_rules_isValid && true;
}

} // namespace OpenAPI
