/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationRules_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationRules_inner::OAIReplicationRules_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationRules_inner::OAIReplicationRules_inner() {
    this->initializeModel();
}

OAIReplicationRules_inner::~OAIReplicationRules_inner() {}

void OAIReplicationRules_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_source_selection_criteria_isSet = false;
    m_source_selection_criteria_isValid = false;

    m_existing_object_replication_isSet = false;
    m_existing_object_replication_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_delete_marker_replication_isSet = false;
    m_delete_marker_replication_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;
}

void OAIReplicationRules_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationRules_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_source_selection_criteria_isValid = ::OpenAPI::fromJsonValue(m_source_selection_criteria, json[QString("SourceSelectionCriteria")]);
    m_source_selection_criteria_isSet = !json[QString("SourceSelectionCriteria")].isNull() && m_source_selection_criteria_isValid;

    m_existing_object_replication_isValid = ::OpenAPI::fromJsonValue(m_existing_object_replication, json[QString("ExistingObjectReplication")]);
    m_existing_object_replication_isSet = !json[QString("ExistingObjectReplication")].isNull() && m_existing_object_replication_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_delete_marker_replication_isValid = ::OpenAPI::fromJsonValue(m_delete_marker_replication, json[QString("DeleteMarkerReplication")]);
    m_delete_marker_replication_isSet = !json[QString("DeleteMarkerReplication")].isNull() && m_delete_marker_replication_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;
}

QString OAIReplicationRules_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationRules_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_source_selection_criteria.isSet()) {
        obj.insert(QString("SourceSelectionCriteria"), ::OpenAPI::toJsonValue(m_source_selection_criteria));
    }
    if (m_existing_object_replication.isSet()) {
        obj.insert(QString("ExistingObjectReplication"), ::OpenAPI::toJsonValue(m_existing_object_replication));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_delete_marker_replication.isSet()) {
        obj.insert(QString("DeleteMarkerReplication"), ::OpenAPI::toJsonValue(m_delete_marker_replication));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    return obj;
}

QString OAIReplicationRules_inner::getId() const {
    return m_id;
}
void OAIReplicationRules_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReplicationRules_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReplicationRules_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIReplicationRules_inner::getPriority() const {
    return m_priority;
}
void OAIReplicationRules_inner::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIReplicationRules_inner::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIReplicationRules_inner::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIReplicationRules_inner::getPrefix() const {
    return m_prefix;
}
void OAIReplicationRules_inner::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIReplicationRules_inner::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIReplicationRules_inner::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAIReplicationRule_Filter OAIReplicationRules_inner::getFilter() const {
    return m_filter;
}
void OAIReplicationRules_inner::setFilter(const OAIReplicationRule_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIReplicationRules_inner::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIReplicationRules_inner::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIReplicationRuleStatus OAIReplicationRules_inner::getStatus() const {
    return m_status;
}
void OAIReplicationRules_inner::setStatus(const OAIReplicationRuleStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReplicationRules_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReplicationRules_inner::is_status_Valid() const{
    return m_status_isValid;
}

OAIReplicationRule_SourceSelectionCriteria OAIReplicationRules_inner::getSourceSelectionCriteria() const {
    return m_source_selection_criteria;
}
void OAIReplicationRules_inner::setSourceSelectionCriteria(const OAIReplicationRule_SourceSelectionCriteria &source_selection_criteria) {
    m_source_selection_criteria = source_selection_criteria;
    m_source_selection_criteria_isSet = true;
}

bool OAIReplicationRules_inner::is_source_selection_criteria_Set() const{
    return m_source_selection_criteria_isSet;
}

bool OAIReplicationRules_inner::is_source_selection_criteria_Valid() const{
    return m_source_selection_criteria_isValid;
}

OAIReplicationRule_ExistingObjectReplication OAIReplicationRules_inner::getExistingObjectReplication() const {
    return m_existing_object_replication;
}
void OAIReplicationRules_inner::setExistingObjectReplication(const OAIReplicationRule_ExistingObjectReplication &existing_object_replication) {
    m_existing_object_replication = existing_object_replication;
    m_existing_object_replication_isSet = true;
}

bool OAIReplicationRules_inner::is_existing_object_replication_Set() const{
    return m_existing_object_replication_isSet;
}

bool OAIReplicationRules_inner::is_existing_object_replication_Valid() const{
    return m_existing_object_replication_isValid;
}

OAIReplicationRule_Destination OAIReplicationRules_inner::getDestination() const {
    return m_destination;
}
void OAIReplicationRules_inner::setDestination(const OAIReplicationRule_Destination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIReplicationRules_inner::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIReplicationRules_inner::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIReplicationRule_DeleteMarkerReplication OAIReplicationRules_inner::getDeleteMarkerReplication() const {
    return m_delete_marker_replication;
}
void OAIReplicationRules_inner::setDeleteMarkerReplication(const OAIReplicationRule_DeleteMarkerReplication &delete_marker_replication) {
    m_delete_marker_replication = delete_marker_replication;
    m_delete_marker_replication_isSet = true;
}

bool OAIReplicationRules_inner::is_delete_marker_replication_Set() const{
    return m_delete_marker_replication_isSet;
}

bool OAIReplicationRules_inner::is_delete_marker_replication_Valid() const{
    return m_delete_marker_replication_isValid;
}

QString OAIReplicationRules_inner::getBucket() const {
    return m_bucket;
}
void OAIReplicationRules_inner::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIReplicationRules_inner::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIReplicationRules_inner::is_bucket_Valid() const{
    return m_bucket_isValid;
}

bool OAIReplicationRules_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_selection_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_existing_object_replication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_marker_replication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationRules_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && m_destination_isValid && m_bucket_isValid && true;
}

} // namespace OpenAPI
