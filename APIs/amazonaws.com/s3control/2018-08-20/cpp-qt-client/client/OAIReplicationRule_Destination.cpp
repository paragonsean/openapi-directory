/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationRule_Destination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationRule_Destination::OAIReplicationRule_Destination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationRule_Destination::OAIReplicationRule_Destination() {
    this->initializeModel();
}

OAIReplicationRule_Destination::~OAIReplicationRule_Destination() {}

void OAIReplicationRule_Destination::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_replication_time_isSet = false;
    m_replication_time_isValid = false;

    m_access_control_translation_isSet = false;
    m_access_control_translation_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_storage_class_isSet = false;
    m_storage_class_isValid = false;
}

void OAIReplicationRule_Destination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationRule_Destination::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("Account")]);
    m_account_isSet = !json[QString("Account")].isNull() && m_account_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_replication_time_isValid = ::OpenAPI::fromJsonValue(m_replication_time, json[QString("ReplicationTime")]);
    m_replication_time_isSet = !json[QString("ReplicationTime")].isNull() && m_replication_time_isValid;

    m_access_control_translation_isValid = ::OpenAPI::fromJsonValue(m_access_control_translation, json[QString("AccessControlTranslation")]);
    m_access_control_translation_isSet = !json[QString("AccessControlTranslation")].isNull() && m_access_control_translation_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("EncryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("EncryptionConfiguration")].isNull() && m_encryption_configuration_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;

    m_storage_class_isValid = ::OpenAPI::fromJsonValue(m_storage_class, json[QString("StorageClass")]);
    m_storage_class_isSet = !json[QString("StorageClass")].isNull() && m_storage_class_isValid;
}

QString OAIReplicationRule_Destination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationRule_Destination::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("Account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_replication_time.isSet()) {
        obj.insert(QString("ReplicationTime"), ::OpenAPI::toJsonValue(m_replication_time));
    }
    if (m_access_control_translation.isSet()) {
        obj.insert(QString("AccessControlTranslation"), ::OpenAPI::toJsonValue(m_access_control_translation));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("EncryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_storage_class.isSet()) {
        obj.insert(QString("StorageClass"), ::OpenAPI::toJsonValue(m_storage_class));
    }
    return obj;
}

QString OAIReplicationRule_Destination::getAccount() const {
    return m_account;
}
void OAIReplicationRule_Destination::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIReplicationRule_Destination::is_account_Set() const{
    return m_account_isSet;
}

bool OAIReplicationRule_Destination::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIReplicationRule_Destination::getBucket() const {
    return m_bucket;
}
void OAIReplicationRule_Destination::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIReplicationRule_Destination::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIReplicationRule_Destination::is_bucket_Valid() const{
    return m_bucket_isValid;
}

OAIDestination_ReplicationTime OAIReplicationRule_Destination::getReplicationTime() const {
    return m_replication_time;
}
void OAIReplicationRule_Destination::setReplicationTime(const OAIDestination_ReplicationTime &replication_time) {
    m_replication_time = replication_time;
    m_replication_time_isSet = true;
}

bool OAIReplicationRule_Destination::is_replication_time_Set() const{
    return m_replication_time_isSet;
}

bool OAIReplicationRule_Destination::is_replication_time_Valid() const{
    return m_replication_time_isValid;
}

OAIDestination_AccessControlTranslation OAIReplicationRule_Destination::getAccessControlTranslation() const {
    return m_access_control_translation;
}
void OAIReplicationRule_Destination::setAccessControlTranslation(const OAIDestination_AccessControlTranslation &access_control_translation) {
    m_access_control_translation = access_control_translation;
    m_access_control_translation_isSet = true;
}

bool OAIReplicationRule_Destination::is_access_control_translation_Set() const{
    return m_access_control_translation_isSet;
}

bool OAIReplicationRule_Destination::is_access_control_translation_Valid() const{
    return m_access_control_translation_isValid;
}

OAIDestination_EncryptionConfiguration OAIReplicationRule_Destination::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAIReplicationRule_Destination::setEncryptionConfiguration(const OAIDestination_EncryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAIReplicationRule_Destination::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAIReplicationRule_Destination::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

OAIDestination_Metrics OAIReplicationRule_Destination::getMetrics() const {
    return m_metrics;
}
void OAIReplicationRule_Destination::setMetrics(const OAIDestination_Metrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIReplicationRule_Destination::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIReplicationRule_Destination::is_metrics_Valid() const{
    return m_metrics_isValid;
}

OAIReplicationStorageClass OAIReplicationRule_Destination::getStorageClass() const {
    return m_storage_class;
}
void OAIReplicationRule_Destination::setStorageClass(const OAIReplicationStorageClass &storage_class) {
    m_storage_class = storage_class;
    m_storage_class_isSet = true;
}

bool OAIReplicationRule_Destination::is_storage_class_Set() const{
    return m_storage_class_isSet;
}

bool OAIReplicationRule_Destination::is_storage_class_Valid() const{
    return m_storage_class_isValid;
}

bool OAIReplicationRule_Destination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_translation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_class.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationRule_Destination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && true;
}

} // namespace OpenAPI
