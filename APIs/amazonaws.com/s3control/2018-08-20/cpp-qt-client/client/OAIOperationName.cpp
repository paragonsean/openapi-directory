/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationName::OAIOperationName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationName::OAIOperationName() {
    this->initializeModel();
}

OAIOperationName::~OAIOperationName() {}

void OAIOperationName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperationName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperationName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LambdaInvoke", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationName::LAMBDAINVOKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3PutObjectCopy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationName::S3PUTOBJECTCOPY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3PutObjectAcl", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationName::S3PUTOBJECTACL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3PutObjectTagging", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationName::S3PUTOBJECTTAGGING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3DeleteObjectTagging", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationName::S3DELETEOBJECTTAGGING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3InitiateRestoreObject", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationName::S3INITIATERESTOREOBJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3PutObjectLegalHold", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationName::S3PUTOBJECTLEGALHOLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3PutObjectRetention", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationName::S3PUTOBJECTRETENTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3ReplicateObject", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationName::S3REPLICATEOBJECT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperationName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperationName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperationName::LAMBDAINVOKE:
            val = "LambdaInvoke";
            break;
        case eOAIOperationName::S3PUTOBJECTCOPY:
            val = "S3PutObjectCopy";
            break;
        case eOAIOperationName::S3PUTOBJECTACL:
            val = "S3PutObjectAcl";
            break;
        case eOAIOperationName::S3PUTOBJECTTAGGING:
            val = "S3PutObjectTagging";
            break;
        case eOAIOperationName::S3DELETEOBJECTTAGGING:
            val = "S3DeleteObjectTagging";
            break;
        case eOAIOperationName::S3INITIATERESTOREOBJECT:
            val = "S3InitiateRestoreObject";
            break;
        case eOAIOperationName::S3PUTOBJECTLEGALHOLD:
            val = "S3PutObjectLegalHold";
            break;
        case eOAIOperationName::S3PUTOBJECTRETENTION:
            val = "S3PutObjectRetention";
            break;
        case eOAIOperationName::S3REPLICATEOBJECT:
            val = "S3ReplicateObject";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperationName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperationName::eOAIOperationName OAIOperationName::getValue() const {
    return m_value;
}

void OAIOperationName::setValue(const OAIOperationName::eOAIOperationName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperationName::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperationName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
