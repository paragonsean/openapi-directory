/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3ObjectMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3ObjectMetadata::OAIS3ObjectMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3ObjectMetadata::OAIS3ObjectMetadata() {
    this->initializeModel();
}

OAIS3ObjectMetadata::~OAIS3ObjectMetadata() {}

void OAIS3ObjectMetadata::initializeModel() {

    m_cache_control_isSet = false;
    m_cache_control_isValid = false;

    m_content_disposition_isSet = false;
    m_content_disposition_isValid = false;

    m_content_encoding_isSet = false;
    m_content_encoding_isValid = false;

    m_content_language_isSet = false;
    m_content_language_isValid = false;

    m_user_metadata_isSet = false;
    m_user_metadata_isValid = false;

    m_content_length_isSet = false;
    m_content_length_isValid = false;

    m_content_md5_isSet = false;
    m_content_md5_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_http_expires_date_isSet = false;
    m_http_expires_date_isValid = false;

    m_requester_charged_isSet = false;
    m_requester_charged_isValid = false;

    m_sse_algorithm_isSet = false;
    m_sse_algorithm_isValid = false;
}

void OAIS3ObjectMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3ObjectMetadata::fromJsonObject(QJsonObject json) {

    m_cache_control_isValid = ::OpenAPI::fromJsonValue(m_cache_control, json[QString("CacheControl")]);
    m_cache_control_isSet = !json[QString("CacheControl")].isNull() && m_cache_control_isValid;

    m_content_disposition_isValid = ::OpenAPI::fromJsonValue(m_content_disposition, json[QString("ContentDisposition")]);
    m_content_disposition_isSet = !json[QString("ContentDisposition")].isNull() && m_content_disposition_isValid;

    m_content_encoding_isValid = ::OpenAPI::fromJsonValue(m_content_encoding, json[QString("ContentEncoding")]);
    m_content_encoding_isSet = !json[QString("ContentEncoding")].isNull() && m_content_encoding_isValid;

    m_content_language_isValid = ::OpenAPI::fromJsonValue(m_content_language, json[QString("ContentLanguage")]);
    m_content_language_isSet = !json[QString("ContentLanguage")].isNull() && m_content_language_isValid;

    m_user_metadata_isValid = ::OpenAPI::fromJsonValue(m_user_metadata, json[QString("UserMetadata")]);
    m_user_metadata_isSet = !json[QString("UserMetadata")].isNull() && m_user_metadata_isValid;

    m_content_length_isValid = ::OpenAPI::fromJsonValue(m_content_length, json[QString("ContentLength")]);
    m_content_length_isSet = !json[QString("ContentLength")].isNull() && m_content_length_isValid;

    m_content_md5_isValid = ::OpenAPI::fromJsonValue(m_content_md5, json[QString("ContentMD5")]);
    m_content_md5_isSet = !json[QString("ContentMD5")].isNull() && m_content_md5_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_http_expires_date_isValid = ::OpenAPI::fromJsonValue(m_http_expires_date, json[QString("HttpExpiresDate")]);
    m_http_expires_date_isSet = !json[QString("HttpExpiresDate")].isNull() && m_http_expires_date_isValid;

    m_requester_charged_isValid = ::OpenAPI::fromJsonValue(m_requester_charged, json[QString("RequesterCharged")]);
    m_requester_charged_isSet = !json[QString("RequesterCharged")].isNull() && m_requester_charged_isValid;

    m_sse_algorithm_isValid = ::OpenAPI::fromJsonValue(m_sse_algorithm, json[QString("SSEAlgorithm")]);
    m_sse_algorithm_isSet = !json[QString("SSEAlgorithm")].isNull() && m_sse_algorithm_isValid;
}

QString OAIS3ObjectMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3ObjectMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_control_isSet) {
        obj.insert(QString("CacheControl"), ::OpenAPI::toJsonValue(m_cache_control));
    }
    if (m_content_disposition_isSet) {
        obj.insert(QString("ContentDisposition"), ::OpenAPI::toJsonValue(m_content_disposition));
    }
    if (m_content_encoding_isSet) {
        obj.insert(QString("ContentEncoding"), ::OpenAPI::toJsonValue(m_content_encoding));
    }
    if (m_content_language_isSet) {
        obj.insert(QString("ContentLanguage"), ::OpenAPI::toJsonValue(m_content_language));
    }
    if (m_user_metadata.isSet()) {
        obj.insert(QString("UserMetadata"), ::OpenAPI::toJsonValue(m_user_metadata));
    }
    if (m_content_length_isSet) {
        obj.insert(QString("ContentLength"), ::OpenAPI::toJsonValue(m_content_length));
    }
    if (m_content_md5_isSet) {
        obj.insert(QString("ContentMD5"), ::OpenAPI::toJsonValue(m_content_md5));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_http_expires_date_isSet) {
        obj.insert(QString("HttpExpiresDate"), ::OpenAPI::toJsonValue(m_http_expires_date));
    }
    if (m_requester_charged_isSet) {
        obj.insert(QString("RequesterCharged"), ::OpenAPI::toJsonValue(m_requester_charged));
    }
    if (m_sse_algorithm.isSet()) {
        obj.insert(QString("SSEAlgorithm"), ::OpenAPI::toJsonValue(m_sse_algorithm));
    }
    return obj;
}

QString OAIS3ObjectMetadata::getCacheControl() const {
    return m_cache_control;
}
void OAIS3ObjectMetadata::setCacheControl(const QString &cache_control) {
    m_cache_control = cache_control;
    m_cache_control_isSet = true;
}

bool OAIS3ObjectMetadata::is_cache_control_Set() const{
    return m_cache_control_isSet;
}

bool OAIS3ObjectMetadata::is_cache_control_Valid() const{
    return m_cache_control_isValid;
}

QString OAIS3ObjectMetadata::getContentDisposition() const {
    return m_content_disposition;
}
void OAIS3ObjectMetadata::setContentDisposition(const QString &content_disposition) {
    m_content_disposition = content_disposition;
    m_content_disposition_isSet = true;
}

bool OAIS3ObjectMetadata::is_content_disposition_Set() const{
    return m_content_disposition_isSet;
}

bool OAIS3ObjectMetadata::is_content_disposition_Valid() const{
    return m_content_disposition_isValid;
}

QString OAIS3ObjectMetadata::getContentEncoding() const {
    return m_content_encoding;
}
void OAIS3ObjectMetadata::setContentEncoding(const QString &content_encoding) {
    m_content_encoding = content_encoding;
    m_content_encoding_isSet = true;
}

bool OAIS3ObjectMetadata::is_content_encoding_Set() const{
    return m_content_encoding_isSet;
}

bool OAIS3ObjectMetadata::is_content_encoding_Valid() const{
    return m_content_encoding_isValid;
}

QString OAIS3ObjectMetadata::getContentLanguage() const {
    return m_content_language;
}
void OAIS3ObjectMetadata::setContentLanguage(const QString &content_language) {
    m_content_language = content_language;
    m_content_language_isSet = true;
}

bool OAIS3ObjectMetadata::is_content_language_Set() const{
    return m_content_language_isSet;
}

bool OAIS3ObjectMetadata::is_content_language_Valid() const{
    return m_content_language_isValid;
}

QMap OAIS3ObjectMetadata::getUserMetadata() const {
    return m_user_metadata;
}
void OAIS3ObjectMetadata::setUserMetadata(const QMap &user_metadata) {
    m_user_metadata = user_metadata;
    m_user_metadata_isSet = true;
}

bool OAIS3ObjectMetadata::is_user_metadata_Set() const{
    return m_user_metadata_isSet;
}

bool OAIS3ObjectMetadata::is_user_metadata_Valid() const{
    return m_user_metadata_isValid;
}

qint32 OAIS3ObjectMetadata::getContentLength() const {
    return m_content_length;
}
void OAIS3ObjectMetadata::setContentLength(const qint32 &content_length) {
    m_content_length = content_length;
    m_content_length_isSet = true;
}

bool OAIS3ObjectMetadata::is_content_length_Set() const{
    return m_content_length_isSet;
}

bool OAIS3ObjectMetadata::is_content_length_Valid() const{
    return m_content_length_isValid;
}

QString OAIS3ObjectMetadata::getContentMd5() const {
    return m_content_md5;
}
void OAIS3ObjectMetadata::setContentMd5(const QString &content_md5) {
    m_content_md5 = content_md5;
    m_content_md5_isSet = true;
}

bool OAIS3ObjectMetadata::is_content_md5_Set() const{
    return m_content_md5_isSet;
}

bool OAIS3ObjectMetadata::is_content_md5_Valid() const{
    return m_content_md5_isValid;
}

QString OAIS3ObjectMetadata::getContentType() const {
    return m_content_type;
}
void OAIS3ObjectMetadata::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIS3ObjectMetadata::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIS3ObjectMetadata::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QDateTime OAIS3ObjectMetadata::getHttpExpiresDate() const {
    return m_http_expires_date;
}
void OAIS3ObjectMetadata::setHttpExpiresDate(const QDateTime &http_expires_date) {
    m_http_expires_date = http_expires_date;
    m_http_expires_date_isSet = true;
}

bool OAIS3ObjectMetadata::is_http_expires_date_Set() const{
    return m_http_expires_date_isSet;
}

bool OAIS3ObjectMetadata::is_http_expires_date_Valid() const{
    return m_http_expires_date_isValid;
}

bool OAIS3ObjectMetadata::getRequesterCharged() const {
    return m_requester_charged;
}
void OAIS3ObjectMetadata::setRequesterCharged(const bool &requester_charged) {
    m_requester_charged = requester_charged;
    m_requester_charged_isSet = true;
}

bool OAIS3ObjectMetadata::is_requester_charged_Set() const{
    return m_requester_charged_isSet;
}

bool OAIS3ObjectMetadata::is_requester_charged_Valid() const{
    return m_requester_charged_isValid;
}

OAIS3SSEAlgorithm OAIS3ObjectMetadata::getSseAlgorithm() const {
    return m_sse_algorithm;
}
void OAIS3ObjectMetadata::setSseAlgorithm(const OAIS3SSEAlgorithm &sse_algorithm) {
    m_sse_algorithm = sse_algorithm;
    m_sse_algorithm_isSet = true;
}

bool OAIS3ObjectMetadata::is_sse_algorithm_Set() const{
    return m_sse_algorithm_isSet;
}

bool OAIS3ObjectMetadata::is_sse_algorithm_Valid() const{
    return m_sse_algorithm_isValid;
}

bool OAIS3ObjectMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_expires_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_charged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3ObjectMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
