/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3GeneratedManifestDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3GeneratedManifestDescriptor::OAIS3GeneratedManifestDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3GeneratedManifestDescriptor::OAIS3GeneratedManifestDescriptor() {
    this->initializeModel();
}

OAIS3GeneratedManifestDescriptor::~OAIS3GeneratedManifestDescriptor() {}

void OAIS3GeneratedManifestDescriptor::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIS3GeneratedManifestDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3GeneratedManifestDescriptor::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;
}

QString OAIS3GeneratedManifestDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3GeneratedManifestDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_location.isSet()) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

OAIGeneratedManifestFormat OAIS3GeneratedManifestDescriptor::getFormat() const {
    return m_format;
}
void OAIS3GeneratedManifestDescriptor::setFormat(const OAIGeneratedManifestFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIS3GeneratedManifestDescriptor::is_format_Set() const{
    return m_format_isSet;
}

bool OAIS3GeneratedManifestDescriptor::is_format_Valid() const{
    return m_format_isValid;
}

OAIJobManifestLocation OAIS3GeneratedManifestDescriptor::getLocation() const {
    return m_location;
}
void OAIS3GeneratedManifestDescriptor::setLocation(const OAIJobManifestLocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIS3GeneratedManifestDescriptor::is_location_Set() const{
    return m_location_isSet;
}

bool OAIS3GeneratedManifestDescriptor::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIS3GeneratedManifestDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3GeneratedManifestDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
