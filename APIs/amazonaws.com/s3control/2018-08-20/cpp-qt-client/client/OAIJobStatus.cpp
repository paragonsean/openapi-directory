/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStatus::OAIJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStatus::OAIJobStatus() {
    this->initializeModel();
}

OAIJobStatus::~OAIJobStatus() {}

void OAIJobStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJobStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJobStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Active", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancelled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancelling", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::CANCELLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Complete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::COMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::COMPLETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::FAILING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("New", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::NEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Paused", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pausing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::PAUSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Preparing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::PREPARING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ready", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Suspended", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobStatus::SUSPENDED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJobStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJobStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJobStatus::ACTIVE:
            val = "Active";
            break;
        case eOAIJobStatus::CANCELLED:
            val = "Cancelled";
            break;
        case eOAIJobStatus::CANCELLING:
            val = "Cancelling";
            break;
        case eOAIJobStatus::COMPLETE:
            val = "Complete";
            break;
        case eOAIJobStatus::COMPLETING:
            val = "Completing";
            break;
        case eOAIJobStatus::FAILED:
            val = "Failed";
            break;
        case eOAIJobStatus::FAILING:
            val = "Failing";
            break;
        case eOAIJobStatus::NEW:
            val = "New";
            break;
        case eOAIJobStatus::PAUSED:
            val = "Paused";
            break;
        case eOAIJobStatus::PAUSING:
            val = "Pausing";
            break;
        case eOAIJobStatus::PREPARING:
            val = "Preparing";
            break;
        case eOAIJobStatus::READY:
            val = "Ready";
            break;
        case eOAIJobStatus::SUSPENDED:
            val = "Suspended";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJobStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJobStatus::eOAIJobStatus OAIJobStatus::getValue() const {
    return m_value;
}

void OAIJobStatus::setValue(const OAIJobStatus::eOAIJobStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJobStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
