/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationRuleFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationRuleFilter::OAIReplicationRuleFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationRuleFilter::OAIReplicationRuleFilter() {
    this->initializeModel();
}

OAIReplicationRuleFilter::~OAIReplicationRuleFilter() {}

void OAIReplicationRuleFilter::initializeModel() {

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_r_and_isSet = false;
    m_r_and_isValid = false;
}

void OAIReplicationRuleFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationRuleFilter::fromJsonObject(QJsonObject json) {

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("Tag")]);
    m_tag_isSet = !json[QString("Tag")].isNull() && m_tag_isValid;

    m_r_and_isValid = ::OpenAPI::fromJsonValue(m_r_and, json[QString("And")]);
    m_r_and_isSet = !json[QString("And")].isNull() && m_r_and_isValid;
}

QString OAIReplicationRuleFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationRuleFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_tag.isSet()) {
        obj.insert(QString("Tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_r_and.isSet()) {
        obj.insert(QString("And"), ::OpenAPI::toJsonValue(m_r_and));
    }
    return obj;
}

QString OAIReplicationRuleFilter::getPrefix() const {
    return m_prefix;
}
void OAIReplicationRuleFilter::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIReplicationRuleFilter::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIReplicationRuleFilter::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAIS3Tag OAIReplicationRuleFilter::getTag() const {
    return m_tag;
}
void OAIReplicationRuleFilter::setTag(const OAIS3Tag &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIReplicationRuleFilter::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIReplicationRuleFilter::is_tag_Valid() const{
    return m_tag_isValid;
}

OAIReplicationRuleFilter_And OAIReplicationRuleFilter::getRAnd() const {
    return m_r_and;
}
void OAIReplicationRuleFilter::setRAnd(const OAIReplicationRuleFilter_And &r_and) {
    m_r_and = r_and;
    m_r_and_isSet = true;
}

bool OAIReplicationRuleFilter::is_r_and_Set() const{
    return m_r_and_isSet;
}

bool OAIReplicationRuleFilter::is_r_and_Valid() const{
    return m_r_and_isValid;
}

bool OAIReplicationRuleFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_and.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationRuleFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
