/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJob_request::OAICreateJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJob_request::OAICreateJob_request() {
    this->initializeModel();
}

OAICreateJob_request::~OAICreateJob_request() {}

void OAICreateJob_request::initializeModel() {

    m_confirmation_required_isSet = false;
    m_confirmation_required_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_manifest_isSet = false;
    m_manifest_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_manifest_generator_isSet = false;
    m_manifest_generator_isValid = false;
}

void OAICreateJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJob_request::fromJsonObject(QJsonObject json) {

    m_confirmation_required_isValid = ::OpenAPI::fromJsonValue(m_confirmation_required, json[QString("ConfirmationRequired")]);
    m_confirmation_required_isSet = !json[QString("ConfirmationRequired")].isNull() && m_confirmation_required_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("Operation")]);
    m_operation_isSet = !json[QString("Operation")].isNull() && m_operation_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("Report")]);
    m_report_isSet = !json[QString("Report")].isNull() && m_report_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_manifest_isValid = ::OpenAPI::fromJsonValue(m_manifest, json[QString("Manifest")]);
    m_manifest_isSet = !json[QString("Manifest")].isNull() && m_manifest_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_manifest_generator_isValid = ::OpenAPI::fromJsonValue(m_manifest_generator, json[QString("ManifestGenerator")]);
    m_manifest_generator_isSet = !json[QString("ManifestGenerator")].isNull() && m_manifest_generator_isValid;
}

QString OAICreateJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_confirmation_required_isSet) {
        obj.insert(QString("ConfirmationRequired"), ::OpenAPI::toJsonValue(m_confirmation_required));
    }
    if (m_operation.isSet()) {
        obj.insert(QString("Operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_report.isSet()) {
        obj.insert(QString("Report"), ::OpenAPI::toJsonValue(m_report));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_manifest.isSet()) {
        obj.insert(QString("Manifest"), ::OpenAPI::toJsonValue(m_manifest));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_manifest_generator.isSet()) {
        obj.insert(QString("ManifestGenerator"), ::OpenAPI::toJsonValue(m_manifest_generator));
    }
    return obj;
}

bool OAICreateJob_request::isConfirmationRequired() const {
    return m_confirmation_required;
}
void OAICreateJob_request::setConfirmationRequired(const bool &confirmation_required) {
    m_confirmation_required = confirmation_required;
    m_confirmation_required_isSet = true;
}

bool OAICreateJob_request::is_confirmation_required_Set() const{
    return m_confirmation_required_isSet;
}

bool OAICreateJob_request::is_confirmation_required_Valid() const{
    return m_confirmation_required_isValid;
}

OAICreateJob_request_Operation OAICreateJob_request::getOperation() const {
    return m_operation;
}
void OAICreateJob_request::setOperation(const OAICreateJob_request_Operation &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICreateJob_request::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICreateJob_request::is_operation_Valid() const{
    return m_operation_isValid;
}

OAICreateJob_request_Report OAICreateJob_request::getReport() const {
    return m_report;
}
void OAICreateJob_request::setReport(const OAICreateJob_request_Report &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAICreateJob_request::is_report_Set() const{
    return m_report_isSet;
}

bool OAICreateJob_request::is_report_Valid() const{
    return m_report_isValid;
}

QString OAICreateJob_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateJob_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateJob_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateJob_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAICreateJob_request_Manifest OAICreateJob_request::getManifest() const {
    return m_manifest;
}
void OAICreateJob_request::setManifest(const OAICreateJob_request_Manifest &manifest) {
    m_manifest = manifest;
    m_manifest_isSet = true;
}

bool OAICreateJob_request::is_manifest_Set() const{
    return m_manifest_isSet;
}

bool OAICreateJob_request::is_manifest_Valid() const{
    return m_manifest_isValid;
}

QString OAICreateJob_request::getDescription() const {
    return m_description;
}
void OAICreateJob_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateJob_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateJob_request::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICreateJob_request::getPriority() const {
    return m_priority;
}
void OAICreateJob_request::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICreateJob_request::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICreateJob_request::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAICreateJob_request::getRoleArn() const {
    return m_role_arn;
}
void OAICreateJob_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateJob_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateJob_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList<OAIS3Tag> OAICreateJob_request::getTags() const {
    return m_tags;
}
void OAICreateJob_request::setTags(const QList<OAIS3Tag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateJob_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateJob_request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateJob_request_ManifestGenerator OAICreateJob_request::getManifestGenerator() const {
    return m_manifest_generator;
}
void OAICreateJob_request::setManifestGenerator(const OAICreateJob_request_ManifestGenerator &manifest_generator) {
    m_manifest_generator = manifest_generator;
    m_manifest_generator_isSet = true;
}

bool OAICreateJob_request::is_manifest_generator_Set() const{
    return m_manifest_generator_isSet;
}

bool OAICreateJob_request::is_manifest_generator_Valid() const{
    return m_manifest_generator_isValid;
}

bool OAICreateJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confirmation_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_generator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_operation_isValid && m_report_isValid && m_client_request_token_isValid && m_priority_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
