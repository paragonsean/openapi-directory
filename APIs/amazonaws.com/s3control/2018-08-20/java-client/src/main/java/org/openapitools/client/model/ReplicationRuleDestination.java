/*
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinationAccessControlTranslation;
import org.openapitools.client.model.DestinationEncryptionConfiguration;
import org.openapitools.client.model.DestinationMetrics;
import org.openapitools.client.model.DestinationReplicationTime;
import org.openapitools.client.model.ReplicationStorageClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReplicationRuleDestination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:46.356577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationRuleDestination {
  public static final String SERIALIZED_NAME_ACCOUNT = "Account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_BUCKET = "Bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_REPLICATION_TIME = "ReplicationTime";
  @SerializedName(SERIALIZED_NAME_REPLICATION_TIME)
  private DestinationReplicationTime replicationTime;

  public static final String SERIALIZED_NAME_ACCESS_CONTROL_TRANSLATION = "AccessControlTranslation";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_TRANSLATION)
  private DestinationAccessControlTranslation accessControlTranslation;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIGURATION = "EncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIGURATION)
  private DestinationEncryptionConfiguration encryptionConfiguration;

  public static final String SERIALIZED_NAME_METRICS = "Metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private DestinationMetrics metrics;

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "StorageClass";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  private ReplicationStorageClass storageClass;

  public ReplicationRuleDestination() {
  }

  public ReplicationRuleDestination account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public ReplicationRuleDestination bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Get bucket
   * @return bucket
   */
  @javax.annotation.Nonnull
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public ReplicationRuleDestination replicationTime(DestinationReplicationTime replicationTime) {
    this.replicationTime = replicationTime;
    return this;
  }

  /**
   * Get replicationTime
   * @return replicationTime
   */
  @javax.annotation.Nullable
  public DestinationReplicationTime getReplicationTime() {
    return replicationTime;
  }

  public void setReplicationTime(DestinationReplicationTime replicationTime) {
    this.replicationTime = replicationTime;
  }


  public ReplicationRuleDestination accessControlTranslation(DestinationAccessControlTranslation accessControlTranslation) {
    this.accessControlTranslation = accessControlTranslation;
    return this;
  }

  /**
   * Get accessControlTranslation
   * @return accessControlTranslation
   */
  @javax.annotation.Nullable
  public DestinationAccessControlTranslation getAccessControlTranslation() {
    return accessControlTranslation;
  }

  public void setAccessControlTranslation(DestinationAccessControlTranslation accessControlTranslation) {
    this.accessControlTranslation = accessControlTranslation;
  }


  public ReplicationRuleDestination encryptionConfiguration(DestinationEncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
    return this;
  }

  /**
   * Get encryptionConfiguration
   * @return encryptionConfiguration
   */
  @javax.annotation.Nullable
  public DestinationEncryptionConfiguration getEncryptionConfiguration() {
    return encryptionConfiguration;
  }

  public void setEncryptionConfiguration(DestinationEncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
  }


  public ReplicationRuleDestination metrics(DestinationMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public DestinationMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(DestinationMetrics metrics) {
    this.metrics = metrics;
  }


  public ReplicationRuleDestination storageClass(ReplicationStorageClass storageClass) {
    this.storageClass = storageClass;
    return this;
  }

  /**
   * Get storageClass
   * @return storageClass
   */
  @javax.annotation.Nullable
  public ReplicationStorageClass getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(ReplicationStorageClass storageClass) {
    this.storageClass = storageClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationRuleDestination replicationRuleDestination = (ReplicationRuleDestination) o;
    return Objects.equals(this.account, replicationRuleDestination.account) &&
        Objects.equals(this.bucket, replicationRuleDestination.bucket) &&
        Objects.equals(this.replicationTime, replicationRuleDestination.replicationTime) &&
        Objects.equals(this.accessControlTranslation, replicationRuleDestination.accessControlTranslation) &&
        Objects.equals(this.encryptionConfiguration, replicationRuleDestination.encryptionConfiguration) &&
        Objects.equals(this.metrics, replicationRuleDestination.metrics) &&
        Objects.equals(this.storageClass, replicationRuleDestination.storageClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, bucket, replicationTime, accessControlTranslation, encryptionConfiguration, metrics, storageClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationRuleDestination {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    replicationTime: ").append(toIndentedString(replicationTime)).append("\n");
    sb.append("    accessControlTranslation: ").append(toIndentedString(accessControlTranslation)).append("\n");
    sb.append("    encryptionConfiguration: ").append(toIndentedString(encryptionConfiguration)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Account");
    openapiFields.add("Bucket");
    openapiFields.add("ReplicationTime");
    openapiFields.add("AccessControlTranslation");
    openapiFields.add("EncryptionConfiguration");
    openapiFields.add("Metrics");
    openapiFields.add("StorageClass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Bucket");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationRuleDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationRuleDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationRuleDestination is not found in the empty JSON string", ReplicationRuleDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationRuleDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationRuleDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplicationRuleDestination.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Account`
      if (jsonObj.get("Account") != null && !jsonObj.get("Account").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Account"));
      }
      // validate the required field `Bucket`
      String.validateJsonElement(jsonObj.get("Bucket"));
      // validate the optional field `ReplicationTime`
      if (jsonObj.get("ReplicationTime") != null && !jsonObj.get("ReplicationTime").isJsonNull()) {
        DestinationReplicationTime.validateJsonElement(jsonObj.get("ReplicationTime"));
      }
      // validate the optional field `AccessControlTranslation`
      if (jsonObj.get("AccessControlTranslation") != null && !jsonObj.get("AccessControlTranslation").isJsonNull()) {
        DestinationAccessControlTranslation.validateJsonElement(jsonObj.get("AccessControlTranslation"));
      }
      // validate the optional field `EncryptionConfiguration`
      if (jsonObj.get("EncryptionConfiguration") != null && !jsonObj.get("EncryptionConfiguration").isJsonNull()) {
        DestinationEncryptionConfiguration.validateJsonElement(jsonObj.get("EncryptionConfiguration"));
      }
      // validate the optional field `Metrics`
      if (jsonObj.get("Metrics") != null && !jsonObj.get("Metrics").isJsonNull()) {
        DestinationMetrics.validateJsonElement(jsonObj.get("Metrics"));
      }
      // validate the optional field `StorageClass`
      if (jsonObj.get("StorageClass") != null && !jsonObj.get("StorageClass").isJsonNull()) {
        ReplicationStorageClass.validateJsonElement(jsonObj.get("StorageClass"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationRuleDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationRuleDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationRuleDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationRuleDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationRuleDestination>() {
           @Override
           public void write(JsonWriter out, ReplicationRuleDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationRuleDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationRuleDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationRuleDestination
   * @throws IOException if the JSON string is invalid with respect to ReplicationRuleDestination
   */
  public static ReplicationRuleDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationRuleDestination.class);
  }

  /**
   * Convert an instance of ReplicationRuleDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

