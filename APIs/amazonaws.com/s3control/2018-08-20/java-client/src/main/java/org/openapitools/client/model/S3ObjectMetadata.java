/*
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.S3SSEAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p/&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:46.356577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3ObjectMetadata {
  public static final String SERIALIZED_NAME_CACHE_CONTROL = "CacheControl";
  @SerializedName(SERIALIZED_NAME_CACHE_CONTROL)
  private String cacheControl;

  public static final String SERIALIZED_NAME_CONTENT_DISPOSITION = "ContentDisposition";
  @SerializedName(SERIALIZED_NAME_CONTENT_DISPOSITION)
  private String contentDisposition;

  public static final String SERIALIZED_NAME_CONTENT_ENCODING = "ContentEncoding";
  @SerializedName(SERIALIZED_NAME_CONTENT_ENCODING)
  private String contentEncoding;

  public static final String SERIALIZED_NAME_CONTENT_LANGUAGE = "ContentLanguage";
  @SerializedName(SERIALIZED_NAME_CONTENT_LANGUAGE)
  private String contentLanguage;

  public static final String SERIALIZED_NAME_USER_METADATA = "UserMetadata";
  @SerializedName(SERIALIZED_NAME_USER_METADATA)
  private Map userMetadata;

  public static final String SERIALIZED_NAME_CONTENT_LENGTH = "ContentLength";
  @SerializedName(SERIALIZED_NAME_CONTENT_LENGTH)
  private Integer contentLength;

  public static final String SERIALIZED_NAME_CONTENT_M_D5 = "ContentMD5";
  @SerializedName(SERIALIZED_NAME_CONTENT_M_D5)
  private String contentMD5;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "ContentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_HTTP_EXPIRES_DATE = "HttpExpiresDate";
  @SerializedName(SERIALIZED_NAME_HTTP_EXPIRES_DATE)
  private OffsetDateTime httpExpiresDate;

  public static final String SERIALIZED_NAME_REQUESTER_CHARGED = "RequesterCharged";
  @SerializedName(SERIALIZED_NAME_REQUESTER_CHARGED)
  private Boolean requesterCharged;

  public static final String SERIALIZED_NAME_SS_E_ALGORITHM = "SSEAlgorithm";
  @SerializedName(SERIALIZED_NAME_SS_E_ALGORITHM)
  private S3SSEAlgorithm ssEAlgorithm;

  public S3ObjectMetadata() {
  }

  public S3ObjectMetadata cacheControl(String cacheControl) {
    this.cacheControl = cacheControl;
    return this;
  }

  /**
   * Get cacheControl
   * @return cacheControl
   */
  @javax.annotation.Nullable
  public String getCacheControl() {
    return cacheControl;
  }

  public void setCacheControl(String cacheControl) {
    this.cacheControl = cacheControl;
  }


  public S3ObjectMetadata contentDisposition(String contentDisposition) {
    this.contentDisposition = contentDisposition;
    return this;
  }

  /**
   * Get contentDisposition
   * @return contentDisposition
   */
  @javax.annotation.Nullable
  public String getContentDisposition() {
    return contentDisposition;
  }

  public void setContentDisposition(String contentDisposition) {
    this.contentDisposition = contentDisposition;
  }


  public S3ObjectMetadata contentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
    return this;
  }

  /**
   * Get contentEncoding
   * @return contentEncoding
   */
  @javax.annotation.Nullable
  public String getContentEncoding() {
    return contentEncoding;
  }

  public void setContentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
  }


  public S3ObjectMetadata contentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
    return this;
  }

  /**
   * Get contentLanguage
   * @return contentLanguage
   */
  @javax.annotation.Nullable
  public String getContentLanguage() {
    return contentLanguage;
  }

  public void setContentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
  }


  public S3ObjectMetadata userMetadata(Map userMetadata) {
    this.userMetadata = userMetadata;
    return this;
  }

  /**
   * Get userMetadata
   * @return userMetadata
   */
  @javax.annotation.Nullable
  public Map getUserMetadata() {
    return userMetadata;
  }

  public void setUserMetadata(Map userMetadata) {
    this.userMetadata = userMetadata;
  }


  public S3ObjectMetadata contentLength(Integer contentLength) {
    this.contentLength = contentLength;
    return this;
  }

  /**
   * Get contentLength
   * @return contentLength
   */
  @javax.annotation.Nullable
  public Integer getContentLength() {
    return contentLength;
  }

  public void setContentLength(Integer contentLength) {
    this.contentLength = contentLength;
  }


  public S3ObjectMetadata contentMD5(String contentMD5) {
    this.contentMD5 = contentMD5;
    return this;
  }

  /**
   * Get contentMD5
   * @return contentMD5
   */
  @javax.annotation.Nullable
  public String getContentMD5() {
    return contentMD5;
  }

  public void setContentMD5(String contentMD5) {
    this.contentMD5 = contentMD5;
  }


  public S3ObjectMetadata contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public S3ObjectMetadata httpExpiresDate(OffsetDateTime httpExpiresDate) {
    this.httpExpiresDate = httpExpiresDate;
    return this;
  }

  /**
   * Get httpExpiresDate
   * @return httpExpiresDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHttpExpiresDate() {
    return httpExpiresDate;
  }

  public void setHttpExpiresDate(OffsetDateTime httpExpiresDate) {
    this.httpExpiresDate = httpExpiresDate;
  }


  public S3ObjectMetadata requesterCharged(Boolean requesterCharged) {
    this.requesterCharged = requesterCharged;
    return this;
  }

  /**
   * Get requesterCharged
   * @return requesterCharged
   */
  @javax.annotation.Nullable
  public Boolean getRequesterCharged() {
    return requesterCharged;
  }

  public void setRequesterCharged(Boolean requesterCharged) {
    this.requesterCharged = requesterCharged;
  }


  public S3ObjectMetadata ssEAlgorithm(S3SSEAlgorithm ssEAlgorithm) {
    this.ssEAlgorithm = ssEAlgorithm;
    return this;
  }

  /**
   * Get ssEAlgorithm
   * @return ssEAlgorithm
   */
  @javax.annotation.Nullable
  public S3SSEAlgorithm getSsEAlgorithm() {
    return ssEAlgorithm;
  }

  public void setSsEAlgorithm(S3SSEAlgorithm ssEAlgorithm) {
    this.ssEAlgorithm = ssEAlgorithm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3ObjectMetadata s3ObjectMetadata = (S3ObjectMetadata) o;
    return Objects.equals(this.cacheControl, s3ObjectMetadata.cacheControl) &&
        Objects.equals(this.contentDisposition, s3ObjectMetadata.contentDisposition) &&
        Objects.equals(this.contentEncoding, s3ObjectMetadata.contentEncoding) &&
        Objects.equals(this.contentLanguage, s3ObjectMetadata.contentLanguage) &&
        Objects.equals(this.userMetadata, s3ObjectMetadata.userMetadata) &&
        Objects.equals(this.contentLength, s3ObjectMetadata.contentLength) &&
        Objects.equals(this.contentMD5, s3ObjectMetadata.contentMD5) &&
        Objects.equals(this.contentType, s3ObjectMetadata.contentType) &&
        Objects.equals(this.httpExpiresDate, s3ObjectMetadata.httpExpiresDate) &&
        Objects.equals(this.requesterCharged, s3ObjectMetadata.requesterCharged) &&
        Objects.equals(this.ssEAlgorithm, s3ObjectMetadata.ssEAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheControl, contentDisposition, contentEncoding, contentLanguage, userMetadata, contentLength, contentMD5, contentType, httpExpiresDate, requesterCharged, ssEAlgorithm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3ObjectMetadata {\n");
    sb.append("    cacheControl: ").append(toIndentedString(cacheControl)).append("\n");
    sb.append("    contentDisposition: ").append(toIndentedString(contentDisposition)).append("\n");
    sb.append("    contentEncoding: ").append(toIndentedString(contentEncoding)).append("\n");
    sb.append("    contentLanguage: ").append(toIndentedString(contentLanguage)).append("\n");
    sb.append("    userMetadata: ").append(toIndentedString(userMetadata)).append("\n");
    sb.append("    contentLength: ").append(toIndentedString(contentLength)).append("\n");
    sb.append("    contentMD5: ").append(toIndentedString(contentMD5)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    httpExpiresDate: ").append(toIndentedString(httpExpiresDate)).append("\n");
    sb.append("    requesterCharged: ").append(toIndentedString(requesterCharged)).append("\n");
    sb.append("    ssEAlgorithm: ").append(toIndentedString(ssEAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CacheControl");
    openapiFields.add("ContentDisposition");
    openapiFields.add("ContentEncoding");
    openapiFields.add("ContentLanguage");
    openapiFields.add("UserMetadata");
    openapiFields.add("ContentLength");
    openapiFields.add("ContentMD5");
    openapiFields.add("ContentType");
    openapiFields.add("HttpExpiresDate");
    openapiFields.add("RequesterCharged");
    openapiFields.add("SSEAlgorithm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3ObjectMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3ObjectMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3ObjectMetadata is not found in the empty JSON string", S3ObjectMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3ObjectMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3ObjectMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CacheControl`
      if (jsonObj.get("CacheControl") != null && !jsonObj.get("CacheControl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheControl"));
      }
      // validate the optional field `ContentDisposition`
      if (jsonObj.get("ContentDisposition") != null && !jsonObj.get("ContentDisposition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentDisposition"));
      }
      // validate the optional field `ContentEncoding`
      if (jsonObj.get("ContentEncoding") != null && !jsonObj.get("ContentEncoding").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentEncoding"));
      }
      // validate the optional field `ContentLanguage`
      if (jsonObj.get("ContentLanguage") != null && !jsonObj.get("ContentLanguage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentLanguage"));
      }
      // validate the optional field `UserMetadata`
      if (jsonObj.get("UserMetadata") != null && !jsonObj.get("UserMetadata").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("UserMetadata"));
      }
      // validate the optional field `ContentLength`
      if (jsonObj.get("ContentLength") != null && !jsonObj.get("ContentLength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ContentLength"));
      }
      // validate the optional field `ContentMD5`
      if (jsonObj.get("ContentMD5") != null && !jsonObj.get("ContentMD5").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentMD5"));
      }
      // validate the optional field `ContentType`
      if (jsonObj.get("ContentType") != null && !jsonObj.get("ContentType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentType"));
      }
      // validate the optional field `HttpExpiresDate`
      if (jsonObj.get("HttpExpiresDate") != null && !jsonObj.get("HttpExpiresDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("HttpExpiresDate"));
      }
      // validate the optional field `RequesterCharged`
      if (jsonObj.get("RequesterCharged") != null && !jsonObj.get("RequesterCharged").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RequesterCharged"));
      }
      // validate the optional field `SSEAlgorithm`
      if (jsonObj.get("SSEAlgorithm") != null && !jsonObj.get("SSEAlgorithm").isJsonNull()) {
        S3SSEAlgorithm.validateJsonElement(jsonObj.get("SSEAlgorithm"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3ObjectMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3ObjectMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3ObjectMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3ObjectMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<S3ObjectMetadata>() {
           @Override
           public void write(JsonWriter out, S3ObjectMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3ObjectMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3ObjectMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3ObjectMetadata
   * @throws IOException if the JSON string is invalid with respect to S3ObjectMetadata
   */
  public static S3ObjectMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3ObjectMetadata.class);
  }

  /**
   * Convert an instance of S3ObjectMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

