/*
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobDescriptorGeneratedManifestDescriptor;
import org.openapitools.client.model.JobDescriptorManifest;
import org.openapitools.client.model.JobDescriptorManifestGenerator;
import org.openapitools.client.model.JobDescriptorOperation;
import org.openapitools.client.model.JobDescriptorProgressSummary;
import org.openapitools.client.model.JobDescriptorReport;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A container element for the job configuration and status information returned by a &lt;code&gt;Describe Job&lt;/code&gt; request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:46.356577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobDescriptor {
  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_CONFIRMATION_REQUIRED = "ConfirmationRequired";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_REQUIRED)
  private Boolean confirmationRequired;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_JOB_ARN = "JobArn";
  @SerializedName(SERIALIZED_NAME_JOB_ARN)
  private String jobArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobStatus status;

  public static final String SERIALIZED_NAME_MANIFEST = "Manifest";
  @SerializedName(SERIALIZED_NAME_MANIFEST)
  private JobDescriptorManifest manifest;

  public static final String SERIALIZED_NAME_OPERATION = "Operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private JobDescriptorOperation operation;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_PROGRESS_SUMMARY = "ProgressSummary";
  @SerializedName(SERIALIZED_NAME_PROGRESS_SUMMARY)
  private JobDescriptorProgressSummary progressSummary;

  public static final String SERIALIZED_NAME_STATUS_UPDATE_REASON = "StatusUpdateReason";
  @SerializedName(SERIALIZED_NAME_STATUS_UPDATE_REASON)
  private String statusUpdateReason;

  public static final String SERIALIZED_NAME_FAILURE_REASONS = "FailureReasons";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASONS)
  private List failureReasons;

  public static final String SERIALIZED_NAME_REPORT = "Report";
  @SerializedName(SERIALIZED_NAME_REPORT)
  private JobDescriptorReport report;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_TERMINATION_DATE = "TerminationDate";
  @SerializedName(SERIALIZED_NAME_TERMINATION_DATE)
  private OffsetDateTime terminationDate;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_SUSPENDED_DATE = "SuspendedDate";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_DATE)
  private OffsetDateTime suspendedDate;

  public static final String SERIALIZED_NAME_SUSPENDED_CAUSE = "SuspendedCause";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_CAUSE)
  private String suspendedCause;

  public static final String SERIALIZED_NAME_MANIFEST_GENERATOR = "ManifestGenerator";
  @SerializedName(SERIALIZED_NAME_MANIFEST_GENERATOR)
  private JobDescriptorManifestGenerator manifestGenerator;

  public static final String SERIALIZED_NAME_GENERATED_MANIFEST_DESCRIPTOR = "GeneratedManifestDescriptor";
  @SerializedName(SERIALIZED_NAME_GENERATED_MANIFEST_DESCRIPTOR)
  private JobDescriptorGeneratedManifestDescriptor generatedManifestDescriptor;

  public JobDescriptor() {
  }

  public JobDescriptor jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public JobDescriptor confirmationRequired(Boolean confirmationRequired) {
    this.confirmationRequired = confirmationRequired;
    return this;
  }

  /**
   * Get confirmationRequired
   * @return confirmationRequired
   */
  @javax.annotation.Nullable
  public Boolean getConfirmationRequired() {
    return confirmationRequired;
  }

  public void setConfirmationRequired(Boolean confirmationRequired) {
    this.confirmationRequired = confirmationRequired;
  }


  public JobDescriptor description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public JobDescriptor jobArn(String jobArn) {
    this.jobArn = jobArn;
    return this;
  }

  /**
   * Get jobArn
   * @return jobArn
   */
  @javax.annotation.Nullable
  public String getJobArn() {
    return jobArn;
  }

  public void setJobArn(String jobArn) {
    this.jobArn = jobArn;
  }


  public JobDescriptor status(JobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public JobStatus getStatus() {
    return status;
  }

  public void setStatus(JobStatus status) {
    this.status = status;
  }


  public JobDescriptor manifest(JobDescriptorManifest manifest) {
    this.manifest = manifest;
    return this;
  }

  /**
   * Get manifest
   * @return manifest
   */
  @javax.annotation.Nullable
  public JobDescriptorManifest getManifest() {
    return manifest;
  }

  public void setManifest(JobDescriptorManifest manifest) {
    this.manifest = manifest;
  }


  public JobDescriptor operation(JobDescriptorOperation operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nullable
  public JobDescriptorOperation getOperation() {
    return operation;
  }

  public void setOperation(JobDescriptorOperation operation) {
    this.operation = operation;
  }


  public JobDescriptor priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public JobDescriptor progressSummary(JobDescriptorProgressSummary progressSummary) {
    this.progressSummary = progressSummary;
    return this;
  }

  /**
   * Get progressSummary
   * @return progressSummary
   */
  @javax.annotation.Nullable
  public JobDescriptorProgressSummary getProgressSummary() {
    return progressSummary;
  }

  public void setProgressSummary(JobDescriptorProgressSummary progressSummary) {
    this.progressSummary = progressSummary;
  }


  public JobDescriptor statusUpdateReason(String statusUpdateReason) {
    this.statusUpdateReason = statusUpdateReason;
    return this;
  }

  /**
   * Get statusUpdateReason
   * @return statusUpdateReason
   */
  @javax.annotation.Nullable
  public String getStatusUpdateReason() {
    return statusUpdateReason;
  }

  public void setStatusUpdateReason(String statusUpdateReason) {
    this.statusUpdateReason = statusUpdateReason;
  }


  public JobDescriptor failureReasons(List failureReasons) {
    this.failureReasons = failureReasons;
    return this;
  }

  /**
   * Get failureReasons
   * @return failureReasons
   */
  @javax.annotation.Nullable
  public List getFailureReasons() {
    return failureReasons;
  }

  public void setFailureReasons(List failureReasons) {
    this.failureReasons = failureReasons;
  }


  public JobDescriptor report(JobDescriptorReport report) {
    this.report = report;
    return this;
  }

  /**
   * Get report
   * @return report
   */
  @javax.annotation.Nullable
  public JobDescriptorReport getReport() {
    return report;
  }

  public void setReport(JobDescriptorReport report) {
    this.report = report;
  }


  public JobDescriptor creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public JobDescriptor terminationDate(OffsetDateTime terminationDate) {
    this.terminationDate = terminationDate;
    return this;
  }

  /**
   * Get terminationDate
   * @return terminationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTerminationDate() {
    return terminationDate;
  }

  public void setTerminationDate(OffsetDateTime terminationDate) {
    this.terminationDate = terminationDate;
  }


  public JobDescriptor roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public JobDescriptor suspendedDate(OffsetDateTime suspendedDate) {
    this.suspendedDate = suspendedDate;
    return this;
  }

  /**
   * Get suspendedDate
   * @return suspendedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSuspendedDate() {
    return suspendedDate;
  }

  public void setSuspendedDate(OffsetDateTime suspendedDate) {
    this.suspendedDate = suspendedDate;
  }


  public JobDescriptor suspendedCause(String suspendedCause) {
    this.suspendedCause = suspendedCause;
    return this;
  }

  /**
   * Get suspendedCause
   * @return suspendedCause
   */
  @javax.annotation.Nullable
  public String getSuspendedCause() {
    return suspendedCause;
  }

  public void setSuspendedCause(String suspendedCause) {
    this.suspendedCause = suspendedCause;
  }


  public JobDescriptor manifestGenerator(JobDescriptorManifestGenerator manifestGenerator) {
    this.manifestGenerator = manifestGenerator;
    return this;
  }

  /**
   * Get manifestGenerator
   * @return manifestGenerator
   */
  @javax.annotation.Nullable
  public JobDescriptorManifestGenerator getManifestGenerator() {
    return manifestGenerator;
  }

  public void setManifestGenerator(JobDescriptorManifestGenerator manifestGenerator) {
    this.manifestGenerator = manifestGenerator;
  }


  public JobDescriptor generatedManifestDescriptor(JobDescriptorGeneratedManifestDescriptor generatedManifestDescriptor) {
    this.generatedManifestDescriptor = generatedManifestDescriptor;
    return this;
  }

  /**
   * Get generatedManifestDescriptor
   * @return generatedManifestDescriptor
   */
  @javax.annotation.Nullable
  public JobDescriptorGeneratedManifestDescriptor getGeneratedManifestDescriptor() {
    return generatedManifestDescriptor;
  }

  public void setGeneratedManifestDescriptor(JobDescriptorGeneratedManifestDescriptor generatedManifestDescriptor) {
    this.generatedManifestDescriptor = generatedManifestDescriptor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDescriptor jobDescriptor = (JobDescriptor) o;
    return Objects.equals(this.jobId, jobDescriptor.jobId) &&
        Objects.equals(this.confirmationRequired, jobDescriptor.confirmationRequired) &&
        Objects.equals(this.description, jobDescriptor.description) &&
        Objects.equals(this.jobArn, jobDescriptor.jobArn) &&
        Objects.equals(this.status, jobDescriptor.status) &&
        Objects.equals(this.manifest, jobDescriptor.manifest) &&
        Objects.equals(this.operation, jobDescriptor.operation) &&
        Objects.equals(this.priority, jobDescriptor.priority) &&
        Objects.equals(this.progressSummary, jobDescriptor.progressSummary) &&
        Objects.equals(this.statusUpdateReason, jobDescriptor.statusUpdateReason) &&
        Objects.equals(this.failureReasons, jobDescriptor.failureReasons) &&
        Objects.equals(this.report, jobDescriptor.report) &&
        Objects.equals(this.creationTime, jobDescriptor.creationTime) &&
        Objects.equals(this.terminationDate, jobDescriptor.terminationDate) &&
        Objects.equals(this.roleArn, jobDescriptor.roleArn) &&
        Objects.equals(this.suspendedDate, jobDescriptor.suspendedDate) &&
        Objects.equals(this.suspendedCause, jobDescriptor.suspendedCause) &&
        Objects.equals(this.manifestGenerator, jobDescriptor.manifestGenerator) &&
        Objects.equals(this.generatedManifestDescriptor, jobDescriptor.generatedManifestDescriptor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, confirmationRequired, description, jobArn, status, manifest, operation, priority, progressSummary, statusUpdateReason, failureReasons, report, creationTime, terminationDate, roleArn, suspendedDate, suspendedCause, manifestGenerator, generatedManifestDescriptor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDescriptor {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    confirmationRequired: ").append(toIndentedString(confirmationRequired)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    jobArn: ").append(toIndentedString(jobArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    progressSummary: ").append(toIndentedString(progressSummary)).append("\n");
    sb.append("    statusUpdateReason: ").append(toIndentedString(statusUpdateReason)).append("\n");
    sb.append("    failureReasons: ").append(toIndentedString(failureReasons)).append("\n");
    sb.append("    report: ").append(toIndentedString(report)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    terminationDate: ").append(toIndentedString(terminationDate)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    suspendedDate: ").append(toIndentedString(suspendedDate)).append("\n");
    sb.append("    suspendedCause: ").append(toIndentedString(suspendedCause)).append("\n");
    sb.append("    manifestGenerator: ").append(toIndentedString(manifestGenerator)).append("\n");
    sb.append("    generatedManifestDescriptor: ").append(toIndentedString(generatedManifestDescriptor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobId");
    openapiFields.add("ConfirmationRequired");
    openapiFields.add("Description");
    openapiFields.add("JobArn");
    openapiFields.add("Status");
    openapiFields.add("Manifest");
    openapiFields.add("Operation");
    openapiFields.add("Priority");
    openapiFields.add("ProgressSummary");
    openapiFields.add("StatusUpdateReason");
    openapiFields.add("FailureReasons");
    openapiFields.add("Report");
    openapiFields.add("CreationTime");
    openapiFields.add("TerminationDate");
    openapiFields.add("RoleArn");
    openapiFields.add("SuspendedDate");
    openapiFields.add("SuspendedCause");
    openapiFields.add("ManifestGenerator");
    openapiFields.add("GeneratedManifestDescriptor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobDescriptor is not found in the empty JSON string", JobDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobId`
      if (jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobId"));
      }
      // validate the optional field `ConfirmationRequired`
      if (jsonObj.get("ConfirmationRequired") != null && !jsonObj.get("ConfirmationRequired").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ConfirmationRequired"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `JobArn`
      if (jsonObj.get("JobArn") != null && !jsonObj.get("JobArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Manifest`
      if (jsonObj.get("Manifest") != null && !jsonObj.get("Manifest").isJsonNull()) {
        JobDescriptorManifest.validateJsonElement(jsonObj.get("Manifest"));
      }
      // validate the optional field `Operation`
      if (jsonObj.get("Operation") != null && !jsonObj.get("Operation").isJsonNull()) {
        JobDescriptorOperation.validateJsonElement(jsonObj.get("Operation"));
      }
      // validate the optional field `Priority`
      if (jsonObj.get("Priority") != null && !jsonObj.get("Priority").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Priority"));
      }
      // validate the optional field `ProgressSummary`
      if (jsonObj.get("ProgressSummary") != null && !jsonObj.get("ProgressSummary").isJsonNull()) {
        JobDescriptorProgressSummary.validateJsonElement(jsonObj.get("ProgressSummary"));
      }
      // validate the optional field `StatusUpdateReason`
      if (jsonObj.get("StatusUpdateReason") != null && !jsonObj.get("StatusUpdateReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusUpdateReason"));
      }
      // validate the optional field `FailureReasons`
      if (jsonObj.get("FailureReasons") != null && !jsonObj.get("FailureReasons").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FailureReasons"));
      }
      // validate the optional field `Report`
      if (jsonObj.get("Report") != null && !jsonObj.get("Report").isJsonNull()) {
        JobDescriptorReport.validateJsonElement(jsonObj.get("Report"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `TerminationDate`
      if (jsonObj.get("TerminationDate") != null && !jsonObj.get("TerminationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("TerminationDate"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `SuspendedDate`
      if (jsonObj.get("SuspendedDate") != null && !jsonObj.get("SuspendedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SuspendedDate"));
      }
      // validate the optional field `SuspendedCause`
      if (jsonObj.get("SuspendedCause") != null && !jsonObj.get("SuspendedCause").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SuspendedCause"));
      }
      // validate the optional field `ManifestGenerator`
      if (jsonObj.get("ManifestGenerator") != null && !jsonObj.get("ManifestGenerator").isJsonNull()) {
        JobDescriptorManifestGenerator.validateJsonElement(jsonObj.get("ManifestGenerator"));
      }
      // validate the optional field `GeneratedManifestDescriptor`
      if (jsonObj.get("GeneratedManifestDescriptor") != null && !jsonObj.get("GeneratedManifestDescriptor").isJsonNull()) {
        JobDescriptorGeneratedManifestDescriptor.validateJsonElement(jsonObj.get("GeneratedManifestDescriptor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<JobDescriptor>() {
           @Override
           public void write(JsonWriter out, JobDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobDescriptor
   * @throws IOException if the JSON string is invalid with respect to JobDescriptor
   */
  public static JobDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobDescriptor.class);
  }

  /**
   * Convert an instance of JobDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

