/*
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MultiRegionAccessPointPolicyDocumentEstablished;
import org.openapitools.client.model.MultiRegionAccessPointPolicyDocumentProposed;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The Multi-Region Access Point access control policy.&lt;/p&gt; &lt;p&gt;When you update the policy, the update is first listed as the proposed policy. After the update is finished and all Regions have been updated, the proposed policy is listed as the established policy. If both policies have the same version number, the proposed policy is the established policy.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:46.356577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiRegionAccessPointPolicyDocument {
  public static final String SERIALIZED_NAME_ESTABLISHED = "Established";
  @SerializedName(SERIALIZED_NAME_ESTABLISHED)
  private MultiRegionAccessPointPolicyDocumentEstablished established;

  public static final String SERIALIZED_NAME_PROPOSED = "Proposed";
  @SerializedName(SERIALIZED_NAME_PROPOSED)
  private MultiRegionAccessPointPolicyDocumentProposed proposed;

  public MultiRegionAccessPointPolicyDocument() {
  }

  public MultiRegionAccessPointPolicyDocument established(MultiRegionAccessPointPolicyDocumentEstablished established) {
    this.established = established;
    return this;
  }

  /**
   * Get established
   * @return established
   */
  @javax.annotation.Nullable
  public MultiRegionAccessPointPolicyDocumentEstablished getEstablished() {
    return established;
  }

  public void setEstablished(MultiRegionAccessPointPolicyDocumentEstablished established) {
    this.established = established;
  }


  public MultiRegionAccessPointPolicyDocument proposed(MultiRegionAccessPointPolicyDocumentProposed proposed) {
    this.proposed = proposed;
    return this;
  }

  /**
   * Get proposed
   * @return proposed
   */
  @javax.annotation.Nullable
  public MultiRegionAccessPointPolicyDocumentProposed getProposed() {
    return proposed;
  }

  public void setProposed(MultiRegionAccessPointPolicyDocumentProposed proposed) {
    this.proposed = proposed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiRegionAccessPointPolicyDocument multiRegionAccessPointPolicyDocument = (MultiRegionAccessPointPolicyDocument) o;
    return Objects.equals(this.established, multiRegionAccessPointPolicyDocument.established) &&
        Objects.equals(this.proposed, multiRegionAccessPointPolicyDocument.proposed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(established, proposed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiRegionAccessPointPolicyDocument {\n");
    sb.append("    established: ").append(toIndentedString(established)).append("\n");
    sb.append("    proposed: ").append(toIndentedString(proposed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Established");
    openapiFields.add("Proposed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiRegionAccessPointPolicyDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiRegionAccessPointPolicyDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiRegionAccessPointPolicyDocument is not found in the empty JSON string", MultiRegionAccessPointPolicyDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiRegionAccessPointPolicyDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiRegionAccessPointPolicyDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Established`
      if (jsonObj.get("Established") != null && !jsonObj.get("Established").isJsonNull()) {
        MultiRegionAccessPointPolicyDocumentEstablished.validateJsonElement(jsonObj.get("Established"));
      }
      // validate the optional field `Proposed`
      if (jsonObj.get("Proposed") != null && !jsonObj.get("Proposed").isJsonNull()) {
        MultiRegionAccessPointPolicyDocumentProposed.validateJsonElement(jsonObj.get("Proposed"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiRegionAccessPointPolicyDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiRegionAccessPointPolicyDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiRegionAccessPointPolicyDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiRegionAccessPointPolicyDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiRegionAccessPointPolicyDocument>() {
           @Override
           public void write(JsonWriter out, MultiRegionAccessPointPolicyDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiRegionAccessPointPolicyDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiRegionAccessPointPolicyDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiRegionAccessPointPolicyDocument
   * @throws IOException if the JSON string is invalid with respect to MultiRegionAccessPointPolicyDocument
   */
  public static MultiRegionAccessPointPolicyDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiRegionAccessPointPolicyDocument.class);
  }

  /**
   * Convert an instance of MultiRegionAccessPointPolicyDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

