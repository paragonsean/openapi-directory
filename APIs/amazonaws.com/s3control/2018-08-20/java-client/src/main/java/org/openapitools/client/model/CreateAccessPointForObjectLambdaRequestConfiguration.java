/*
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAccessPointForObjectLambdaRequestConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:46.356577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAccessPointForObjectLambdaRequestConfiguration {
  public static final String SERIALIZED_NAME_SUPPORTING_ACCESS_POINT = "SupportingAccessPoint";
  @SerializedName(SERIALIZED_NAME_SUPPORTING_ACCESS_POINT)
  private String supportingAccessPoint;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_METRICS_ENABLED = "CloudWatchMetricsEnabled";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_METRICS_ENABLED)
  private Boolean cloudWatchMetricsEnabled;

  public static final String SERIALIZED_NAME_ALLOWED_FEATURES = "AllowedFeatures";
  @SerializedName(SERIALIZED_NAME_ALLOWED_FEATURES)
  private List allowedFeatures;

  public static final String SERIALIZED_NAME_TRANSFORMATION_CONFIGURATIONS = "TransformationConfigurations";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION_CONFIGURATIONS)
  private List transformationConfigurations;

  public CreateAccessPointForObjectLambdaRequestConfiguration() {
  }

  public CreateAccessPointForObjectLambdaRequestConfiguration supportingAccessPoint(String supportingAccessPoint) {
    this.supportingAccessPoint = supportingAccessPoint;
    return this;
  }

  /**
   * Get supportingAccessPoint
   * @return supportingAccessPoint
   */
  @javax.annotation.Nonnull
  public String getSupportingAccessPoint() {
    return supportingAccessPoint;
  }

  public void setSupportingAccessPoint(String supportingAccessPoint) {
    this.supportingAccessPoint = supportingAccessPoint;
  }


  public CreateAccessPointForObjectLambdaRequestConfiguration cloudWatchMetricsEnabled(Boolean cloudWatchMetricsEnabled) {
    this.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled;
    return this;
  }

  /**
   * Get cloudWatchMetricsEnabled
   * @return cloudWatchMetricsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCloudWatchMetricsEnabled() {
    return cloudWatchMetricsEnabled;
  }

  public void setCloudWatchMetricsEnabled(Boolean cloudWatchMetricsEnabled) {
    this.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled;
  }


  public CreateAccessPointForObjectLambdaRequestConfiguration allowedFeatures(List allowedFeatures) {
    this.allowedFeatures = allowedFeatures;
    return this;
  }

  /**
   * Get allowedFeatures
   * @return allowedFeatures
   */
  @javax.annotation.Nullable
  public List getAllowedFeatures() {
    return allowedFeatures;
  }

  public void setAllowedFeatures(List allowedFeatures) {
    this.allowedFeatures = allowedFeatures;
  }


  public CreateAccessPointForObjectLambdaRequestConfiguration transformationConfigurations(List transformationConfigurations) {
    this.transformationConfigurations = transformationConfigurations;
    return this;
  }

  /**
   * Get transformationConfigurations
   * @return transformationConfigurations
   */
  @javax.annotation.Nonnull
  public List getTransformationConfigurations() {
    return transformationConfigurations;
  }

  public void setTransformationConfigurations(List transformationConfigurations) {
    this.transformationConfigurations = transformationConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAccessPointForObjectLambdaRequestConfiguration createAccessPointForObjectLambdaRequestConfiguration = (CreateAccessPointForObjectLambdaRequestConfiguration) o;
    return Objects.equals(this.supportingAccessPoint, createAccessPointForObjectLambdaRequestConfiguration.supportingAccessPoint) &&
        Objects.equals(this.cloudWatchMetricsEnabled, createAccessPointForObjectLambdaRequestConfiguration.cloudWatchMetricsEnabled) &&
        Objects.equals(this.allowedFeatures, createAccessPointForObjectLambdaRequestConfiguration.allowedFeatures) &&
        Objects.equals(this.transformationConfigurations, createAccessPointForObjectLambdaRequestConfiguration.transformationConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(supportingAccessPoint, cloudWatchMetricsEnabled, allowedFeatures, transformationConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAccessPointForObjectLambdaRequestConfiguration {\n");
    sb.append("    supportingAccessPoint: ").append(toIndentedString(supportingAccessPoint)).append("\n");
    sb.append("    cloudWatchMetricsEnabled: ").append(toIndentedString(cloudWatchMetricsEnabled)).append("\n");
    sb.append("    allowedFeatures: ").append(toIndentedString(allowedFeatures)).append("\n");
    sb.append("    transformationConfigurations: ").append(toIndentedString(transformationConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SupportingAccessPoint");
    openapiFields.add("CloudWatchMetricsEnabled");
    openapiFields.add("AllowedFeatures");
    openapiFields.add("TransformationConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SupportingAccessPoint");
    openapiRequiredFields.add("TransformationConfigurations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAccessPointForObjectLambdaRequestConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAccessPointForObjectLambdaRequestConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAccessPointForObjectLambdaRequestConfiguration is not found in the empty JSON string", CreateAccessPointForObjectLambdaRequestConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAccessPointForObjectLambdaRequestConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAccessPointForObjectLambdaRequestConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAccessPointForObjectLambdaRequestConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SupportingAccessPoint`
      String.validateJsonElement(jsonObj.get("SupportingAccessPoint"));
      // validate the optional field `CloudWatchMetricsEnabled`
      if (jsonObj.get("CloudWatchMetricsEnabled") != null && !jsonObj.get("CloudWatchMetricsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CloudWatchMetricsEnabled"));
      }
      // validate the optional field `AllowedFeatures`
      if (jsonObj.get("AllowedFeatures") != null && !jsonObj.get("AllowedFeatures").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AllowedFeatures"));
      }
      // validate the required field `TransformationConfigurations`
      List.validateJsonElement(jsonObj.get("TransformationConfigurations"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAccessPointForObjectLambdaRequestConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAccessPointForObjectLambdaRequestConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAccessPointForObjectLambdaRequestConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAccessPointForObjectLambdaRequestConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAccessPointForObjectLambdaRequestConfiguration>() {
           @Override
           public void write(JsonWriter out, CreateAccessPointForObjectLambdaRequestConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAccessPointForObjectLambdaRequestConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAccessPointForObjectLambdaRequestConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAccessPointForObjectLambdaRequestConfiguration
   * @throws IOException if the JSON string is invalid with respect to CreateAccessPointForObjectLambdaRequestConfiguration
   */
  public static CreateAccessPointForObjectLambdaRequestConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAccessPointForObjectLambdaRequestConfiguration.class);
  }

  /**
   * Convert an instance of CreateAccessPointForObjectLambdaRequestConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

