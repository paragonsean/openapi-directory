/*
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExpirationStatus;
import org.openapitools.client.model.LifecycleRuleAbortIncompleteMultipartUpload;
import org.openapitools.client.model.LifecycleRuleExpiration;
import org.openapitools.client.model.LifecycleRuleFilter;
import org.openapitools.client.model.LifecycleRuleNoncurrentVersionExpiration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The container for the Outposts bucket lifecycle rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:46.356577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LifecycleRule {
  public static final String SERIALIZED_NAME_EXPIRATION = "Expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private LifecycleRuleExpiration expiration;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private LifecycleRuleFilter filter;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ExpirationStatus status;

  public static final String SERIALIZED_NAME_TRANSITIONS = "Transitions";
  @SerializedName(SERIALIZED_NAME_TRANSITIONS)
  private List transitions;

  public static final String SERIALIZED_NAME_NONCURRENT_VERSION_TRANSITIONS = "NoncurrentVersionTransitions";
  @SerializedName(SERIALIZED_NAME_NONCURRENT_VERSION_TRANSITIONS)
  private List noncurrentVersionTransitions;

  public static final String SERIALIZED_NAME_NONCURRENT_VERSION_EXPIRATION = "NoncurrentVersionExpiration";
  @SerializedName(SERIALIZED_NAME_NONCURRENT_VERSION_EXPIRATION)
  private LifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration;

  public static final String SERIALIZED_NAME_ABORT_INCOMPLETE_MULTIPART_UPLOAD = "AbortIncompleteMultipartUpload";
  @SerializedName(SERIALIZED_NAME_ABORT_INCOMPLETE_MULTIPART_UPLOAD)
  private LifecycleRuleAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;

  public LifecycleRule() {
  }

  public LifecycleRule expiration(LifecycleRuleExpiration expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Get expiration
   * @return expiration
   */
  @javax.annotation.Nullable
  public LifecycleRuleExpiration getExpiration() {
    return expiration;
  }

  public void setExpiration(LifecycleRuleExpiration expiration) {
    this.expiration = expiration;
  }


  public LifecycleRule ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public LifecycleRule filter(LifecycleRuleFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public LifecycleRuleFilter getFilter() {
    return filter;
  }

  public void setFilter(LifecycleRuleFilter filter) {
    this.filter = filter;
  }


  public LifecycleRule status(ExpirationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ExpirationStatus getStatus() {
    return status;
  }

  public void setStatus(ExpirationStatus status) {
    this.status = status;
  }


  public LifecycleRule transitions(List transitions) {
    this.transitions = transitions;
    return this;
  }

  /**
   * Get transitions
   * @return transitions
   */
  @javax.annotation.Nullable
  public List getTransitions() {
    return transitions;
  }

  public void setTransitions(List transitions) {
    this.transitions = transitions;
  }


  public LifecycleRule noncurrentVersionTransitions(List noncurrentVersionTransitions) {
    this.noncurrentVersionTransitions = noncurrentVersionTransitions;
    return this;
  }

  /**
   * Get noncurrentVersionTransitions
   * @return noncurrentVersionTransitions
   */
  @javax.annotation.Nullable
  public List getNoncurrentVersionTransitions() {
    return noncurrentVersionTransitions;
  }

  public void setNoncurrentVersionTransitions(List noncurrentVersionTransitions) {
    this.noncurrentVersionTransitions = noncurrentVersionTransitions;
  }


  public LifecycleRule noncurrentVersionExpiration(LifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration) {
    this.noncurrentVersionExpiration = noncurrentVersionExpiration;
    return this;
  }

  /**
   * Get noncurrentVersionExpiration
   * @return noncurrentVersionExpiration
   */
  @javax.annotation.Nullable
  public LifecycleRuleNoncurrentVersionExpiration getNoncurrentVersionExpiration() {
    return noncurrentVersionExpiration;
  }

  public void setNoncurrentVersionExpiration(LifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration) {
    this.noncurrentVersionExpiration = noncurrentVersionExpiration;
  }


  public LifecycleRule abortIncompleteMultipartUpload(LifecycleRuleAbortIncompleteMultipartUpload abortIncompleteMultipartUpload) {
    this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
    return this;
  }

  /**
   * Get abortIncompleteMultipartUpload
   * @return abortIncompleteMultipartUpload
   */
  @javax.annotation.Nullable
  public LifecycleRuleAbortIncompleteMultipartUpload getAbortIncompleteMultipartUpload() {
    return abortIncompleteMultipartUpload;
  }

  public void setAbortIncompleteMultipartUpload(LifecycleRuleAbortIncompleteMultipartUpload abortIncompleteMultipartUpload) {
    this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LifecycleRule lifecycleRule = (LifecycleRule) o;
    return Objects.equals(this.expiration, lifecycleRule.expiration) &&
        Objects.equals(this.ID, lifecycleRule.ID) &&
        Objects.equals(this.filter, lifecycleRule.filter) &&
        Objects.equals(this.status, lifecycleRule.status) &&
        Objects.equals(this.transitions, lifecycleRule.transitions) &&
        Objects.equals(this.noncurrentVersionTransitions, lifecycleRule.noncurrentVersionTransitions) &&
        Objects.equals(this.noncurrentVersionExpiration, lifecycleRule.noncurrentVersionExpiration) &&
        Objects.equals(this.abortIncompleteMultipartUpload, lifecycleRule.abortIncompleteMultipartUpload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiration, ID, filter, status, transitions, noncurrentVersionTransitions, noncurrentVersionExpiration, abortIncompleteMultipartUpload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LifecycleRule {\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("    noncurrentVersionTransitions: ").append(toIndentedString(noncurrentVersionTransitions)).append("\n");
    sb.append("    noncurrentVersionExpiration: ").append(toIndentedString(noncurrentVersionExpiration)).append("\n");
    sb.append("    abortIncompleteMultipartUpload: ").append(toIndentedString(abortIncompleteMultipartUpload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Expiration");
    openapiFields.add("ID");
    openapiFields.add("Filter");
    openapiFields.add("Status");
    openapiFields.add("Transitions");
    openapiFields.add("NoncurrentVersionTransitions");
    openapiFields.add("NoncurrentVersionExpiration");
    openapiFields.add("AbortIncompleteMultipartUpload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LifecycleRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LifecycleRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LifecycleRule is not found in the empty JSON string", LifecycleRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LifecycleRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LifecycleRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LifecycleRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Expiration`
      if (jsonObj.get("Expiration") != null && !jsonObj.get("Expiration").isJsonNull()) {
        LifecycleRuleExpiration.validateJsonElement(jsonObj.get("Expiration"));
      }
      // validate the optional field `ID`
      if (jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ID"));
      }
      // validate the optional field `Filter`
      if (jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) {
        LifecycleRuleFilter.validateJsonElement(jsonObj.get("Filter"));
      }
      // validate the required field `Status`
      ExpirationStatus.validateJsonElement(jsonObj.get("Status"));
      // validate the optional field `Transitions`
      if (jsonObj.get("Transitions") != null && !jsonObj.get("Transitions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Transitions"));
      }
      // validate the optional field `NoncurrentVersionTransitions`
      if (jsonObj.get("NoncurrentVersionTransitions") != null && !jsonObj.get("NoncurrentVersionTransitions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NoncurrentVersionTransitions"));
      }
      // validate the optional field `NoncurrentVersionExpiration`
      if (jsonObj.get("NoncurrentVersionExpiration") != null && !jsonObj.get("NoncurrentVersionExpiration").isJsonNull()) {
        LifecycleRuleNoncurrentVersionExpiration.validateJsonElement(jsonObj.get("NoncurrentVersionExpiration"));
      }
      // validate the optional field `AbortIncompleteMultipartUpload`
      if (jsonObj.get("AbortIncompleteMultipartUpload") != null && !jsonObj.get("AbortIncompleteMultipartUpload").isJsonNull()) {
        LifecycleRuleAbortIncompleteMultipartUpload.validateJsonElement(jsonObj.get("AbortIncompleteMultipartUpload"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LifecycleRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LifecycleRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LifecycleRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LifecycleRule.class));

       return (TypeAdapter<T>) new TypeAdapter<LifecycleRule>() {
           @Override
           public void write(JsonWriter out, LifecycleRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LifecycleRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LifecycleRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LifecycleRule
   * @throws IOException if the JSON string is invalid with respect to LifecycleRule
   */
  public static LifecycleRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LifecycleRule.class);
  }

  /**
   * Convert an instance of LifecycleRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

