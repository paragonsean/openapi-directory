/*
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateJobRequestManifest;
import org.openapitools.client.model.CreateJobRequestManifestGenerator;
import org.openapitools.client.model.CreateJobRequestOperation;
import org.openapitools.client.model.CreateJobRequestReport;
import org.openapitools.client.model.S3Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:46.356577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateJobRequest {
  public static final String SERIALIZED_NAME_CONFIRMATION_REQUIRED = "ConfirmationRequired";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_REQUIRED)
  private Boolean confirmationRequired;

  public static final String SERIALIZED_NAME_OPERATION = "Operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private CreateJobRequestOperation operation;

  public static final String SERIALIZED_NAME_REPORT = "Report";
  @SerializedName(SERIALIZED_NAME_REPORT)
  private CreateJobRequestReport report;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_MANIFEST = "Manifest";
  @SerializedName(SERIALIZED_NAME_MANIFEST)
  private CreateJobRequestManifest manifest;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<S3Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANIFEST_GENERATOR = "ManifestGenerator";
  @SerializedName(SERIALIZED_NAME_MANIFEST_GENERATOR)
  private CreateJobRequestManifestGenerator manifestGenerator;

  public CreateJobRequest() {
  }

  public CreateJobRequest confirmationRequired(Boolean confirmationRequired) {
    this.confirmationRequired = confirmationRequired;
    return this;
  }

  /**
   * Indicates whether confirmation is required before Amazon S3 runs the job. Confirmation is only required for jobs created through the Amazon S3 console.
   * @return confirmationRequired
   */
  @javax.annotation.Nullable
  public Boolean getConfirmationRequired() {
    return confirmationRequired;
  }

  public void setConfirmationRequired(Boolean confirmationRequired) {
    this.confirmationRequired = confirmationRequired;
  }


  public CreateJobRequest operation(CreateJobRequestOperation operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nonnull
  public CreateJobRequestOperation getOperation() {
    return operation;
  }

  public void setOperation(CreateJobRequestOperation operation) {
    this.operation = operation;
  }


  public CreateJobRequest report(CreateJobRequestReport report) {
    this.report = report;
    return this;
  }

  /**
   * Get report
   * @return report
   */
  @javax.annotation.Nonnull
  public CreateJobRequestReport getReport() {
    return report;
  }

  public void setReport(CreateJobRequestReport report) {
    this.report = report;
  }


  public CreateJobRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * An idempotency token to ensure that you don&#39;t accidentally submit the same request twice. You can use any string up to the maximum length.
   * @return clientRequestToken
   */
  @javax.annotation.Nonnull
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateJobRequest manifest(CreateJobRequestManifest manifest) {
    this.manifest = manifest;
    return this;
  }

  /**
   * Get manifest
   * @return manifest
   */
  @javax.annotation.Nullable
  public CreateJobRequestManifest getManifest() {
    return manifest;
  }

  public void setManifest(CreateJobRequestManifest manifest) {
    this.manifest = manifest;
  }


  public CreateJobRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for this job. You can use any string within the permitted length. Descriptions don&#39;t need to be unique and can be used for multiple jobs.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateJobRequest priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The numerical priority for this job. Higher numbers indicate higher priority.
   * minimum: 0
   * maximum: 2147483647
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public CreateJobRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) for the Identity and Access Management (IAM) role that Batch Operations will use to run this job&#39;s action on every object in the manifest.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateJobRequest tags(List<S3Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateJobRequest addTagsItem(S3Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A set of tags to associate with the S3 Batch Operations job. This is an optional parameter. 
   * @return tags
   */
  @javax.annotation.Nullable
  public List<S3Tag> getTags() {
    return tags;
  }

  public void setTags(List<S3Tag> tags) {
    this.tags = tags;
  }


  public CreateJobRequest manifestGenerator(CreateJobRequestManifestGenerator manifestGenerator) {
    this.manifestGenerator = manifestGenerator;
    return this;
  }

  /**
   * Get manifestGenerator
   * @return manifestGenerator
   */
  @javax.annotation.Nullable
  public CreateJobRequestManifestGenerator getManifestGenerator() {
    return manifestGenerator;
  }

  public void setManifestGenerator(CreateJobRequestManifestGenerator manifestGenerator) {
    this.manifestGenerator = manifestGenerator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateJobRequest createJobRequest = (CreateJobRequest) o;
    return Objects.equals(this.confirmationRequired, createJobRequest.confirmationRequired) &&
        Objects.equals(this.operation, createJobRequest.operation) &&
        Objects.equals(this.report, createJobRequest.report) &&
        Objects.equals(this.clientRequestToken, createJobRequest.clientRequestToken) &&
        Objects.equals(this.manifest, createJobRequest.manifest) &&
        Objects.equals(this.description, createJobRequest.description) &&
        Objects.equals(this.priority, createJobRequest.priority) &&
        Objects.equals(this.roleArn, createJobRequest.roleArn) &&
        Objects.equals(this.tags, createJobRequest.tags) &&
        Objects.equals(this.manifestGenerator, createJobRequest.manifestGenerator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmationRequired, operation, report, clientRequestToken, manifest, description, priority, roleArn, tags, manifestGenerator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateJobRequest {\n");
    sb.append("    confirmationRequired: ").append(toIndentedString(confirmationRequired)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    report: ").append(toIndentedString(report)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    manifestGenerator: ").append(toIndentedString(manifestGenerator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfirmationRequired");
    openapiFields.add("Operation");
    openapiFields.add("Report");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("Manifest");
    openapiFields.add("Description");
    openapiFields.add("Priority");
    openapiFields.add("RoleArn");
    openapiFields.add("Tags");
    openapiFields.add("ManifestGenerator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Operation");
    openapiRequiredFields.add("Report");
    openapiRequiredFields.add("ClientRequestToken");
    openapiRequiredFields.add("Priority");
    openapiRequiredFields.add("RoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateJobRequest is not found in the empty JSON string", CreateJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Operation`
      CreateJobRequestOperation.validateJsonElement(jsonObj.get("Operation"));
      // validate the required field `Report`
      CreateJobRequestReport.validateJsonElement(jsonObj.get("Report"));
      if (!jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      // validate the optional field `Manifest`
      if (jsonObj.get("Manifest") != null && !jsonObj.get("Manifest").isJsonNull()) {
        CreateJobRequestManifest.validateJsonElement(jsonObj.get("Manifest"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("RoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleArn").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            S3Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `ManifestGenerator`
      if (jsonObj.get("ManifestGenerator") != null && !jsonObj.get("ManifestGenerator").isJsonNull()) {
        CreateJobRequestManifestGenerator.validateJsonElement(jsonObj.get("ManifestGenerator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreateJobRequest
   */
  public static CreateJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateJobRequest.class);
  }

  /**
   * Convert an instance of CreateJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

