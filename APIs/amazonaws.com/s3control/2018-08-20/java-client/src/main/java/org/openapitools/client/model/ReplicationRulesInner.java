/*
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReplicationRuleDeleteMarkerReplication;
import org.openapitools.client.model.ReplicationRuleDestination;
import org.openapitools.client.model.ReplicationRuleExistingObjectReplication;
import org.openapitools.client.model.ReplicationRuleFilter;
import org.openapitools.client.model.ReplicationRuleSourceSelectionCriteria;
import org.openapitools.client.model.ReplicationRuleStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReplicationRulesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:46.356577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationRulesInner {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_PREFIX = "Prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private ReplicationRuleFilter filter;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ReplicationRuleStatus status;

  public static final String SERIALIZED_NAME_SOURCE_SELECTION_CRITERIA = "SourceSelectionCriteria";
  @SerializedName(SERIALIZED_NAME_SOURCE_SELECTION_CRITERIA)
  private ReplicationRuleSourceSelectionCriteria sourceSelectionCriteria;

  public static final String SERIALIZED_NAME_EXISTING_OBJECT_REPLICATION = "ExistingObjectReplication";
  @SerializedName(SERIALIZED_NAME_EXISTING_OBJECT_REPLICATION)
  private ReplicationRuleExistingObjectReplication existingObjectReplication;

  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private ReplicationRuleDestination destination;

  public static final String SERIALIZED_NAME_DELETE_MARKER_REPLICATION = "DeleteMarkerReplication";
  @SerializedName(SERIALIZED_NAME_DELETE_MARKER_REPLICATION)
  private ReplicationRuleDeleteMarkerReplication deleteMarkerReplication;

  public static final String SERIALIZED_NAME_BUCKET = "Bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public ReplicationRulesInner() {
  }

  public ReplicationRulesInner ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public ReplicationRulesInner priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public ReplicationRulesInner prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public ReplicationRulesInner filter(ReplicationRuleFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public ReplicationRuleFilter getFilter() {
    return filter;
  }

  public void setFilter(ReplicationRuleFilter filter) {
    this.filter = filter;
  }


  public ReplicationRulesInner status(ReplicationRuleStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ReplicationRuleStatus getStatus() {
    return status;
  }

  public void setStatus(ReplicationRuleStatus status) {
    this.status = status;
  }


  public ReplicationRulesInner sourceSelectionCriteria(ReplicationRuleSourceSelectionCriteria sourceSelectionCriteria) {
    this.sourceSelectionCriteria = sourceSelectionCriteria;
    return this;
  }

  /**
   * Get sourceSelectionCriteria
   * @return sourceSelectionCriteria
   */
  @javax.annotation.Nullable
  public ReplicationRuleSourceSelectionCriteria getSourceSelectionCriteria() {
    return sourceSelectionCriteria;
  }

  public void setSourceSelectionCriteria(ReplicationRuleSourceSelectionCriteria sourceSelectionCriteria) {
    this.sourceSelectionCriteria = sourceSelectionCriteria;
  }


  public ReplicationRulesInner existingObjectReplication(ReplicationRuleExistingObjectReplication existingObjectReplication) {
    this.existingObjectReplication = existingObjectReplication;
    return this;
  }

  /**
   * Get existingObjectReplication
   * @return existingObjectReplication
   */
  @javax.annotation.Nullable
  public ReplicationRuleExistingObjectReplication getExistingObjectReplication() {
    return existingObjectReplication;
  }

  public void setExistingObjectReplication(ReplicationRuleExistingObjectReplication existingObjectReplication) {
    this.existingObjectReplication = existingObjectReplication;
  }


  public ReplicationRulesInner destination(ReplicationRuleDestination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public ReplicationRuleDestination getDestination() {
    return destination;
  }

  public void setDestination(ReplicationRuleDestination destination) {
    this.destination = destination;
  }


  public ReplicationRulesInner deleteMarkerReplication(ReplicationRuleDeleteMarkerReplication deleteMarkerReplication) {
    this.deleteMarkerReplication = deleteMarkerReplication;
    return this;
  }

  /**
   * Get deleteMarkerReplication
   * @return deleteMarkerReplication
   */
  @javax.annotation.Nullable
  public ReplicationRuleDeleteMarkerReplication getDeleteMarkerReplication() {
    return deleteMarkerReplication;
  }

  public void setDeleteMarkerReplication(ReplicationRuleDeleteMarkerReplication deleteMarkerReplication) {
    this.deleteMarkerReplication = deleteMarkerReplication;
  }


  public ReplicationRulesInner bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Get bucket
   * @return bucket
   */
  @javax.annotation.Nonnull
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationRulesInner replicationRulesInner = (ReplicationRulesInner) o;
    return Objects.equals(this.ID, replicationRulesInner.ID) &&
        Objects.equals(this.priority, replicationRulesInner.priority) &&
        Objects.equals(this.prefix, replicationRulesInner.prefix) &&
        Objects.equals(this.filter, replicationRulesInner.filter) &&
        Objects.equals(this.status, replicationRulesInner.status) &&
        Objects.equals(this.sourceSelectionCriteria, replicationRulesInner.sourceSelectionCriteria) &&
        Objects.equals(this.existingObjectReplication, replicationRulesInner.existingObjectReplication) &&
        Objects.equals(this.destination, replicationRulesInner.destination) &&
        Objects.equals(this.deleteMarkerReplication, replicationRulesInner.deleteMarkerReplication) &&
        Objects.equals(this.bucket, replicationRulesInner.bucket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, priority, prefix, filter, status, sourceSelectionCriteria, existingObjectReplication, destination, deleteMarkerReplication, bucket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationRulesInner {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sourceSelectionCriteria: ").append(toIndentedString(sourceSelectionCriteria)).append("\n");
    sb.append("    existingObjectReplication: ").append(toIndentedString(existingObjectReplication)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    deleteMarkerReplication: ").append(toIndentedString(deleteMarkerReplication)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Priority");
    openapiFields.add("Prefix");
    openapiFields.add("Filter");
    openapiFields.add("Status");
    openapiFields.add("SourceSelectionCriteria");
    openapiFields.add("ExistingObjectReplication");
    openapiFields.add("Destination");
    openapiFields.add("DeleteMarkerReplication");
    openapiFields.add("Bucket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("Destination");
    openapiRequiredFields.add("Bucket");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationRulesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationRulesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationRulesInner is not found in the empty JSON string", ReplicationRulesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationRulesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationRulesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplicationRulesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ID`
      if (jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ID"));
      }
      // validate the optional field `Priority`
      if (jsonObj.get("Priority") != null && !jsonObj.get("Priority").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Priority"));
      }
      // validate the optional field `Prefix`
      if (jsonObj.get("Prefix") != null && !jsonObj.get("Prefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Prefix"));
      }
      // validate the optional field `Filter`
      if (jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) {
        ReplicationRuleFilter.validateJsonElement(jsonObj.get("Filter"));
      }
      // validate the required field `Status`
      ReplicationRuleStatus.validateJsonElement(jsonObj.get("Status"));
      // validate the optional field `SourceSelectionCriteria`
      if (jsonObj.get("SourceSelectionCriteria") != null && !jsonObj.get("SourceSelectionCriteria").isJsonNull()) {
        ReplicationRuleSourceSelectionCriteria.validateJsonElement(jsonObj.get("SourceSelectionCriteria"));
      }
      // validate the optional field `ExistingObjectReplication`
      if (jsonObj.get("ExistingObjectReplication") != null && !jsonObj.get("ExistingObjectReplication").isJsonNull()) {
        ReplicationRuleExistingObjectReplication.validateJsonElement(jsonObj.get("ExistingObjectReplication"));
      }
      // validate the required field `Destination`
      ReplicationRuleDestination.validateJsonElement(jsonObj.get("Destination"));
      // validate the optional field `DeleteMarkerReplication`
      if (jsonObj.get("DeleteMarkerReplication") != null && !jsonObj.get("DeleteMarkerReplication").isJsonNull()) {
        ReplicationRuleDeleteMarkerReplication.validateJsonElement(jsonObj.get("DeleteMarkerReplication"));
      }
      // validate the required field `Bucket`
      String.validateJsonElement(jsonObj.get("Bucket"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationRulesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationRulesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationRulesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationRulesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationRulesInner>() {
           @Override
           public void write(JsonWriter out, ReplicationRulesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationRulesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationRulesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationRulesInner
   * @throws IOException if the JSON string is invalid with respect to ReplicationRulesInner
   */
  public static ReplicationRulesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationRulesInner.class);
  }

  /**
   * Convert an instance of ReplicationRulesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

