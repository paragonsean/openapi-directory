/*
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutPublicAccessBlockRequestPublicAccessBlockConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:46.356577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutPublicAccessBlockRequestPublicAccessBlockConfiguration {
  public static final String SERIALIZED_NAME_BLOCK_PUBLIC_ACLS = "BlockPublicAcls";
  @SerializedName(SERIALIZED_NAME_BLOCK_PUBLIC_ACLS)
  private Boolean blockPublicAcls;

  public static final String SERIALIZED_NAME_IGNORE_PUBLIC_ACLS = "IgnorePublicAcls";
  @SerializedName(SERIALIZED_NAME_IGNORE_PUBLIC_ACLS)
  private Boolean ignorePublicAcls;

  public static final String SERIALIZED_NAME_BLOCK_PUBLIC_POLICY = "BlockPublicPolicy";
  @SerializedName(SERIALIZED_NAME_BLOCK_PUBLIC_POLICY)
  private Boolean blockPublicPolicy;

  public static final String SERIALIZED_NAME_RESTRICT_PUBLIC_BUCKETS = "RestrictPublicBuckets";
  @SerializedName(SERIALIZED_NAME_RESTRICT_PUBLIC_BUCKETS)
  private Boolean restrictPublicBuckets;

  public PutPublicAccessBlockRequestPublicAccessBlockConfiguration() {
  }

  public PutPublicAccessBlockRequestPublicAccessBlockConfiguration blockPublicAcls(Boolean blockPublicAcls) {
    this.blockPublicAcls = blockPublicAcls;
    return this;
  }

  /**
   * Get blockPublicAcls
   * @return blockPublicAcls
   */
  @javax.annotation.Nullable
  public Boolean getBlockPublicAcls() {
    return blockPublicAcls;
  }

  public void setBlockPublicAcls(Boolean blockPublicAcls) {
    this.blockPublicAcls = blockPublicAcls;
  }


  public PutPublicAccessBlockRequestPublicAccessBlockConfiguration ignorePublicAcls(Boolean ignorePublicAcls) {
    this.ignorePublicAcls = ignorePublicAcls;
    return this;
  }

  /**
   * Get ignorePublicAcls
   * @return ignorePublicAcls
   */
  @javax.annotation.Nullable
  public Boolean getIgnorePublicAcls() {
    return ignorePublicAcls;
  }

  public void setIgnorePublicAcls(Boolean ignorePublicAcls) {
    this.ignorePublicAcls = ignorePublicAcls;
  }


  public PutPublicAccessBlockRequestPublicAccessBlockConfiguration blockPublicPolicy(Boolean blockPublicPolicy) {
    this.blockPublicPolicy = blockPublicPolicy;
    return this;
  }

  /**
   * Get blockPublicPolicy
   * @return blockPublicPolicy
   */
  @javax.annotation.Nullable
  public Boolean getBlockPublicPolicy() {
    return blockPublicPolicy;
  }

  public void setBlockPublicPolicy(Boolean blockPublicPolicy) {
    this.blockPublicPolicy = blockPublicPolicy;
  }


  public PutPublicAccessBlockRequestPublicAccessBlockConfiguration restrictPublicBuckets(Boolean restrictPublicBuckets) {
    this.restrictPublicBuckets = restrictPublicBuckets;
    return this;
  }

  /**
   * Get restrictPublicBuckets
   * @return restrictPublicBuckets
   */
  @javax.annotation.Nullable
  public Boolean getRestrictPublicBuckets() {
    return restrictPublicBuckets;
  }

  public void setRestrictPublicBuckets(Boolean restrictPublicBuckets) {
    this.restrictPublicBuckets = restrictPublicBuckets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutPublicAccessBlockRequestPublicAccessBlockConfiguration putPublicAccessBlockRequestPublicAccessBlockConfiguration = (PutPublicAccessBlockRequestPublicAccessBlockConfiguration) o;
    return Objects.equals(this.blockPublicAcls, putPublicAccessBlockRequestPublicAccessBlockConfiguration.blockPublicAcls) &&
        Objects.equals(this.ignorePublicAcls, putPublicAccessBlockRequestPublicAccessBlockConfiguration.ignorePublicAcls) &&
        Objects.equals(this.blockPublicPolicy, putPublicAccessBlockRequestPublicAccessBlockConfiguration.blockPublicPolicy) &&
        Objects.equals(this.restrictPublicBuckets, putPublicAccessBlockRequestPublicAccessBlockConfiguration.restrictPublicBuckets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockPublicAcls, ignorePublicAcls, blockPublicPolicy, restrictPublicBuckets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutPublicAccessBlockRequestPublicAccessBlockConfiguration {\n");
    sb.append("    blockPublicAcls: ").append(toIndentedString(blockPublicAcls)).append("\n");
    sb.append("    ignorePublicAcls: ").append(toIndentedString(ignorePublicAcls)).append("\n");
    sb.append("    blockPublicPolicy: ").append(toIndentedString(blockPublicPolicy)).append("\n");
    sb.append("    restrictPublicBuckets: ").append(toIndentedString(restrictPublicBuckets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BlockPublicAcls");
    openapiFields.add("IgnorePublicAcls");
    openapiFields.add("BlockPublicPolicy");
    openapiFields.add("RestrictPublicBuckets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutPublicAccessBlockRequestPublicAccessBlockConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutPublicAccessBlockRequestPublicAccessBlockConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutPublicAccessBlockRequestPublicAccessBlockConfiguration is not found in the empty JSON string", PutPublicAccessBlockRequestPublicAccessBlockConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutPublicAccessBlockRequestPublicAccessBlockConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutPublicAccessBlockRequestPublicAccessBlockConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BlockPublicAcls`
      if (jsonObj.get("BlockPublicAcls") != null && !jsonObj.get("BlockPublicAcls").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("BlockPublicAcls"));
      }
      // validate the optional field `IgnorePublicAcls`
      if (jsonObj.get("IgnorePublicAcls") != null && !jsonObj.get("IgnorePublicAcls").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IgnorePublicAcls"));
      }
      // validate the optional field `BlockPublicPolicy`
      if (jsonObj.get("BlockPublicPolicy") != null && !jsonObj.get("BlockPublicPolicy").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("BlockPublicPolicy"));
      }
      // validate the optional field `RestrictPublicBuckets`
      if (jsonObj.get("RestrictPublicBuckets") != null && !jsonObj.get("RestrictPublicBuckets").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RestrictPublicBuckets"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutPublicAccessBlockRequestPublicAccessBlockConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutPublicAccessBlockRequestPublicAccessBlockConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutPublicAccessBlockRequestPublicAccessBlockConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutPublicAccessBlockRequestPublicAccessBlockConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<PutPublicAccessBlockRequestPublicAccessBlockConfiguration>() {
           @Override
           public void write(JsonWriter out, PutPublicAccessBlockRequestPublicAccessBlockConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutPublicAccessBlockRequestPublicAccessBlockConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutPublicAccessBlockRequestPublicAccessBlockConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutPublicAccessBlockRequestPublicAccessBlockConfiguration
   * @throws IOException if the JSON string is invalid with respect to PutPublicAccessBlockRequestPublicAccessBlockConfiguration
   */
  public static PutPublicAccessBlockRequestPublicAccessBlockConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutPublicAccessBlockRequestPublicAccessBlockConfiguration.class);
  }

  /**
   * Convert an instance of PutPublicAccessBlockRequestPublicAccessBlockConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

