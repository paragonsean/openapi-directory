# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_lambda_transformation_configuration_content_transformation import ObjectLambdaTransformationConfigurationContentTransformation
from openapi_server import util


class ObjectLambdaTransformationConfigurationsListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List=None, content_transformation: ObjectLambdaTransformationConfigurationContentTransformation=None):
        """ObjectLambdaTransformationConfigurationsListInner - a model defined in OpenAPI

        :param actions: The actions of this ObjectLambdaTransformationConfigurationsListInner.
        :param content_transformation: The content_transformation of this ObjectLambdaTransformationConfigurationsListInner.
        """
        self.openapi_types = {
            'actions': List,
            'content_transformation': ObjectLambdaTransformationConfigurationContentTransformation
        }

        self.attribute_map = {
            'actions': 'Actions',
            'content_transformation': 'ContentTransformation'
        }

        self._actions = actions
        self._content_transformation = content_transformation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectLambdaTransformationConfigurationsListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectLambdaTransformationConfigurationsList_inner of this ObjectLambdaTransformationConfigurationsListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ObjectLambdaTransformationConfigurationsListInner.


        :return: The actions of this ObjectLambdaTransformationConfigurationsListInner.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ObjectLambdaTransformationConfigurationsListInner.


        :param actions: The actions of this ObjectLambdaTransformationConfigurationsListInner.
        :type actions: List
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def content_transformation(self):
        """Gets the content_transformation of this ObjectLambdaTransformationConfigurationsListInner.


        :return: The content_transformation of this ObjectLambdaTransformationConfigurationsListInner.
        :rtype: ObjectLambdaTransformationConfigurationContentTransformation
        """
        return self._content_transformation

    @content_transformation.setter
    def content_transformation(self, content_transformation):
        """Sets the content_transformation of this ObjectLambdaTransformationConfigurationsListInner.


        :param content_transformation: The content_transformation of this ObjectLambdaTransformationConfigurationsListInner.
        :type content_transformation: ObjectLambdaTransformationConfigurationContentTransformation
        """
        if content_transformation is None:
            raise ValueError("Invalid value for `content_transformation`, must not be `None`")

        self._content_transformation = content_transformation
