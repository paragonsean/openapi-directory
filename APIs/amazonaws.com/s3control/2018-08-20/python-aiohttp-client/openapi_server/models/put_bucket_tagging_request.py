# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_bucket_tagging_request_tagging import PutBucketTaggingRequestTagging
from openapi_server import util


class PutBucketTaggingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tagging: PutBucketTaggingRequestTagging=None):
        """PutBucketTaggingRequest - a model defined in OpenAPI

        :param tagging: The tagging of this PutBucketTaggingRequest.
        """
        self.openapi_types = {
            'tagging': PutBucketTaggingRequestTagging
        }

        self.attribute_map = {
            'tagging': 'Tagging'
        }

        self._tagging = tagging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutBucketTaggingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutBucketTagging_request of this PutBucketTaggingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tagging(self):
        """Gets the tagging of this PutBucketTaggingRequest.


        :return: The tagging of this PutBucketTaggingRequest.
        :rtype: PutBucketTaggingRequestTagging
        """
        return self._tagging

    @tagging.setter
    def tagging(self, tagging):
        """Sets the tagging of this PutBucketTaggingRequest.


        :param tagging: The tagging of this PutBucketTaggingRequest.
        :type tagging: PutBucketTaggingRequestTagging
        """
        if tagging is None:
            raise ValueError("Invalid value for `tagging`, must not be `None`")

        self._tagging = tagging
