# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_job_request_manifest import CreateJobRequestManifest
from openapi_server.models.create_job_request_manifest_generator import CreateJobRequestManifestGenerator
from openapi_server.models.create_job_request_operation import CreateJobRequestOperation
from openapi_server.models.create_job_request_report import CreateJobRequestReport
from openapi_server.models.s3_tag import S3Tag
import re
from openapi_server import util


class CreateJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confirmation_required: bool=None, operation: CreateJobRequestOperation=None, report: CreateJobRequestReport=None, client_request_token: str=None, manifest: CreateJobRequestManifest=None, description: str=None, priority: int=None, role_arn: str=None, tags: List[S3Tag]=None, manifest_generator: CreateJobRequestManifestGenerator=None):
        """CreateJobRequest - a model defined in OpenAPI

        :param confirmation_required: The confirmation_required of this CreateJobRequest.
        :param operation: The operation of this CreateJobRequest.
        :param report: The report of this CreateJobRequest.
        :param client_request_token: The client_request_token of this CreateJobRequest.
        :param manifest: The manifest of this CreateJobRequest.
        :param description: The description of this CreateJobRequest.
        :param priority: The priority of this CreateJobRequest.
        :param role_arn: The role_arn of this CreateJobRequest.
        :param tags: The tags of this CreateJobRequest.
        :param manifest_generator: The manifest_generator of this CreateJobRequest.
        """
        self.openapi_types = {
            'confirmation_required': bool,
            'operation': CreateJobRequestOperation,
            'report': CreateJobRequestReport,
            'client_request_token': str,
            'manifest': CreateJobRequestManifest,
            'description': str,
            'priority': int,
            'role_arn': str,
            'tags': List[S3Tag],
            'manifest_generator': CreateJobRequestManifestGenerator
        }

        self.attribute_map = {
            'confirmation_required': 'ConfirmationRequired',
            'operation': 'Operation',
            'report': 'Report',
            'client_request_token': 'ClientRequestToken',
            'manifest': 'Manifest',
            'description': 'Description',
            'priority': 'Priority',
            'role_arn': 'RoleArn',
            'tags': 'Tags',
            'manifest_generator': 'ManifestGenerator'
        }

        self._confirmation_required = confirmation_required
        self._operation = operation
        self._report = report
        self._client_request_token = client_request_token
        self._manifest = manifest
        self._description = description
        self._priority = priority
        self._role_arn = role_arn
        self._tags = tags
        self._manifest_generator = manifest_generator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJob_request of this CreateJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confirmation_required(self):
        """Gets the confirmation_required of this CreateJobRequest.

        Indicates whether confirmation is required before Amazon S3 runs the job. Confirmation is only required for jobs created through the Amazon S3 console.

        :return: The confirmation_required of this CreateJobRequest.
        :rtype: bool
        """
        return self._confirmation_required

    @confirmation_required.setter
    def confirmation_required(self, confirmation_required):
        """Sets the confirmation_required of this CreateJobRequest.

        Indicates whether confirmation is required before Amazon S3 runs the job. Confirmation is only required for jobs created through the Amazon S3 console.

        :param confirmation_required: The confirmation_required of this CreateJobRequest.
        :type confirmation_required: bool
        """

        self._confirmation_required = confirmation_required

    @property
    def operation(self):
        """Gets the operation of this CreateJobRequest.


        :return: The operation of this CreateJobRequest.
        :rtype: CreateJobRequestOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this CreateJobRequest.


        :param operation: The operation of this CreateJobRequest.
        :type operation: CreateJobRequestOperation
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def report(self):
        """Gets the report of this CreateJobRequest.


        :return: The report of this CreateJobRequest.
        :rtype: CreateJobRequestReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this CreateJobRequest.


        :param report: The report of this CreateJobRequest.
        :type report: CreateJobRequestReport
        """
        if report is None:
            raise ValueError("Invalid value for `report`, must not be `None`")

        self._report = report

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateJobRequest.

        An idempotency token to ensure that you don't accidentally submit the same request twice. You can use any string up to the maximum length.

        :return: The client_request_token of this CreateJobRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateJobRequest.

        An idempotency token to ensure that you don't accidentally submit the same request twice. You can use any string up to the maximum length.

        :param client_request_token: The client_request_token of this CreateJobRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")

        self._client_request_token = client_request_token

    @property
    def manifest(self):
        """Gets the manifest of this CreateJobRequest.


        :return: The manifest of this CreateJobRequest.
        :rtype: CreateJobRequestManifest
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this CreateJobRequest.


        :param manifest: The manifest of this CreateJobRequest.
        :type manifest: CreateJobRequestManifest
        """

        self._manifest = manifest

    @property
    def description(self):
        """Gets the description of this CreateJobRequest.

        A description for this job. You can use any string within the permitted length. Descriptions don't need to be unique and can be used for multiple jobs.

        :return: The description of this CreateJobRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateJobRequest.

        A description for this job. You can use any string within the permitted length. Descriptions don't need to be unique and can be used for multiple jobs.

        :param description: The description of this CreateJobRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def priority(self):
        """Gets the priority of this CreateJobRequest.

        The numerical priority for this job. Higher numbers indicate higher priority.

        :return: The priority of this CreateJobRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateJobRequest.

        The numerical priority for this job. Higher numbers indicate higher priority.

        :param priority: The priority of this CreateJobRequest.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")
        if priority is not None and priority > 2147483647:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `2147483647`")
        if priority is not None and priority < 0:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")

        self._priority = priority

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateJobRequest.

        The Amazon Resource Name (ARN) for the Identity and Access Management (IAM) role that Batch Operations will use to run this job's action on every object in the manifest.

        :return: The role_arn of this CreateJobRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateJobRequest.

        The Amazon Resource Name (ARN) for the Identity and Access Management (IAM) role that Batch Operations will use to run this job's action on every object in the manifest.

        :param role_arn: The role_arn of this CreateJobRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 2048:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `2048`")
        if role_arn is not None and len(role_arn) < 1:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `1`")
        if role_arn is not None and not re.search(r'arn:[^:]+:iam::\d{12}:role\/.*', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/arn:[^:]+:iam::\d{12}:role\/.*/`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateJobRequest.

        A set of tags to associate with the S3 Batch Operations job. This is an optional parameter. 

        :return: The tags of this CreateJobRequest.
        :rtype: List[S3Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateJobRequest.

        A set of tags to associate with the S3 Batch Operations job. This is an optional parameter. 

        :param tags: The tags of this CreateJobRequest.
        :type tags: List[S3Tag]
        """

        self._tags = tags

    @property
    def manifest_generator(self):
        """Gets the manifest_generator of this CreateJobRequest.


        :return: The manifest_generator of this CreateJobRequest.
        :rtype: CreateJobRequestManifestGenerator
        """
        return self._manifest_generator

    @manifest_generator.setter
    def manifest_generator(self, manifest_generator):
        """Sets the manifest_generator of this CreateJobRequest.


        :param manifest_generator: The manifest_generator of this CreateJobRequest.
        :type manifest_generator: CreateJobRequestManifestGenerator
        """

        self._manifest_generator = manifest_generator
