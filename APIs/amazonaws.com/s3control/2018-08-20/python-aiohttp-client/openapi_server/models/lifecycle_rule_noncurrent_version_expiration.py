# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LifecycleRuleNoncurrentVersionExpiration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, noncurrent_days: int=None, newer_noncurrent_versions: int=None):
        """LifecycleRuleNoncurrentVersionExpiration - a model defined in OpenAPI

        :param noncurrent_days: The noncurrent_days of this LifecycleRuleNoncurrentVersionExpiration.
        :param newer_noncurrent_versions: The newer_noncurrent_versions of this LifecycleRuleNoncurrentVersionExpiration.
        """
        self.openapi_types = {
            'noncurrent_days': int,
            'newer_noncurrent_versions': int
        }

        self.attribute_map = {
            'noncurrent_days': 'NoncurrentDays',
            'newer_noncurrent_versions': 'NewerNoncurrentVersions'
        }

        self._noncurrent_days = noncurrent_days
        self._newer_noncurrent_versions = newer_noncurrent_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LifecycleRuleNoncurrentVersionExpiration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LifecycleRule_NoncurrentVersionExpiration of this LifecycleRuleNoncurrentVersionExpiration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def noncurrent_days(self):
        """Gets the noncurrent_days of this LifecycleRuleNoncurrentVersionExpiration.


        :return: The noncurrent_days of this LifecycleRuleNoncurrentVersionExpiration.
        :rtype: int
        """
        return self._noncurrent_days

    @noncurrent_days.setter
    def noncurrent_days(self, noncurrent_days):
        """Sets the noncurrent_days of this LifecycleRuleNoncurrentVersionExpiration.


        :param noncurrent_days: The noncurrent_days of this LifecycleRuleNoncurrentVersionExpiration.
        :type noncurrent_days: int
        """

        self._noncurrent_days = noncurrent_days

    @property
    def newer_noncurrent_versions(self):
        """Gets the newer_noncurrent_versions of this LifecycleRuleNoncurrentVersionExpiration.


        :return: The newer_noncurrent_versions of this LifecycleRuleNoncurrentVersionExpiration.
        :rtype: int
        """
        return self._newer_noncurrent_versions

    @newer_noncurrent_versions.setter
    def newer_noncurrent_versions(self, newer_noncurrent_versions):
        """Sets the newer_noncurrent_versions of this LifecycleRuleNoncurrentVersionExpiration.


        :param newer_noncurrent_versions: The newer_noncurrent_versions of this LifecycleRuleNoncurrentVersionExpiration.
        :type newer_noncurrent_versions: int
        """

        self._newer_noncurrent_versions = newer_noncurrent_versions
