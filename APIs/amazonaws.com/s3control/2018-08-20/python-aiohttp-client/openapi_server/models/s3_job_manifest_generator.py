# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_job_manifest_generator_filter import S3JobManifestGeneratorFilter
from openapi_server.models.s3_job_manifest_generator_manifest_output_location import S3JobManifestGeneratorManifestOutputLocation
from openapi_server import util


class S3JobManifestGenerator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_bucket_owner: str=None, source_bucket: str=None, manifest_output_location: S3JobManifestGeneratorManifestOutputLocation=None, filter: S3JobManifestGeneratorFilter=None, enable_manifest_output: bool=None):
        """S3JobManifestGenerator - a model defined in OpenAPI

        :param expected_bucket_owner: The expected_bucket_owner of this S3JobManifestGenerator.
        :param source_bucket: The source_bucket of this S3JobManifestGenerator.
        :param manifest_output_location: The manifest_output_location of this S3JobManifestGenerator.
        :param filter: The filter of this S3JobManifestGenerator.
        :param enable_manifest_output: The enable_manifest_output of this S3JobManifestGenerator.
        """
        self.openapi_types = {
            'expected_bucket_owner': str,
            'source_bucket': str,
            'manifest_output_location': S3JobManifestGeneratorManifestOutputLocation,
            'filter': S3JobManifestGeneratorFilter,
            'enable_manifest_output': bool
        }

        self.attribute_map = {
            'expected_bucket_owner': 'ExpectedBucketOwner',
            'source_bucket': 'SourceBucket',
            'manifest_output_location': 'ManifestOutputLocation',
            'filter': 'Filter',
            'enable_manifest_output': 'EnableManifestOutput'
        }

        self._expected_bucket_owner = expected_bucket_owner
        self._source_bucket = source_bucket
        self._manifest_output_location = manifest_output_location
        self._filter = filter
        self._enable_manifest_output = enable_manifest_output

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3JobManifestGenerator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3JobManifestGenerator of this S3JobManifestGenerator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_bucket_owner(self):
        """Gets the expected_bucket_owner of this S3JobManifestGenerator.


        :return: The expected_bucket_owner of this S3JobManifestGenerator.
        :rtype: str
        """
        return self._expected_bucket_owner

    @expected_bucket_owner.setter
    def expected_bucket_owner(self, expected_bucket_owner):
        """Sets the expected_bucket_owner of this S3JobManifestGenerator.


        :param expected_bucket_owner: The expected_bucket_owner of this S3JobManifestGenerator.
        :type expected_bucket_owner: str
        """

        self._expected_bucket_owner = expected_bucket_owner

    @property
    def source_bucket(self):
        """Gets the source_bucket of this S3JobManifestGenerator.


        :return: The source_bucket of this S3JobManifestGenerator.
        :rtype: str
        """
        return self._source_bucket

    @source_bucket.setter
    def source_bucket(self, source_bucket):
        """Sets the source_bucket of this S3JobManifestGenerator.


        :param source_bucket: The source_bucket of this S3JobManifestGenerator.
        :type source_bucket: str
        """
        if source_bucket is None:
            raise ValueError("Invalid value for `source_bucket`, must not be `None`")

        self._source_bucket = source_bucket

    @property
    def manifest_output_location(self):
        """Gets the manifest_output_location of this S3JobManifestGenerator.


        :return: The manifest_output_location of this S3JobManifestGenerator.
        :rtype: S3JobManifestGeneratorManifestOutputLocation
        """
        return self._manifest_output_location

    @manifest_output_location.setter
    def manifest_output_location(self, manifest_output_location):
        """Sets the manifest_output_location of this S3JobManifestGenerator.


        :param manifest_output_location: The manifest_output_location of this S3JobManifestGenerator.
        :type manifest_output_location: S3JobManifestGeneratorManifestOutputLocation
        """

        self._manifest_output_location = manifest_output_location

    @property
    def filter(self):
        """Gets the filter of this S3JobManifestGenerator.


        :return: The filter of this S3JobManifestGenerator.
        :rtype: S3JobManifestGeneratorFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this S3JobManifestGenerator.


        :param filter: The filter of this S3JobManifestGenerator.
        :type filter: S3JobManifestGeneratorFilter
        """

        self._filter = filter

    @property
    def enable_manifest_output(self):
        """Gets the enable_manifest_output of this S3JobManifestGenerator.


        :return: The enable_manifest_output of this S3JobManifestGenerator.
        :rtype: bool
        """
        return self._enable_manifest_output

    @enable_manifest_output.setter
    def enable_manifest_output(self, enable_manifest_output):
        """Sets the enable_manifest_output of this S3JobManifestGenerator.


        :param enable_manifest_output: The enable_manifest_output of this S3JobManifestGenerator.
        :type enable_manifest_output: bool
        """
        if enable_manifest_output is None:
            raise ValueError("Invalid value for `enable_manifest_output`, must not be `None`")

        self._enable_manifest_output = enable_manifest_output
