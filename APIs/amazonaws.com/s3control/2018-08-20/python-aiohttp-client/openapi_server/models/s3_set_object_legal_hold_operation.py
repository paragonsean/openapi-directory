# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_set_object_legal_hold_operation_legal_hold import S3SetObjectLegalHoldOperationLegalHold
from openapi_server import util


class S3SetObjectLegalHoldOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, legal_hold: S3SetObjectLegalHoldOperationLegalHold=None):
        """S3SetObjectLegalHoldOperation - a model defined in OpenAPI

        :param legal_hold: The legal_hold of this S3SetObjectLegalHoldOperation.
        """
        self.openapi_types = {
            'legal_hold': S3SetObjectLegalHoldOperationLegalHold
        }

        self.attribute_map = {
            'legal_hold': 'LegalHold'
        }

        self._legal_hold = legal_hold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3SetObjectLegalHoldOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3SetObjectLegalHoldOperation of this S3SetObjectLegalHoldOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def legal_hold(self):
        """Gets the legal_hold of this S3SetObjectLegalHoldOperation.


        :return: The legal_hold of this S3SetObjectLegalHoldOperation.
        :rtype: S3SetObjectLegalHoldOperationLegalHold
        """
        return self._legal_hold

    @legal_hold.setter
    def legal_hold(self, legal_hold):
        """Sets the legal_hold of this S3SetObjectLegalHoldOperation.


        :param legal_hold: The legal_hold of this S3SetObjectLegalHoldOperation.
        :type legal_hold: S3SetObjectLegalHoldOperationLegalHold
        """
        if legal_hold is None:
            raise ValueError("Invalid value for `legal_hold`, must not be `None`")

        self._legal_hold = legal_hold
