# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjectLambdaConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supporting_access_point: str=None, cloud_watch_metrics_enabled: bool=None, allowed_features: List=None, transformation_configurations: List=None):
        """ObjectLambdaConfiguration - a model defined in OpenAPI

        :param supporting_access_point: The supporting_access_point of this ObjectLambdaConfiguration.
        :param cloud_watch_metrics_enabled: The cloud_watch_metrics_enabled of this ObjectLambdaConfiguration.
        :param allowed_features: The allowed_features of this ObjectLambdaConfiguration.
        :param transformation_configurations: The transformation_configurations of this ObjectLambdaConfiguration.
        """
        self.openapi_types = {
            'supporting_access_point': str,
            'cloud_watch_metrics_enabled': bool,
            'allowed_features': List,
            'transformation_configurations': List
        }

        self.attribute_map = {
            'supporting_access_point': 'SupportingAccessPoint',
            'cloud_watch_metrics_enabled': 'CloudWatchMetricsEnabled',
            'allowed_features': 'AllowedFeatures',
            'transformation_configurations': 'TransformationConfigurations'
        }

        self._supporting_access_point = supporting_access_point
        self._cloud_watch_metrics_enabled = cloud_watch_metrics_enabled
        self._allowed_features = allowed_features
        self._transformation_configurations = transformation_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectLambdaConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectLambdaConfiguration of this ObjectLambdaConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supporting_access_point(self):
        """Gets the supporting_access_point of this ObjectLambdaConfiguration.


        :return: The supporting_access_point of this ObjectLambdaConfiguration.
        :rtype: str
        """
        return self._supporting_access_point

    @supporting_access_point.setter
    def supporting_access_point(self, supporting_access_point):
        """Sets the supporting_access_point of this ObjectLambdaConfiguration.


        :param supporting_access_point: The supporting_access_point of this ObjectLambdaConfiguration.
        :type supporting_access_point: str
        """
        if supporting_access_point is None:
            raise ValueError("Invalid value for `supporting_access_point`, must not be `None`")

        self._supporting_access_point = supporting_access_point

    @property
    def cloud_watch_metrics_enabled(self):
        """Gets the cloud_watch_metrics_enabled of this ObjectLambdaConfiguration.


        :return: The cloud_watch_metrics_enabled of this ObjectLambdaConfiguration.
        :rtype: bool
        """
        return self._cloud_watch_metrics_enabled

    @cloud_watch_metrics_enabled.setter
    def cloud_watch_metrics_enabled(self, cloud_watch_metrics_enabled):
        """Sets the cloud_watch_metrics_enabled of this ObjectLambdaConfiguration.


        :param cloud_watch_metrics_enabled: The cloud_watch_metrics_enabled of this ObjectLambdaConfiguration.
        :type cloud_watch_metrics_enabled: bool
        """

        self._cloud_watch_metrics_enabled = cloud_watch_metrics_enabled

    @property
    def allowed_features(self):
        """Gets the allowed_features of this ObjectLambdaConfiguration.


        :return: The allowed_features of this ObjectLambdaConfiguration.
        :rtype: List
        """
        return self._allowed_features

    @allowed_features.setter
    def allowed_features(self, allowed_features):
        """Sets the allowed_features of this ObjectLambdaConfiguration.


        :param allowed_features: The allowed_features of this ObjectLambdaConfiguration.
        :type allowed_features: List
        """

        self._allowed_features = allowed_features

    @property
    def transformation_configurations(self):
        """Gets the transformation_configurations of this ObjectLambdaConfiguration.


        :return: The transformation_configurations of this ObjectLambdaConfiguration.
        :rtype: List
        """
        return self._transformation_configurations

    @transformation_configurations.setter
    def transformation_configurations(self, transformation_configurations):
        """Sets the transformation_configurations of this ObjectLambdaConfiguration.


        :param transformation_configurations: The transformation_configurations of this ObjectLambdaConfiguration.
        :type transformation_configurations: List
        """
        if transformation_configurations is None:
            raise ValueError("Invalid value for `transformation_configurations`, must not be `None`")

        self._transformation_configurations = transformation_configurations
