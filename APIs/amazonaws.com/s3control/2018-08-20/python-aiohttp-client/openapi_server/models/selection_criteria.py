# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SelectionCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delimiter: str=None, max_depth: int=None, min_storage_bytes_percentage: float=None):
        """SelectionCriteria - a model defined in OpenAPI

        :param delimiter: The delimiter of this SelectionCriteria.
        :param max_depth: The max_depth of this SelectionCriteria.
        :param min_storage_bytes_percentage: The min_storage_bytes_percentage of this SelectionCriteria.
        """
        self.openapi_types = {
            'delimiter': str,
            'max_depth': int,
            'min_storage_bytes_percentage': float
        }

        self.attribute_map = {
            'delimiter': 'Delimiter',
            'max_depth': 'MaxDepth',
            'min_storage_bytes_percentage': 'MinStorageBytesPercentage'
        }

        self._delimiter = delimiter
        self._max_depth = max_depth
        self._min_storage_bytes_percentage = min_storage_bytes_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SelectionCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SelectionCriteria of this SelectionCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delimiter(self):
        """Gets the delimiter of this SelectionCriteria.


        :return: The delimiter of this SelectionCriteria.
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this SelectionCriteria.


        :param delimiter: The delimiter of this SelectionCriteria.
        :type delimiter: str
        """

        self._delimiter = delimiter

    @property
    def max_depth(self):
        """Gets the max_depth of this SelectionCriteria.


        :return: The max_depth of this SelectionCriteria.
        :rtype: int
        """
        return self._max_depth

    @max_depth.setter
    def max_depth(self, max_depth):
        """Sets the max_depth of this SelectionCriteria.


        :param max_depth: The max_depth of this SelectionCriteria.
        :type max_depth: int
        """

        self._max_depth = max_depth

    @property
    def min_storage_bytes_percentage(self):
        """Gets the min_storage_bytes_percentage of this SelectionCriteria.


        :return: The min_storage_bytes_percentage of this SelectionCriteria.
        :rtype: float
        """
        return self._min_storage_bytes_percentage

    @min_storage_bytes_percentage.setter
    def min_storage_bytes_percentage(self, min_storage_bytes_percentage):
        """Sets the min_storage_bytes_percentage of this SelectionCriteria.


        :param min_storage_bytes_percentage: The min_storage_bytes_percentage of this SelectionCriteria.
        :type min_storage_bytes_percentage: float
        """

        self._min_storage_bytes_percentage = min_storage_bytes_percentage
