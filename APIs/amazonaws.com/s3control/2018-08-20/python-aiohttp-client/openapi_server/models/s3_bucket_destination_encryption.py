# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_lens_data_export_encryption_ssekms import StorageLensDataExportEncryptionSSEKMS
from openapi_server import util


class S3BucketDestinationEncryption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sses3: object=None, ssekms: StorageLensDataExportEncryptionSSEKMS=None):
        """S3BucketDestinationEncryption - a model defined in OpenAPI

        :param sses3: The sses3 of this S3BucketDestinationEncryption.
        :param ssekms: The ssekms of this S3BucketDestinationEncryption.
        """
        self.openapi_types = {
            'sses3': object,
            'ssekms': StorageLensDataExportEncryptionSSEKMS
        }

        self.attribute_map = {
            'sses3': 'SSES3',
            'ssekms': 'SSEKMS'
        }

        self._sses3 = sses3
        self._ssekms = ssekms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3BucketDestinationEncryption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3BucketDestination_Encryption of this S3BucketDestinationEncryption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sses3(self):
        """Gets the sses3 of this S3BucketDestinationEncryption.


        :return: The sses3 of this S3BucketDestinationEncryption.
        :rtype: object
        """
        return self._sses3

    @sses3.setter
    def sses3(self, sses3):
        """Sets the sses3 of this S3BucketDestinationEncryption.


        :param sses3: The sses3 of this S3BucketDestinationEncryption.
        :type sses3: object
        """

        self._sses3 = sses3

    @property
    def ssekms(self):
        """Gets the ssekms of this S3BucketDestinationEncryption.


        :return: The ssekms of this S3BucketDestinationEncryption.
        :rtype: StorageLensDataExportEncryptionSSEKMS
        """
        return self._ssekms

    @ssekms.setter
    def ssekms(self, ssekms):
        """Sets the ssekms of this S3BucketDestinationEncryption.


        :param ssekms: The ssekms of this S3BucketDestinationEncryption.
        :type ssekms: StorageLensDataExportEncryptionSSEKMS
        """

        self._ssekms = ssekms
