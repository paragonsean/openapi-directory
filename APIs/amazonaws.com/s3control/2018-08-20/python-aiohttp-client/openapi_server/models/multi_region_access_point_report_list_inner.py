# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.multi_region_access_point_status import MultiRegionAccessPointStatus
from openapi_server.models.public_access_block_configuration import PublicAccessBlockConfiguration
from openapi_server import util


class MultiRegionAccessPointReportListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, alias: str=None, created_at: datetime=None, public_access_block: PublicAccessBlockConfiguration=None, status: MultiRegionAccessPointStatus=None, regions: List=None):
        """MultiRegionAccessPointReportListInner - a model defined in OpenAPI

        :param name: The name of this MultiRegionAccessPointReportListInner.
        :param alias: The alias of this MultiRegionAccessPointReportListInner.
        :param created_at: The created_at of this MultiRegionAccessPointReportListInner.
        :param public_access_block: The public_access_block of this MultiRegionAccessPointReportListInner.
        :param status: The status of this MultiRegionAccessPointReportListInner.
        :param regions: The regions of this MultiRegionAccessPointReportListInner.
        """
        self.openapi_types = {
            'name': str,
            'alias': str,
            'created_at': datetime,
            'public_access_block': PublicAccessBlockConfiguration,
            'status': MultiRegionAccessPointStatus,
            'regions': List
        }

        self.attribute_map = {
            'name': 'Name',
            'alias': 'Alias',
            'created_at': 'CreatedAt',
            'public_access_block': 'PublicAccessBlock',
            'status': 'Status',
            'regions': 'Regions'
        }

        self._name = name
        self._alias = alias
        self._created_at = created_at
        self._public_access_block = public_access_block
        self._status = status
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiRegionAccessPointReportListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiRegionAccessPointReportList_inner of this MultiRegionAccessPointReportListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this MultiRegionAccessPointReportListInner.


        :return: The name of this MultiRegionAccessPointReportListInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MultiRegionAccessPointReportListInner.


        :param name: The name of this MultiRegionAccessPointReportListInner.
        :type name: str
        """

        self._name = name

    @property
    def alias(self):
        """Gets the alias of this MultiRegionAccessPointReportListInner.


        :return: The alias of this MultiRegionAccessPointReportListInner.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this MultiRegionAccessPointReportListInner.


        :param alias: The alias of this MultiRegionAccessPointReportListInner.
        :type alias: str
        """

        self._alias = alias

    @property
    def created_at(self):
        """Gets the created_at of this MultiRegionAccessPointReportListInner.


        :return: The created_at of this MultiRegionAccessPointReportListInner.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MultiRegionAccessPointReportListInner.


        :param created_at: The created_at of this MultiRegionAccessPointReportListInner.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def public_access_block(self):
        """Gets the public_access_block of this MultiRegionAccessPointReportListInner.


        :return: The public_access_block of this MultiRegionAccessPointReportListInner.
        :rtype: PublicAccessBlockConfiguration
        """
        return self._public_access_block

    @public_access_block.setter
    def public_access_block(self, public_access_block):
        """Sets the public_access_block of this MultiRegionAccessPointReportListInner.


        :param public_access_block: The public_access_block of this MultiRegionAccessPointReportListInner.
        :type public_access_block: PublicAccessBlockConfiguration
        """

        self._public_access_block = public_access_block

    @property
    def status(self):
        """Gets the status of this MultiRegionAccessPointReportListInner.


        :return: The status of this MultiRegionAccessPointReportListInner.
        :rtype: MultiRegionAccessPointStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MultiRegionAccessPointReportListInner.


        :param status: The status of this MultiRegionAccessPointReportListInner.
        :type status: MultiRegionAccessPointStatus
        """

        self._status = status

    @property
    def regions(self):
        """Gets the regions of this MultiRegionAccessPointReportListInner.


        :return: The regions of this MultiRegionAccessPointReportListInner.
        :rtype: List
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this MultiRegionAccessPointReportListInner.


        :param regions: The regions of this MultiRegionAccessPointReportListInner.
        :type regions: List
        """

        self._regions = regions
