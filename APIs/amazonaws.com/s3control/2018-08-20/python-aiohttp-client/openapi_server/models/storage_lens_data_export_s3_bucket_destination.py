# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.format import Format
from openapi_server.models.output_schema_version import OutputSchemaVersion
from openapi_server.models.s3_bucket_destination_encryption import S3BucketDestinationEncryption
from openapi_server import util


class StorageLensDataExportS3BucketDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: Format=None, output_schema_version: OutputSchemaVersion=None, account_id: str=None, arn: str=None, prefix: str=None, encryption: S3BucketDestinationEncryption=None):
        """StorageLensDataExportS3BucketDestination - a model defined in OpenAPI

        :param format: The format of this StorageLensDataExportS3BucketDestination.
        :param output_schema_version: The output_schema_version of this StorageLensDataExportS3BucketDestination.
        :param account_id: The account_id of this StorageLensDataExportS3BucketDestination.
        :param arn: The arn of this StorageLensDataExportS3BucketDestination.
        :param prefix: The prefix of this StorageLensDataExportS3BucketDestination.
        :param encryption: The encryption of this StorageLensDataExportS3BucketDestination.
        """
        self.openapi_types = {
            'format': Format,
            'output_schema_version': OutputSchemaVersion,
            'account_id': str,
            'arn': str,
            'prefix': str,
            'encryption': S3BucketDestinationEncryption
        }

        self.attribute_map = {
            'format': 'Format',
            'output_schema_version': 'OutputSchemaVersion',
            'account_id': 'AccountId',
            'arn': 'Arn',
            'prefix': 'Prefix',
            'encryption': 'Encryption'
        }

        self._format = format
        self._output_schema_version = output_schema_version
        self._account_id = account_id
        self._arn = arn
        self._prefix = prefix
        self._encryption = encryption

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageLensDataExportS3BucketDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageLensDataExport_S3BucketDestination of this StorageLensDataExportS3BucketDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this StorageLensDataExportS3BucketDestination.


        :return: The format of this StorageLensDataExportS3BucketDestination.
        :rtype: Format
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this StorageLensDataExportS3BucketDestination.


        :param format: The format of this StorageLensDataExportS3BucketDestination.
        :type format: Format
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def output_schema_version(self):
        """Gets the output_schema_version of this StorageLensDataExportS3BucketDestination.


        :return: The output_schema_version of this StorageLensDataExportS3BucketDestination.
        :rtype: OutputSchemaVersion
        """
        return self._output_schema_version

    @output_schema_version.setter
    def output_schema_version(self, output_schema_version):
        """Sets the output_schema_version of this StorageLensDataExportS3BucketDestination.


        :param output_schema_version: The output_schema_version of this StorageLensDataExportS3BucketDestination.
        :type output_schema_version: OutputSchemaVersion
        """
        if output_schema_version is None:
            raise ValueError("Invalid value for `output_schema_version`, must not be `None`")

        self._output_schema_version = output_schema_version

    @property
    def account_id(self):
        """Gets the account_id of this StorageLensDataExportS3BucketDestination.


        :return: The account_id of this StorageLensDataExportS3BucketDestination.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this StorageLensDataExportS3BucketDestination.


        :param account_id: The account_id of this StorageLensDataExportS3BucketDestination.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def arn(self):
        """Gets the arn of this StorageLensDataExportS3BucketDestination.


        :return: The arn of this StorageLensDataExportS3BucketDestination.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this StorageLensDataExportS3BucketDestination.


        :param arn: The arn of this StorageLensDataExportS3BucketDestination.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def prefix(self):
        """Gets the prefix of this StorageLensDataExportS3BucketDestination.


        :return: The prefix of this StorageLensDataExportS3BucketDestination.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this StorageLensDataExportS3BucketDestination.


        :param prefix: The prefix of this StorageLensDataExportS3BucketDestination.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def encryption(self):
        """Gets the encryption of this StorageLensDataExportS3BucketDestination.


        :return: The encryption of this StorageLensDataExportS3BucketDestination.
        :rtype: S3BucketDestinationEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this StorageLensDataExportS3BucketDestination.


        :param encryption: The encryption of this StorageLensDataExportS3BucketDestination.
        :type encryption: S3BucketDestinationEncryption
        """

        self._encryption = encryption
