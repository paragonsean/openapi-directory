# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_storage_lens_configuration_request_tags_inner import PutStorageLensConfigurationRequestTagsInner
from openapi_server import util


class PutStorageLensConfigurationTaggingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tags: List[PutStorageLensConfigurationRequestTagsInner]=None):
        """PutStorageLensConfigurationTaggingRequest - a model defined in OpenAPI

        :param tags: The tags of this PutStorageLensConfigurationTaggingRequest.
        """
        self.openapi_types = {
            'tags': List[PutStorageLensConfigurationRequestTagsInner]
        }

        self.attribute_map = {
            'tags': 'Tags'
        }

        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutStorageLensConfigurationTaggingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutStorageLensConfigurationTagging_request of this PutStorageLensConfigurationTaggingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tags(self):
        """Gets the tags of this PutStorageLensConfigurationTaggingRequest.

        <p>The tag set of the S3 Storage Lens configuration.</p> <note> <p>You can set up to a maximum of 50 tags.</p> </note>

        :return: The tags of this PutStorageLensConfigurationTaggingRequest.
        :rtype: List[PutStorageLensConfigurationRequestTagsInner]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutStorageLensConfigurationTaggingRequest.

        <p>The tag set of the S3 Storage Lens configuration.</p> <note> <p>You can set up to a maximum of 50 tags.</p> </note>

        :param tags: The tags of this PutStorageLensConfigurationTaggingRequest.
        :type tags: List[PutStorageLensConfigurationRequestTagsInner]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
