# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metrics_event_threshold import MetricsEventThreshold
from openapi_server.models.metrics_status import MetricsStatus
from openapi_server import util


class Metrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: MetricsStatus=None, event_threshold: MetricsEventThreshold=None):
        """Metrics - a model defined in OpenAPI

        :param status: The status of this Metrics.
        :param event_threshold: The event_threshold of this Metrics.
        """
        self.openapi_types = {
            'status': MetricsStatus,
            'event_threshold': MetricsEventThreshold
        }

        self.attribute_map = {
            'status': 'Status',
            'event_threshold': 'EventThreshold'
        }

        self._status = status
        self._event_threshold = event_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metrics of this Metrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this Metrics.


        :return: The status of this Metrics.
        :rtype: MetricsStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Metrics.


        :param status: The status of this Metrics.
        :type status: MetricsStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def event_threshold(self):
        """Gets the event_threshold of this Metrics.


        :return: The event_threshold of this Metrics.
        :rtype: MetricsEventThreshold
        """
        return self._event_threshold

    @event_threshold.setter
    def event_threshold(self, event_threshold):
        """Sets the event_threshold of this Metrics.


        :param event_threshold: The event_threshold of this Metrics.
        :type event_threshold: MetricsEventThreshold
        """

        self._event_threshold = event_threshold
