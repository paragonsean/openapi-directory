# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_access_point_request_public_access_block_configuration import CreateAccessPointRequestPublicAccessBlockConfiguration
from openapi_server.models.create_access_point_request_vpc_configuration import CreateAccessPointRequestVpcConfiguration
import re
from openapi_server import util


class CreateAccessPointRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, vpc_configuration: CreateAccessPointRequestVpcConfiguration=None, public_access_block_configuration: CreateAccessPointRequestPublicAccessBlockConfiguration=None, bucket_account_id: str=None):
        """CreateAccessPointRequest - a model defined in OpenAPI

        :param bucket: The bucket of this CreateAccessPointRequest.
        :param vpc_configuration: The vpc_configuration of this CreateAccessPointRequest.
        :param public_access_block_configuration: The public_access_block_configuration of this CreateAccessPointRequest.
        :param bucket_account_id: The bucket_account_id of this CreateAccessPointRequest.
        """
        self.openapi_types = {
            'bucket': str,
            'vpc_configuration': CreateAccessPointRequestVpcConfiguration,
            'public_access_block_configuration': CreateAccessPointRequestPublicAccessBlockConfiguration,
            'bucket_account_id': str
        }

        self.attribute_map = {
            'bucket': 'Bucket',
            'vpc_configuration': 'VpcConfiguration',
            'public_access_block_configuration': 'PublicAccessBlockConfiguration',
            'bucket_account_id': 'BucketAccountId'
        }

        self._bucket = bucket
        self._vpc_configuration = vpc_configuration
        self._public_access_block_configuration = public_access_block_configuration
        self._bucket_account_id = bucket_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccessPointRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAccessPoint_request of this CreateAccessPointRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this CreateAccessPointRequest.

        <p>The name of the bucket that you want to associate this access point with.</p> <p>For using this parameter with Amazon S3 on Outposts with the REST API, you must specify the name and the x-amz-outpost-id as well.</p> <p>For using this parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must specify the ARN of the bucket accessed in the format <code>arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt;my-bucket-name&gt;</code>. For example, to access the bucket <code>reports</code> through Outpost <code>my-outpost</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports</code>. The value must be URL encoded. </p>

        :return: The bucket of this CreateAccessPointRequest.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this CreateAccessPointRequest.

        <p>The name of the bucket that you want to associate this access point with.</p> <p>For using this parameter with Amazon S3 on Outposts with the REST API, you must specify the name and the x-amz-outpost-id as well.</p> <p>For using this parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must specify the ARN of the bucket accessed in the format <code>arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt;my-bucket-name&gt;</code>. For example, to access the bucket <code>reports</code> through Outpost <code>my-outpost</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports</code>. The value must be URL encoded. </p>

        :param bucket: The bucket of this CreateAccessPointRequest.
        :type bucket: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")
        if bucket is not None and len(bucket) > 255:
            raise ValueError("Invalid value for `bucket`, length must be less than or equal to `255`")
        if bucket is not None and len(bucket) < 3:
            raise ValueError("Invalid value for `bucket`, length must be greater than or equal to `3`")

        self._bucket = bucket

    @property
    def vpc_configuration(self):
        """Gets the vpc_configuration of this CreateAccessPointRequest.


        :return: The vpc_configuration of this CreateAccessPointRequest.
        :rtype: CreateAccessPointRequestVpcConfiguration
        """
        return self._vpc_configuration

    @vpc_configuration.setter
    def vpc_configuration(self, vpc_configuration):
        """Sets the vpc_configuration of this CreateAccessPointRequest.


        :param vpc_configuration: The vpc_configuration of this CreateAccessPointRequest.
        :type vpc_configuration: CreateAccessPointRequestVpcConfiguration
        """

        self._vpc_configuration = vpc_configuration

    @property
    def public_access_block_configuration(self):
        """Gets the public_access_block_configuration of this CreateAccessPointRequest.


        :return: The public_access_block_configuration of this CreateAccessPointRequest.
        :rtype: CreateAccessPointRequestPublicAccessBlockConfiguration
        """
        return self._public_access_block_configuration

    @public_access_block_configuration.setter
    def public_access_block_configuration(self, public_access_block_configuration):
        """Sets the public_access_block_configuration of this CreateAccessPointRequest.


        :param public_access_block_configuration: The public_access_block_configuration of this CreateAccessPointRequest.
        :type public_access_block_configuration: CreateAccessPointRequestPublicAccessBlockConfiguration
        """

        self._public_access_block_configuration = public_access_block_configuration

    @property
    def bucket_account_id(self):
        """Gets the bucket_account_id of this CreateAccessPointRequest.

        The Amazon Web Services account ID associated with the S3 bucket associated with this access point.

        :return: The bucket_account_id of this CreateAccessPointRequest.
        :rtype: str
        """
        return self._bucket_account_id

    @bucket_account_id.setter
    def bucket_account_id(self, bucket_account_id):
        """Sets the bucket_account_id of this CreateAccessPointRequest.

        The Amazon Web Services account ID associated with the S3 bucket associated with this access point.

        :param bucket_account_id: The bucket_account_id of this CreateAccessPointRequest.
        :type bucket_account_id: str
        """
        if bucket_account_id is not None and len(bucket_account_id) > 64:
            raise ValueError("Invalid value for `bucket_account_id`, length must be less than or equal to `64`")
        if bucket_account_id is not None and not re.search(r'^\d{12}$', bucket_account_id):
            raise ValueError("Invalid value for `bucket_account_id`, must be a follow pattern or equal to `/^\d{12}$/`")

        self._bucket_account_id = bucket_account_id
