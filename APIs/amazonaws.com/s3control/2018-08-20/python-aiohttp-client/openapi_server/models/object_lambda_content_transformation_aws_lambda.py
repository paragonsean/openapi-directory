# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjectLambdaContentTransformationAwsLambda(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, function_arn: str=None, function_payload: str=None):
        """ObjectLambdaContentTransformationAwsLambda - a model defined in OpenAPI

        :param function_arn: The function_arn of this ObjectLambdaContentTransformationAwsLambda.
        :param function_payload: The function_payload of this ObjectLambdaContentTransformationAwsLambda.
        """
        self.openapi_types = {
            'function_arn': str,
            'function_payload': str
        }

        self.attribute_map = {
            'function_arn': 'FunctionArn',
            'function_payload': 'FunctionPayload'
        }

        self._function_arn = function_arn
        self._function_payload = function_payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectLambdaContentTransformationAwsLambda':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectLambdaContentTransformation_AwsLambda of this ObjectLambdaContentTransformationAwsLambda.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def function_arn(self):
        """Gets the function_arn of this ObjectLambdaContentTransformationAwsLambda.


        :return: The function_arn of this ObjectLambdaContentTransformationAwsLambda.
        :rtype: str
        """
        return self._function_arn

    @function_arn.setter
    def function_arn(self, function_arn):
        """Sets the function_arn of this ObjectLambdaContentTransformationAwsLambda.


        :param function_arn: The function_arn of this ObjectLambdaContentTransformationAwsLambda.
        :type function_arn: str
        """
        if function_arn is None:
            raise ValueError("Invalid value for `function_arn`, must not be `None`")

        self._function_arn = function_arn

    @property
    def function_payload(self):
        """Gets the function_payload of this ObjectLambdaContentTransformationAwsLambda.


        :return: The function_payload of this ObjectLambdaContentTransformationAwsLambda.
        :rtype: str
        """
        return self._function_payload

    @function_payload.setter
    def function_payload(self, function_payload):
        """Sets the function_payload of this ObjectLambdaContentTransformationAwsLambda.


        :param function_payload: The function_payload of this ObjectLambdaContentTransformationAwsLambda.
        :type function_payload: str
        """

        self._function_payload = function_payload
