# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_set_object_retention_operation_retention import S3SetObjectRetentionOperationRetention
from openapi_server import util


class S3SetObjectRetentionOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bypass_governance_retention: bool=None, retention: S3SetObjectRetentionOperationRetention=None):
        """S3SetObjectRetentionOperation - a model defined in OpenAPI

        :param bypass_governance_retention: The bypass_governance_retention of this S3SetObjectRetentionOperation.
        :param retention: The retention of this S3SetObjectRetentionOperation.
        """
        self.openapi_types = {
            'bypass_governance_retention': bool,
            'retention': S3SetObjectRetentionOperationRetention
        }

        self.attribute_map = {
            'bypass_governance_retention': 'BypassGovernanceRetention',
            'retention': 'Retention'
        }

        self._bypass_governance_retention = bypass_governance_retention
        self._retention = retention

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3SetObjectRetentionOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3SetObjectRetentionOperation of this S3SetObjectRetentionOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bypass_governance_retention(self):
        """Gets the bypass_governance_retention of this S3SetObjectRetentionOperation.


        :return: The bypass_governance_retention of this S3SetObjectRetentionOperation.
        :rtype: bool
        """
        return self._bypass_governance_retention

    @bypass_governance_retention.setter
    def bypass_governance_retention(self, bypass_governance_retention):
        """Sets the bypass_governance_retention of this S3SetObjectRetentionOperation.


        :param bypass_governance_retention: The bypass_governance_retention of this S3SetObjectRetentionOperation.
        :type bypass_governance_retention: bool
        """

        self._bypass_governance_retention = bypass_governance_retention

    @property
    def retention(self):
        """Gets the retention of this S3SetObjectRetentionOperation.


        :return: The retention of this S3SetObjectRetentionOperation.
        :rtype: S3SetObjectRetentionOperationRetention
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this S3SetObjectRetentionOperation.


        :param retention: The retention of this S3SetObjectRetentionOperation.
        :type retention: S3SetObjectRetentionOperationRetention
        """
        if retention is None:
            raise ValueError("Invalid value for `retention`, must not be `None`")

        self._retention = retention
