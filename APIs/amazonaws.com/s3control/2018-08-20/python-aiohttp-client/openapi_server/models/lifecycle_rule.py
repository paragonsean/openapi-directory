# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expiration_status import ExpirationStatus
from openapi_server.models.lifecycle_rule_abort_incomplete_multipart_upload import LifecycleRuleAbortIncompleteMultipartUpload
from openapi_server.models.lifecycle_rule_expiration import LifecycleRuleExpiration
from openapi_server.models.lifecycle_rule_filter import LifecycleRuleFilter
from openapi_server.models.lifecycle_rule_noncurrent_version_expiration import LifecycleRuleNoncurrentVersionExpiration
from openapi_server import util


class LifecycleRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration: LifecycleRuleExpiration=None, id: str=None, filter: LifecycleRuleFilter=None, status: ExpirationStatus=None, transitions: List=None, noncurrent_version_transitions: List=None, noncurrent_version_expiration: LifecycleRuleNoncurrentVersionExpiration=None, abort_incomplete_multipart_upload: LifecycleRuleAbortIncompleteMultipartUpload=None):
        """LifecycleRule - a model defined in OpenAPI

        :param expiration: The expiration of this LifecycleRule.
        :param id: The id of this LifecycleRule.
        :param filter: The filter of this LifecycleRule.
        :param status: The status of this LifecycleRule.
        :param transitions: The transitions of this LifecycleRule.
        :param noncurrent_version_transitions: The noncurrent_version_transitions of this LifecycleRule.
        :param noncurrent_version_expiration: The noncurrent_version_expiration of this LifecycleRule.
        :param abort_incomplete_multipart_upload: The abort_incomplete_multipart_upload of this LifecycleRule.
        """
        self.openapi_types = {
            'expiration': LifecycleRuleExpiration,
            'id': str,
            'filter': LifecycleRuleFilter,
            'status': ExpirationStatus,
            'transitions': List,
            'noncurrent_version_transitions': List,
            'noncurrent_version_expiration': LifecycleRuleNoncurrentVersionExpiration,
            'abort_incomplete_multipart_upload': LifecycleRuleAbortIncompleteMultipartUpload
        }

        self.attribute_map = {
            'expiration': 'Expiration',
            'id': 'ID',
            'filter': 'Filter',
            'status': 'Status',
            'transitions': 'Transitions',
            'noncurrent_version_transitions': 'NoncurrentVersionTransitions',
            'noncurrent_version_expiration': 'NoncurrentVersionExpiration',
            'abort_incomplete_multipart_upload': 'AbortIncompleteMultipartUpload'
        }

        self._expiration = expiration
        self._id = id
        self._filter = filter
        self._status = status
        self._transitions = transitions
        self._noncurrent_version_transitions = noncurrent_version_transitions
        self._noncurrent_version_expiration = noncurrent_version_expiration
        self._abort_incomplete_multipart_upload = abort_incomplete_multipart_upload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LifecycleRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LifecycleRule of this LifecycleRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration(self):
        """Gets the expiration of this LifecycleRule.


        :return: The expiration of this LifecycleRule.
        :rtype: LifecycleRuleExpiration
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this LifecycleRule.


        :param expiration: The expiration of this LifecycleRule.
        :type expiration: LifecycleRuleExpiration
        """

        self._expiration = expiration

    @property
    def id(self):
        """Gets the id of this LifecycleRule.


        :return: The id of this LifecycleRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LifecycleRule.


        :param id: The id of this LifecycleRule.
        :type id: str
        """

        self._id = id

    @property
    def filter(self):
        """Gets the filter of this LifecycleRule.


        :return: The filter of this LifecycleRule.
        :rtype: LifecycleRuleFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LifecycleRule.


        :param filter: The filter of this LifecycleRule.
        :type filter: LifecycleRuleFilter
        """

        self._filter = filter

    @property
    def status(self):
        """Gets the status of this LifecycleRule.


        :return: The status of this LifecycleRule.
        :rtype: ExpirationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LifecycleRule.


        :param status: The status of this LifecycleRule.
        :type status: ExpirationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def transitions(self):
        """Gets the transitions of this LifecycleRule.


        :return: The transitions of this LifecycleRule.
        :rtype: List
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this LifecycleRule.


        :param transitions: The transitions of this LifecycleRule.
        :type transitions: List
        """

        self._transitions = transitions

    @property
    def noncurrent_version_transitions(self):
        """Gets the noncurrent_version_transitions of this LifecycleRule.


        :return: The noncurrent_version_transitions of this LifecycleRule.
        :rtype: List
        """
        return self._noncurrent_version_transitions

    @noncurrent_version_transitions.setter
    def noncurrent_version_transitions(self, noncurrent_version_transitions):
        """Sets the noncurrent_version_transitions of this LifecycleRule.


        :param noncurrent_version_transitions: The noncurrent_version_transitions of this LifecycleRule.
        :type noncurrent_version_transitions: List
        """

        self._noncurrent_version_transitions = noncurrent_version_transitions

    @property
    def noncurrent_version_expiration(self):
        """Gets the noncurrent_version_expiration of this LifecycleRule.


        :return: The noncurrent_version_expiration of this LifecycleRule.
        :rtype: LifecycleRuleNoncurrentVersionExpiration
        """
        return self._noncurrent_version_expiration

    @noncurrent_version_expiration.setter
    def noncurrent_version_expiration(self, noncurrent_version_expiration):
        """Sets the noncurrent_version_expiration of this LifecycleRule.


        :param noncurrent_version_expiration: The noncurrent_version_expiration of this LifecycleRule.
        :type noncurrent_version_expiration: LifecycleRuleNoncurrentVersionExpiration
        """

        self._noncurrent_version_expiration = noncurrent_version_expiration

    @property
    def abort_incomplete_multipart_upload(self):
        """Gets the abort_incomplete_multipart_upload of this LifecycleRule.


        :return: The abort_incomplete_multipart_upload of this LifecycleRule.
        :rtype: LifecycleRuleAbortIncompleteMultipartUpload
        """
        return self._abort_incomplete_multipart_upload

    @abort_incomplete_multipart_upload.setter
    def abort_incomplete_multipart_upload(self, abort_incomplete_multipart_upload):
        """Sets the abort_incomplete_multipart_upload of this LifecycleRule.


        :param abort_incomplete_multipart_upload: The abort_incomplete_multipart_upload of this LifecycleRule.
        :type abort_incomplete_multipart_upload: LifecycleRuleAbortIncompleteMultipartUpload
        """

        self._abort_incomplete_multipart_upload = abort_incomplete_multipart_upload
