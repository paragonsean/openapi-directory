# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replication_time_status import ReplicationTimeStatus
from openapi_server.models.replication_time_time import ReplicationTimeTime
from openapi_server import util


class ReplicationTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: ReplicationTimeStatus=None, time: ReplicationTimeTime=None):
        """ReplicationTime - a model defined in OpenAPI

        :param status: The status of this ReplicationTime.
        :param time: The time of this ReplicationTime.
        """
        self.openapi_types = {
            'status': ReplicationTimeStatus,
            'time': ReplicationTimeTime
        }

        self.attribute_map = {
            'status': 'Status',
            'time': 'Time'
        }

        self._status = status
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicationTime of this ReplicationTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this ReplicationTime.


        :return: The status of this ReplicationTime.
        :rtype: ReplicationTimeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReplicationTime.


        :param status: The status of this ReplicationTime.
        :type status: ReplicationTimeStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def time(self):
        """Gets the time of this ReplicationTime.


        :return: The time of this ReplicationTime.
        :rtype: ReplicationTimeTime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ReplicationTime.


        :param time: The time of this ReplicationTime.
        :type time: ReplicationTimeTime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
