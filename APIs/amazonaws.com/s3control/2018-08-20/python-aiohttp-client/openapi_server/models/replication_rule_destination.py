# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_access_control_translation import DestinationAccessControlTranslation
from openapi_server.models.destination_encryption_configuration import DestinationEncryptionConfiguration
from openapi_server.models.destination_metrics import DestinationMetrics
from openapi_server.models.destination_replication_time import DestinationReplicationTime
from openapi_server.models.replication_storage_class import ReplicationStorageClass
from openapi_server import util


class ReplicationRuleDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, bucket: str=None, replication_time: DestinationReplicationTime=None, access_control_translation: DestinationAccessControlTranslation=None, encryption_configuration: DestinationEncryptionConfiguration=None, metrics: DestinationMetrics=None, storage_class: ReplicationStorageClass=None):
        """ReplicationRuleDestination - a model defined in OpenAPI

        :param account: The account of this ReplicationRuleDestination.
        :param bucket: The bucket of this ReplicationRuleDestination.
        :param replication_time: The replication_time of this ReplicationRuleDestination.
        :param access_control_translation: The access_control_translation of this ReplicationRuleDestination.
        :param encryption_configuration: The encryption_configuration of this ReplicationRuleDestination.
        :param metrics: The metrics of this ReplicationRuleDestination.
        :param storage_class: The storage_class of this ReplicationRuleDestination.
        """
        self.openapi_types = {
            'account': str,
            'bucket': str,
            'replication_time': DestinationReplicationTime,
            'access_control_translation': DestinationAccessControlTranslation,
            'encryption_configuration': DestinationEncryptionConfiguration,
            'metrics': DestinationMetrics,
            'storage_class': ReplicationStorageClass
        }

        self.attribute_map = {
            'account': 'Account',
            'bucket': 'Bucket',
            'replication_time': 'ReplicationTime',
            'access_control_translation': 'AccessControlTranslation',
            'encryption_configuration': 'EncryptionConfiguration',
            'metrics': 'Metrics',
            'storage_class': 'StorageClass'
        }

        self._account = account
        self._bucket = bucket
        self._replication_time = replication_time
        self._access_control_translation = access_control_translation
        self._encryption_configuration = encryption_configuration
        self._metrics = metrics
        self._storage_class = storage_class

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationRuleDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicationRule_Destination of this ReplicationRuleDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this ReplicationRuleDestination.


        :return: The account of this ReplicationRuleDestination.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ReplicationRuleDestination.


        :param account: The account of this ReplicationRuleDestination.
        :type account: str
        """

        self._account = account

    @property
    def bucket(self):
        """Gets the bucket of this ReplicationRuleDestination.


        :return: The bucket of this ReplicationRuleDestination.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this ReplicationRuleDestination.


        :param bucket: The bucket of this ReplicationRuleDestination.
        :type bucket: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")

        self._bucket = bucket

    @property
    def replication_time(self):
        """Gets the replication_time of this ReplicationRuleDestination.


        :return: The replication_time of this ReplicationRuleDestination.
        :rtype: DestinationReplicationTime
        """
        return self._replication_time

    @replication_time.setter
    def replication_time(self, replication_time):
        """Sets the replication_time of this ReplicationRuleDestination.


        :param replication_time: The replication_time of this ReplicationRuleDestination.
        :type replication_time: DestinationReplicationTime
        """

        self._replication_time = replication_time

    @property
    def access_control_translation(self):
        """Gets the access_control_translation of this ReplicationRuleDestination.


        :return: The access_control_translation of this ReplicationRuleDestination.
        :rtype: DestinationAccessControlTranslation
        """
        return self._access_control_translation

    @access_control_translation.setter
    def access_control_translation(self, access_control_translation):
        """Sets the access_control_translation of this ReplicationRuleDestination.


        :param access_control_translation: The access_control_translation of this ReplicationRuleDestination.
        :type access_control_translation: DestinationAccessControlTranslation
        """

        self._access_control_translation = access_control_translation

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this ReplicationRuleDestination.


        :return: The encryption_configuration of this ReplicationRuleDestination.
        :rtype: DestinationEncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this ReplicationRuleDestination.


        :param encryption_configuration: The encryption_configuration of this ReplicationRuleDestination.
        :type encryption_configuration: DestinationEncryptionConfiguration
        """

        self._encryption_configuration = encryption_configuration

    @property
    def metrics(self):
        """Gets the metrics of this ReplicationRuleDestination.


        :return: The metrics of this ReplicationRuleDestination.
        :rtype: DestinationMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ReplicationRuleDestination.


        :param metrics: The metrics of this ReplicationRuleDestination.
        :type metrics: DestinationMetrics
        """

        self._metrics = metrics

    @property
    def storage_class(self):
        """Gets the storage_class of this ReplicationRuleDestination.


        :return: The storage_class of this ReplicationRuleDestination.
        :rtype: ReplicationStorageClass
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this ReplicationRuleDestination.


        :param storage_class: The storage_class of this ReplicationRuleDestination.
        :type storage_class: ReplicationStorageClass
        """

        self._storage_class = storage_class
