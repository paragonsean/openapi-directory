# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.generated_manifest_format import GeneratedManifestFormat
from openapi_server.models.s3_manifest_output_location_manifest_encryption import S3ManifestOutputLocationManifestEncryption
from openapi_server import util


class S3ManifestOutputLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_manifest_bucket_owner: str=None, bucket: str=None, manifest_prefix: str=None, manifest_encryption: S3ManifestOutputLocationManifestEncryption=None, manifest_format: GeneratedManifestFormat=None):
        """S3ManifestOutputLocation - a model defined in OpenAPI

        :param expected_manifest_bucket_owner: The expected_manifest_bucket_owner of this S3ManifestOutputLocation.
        :param bucket: The bucket of this S3ManifestOutputLocation.
        :param manifest_prefix: The manifest_prefix of this S3ManifestOutputLocation.
        :param manifest_encryption: The manifest_encryption of this S3ManifestOutputLocation.
        :param manifest_format: The manifest_format of this S3ManifestOutputLocation.
        """
        self.openapi_types = {
            'expected_manifest_bucket_owner': str,
            'bucket': str,
            'manifest_prefix': str,
            'manifest_encryption': S3ManifestOutputLocationManifestEncryption,
            'manifest_format': GeneratedManifestFormat
        }

        self.attribute_map = {
            'expected_manifest_bucket_owner': 'ExpectedManifestBucketOwner',
            'bucket': 'Bucket',
            'manifest_prefix': 'ManifestPrefix',
            'manifest_encryption': 'ManifestEncryption',
            'manifest_format': 'ManifestFormat'
        }

        self._expected_manifest_bucket_owner = expected_manifest_bucket_owner
        self._bucket = bucket
        self._manifest_prefix = manifest_prefix
        self._manifest_encryption = manifest_encryption
        self._manifest_format = manifest_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3ManifestOutputLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3ManifestOutputLocation of this S3ManifestOutputLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_manifest_bucket_owner(self):
        """Gets the expected_manifest_bucket_owner of this S3ManifestOutputLocation.


        :return: The expected_manifest_bucket_owner of this S3ManifestOutputLocation.
        :rtype: str
        """
        return self._expected_manifest_bucket_owner

    @expected_manifest_bucket_owner.setter
    def expected_manifest_bucket_owner(self, expected_manifest_bucket_owner):
        """Sets the expected_manifest_bucket_owner of this S3ManifestOutputLocation.


        :param expected_manifest_bucket_owner: The expected_manifest_bucket_owner of this S3ManifestOutputLocation.
        :type expected_manifest_bucket_owner: str
        """

        self._expected_manifest_bucket_owner = expected_manifest_bucket_owner

    @property
    def bucket(self):
        """Gets the bucket of this S3ManifestOutputLocation.


        :return: The bucket of this S3ManifestOutputLocation.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this S3ManifestOutputLocation.


        :param bucket: The bucket of this S3ManifestOutputLocation.
        :type bucket: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")

        self._bucket = bucket

    @property
    def manifest_prefix(self):
        """Gets the manifest_prefix of this S3ManifestOutputLocation.


        :return: The manifest_prefix of this S3ManifestOutputLocation.
        :rtype: str
        """
        return self._manifest_prefix

    @manifest_prefix.setter
    def manifest_prefix(self, manifest_prefix):
        """Sets the manifest_prefix of this S3ManifestOutputLocation.


        :param manifest_prefix: The manifest_prefix of this S3ManifestOutputLocation.
        :type manifest_prefix: str
        """

        self._manifest_prefix = manifest_prefix

    @property
    def manifest_encryption(self):
        """Gets the manifest_encryption of this S3ManifestOutputLocation.


        :return: The manifest_encryption of this S3ManifestOutputLocation.
        :rtype: S3ManifestOutputLocationManifestEncryption
        """
        return self._manifest_encryption

    @manifest_encryption.setter
    def manifest_encryption(self, manifest_encryption):
        """Sets the manifest_encryption of this S3ManifestOutputLocation.


        :param manifest_encryption: The manifest_encryption of this S3ManifestOutputLocation.
        :type manifest_encryption: S3ManifestOutputLocationManifestEncryption
        """

        self._manifest_encryption = manifest_encryption

    @property
    def manifest_format(self):
        """Gets the manifest_format of this S3ManifestOutputLocation.


        :return: The manifest_format of this S3ManifestOutputLocation.
        :rtype: GeneratedManifestFormat
        """
        return self._manifest_format

    @manifest_format.setter
    def manifest_format(self, manifest_format):
        """Sets the manifest_format of this S3ManifestOutputLocation.


        :param manifest_format: The manifest_format of this S3ManifestOutputLocation.
        :type manifest_format: GeneratedManifestFormat
        """
        if manifest_format is None:
            raise ValueError("Invalid value for `manifest_format`, must not be `None`")

        self._manifest_format = manifest_format
