# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_storage_lens_configuration_request_storage_lens_configuration_account_level import PutStorageLensConfigurationRequestStorageLensConfigurationAccountLevel
from openapi_server.models.put_storage_lens_configuration_request_storage_lens_configuration_aws_org import PutStorageLensConfigurationRequestStorageLensConfigurationAwsOrg
from openapi_server.models.put_storage_lens_configuration_request_storage_lens_configuration_data_export import PutStorageLensConfigurationRequestStorageLensConfigurationDataExport
from openapi_server.models.put_storage_lens_configuration_request_storage_lens_configuration_exclude import PutStorageLensConfigurationRequestStorageLensConfigurationExclude
from openapi_server.models.put_storage_lens_configuration_request_storage_lens_configuration_include import PutStorageLensConfigurationRequestStorageLensConfigurationInclude
from openapi_server import util


class StorageLensConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, account_level: PutStorageLensConfigurationRequestStorageLensConfigurationAccountLevel=None, include: PutStorageLensConfigurationRequestStorageLensConfigurationInclude=None, exclude: PutStorageLensConfigurationRequestStorageLensConfigurationExclude=None, data_export: PutStorageLensConfigurationRequestStorageLensConfigurationDataExport=None, is_enabled: bool=None, aws_org: PutStorageLensConfigurationRequestStorageLensConfigurationAwsOrg=None, storage_lens_arn: str=None):
        """StorageLensConfiguration - a model defined in OpenAPI

        :param id: The id of this StorageLensConfiguration.
        :param account_level: The account_level of this StorageLensConfiguration.
        :param include: The include of this StorageLensConfiguration.
        :param exclude: The exclude of this StorageLensConfiguration.
        :param data_export: The data_export of this StorageLensConfiguration.
        :param is_enabled: The is_enabled of this StorageLensConfiguration.
        :param aws_org: The aws_org of this StorageLensConfiguration.
        :param storage_lens_arn: The storage_lens_arn of this StorageLensConfiguration.
        """
        self.openapi_types = {
            'id': str,
            'account_level': PutStorageLensConfigurationRequestStorageLensConfigurationAccountLevel,
            'include': PutStorageLensConfigurationRequestStorageLensConfigurationInclude,
            'exclude': PutStorageLensConfigurationRequestStorageLensConfigurationExclude,
            'data_export': PutStorageLensConfigurationRequestStorageLensConfigurationDataExport,
            'is_enabled': bool,
            'aws_org': PutStorageLensConfigurationRequestStorageLensConfigurationAwsOrg,
            'storage_lens_arn': str
        }

        self.attribute_map = {
            'id': 'Id',
            'account_level': 'AccountLevel',
            'include': 'Include',
            'exclude': 'Exclude',
            'data_export': 'DataExport',
            'is_enabled': 'IsEnabled',
            'aws_org': 'AwsOrg',
            'storage_lens_arn': 'StorageLensArn'
        }

        self._id = id
        self._account_level = account_level
        self._include = include
        self._exclude = exclude
        self._data_export = data_export
        self._is_enabled = is_enabled
        self._aws_org = aws_org
        self._storage_lens_arn = storage_lens_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageLensConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageLensConfiguration of this StorageLensConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StorageLensConfiguration.


        :return: The id of this StorageLensConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageLensConfiguration.


        :param id: The id of this StorageLensConfiguration.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def account_level(self):
        """Gets the account_level of this StorageLensConfiguration.


        :return: The account_level of this StorageLensConfiguration.
        :rtype: PutStorageLensConfigurationRequestStorageLensConfigurationAccountLevel
        """
        return self._account_level

    @account_level.setter
    def account_level(self, account_level):
        """Sets the account_level of this StorageLensConfiguration.


        :param account_level: The account_level of this StorageLensConfiguration.
        :type account_level: PutStorageLensConfigurationRequestStorageLensConfigurationAccountLevel
        """
        if account_level is None:
            raise ValueError("Invalid value for `account_level`, must not be `None`")

        self._account_level = account_level

    @property
    def include(self):
        """Gets the include of this StorageLensConfiguration.


        :return: The include of this StorageLensConfiguration.
        :rtype: PutStorageLensConfigurationRequestStorageLensConfigurationInclude
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this StorageLensConfiguration.


        :param include: The include of this StorageLensConfiguration.
        :type include: PutStorageLensConfigurationRequestStorageLensConfigurationInclude
        """

        self._include = include

    @property
    def exclude(self):
        """Gets the exclude of this StorageLensConfiguration.


        :return: The exclude of this StorageLensConfiguration.
        :rtype: PutStorageLensConfigurationRequestStorageLensConfigurationExclude
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this StorageLensConfiguration.


        :param exclude: The exclude of this StorageLensConfiguration.
        :type exclude: PutStorageLensConfigurationRequestStorageLensConfigurationExclude
        """

        self._exclude = exclude

    @property
    def data_export(self):
        """Gets the data_export of this StorageLensConfiguration.


        :return: The data_export of this StorageLensConfiguration.
        :rtype: PutStorageLensConfigurationRequestStorageLensConfigurationDataExport
        """
        return self._data_export

    @data_export.setter
    def data_export(self, data_export):
        """Sets the data_export of this StorageLensConfiguration.


        :param data_export: The data_export of this StorageLensConfiguration.
        :type data_export: PutStorageLensConfigurationRequestStorageLensConfigurationDataExport
        """

        self._data_export = data_export

    @property
    def is_enabled(self):
        """Gets the is_enabled of this StorageLensConfiguration.


        :return: The is_enabled of this StorageLensConfiguration.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this StorageLensConfiguration.


        :param is_enabled: The is_enabled of this StorageLensConfiguration.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def aws_org(self):
        """Gets the aws_org of this StorageLensConfiguration.


        :return: The aws_org of this StorageLensConfiguration.
        :rtype: PutStorageLensConfigurationRequestStorageLensConfigurationAwsOrg
        """
        return self._aws_org

    @aws_org.setter
    def aws_org(self, aws_org):
        """Sets the aws_org of this StorageLensConfiguration.


        :param aws_org: The aws_org of this StorageLensConfiguration.
        :type aws_org: PutStorageLensConfigurationRequestStorageLensConfigurationAwsOrg
        """

        self._aws_org = aws_org

    @property
    def storage_lens_arn(self):
        """Gets the storage_lens_arn of this StorageLensConfiguration.


        :return: The storage_lens_arn of this StorageLensConfiguration.
        :rtype: str
        """
        return self._storage_lens_arn

    @storage_lens_arn.setter
    def storage_lens_arn(self, storage_lens_arn):
        """Sets the storage_lens_arn of this StorageLensConfiguration.


        :param storage_lens_arn: The storage_lens_arn of this StorageLensConfiguration.
        :type storage_lens_arn: str
        """

        self._storage_lens_arn = storage_lens_arn
