# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_report_format import JobReportFormat
from openapi_server.models.job_report_scope import JobReportScope
from openapi_server import util


class CreateJobRequestReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, format: JobReportFormat=None, enabled: bool=None, prefix: str=None, report_scope: JobReportScope=None):
        """CreateJobRequestReport - a model defined in OpenAPI

        :param bucket: The bucket of this CreateJobRequestReport.
        :param format: The format of this CreateJobRequestReport.
        :param enabled: The enabled of this CreateJobRequestReport.
        :param prefix: The prefix of this CreateJobRequestReport.
        :param report_scope: The report_scope of this CreateJobRequestReport.
        """
        self.openapi_types = {
            'bucket': str,
            'format': JobReportFormat,
            'enabled': bool,
            'prefix': str,
            'report_scope': JobReportScope
        }

        self.attribute_map = {
            'bucket': 'Bucket',
            'format': 'Format',
            'enabled': 'Enabled',
            'prefix': 'Prefix',
            'report_scope': 'ReportScope'
        }

        self._bucket = bucket
        self._format = format
        self._enabled = enabled
        self._prefix = prefix
        self._report_scope = report_scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobRequestReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJobRequest_Report of this CreateJobRequestReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this CreateJobRequestReport.


        :return: The bucket of this CreateJobRequestReport.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this CreateJobRequestReport.


        :param bucket: The bucket of this CreateJobRequestReport.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def format(self):
        """Gets the format of this CreateJobRequestReport.


        :return: The format of this CreateJobRequestReport.
        :rtype: JobReportFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateJobRequestReport.


        :param format: The format of this CreateJobRequestReport.
        :type format: JobReportFormat
        """

        self._format = format

    @property
    def enabled(self):
        """Gets the enabled of this CreateJobRequestReport.


        :return: The enabled of this CreateJobRequestReport.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateJobRequestReport.


        :param enabled: The enabled of this CreateJobRequestReport.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def prefix(self):
        """Gets the prefix of this CreateJobRequestReport.


        :return: The prefix of this CreateJobRequestReport.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this CreateJobRequestReport.


        :param prefix: The prefix of this CreateJobRequestReport.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def report_scope(self):
        """Gets the report_scope of this CreateJobRequestReport.


        :return: The report_scope of this CreateJobRequestReport.
        :rtype: JobReportScope
        """
        return self._report_scope

    @report_scope.setter
    def report_scope(self, report_scope):
        """Sets the report_scope of this CreateJobRequestReport.


        :param report_scope: The report_scope of this CreateJobRequestReport.
        :type report_scope: JobReportScope
        """

        self._report_scope = report_scope
