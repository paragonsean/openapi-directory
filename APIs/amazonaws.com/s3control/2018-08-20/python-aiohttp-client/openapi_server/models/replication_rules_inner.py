# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replication_rule_delete_marker_replication import ReplicationRuleDeleteMarkerReplication
from openapi_server.models.replication_rule_destination import ReplicationRuleDestination
from openapi_server.models.replication_rule_existing_object_replication import ReplicationRuleExistingObjectReplication
from openapi_server.models.replication_rule_filter import ReplicationRuleFilter
from openapi_server.models.replication_rule_source_selection_criteria import ReplicationRuleSourceSelectionCriteria
from openapi_server.models.replication_rule_status import ReplicationRuleStatus
from openapi_server import util


class ReplicationRulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, priority: int=None, prefix: str=None, filter: ReplicationRuleFilter=None, status: ReplicationRuleStatus=None, source_selection_criteria: ReplicationRuleSourceSelectionCriteria=None, existing_object_replication: ReplicationRuleExistingObjectReplication=None, destination: ReplicationRuleDestination=None, delete_marker_replication: ReplicationRuleDeleteMarkerReplication=None, bucket: str=None):
        """ReplicationRulesInner - a model defined in OpenAPI

        :param id: The id of this ReplicationRulesInner.
        :param priority: The priority of this ReplicationRulesInner.
        :param prefix: The prefix of this ReplicationRulesInner.
        :param filter: The filter of this ReplicationRulesInner.
        :param status: The status of this ReplicationRulesInner.
        :param source_selection_criteria: The source_selection_criteria of this ReplicationRulesInner.
        :param existing_object_replication: The existing_object_replication of this ReplicationRulesInner.
        :param destination: The destination of this ReplicationRulesInner.
        :param delete_marker_replication: The delete_marker_replication of this ReplicationRulesInner.
        :param bucket: The bucket of this ReplicationRulesInner.
        """
        self.openapi_types = {
            'id': str,
            'priority': int,
            'prefix': str,
            'filter': ReplicationRuleFilter,
            'status': ReplicationRuleStatus,
            'source_selection_criteria': ReplicationRuleSourceSelectionCriteria,
            'existing_object_replication': ReplicationRuleExistingObjectReplication,
            'destination': ReplicationRuleDestination,
            'delete_marker_replication': ReplicationRuleDeleteMarkerReplication,
            'bucket': str
        }

        self.attribute_map = {
            'id': 'ID',
            'priority': 'Priority',
            'prefix': 'Prefix',
            'filter': 'Filter',
            'status': 'Status',
            'source_selection_criteria': 'SourceSelectionCriteria',
            'existing_object_replication': 'ExistingObjectReplication',
            'destination': 'Destination',
            'delete_marker_replication': 'DeleteMarkerReplication',
            'bucket': 'Bucket'
        }

        self._id = id
        self._priority = priority
        self._prefix = prefix
        self._filter = filter
        self._status = status
        self._source_selection_criteria = source_selection_criteria
        self._existing_object_replication = existing_object_replication
        self._destination = destination
        self._delete_marker_replication = delete_marker_replication
        self._bucket = bucket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationRulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicationRules_inner of this ReplicationRulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReplicationRulesInner.


        :return: The id of this ReplicationRulesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplicationRulesInner.


        :param id: The id of this ReplicationRulesInner.
        :type id: str
        """

        self._id = id

    @property
    def priority(self):
        """Gets the priority of this ReplicationRulesInner.


        :return: The priority of this ReplicationRulesInner.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ReplicationRulesInner.


        :param priority: The priority of this ReplicationRulesInner.
        :type priority: int
        """

        self._priority = priority

    @property
    def prefix(self):
        """Gets the prefix of this ReplicationRulesInner.


        :return: The prefix of this ReplicationRulesInner.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ReplicationRulesInner.


        :param prefix: The prefix of this ReplicationRulesInner.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def filter(self):
        """Gets the filter of this ReplicationRulesInner.


        :return: The filter of this ReplicationRulesInner.
        :rtype: ReplicationRuleFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ReplicationRulesInner.


        :param filter: The filter of this ReplicationRulesInner.
        :type filter: ReplicationRuleFilter
        """

        self._filter = filter

    @property
    def status(self):
        """Gets the status of this ReplicationRulesInner.


        :return: The status of this ReplicationRulesInner.
        :rtype: ReplicationRuleStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReplicationRulesInner.


        :param status: The status of this ReplicationRulesInner.
        :type status: ReplicationRuleStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def source_selection_criteria(self):
        """Gets the source_selection_criteria of this ReplicationRulesInner.


        :return: The source_selection_criteria of this ReplicationRulesInner.
        :rtype: ReplicationRuleSourceSelectionCriteria
        """
        return self._source_selection_criteria

    @source_selection_criteria.setter
    def source_selection_criteria(self, source_selection_criteria):
        """Sets the source_selection_criteria of this ReplicationRulesInner.


        :param source_selection_criteria: The source_selection_criteria of this ReplicationRulesInner.
        :type source_selection_criteria: ReplicationRuleSourceSelectionCriteria
        """

        self._source_selection_criteria = source_selection_criteria

    @property
    def existing_object_replication(self):
        """Gets the existing_object_replication of this ReplicationRulesInner.


        :return: The existing_object_replication of this ReplicationRulesInner.
        :rtype: ReplicationRuleExistingObjectReplication
        """
        return self._existing_object_replication

    @existing_object_replication.setter
    def existing_object_replication(self, existing_object_replication):
        """Sets the existing_object_replication of this ReplicationRulesInner.


        :param existing_object_replication: The existing_object_replication of this ReplicationRulesInner.
        :type existing_object_replication: ReplicationRuleExistingObjectReplication
        """

        self._existing_object_replication = existing_object_replication

    @property
    def destination(self):
        """Gets the destination of this ReplicationRulesInner.


        :return: The destination of this ReplicationRulesInner.
        :rtype: ReplicationRuleDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ReplicationRulesInner.


        :param destination: The destination of this ReplicationRulesInner.
        :type destination: ReplicationRuleDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def delete_marker_replication(self):
        """Gets the delete_marker_replication of this ReplicationRulesInner.


        :return: The delete_marker_replication of this ReplicationRulesInner.
        :rtype: ReplicationRuleDeleteMarkerReplication
        """
        return self._delete_marker_replication

    @delete_marker_replication.setter
    def delete_marker_replication(self, delete_marker_replication):
        """Sets the delete_marker_replication of this ReplicationRulesInner.


        :param delete_marker_replication: The delete_marker_replication of this ReplicationRulesInner.
        :type delete_marker_replication: ReplicationRuleDeleteMarkerReplication
        """

        self._delete_marker_replication = delete_marker_replication

    @property
    def bucket(self):
        """Gets the bucket of this ReplicationRulesInner.


        :return: The bucket of this ReplicationRulesInner.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this ReplicationRulesInner.


        :param bucket: The bucket of this ReplicationRulesInner.
        :type bucket: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")

        self._bucket = bucket
