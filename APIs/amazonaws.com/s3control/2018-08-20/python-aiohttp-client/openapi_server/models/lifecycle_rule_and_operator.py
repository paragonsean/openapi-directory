# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LifecycleRuleAndOperator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prefix: str=None, tags: List=None, object_size_greater_than: int=None, object_size_less_than: int=None):
        """LifecycleRuleAndOperator - a model defined in OpenAPI

        :param prefix: The prefix of this LifecycleRuleAndOperator.
        :param tags: The tags of this LifecycleRuleAndOperator.
        :param object_size_greater_than: The object_size_greater_than of this LifecycleRuleAndOperator.
        :param object_size_less_than: The object_size_less_than of this LifecycleRuleAndOperator.
        """
        self.openapi_types = {
            'prefix': str,
            'tags': List,
            'object_size_greater_than': int,
            'object_size_less_than': int
        }

        self.attribute_map = {
            'prefix': 'Prefix',
            'tags': 'Tags',
            'object_size_greater_than': 'ObjectSizeGreaterThan',
            'object_size_less_than': 'ObjectSizeLessThan'
        }

        self._prefix = prefix
        self._tags = tags
        self._object_size_greater_than = object_size_greater_than
        self._object_size_less_than = object_size_less_than

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LifecycleRuleAndOperator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LifecycleRuleAndOperator of this LifecycleRuleAndOperator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prefix(self):
        """Gets the prefix of this LifecycleRuleAndOperator.


        :return: The prefix of this LifecycleRuleAndOperator.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this LifecycleRuleAndOperator.


        :param prefix: The prefix of this LifecycleRuleAndOperator.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def tags(self):
        """Gets the tags of this LifecycleRuleAndOperator.


        :return: The tags of this LifecycleRuleAndOperator.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LifecycleRuleAndOperator.


        :param tags: The tags of this LifecycleRuleAndOperator.
        :type tags: List
        """

        self._tags = tags

    @property
    def object_size_greater_than(self):
        """Gets the object_size_greater_than of this LifecycleRuleAndOperator.


        :return: The object_size_greater_than of this LifecycleRuleAndOperator.
        :rtype: int
        """
        return self._object_size_greater_than

    @object_size_greater_than.setter
    def object_size_greater_than(self, object_size_greater_than):
        """Sets the object_size_greater_than of this LifecycleRuleAndOperator.


        :param object_size_greater_than: The object_size_greater_than of this LifecycleRuleAndOperator.
        :type object_size_greater_than: int
        """

        self._object_size_greater_than = object_size_greater_than

    @property
    def object_size_less_than(self):
        """Gets the object_size_less_than of this LifecycleRuleAndOperator.


        :return: The object_size_less_than of this LifecycleRuleAndOperator.
        :rtype: int
        """
        return self._object_size_less_than

    @object_size_less_than.setter
    def object_size_less_than(self, object_size_less_than):
        """Sets the object_size_less_than of this LifecycleRuleAndOperator.


        :param object_size_less_than: The object_size_less_than of this LifecycleRuleAndOperator.
        :type object_size_less_than: int
        """

        self._object_size_less_than = object_size_less_than
