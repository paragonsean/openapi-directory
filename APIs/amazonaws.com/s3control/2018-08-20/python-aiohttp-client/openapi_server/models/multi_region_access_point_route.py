# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MultiRegionAccessPointRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, region: str=None, traffic_dial_percentage: int=None):
        """MultiRegionAccessPointRoute - a model defined in OpenAPI

        :param bucket: The bucket of this MultiRegionAccessPointRoute.
        :param region: The region of this MultiRegionAccessPointRoute.
        :param traffic_dial_percentage: The traffic_dial_percentage of this MultiRegionAccessPointRoute.
        """
        self.openapi_types = {
            'bucket': str,
            'region': str,
            'traffic_dial_percentage': int
        }

        self.attribute_map = {
            'bucket': 'Bucket',
            'region': 'Region',
            'traffic_dial_percentage': 'TrafficDialPercentage'
        }

        self._bucket = bucket
        self._region = region
        self._traffic_dial_percentage = traffic_dial_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiRegionAccessPointRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiRegionAccessPointRoute of this MultiRegionAccessPointRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this MultiRegionAccessPointRoute.


        :return: The bucket of this MultiRegionAccessPointRoute.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this MultiRegionAccessPointRoute.


        :param bucket: The bucket of this MultiRegionAccessPointRoute.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def region(self):
        """Gets the region of this MultiRegionAccessPointRoute.


        :return: The region of this MultiRegionAccessPointRoute.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this MultiRegionAccessPointRoute.


        :param region: The region of this MultiRegionAccessPointRoute.
        :type region: str
        """

        self._region = region

    @property
    def traffic_dial_percentage(self):
        """Gets the traffic_dial_percentage of this MultiRegionAccessPointRoute.


        :return: The traffic_dial_percentage of this MultiRegionAccessPointRoute.
        :rtype: int
        """
        return self._traffic_dial_percentage

    @traffic_dial_percentage.setter
    def traffic_dial_percentage(self, traffic_dial_percentage):
        """Sets the traffic_dial_percentage of this MultiRegionAccessPointRoute.


        :param traffic_dial_percentage: The traffic_dial_percentage of this MultiRegionAccessPointRoute.
        :type traffic_dial_percentage: int
        """
        if traffic_dial_percentage is None:
            raise ValueError("Invalid value for `traffic_dial_percentage`, must not be `None`")

        self._traffic_dial_percentage = traffic_dial_percentage
