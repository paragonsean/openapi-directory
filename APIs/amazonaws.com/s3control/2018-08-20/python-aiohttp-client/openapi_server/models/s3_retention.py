# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_object_lock_retention_mode import S3ObjectLockRetentionMode
from openapi_server import util


class S3Retention(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, retain_until_date: datetime=None, mode: S3ObjectLockRetentionMode=None):
        """S3Retention - a model defined in OpenAPI

        :param retain_until_date: The retain_until_date of this S3Retention.
        :param mode: The mode of this S3Retention.
        """
        self.openapi_types = {
            'retain_until_date': datetime,
            'mode': S3ObjectLockRetentionMode
        }

        self.attribute_map = {
            'retain_until_date': 'RetainUntilDate',
            'mode': 'Mode'
        }

        self._retain_until_date = retain_until_date
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Retention':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Retention of this S3Retention.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def retain_until_date(self):
        """Gets the retain_until_date of this S3Retention.


        :return: The retain_until_date of this S3Retention.
        :rtype: datetime
        """
        return self._retain_until_date

    @retain_until_date.setter
    def retain_until_date(self, retain_until_date):
        """Sets the retain_until_date of this S3Retention.


        :param retain_until_date: The retain_until_date of this S3Retention.
        :type retain_until_date: datetime
        """

        self._retain_until_date = retain_until_date

    @property
    def mode(self):
        """Gets the mode of this S3Retention.


        :return: The mode of this S3Retention.
        :rtype: S3ObjectLockRetentionMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this S3Retention.


        :param mode: The mode of this S3Retention.
        :type mode: S3ObjectLockRetentionMode
        """

        self._mode = mode
