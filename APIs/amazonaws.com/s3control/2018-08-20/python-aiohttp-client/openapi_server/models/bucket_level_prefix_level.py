# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prefix_level_storage_metrics import PrefixLevelStorageMetrics
from openapi_server import util


class BucketLevelPrefixLevel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_metrics: PrefixLevelStorageMetrics=None):
        """BucketLevelPrefixLevel - a model defined in OpenAPI

        :param storage_metrics: The storage_metrics of this BucketLevelPrefixLevel.
        """
        self.openapi_types = {
            'storage_metrics': PrefixLevelStorageMetrics
        }

        self.attribute_map = {
            'storage_metrics': 'StorageMetrics'
        }

        self._storage_metrics = storage_metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketLevelPrefixLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BucketLevel_PrefixLevel of this BucketLevelPrefixLevel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_metrics(self):
        """Gets the storage_metrics of this BucketLevelPrefixLevel.


        :return: The storage_metrics of this BucketLevelPrefixLevel.
        :rtype: PrefixLevelStorageMetrics
        """
        return self._storage_metrics

    @storage_metrics.setter
    def storage_metrics(self, storage_metrics):
        """Sets the storage_metrics of this BucketLevelPrefixLevel.


        :param storage_metrics: The storage_metrics of this BucketLevelPrefixLevel.
        :type storage_metrics: PrefixLevelStorageMetrics
        """
        if storage_metrics is None:
            raise ValueError("Invalid value for `storage_metrics`, must not be `None`")

        self._storage_metrics = storage_metrics
