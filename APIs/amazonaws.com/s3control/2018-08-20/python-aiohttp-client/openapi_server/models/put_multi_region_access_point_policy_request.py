# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_multi_region_access_point_policy_request_details import PutMultiRegionAccessPointPolicyRequestDetails
import re
from openapi_server import util


class PutMultiRegionAccessPointPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, details: PutMultiRegionAccessPointPolicyRequestDetails=None):
        """PutMultiRegionAccessPointPolicyRequest - a model defined in OpenAPI

        :param client_token: The client_token of this PutMultiRegionAccessPointPolicyRequest.
        :param details: The details of this PutMultiRegionAccessPointPolicyRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'details': PutMultiRegionAccessPointPolicyRequestDetails
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'details': 'Details'
        }

        self._client_token = client_token
        self._details = details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutMultiRegionAccessPointPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutMultiRegionAccessPointPolicy_request of this PutMultiRegionAccessPointPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this PutMultiRegionAccessPointPolicyRequest.

        An idempotency token used to identify the request and guarantee that requests are unique.

        :return: The client_token of this PutMultiRegionAccessPointPolicyRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this PutMultiRegionAccessPointPolicyRequest.

        An idempotency token used to identify the request and guarantee that requests are unique.

        :param client_token: The client_token of this PutMultiRegionAccessPointPolicyRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and not re.search(r'\S+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S+/`")

        self._client_token = client_token

    @property
    def details(self):
        """Gets the details of this PutMultiRegionAccessPointPolicyRequest.


        :return: The details of this PutMultiRegionAccessPointPolicyRequest.
        :rtype: PutMultiRegionAccessPointPolicyRequestDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PutMultiRegionAccessPointPolicyRequest.


        :param details: The details of this PutMultiRegionAccessPointPolicyRequest.
        :type details: PutMultiRegionAccessPointPolicyRequestDetails
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details
