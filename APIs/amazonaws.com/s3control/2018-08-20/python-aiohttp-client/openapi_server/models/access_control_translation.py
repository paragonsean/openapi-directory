# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.owner_override import OwnerOverride
from openapi_server import util


class AccessControlTranslation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner: OwnerOverride=None):
        """AccessControlTranslation - a model defined in OpenAPI

        :param owner: The owner of this AccessControlTranslation.
        """
        self.openapi_types = {
            'owner': OwnerOverride
        }

        self.attribute_map = {
            'owner': 'Owner'
        }

        self._owner = owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessControlTranslation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessControlTranslation of this AccessControlTranslation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner(self):
        """Gets the owner of this AccessControlTranslation.


        :return: The owner of this AccessControlTranslation.
        :rtype: OwnerOverride
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AccessControlTranslation.


        :param owner: The owner of this AccessControlTranslation.
        :type owner: OwnerOverride
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner
