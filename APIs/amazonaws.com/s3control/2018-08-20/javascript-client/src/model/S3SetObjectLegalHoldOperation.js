/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import S3SetObjectLegalHoldOperationLegalHold from './S3SetObjectLegalHoldOperationLegalHold';

/**
 * The S3SetObjectLegalHoldOperation model module.
 * @module model/S3SetObjectLegalHoldOperation
 * @version 2018-08-20
 */
class S3SetObjectLegalHoldOperation {
    /**
     * Constructs a new <code>S3SetObjectLegalHoldOperation</code>.
     * Contains the configuration for an S3 Object Lock legal hold operation that an S3 Batch Operations job passes to every object to the underlying &lt;code&gt;PutObjectLegalHold&lt;/code&gt; API operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-legal-hold.html\&quot;&gt;Using S3 Object Lock legal hold with S3 Batch Operations&lt;/a&gt; in the &lt;i&gt;Amazon S3 User Guide&lt;/i&gt;.
     * @alias module:model/S3SetObjectLegalHoldOperation
     * @param legalHold {module:model/S3SetObjectLegalHoldOperationLegalHold} 
     */
    constructor(legalHold) { 
        
        S3SetObjectLegalHoldOperation.initialize(this, legalHold);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, legalHold) { 
        obj['LegalHold'] = legalHold;
    }

    /**
     * Constructs a <code>S3SetObjectLegalHoldOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/S3SetObjectLegalHoldOperation} obj Optional instance to populate.
     * @return {module:model/S3SetObjectLegalHoldOperation} The populated <code>S3SetObjectLegalHoldOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new S3SetObjectLegalHoldOperation();

            if (data.hasOwnProperty('LegalHold')) {
                obj['LegalHold'] = S3SetObjectLegalHoldOperationLegalHold.constructFromObject(data['LegalHold']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>S3SetObjectLegalHoldOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>S3SetObjectLegalHoldOperation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of S3SetObjectLegalHoldOperation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `LegalHold`
        if (data['LegalHold']) { // data not null
          S3SetObjectLegalHoldOperationLegalHold.validateJSON(data['LegalHold']);
        }

        return true;
    }


}

S3SetObjectLegalHoldOperation.RequiredProperties = ["LegalHold"];

/**
 * @member {module:model/S3SetObjectLegalHoldOperationLegalHold} LegalHold
 */
S3SetObjectLegalHoldOperation.prototype['LegalHold'] = undefined;






export default S3SetObjectLegalHoldOperation;

