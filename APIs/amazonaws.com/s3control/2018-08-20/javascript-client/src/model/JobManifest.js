/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateJobRequestManifestLocation from './CreateJobRequestManifestLocation';
import CreateJobRequestManifestSpec from './CreateJobRequestManifestSpec';

/**
 * The JobManifest model module.
 * @module model/JobManifest
 * @version 2018-08-20
 */
class JobManifest {
    /**
     * Constructs a new <code>JobManifest</code>.
     * Contains the configuration information for a job&#39;s manifest.
     * @alias module:model/JobManifest
     * @param spec {module:model/CreateJobRequestManifestSpec} 
     * @param location {module:model/CreateJobRequestManifestLocation} 
     */
    constructor(spec, location) { 
        
        JobManifest.initialize(this, spec, location);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, spec, location) { 
        obj['Spec'] = spec;
        obj['Location'] = location;
    }

    /**
     * Constructs a <code>JobManifest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobManifest} obj Optional instance to populate.
     * @return {module:model/JobManifest} The populated <code>JobManifest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobManifest();

            if (data.hasOwnProperty('Spec')) {
                obj['Spec'] = CreateJobRequestManifestSpec.constructFromObject(data['Spec']);
            }
            if (data.hasOwnProperty('Location')) {
                obj['Location'] = CreateJobRequestManifestLocation.constructFromObject(data['Location']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobManifest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobManifest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobManifest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Spec`
        if (data['Spec']) { // data not null
          CreateJobRequestManifestSpec.validateJSON(data['Spec']);
        }
        // validate the optional field `Location`
        if (data['Location']) { // data not null
          CreateJobRequestManifestLocation.validateJSON(data['Location']);
        }

        return true;
    }


}

JobManifest.RequiredProperties = ["Spec", "Location"];

/**
 * @member {module:model/CreateJobRequestManifestSpec} Spec
 */
JobManifest.prototype['Spec'] = undefined;

/**
 * @member {module:model/CreateJobRequestManifestLocation} Location
 */
JobManifest.prototype['Location'] = undefined;






export default JobManifest;

