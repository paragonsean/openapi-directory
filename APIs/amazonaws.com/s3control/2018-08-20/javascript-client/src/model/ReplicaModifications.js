/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReplicaModificationsStatus from './ReplicaModificationsStatus';

/**
 * The ReplicaModifications model module.
 * @module model/ReplicaModifications
 * @version 2018-08-20
 */
class ReplicaModifications {
    /**
     * Constructs a new <code>ReplicaModifications</code>.
     * &lt;p&gt;A filter that you can use to specify whether replica modification sync is enabled. S3 on Outposts replica modification sync can help you keep object metadata synchronized between replicas and source objects. By default, S3 on Outposts replicates metadata from the source objects to the replicas only. When replica modification sync is enabled, S3 on Outposts replicates metadata changes made to the replica copies back to the source object, making the replication bidirectional.&lt;/p&gt; &lt;p&gt;To replicate object metadata modifications on replicas, you can specify this element and set the &lt;code&gt;Status&lt;/code&gt; of this element to &lt;code&gt;Enabled&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must enable replica modification sync on the source and destination buckets to replicate replica metadata changes between the source and the replicas.&lt;/p&gt; &lt;/note&gt;
     * @alias module:model/ReplicaModifications
     * @param status {module:model/ReplicaModificationsStatus} 
     */
    constructor(status) { 
        
        ReplicaModifications.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['Status'] = status;
    }

    /**
     * Constructs a <code>ReplicaModifications</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplicaModifications} obj Optional instance to populate.
     * @return {module:model/ReplicaModifications} The populated <code>ReplicaModifications</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplicaModifications();

            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], ReplicaModificationsStatus);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplicaModifications</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplicaModifications</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReplicaModifications.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          ReplicaModificationsStatus.validateJSON(data['Status']);
        }

        return true;
    }


}

ReplicaModifications.RequiredProperties = ["Status"];

/**
 * @member {module:model/ReplicaModificationsStatus} Status
 */
ReplicaModifications.prototype['Status'] = undefined;






export default ReplicaModifications;

