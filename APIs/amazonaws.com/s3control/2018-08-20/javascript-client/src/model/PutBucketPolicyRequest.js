/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutBucketPolicyRequest model module.
 * @module model/PutBucketPolicyRequest
 * @version 2018-08-20
 */
class PutBucketPolicyRequest {
    /**
     * Constructs a new <code>PutBucketPolicyRequest</code>.
     * @alias module:model/PutBucketPolicyRequest
     * @param policy {String} The bucket policy as a JSON document.
     */
    constructor(policy) { 
        
        PutBucketPolicyRequest.initialize(this, policy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, policy) { 
        obj['Policy'] = policy;
    }

    /**
     * Constructs a <code>PutBucketPolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutBucketPolicyRequest} obj Optional instance to populate.
     * @return {module:model/PutBucketPolicyRequest} The populated <code>PutBucketPolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutBucketPolicyRequest();

            if (data.hasOwnProperty('Policy')) {
                obj['Policy'] = ApiClient.convertToType(data['Policy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutBucketPolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutBucketPolicyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutBucketPolicyRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Policy'] && !(typeof data['Policy'] === 'string' || data['Policy'] instanceof String)) {
            throw new Error("Expected the field `Policy` to be a primitive type in the JSON string but got " + data['Policy']);
        }

        return true;
    }


}

PutBucketPolicyRequest.RequiredProperties = ["Policy"];

/**
 * The bucket policy as a JSON document.
 * @member {String} Policy
 */
PutBucketPolicyRequest.prototype['Policy'] = undefined;






export default PutBucketPolicyRequest;

