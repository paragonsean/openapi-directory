/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjectLambdaConfiguration model module.
 * @module model/ObjectLambdaConfiguration
 * @version 2018-08-20
 */
class ObjectLambdaConfiguration {
    /**
     * Constructs a new <code>ObjectLambdaConfiguration</code>.
     * A configuration used when creating an Object Lambda Access Point.
     * @alias module:model/ObjectLambdaConfiguration
     * @param supportingAccessPoint {String} 
     * @param transformationConfigurations {Array} 
     */
    constructor(supportingAccessPoint, transformationConfigurations) { 
        
        ObjectLambdaConfiguration.initialize(this, supportingAccessPoint, transformationConfigurations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, supportingAccessPoint, transformationConfigurations) { 
        obj['SupportingAccessPoint'] = supportingAccessPoint;
        obj['TransformationConfigurations'] = transformationConfigurations;
    }

    /**
     * Constructs a <code>ObjectLambdaConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectLambdaConfiguration} obj Optional instance to populate.
     * @return {module:model/ObjectLambdaConfiguration} The populated <code>ObjectLambdaConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectLambdaConfiguration();

            if (data.hasOwnProperty('SupportingAccessPoint')) {
                obj['SupportingAccessPoint'] = ApiClient.convertToType(data['SupportingAccessPoint'], 'String');
            }
            if (data.hasOwnProperty('CloudWatchMetricsEnabled')) {
                obj['CloudWatchMetricsEnabled'] = ApiClient.convertToType(data['CloudWatchMetricsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('AllowedFeatures')) {
                obj['AllowedFeatures'] = ApiClient.convertToType(data['AllowedFeatures'], Array);
            }
            if (data.hasOwnProperty('TransformationConfigurations')) {
                obj['TransformationConfigurations'] = ApiClient.convertToType(data['TransformationConfigurations'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectLambdaConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectLambdaConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObjectLambdaConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `SupportingAccessPoint`
        if (data['SupportingAccessPoint']) { // data not null
          String.validateJSON(data['SupportingAccessPoint']);
        }
        // validate the optional field `CloudWatchMetricsEnabled`
        if (data['CloudWatchMetricsEnabled']) { // data not null
          Boolean.validateJSON(data['CloudWatchMetricsEnabled']);
        }
        // validate the optional field `AllowedFeatures`
        if (data['AllowedFeatures']) { // data not null
          Array.validateJSON(data['AllowedFeatures']);
        }
        // validate the optional field `TransformationConfigurations`
        if (data['TransformationConfigurations']) { // data not null
          Array.validateJSON(data['TransformationConfigurations']);
        }

        return true;
    }


}

ObjectLambdaConfiguration.RequiredProperties = ["SupportingAccessPoint", "TransformationConfigurations"];

/**
 * @member {String} SupportingAccessPoint
 */
ObjectLambdaConfiguration.prototype['SupportingAccessPoint'] = undefined;

/**
 * @member {Boolean} CloudWatchMetricsEnabled
 */
ObjectLambdaConfiguration.prototype['CloudWatchMetricsEnabled'] = undefined;

/**
 * @member {Array} AllowedFeatures
 */
ObjectLambdaConfiguration.prototype['AllowedFeatures'] = undefined;

/**
 * @member {Array} TransformationConfigurations
 */
ObjectLambdaConfiguration.prototype['TransformationConfigurations'] = undefined;






export default ObjectLambdaConfiguration;

