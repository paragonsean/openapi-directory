/*
 * AWS CodeCommit
 * <fullname>AWS CodeCommit</fullname> <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for AWS CodeCommit API along with usage examples.</p> <p>You can use the AWS CodeCommit API to work with the following objects:</p> <p>Repositories, by calling the following:</p> <ul> <li> <p> <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p> </li> <li> <p> <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p> </li> <li> <p> <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p> </li> <li> <p> <a>GetRepository</a>, which returns information about a specified repository.</p> </li> <li> <p> <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p> </li> <li> <p> <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p> </li> <li> <p> <a>UpdateRepositoryName</a>, which changes the name of the repository. If you change the name of a repository, no other users of that repository can access it until you send them the new HTTPS or SSH URL to use.</p> </li> </ul> <p>Branches, by calling the following:</p> <ul> <li> <p> <a>CreateBranch</a>, which creates a branch in a specified repository.</p> </li> <li> <p> <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p> </li> <li> <p> <a>GetBranch</a>, which returns information about a specified branch.</p> </li> <li> <p> <a>ListBranches</a>, which lists all branches for a specified repository.</p> </li> <li> <p> <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p> </li> </ul> <p>Files, by calling the following:</p> <ul> <li> <p> <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p> </li> <li> <p> <a>GetBlob</a>, which returns the base-64 encoded content of an individual Git blob object in a repository.</p> </li> <li> <p> <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p> </li> <li> <p> <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p> </li> <li> <p> <a>PutFile</a>, which adds or modifies a single file in a specified repository and branch.</p> </li> </ul> <p>Commits, by calling the following:</p> <ul> <li> <p> <a>BatchGetCommits</a>, which returns information about one or more commits in a repository.</p> </li> <li> <p> <a>CreateCommit</a>, which creates a commit for changes to a repository.</p> </li> <li> <p> <a>GetCommit</a>, which returns information about a commit, including commit messages and author and committer information.</p> </li> <li> <p> <a>GetDifferences</a>, which returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference).</p> </li> </ul> <p>Merges, by calling the following:</p> <ul> <li> <p> <a>BatchDescribeMergeConflicts</a>, which returns information about conflicts in a merge between commits in a repository.</p> </li> <li> <p> <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced commit between two branches or commits for the purpose of comparing them and identifying any potential conflicts.</p> </li> <li> <p> <a>DescribeMergeConflicts</a>, which returns information about merge conflicts between the base, source, and destination versions of a file in a potential merge.</p> </li> <li> <p> <a>GetMergeCommit</a>, which returns information about the merge between a source and destination commit. </p> </li> <li> <p> <a>GetMergeConflicts</a>, which returns information about merge conflicts between the source and destination branch in a pull request.</p> </li> <li> <p> <a>GetMergeOptions</a>, which returns information about the available merge options between two branches or commit specifiers.</p> </li> <li> <p> <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward merge option.</p> </li> <li> <p> <a>MergeBranchesBySquash</a>, which merges two branches using the squash merge option.</p> </li> <li> <p> <a>MergeBranchesByThreeWay</a>, which merges two branches using the three-way merge option.</p> </li> </ul> <p>Pull requests, by calling the following:</p> <ul> <li> <p> <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p> </li> <li> <p> <a>CreatePullRequestApprovalRule</a>, which creates an approval rule for a specified pull request.</p> </li> <li> <p> <a>DeletePullRequestApprovalRule</a>, which deletes an approval rule for a specified pull request.</p> </li> <li> <p> <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p> </li> <li> <p> <a>EvaluatePullRequestApprovalRules</a>, which evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p> </li> <li> <p> <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p> </li> <li> <p> <a>GetPullRequest</a>, which returns information about a specified pull request.</p> </li> <li> <p> <a>GetPullRequestApprovalStates</a>, which returns information about the approval states for a specified pull request.</p> </li> <li> <p> <a>GetPullRequestOverrideState</a>, which returns information about whether approval rules have been set aside (overriden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p> </li> <li> <p> <a>ListPullRequests</a>, which lists all pull requests for a repository.</p> </li> <li> <p> <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the fast-forward merge option.</p> </li> <li> <p> <a>MergePullRequestBySquash</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the squash merge option.</p> </li> <li> <p> <a>MergePullRequestByThreeWay</a>. which merges the source destination branch of a pull request into the specified destination branch for that pull request using the three-way merge option.</p> </li> <li> <p> <a>OverridePullRequestApprovalRules</a>, which sets aside all approval rule requirements for a pull request.</p> </li> <li> <p> <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p> </li> <li> <p> <a>UpdatePullRequestApprovalRuleContent</a>, which updates the structure of an approval rule for a pull request.</p> </li> <li> <p> <a>UpdatePullRequestApprovalState</a>, which updates the state of an approval on a pull request.</p> </li> <li> <p> <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p> </li> </ul> <p>Approval rule templates, by calling the following:</p> <ul> <li> <p> <a>AssociateApprovalRuleTemplateWithRepository</a>, which associates a template with a specified repository. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repository.</p> </li> <li> <p> <a>BatchAssociateApprovalRuleTemplateWithRepositories</a>, which associates a template with one or more specified repositories. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repositories.</p> </li> <li> <p> <a>BatchDisassociateApprovalRuleTemplateFromRepositories</a>, which removes the association between a template and specified repositories so that approval rules based on the template are not automatically created when pull requests are created in those repositories.</p> </li> <li> <p> <a>CreateApprovalRuleTemplate</a>, which creates a template for approval rules that can then be associated with one or more repositories in your AWS account.</p> </li> <li> <p> <a>DeleteApprovalRuleTemplate</a>, which deletes the specified template. It does not remove approval rules on pull requests already created with the template.</p> </li> <li> <p> <a>DisassociateApprovalRuleTemplateFromRepository</a>, which removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository.</p> </li> <li> <p> <a>GetApprovalRuleTemplate</a>, which returns information about an approval rule template.</p> </li> <li> <p> <a>ListApprovalRuleTemplates</a>, which lists all approval rule templates in the AWS Region in your AWS account.</p> </li> <li> <p> <a>ListAssociatedApprovalRuleTemplatesForRepository</a>, which lists all approval rule templates that are associated with a specified repository.</p> </li> <li> <p> <a>ListRepositoriesForApprovalRuleTemplate</a>, which lists all repositories associated with the specified approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateDescription</a>, which updates the description of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateName</a>, which updates the name of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateContent</a>, which updates the content of an approval rule template.</p> </li> </ul> <p>Comments in a repository, by calling the following:</p> <ul> <li> <p> <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p> </li> <li> <p> <a>GetComment</a>, which returns information about a comment on a commit.</p> </li> <li> <p> <a>GetCommentReactions</a>, which returns information about emoji reactions to comments.</p> </li> <li> <p> <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentReply</a>, which creates a reply to a comment.</p> </li> <li> <p> <a>PutCommentReaction</a>, which creates or updates an emoji reaction to a comment.</p> </li> <li> <p> <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p> </li> </ul> <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:</p> <ul> <li> <p> <a>ListTagsForResource</a>, which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p> </li> <li> <p> <a>TagResource</a>, which adds or updates tags for a resource in AWS CodeCommit.</p> </li> <li> <p> <a>UntagResource</a>, which removes tags for a resource in AWS CodeCommit.</p> </li> </ul> <p>Triggers, by calling the following:</p> <ul> <li> <p> <a>GetRepositoryTriggers</a>, which returns information about triggers configured for a repository.</p> </li> <li> <p> <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can be used to create or delete triggers.</p> </li> <li> <p> <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger by sending data to the trigger target.</p> </li> </ul> <p>For information about how to use AWS CodeCommit, see the <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">AWS CodeCommit User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssociateApprovalRuleTemplateWithRepositoryInput;
import org.openapitools.client.model.BatchAssociateApprovalRuleTemplateWithRepositoriesInput;
import org.openapitools.client.model.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput;
import org.openapitools.client.model.BatchDescribeMergeConflictsInput;
import org.openapitools.client.model.BatchDescribeMergeConflictsOutput;
import org.openapitools.client.model.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput;
import org.openapitools.client.model.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput;
import org.openapitools.client.model.BatchGetCommitsInput;
import org.openapitools.client.model.BatchGetCommitsOutput;
import org.openapitools.client.model.BatchGetRepositoriesInput;
import org.openapitools.client.model.BatchGetRepositoriesOutput;
import org.openapitools.client.model.CreateApprovalRuleTemplateInput;
import org.openapitools.client.model.CreateApprovalRuleTemplateOutput;
import org.openapitools.client.model.CreateBranchInput;
import org.openapitools.client.model.CreateCommitInput;
import org.openapitools.client.model.CreateCommitOutput;
import org.openapitools.client.model.CreatePullRequestApprovalRuleInput;
import org.openapitools.client.model.CreatePullRequestApprovalRuleOutput;
import org.openapitools.client.model.CreatePullRequestInput;
import org.openapitools.client.model.CreatePullRequestOutput;
import org.openapitools.client.model.CreateRepositoryInput;
import org.openapitools.client.model.CreateRepositoryOutput;
import org.openapitools.client.model.CreateUnreferencedMergeCommitInput;
import org.openapitools.client.model.CreateUnreferencedMergeCommitOutput;
import org.openapitools.client.model.DeleteApprovalRuleTemplateInput;
import org.openapitools.client.model.DeleteApprovalRuleTemplateOutput;
import org.openapitools.client.model.DeleteBranchInput;
import org.openapitools.client.model.DeleteBranchOutput;
import org.openapitools.client.model.DeleteCommentContentInput;
import org.openapitools.client.model.DeleteCommentContentOutput;
import org.openapitools.client.model.DeleteFileInput;
import org.openapitools.client.model.DeleteFileOutput;
import org.openapitools.client.model.DeletePullRequestApprovalRuleInput;
import org.openapitools.client.model.DeletePullRequestApprovalRuleOutput;
import org.openapitools.client.model.DeleteRepositoryInput;
import org.openapitools.client.model.DeleteRepositoryOutput;
import org.openapitools.client.model.DescribeMergeConflictsInput;
import org.openapitools.client.model.DescribeMergeConflictsOutput;
import org.openapitools.client.model.DescribePullRequestEventsInput;
import org.openapitools.client.model.DescribePullRequestEventsOutput;
import org.openapitools.client.model.DisassociateApprovalRuleTemplateFromRepositoryInput;
import org.openapitools.client.model.EvaluatePullRequestApprovalRulesInput;
import org.openapitools.client.model.EvaluatePullRequestApprovalRulesOutput;
import org.openapitools.client.model.GetApprovalRuleTemplateInput;
import org.openapitools.client.model.GetApprovalRuleTemplateOutput;
import org.openapitools.client.model.GetBlobInput;
import org.openapitools.client.model.GetBlobOutput;
import org.openapitools.client.model.GetBranchInput;
import org.openapitools.client.model.GetBranchOutput;
import org.openapitools.client.model.GetCommentInput;
import org.openapitools.client.model.GetCommentOutput;
import org.openapitools.client.model.GetCommentReactionsInput;
import org.openapitools.client.model.GetCommentReactionsOutput;
import org.openapitools.client.model.GetCommentsForComparedCommitInput;
import org.openapitools.client.model.GetCommentsForComparedCommitOutput;
import org.openapitools.client.model.GetCommentsForPullRequestInput;
import org.openapitools.client.model.GetCommentsForPullRequestOutput;
import org.openapitools.client.model.GetCommitInput;
import org.openapitools.client.model.GetCommitOutput;
import org.openapitools.client.model.GetDifferencesInput;
import org.openapitools.client.model.GetDifferencesOutput;
import org.openapitools.client.model.GetFileInput;
import org.openapitools.client.model.GetFileOutput;
import org.openapitools.client.model.GetFolderInput;
import org.openapitools.client.model.GetFolderOutput;
import org.openapitools.client.model.GetMergeCommitInput;
import org.openapitools.client.model.GetMergeCommitOutput;
import org.openapitools.client.model.GetMergeConflictsInput;
import org.openapitools.client.model.GetMergeConflictsOutput;
import org.openapitools.client.model.GetMergeOptionsInput;
import org.openapitools.client.model.GetMergeOptionsOutput;
import org.openapitools.client.model.GetPullRequestApprovalStatesInput;
import org.openapitools.client.model.GetPullRequestApprovalStatesOutput;
import org.openapitools.client.model.GetPullRequestInput;
import org.openapitools.client.model.GetPullRequestOutput;
import org.openapitools.client.model.GetPullRequestOverrideStateInput;
import org.openapitools.client.model.GetPullRequestOverrideStateOutput;
import org.openapitools.client.model.GetRepositoryInput;
import org.openapitools.client.model.GetRepositoryOutput;
import org.openapitools.client.model.GetRepositoryTriggersInput;
import org.openapitools.client.model.GetRepositoryTriggersOutput;
import org.openapitools.client.model.ListApprovalRuleTemplatesInput;
import org.openapitools.client.model.ListApprovalRuleTemplatesOutput;
import org.openapitools.client.model.ListAssociatedApprovalRuleTemplatesForRepositoryInput;
import org.openapitools.client.model.ListAssociatedApprovalRuleTemplatesForRepositoryOutput;
import org.openapitools.client.model.ListBranchesInput;
import org.openapitools.client.model.ListBranchesOutput;
import org.openapitools.client.model.ListPullRequestsInput;
import org.openapitools.client.model.ListPullRequestsOutput;
import org.openapitools.client.model.ListRepositoriesForApprovalRuleTemplateInput;
import org.openapitools.client.model.ListRepositoriesForApprovalRuleTemplateOutput;
import org.openapitools.client.model.ListRepositoriesInput;
import org.openapitools.client.model.ListRepositoriesOutput;
import org.openapitools.client.model.ListTagsForResourceInput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.MergeBranchesByFastForwardInput;
import org.openapitools.client.model.MergeBranchesByFastForwardOutput;
import org.openapitools.client.model.MergeBranchesBySquashInput;
import org.openapitools.client.model.MergeBranchesBySquashOutput;
import org.openapitools.client.model.MergeBranchesByThreeWayInput;
import org.openapitools.client.model.MergeBranchesByThreeWayOutput;
import org.openapitools.client.model.MergePullRequestByFastForwardInput;
import org.openapitools.client.model.MergePullRequestByFastForwardOutput;
import org.openapitools.client.model.MergePullRequestBySquashInput;
import org.openapitools.client.model.MergePullRequestBySquashOutput;
import org.openapitools.client.model.MergePullRequestByThreeWayInput;
import org.openapitools.client.model.MergePullRequestByThreeWayOutput;
import org.openapitools.client.model.OverridePullRequestApprovalRulesInput;
import org.openapitools.client.model.PostCommentForComparedCommitInput;
import org.openapitools.client.model.PostCommentForComparedCommitOutput;
import org.openapitools.client.model.PostCommentForPullRequestInput;
import org.openapitools.client.model.PostCommentForPullRequestOutput;
import org.openapitools.client.model.PostCommentReplyInput;
import org.openapitools.client.model.PostCommentReplyOutput;
import org.openapitools.client.model.PutCommentReactionInput;
import org.openapitools.client.model.PutFileInput;
import org.openapitools.client.model.PutFileOutput;
import org.openapitools.client.model.PutRepositoryTriggersInput;
import org.openapitools.client.model.PutRepositoryTriggersOutput;
import org.openapitools.client.model.TagResourceInput;
import org.openapitools.client.model.TestRepositoryTriggersInput;
import org.openapitools.client.model.TestRepositoryTriggersOutput;
import org.openapitools.client.model.UntagResourceInput;
import org.openapitools.client.model.UpdateApprovalRuleTemplateContentInput;
import org.openapitools.client.model.UpdateApprovalRuleTemplateContentOutput;
import org.openapitools.client.model.UpdateApprovalRuleTemplateDescriptionInput;
import org.openapitools.client.model.UpdateApprovalRuleTemplateDescriptionOutput;
import org.openapitools.client.model.UpdateApprovalRuleTemplateNameInput;
import org.openapitools.client.model.UpdateApprovalRuleTemplateNameOutput;
import org.openapitools.client.model.UpdateCommentInput;
import org.openapitools.client.model.UpdateCommentOutput;
import org.openapitools.client.model.UpdateDefaultBranchInput;
import org.openapitools.client.model.UpdatePullRequestApprovalRuleContentInput;
import org.openapitools.client.model.UpdatePullRequestApprovalRuleContentOutput;
import org.openapitools.client.model.UpdatePullRequestApprovalStateInput;
import org.openapitools.client.model.UpdatePullRequestDescriptionInput;
import org.openapitools.client.model.UpdatePullRequestDescriptionOutput;
import org.openapitools.client.model.UpdatePullRequestStatusInput;
import org.openapitools.client.model.UpdatePullRequestStatusOutput;
import org.openapitools.client.model.UpdatePullRequestTitleInput;
import org.openapitools.client.model.UpdatePullRequestTitleOutput;
import org.openapitools.client.model.UpdateRepositoryDescriptionInput;
import org.openapitools.client.model.UpdateRepositoryNameInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for associateApprovalRuleTemplateWithRepository
     * @param xAmzTarget  (required)
     * @param associateApprovalRuleTemplateWithRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MaximumRuleTemplatesAssociatedWithRepositoryException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateApprovalRuleTemplateWithRepositoryCall(String xAmzTarget, AssociateApprovalRuleTemplateWithRepositoryInput associateApprovalRuleTemplateWithRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateApprovalRuleTemplateWithRepositoryInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateApprovalRuleTemplateWithRepositoryValidateBeforeCall(String xAmzTarget, AssociateApprovalRuleTemplateWithRepositoryInput associateApprovalRuleTemplateWithRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling associateApprovalRuleTemplateWithRepository(Async)");
        }

        // verify the required parameter 'associateApprovalRuleTemplateWithRepositoryInput' is set
        if (associateApprovalRuleTemplateWithRepositoryInput == null) {
            throw new ApiException("Missing the required parameter 'associateApprovalRuleTemplateWithRepositoryInput' when calling associateApprovalRuleTemplateWithRepository(Async)");
        }

        return associateApprovalRuleTemplateWithRepositoryCall(xAmzTarget, associateApprovalRuleTemplateWithRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an association between an approval rule template and a specified repository. Then, the next time a pull request is created in the repository where the destination reference (if specified) matches the destination reference (branch) for the pull request, an approval rule that matches the template conditions is automatically created for that pull request. If no destination references are specified in the template, an approval rule that matches the template contents is created for all pull requests in that repository.
     * @param xAmzTarget  (required)
     * @param associateApprovalRuleTemplateWithRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MaximumRuleTemplatesAssociatedWithRepositoryException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public void associateApprovalRuleTemplateWithRepository(String xAmzTarget, AssociateApprovalRuleTemplateWithRepositoryInput associateApprovalRuleTemplateWithRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        associateApprovalRuleTemplateWithRepositoryWithHttpInfo(xAmzTarget, associateApprovalRuleTemplateWithRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Creates an association between an approval rule template and a specified repository. Then, the next time a pull request is created in the repository where the destination reference (if specified) matches the destination reference (branch) for the pull request, an approval rule that matches the template conditions is automatically created for that pull request. If no destination references are specified in the template, an approval rule that matches the template contents is created for all pull requests in that repository.
     * @param xAmzTarget  (required)
     * @param associateApprovalRuleTemplateWithRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MaximumRuleTemplatesAssociatedWithRepositoryException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> associateApprovalRuleTemplateWithRepositoryWithHttpInfo(String xAmzTarget, AssociateApprovalRuleTemplateWithRepositoryInput associateApprovalRuleTemplateWithRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateApprovalRuleTemplateWithRepositoryValidateBeforeCall(xAmzTarget, associateApprovalRuleTemplateWithRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates an association between an approval rule template and a specified repository. Then, the next time a pull request is created in the repository where the destination reference (if specified) matches the destination reference (branch) for the pull request, an approval rule that matches the template conditions is automatically created for that pull request. If no destination references are specified in the template, an approval rule that matches the template contents is created for all pull requests in that repository.
     * @param xAmzTarget  (required)
     * @param associateApprovalRuleTemplateWithRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MaximumRuleTemplatesAssociatedWithRepositoryException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateApprovalRuleTemplateWithRepositoryAsync(String xAmzTarget, AssociateApprovalRuleTemplateWithRepositoryInput associateApprovalRuleTemplateWithRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateApprovalRuleTemplateWithRepositoryValidateBeforeCall(xAmzTarget, associateApprovalRuleTemplateWithRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchAssociateApprovalRuleTemplateWithRepositories
     * @param xAmzTarget  (required)
     * @param batchAssociateApprovalRuleTemplateWithRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchAssociateApprovalRuleTemplateWithRepositoriesCall(String xAmzTarget, BatchAssociateApprovalRuleTemplateWithRepositoriesInput batchAssociateApprovalRuleTemplateWithRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchAssociateApprovalRuleTemplateWithRepositoriesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchAssociateApprovalRuleTemplateWithRepositoriesValidateBeforeCall(String xAmzTarget, BatchAssociateApprovalRuleTemplateWithRepositoriesInput batchAssociateApprovalRuleTemplateWithRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchAssociateApprovalRuleTemplateWithRepositories(Async)");
        }

        // verify the required parameter 'batchAssociateApprovalRuleTemplateWithRepositoriesInput' is set
        if (batchAssociateApprovalRuleTemplateWithRepositoriesInput == null) {
            throw new ApiException("Missing the required parameter 'batchAssociateApprovalRuleTemplateWithRepositoriesInput' when calling batchAssociateApprovalRuleTemplateWithRepositories(Async)");
        }

        return batchAssociateApprovalRuleTemplateWithRepositoriesCall(xAmzTarget, batchAssociateApprovalRuleTemplateWithRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an association between an approval rule template and one or more specified repositories. 
     * @param xAmzTarget  (required)
     * @param batchAssociateApprovalRuleTemplateWithRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public BatchAssociateApprovalRuleTemplateWithRepositoriesOutput batchAssociateApprovalRuleTemplateWithRepositories(String xAmzTarget, BatchAssociateApprovalRuleTemplateWithRepositoriesInput batchAssociateApprovalRuleTemplateWithRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchAssociateApprovalRuleTemplateWithRepositoriesOutput> localVarResp = batchAssociateApprovalRuleTemplateWithRepositoriesWithHttpInfo(xAmzTarget, batchAssociateApprovalRuleTemplateWithRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an association between an approval rule template and one or more specified repositories. 
     * @param xAmzTarget  (required)
     * @param batchAssociateApprovalRuleTemplateWithRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchAssociateApprovalRuleTemplateWithRepositoriesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchAssociateApprovalRuleTemplateWithRepositoriesOutput> batchAssociateApprovalRuleTemplateWithRepositoriesWithHttpInfo(String xAmzTarget, BatchAssociateApprovalRuleTemplateWithRepositoriesInput batchAssociateApprovalRuleTemplateWithRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchAssociateApprovalRuleTemplateWithRepositoriesValidateBeforeCall(xAmzTarget, batchAssociateApprovalRuleTemplateWithRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchAssociateApprovalRuleTemplateWithRepositoriesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an association between an approval rule template and one or more specified repositories. 
     * @param xAmzTarget  (required)
     * @param batchAssociateApprovalRuleTemplateWithRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchAssociateApprovalRuleTemplateWithRepositoriesAsync(String xAmzTarget, BatchAssociateApprovalRuleTemplateWithRepositoriesInput batchAssociateApprovalRuleTemplateWithRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchAssociateApprovalRuleTemplateWithRepositoriesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchAssociateApprovalRuleTemplateWithRepositoriesValidateBeforeCall(xAmzTarget, batchAssociateApprovalRuleTemplateWithRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchAssociateApprovalRuleTemplateWithRepositoriesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchDescribeMergeConflicts
     * @param xAmzTarget  (required)
     * @param batchDescribeMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMaxConflictFilesException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidMaxMergeHunksException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDescribeMergeConflictsCall(String xAmzTarget, BatchDescribeMergeConflictsInput batchDescribeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchDescribeMergeConflictsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.BatchDescribeMergeConflicts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchDescribeMergeConflictsValidateBeforeCall(String xAmzTarget, BatchDescribeMergeConflictsInput batchDescribeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchDescribeMergeConflicts(Async)");
        }

        // verify the required parameter 'batchDescribeMergeConflictsInput' is set
        if (batchDescribeMergeConflictsInput == null) {
            throw new ApiException("Missing the required parameter 'batchDescribeMergeConflictsInput' when calling batchDescribeMergeConflicts(Async)");
        }

        return batchDescribeMergeConflictsCall(xAmzTarget, batchDescribeMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.
     * @param xAmzTarget  (required)
     * @param batchDescribeMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchDescribeMergeConflictsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMaxConflictFilesException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidMaxMergeHunksException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public BatchDescribeMergeConflictsOutput batchDescribeMergeConflicts(String xAmzTarget, BatchDescribeMergeConflictsInput batchDescribeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchDescribeMergeConflictsOutput> localVarResp = batchDescribeMergeConflictsWithHttpInfo(xAmzTarget, batchDescribeMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.
     * @param xAmzTarget  (required)
     * @param batchDescribeMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchDescribeMergeConflictsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMaxConflictFilesException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidMaxMergeHunksException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchDescribeMergeConflictsOutput> batchDescribeMergeConflictsWithHttpInfo(String xAmzTarget, BatchDescribeMergeConflictsInput batchDescribeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchDescribeMergeConflictsValidateBeforeCall(xAmzTarget, batchDescribeMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchDescribeMergeConflictsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.
     * @param xAmzTarget  (required)
     * @param batchDescribeMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMaxConflictFilesException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidMaxMergeHunksException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDescribeMergeConflictsAsync(String xAmzTarget, BatchDescribeMergeConflictsInput batchDescribeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchDescribeMergeConflictsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchDescribeMergeConflictsValidateBeforeCall(xAmzTarget, batchDescribeMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchDescribeMergeConflictsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchDisassociateApprovalRuleTemplateFromRepositories
     * @param xAmzTarget  (required)
     * @param batchDisassociateApprovalRuleTemplateFromRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDisassociateApprovalRuleTemplateFromRepositoriesCall(String xAmzTarget, BatchDisassociateApprovalRuleTemplateFromRepositoriesInput batchDisassociateApprovalRuleTemplateFromRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchDisassociateApprovalRuleTemplateFromRepositoriesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchDisassociateApprovalRuleTemplateFromRepositoriesValidateBeforeCall(String xAmzTarget, BatchDisassociateApprovalRuleTemplateFromRepositoriesInput batchDisassociateApprovalRuleTemplateFromRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchDisassociateApprovalRuleTemplateFromRepositories(Async)");
        }

        // verify the required parameter 'batchDisassociateApprovalRuleTemplateFromRepositoriesInput' is set
        if (batchDisassociateApprovalRuleTemplateFromRepositoriesInput == null) {
            throw new ApiException("Missing the required parameter 'batchDisassociateApprovalRuleTemplateFromRepositoriesInput' when calling batchDisassociateApprovalRuleTemplateFromRepositories(Async)");
        }

        return batchDisassociateApprovalRuleTemplateFromRepositoriesCall(xAmzTarget, batchDisassociateApprovalRuleTemplateFromRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the association between an approval rule template and one or more specified repositories. 
     * @param xAmzTarget  (required)
     * @param batchDisassociateApprovalRuleTemplateFromRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput batchDisassociateApprovalRuleTemplateFromRepositories(String xAmzTarget, BatchDisassociateApprovalRuleTemplateFromRepositoriesInput batchDisassociateApprovalRuleTemplateFromRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput> localVarResp = batchDisassociateApprovalRuleTemplateFromRepositoriesWithHttpInfo(xAmzTarget, batchDisassociateApprovalRuleTemplateFromRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the association between an approval rule template and one or more specified repositories. 
     * @param xAmzTarget  (required)
     * @param batchDisassociateApprovalRuleTemplateFromRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput> batchDisassociateApprovalRuleTemplateFromRepositoriesWithHttpInfo(String xAmzTarget, BatchDisassociateApprovalRuleTemplateFromRepositoriesInput batchDisassociateApprovalRuleTemplateFromRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchDisassociateApprovalRuleTemplateFromRepositoriesValidateBeforeCall(xAmzTarget, batchDisassociateApprovalRuleTemplateFromRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the association between an approval rule template and one or more specified repositories. 
     * @param xAmzTarget  (required)
     * @param batchDisassociateApprovalRuleTemplateFromRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDisassociateApprovalRuleTemplateFromRepositoriesAsync(String xAmzTarget, BatchDisassociateApprovalRuleTemplateFromRepositoriesInput batchDisassociateApprovalRuleTemplateFromRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchDisassociateApprovalRuleTemplateFromRepositoriesValidateBeforeCall(xAmzTarget, batchDisassociateApprovalRuleTemplateFromRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchGetCommits
     * @param xAmzTarget  (required)
     * @param batchGetCommitsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommitIdsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommitIdsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetCommitsCall(String xAmzTarget, BatchGetCommitsInput batchGetCommitsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchGetCommitsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.BatchGetCommits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchGetCommitsValidateBeforeCall(String xAmzTarget, BatchGetCommitsInput batchGetCommitsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchGetCommits(Async)");
        }

        // verify the required parameter 'batchGetCommitsInput' is set
        if (batchGetCommitsInput == null) {
            throw new ApiException("Missing the required parameter 'batchGetCommitsInput' when calling batchGetCommits(Async)");
        }

        return batchGetCommitsCall(xAmzTarget, batchGetCommitsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about the contents of one or more commits in a repository.
     * @param xAmzTarget  (required)
     * @param batchGetCommitsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchGetCommitsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommitIdsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommitIdsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public BatchGetCommitsOutput batchGetCommits(String xAmzTarget, BatchGetCommitsInput batchGetCommitsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchGetCommitsOutput> localVarResp = batchGetCommitsWithHttpInfo(xAmzTarget, batchGetCommitsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the contents of one or more commits in a repository.
     * @param xAmzTarget  (required)
     * @param batchGetCommitsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchGetCommitsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommitIdsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommitIdsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchGetCommitsOutput> batchGetCommitsWithHttpInfo(String xAmzTarget, BatchGetCommitsInput batchGetCommitsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchGetCommitsValidateBeforeCall(xAmzTarget, batchGetCommitsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchGetCommitsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the contents of one or more commits in a repository.
     * @param xAmzTarget  (required)
     * @param batchGetCommitsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommitIdsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommitIdsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetCommitsAsync(String xAmzTarget, BatchGetCommitsInput batchGetCommitsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchGetCommitsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchGetCommitsValidateBeforeCall(xAmzTarget, batchGetCommitsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchGetCommitsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchGetRepositories
     * @param xAmzTarget  (required)
     * @param batchGetRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetRepositoriesCall(String xAmzTarget, BatchGetRepositoriesInput batchGetRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchGetRepositoriesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.BatchGetRepositories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchGetRepositoriesValidateBeforeCall(String xAmzTarget, BatchGetRepositoriesInput batchGetRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchGetRepositories(Async)");
        }

        // verify the required parameter 'batchGetRepositoriesInput' is set
        if (batchGetRepositoriesInput == null) {
            throw new ApiException("Missing the required parameter 'batchGetRepositoriesInput' when calling batchGetRepositories(Async)");
        }

        return batchGetRepositoriesCall(xAmzTarget, batchGetRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about one or more repositories.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param batchGetRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchGetRepositoriesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public BatchGetRepositoriesOutput batchGetRepositories(String xAmzTarget, BatchGetRepositoriesInput batchGetRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchGetRepositoriesOutput> localVarResp = batchGetRepositoriesWithHttpInfo(xAmzTarget, batchGetRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about one or more repositories.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param batchGetRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchGetRepositoriesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchGetRepositoriesOutput> batchGetRepositoriesWithHttpInfo(String xAmzTarget, BatchGetRepositoriesInput batchGetRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchGetRepositoriesValidateBeforeCall(xAmzTarget, batchGetRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchGetRepositoriesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about one or more repositories.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param batchGetRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNamesRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MaximumRepositoryNamesExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetRepositoriesAsync(String xAmzTarget, BatchGetRepositoriesInput batchGetRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchGetRepositoriesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchGetRepositoriesValidateBeforeCall(xAmzTarget, batchGetRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchGetRepositoriesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createApprovalRuleTemplate
     * @param xAmzTarget  (required)
     * @param createApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateNameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleTemplateContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidApprovalRuleTemplateContentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleTemplateDescriptionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NumberOfRuleTemplatesExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApprovalRuleTemplateCall(String xAmzTarget, CreateApprovalRuleTemplateInput createApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApprovalRuleTemplateInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.CreateApprovalRuleTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApprovalRuleTemplateValidateBeforeCall(String xAmzTarget, CreateApprovalRuleTemplateInput createApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createApprovalRuleTemplate(Async)");
        }

        // verify the required parameter 'createApprovalRuleTemplateInput' is set
        if (createApprovalRuleTemplateInput == null) {
            throw new ApiException("Missing the required parameter 'createApprovalRuleTemplateInput' when calling createApprovalRuleTemplate(Async)");
        }

        return createApprovalRuleTemplateCall(xAmzTarget, createApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a template for approval rules that can then be associated with one or more repositories in your AWS account. When you associate a template with a repository, AWS CodeCommit creates an approval rule that matches the conditions of the template for all pull requests that meet the conditions of the template. For more information, see &lt;a&gt;AssociateApprovalRuleTemplateWithRepository&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateApprovalRuleTemplateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateNameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleTemplateContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidApprovalRuleTemplateContentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleTemplateDescriptionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NumberOfRuleTemplatesExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateApprovalRuleTemplateOutput createApprovalRuleTemplate(String xAmzTarget, CreateApprovalRuleTemplateInput createApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateApprovalRuleTemplateOutput> localVarResp = createApprovalRuleTemplateWithHttpInfo(xAmzTarget, createApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a template for approval rules that can then be associated with one or more repositories in your AWS account. When you associate a template with a repository, AWS CodeCommit creates an approval rule that matches the conditions of the template for all pull requests that meet the conditions of the template. For more information, see &lt;a&gt;AssociateApprovalRuleTemplateWithRepository&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateApprovalRuleTemplateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateNameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleTemplateContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidApprovalRuleTemplateContentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleTemplateDescriptionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NumberOfRuleTemplatesExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateApprovalRuleTemplateOutput> createApprovalRuleTemplateWithHttpInfo(String xAmzTarget, CreateApprovalRuleTemplateInput createApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createApprovalRuleTemplateValidateBeforeCall(xAmzTarget, createApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateApprovalRuleTemplateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a template for approval rules that can then be associated with one or more repositories in your AWS account. When you associate a template with a repository, AWS CodeCommit creates an approval rule that matches the conditions of the template for all pull requests that meet the conditions of the template. For more information, see &lt;a&gt;AssociateApprovalRuleTemplateWithRepository&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateNameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleTemplateContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidApprovalRuleTemplateContentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleTemplateDescriptionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NumberOfRuleTemplatesExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApprovalRuleTemplateAsync(String xAmzTarget, CreateApprovalRuleTemplateInput createApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateApprovalRuleTemplateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApprovalRuleTemplateValidateBeforeCall(xAmzTarget, createApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateApprovalRuleTemplateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBranch
     * @param xAmzTarget  (required)
     * @param createBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BranchNameExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBranchCall(String xAmzTarget, CreateBranchInput createBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBranchInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.CreateBranch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBranchValidateBeforeCall(String xAmzTarget, CreateBranchInput createBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createBranch(Async)");
        }

        // verify the required parameter 'createBranchInput' is set
        if (createBranchInput == null) {
            throw new ApiException("Missing the required parameter 'createBranchInput' when calling createBranch(Async)");
        }

        return createBranchCall(xAmzTarget, createBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a branch in a repository and points the branch to a commit.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Calling the create branch operation does not set a repository&#39;s default branch. To do this, call the update default branch operation.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BranchNameExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public void createBranch(String xAmzTarget, CreateBranchInput createBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        createBranchWithHttpInfo(xAmzTarget, createBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Creates a branch in a repository and points the branch to a commit.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Calling the create branch operation does not set a repository&#39;s default branch. To do this, call the update default branch operation.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BranchNameExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createBranchWithHttpInfo(String xAmzTarget, CreateBranchInput createBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createBranchValidateBeforeCall(xAmzTarget, createBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a branch in a repository and points the branch to a commit.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Calling the create branch operation does not set a repository&#39;s default branch. To do this, call the update default branch operation.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BranchNameExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBranchAsync(String xAmzTarget, CreateBranchInput createBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBranchValidateBeforeCall(xAmzTarget, createBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCommit
     * @param xAmzTarget  (required)
     * @param createCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FileEntryRequiredException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MaximumFileEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> PutFileEntryConflictException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> SourceFileOrContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> FileContentAndSourceFileSpecifiedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> SamePathRequestException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidDeletionParameterException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> RestrictedSourceFileException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> NoChangeException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> FileNameConflictsWithDirectoryNameException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> DirectoryNameConflictsWithFileNameException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> FilePathConflictsWithSubmodulePathException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommitCall(String xAmzTarget, CreateCommitInput createCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCommitInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.CreateCommit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommitValidateBeforeCall(String xAmzTarget, CreateCommitInput createCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createCommit(Async)");
        }

        // verify the required parameter 'createCommitInput' is set
        if (createCommitInput == null) {
            throw new ApiException("Missing the required parameter 'createCommitInput' when calling createCommit(Async)");
        }

        return createCommitCall(xAmzTarget, createCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a commit for a repository on the tip of a specified branch.
     * @param xAmzTarget  (required)
     * @param createCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateCommitOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FileEntryRequiredException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MaximumFileEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> PutFileEntryConflictException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> SourceFileOrContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> FileContentAndSourceFileSpecifiedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> SamePathRequestException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidDeletionParameterException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> RestrictedSourceFileException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> NoChangeException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> FileNameConflictsWithDirectoryNameException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> DirectoryNameConflictsWithFileNameException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> FilePathConflictsWithSubmodulePathException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCommitOutput createCommit(String xAmzTarget, CreateCommitInput createCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateCommitOutput> localVarResp = createCommitWithHttpInfo(xAmzTarget, createCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a commit for a repository on the tip of a specified branch.
     * @param xAmzTarget  (required)
     * @param createCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateCommitOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FileEntryRequiredException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MaximumFileEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> PutFileEntryConflictException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> SourceFileOrContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> FileContentAndSourceFileSpecifiedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> SamePathRequestException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidDeletionParameterException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> RestrictedSourceFileException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> NoChangeException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> FileNameConflictsWithDirectoryNameException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> DirectoryNameConflictsWithFileNameException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> FilePathConflictsWithSubmodulePathException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCommitOutput> createCommitWithHttpInfo(String xAmzTarget, CreateCommitInput createCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createCommitValidateBeforeCall(xAmzTarget, createCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateCommitOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a commit for a repository on the tip of a specified branch.
     * @param xAmzTarget  (required)
     * @param createCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FileEntryRequiredException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MaximumFileEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> PutFileEntryConflictException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> SourceFileOrContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> FileContentAndSourceFileSpecifiedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> SamePathRequestException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidDeletionParameterException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> RestrictedSourceFileException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> NoChangeException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> FileNameConflictsWithDirectoryNameException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> DirectoryNameConflictsWithFileNameException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> FilePathConflictsWithSubmodulePathException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommitAsync(String xAmzTarget, CreateCommitInput createCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateCommitOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommitValidateBeforeCall(xAmzTarget, createCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateCommitOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPullRequest
     * @param xAmzTarget  (required)
     * @param createPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ReferenceNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidReferenceNameException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ReferenceDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReferenceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TitleRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidTitleException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidDescriptionException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> TargetsRequiredException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidTargetsException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TargetRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> MultipleRepositoriesInPullRequestException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> MaximumOpenPullRequestsExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> SourceAndDestinationAreSameException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPullRequestCall(String xAmzTarget, CreatePullRequestInput createPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPullRequestInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.CreatePullRequest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPullRequestValidateBeforeCall(String xAmzTarget, CreatePullRequestInput createPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createPullRequest(Async)");
        }

        // verify the required parameter 'createPullRequestInput' is set
        if (createPullRequestInput == null) {
            throw new ApiException("Missing the required parameter 'createPullRequestInput' when calling createPullRequest(Async)");
        }

        return createPullRequestCall(xAmzTarget, createPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a pull request in the specified repository.
     * @param xAmzTarget  (required)
     * @param createPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreatePullRequestOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ReferenceNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidReferenceNameException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ReferenceDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReferenceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TitleRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidTitleException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidDescriptionException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> TargetsRequiredException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidTargetsException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TargetRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> MultipleRepositoriesInPullRequestException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> MaximumOpenPullRequestsExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> SourceAndDestinationAreSameException </td><td>  -  </td></tr>
     </table>
     */
    public CreatePullRequestOutput createPullRequest(String xAmzTarget, CreatePullRequestInput createPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreatePullRequestOutput> localVarResp = createPullRequestWithHttpInfo(xAmzTarget, createPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a pull request in the specified repository.
     * @param xAmzTarget  (required)
     * @param createPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreatePullRequestOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ReferenceNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidReferenceNameException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ReferenceDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReferenceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TitleRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidTitleException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidDescriptionException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> TargetsRequiredException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidTargetsException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TargetRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> MultipleRepositoriesInPullRequestException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> MaximumOpenPullRequestsExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> SourceAndDestinationAreSameException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePullRequestOutput> createPullRequestWithHttpInfo(String xAmzTarget, CreatePullRequestInput createPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createPullRequestValidateBeforeCall(xAmzTarget, createPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreatePullRequestOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a pull request in the specified repository.
     * @param xAmzTarget  (required)
     * @param createPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ReferenceNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidReferenceNameException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ReferenceDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReferenceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TitleRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidTitleException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidDescriptionException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> TargetsRequiredException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidTargetsException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TargetRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> MultipleRepositoriesInPullRequestException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> MaximumOpenPullRequestsExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> SourceAndDestinationAreSameException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPullRequestAsync(String xAmzTarget, CreatePullRequestInput createPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreatePullRequestOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPullRequestValidateBeforeCall(xAmzTarget, createPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreatePullRequestOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPullRequestApprovalRule
     * @param xAmzTarget  (required)
     * @param createPullRequestApprovalRuleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleNameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidApprovalRuleContentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NumberOfRulesExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPullRequestApprovalRuleCall(String xAmzTarget, CreatePullRequestApprovalRuleInput createPullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPullRequestApprovalRuleInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.CreatePullRequestApprovalRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPullRequestApprovalRuleValidateBeforeCall(String xAmzTarget, CreatePullRequestApprovalRuleInput createPullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createPullRequestApprovalRule(Async)");
        }

        // verify the required parameter 'createPullRequestApprovalRuleInput' is set
        if (createPullRequestApprovalRuleInput == null) {
            throw new ApiException("Missing the required parameter 'createPullRequestApprovalRuleInput' when calling createPullRequestApprovalRule(Async)");
        }

        return createPullRequestApprovalRuleCall(xAmzTarget, createPullRequestApprovalRuleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an approval rule for a pull request.
     * @param xAmzTarget  (required)
     * @param createPullRequestApprovalRuleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreatePullRequestApprovalRuleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleNameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidApprovalRuleContentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NumberOfRulesExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public CreatePullRequestApprovalRuleOutput createPullRequestApprovalRule(String xAmzTarget, CreatePullRequestApprovalRuleInput createPullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreatePullRequestApprovalRuleOutput> localVarResp = createPullRequestApprovalRuleWithHttpInfo(xAmzTarget, createPullRequestApprovalRuleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an approval rule for a pull request.
     * @param xAmzTarget  (required)
     * @param createPullRequestApprovalRuleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreatePullRequestApprovalRuleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleNameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidApprovalRuleContentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NumberOfRulesExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePullRequestApprovalRuleOutput> createPullRequestApprovalRuleWithHttpInfo(String xAmzTarget, CreatePullRequestApprovalRuleInput createPullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createPullRequestApprovalRuleValidateBeforeCall(xAmzTarget, createPullRequestApprovalRuleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreatePullRequestApprovalRuleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an approval rule for a pull request.
     * @param xAmzTarget  (required)
     * @param createPullRequestApprovalRuleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleNameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidApprovalRuleContentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NumberOfRulesExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPullRequestApprovalRuleAsync(String xAmzTarget, CreatePullRequestApprovalRuleInput createPullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreatePullRequestApprovalRuleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPullRequestApprovalRuleValidateBeforeCall(xAmzTarget, createPullRequestApprovalRuleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreatePullRequestApprovalRuleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRepository
     * @param xAmzTarget  (required)
     * @param createRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTagsMapException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryCall(String xAmzTarget, CreateRepositoryInput createRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRepositoryInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.CreateRepository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRepositoryValidateBeforeCall(String xAmzTarget, CreateRepositoryInput createRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createRepository(Async)");
        }

        // verify the required parameter 'createRepositoryInput' is set
        if (createRepositoryInput == null) {
            throw new ApiException("Missing the required parameter 'createRepositoryInput' when calling createRepository(Async)");
        }

        return createRepositoryCall(xAmzTarget, createRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new, empty repository.
     * @param xAmzTarget  (required)
     * @param createRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRepositoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTagsMapException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRepositoryOutput createRepository(String xAmzTarget, CreateRepositoryInput createRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRepositoryOutput> localVarResp = createRepositoryWithHttpInfo(xAmzTarget, createRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new, empty repository.
     * @param xAmzTarget  (required)
     * @param createRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRepositoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTagsMapException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRepositoryOutput> createRepositoryWithHttpInfo(String xAmzTarget, CreateRepositoryInput createRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRepositoryValidateBeforeCall(xAmzTarget, createRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRepositoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new, empty repository.
     * @param xAmzTarget  (required)
     * @param createRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTagsMapException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryAsync(String xAmzTarget, CreateRepositoryInput createRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRepositoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRepositoryValidateBeforeCall(xAmzTarget, createRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRepositoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUnreferencedMergeCommit
     * @param xAmzTarget  (required)
     * @param createUnreferencedMergeCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUnreferencedMergeCommitCall(String xAmzTarget, CreateUnreferencedMergeCommitInput createUnreferencedMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUnreferencedMergeCommitInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUnreferencedMergeCommitValidateBeforeCall(String xAmzTarget, CreateUnreferencedMergeCommitInput createUnreferencedMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createUnreferencedMergeCommit(Async)");
        }

        // verify the required parameter 'createUnreferencedMergeCommitInput' is set
        if (createUnreferencedMergeCommitInput == null) {
            throw new ApiException("Missing the required parameter 'createUnreferencedMergeCommitInput' when calling createUnreferencedMergeCommit(Async)");
        }

        return createUnreferencedMergeCommitCall(xAmzTarget, createUnreferencedMergeCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUnreferencedMergeCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateUnreferencedMergeCommitOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public CreateUnreferencedMergeCommitOutput createUnreferencedMergeCommit(String xAmzTarget, CreateUnreferencedMergeCommitInput createUnreferencedMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateUnreferencedMergeCommitOutput> localVarResp = createUnreferencedMergeCommitWithHttpInfo(xAmzTarget, createUnreferencedMergeCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUnreferencedMergeCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateUnreferencedMergeCommitOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUnreferencedMergeCommitOutput> createUnreferencedMergeCommitWithHttpInfo(String xAmzTarget, CreateUnreferencedMergeCommitInput createUnreferencedMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createUnreferencedMergeCommitValidateBeforeCall(xAmzTarget, createUnreferencedMergeCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateUnreferencedMergeCommitOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUnreferencedMergeCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUnreferencedMergeCommitAsync(String xAmzTarget, CreateUnreferencedMergeCommitInput createUnreferencedMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateUnreferencedMergeCommitOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUnreferencedMergeCommitValidateBeforeCall(xAmzTarget, createUnreferencedMergeCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateUnreferencedMergeCommitOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApprovalRuleTemplate
     * @param xAmzTarget  (required)
     * @param deleteApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApprovalRuleTemplateCall(String xAmzTarget, DeleteApprovalRuleTemplateInput deleteApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteApprovalRuleTemplateInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.DeleteApprovalRuleTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApprovalRuleTemplateValidateBeforeCall(String xAmzTarget, DeleteApprovalRuleTemplateInput deleteApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteApprovalRuleTemplate(Async)");
        }

        // verify the required parameter 'deleteApprovalRuleTemplateInput' is set
        if (deleteApprovalRuleTemplateInput == null) {
            throw new ApiException("Missing the required parameter 'deleteApprovalRuleTemplateInput' when calling deleteApprovalRuleTemplate(Async)");
        }

        return deleteApprovalRuleTemplateCall(xAmzTarget, deleteApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.
     * @param xAmzTarget  (required)
     * @param deleteApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteApprovalRuleTemplateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateInUseException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteApprovalRuleTemplateOutput deleteApprovalRuleTemplate(String xAmzTarget, DeleteApprovalRuleTemplateInput deleteApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteApprovalRuleTemplateOutput> localVarResp = deleteApprovalRuleTemplateWithHttpInfo(xAmzTarget, deleteApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.
     * @param xAmzTarget  (required)
     * @param deleteApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteApprovalRuleTemplateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteApprovalRuleTemplateOutput> deleteApprovalRuleTemplateWithHttpInfo(String xAmzTarget, DeleteApprovalRuleTemplateInput deleteApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteApprovalRuleTemplateValidateBeforeCall(xAmzTarget, deleteApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteApprovalRuleTemplateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.
     * @param xAmzTarget  (required)
     * @param deleteApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApprovalRuleTemplateAsync(String xAmzTarget, DeleteApprovalRuleTemplateInput deleteApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteApprovalRuleTemplateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApprovalRuleTemplateValidateBeforeCall(xAmzTarget, deleteApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteApprovalRuleTemplateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBranch
     * @param xAmzTarget  (required)
     * @param deleteBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DefaultBranchCannotBeDeletedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBranchCall(String xAmzTarget, DeleteBranchInput deleteBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteBranchInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.DeleteBranch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBranchValidateBeforeCall(String xAmzTarget, DeleteBranchInput deleteBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteBranch(Async)");
        }

        // verify the required parameter 'deleteBranchInput' is set
        if (deleteBranchInput == null) {
            throw new ApiException("Missing the required parameter 'deleteBranchInput' when calling deleteBranch(Async)");
        }

        return deleteBranchCall(xAmzTarget, deleteBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a branch from a repository, unless that branch is the default branch for the repository. 
     * @param xAmzTarget  (required)
     * @param deleteBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteBranchOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DefaultBranchCannotBeDeletedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBranchOutput deleteBranch(String xAmzTarget, DeleteBranchInput deleteBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteBranchOutput> localVarResp = deleteBranchWithHttpInfo(xAmzTarget, deleteBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a branch from a repository, unless that branch is the default branch for the repository. 
     * @param xAmzTarget  (required)
     * @param deleteBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteBranchOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DefaultBranchCannotBeDeletedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteBranchOutput> deleteBranchWithHttpInfo(String xAmzTarget, DeleteBranchInput deleteBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteBranchValidateBeforeCall(xAmzTarget, deleteBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteBranchOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a branch from a repository, unless that branch is the default branch for the repository. 
     * @param xAmzTarget  (required)
     * @param deleteBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DefaultBranchCannotBeDeletedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBranchAsync(String xAmzTarget, DeleteBranchInput deleteBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteBranchOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBranchValidateBeforeCall(xAmzTarget, deleteBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteBranchOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCommentContent
     * @param xAmzTarget  (required)
     * @param deleteCommentContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommentContentCall(String xAmzTarget, DeleteCommentContentInput deleteCommentContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteCommentContentInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.DeleteCommentContent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentContentValidateBeforeCall(String xAmzTarget, DeleteCommentContentInput deleteCommentContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteCommentContent(Async)");
        }

        // verify the required parameter 'deleteCommentContentInput' is set
        if (deleteCommentContentInput == null) {
            throw new ApiException("Missing the required parameter 'deleteCommentContentInput' when calling deleteCommentContent(Async)");
        }

        return deleteCommentContentCall(xAmzTarget, deleteCommentContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the content of a comment made on a change, file, or commit in a repository.
     * @param xAmzTarget  (required)
     * @param deleteCommentContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteCommentContentOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCommentContentOutput deleteCommentContent(String xAmzTarget, DeleteCommentContentInput deleteCommentContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteCommentContentOutput> localVarResp = deleteCommentContentWithHttpInfo(xAmzTarget, deleteCommentContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the content of a comment made on a change, file, or commit in a repository.
     * @param xAmzTarget  (required)
     * @param deleteCommentContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteCommentContentOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteCommentContentOutput> deleteCommentContentWithHttpInfo(String xAmzTarget, DeleteCommentContentInput deleteCommentContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentContentValidateBeforeCall(xAmzTarget, deleteCommentContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteCommentContentOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the content of a comment made on a change, file, or commit in a repository.
     * @param xAmzTarget  (required)
     * @param deleteCommentContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommentContentAsync(String xAmzTarget, DeleteCommentContentInput deleteCommentContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteCommentContentOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentContentValidateBeforeCall(xAmzTarget, deleteCommentContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteCommentContentOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFile
     * @param xAmzTarget  (required)
     * @param deleteFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileCall(String xAmzTarget, DeleteFileInput deleteFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteFileInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.DeleteFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileValidateBeforeCall(String xAmzTarget, DeleteFileInput deleteFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteFile(Async)");
        }

        // verify the required parameter 'deleteFileInput' is set
        if (deleteFileInput == null) {
            throw new ApiException("Missing the required parameter 'deleteFileInput' when calling deleteFile(Async)");
        }

        return deleteFileCall(xAmzTarget, deleteFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.
     * @param xAmzTarget  (required)
     * @param deleteFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteFileOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFileOutput deleteFile(String xAmzTarget, DeleteFileInput deleteFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteFileOutput> localVarResp = deleteFileWithHttpInfo(xAmzTarget, deleteFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.
     * @param xAmzTarget  (required)
     * @param deleteFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteFileOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteFileOutput> deleteFileWithHttpInfo(String xAmzTarget, DeleteFileInput deleteFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(xAmzTarget, deleteFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteFileOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.
     * @param xAmzTarget  (required)
     * @param deleteFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileAsync(String xAmzTarget, DeleteFileInput deleteFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteFileOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(xAmzTarget, deleteFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteFileOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePullRequestApprovalRule
     * @param xAmzTarget  (required)
     * @param deletePullRequestApprovalRuleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CannotDeleteApprovalRuleFromTemplateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePullRequestApprovalRuleCall(String xAmzTarget, DeletePullRequestApprovalRuleInput deletePullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePullRequestApprovalRuleInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.DeletePullRequestApprovalRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePullRequestApprovalRuleValidateBeforeCall(String xAmzTarget, DeletePullRequestApprovalRuleInput deletePullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deletePullRequestApprovalRule(Async)");
        }

        // verify the required parameter 'deletePullRequestApprovalRuleInput' is set
        if (deletePullRequestApprovalRuleInput == null) {
            throw new ApiException("Missing the required parameter 'deletePullRequestApprovalRuleInput' when calling deletePullRequestApprovalRule(Async)");
        }

        return deletePullRequestApprovalRuleCall(xAmzTarget, deletePullRequestApprovalRuleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the pull request was created. You cannot delete an approval rule from a merged or closed pull request.
     * @param xAmzTarget  (required)
     * @param deletePullRequestApprovalRuleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeletePullRequestApprovalRuleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CannotDeleteApprovalRuleFromTemplateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public DeletePullRequestApprovalRuleOutput deletePullRequestApprovalRule(String xAmzTarget, DeletePullRequestApprovalRuleInput deletePullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeletePullRequestApprovalRuleOutput> localVarResp = deletePullRequestApprovalRuleWithHttpInfo(xAmzTarget, deletePullRequestApprovalRuleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the pull request was created. You cannot delete an approval rule from a merged or closed pull request.
     * @param xAmzTarget  (required)
     * @param deletePullRequestApprovalRuleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeletePullRequestApprovalRuleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CannotDeleteApprovalRuleFromTemplateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletePullRequestApprovalRuleOutput> deletePullRequestApprovalRuleWithHttpInfo(String xAmzTarget, DeletePullRequestApprovalRuleInput deletePullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deletePullRequestApprovalRuleValidateBeforeCall(xAmzTarget, deletePullRequestApprovalRuleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeletePullRequestApprovalRuleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the pull request was created. You cannot delete an approval rule from a merged or closed pull request.
     * @param xAmzTarget  (required)
     * @param deletePullRequestApprovalRuleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CannotDeleteApprovalRuleFromTemplateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePullRequestApprovalRuleAsync(String xAmzTarget, DeletePullRequestApprovalRuleInput deletePullRequestApprovalRuleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeletePullRequestApprovalRuleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePullRequestApprovalRuleValidateBeforeCall(xAmzTarget, deletePullRequestApprovalRuleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeletePullRequestApprovalRuleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepository
     * @param xAmzTarget  (required)
     * @param deleteRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryCall(String xAmzTarget, DeleteRepositoryInput deleteRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRepositoryInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.DeleteRepository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryValidateBeforeCall(String xAmzTarget, DeleteRepositoryInput deleteRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteRepository(Async)");
        }

        // verify the required parameter 'deleteRepositoryInput' is set
        if (deleteRepositoryInput == null) {
            throw new ApiException("Missing the required parameter 'deleteRepositoryInput' when calling deleteRepository(Async)");
        }

        return deleteRepositoryCall(xAmzTarget, deleteRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a repository. If a specified repository was already deleted, a null repository ID is returned.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository fail.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteRepositoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRepositoryOutput deleteRepository(String xAmzTarget, DeleteRepositoryInput deleteRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteRepositoryOutput> localVarResp = deleteRepositoryWithHttpInfo(xAmzTarget, deleteRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a repository. If a specified repository was already deleted, a null repository ID is returned.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository fail.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteRepositoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRepositoryOutput> deleteRepositoryWithHttpInfo(String xAmzTarget, DeleteRepositoryInput deleteRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryValidateBeforeCall(xAmzTarget, deleteRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteRepositoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a repository. If a specified repository was already deleted, a null repository ID is returned.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository fail.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryAsync(String xAmzTarget, DeleteRepositoryInput deleteRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteRepositoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryValidateBeforeCall(xAmzTarget, deleteRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteRepositoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeMergeConflicts
     * @param xAmzTarget  (required)
     * @param describeMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxMergeHunks Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidMaxMergeHunksException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeMergeConflictsCall(String xAmzTarget, DescribeMergeConflictsInput describeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxMergeHunks, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeMergeConflictsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.DescribeMergeConflicts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxMergeHunks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxMergeHunks", maxMergeHunks));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeMergeConflictsValidateBeforeCall(String xAmzTarget, DescribeMergeConflictsInput describeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxMergeHunks, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeMergeConflicts(Async)");
        }

        // verify the required parameter 'describeMergeConflictsInput' is set
        if (describeMergeConflictsInput == null) {
            throw new ApiException("Missing the required parameter 'describeMergeConflictsInput' when calling describeMergeConflicts(Async)");
        }

        return describeMergeConflictsCall(xAmzTarget, describeMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxMergeHunks, nextToken, _callback);

    }

    /**
     * 
     * Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.
     * @param xAmzTarget  (required)
     * @param describeMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxMergeHunks Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeMergeConflictsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidMaxMergeHunksException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeMergeConflictsOutput describeMergeConflicts(String xAmzTarget, DescribeMergeConflictsInput describeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxMergeHunks, String nextToken) throws ApiException {
        ApiResponse<DescribeMergeConflictsOutput> localVarResp = describeMergeConflictsWithHttpInfo(xAmzTarget, describeMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxMergeHunks, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.
     * @param xAmzTarget  (required)
     * @param describeMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxMergeHunks Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeMergeConflictsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidMaxMergeHunksException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeMergeConflictsOutput> describeMergeConflictsWithHttpInfo(String xAmzTarget, DescribeMergeConflictsInput describeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxMergeHunks, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeMergeConflictsValidateBeforeCall(xAmzTarget, describeMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxMergeHunks, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeMergeConflictsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.
     * @param xAmzTarget  (required)
     * @param describeMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxMergeHunks Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidMaxMergeHunksException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeMergeConflictsAsync(String xAmzTarget, DescribeMergeConflictsInput describeMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxMergeHunks, String nextToken, final ApiCallback<DescribeMergeConflictsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeMergeConflictsValidateBeforeCall(xAmzTarget, describeMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxMergeHunks, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeMergeConflictsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describePullRequestEvents
     * @param xAmzTarget  (required)
     * @param describePullRequestEventsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestEventTypeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidActorArnException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ActorDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePullRequestEventsCall(String xAmzTarget, DescribePullRequestEventsInput describePullRequestEventsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describePullRequestEventsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.DescribePullRequestEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describePullRequestEventsValidateBeforeCall(String xAmzTarget, DescribePullRequestEventsInput describePullRequestEventsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describePullRequestEvents(Async)");
        }

        // verify the required parameter 'describePullRequestEventsInput' is set
        if (describePullRequestEventsInput == null) {
            throw new ApiException("Missing the required parameter 'describePullRequestEventsInput' when calling describePullRequestEvents(Async)");
        }

        return describePullRequestEventsCall(xAmzTarget, describePullRequestEventsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns information about one or more pull request events.
     * @param xAmzTarget  (required)
     * @param describePullRequestEventsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribePullRequestEventsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestEventTypeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidActorArnException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ActorDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public DescribePullRequestEventsOutput describePullRequestEvents(String xAmzTarget, DescribePullRequestEventsInput describePullRequestEventsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribePullRequestEventsOutput> localVarResp = describePullRequestEventsWithHttpInfo(xAmzTarget, describePullRequestEventsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about one or more pull request events.
     * @param xAmzTarget  (required)
     * @param describePullRequestEventsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribePullRequestEventsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestEventTypeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidActorArnException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ActorDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribePullRequestEventsOutput> describePullRequestEventsWithHttpInfo(String xAmzTarget, DescribePullRequestEventsInput describePullRequestEventsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describePullRequestEventsValidateBeforeCall(xAmzTarget, describePullRequestEventsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribePullRequestEventsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about one or more pull request events.
     * @param xAmzTarget  (required)
     * @param describePullRequestEventsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestEventTypeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidActorArnException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ActorDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePullRequestEventsAsync(String xAmzTarget, DescribePullRequestEventsInput describePullRequestEventsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribePullRequestEventsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describePullRequestEventsValidateBeforeCall(xAmzTarget, describePullRequestEventsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribePullRequestEventsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateApprovalRuleTemplateFromRepository
     * @param xAmzTarget  (required)
     * @param disassociateApprovalRuleTemplateFromRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateApprovalRuleTemplateFromRepositoryCall(String xAmzTarget, DisassociateApprovalRuleTemplateFromRepositoryInput disassociateApprovalRuleTemplateFromRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateApprovalRuleTemplateFromRepositoryInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateApprovalRuleTemplateFromRepositoryValidateBeforeCall(String xAmzTarget, DisassociateApprovalRuleTemplateFromRepositoryInput disassociateApprovalRuleTemplateFromRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disassociateApprovalRuleTemplateFromRepository(Async)");
        }

        // verify the required parameter 'disassociateApprovalRuleTemplateFromRepositoryInput' is set
        if (disassociateApprovalRuleTemplateFromRepositoryInput == null) {
            throw new ApiException("Missing the required parameter 'disassociateApprovalRuleTemplateFromRepositoryInput' when calling disassociateApprovalRuleTemplateFromRepository(Async)");
        }

        return disassociateApprovalRuleTemplateFromRepositoryCall(xAmzTarget, disassociateApprovalRuleTemplateFromRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository. This does not delete any approval rules previously created for pull requests through the template association.
     * @param xAmzTarget  (required)
     * @param disassociateApprovalRuleTemplateFromRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public void disassociateApprovalRuleTemplateFromRepository(String xAmzTarget, DisassociateApprovalRuleTemplateFromRepositoryInput disassociateApprovalRuleTemplateFromRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        disassociateApprovalRuleTemplateFromRepositoryWithHttpInfo(xAmzTarget, disassociateApprovalRuleTemplateFromRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository. This does not delete any approval rules previously created for pull requests through the template association.
     * @param xAmzTarget  (required)
     * @param disassociateApprovalRuleTemplateFromRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disassociateApprovalRuleTemplateFromRepositoryWithHttpInfo(String xAmzTarget, DisassociateApprovalRuleTemplateFromRepositoryInput disassociateApprovalRuleTemplateFromRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateApprovalRuleTemplateFromRepositoryValidateBeforeCall(xAmzTarget, disassociateApprovalRuleTemplateFromRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository. This does not delete any approval rules previously created for pull requests through the template association.
     * @param xAmzTarget  (required)
     * @param disassociateApprovalRuleTemplateFromRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateApprovalRuleTemplateFromRepositoryAsync(String xAmzTarget, DisassociateApprovalRuleTemplateFromRepositoryInput disassociateApprovalRuleTemplateFromRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateApprovalRuleTemplateFromRepositoryValidateBeforeCall(xAmzTarget, disassociateApprovalRuleTemplateFromRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for evaluatePullRequestApprovalRules
     * @param xAmzTarget  (required)
     * @param evaluatePullRequestApprovalRulesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluatePullRequestApprovalRulesCall(String xAmzTarget, EvaluatePullRequestApprovalRulesInput evaluatePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evaluatePullRequestApprovalRulesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.EvaluatePullRequestApprovalRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluatePullRequestApprovalRulesValidateBeforeCall(String xAmzTarget, EvaluatePullRequestApprovalRulesInput evaluatePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling evaluatePullRequestApprovalRules(Async)");
        }

        // verify the required parameter 'evaluatePullRequestApprovalRulesInput' is set
        if (evaluatePullRequestApprovalRulesInput == null) {
            throw new ApiException("Missing the required parameter 'evaluatePullRequestApprovalRulesInput' when calling evaluatePullRequestApprovalRules(Async)");
        }

        return evaluatePullRequestApprovalRulesCall(xAmzTarget, evaluatePullRequestApprovalRulesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Evaluates whether a pull request has met all the conditions specified in its associated approval rules.
     * @param xAmzTarget  (required)
     * @param evaluatePullRequestApprovalRulesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return EvaluatePullRequestApprovalRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public EvaluatePullRequestApprovalRulesOutput evaluatePullRequestApprovalRules(String xAmzTarget, EvaluatePullRequestApprovalRulesInput evaluatePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<EvaluatePullRequestApprovalRulesOutput> localVarResp = evaluatePullRequestApprovalRulesWithHttpInfo(xAmzTarget, evaluatePullRequestApprovalRulesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Evaluates whether a pull request has met all the conditions specified in its associated approval rules.
     * @param xAmzTarget  (required)
     * @param evaluatePullRequestApprovalRulesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;EvaluatePullRequestApprovalRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EvaluatePullRequestApprovalRulesOutput> evaluatePullRequestApprovalRulesWithHttpInfo(String xAmzTarget, EvaluatePullRequestApprovalRulesInput evaluatePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = evaluatePullRequestApprovalRulesValidateBeforeCall(xAmzTarget, evaluatePullRequestApprovalRulesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<EvaluatePullRequestApprovalRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Evaluates whether a pull request has met all the conditions specified in its associated approval rules.
     * @param xAmzTarget  (required)
     * @param evaluatePullRequestApprovalRulesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluatePullRequestApprovalRulesAsync(String xAmzTarget, EvaluatePullRequestApprovalRulesInput evaluatePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<EvaluatePullRequestApprovalRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluatePullRequestApprovalRulesValidateBeforeCall(xAmzTarget, evaluatePullRequestApprovalRulesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<EvaluatePullRequestApprovalRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApprovalRuleTemplate
     * @param xAmzTarget  (required)
     * @param getApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApprovalRuleTemplateCall(String xAmzTarget, GetApprovalRuleTemplateInput getApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getApprovalRuleTemplateInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetApprovalRuleTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApprovalRuleTemplateValidateBeforeCall(String xAmzTarget, GetApprovalRuleTemplateInput getApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getApprovalRuleTemplate(Async)");
        }

        // verify the required parameter 'getApprovalRuleTemplateInput' is set
        if (getApprovalRuleTemplateInput == null) {
            throw new ApiException("Missing the required parameter 'getApprovalRuleTemplateInput' when calling getApprovalRuleTemplate(Async)");
        }

        return getApprovalRuleTemplateCall(xAmzTarget, getApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about a specified approval rule template.
     * @param xAmzTarget  (required)
     * @param getApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetApprovalRuleTemplateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
     </table>
     */
    public GetApprovalRuleTemplateOutput getApprovalRuleTemplate(String xAmzTarget, GetApprovalRuleTemplateInput getApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetApprovalRuleTemplateOutput> localVarResp = getApprovalRuleTemplateWithHttpInfo(xAmzTarget, getApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about a specified approval rule template.
     * @param xAmzTarget  (required)
     * @param getApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetApprovalRuleTemplateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetApprovalRuleTemplateOutput> getApprovalRuleTemplateWithHttpInfo(String xAmzTarget, GetApprovalRuleTemplateInput getApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getApprovalRuleTemplateValidateBeforeCall(xAmzTarget, getApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetApprovalRuleTemplateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about a specified approval rule template.
     * @param xAmzTarget  (required)
     * @param getApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApprovalRuleTemplateAsync(String xAmzTarget, GetApprovalRuleTemplateInput getApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetApprovalRuleTemplateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApprovalRuleTemplateValidateBeforeCall(xAmzTarget, getApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetApprovalRuleTemplateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBlob
     * @param xAmzTarget  (required)
     * @param getBlobInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BlobIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBlobIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BlobIdDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FileTooLargeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlobCall(String xAmzTarget, GetBlobInput getBlobInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getBlobInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetBlob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlobValidateBeforeCall(String xAmzTarget, GetBlobInput getBlobInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getBlob(Async)");
        }

        // verify the required parameter 'getBlobInput' is set
        if (getBlobInput == null) {
            throw new ApiException("Missing the required parameter 'getBlobInput' when calling getBlob(Async)");
        }

        return getBlobCall(xAmzTarget, getBlobInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the base-64 encoded content of an individual blob in a repository.
     * @param xAmzTarget  (required)
     * @param getBlobInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetBlobOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BlobIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBlobIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BlobIdDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FileTooLargeException </td><td>  -  </td></tr>
     </table>
     */
    public GetBlobOutput getBlob(String xAmzTarget, GetBlobInput getBlobInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetBlobOutput> localVarResp = getBlobWithHttpInfo(xAmzTarget, getBlobInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the base-64 encoded content of an individual blob in a repository.
     * @param xAmzTarget  (required)
     * @param getBlobInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetBlobOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BlobIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBlobIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BlobIdDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FileTooLargeException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBlobOutput> getBlobWithHttpInfo(String xAmzTarget, GetBlobInput getBlobInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getBlobValidateBeforeCall(xAmzTarget, getBlobInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetBlobOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the base-64 encoded content of an individual blob in a repository.
     * @param xAmzTarget  (required)
     * @param getBlobInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BlobIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBlobIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BlobIdDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FileTooLargeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlobAsync(String xAmzTarget, GetBlobInput getBlobInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetBlobOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlobValidateBeforeCall(xAmzTarget, getBlobInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetBlobOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBranch
     * @param xAmzTarget  (required)
     * @param getBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBranchCall(String xAmzTarget, GetBranchInput getBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getBranchInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetBranch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBranchValidateBeforeCall(String xAmzTarget, GetBranchInput getBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getBranch(Async)");
        }

        // verify the required parameter 'getBranchInput' is set
        if (getBranchInput == null) {
            throw new ApiException("Missing the required parameter 'getBranchInput' when calling getBranch(Async)");
        }

        return getBranchCall(xAmzTarget, getBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about a repository branch, including its name and the last commit ID.
     * @param xAmzTarget  (required)
     * @param getBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetBranchOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetBranchOutput getBranch(String xAmzTarget, GetBranchInput getBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetBranchOutput> localVarResp = getBranchWithHttpInfo(xAmzTarget, getBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about a repository branch, including its name and the last commit ID.
     * @param xAmzTarget  (required)
     * @param getBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetBranchOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBranchOutput> getBranchWithHttpInfo(String xAmzTarget, GetBranchInput getBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getBranchValidateBeforeCall(xAmzTarget, getBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetBranchOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about a repository branch, including its name and the last commit ID.
     * @param xAmzTarget  (required)
     * @param getBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBranchAsync(String xAmzTarget, GetBranchInput getBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetBranchOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBranchValidateBeforeCall(xAmzTarget, getBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetBranchOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComment
     * @param xAmzTarget  (required)
     * @param getCommentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentCall(String xAmzTarget, GetCommentInput getCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCommentInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetComment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentValidateBeforeCall(String xAmzTarget, GetCommentInput getCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getComment(Async)");
        }

        // verify the required parameter 'getCommentInput' is set
        if (getCommentInput == null) {
            throw new ApiException("Missing the required parameter 'getCommentInput' when calling getComment(Async)");
        }

        return getCommentCall(xAmzTarget, getCommentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the content of a comment made on a change, file, or commit in a repository. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getCommentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCommentOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentOutput getComment(String xAmzTarget, GetCommentInput getCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCommentOutput> localVarResp = getCommentWithHttpInfo(xAmzTarget, getCommentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the content of a comment made on a change, file, or commit in a repository. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getCommentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCommentOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCommentOutput> getCommentWithHttpInfo(String xAmzTarget, GetCommentInput getCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCommentValidateBeforeCall(xAmzTarget, getCommentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCommentOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the content of a comment made on a change, file, or commit in a repository. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getCommentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentAsync(String xAmzTarget, GetCommentInput getCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCommentOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentValidateBeforeCall(xAmzTarget, getCommentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCommentOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommentReactions
     * @param xAmzTarget  (required)
     * @param getCommentReactionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidReactionUserArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentReactionsCall(String xAmzTarget, GetCommentReactionsInput getCommentReactionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCommentReactionsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetCommentReactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentReactionsValidateBeforeCall(String xAmzTarget, GetCommentReactionsInput getCommentReactionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getCommentReactions(Async)");
        }

        // verify the required parameter 'getCommentReactionsInput' is set
        if (getCommentReactionsInput == null) {
            throw new ApiException("Missing the required parameter 'getCommentReactionsInput' when calling getCommentReactions(Async)");
        }

        return getCommentReactionsCall(xAmzTarget, getCommentReactionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.
     * @param xAmzTarget  (required)
     * @param getCommentReactionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return GetCommentReactionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidReactionUserArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentReactionsOutput getCommentReactions(String xAmzTarget, GetCommentReactionsInput getCommentReactionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<GetCommentReactionsOutput> localVarResp = getCommentReactionsWithHttpInfo(xAmzTarget, getCommentReactionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.
     * @param xAmzTarget  (required)
     * @param getCommentReactionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;GetCommentReactionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidReactionUserArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCommentReactionsOutput> getCommentReactionsWithHttpInfo(String xAmzTarget, GetCommentReactionsInput getCommentReactionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getCommentReactionsValidateBeforeCall(xAmzTarget, getCommentReactionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<GetCommentReactionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.
     * @param xAmzTarget  (required)
     * @param getCommentReactionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidReactionUserArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentReactionsAsync(String xAmzTarget, GetCommentReactionsInput getCommentReactionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<GetCommentReactionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentReactionsValidateBeforeCall(xAmzTarget, getCommentReactionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<GetCommentReactionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommentsForComparedCommit
     * @param xAmzTarget  (required)
     * @param getCommentsForComparedCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsForComparedCommitCall(String xAmzTarget, GetCommentsForComparedCommitInput getCommentsForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCommentsForComparedCommitInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetCommentsForComparedCommit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentsForComparedCommitValidateBeforeCall(String xAmzTarget, GetCommentsForComparedCommitInput getCommentsForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getCommentsForComparedCommit(Async)");
        }

        // verify the required parameter 'getCommentsForComparedCommitInput' is set
        if (getCommentsForComparedCommitInput == null) {
            throw new ApiException("Missing the required parameter 'getCommentsForComparedCommitInput' when calling getCommentsForComparedCommit(Async)");
        }

        return getCommentsForComparedCommitCall(xAmzTarget, getCommentsForComparedCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about comments made on the comparison between two commits.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getCommentsForComparedCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return GetCommentsForComparedCommitOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentsForComparedCommitOutput getCommentsForComparedCommit(String xAmzTarget, GetCommentsForComparedCommitInput getCommentsForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<GetCommentsForComparedCommitOutput> localVarResp = getCommentsForComparedCommitWithHttpInfo(xAmzTarget, getCommentsForComparedCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about comments made on the comparison between two commits.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getCommentsForComparedCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;GetCommentsForComparedCommitOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCommentsForComparedCommitOutput> getCommentsForComparedCommitWithHttpInfo(String xAmzTarget, GetCommentsForComparedCommitInput getCommentsForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getCommentsForComparedCommitValidateBeforeCall(xAmzTarget, getCommentsForComparedCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<GetCommentsForComparedCommitOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about comments made on the comparison between two commits.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getCommentsForComparedCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsForComparedCommitAsync(String xAmzTarget, GetCommentsForComparedCommitInput getCommentsForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<GetCommentsForComparedCommitOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentsForComparedCommitValidateBeforeCall(xAmzTarget, getCommentsForComparedCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<GetCommentsForComparedCommitOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommentsForPullRequest
     * @param xAmzTarget  (required)
     * @param getCommentsForPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsForPullRequestCall(String xAmzTarget, GetCommentsForPullRequestInput getCommentsForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCommentsForPullRequestInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetCommentsForPullRequest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentsForPullRequestValidateBeforeCall(String xAmzTarget, GetCommentsForPullRequestInput getCommentsForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getCommentsForPullRequest(Async)");
        }

        // verify the required parameter 'getCommentsForPullRequestInput' is set
        if (getCommentsForPullRequestInput == null) {
            throw new ApiException("Missing the required parameter 'getCommentsForPullRequestInput' when calling getCommentsForPullRequest(Async)");
        }

        return getCommentsForPullRequestCall(xAmzTarget, getCommentsForPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns comments made on a pull request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getCommentsForPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return GetCommentsForPullRequestOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentsForPullRequestOutput getCommentsForPullRequest(String xAmzTarget, GetCommentsForPullRequestInput getCommentsForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<GetCommentsForPullRequestOutput> localVarResp = getCommentsForPullRequestWithHttpInfo(xAmzTarget, getCommentsForPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns comments made on a pull request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getCommentsForPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;GetCommentsForPullRequestOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCommentsForPullRequestOutput> getCommentsForPullRequestWithHttpInfo(String xAmzTarget, GetCommentsForPullRequestInput getCommentsForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getCommentsForPullRequestValidateBeforeCall(xAmzTarget, getCommentsForPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<GetCommentsForPullRequestOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns comments made on a pull request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getCommentsForPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsForPullRequestAsync(String xAmzTarget, GetCommentsForPullRequestInput getCommentsForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<GetCommentsForPullRequestOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentsForPullRequestValidateBeforeCall(xAmzTarget, getCommentsForPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<GetCommentsForPullRequestOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommit
     * @param xAmzTarget  (required)
     * @param getCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitIdDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommitCall(String xAmzTarget, GetCommitInput getCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCommitInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetCommit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommitValidateBeforeCall(String xAmzTarget, GetCommitInput getCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getCommit(Async)");
        }

        // verify the required parameter 'getCommitInput' is set
        if (getCommitInput == null) {
            throw new ApiException("Missing the required parameter 'getCommitInput' when calling getCommit(Async)");
        }

        return getCommitCall(xAmzTarget, getCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about a commit, including commit message and committer information.
     * @param xAmzTarget  (required)
     * @param getCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCommitOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitIdDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetCommitOutput getCommit(String xAmzTarget, GetCommitInput getCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCommitOutput> localVarResp = getCommitWithHttpInfo(xAmzTarget, getCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about a commit, including commit message and committer information.
     * @param xAmzTarget  (required)
     * @param getCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCommitOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitIdDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCommitOutput> getCommitWithHttpInfo(String xAmzTarget, GetCommitInput getCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCommitValidateBeforeCall(xAmzTarget, getCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCommitOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about a commit, including commit message and committer information.
     * @param xAmzTarget  (required)
     * @param getCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitIdDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommitAsync(String xAmzTarget, GetCommitInput getCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCommitOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommitValidateBeforeCall(xAmzTarget, getCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCommitOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDifferences
     * @param xAmzTarget  (required)
     * @param getDifferencesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDifferencesCall(String xAmzTarget, GetDifferencesInput getDifferencesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDifferencesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetDifferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDifferencesValidateBeforeCall(String xAmzTarget, GetDifferencesInput getDifferencesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getDifferences(Async)");
        }

        // verify the required parameter 'getDifferencesInput' is set
        if (getDifferencesInput == null) {
            throw new ApiException("Missing the required parameter 'getDifferencesInput' when calling getDifferences(Async)");
        }

        return getDifferencesCall(xAmzTarget, getDifferencesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.
     * @param xAmzTarget  (required)
     * @param getDifferencesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return GetDifferencesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetDifferencesOutput getDifferences(String xAmzTarget, GetDifferencesInput getDifferencesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<GetDifferencesOutput> localVarResp = getDifferencesWithHttpInfo(xAmzTarget, getDifferencesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.
     * @param xAmzTarget  (required)
     * @param getDifferencesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;GetDifferencesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDifferencesOutput> getDifferencesWithHttpInfo(String xAmzTarget, GetDifferencesInput getDifferencesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getDifferencesValidateBeforeCall(xAmzTarget, getDifferencesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<GetDifferencesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.
     * @param xAmzTarget  (required)
     * @param getDifferencesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDifferencesAsync(String xAmzTarget, GetDifferencesInput getDifferencesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<GetDifferencesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDifferencesValidateBeforeCall(xAmzTarget, getDifferencesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<GetDifferencesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFile
     * @param xAmzTarget  (required)
     * @param getFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> FileTooLargeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileCall(String xAmzTarget, GetFileInput getFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFileInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(String xAmzTarget, GetFileInput getFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getFile(Async)");
        }

        // verify the required parameter 'getFileInput' is set
        if (getFileInput == null) {
            throw new ApiException("Missing the required parameter 'getFileInput' when calling getFile(Async)");
        }

        return getFileCall(xAmzTarget, getFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the base-64 encoded contents of a specified file and its metadata.
     * @param xAmzTarget  (required)
     * @param getFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFileOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> FileTooLargeException </td><td>  -  </td></tr>
     </table>
     */
    public GetFileOutput getFile(String xAmzTarget, GetFileInput getFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFileOutput> localVarResp = getFileWithHttpInfo(xAmzTarget, getFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the base-64 encoded contents of a specified file and its metadata.
     * @param xAmzTarget  (required)
     * @param getFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFileOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> FileTooLargeException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFileOutput> getFileWithHttpInfo(String xAmzTarget, GetFileInput getFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(xAmzTarget, getFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFileOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the base-64 encoded contents of a specified file and its metadata.
     * @param xAmzTarget  (required)
     * @param getFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FileDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> FileTooLargeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAsync(String xAmzTarget, GetFileInput getFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFileOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(xAmzTarget, getFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFileOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolder
     * @param xAmzTarget  (required)
     * @param getFolderInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FolderDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderCall(String xAmzTarget, GetFolderInput getFolderInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFolderInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetFolder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderValidateBeforeCall(String xAmzTarget, GetFolderInput getFolderInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getFolder(Async)");
        }

        // verify the required parameter 'getFolderInput' is set
        if (getFolderInput == null) {
            throw new ApiException("Missing the required parameter 'getFolderInput' when calling getFolder(Async)");
        }

        return getFolderCall(xAmzTarget, getFolderInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the contents of a specified folder in a repository.
     * @param xAmzTarget  (required)
     * @param getFolderInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFolderOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FolderDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderOutput getFolder(String xAmzTarget, GetFolderInput getFolderInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFolderOutput> localVarResp = getFolderWithHttpInfo(xAmzTarget, getFolderInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the contents of a specified folder in a repository.
     * @param xAmzTarget  (required)
     * @param getFolderInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFolderOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FolderDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFolderOutput> getFolderWithHttpInfo(String xAmzTarget, GetFolderInput getFolderInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFolderValidateBeforeCall(xAmzTarget, getFolderInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFolderOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the contents of a specified folder in a repository.
     * @param xAmzTarget  (required)
     * @param getFolderInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FolderDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderAsync(String xAmzTarget, GetFolderInput getFolderInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFolderOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderValidateBeforeCall(xAmzTarget, getFolderInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFolderOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMergeCommit
     * @param xAmzTarget  (required)
     * @param getMergeCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMergeCommitCall(String xAmzTarget, GetMergeCommitInput getMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getMergeCommitInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetMergeCommit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMergeCommitValidateBeforeCall(String xAmzTarget, GetMergeCommitInput getMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getMergeCommit(Async)");
        }

        // verify the required parameter 'getMergeCommitInput' is set
        if (getMergeCommitInput == null) {
            throw new ApiException("Missing the required parameter 'getMergeCommitInput' when calling getMergeCommit(Async)");
        }

        return getMergeCommitCall(xAmzTarget, getMergeCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about a specified merge commit.
     * @param xAmzTarget  (required)
     * @param getMergeCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetMergeCommitOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetMergeCommitOutput getMergeCommit(String xAmzTarget, GetMergeCommitInput getMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetMergeCommitOutput> localVarResp = getMergeCommitWithHttpInfo(xAmzTarget, getMergeCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about a specified merge commit.
     * @param xAmzTarget  (required)
     * @param getMergeCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetMergeCommitOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMergeCommitOutput> getMergeCommitWithHttpInfo(String xAmzTarget, GetMergeCommitInput getMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getMergeCommitValidateBeforeCall(xAmzTarget, getMergeCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetMergeCommitOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about a specified merge commit.
     * @param xAmzTarget  (required)
     * @param getMergeCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMergeCommitAsync(String xAmzTarget, GetMergeCommitInput getMergeCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetMergeCommitOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMergeCommitValidateBeforeCall(xAmzTarget, getMergeCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetMergeCommitOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMergeConflicts
     * @param xAmzTarget  (required)
     * @param getMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxConflictFiles Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMaxConflictFilesException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDestinationCommitSpecifierException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSourceCommitSpecifierException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMergeConflictsCall(String xAmzTarget, GetMergeConflictsInput getMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxConflictFiles, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getMergeConflictsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetMergeConflicts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxConflictFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxConflictFiles", maxConflictFiles));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMergeConflictsValidateBeforeCall(String xAmzTarget, GetMergeConflictsInput getMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxConflictFiles, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getMergeConflicts(Async)");
        }

        // verify the required parameter 'getMergeConflictsInput' is set
        if (getMergeConflictsInput == null) {
            throw new ApiException("Missing the required parameter 'getMergeConflictsInput' when calling getMergeConflicts(Async)");
        }

        return getMergeConflictsCall(xAmzTarget, getMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxConflictFiles, nextToken, _callback);

    }

    /**
     * 
     * Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.
     * @param xAmzTarget  (required)
     * @param getMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxConflictFiles Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return GetMergeConflictsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMaxConflictFilesException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDestinationCommitSpecifierException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSourceCommitSpecifierException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetMergeConflictsOutput getMergeConflicts(String xAmzTarget, GetMergeConflictsInput getMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxConflictFiles, String nextToken) throws ApiException {
        ApiResponse<GetMergeConflictsOutput> localVarResp = getMergeConflictsWithHttpInfo(xAmzTarget, getMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxConflictFiles, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.
     * @param xAmzTarget  (required)
     * @param getMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxConflictFiles Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;GetMergeConflictsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMaxConflictFilesException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDestinationCommitSpecifierException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSourceCommitSpecifierException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMergeConflictsOutput> getMergeConflictsWithHttpInfo(String xAmzTarget, GetMergeConflictsInput getMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxConflictFiles, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getMergeConflictsValidateBeforeCall(xAmzTarget, getMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxConflictFiles, nextToken, null);
        Type localVarReturnType = new TypeToken<GetMergeConflictsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.
     * @param xAmzTarget  (required)
     * @param getMergeConflictsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxConflictFiles Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MergeOptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMergeOptionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMaxConflictFilesException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDestinationCommitSpecifierException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSourceCommitSpecifierException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMergeConflictsAsync(String xAmzTarget, GetMergeConflictsInput getMergeConflictsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxConflictFiles, String nextToken, final ApiCallback<GetMergeConflictsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMergeConflictsValidateBeforeCall(xAmzTarget, getMergeConflictsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxConflictFiles, nextToken, _callback);
        Type localVarReturnType = new TypeToken<GetMergeConflictsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMergeOptions
     * @param xAmzTarget  (required)
     * @param getMergeOptionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMergeOptionsCall(String xAmzTarget, GetMergeOptionsInput getMergeOptionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getMergeOptionsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetMergeOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMergeOptionsValidateBeforeCall(String xAmzTarget, GetMergeOptionsInput getMergeOptionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getMergeOptions(Async)");
        }

        // verify the required parameter 'getMergeOptionsInput' is set
        if (getMergeOptionsInput == null) {
            throw new ApiException("Missing the required parameter 'getMergeOptionsInput' when calling getMergeOptions(Async)");
        }

        return getMergeOptionsCall(xAmzTarget, getMergeOptionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about the merge options available for merging two specified branches. For details about why a merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.
     * @param xAmzTarget  (required)
     * @param getMergeOptionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetMergeOptionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetMergeOptionsOutput getMergeOptions(String xAmzTarget, GetMergeOptionsInput getMergeOptionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetMergeOptionsOutput> localVarResp = getMergeOptionsWithHttpInfo(xAmzTarget, getMergeOptionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the merge options available for merging two specified branches. For details about why a merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.
     * @param xAmzTarget  (required)
     * @param getMergeOptionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetMergeOptionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMergeOptionsOutput> getMergeOptionsWithHttpInfo(String xAmzTarget, GetMergeOptionsInput getMergeOptionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getMergeOptionsValidateBeforeCall(xAmzTarget, getMergeOptionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetMergeOptionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the merge options available for merging two specified branches. For details about why a merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.
     * @param xAmzTarget  (required)
     * @param getMergeOptionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMergeOptionsAsync(String xAmzTarget, GetMergeOptionsInput getMergeOptionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetMergeOptionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMergeOptionsValidateBeforeCall(xAmzTarget, getMergeOptionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetMergeOptionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPullRequest
     * @param xAmzTarget  (required)
     * @param getPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPullRequestCall(String xAmzTarget, GetPullRequestInput getPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPullRequestInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetPullRequest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPullRequestValidateBeforeCall(String xAmzTarget, GetPullRequestInput getPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getPullRequest(Async)");
        }

        // verify the required parameter 'getPullRequestInput' is set
        if (getPullRequestInput == null) {
            throw new ApiException("Missing the required parameter 'getPullRequestInput' when calling getPullRequest(Async)");
        }

        return getPullRequestCall(xAmzTarget, getPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about a pull request in a specified repository.
     * @param xAmzTarget  (required)
     * @param getPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPullRequestOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetPullRequestOutput getPullRequest(String xAmzTarget, GetPullRequestInput getPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPullRequestOutput> localVarResp = getPullRequestWithHttpInfo(xAmzTarget, getPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a pull request in a specified repository.
     * @param xAmzTarget  (required)
     * @param getPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPullRequestOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPullRequestOutput> getPullRequestWithHttpInfo(String xAmzTarget, GetPullRequestInput getPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPullRequestValidateBeforeCall(xAmzTarget, getPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPullRequestOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a pull request in a specified repository.
     * @param xAmzTarget  (required)
     * @param getPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPullRequestAsync(String xAmzTarget, GetPullRequestInput getPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPullRequestOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPullRequestValidateBeforeCall(xAmzTarget, getPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPullRequestOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPullRequestApprovalStates
     * @param xAmzTarget  (required)
     * @param getPullRequestApprovalStatesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPullRequestApprovalStatesCall(String xAmzTarget, GetPullRequestApprovalStatesInput getPullRequestApprovalStatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPullRequestApprovalStatesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetPullRequestApprovalStates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPullRequestApprovalStatesValidateBeforeCall(String xAmzTarget, GetPullRequestApprovalStatesInput getPullRequestApprovalStatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getPullRequestApprovalStates(Async)");
        }

        // verify the required parameter 'getPullRequestApprovalStatesInput' is set
        if (getPullRequestApprovalStatesInput == null) {
            throw new ApiException("Missing the required parameter 'getPullRequestApprovalStatesInput' when calling getPullRequestApprovalStates(Async)");
        }

        return getPullRequestApprovalStatesCall(xAmzTarget, getPullRequestApprovalStatesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more approval rules applied to them.
     * @param xAmzTarget  (required)
     * @param getPullRequestApprovalStatesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPullRequestApprovalStatesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetPullRequestApprovalStatesOutput getPullRequestApprovalStates(String xAmzTarget, GetPullRequestApprovalStatesInput getPullRequestApprovalStatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPullRequestApprovalStatesOutput> localVarResp = getPullRequestApprovalStatesWithHttpInfo(xAmzTarget, getPullRequestApprovalStatesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more approval rules applied to them.
     * @param xAmzTarget  (required)
     * @param getPullRequestApprovalStatesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPullRequestApprovalStatesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPullRequestApprovalStatesOutput> getPullRequestApprovalStatesWithHttpInfo(String xAmzTarget, GetPullRequestApprovalStatesInput getPullRequestApprovalStatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPullRequestApprovalStatesValidateBeforeCall(xAmzTarget, getPullRequestApprovalStatesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPullRequestApprovalStatesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more approval rules applied to them.
     * @param xAmzTarget  (required)
     * @param getPullRequestApprovalStatesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPullRequestApprovalStatesAsync(String xAmzTarget, GetPullRequestApprovalStatesInput getPullRequestApprovalStatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPullRequestApprovalStatesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPullRequestApprovalStatesValidateBeforeCall(xAmzTarget, getPullRequestApprovalStatesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPullRequestApprovalStatesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPullRequestOverrideState
     * @param xAmzTarget  (required)
     * @param getPullRequestOverrideStateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPullRequestOverrideStateCall(String xAmzTarget, GetPullRequestOverrideStateInput getPullRequestOverrideStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPullRequestOverrideStateInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetPullRequestOverrideState";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPullRequestOverrideStateValidateBeforeCall(String xAmzTarget, GetPullRequestOverrideStateInput getPullRequestOverrideStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getPullRequestOverrideState(Async)");
        }

        // verify the required parameter 'getPullRequestOverrideStateInput' is set
        if (getPullRequestOverrideStateInput == null) {
            throw new ApiException("Missing the required parameter 'getPullRequestOverrideStateInput' when calling getPullRequestOverrideState(Async)");
        }

        return getPullRequestOverrideStateCall(xAmzTarget, getPullRequestOverrideStateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about whether approval rules have been set aside (overridden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.
     * @param xAmzTarget  (required)
     * @param getPullRequestOverrideStateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPullRequestOverrideStateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetPullRequestOverrideStateOutput getPullRequestOverrideState(String xAmzTarget, GetPullRequestOverrideStateInput getPullRequestOverrideStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPullRequestOverrideStateOutput> localVarResp = getPullRequestOverrideStateWithHttpInfo(xAmzTarget, getPullRequestOverrideStateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about whether approval rules have been set aside (overridden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.
     * @param xAmzTarget  (required)
     * @param getPullRequestOverrideStateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPullRequestOverrideStateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPullRequestOverrideStateOutput> getPullRequestOverrideStateWithHttpInfo(String xAmzTarget, GetPullRequestOverrideStateInput getPullRequestOverrideStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPullRequestOverrideStateValidateBeforeCall(xAmzTarget, getPullRequestOverrideStateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPullRequestOverrideStateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about whether approval rules have been set aside (overridden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.
     * @param xAmzTarget  (required)
     * @param getPullRequestOverrideStateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPullRequestOverrideStateAsync(String xAmzTarget, GetPullRequestOverrideStateInput getPullRequestOverrideStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPullRequestOverrideStateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPullRequestOverrideStateValidateBeforeCall(xAmzTarget, getPullRequestOverrideStateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPullRequestOverrideStateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepository
     * @param xAmzTarget  (required)
     * @param getRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryCall(String xAmzTarget, GetRepositoryInput getRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRepositoryInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetRepository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryValidateBeforeCall(String xAmzTarget, GetRepositoryInput getRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRepository(Async)");
        }

        // verify the required parameter 'getRepositoryInput' is set
        if (getRepositoryInput == null) {
            throw new ApiException("Missing the required parameter 'getRepositoryInput' when calling getRepository(Async)");
        }

        return getRepositoryCall(xAmzTarget, getRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about a repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRepositoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetRepositoryOutput getRepository(String xAmzTarget, GetRepositoryInput getRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRepositoryOutput> localVarResp = getRepositoryWithHttpInfo(xAmzTarget, getRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about a repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRepositoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRepositoryOutput> getRepositoryWithHttpInfo(String xAmzTarget, GetRepositoryInput getRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryValidateBeforeCall(xAmzTarget, getRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRepositoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about a repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryAsync(String xAmzTarget, GetRepositoryInput getRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRepositoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryValidateBeforeCall(xAmzTarget, getRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRepositoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryTriggers
     * @param xAmzTarget  (required)
     * @param getRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryTriggersCall(String xAmzTarget, GetRepositoryTriggersInput getRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRepositoryTriggersInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.GetRepositoryTriggers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryTriggersValidateBeforeCall(String xAmzTarget, GetRepositoryTriggersInput getRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRepositoryTriggers(Async)");
        }

        // verify the required parameter 'getRepositoryTriggersInput' is set
        if (getRepositoryTriggersInput == null) {
            throw new ApiException("Missing the required parameter 'getRepositoryTriggersInput' when calling getRepositoryTriggers(Async)");
        }

        return getRepositoryTriggersCall(xAmzTarget, getRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about triggers configured for a repository.
     * @param xAmzTarget  (required)
     * @param getRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRepositoryTriggersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public GetRepositoryTriggersOutput getRepositoryTriggers(String xAmzTarget, GetRepositoryTriggersInput getRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRepositoryTriggersOutput> localVarResp = getRepositoryTriggersWithHttpInfo(xAmzTarget, getRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about triggers configured for a repository.
     * @param xAmzTarget  (required)
     * @param getRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRepositoryTriggersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRepositoryTriggersOutput> getRepositoryTriggersWithHttpInfo(String xAmzTarget, GetRepositoryTriggersInput getRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryTriggersValidateBeforeCall(xAmzTarget, getRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRepositoryTriggersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about triggers configured for a repository.
     * @param xAmzTarget  (required)
     * @param getRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryTriggersAsync(String xAmzTarget, GetRepositoryTriggersInput getRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRepositoryTriggersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryTriggersValidateBeforeCall(xAmzTarget, getRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRepositoryTriggersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listApprovalRuleTemplates
     * @param xAmzTarget  (required)
     * @param listApprovalRuleTemplatesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApprovalRuleTemplatesCall(String xAmzTarget, ListApprovalRuleTemplatesInput listApprovalRuleTemplatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listApprovalRuleTemplatesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.ListApprovalRuleTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listApprovalRuleTemplatesValidateBeforeCall(String xAmzTarget, ListApprovalRuleTemplatesInput listApprovalRuleTemplatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listApprovalRuleTemplates(Async)");
        }

        // verify the required parameter 'listApprovalRuleTemplatesInput' is set
        if (listApprovalRuleTemplatesInput == null) {
            throw new ApiException("Missing the required parameter 'listApprovalRuleTemplatesInput' when calling listApprovalRuleTemplates(Async)");
        }

        return listApprovalRuleTemplatesCall(xAmzTarget, listApprovalRuleTemplatesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists all approval rule templates in the specified AWS Region in your AWS account. If an AWS Region is not specified, the AWS Region where you are signed in is used.
     * @param xAmzTarget  (required)
     * @param listApprovalRuleTemplatesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListApprovalRuleTemplatesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListApprovalRuleTemplatesOutput listApprovalRuleTemplates(String xAmzTarget, ListApprovalRuleTemplatesInput listApprovalRuleTemplatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListApprovalRuleTemplatesOutput> localVarResp = listApprovalRuleTemplatesWithHttpInfo(xAmzTarget, listApprovalRuleTemplatesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all approval rule templates in the specified AWS Region in your AWS account. If an AWS Region is not specified, the AWS Region where you are signed in is used.
     * @param xAmzTarget  (required)
     * @param listApprovalRuleTemplatesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListApprovalRuleTemplatesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApprovalRuleTemplatesOutput> listApprovalRuleTemplatesWithHttpInfo(String xAmzTarget, ListApprovalRuleTemplatesInput listApprovalRuleTemplatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listApprovalRuleTemplatesValidateBeforeCall(xAmzTarget, listApprovalRuleTemplatesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListApprovalRuleTemplatesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all approval rule templates in the specified AWS Region in your AWS account. If an AWS Region is not specified, the AWS Region where you are signed in is used.
     * @param xAmzTarget  (required)
     * @param listApprovalRuleTemplatesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApprovalRuleTemplatesAsync(String xAmzTarget, ListApprovalRuleTemplatesInput listApprovalRuleTemplatesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListApprovalRuleTemplatesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApprovalRuleTemplatesValidateBeforeCall(xAmzTarget, listApprovalRuleTemplatesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListApprovalRuleTemplatesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAssociatedApprovalRuleTemplatesForRepository
     * @param xAmzTarget  (required)
     * @param listAssociatedApprovalRuleTemplatesForRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssociatedApprovalRuleTemplatesForRepositoryCall(String xAmzTarget, ListAssociatedApprovalRuleTemplatesForRepositoryInput listAssociatedApprovalRuleTemplatesForRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAssociatedApprovalRuleTemplatesForRepositoryInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssociatedApprovalRuleTemplatesForRepositoryValidateBeforeCall(String xAmzTarget, ListAssociatedApprovalRuleTemplatesForRepositoryInput listAssociatedApprovalRuleTemplatesForRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listAssociatedApprovalRuleTemplatesForRepository(Async)");
        }

        // verify the required parameter 'listAssociatedApprovalRuleTemplatesForRepositoryInput' is set
        if (listAssociatedApprovalRuleTemplatesForRepositoryInput == null) {
            throw new ApiException("Missing the required parameter 'listAssociatedApprovalRuleTemplatesForRepositoryInput' when calling listAssociatedApprovalRuleTemplatesForRepository(Async)");
        }

        return listAssociatedApprovalRuleTemplatesForRepositoryCall(xAmzTarget, listAssociatedApprovalRuleTemplatesForRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists all approval rule templates that are associated with a specified repository.
     * @param xAmzTarget  (required)
     * @param listAssociatedApprovalRuleTemplatesForRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListAssociatedApprovalRuleTemplatesForRepositoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ListAssociatedApprovalRuleTemplatesForRepositoryOutput listAssociatedApprovalRuleTemplatesForRepository(String xAmzTarget, ListAssociatedApprovalRuleTemplatesForRepositoryInput listAssociatedApprovalRuleTemplatesForRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListAssociatedApprovalRuleTemplatesForRepositoryOutput> localVarResp = listAssociatedApprovalRuleTemplatesForRepositoryWithHttpInfo(xAmzTarget, listAssociatedApprovalRuleTemplatesForRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all approval rule templates that are associated with a specified repository.
     * @param xAmzTarget  (required)
     * @param listAssociatedApprovalRuleTemplatesForRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListAssociatedApprovalRuleTemplatesForRepositoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAssociatedApprovalRuleTemplatesForRepositoryOutput> listAssociatedApprovalRuleTemplatesForRepositoryWithHttpInfo(String xAmzTarget, ListAssociatedApprovalRuleTemplatesForRepositoryInput listAssociatedApprovalRuleTemplatesForRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listAssociatedApprovalRuleTemplatesForRepositoryValidateBeforeCall(xAmzTarget, listAssociatedApprovalRuleTemplatesForRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListAssociatedApprovalRuleTemplatesForRepositoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all approval rule templates that are associated with a specified repository.
     * @param xAmzTarget  (required)
     * @param listAssociatedApprovalRuleTemplatesForRepositoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssociatedApprovalRuleTemplatesForRepositoryAsync(String xAmzTarget, ListAssociatedApprovalRuleTemplatesForRepositoryInput listAssociatedApprovalRuleTemplatesForRepositoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListAssociatedApprovalRuleTemplatesForRepositoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssociatedApprovalRuleTemplatesForRepositoryValidateBeforeCall(xAmzTarget, listAssociatedApprovalRuleTemplatesForRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListAssociatedApprovalRuleTemplatesForRepositoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBranches
     * @param xAmzTarget  (required)
     * @param listBranchesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBranchesCall(String xAmzTarget, ListBranchesInput listBranchesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listBranchesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.ListBranches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBranchesValidateBeforeCall(String xAmzTarget, ListBranchesInput listBranchesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listBranches(Async)");
        }

        // verify the required parameter 'listBranchesInput' is set
        if (listBranchesInput == null) {
            throw new ApiException("Missing the required parameter 'listBranchesInput' when calling listBranches(Async)");
        }

        return listBranchesCall(xAmzTarget, listBranchesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * Gets information about one or more branches in a repository.
     * @param xAmzTarget  (required)
     * @param listBranchesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ListBranchesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListBranchesOutput listBranches(String xAmzTarget, ListBranchesInput listBranchesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListBranchesOutput> localVarResp = listBranchesWithHttpInfo(xAmzTarget, listBranchesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about one or more branches in a repository.
     * @param xAmzTarget  (required)
     * @param listBranchesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListBranchesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBranchesOutput> listBranchesWithHttpInfo(String xAmzTarget, ListBranchesInput listBranchesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listBranchesValidateBeforeCall(xAmzTarget, listBranchesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListBranchesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about one or more branches in a repository.
     * @param xAmzTarget  (required)
     * @param listBranchesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBranchesAsync(String xAmzTarget, ListBranchesInput listBranchesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListBranchesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBranchesValidateBeforeCall(xAmzTarget, listBranchesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListBranchesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPullRequests
     * @param xAmzTarget  (required)
     * @param listPullRequestsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidPullRequestStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAuthorArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPullRequestsCall(String xAmzTarget, ListPullRequestsInput listPullRequestsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPullRequestsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.ListPullRequests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPullRequestsValidateBeforeCall(String xAmzTarget, ListPullRequestsInput listPullRequestsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listPullRequests(Async)");
        }

        // verify the required parameter 'listPullRequestsInput' is set
        if (listPullRequestsInput == null) {
            throw new ApiException("Missing the required parameter 'listPullRequestsInput' when calling listPullRequests(Async)");
        }

        return listPullRequestsCall(xAmzTarget, listPullRequestsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.
     * @param xAmzTarget  (required)
     * @param listPullRequestsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListPullRequestsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidPullRequestStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAuthorArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ListPullRequestsOutput listPullRequests(String xAmzTarget, ListPullRequestsInput listPullRequestsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListPullRequestsOutput> localVarResp = listPullRequestsWithHttpInfo(xAmzTarget, listPullRequestsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.
     * @param xAmzTarget  (required)
     * @param listPullRequestsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListPullRequestsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidPullRequestStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAuthorArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPullRequestsOutput> listPullRequestsWithHttpInfo(String xAmzTarget, ListPullRequestsInput listPullRequestsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listPullRequestsValidateBeforeCall(xAmzTarget, listPullRequestsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPullRequestsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.
     * @param xAmzTarget  (required)
     * @param listPullRequestsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidPullRequestStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAuthorArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPullRequestsAsync(String xAmzTarget, ListPullRequestsInput listPullRequestsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListPullRequestsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPullRequestsValidateBeforeCall(xAmzTarget, listPullRequestsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPullRequestsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRepositories
     * @param xAmzTarget  (required)
     * @param listRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidSortByException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOrderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRepositoriesCall(String xAmzTarget, ListRepositoriesInput listRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRepositoriesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.ListRepositories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRepositoriesValidateBeforeCall(String xAmzTarget, ListRepositoriesInput listRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listRepositories(Async)");
        }

        // verify the required parameter 'listRepositoriesInput' is set
        if (listRepositoriesInput == null) {
            throw new ApiException("Missing the required parameter 'listRepositoriesInput' when calling listRepositories(Async)");
        }

        return listRepositoriesCall(xAmzTarget, listRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * Gets information about one or more repositories.
     * @param xAmzTarget  (required)
     * @param listRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ListRepositoriesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidSortByException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOrderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListRepositoriesOutput listRepositories(String xAmzTarget, ListRepositoriesInput listRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListRepositoriesOutput> localVarResp = listRepositoriesWithHttpInfo(xAmzTarget, listRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about one or more repositories.
     * @param xAmzTarget  (required)
     * @param listRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListRepositoriesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidSortByException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOrderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRepositoriesOutput> listRepositoriesWithHttpInfo(String xAmzTarget, ListRepositoriesInput listRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listRepositoriesValidateBeforeCall(xAmzTarget, listRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListRepositoriesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about one or more repositories.
     * @param xAmzTarget  (required)
     * @param listRepositoriesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidSortByException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOrderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRepositoriesAsync(String xAmzTarget, ListRepositoriesInput listRepositoriesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListRepositoriesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRepositoriesValidateBeforeCall(xAmzTarget, listRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListRepositoriesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRepositoriesForApprovalRuleTemplate
     * @param xAmzTarget  (required)
     * @param listRepositoriesForApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRepositoriesForApprovalRuleTemplateCall(String xAmzTarget, ListRepositoriesForApprovalRuleTemplateInput listRepositoriesForApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRepositoriesForApprovalRuleTemplateInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRepositoriesForApprovalRuleTemplateValidateBeforeCall(String xAmzTarget, ListRepositoriesForApprovalRuleTemplateInput listRepositoriesForApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listRepositoriesForApprovalRuleTemplate(Async)");
        }

        // verify the required parameter 'listRepositoriesForApprovalRuleTemplateInput' is set
        if (listRepositoriesForApprovalRuleTemplateInput == null) {
            throw new ApiException("Missing the required parameter 'listRepositoriesForApprovalRuleTemplateInput' when calling listRepositoriesForApprovalRuleTemplate(Async)");
        }

        return listRepositoriesForApprovalRuleTemplateCall(xAmzTarget, listRepositoriesForApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists all repositories associated with the specified approval rule template.
     * @param xAmzTarget  (required)
     * @param listRepositoriesForApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListRepositoriesForApprovalRuleTemplateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ListRepositoriesForApprovalRuleTemplateOutput listRepositoriesForApprovalRuleTemplate(String xAmzTarget, ListRepositoriesForApprovalRuleTemplateInput listRepositoriesForApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListRepositoriesForApprovalRuleTemplateOutput> localVarResp = listRepositoriesForApprovalRuleTemplateWithHttpInfo(xAmzTarget, listRepositoriesForApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all repositories associated with the specified approval rule template.
     * @param xAmzTarget  (required)
     * @param listRepositoriesForApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListRepositoriesForApprovalRuleTemplateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRepositoriesForApprovalRuleTemplateOutput> listRepositoriesForApprovalRuleTemplateWithHttpInfo(String xAmzTarget, ListRepositoriesForApprovalRuleTemplateInput listRepositoriesForApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listRepositoriesForApprovalRuleTemplateValidateBeforeCall(xAmzTarget, listRepositoriesForApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListRepositoriesForApprovalRuleTemplateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all repositories associated with the specified approval rule template.
     * @param xAmzTarget  (required)
     * @param listRepositoriesForApprovalRuleTemplateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidContinuationTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRepositoriesForApprovalRuleTemplateAsync(String xAmzTarget, ListRepositoriesForApprovalRuleTemplateInput listRepositoriesForApprovalRuleTemplateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListRepositoriesForApprovalRuleTemplateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRepositoriesForApprovalRuleTemplateValidateBeforeCall(xAmzTarget, listRepositoriesForApprovalRuleTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListRepositoriesForApprovalRuleTemplateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceInput' is set
        if (listTagsForResourceInput == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceInput' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\&quot;&gt;CodeCommit Resources and Operations&lt;/a&gt; in the&lt;i&gt; AWS CodeCommit User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceOutput listTagsForResource(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceOutput> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\&quot;&gt;CodeCommit Resources and Operations&lt;/a&gt; in the&lt;i&gt; AWS CodeCommit User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceOutput> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\&quot;&gt;CodeCommit Resources and Operations&lt;/a&gt; in the&lt;i&gt; AWS CodeCommit User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergeBranchesByFastForward
     * @param xAmzTarget  (required)
     * @param mergeBranchesByFastForwardInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeBranchesByFastForwardCall(String xAmzTarget, MergeBranchesByFastForwardInput mergeBranchesByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergeBranchesByFastForwardInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByFastForward";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeBranchesByFastForwardValidateBeforeCall(String xAmzTarget, MergeBranchesByFastForwardInput mergeBranchesByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling mergeBranchesByFastForward(Async)");
        }

        // verify the required parameter 'mergeBranchesByFastForwardInput' is set
        if (mergeBranchesByFastForwardInput == null) {
            throw new ApiException("Missing the required parameter 'mergeBranchesByFastForwardInput' when calling mergeBranchesByFastForward(Async)");
        }

        return mergeBranchesByFastForwardCall(xAmzTarget, mergeBranchesByFastForwardInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Merges two branches using the fast-forward merge strategy.
     * @param xAmzTarget  (required)
     * @param mergeBranchesByFastForwardInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return MergeBranchesByFastForwardOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public MergeBranchesByFastForwardOutput mergeBranchesByFastForward(String xAmzTarget, MergeBranchesByFastForwardInput mergeBranchesByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<MergeBranchesByFastForwardOutput> localVarResp = mergeBranchesByFastForwardWithHttpInfo(xAmzTarget, mergeBranchesByFastForwardInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Merges two branches using the fast-forward merge strategy.
     * @param xAmzTarget  (required)
     * @param mergeBranchesByFastForwardInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;MergeBranchesByFastForwardOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeBranchesByFastForwardOutput> mergeBranchesByFastForwardWithHttpInfo(String xAmzTarget, MergeBranchesByFastForwardInput mergeBranchesByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = mergeBranchesByFastForwardValidateBeforeCall(xAmzTarget, mergeBranchesByFastForwardInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<MergeBranchesByFastForwardOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Merges two branches using the fast-forward merge strategy.
     * @param xAmzTarget  (required)
     * @param mergeBranchesByFastForwardInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeBranchesByFastForwardAsync(String xAmzTarget, MergeBranchesByFastForwardInput mergeBranchesByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<MergeBranchesByFastForwardOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeBranchesByFastForwardValidateBeforeCall(xAmzTarget, mergeBranchesByFastForwardInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<MergeBranchesByFastForwardOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergeBranchesBySquash
     * @param xAmzTarget  (required)
     * @param mergeBranchesBySquashInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeBranchesBySquashCall(String xAmzTarget, MergeBranchesBySquashInput mergeBranchesBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergeBranchesBySquashInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.MergeBranchesBySquash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeBranchesBySquashValidateBeforeCall(String xAmzTarget, MergeBranchesBySquashInput mergeBranchesBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling mergeBranchesBySquash(Async)");
        }

        // verify the required parameter 'mergeBranchesBySquashInput' is set
        if (mergeBranchesBySquashInput == null) {
            throw new ApiException("Missing the required parameter 'mergeBranchesBySquashInput' when calling mergeBranchesBySquash(Async)");
        }

        return mergeBranchesBySquashCall(xAmzTarget, mergeBranchesBySquashInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Merges two branches using the squash merge strategy.
     * @param xAmzTarget  (required)
     * @param mergeBranchesBySquashInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return MergeBranchesBySquashOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public MergeBranchesBySquashOutput mergeBranchesBySquash(String xAmzTarget, MergeBranchesBySquashInput mergeBranchesBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<MergeBranchesBySquashOutput> localVarResp = mergeBranchesBySquashWithHttpInfo(xAmzTarget, mergeBranchesBySquashInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Merges two branches using the squash merge strategy.
     * @param xAmzTarget  (required)
     * @param mergeBranchesBySquashInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;MergeBranchesBySquashOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeBranchesBySquashOutput> mergeBranchesBySquashWithHttpInfo(String xAmzTarget, MergeBranchesBySquashInput mergeBranchesBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = mergeBranchesBySquashValidateBeforeCall(xAmzTarget, mergeBranchesBySquashInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<MergeBranchesBySquashOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Merges two branches using the squash merge strategy.
     * @param xAmzTarget  (required)
     * @param mergeBranchesBySquashInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeBranchesBySquashAsync(String xAmzTarget, MergeBranchesBySquashInput mergeBranchesBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<MergeBranchesBySquashOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeBranchesBySquashValidateBeforeCall(xAmzTarget, mergeBranchesBySquashInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<MergeBranchesBySquashOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergeBranchesByThreeWay
     * @param xAmzTarget  (required)
     * @param mergeBranchesByThreeWayInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeBranchesByThreeWayCall(String xAmzTarget, MergeBranchesByThreeWayInput mergeBranchesByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergeBranchesByThreeWayInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByThreeWay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeBranchesByThreeWayValidateBeforeCall(String xAmzTarget, MergeBranchesByThreeWayInput mergeBranchesByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling mergeBranchesByThreeWay(Async)");
        }

        // verify the required parameter 'mergeBranchesByThreeWayInput' is set
        if (mergeBranchesByThreeWayInput == null) {
            throw new ApiException("Missing the required parameter 'mergeBranchesByThreeWayInput' when calling mergeBranchesByThreeWay(Async)");
        }

        return mergeBranchesByThreeWayCall(xAmzTarget, mergeBranchesByThreeWayInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Merges two specified branches using the three-way merge strategy.
     * @param xAmzTarget  (required)
     * @param mergeBranchesByThreeWayInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return MergeBranchesByThreeWayOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public MergeBranchesByThreeWayOutput mergeBranchesByThreeWay(String xAmzTarget, MergeBranchesByThreeWayInput mergeBranchesByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<MergeBranchesByThreeWayOutput> localVarResp = mergeBranchesByThreeWayWithHttpInfo(xAmzTarget, mergeBranchesByThreeWayInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Merges two specified branches using the three-way merge strategy.
     * @param xAmzTarget  (required)
     * @param mergeBranchesByThreeWayInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;MergeBranchesByThreeWayOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeBranchesByThreeWayOutput> mergeBranchesByThreeWayWithHttpInfo(String xAmzTarget, MergeBranchesByThreeWayInput mergeBranchesByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = mergeBranchesByThreeWayValidateBeforeCall(xAmzTarget, mergeBranchesByThreeWayInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<MergeBranchesByThreeWayOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Merges two specified branches using the three-way merge strategy.
     * @param xAmzTarget  (required)
     * @param mergeBranchesByThreeWayInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommitRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCommitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTargetBranchException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> FileModeRequiredException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeBranchesByThreeWayAsync(String xAmzTarget, MergeBranchesByThreeWayInput mergeBranchesByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<MergeBranchesByThreeWayOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeBranchesByThreeWayValidateBeforeCall(xAmzTarget, mergeBranchesByThreeWayInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<MergeBranchesByThreeWayOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergePullRequestByFastForward
     * @param xAmzTarget  (required)
     * @param mergePullRequestByFastForwardInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReferenceDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePullRequestByFastForwardCall(String xAmzTarget, MergePullRequestByFastForwardInput mergePullRequestByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergePullRequestByFastForwardInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByFastForward";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergePullRequestByFastForwardValidateBeforeCall(String xAmzTarget, MergePullRequestByFastForwardInput mergePullRequestByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling mergePullRequestByFastForward(Async)");
        }

        // verify the required parameter 'mergePullRequestByFastForwardInput' is set
        if (mergePullRequestByFastForwardInput == null) {
            throw new ApiException("Missing the required parameter 'mergePullRequestByFastForwardInput' when calling mergePullRequestByFastForward(Async)");
        }

        return mergePullRequestByFastForwardCall(xAmzTarget, mergePullRequestByFastForwardInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.
     * @param xAmzTarget  (required)
     * @param mergePullRequestByFastForwardInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return MergePullRequestByFastForwardOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReferenceDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public MergePullRequestByFastForwardOutput mergePullRequestByFastForward(String xAmzTarget, MergePullRequestByFastForwardInput mergePullRequestByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<MergePullRequestByFastForwardOutput> localVarResp = mergePullRequestByFastForwardWithHttpInfo(xAmzTarget, mergePullRequestByFastForwardInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.
     * @param xAmzTarget  (required)
     * @param mergePullRequestByFastForwardInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;MergePullRequestByFastForwardOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReferenceDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergePullRequestByFastForwardOutput> mergePullRequestByFastForwardWithHttpInfo(String xAmzTarget, MergePullRequestByFastForwardInput mergePullRequestByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = mergePullRequestByFastForwardValidateBeforeCall(xAmzTarget, mergePullRequestByFastForwardInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<MergePullRequestByFastForwardOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.
     * @param xAmzTarget  (required)
     * @param mergePullRequestByFastForwardInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReferenceDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePullRequestByFastForwardAsync(String xAmzTarget, MergePullRequestByFastForwardInput mergePullRequestByFastForwardInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<MergePullRequestByFastForwardOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergePullRequestByFastForwardValidateBeforeCall(xAmzTarget, mergePullRequestByFastForwardInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<MergePullRequestByFastForwardOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergePullRequestBySquash
     * @param xAmzTarget  (required)
     * @param mergePullRequestBySquashInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePullRequestBySquashCall(String xAmzTarget, MergePullRequestBySquashInput mergePullRequestBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergePullRequestBySquashInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.MergePullRequestBySquash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergePullRequestBySquashValidateBeforeCall(String xAmzTarget, MergePullRequestBySquashInput mergePullRequestBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling mergePullRequestBySquash(Async)");
        }

        // verify the required parameter 'mergePullRequestBySquashInput' is set
        if (mergePullRequestBySquashInput == null) {
            throw new ApiException("Missing the required parameter 'mergePullRequestBySquashInput' when calling mergePullRequestBySquash(Async)");
        }

        return mergePullRequestBySquashCall(xAmzTarget, mergePullRequestBySquashInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.
     * @param xAmzTarget  (required)
     * @param mergePullRequestBySquashInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return MergePullRequestBySquashOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public MergePullRequestBySquashOutput mergePullRequestBySquash(String xAmzTarget, MergePullRequestBySquashInput mergePullRequestBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<MergePullRequestBySquashOutput> localVarResp = mergePullRequestBySquashWithHttpInfo(xAmzTarget, mergePullRequestBySquashInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.
     * @param xAmzTarget  (required)
     * @param mergePullRequestBySquashInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;MergePullRequestBySquashOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergePullRequestBySquashOutput> mergePullRequestBySquashWithHttpInfo(String xAmzTarget, MergePullRequestBySquashInput mergePullRequestBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = mergePullRequestBySquashValidateBeforeCall(xAmzTarget, mergePullRequestBySquashInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<MergePullRequestBySquashOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.
     * @param xAmzTarget  (required)
     * @param mergePullRequestBySquashInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePullRequestBySquashAsync(String xAmzTarget, MergePullRequestBySquashInput mergePullRequestBySquashInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<MergePullRequestBySquashOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergePullRequestBySquashValidateBeforeCall(xAmzTarget, mergePullRequestBySquashInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<MergePullRequestBySquashOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergePullRequestByThreeWay
     * @param xAmzTarget  (required)
     * @param mergePullRequestByThreeWayInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePullRequestByThreeWayCall(String xAmzTarget, MergePullRequestByThreeWayInput mergePullRequestByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergePullRequestByThreeWayInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergePullRequestByThreeWayValidateBeforeCall(String xAmzTarget, MergePullRequestByThreeWayInput mergePullRequestByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling mergePullRequestByThreeWay(Async)");
        }

        // verify the required parameter 'mergePullRequestByThreeWayInput' is set
        if (mergePullRequestByThreeWayInput == null) {
            throw new ApiException("Missing the required parameter 'mergePullRequestByThreeWayInput' when calling mergePullRequestByThreeWay(Async)");
        }

        return mergePullRequestByThreeWayCall(xAmzTarget, mergePullRequestByThreeWayInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.
     * @param xAmzTarget  (required)
     * @param mergePullRequestByThreeWayInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return MergePullRequestByThreeWayOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public MergePullRequestByThreeWayOutput mergePullRequestByThreeWay(String xAmzTarget, MergePullRequestByThreeWayInput mergePullRequestByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<MergePullRequestByThreeWayOutput> localVarResp = mergePullRequestByThreeWayWithHttpInfo(xAmzTarget, mergePullRequestByThreeWayInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.
     * @param xAmzTarget  (required)
     * @param mergePullRequestByThreeWayInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;MergePullRequestByThreeWayOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergePullRequestByThreeWayOutput> mergePullRequestByThreeWayWithHttpInfo(String xAmzTarget, MergePullRequestByThreeWayInput mergePullRequestByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = mergePullRequestByThreeWayValidateBeforeCall(xAmzTarget, mergePullRequestByThreeWayInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<MergePullRequestByThreeWayOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.
     * @param xAmzTarget  (required)
     * @param mergePullRequestByThreeWayInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ManualMergeRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TipOfSourceReferenceIsDifferentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TipsDivergenceExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidConflictDetailLevelException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidConflictResolutionStrategyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidConflictResolutionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ReplacementTypeRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidReplacementTypeException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> MultipleConflictResolutionEntriesException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> ReplacementContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> MaximumConflictResolutionEntriesExceededException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidReplacementContentException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> MaximumFileContentToLoadExceededException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> MaximumItemsToCompareExceededException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> ConcurrentReferenceUpdateException </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> PullRequestApprovalRulesNotSatisfiedException </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePullRequestByThreeWayAsync(String xAmzTarget, MergePullRequestByThreeWayInput mergePullRequestByThreeWayInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<MergePullRequestByThreeWayOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergePullRequestByThreeWayValidateBeforeCall(xAmzTarget, mergePullRequestByThreeWayInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<MergePullRequestByThreeWayOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overridePullRequestApprovalRules
     * @param xAmzTarget  (required)
     * @param overridePullRequestApprovalRulesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOverrideStatusException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OverrideStatusRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OverrideAlreadySetException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overridePullRequestApprovalRulesCall(String xAmzTarget, OverridePullRequestApprovalRulesInput overridePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = overridePullRequestApprovalRulesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.OverridePullRequestApprovalRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overridePullRequestApprovalRulesValidateBeforeCall(String xAmzTarget, OverridePullRequestApprovalRulesInput overridePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling overridePullRequestApprovalRules(Async)");
        }

        // verify the required parameter 'overridePullRequestApprovalRulesInput' is set
        if (overridePullRequestApprovalRulesInput == null) {
            throw new ApiException("Missing the required parameter 'overridePullRequestApprovalRulesInput' when calling overridePullRequestApprovalRules(Async)");
        }

        return overridePullRequestApprovalRulesCall(xAmzTarget, overridePullRequestApprovalRulesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Sets aside (overrides) all approval rule requirements for a specified pull request.
     * @param xAmzTarget  (required)
     * @param overridePullRequestApprovalRulesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOverrideStatusException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OverrideStatusRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OverrideAlreadySetException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public void overridePullRequestApprovalRules(String xAmzTarget, OverridePullRequestApprovalRulesInput overridePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        overridePullRequestApprovalRulesWithHttpInfo(xAmzTarget, overridePullRequestApprovalRulesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Sets aside (overrides) all approval rule requirements for a specified pull request.
     * @param xAmzTarget  (required)
     * @param overridePullRequestApprovalRulesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOverrideStatusException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OverrideStatusRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OverrideAlreadySetException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> overridePullRequestApprovalRulesWithHttpInfo(String xAmzTarget, OverridePullRequestApprovalRulesInput overridePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = overridePullRequestApprovalRulesValidateBeforeCall(xAmzTarget, overridePullRequestApprovalRulesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets aside (overrides) all approval rule requirements for a specified pull request.
     * @param xAmzTarget  (required)
     * @param overridePullRequestApprovalRulesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOverrideStatusException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OverrideStatusRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OverrideAlreadySetException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overridePullRequestApprovalRulesAsync(String xAmzTarget, OverridePullRequestApprovalRulesInput overridePullRequestApprovalRulesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = overridePullRequestApprovalRulesValidateBeforeCall(xAmzTarget, overridePullRequestApprovalRulesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCommentForComparedCommit
     * @param xAmzTarget  (required)
     * @param postCommentForComparedCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidFileLocationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativeFileVersionEnumException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidFilePositionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BeforeCommitIdAndAfterCommitIdAreSameException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> PathRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommentForComparedCommitCall(String xAmzTarget, PostCommentForComparedCommitInput postCommentForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCommentForComparedCommitInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.PostCommentForComparedCommit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCommentForComparedCommitValidateBeforeCall(String xAmzTarget, PostCommentForComparedCommitInput postCommentForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling postCommentForComparedCommit(Async)");
        }

        // verify the required parameter 'postCommentForComparedCommitInput' is set
        if (postCommentForComparedCommitInput == null) {
            throw new ApiException("Missing the required parameter 'postCommentForComparedCommitInput' when calling postCommentForComparedCommit(Async)");
        }

        return postCommentForComparedCommitCall(xAmzTarget, postCommentForComparedCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Posts a comment on the comparison between two commits.
     * @param xAmzTarget  (required)
     * @param postCommentForComparedCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PostCommentForComparedCommitOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidFileLocationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativeFileVersionEnumException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidFilePositionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BeforeCommitIdAndAfterCommitIdAreSameException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> PathRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public PostCommentForComparedCommitOutput postCommentForComparedCommit(String xAmzTarget, PostCommentForComparedCommitInput postCommentForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PostCommentForComparedCommitOutput> localVarResp = postCommentForComparedCommitWithHttpInfo(xAmzTarget, postCommentForComparedCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Posts a comment on the comparison between two commits.
     * @param xAmzTarget  (required)
     * @param postCommentForComparedCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PostCommentForComparedCommitOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidFileLocationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativeFileVersionEnumException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidFilePositionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BeforeCommitIdAndAfterCommitIdAreSameException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> PathRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostCommentForComparedCommitOutput> postCommentForComparedCommitWithHttpInfo(String xAmzTarget, PostCommentForComparedCommitInput postCommentForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = postCommentForComparedCommitValidateBeforeCall(xAmzTarget, postCommentForComparedCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PostCommentForComparedCommitOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Posts a comment on the comparison between two commits.
     * @param xAmzTarget  (required)
     * @param postCommentForComparedCommitInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidFileLocationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativeFileVersionEnumException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidFilePositionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BeforeCommitIdAndAfterCommitIdAreSameException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> PathRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommentForComparedCommitAsync(String xAmzTarget, PostCommentForComparedCommitInput postCommentForComparedCommitInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PostCommentForComparedCommitOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCommentForComparedCommitValidateBeforeCall(xAmzTarget, postCommentForComparedCommitInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PostCommentForComparedCommitOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCommentForPullRequest
     * @param xAmzTarget  (required)
     * @param postCommentForPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileLocationException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativeFileVersionEnumException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidFilePositionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> BeforeCommitIdAndAfterCommitIdAreSameException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> PathRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommentForPullRequestCall(String xAmzTarget, PostCommentForPullRequestInput postCommentForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCommentForPullRequestInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.PostCommentForPullRequest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCommentForPullRequestValidateBeforeCall(String xAmzTarget, PostCommentForPullRequestInput postCommentForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling postCommentForPullRequest(Async)");
        }

        // verify the required parameter 'postCommentForPullRequestInput' is set
        if (postCommentForPullRequestInput == null) {
            throw new ApiException("Missing the required parameter 'postCommentForPullRequestInput' when calling postCommentForPullRequest(Async)");
        }

        return postCommentForPullRequestCall(xAmzTarget, postCommentForPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Posts a comment on a pull request.
     * @param xAmzTarget  (required)
     * @param postCommentForPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PostCommentForPullRequestOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileLocationException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativeFileVersionEnumException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidFilePositionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> BeforeCommitIdAndAfterCommitIdAreSameException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> PathRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public PostCommentForPullRequestOutput postCommentForPullRequest(String xAmzTarget, PostCommentForPullRequestInput postCommentForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PostCommentForPullRequestOutput> localVarResp = postCommentForPullRequestWithHttpInfo(xAmzTarget, postCommentForPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Posts a comment on a pull request.
     * @param xAmzTarget  (required)
     * @param postCommentForPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PostCommentForPullRequestOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileLocationException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativeFileVersionEnumException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidFilePositionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> BeforeCommitIdAndAfterCommitIdAreSameException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> PathRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostCommentForPullRequestOutput> postCommentForPullRequestWithHttpInfo(String xAmzTarget, PostCommentForPullRequestInput postCommentForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = postCommentForPullRequestValidateBeforeCall(xAmzTarget, postCommentForPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PostCommentForPullRequestOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Posts a comment on a pull request.
     * @param xAmzTarget  (required)
     * @param postCommentForPullRequestInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotAssociatedWithPullRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileLocationException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativeFileVersionEnumException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidFilePositionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> CommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidCommitIdException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> BeforeCommitIdAndAfterCommitIdAreSameException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> CommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> PathDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> PathRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommentForPullRequestAsync(String xAmzTarget, PostCommentForPullRequestInput postCommentForPullRequestInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PostCommentForPullRequestOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCommentForPullRequestValidateBeforeCall(xAmzTarget, postCommentForPullRequestInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PostCommentForPullRequestOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCommentReply
     * @param xAmzTarget  (required)
     * @param postCommentReplyInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommentReplyCall(String xAmzTarget, PostCommentReplyInput postCommentReplyInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCommentReplyInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.PostCommentReply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCommentReplyValidateBeforeCall(String xAmzTarget, PostCommentReplyInput postCommentReplyInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling postCommentReply(Async)");
        }

        // verify the required parameter 'postCommentReplyInput' is set
        if (postCommentReplyInput == null) {
            throw new ApiException("Missing the required parameter 'postCommentReplyInput' when calling postCommentReply(Async)");
        }

        return postCommentReplyCall(xAmzTarget, postCommentReplyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Posts a comment in reply to an existing comment on a comparison between commits or a pull request.
     * @param xAmzTarget  (required)
     * @param postCommentReplyInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PostCommentReplyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
     </table>
     */
    public PostCommentReplyOutput postCommentReply(String xAmzTarget, PostCommentReplyInput postCommentReplyInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PostCommentReplyOutput> localVarResp = postCommentReplyWithHttpInfo(xAmzTarget, postCommentReplyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Posts a comment in reply to an existing comment on a comparison between commits or a pull request.
     * @param xAmzTarget  (required)
     * @param postCommentReplyInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PostCommentReplyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostCommentReplyOutput> postCommentReplyWithHttpInfo(String xAmzTarget, PostCommentReplyInput postCommentReplyInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = postCommentReplyValidateBeforeCall(xAmzTarget, postCommentReplyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PostCommentReplyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Posts a comment in reply to an existing comment on a comparison between commits or a pull request.
     * @param xAmzTarget  (required)
     * @param postCommentReplyInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClientRequestTokenRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClientRequestTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IdempotencyParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommentReplyAsync(String xAmzTarget, PostCommentReplyInput postCommentReplyInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PostCommentReplyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCommentReplyValidateBeforeCall(xAmzTarget, postCommentReplyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PostCommentReplyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCommentReaction
     * @param xAmzTarget  (required)
     * @param putCommentReactionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidReactionValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReactionValueRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReactionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCommentReactionCall(String xAmzTarget, PutCommentReactionInput putCommentReactionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putCommentReactionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.PutCommentReaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCommentReactionValidateBeforeCall(String xAmzTarget, PutCommentReactionInput putCommentReactionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putCommentReaction(Async)");
        }

        // verify the required parameter 'putCommentReactionInput' is set
        if (putCommentReactionInput == null) {
            throw new ApiException("Missing the required parameter 'putCommentReactionInput' when calling putCommentReaction(Async)");
        }

        return putCommentReactionCall(xAmzTarget, putCommentReactionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.
     * @param xAmzTarget  (required)
     * @param putCommentReactionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidReactionValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReactionValueRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReactionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public void putCommentReaction(String xAmzTarget, PutCommentReactionInput putCommentReactionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        putCommentReactionWithHttpInfo(xAmzTarget, putCommentReactionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.
     * @param xAmzTarget  (required)
     * @param putCommentReactionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidReactionValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReactionValueRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReactionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putCommentReactionWithHttpInfo(String xAmzTarget, PutCommentReactionInput putCommentReactionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putCommentReactionValidateBeforeCall(xAmzTarget, putCommentReactionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.
     * @param xAmzTarget  (required)
     * @param putCommentReactionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidReactionValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReactionValueRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReactionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCommentReactionAsync(String xAmzTarget, PutCommentReactionInput putCommentReactionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCommentReactionValidateBeforeCall(xAmzTarget, putCommentReactionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putFile
     * @param xAmzTarget  (required)
     * @param putFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FileContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidDeletionParameterException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> SameFileContentException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> FileNameConflictsWithDirectoryNameException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> DirectoryNameConflictsWithFileNameException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> FilePathConflictsWithSubmodulePathException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putFileCall(String xAmzTarget, PutFileInput putFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putFileInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.PutFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putFileValidateBeforeCall(String xAmzTarget, PutFileInput putFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putFile(Async)");
        }

        // verify the required parameter 'putFileInput' is set
        if (putFileInput == null) {
            throw new ApiException("Missing the required parameter 'putFileInput' when calling putFile(Async)");
        }

        return putFileCall(xAmzTarget, putFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.
     * @param xAmzTarget  (required)
     * @param putFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutFileOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FileContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidDeletionParameterException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> SameFileContentException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> FileNameConflictsWithDirectoryNameException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> DirectoryNameConflictsWithFileNameException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> FilePathConflictsWithSubmodulePathException </td><td>  -  </td></tr>
     </table>
     */
    public PutFileOutput putFile(String xAmzTarget, PutFileInput putFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutFileOutput> localVarResp = putFileWithHttpInfo(xAmzTarget, putFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.
     * @param xAmzTarget  (required)
     * @param putFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutFileOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FileContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidDeletionParameterException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> SameFileContentException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> FileNameConflictsWithDirectoryNameException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> DirectoryNameConflictsWithFileNameException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> FilePathConflictsWithSubmodulePathException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutFileOutput> putFileWithHttpInfo(String xAmzTarget, PutFileInput putFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putFileValidateBeforeCall(xAmzTarget, putFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutFileOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.
     * @param xAmzTarget  (required)
     * @param putFileInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentCommitIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParentCommitIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParentCommitDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentCommitIdOutdatedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FileContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FileContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FolderContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PathRequiredException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidPathException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> BranchNameIsTagNameException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidFileModeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NameLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidEmailException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> CommitMessageLengthExceededException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidDeletionParameterException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> SameFileContentException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> FileNameConflictsWithDirectoryNameException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> DirectoryNameConflictsWithFileNameException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> FilePathConflictsWithSubmodulePathException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putFileAsync(String xAmzTarget, PutFileInput putFileInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutFileOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = putFileValidateBeforeCall(xAmzTarget, putFileInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutFileOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRepositoryTriggers
     * @param xAmzTarget  (required)
     * @param putRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryTriggersListRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryTriggersExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryTriggerNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryTriggerDestinationArnException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRepositoryTriggerRegionException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRepositoryTriggerCustomDataException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumBranchesExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryTriggerBranchNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidRepositoryTriggerEventsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> RepositoryTriggerNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> RepositoryTriggerDestinationArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> RepositoryTriggerBranchNameListRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> RepositoryTriggerEventsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRepositoryTriggersCall(String xAmzTarget, PutRepositoryTriggersInput putRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putRepositoryTriggersInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.PutRepositoryTriggers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRepositoryTriggersValidateBeforeCall(String xAmzTarget, PutRepositoryTriggersInput putRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putRepositoryTriggers(Async)");
        }

        // verify the required parameter 'putRepositoryTriggersInput' is set
        if (putRepositoryTriggersInput == null) {
            throw new ApiException("Missing the required parameter 'putRepositoryTriggersInput' when calling putRepositoryTriggers(Async)");
        }

        return putRepositoryTriggersCall(xAmzTarget, putRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Replaces all triggers for a repository. Used to create or delete triggers.
     * @param xAmzTarget  (required)
     * @param putRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutRepositoryTriggersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryTriggersListRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryTriggersExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryTriggerNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryTriggerDestinationArnException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRepositoryTriggerRegionException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRepositoryTriggerCustomDataException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumBranchesExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryTriggerBranchNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidRepositoryTriggerEventsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> RepositoryTriggerNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> RepositoryTriggerDestinationArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> RepositoryTriggerBranchNameListRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> RepositoryTriggerEventsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public PutRepositoryTriggersOutput putRepositoryTriggers(String xAmzTarget, PutRepositoryTriggersInput putRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutRepositoryTriggersOutput> localVarResp = putRepositoryTriggersWithHttpInfo(xAmzTarget, putRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Replaces all triggers for a repository. Used to create or delete triggers.
     * @param xAmzTarget  (required)
     * @param putRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutRepositoryTriggersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryTriggersListRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryTriggersExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryTriggerNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryTriggerDestinationArnException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRepositoryTriggerRegionException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRepositoryTriggerCustomDataException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumBranchesExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryTriggerBranchNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidRepositoryTriggerEventsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> RepositoryTriggerNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> RepositoryTriggerDestinationArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> RepositoryTriggerBranchNameListRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> RepositoryTriggerEventsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutRepositoryTriggersOutput> putRepositoryTriggersWithHttpInfo(String xAmzTarget, PutRepositoryTriggersInput putRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putRepositoryTriggersValidateBeforeCall(xAmzTarget, putRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutRepositoryTriggersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replaces all triggers for a repository. Used to create or delete triggers.
     * @param xAmzTarget  (required)
     * @param putRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryTriggersListRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryTriggersExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryTriggerNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryTriggerDestinationArnException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRepositoryTriggerRegionException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRepositoryTriggerCustomDataException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumBranchesExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryTriggerBranchNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidRepositoryTriggerEventsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> RepositoryTriggerNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> RepositoryTriggerDestinationArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> RepositoryTriggerBranchNameListRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> RepositoryTriggerEventsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRepositoryTriggersAsync(String xAmzTarget, PutRepositoryTriggersInput putRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutRepositoryTriggersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRepositoryTriggersValidateBeforeCall(xAmzTarget, putRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutRepositoryTriggersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagsMapRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTagsMapException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceInput' is set
        if (tagResourceInput == null) {
            throw new ApiException("Missing the required parameter 'tagResourceInput' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\&quot;&gt;CodeCommit Resources and Operations&lt;/a&gt; in the &lt;i&gt;AWS CodeCommit User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagsMapRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTagsMapException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public void tagResource(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagResourceWithHttpInfo(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\&quot;&gt;CodeCommit Resources and Operations&lt;/a&gt; in the &lt;i&gt;AWS CodeCommit User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagsMapRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTagsMapException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagResourceWithHttpInfo(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\&quot;&gt;CodeCommit Resources and Operations&lt;/a&gt; in the &lt;i&gt;AWS CodeCommit User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagsMapRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTagsMapException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testRepositoryTriggers
     * @param xAmzTarget  (required)
     * @param testRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryTriggersListRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryTriggersExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryTriggerNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryTriggerDestinationArnException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRepositoryTriggerRegionException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRepositoryTriggerCustomDataException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumBranchesExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryTriggerBranchNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidRepositoryTriggerEventsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> RepositoryTriggerNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> RepositoryTriggerDestinationArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> RepositoryTriggerBranchNameListRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> RepositoryTriggerEventsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testRepositoryTriggersCall(String xAmzTarget, TestRepositoryTriggersInput testRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testRepositoryTriggersInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.TestRepositoryTriggers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testRepositoryTriggersValidateBeforeCall(String xAmzTarget, TestRepositoryTriggersInput testRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling testRepositoryTriggers(Async)");
        }

        // verify the required parameter 'testRepositoryTriggersInput' is set
        if (testRepositoryTriggersInput == null) {
            throw new ApiException("Missing the required parameter 'testRepositoryTriggersInput' when calling testRepositoryTriggers(Async)");
        }

        return testRepositoryTriggersCall(xAmzTarget, testRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.
     * @param xAmzTarget  (required)
     * @param testRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TestRepositoryTriggersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryTriggersListRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryTriggersExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryTriggerNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryTriggerDestinationArnException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRepositoryTriggerRegionException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRepositoryTriggerCustomDataException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumBranchesExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryTriggerBranchNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidRepositoryTriggerEventsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> RepositoryTriggerNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> RepositoryTriggerDestinationArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> RepositoryTriggerBranchNameListRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> RepositoryTriggerEventsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public TestRepositoryTriggersOutput testRepositoryTriggers(String xAmzTarget, TestRepositoryTriggersInput testRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TestRepositoryTriggersOutput> localVarResp = testRepositoryTriggersWithHttpInfo(xAmzTarget, testRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.
     * @param xAmzTarget  (required)
     * @param testRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TestRepositoryTriggersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryTriggersListRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryTriggersExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryTriggerNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryTriggerDestinationArnException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRepositoryTriggerRegionException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRepositoryTriggerCustomDataException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumBranchesExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryTriggerBranchNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidRepositoryTriggerEventsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> RepositoryTriggerNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> RepositoryTriggerDestinationArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> RepositoryTriggerBranchNameListRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> RepositoryTriggerEventsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRepositoryTriggersOutput> testRepositoryTriggersWithHttpInfo(String xAmzTarget, TestRepositoryTriggersInput testRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = testRepositoryTriggersValidateBeforeCall(xAmzTarget, testRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TestRepositoryTriggersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.
     * @param xAmzTarget  (required)
     * @param testRepositoryTriggersInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryTriggersListRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MaximumRepositoryTriggersExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRepositoryTriggerNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidRepositoryTriggerDestinationArnException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRepositoryTriggerRegionException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRepositoryTriggerCustomDataException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MaximumBranchesExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRepositoryTriggerBranchNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidRepositoryTriggerEventsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> RepositoryTriggerNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> RepositoryTriggerDestinationArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> RepositoryTriggerBranchNameListRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> RepositoryTriggerEventsListRequiredException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testRepositoryTriggersAsync(String xAmzTarget, TestRepositoryTriggersInput testRepositoryTriggersInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TestRepositoryTriggersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = testRepositoryTriggersValidateBeforeCall(xAmzTarget, testRepositoryTriggersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TestRepositoryTriggersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagKeysListRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTagKeysListException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceInput' is set
        if (untagResourceInput == null) {
            throw new ApiException("Missing the required parameter 'untagResourceInput' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\&quot;&gt;CodeCommit Resources and Operations&lt;/a&gt; in the &lt;i&gt;AWS CodeCommit User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagKeysListRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTagKeysListException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public void untagResource(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagResourceWithHttpInfo(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\&quot;&gt;CodeCommit Resources and Operations&lt;/a&gt; in the &lt;i&gt;AWS CodeCommit User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagKeysListRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTagKeysListException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\&quot;&gt;CodeCommit Resources and Operations&lt;/a&gt; in the &lt;i&gt;AWS CodeCommit User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceArnRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagKeysListRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTagKeysListException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSystemTagUsageException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TagPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApprovalRuleTemplateContent
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidApprovalRuleTemplateContentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRuleContentSha256Exception </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ApprovalRuleTemplateContentRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApprovalRuleTemplateContentCall(String xAmzTarget, UpdateApprovalRuleTemplateContentInput updateApprovalRuleTemplateContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApprovalRuleTemplateContentInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateContent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApprovalRuleTemplateContentValidateBeforeCall(String xAmzTarget, UpdateApprovalRuleTemplateContentInput updateApprovalRuleTemplateContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateApprovalRuleTemplateContent(Async)");
        }

        // verify the required parameter 'updateApprovalRuleTemplateContentInput' is set
        if (updateApprovalRuleTemplateContentInput == null) {
            throw new ApiException("Missing the required parameter 'updateApprovalRuleTemplateContentInput' when calling updateApprovalRuleTemplateContent(Async)");
        }

        return updateApprovalRuleTemplateContentCall(xAmzTarget, updateApprovalRuleTemplateContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the content of an approval rule template. You can change the number of required approvals, the membership of the approval rule, and whether an approval pool is defined.
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateApprovalRuleTemplateContentOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidApprovalRuleTemplateContentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRuleContentSha256Exception </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ApprovalRuleTemplateContentRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateApprovalRuleTemplateContentOutput updateApprovalRuleTemplateContent(String xAmzTarget, UpdateApprovalRuleTemplateContentInput updateApprovalRuleTemplateContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateApprovalRuleTemplateContentOutput> localVarResp = updateApprovalRuleTemplateContentWithHttpInfo(xAmzTarget, updateApprovalRuleTemplateContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the content of an approval rule template. You can change the number of required approvals, the membership of the approval rule, and whether an approval pool is defined.
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateApprovalRuleTemplateContentOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidApprovalRuleTemplateContentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRuleContentSha256Exception </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ApprovalRuleTemplateContentRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateApprovalRuleTemplateContentOutput> updateApprovalRuleTemplateContentWithHttpInfo(String xAmzTarget, UpdateApprovalRuleTemplateContentInput updateApprovalRuleTemplateContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateApprovalRuleTemplateContentValidateBeforeCall(xAmzTarget, updateApprovalRuleTemplateContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateApprovalRuleTemplateContentOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the content of an approval rule template. You can change the number of required approvals, the membership of the approval rule, and whether an approval pool is defined.
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidApprovalRuleTemplateContentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRuleContentSha256Exception </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ApprovalRuleTemplateContentRequiredException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApprovalRuleTemplateContentAsync(String xAmzTarget, UpdateApprovalRuleTemplateContentInput updateApprovalRuleTemplateContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateApprovalRuleTemplateContentOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApprovalRuleTemplateContentValidateBeforeCall(xAmzTarget, updateApprovalRuleTemplateContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateApprovalRuleTemplateContentOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApprovalRuleTemplateDescription
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidApprovalRuleTemplateDescriptionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApprovalRuleTemplateDescriptionCall(String xAmzTarget, UpdateApprovalRuleTemplateDescriptionInput updateApprovalRuleTemplateDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApprovalRuleTemplateDescriptionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateDescription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApprovalRuleTemplateDescriptionValidateBeforeCall(String xAmzTarget, UpdateApprovalRuleTemplateDescriptionInput updateApprovalRuleTemplateDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateApprovalRuleTemplateDescription(Async)");
        }

        // verify the required parameter 'updateApprovalRuleTemplateDescriptionInput' is set
        if (updateApprovalRuleTemplateDescriptionInput == null) {
            throw new ApiException("Missing the required parameter 'updateApprovalRuleTemplateDescriptionInput' when calling updateApprovalRuleTemplateDescription(Async)");
        }

        return updateApprovalRuleTemplateDescriptionCall(xAmzTarget, updateApprovalRuleTemplateDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the description for a specified approval rule template.
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateApprovalRuleTemplateDescriptionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidApprovalRuleTemplateDescriptionException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateApprovalRuleTemplateDescriptionOutput updateApprovalRuleTemplateDescription(String xAmzTarget, UpdateApprovalRuleTemplateDescriptionInput updateApprovalRuleTemplateDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateApprovalRuleTemplateDescriptionOutput> localVarResp = updateApprovalRuleTemplateDescriptionWithHttpInfo(xAmzTarget, updateApprovalRuleTemplateDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the description for a specified approval rule template.
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateApprovalRuleTemplateDescriptionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidApprovalRuleTemplateDescriptionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateApprovalRuleTemplateDescriptionOutput> updateApprovalRuleTemplateDescriptionWithHttpInfo(String xAmzTarget, UpdateApprovalRuleTemplateDescriptionInput updateApprovalRuleTemplateDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateApprovalRuleTemplateDescriptionValidateBeforeCall(xAmzTarget, updateApprovalRuleTemplateDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateApprovalRuleTemplateDescriptionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the description for a specified approval rule template.
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidApprovalRuleTemplateDescriptionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApprovalRuleTemplateDescriptionAsync(String xAmzTarget, UpdateApprovalRuleTemplateDescriptionInput updateApprovalRuleTemplateDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateApprovalRuleTemplateDescriptionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApprovalRuleTemplateDescriptionValidateBeforeCall(xAmzTarget, updateApprovalRuleTemplateDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateApprovalRuleTemplateDescriptionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApprovalRuleTemplateName
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateNameInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleTemplateNameAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApprovalRuleTemplateNameCall(String xAmzTarget, UpdateApprovalRuleTemplateNameInput updateApprovalRuleTemplateNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApprovalRuleTemplateNameInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApprovalRuleTemplateNameValidateBeforeCall(String xAmzTarget, UpdateApprovalRuleTemplateNameInput updateApprovalRuleTemplateNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateApprovalRuleTemplateName(Async)");
        }

        // verify the required parameter 'updateApprovalRuleTemplateNameInput' is set
        if (updateApprovalRuleTemplateNameInput == null) {
            throw new ApiException("Missing the required parameter 'updateApprovalRuleTemplateNameInput' when calling updateApprovalRuleTemplateName(Async)");
        }

        return updateApprovalRuleTemplateNameCall(xAmzTarget, updateApprovalRuleTemplateNameInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the name of a specified approval rule template.
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateNameInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateApprovalRuleTemplateNameOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleTemplateNameAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateApprovalRuleTemplateNameOutput updateApprovalRuleTemplateName(String xAmzTarget, UpdateApprovalRuleTemplateNameInput updateApprovalRuleTemplateNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateApprovalRuleTemplateNameOutput> localVarResp = updateApprovalRuleTemplateNameWithHttpInfo(xAmzTarget, updateApprovalRuleTemplateNameInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the name of a specified approval rule template.
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateNameInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateApprovalRuleTemplateNameOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleTemplateNameAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateApprovalRuleTemplateNameOutput> updateApprovalRuleTemplateNameWithHttpInfo(String xAmzTarget, UpdateApprovalRuleTemplateNameInput updateApprovalRuleTemplateNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateApprovalRuleTemplateNameValidateBeforeCall(xAmzTarget, updateApprovalRuleTemplateNameInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateApprovalRuleTemplateNameOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the name of a specified approval rule template.
     * @param xAmzTarget  (required)
     * @param updateApprovalRuleTemplateNameInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidApprovalRuleTemplateNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ApprovalRuleTemplateNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ApprovalRuleTemplateDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ApprovalRuleTemplateNameAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApprovalRuleTemplateNameAsync(String xAmzTarget, UpdateApprovalRuleTemplateNameInput updateApprovalRuleTemplateNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateApprovalRuleTemplateNameOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApprovalRuleTemplateNameValidateBeforeCall(xAmzTarget, updateApprovalRuleTemplateNameInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateApprovalRuleTemplateNameOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateComment
     * @param xAmzTarget  (required)
     * @param updateCommentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommentNotCreatedByCallerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommentCall(String xAmzTarget, UpdateCommentInput updateCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCommentInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdateComment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommentValidateBeforeCall(String xAmzTarget, UpdateCommentInput updateCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateComment(Async)");
        }

        // verify the required parameter 'updateCommentInput' is set
        if (updateCommentInput == null) {
            throw new ApiException("Missing the required parameter 'updateCommentInput' when calling updateComment(Async)");
        }

        return updateCommentCall(xAmzTarget, updateCommentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Replaces the contents of a comment.
     * @param xAmzTarget  (required)
     * @param updateCommentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateCommentOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommentNotCreatedByCallerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCommentOutput updateComment(String xAmzTarget, UpdateCommentInput updateCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateCommentOutput> localVarResp = updateCommentWithHttpInfo(xAmzTarget, updateCommentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Replaces the contents of a comment.
     * @param xAmzTarget  (required)
     * @param updateCommentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateCommentOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommentNotCreatedByCallerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateCommentOutput> updateCommentWithHttpInfo(String xAmzTarget, UpdateCommentInput updateCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(xAmzTarget, updateCommentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateCommentOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replaces the contents of a comment.
     * @param xAmzTarget  (required)
     * @param updateCommentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CommentContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CommentContentSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CommentDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CommentIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCommentIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CommentNotCreatedByCallerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CommentDeletedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommentAsync(String xAmzTarget, UpdateCommentInput updateCommentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateCommentOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(xAmzTarget, updateCommentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateCommentOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDefaultBranch
     * @param xAmzTarget  (required)
     * @param updateDefaultBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDefaultBranchCall(String xAmzTarget, UpdateDefaultBranchInput updateDefaultBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDefaultBranchInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdateDefaultBranch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDefaultBranchValidateBeforeCall(String xAmzTarget, UpdateDefaultBranchInput updateDefaultBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateDefaultBranch(Async)");
        }

        // verify the required parameter 'updateDefaultBranchInput' is set
        if (updateDefaultBranchInput == null) {
            throw new ApiException("Missing the required parameter 'updateDefaultBranchInput' when calling updateDefaultBranch(Async)");
        }

        return updateDefaultBranchCall(xAmzTarget, updateDefaultBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets or changes the default branch name for the specified repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateDefaultBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public void updateDefaultBranch(String xAmzTarget, UpdateDefaultBranchInput updateDefaultBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        updateDefaultBranchWithHttpInfo(xAmzTarget, updateDefaultBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Sets or changes the default branch name for the specified repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateDefaultBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateDefaultBranchWithHttpInfo(String xAmzTarget, UpdateDefaultBranchInput updateDefaultBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateDefaultBranchValidateBeforeCall(xAmzTarget, updateDefaultBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets or changes the default branch name for the specified repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateDefaultBranchInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BranchNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBranchNameException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BranchDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDefaultBranchAsync(String xAmzTarget, UpdateDefaultBranchInput updateDefaultBranchInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDefaultBranchValidateBeforeCall(xAmzTarget, updateDefaultBranchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePullRequestApprovalRuleContent
     * @param xAmzTarget  (required)
     * @param updatePullRequestApprovalRuleContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ApprovalRuleDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRuleContentSha256Exception </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ApprovalRuleContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidApprovalRuleContentException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CannotModifyApprovalRuleFromTemplateException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestApprovalRuleContentCall(String xAmzTarget, UpdatePullRequestApprovalRuleContentInput updatePullRequestApprovalRuleContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePullRequestApprovalRuleContentInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalRuleContent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePullRequestApprovalRuleContentValidateBeforeCall(String xAmzTarget, UpdatePullRequestApprovalRuleContentInput updatePullRequestApprovalRuleContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updatePullRequestApprovalRuleContent(Async)");
        }

        // verify the required parameter 'updatePullRequestApprovalRuleContentInput' is set
        if (updatePullRequestApprovalRuleContentInput == null) {
            throw new ApiException("Missing the required parameter 'updatePullRequestApprovalRuleContentInput' when calling updatePullRequestApprovalRuleContent(Async)");
        }

        return updatePullRequestApprovalRuleContentCall(xAmzTarget, updatePullRequestApprovalRuleContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and the approval pool for approvers. 
     * @param xAmzTarget  (required)
     * @param updatePullRequestApprovalRuleContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdatePullRequestApprovalRuleContentOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ApprovalRuleDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRuleContentSha256Exception </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ApprovalRuleContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidApprovalRuleContentException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CannotModifyApprovalRuleFromTemplateException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePullRequestApprovalRuleContentOutput updatePullRequestApprovalRuleContent(String xAmzTarget, UpdatePullRequestApprovalRuleContentInput updatePullRequestApprovalRuleContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdatePullRequestApprovalRuleContentOutput> localVarResp = updatePullRequestApprovalRuleContentWithHttpInfo(xAmzTarget, updatePullRequestApprovalRuleContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and the approval pool for approvers. 
     * @param xAmzTarget  (required)
     * @param updatePullRequestApprovalRuleContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdatePullRequestApprovalRuleContentOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ApprovalRuleDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRuleContentSha256Exception </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ApprovalRuleContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidApprovalRuleContentException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CannotModifyApprovalRuleFromTemplateException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePullRequestApprovalRuleContentOutput> updatePullRequestApprovalRuleContentWithHttpInfo(String xAmzTarget, UpdatePullRequestApprovalRuleContentInput updatePullRequestApprovalRuleContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updatePullRequestApprovalRuleContentValidateBeforeCall(xAmzTarget, updatePullRequestApprovalRuleContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdatePullRequestApprovalRuleContentOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and the approval pool for approvers. 
     * @param xAmzTarget  (required)
     * @param updatePullRequestApprovalRuleContentInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ApprovalRuleNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalRuleNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ApprovalRuleDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRuleContentSha256Exception </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ApprovalRuleContentRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidApprovalRuleContentException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CannotModifyApprovalRuleFromTemplateException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestApprovalRuleContentAsync(String xAmzTarget, UpdatePullRequestApprovalRuleContentInput updatePullRequestApprovalRuleContentInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdatePullRequestApprovalRuleContentOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePullRequestApprovalRuleContentValidateBeforeCall(xAmzTarget, updatePullRequestApprovalRuleContentInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdatePullRequestApprovalRuleContentOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePullRequestApprovalState
     * @param xAmzTarget  (required)
     * @param updatePullRequestApprovalStateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalStateException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ApprovalStateRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PullRequestCannotBeApprovedByAuthorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MaximumNumberOfApprovalsExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestApprovalStateCall(String xAmzTarget, UpdatePullRequestApprovalStateInput updatePullRequestApprovalStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePullRequestApprovalStateInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalState";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePullRequestApprovalStateValidateBeforeCall(String xAmzTarget, UpdatePullRequestApprovalStateInput updatePullRequestApprovalStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updatePullRequestApprovalState(Async)");
        }

        // verify the required parameter 'updatePullRequestApprovalStateInput' is set
        if (updatePullRequestApprovalStateInput == null) {
            throw new ApiException("Missing the required parameter 'updatePullRequestApprovalStateInput' when calling updatePullRequestApprovalState(Async)");
        }

        return updatePullRequestApprovalStateCall(xAmzTarget, updatePullRequestApprovalStateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the state of a user&#39;s approval on a pull request. The user is derived from the signed-in account when the request is made.
     * @param xAmzTarget  (required)
     * @param updatePullRequestApprovalStateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalStateException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ApprovalStateRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PullRequestCannotBeApprovedByAuthorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MaximumNumberOfApprovalsExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public void updatePullRequestApprovalState(String xAmzTarget, UpdatePullRequestApprovalStateInput updatePullRequestApprovalStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        updatePullRequestApprovalStateWithHttpInfo(xAmzTarget, updatePullRequestApprovalStateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Updates the state of a user&#39;s approval on a pull request. The user is derived from the signed-in account when the request is made.
     * @param xAmzTarget  (required)
     * @param updatePullRequestApprovalStateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalStateException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ApprovalStateRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PullRequestCannotBeApprovedByAuthorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MaximumNumberOfApprovalsExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePullRequestApprovalStateWithHttpInfo(String xAmzTarget, UpdatePullRequestApprovalStateInput updatePullRequestApprovalStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updatePullRequestApprovalStateValidateBeforeCall(xAmzTarget, updatePullRequestApprovalStateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the state of a user&#39;s approval on a pull request. The user is derived from the signed-in account when the request is made.
     * @param xAmzTarget  (required)
     * @param updatePullRequestApprovalStateInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRevisionIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RevisionIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidApprovalStateException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ApprovalStateRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PullRequestCannotBeApprovedByAuthorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RevisionNotCurrentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MaximumNumberOfApprovalsExceededException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestApprovalStateAsync(String xAmzTarget, UpdatePullRequestApprovalStateInput updatePullRequestApprovalStateInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePullRequestApprovalStateValidateBeforeCall(xAmzTarget, updatePullRequestApprovalStateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePullRequestDescription
     * @param xAmzTarget  (required)
     * @param updatePullRequestDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestDescriptionCall(String xAmzTarget, UpdatePullRequestDescriptionInput updatePullRequestDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePullRequestDescriptionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestDescription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePullRequestDescriptionValidateBeforeCall(String xAmzTarget, UpdatePullRequestDescriptionInput updatePullRequestDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updatePullRequestDescription(Async)");
        }

        // verify the required parameter 'updatePullRequestDescriptionInput' is set
        if (updatePullRequestDescriptionInput == null) {
            throw new ApiException("Missing the required parameter 'updatePullRequestDescriptionInput' when calling updatePullRequestDescription(Async)");
        }

        return updatePullRequestDescriptionCall(xAmzTarget, updatePullRequestDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Replaces the contents of the description of a pull request.
     * @param xAmzTarget  (required)
     * @param updatePullRequestDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdatePullRequestDescriptionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePullRequestDescriptionOutput updatePullRequestDescription(String xAmzTarget, UpdatePullRequestDescriptionInput updatePullRequestDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdatePullRequestDescriptionOutput> localVarResp = updatePullRequestDescriptionWithHttpInfo(xAmzTarget, updatePullRequestDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Replaces the contents of the description of a pull request.
     * @param xAmzTarget  (required)
     * @param updatePullRequestDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdatePullRequestDescriptionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePullRequestDescriptionOutput> updatePullRequestDescriptionWithHttpInfo(String xAmzTarget, UpdatePullRequestDescriptionInput updatePullRequestDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updatePullRequestDescriptionValidateBeforeCall(xAmzTarget, updatePullRequestDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdatePullRequestDescriptionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replaces the contents of the description of a pull request.
     * @param xAmzTarget  (required)
     * @param updatePullRequestDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestDescriptionAsync(String xAmzTarget, UpdatePullRequestDescriptionInput updatePullRequestDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdatePullRequestDescriptionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePullRequestDescriptionValidateBeforeCall(xAmzTarget, updatePullRequestDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdatePullRequestDescriptionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePullRequestStatus
     * @param xAmzTarget  (required)
     * @param updatePullRequestStatusInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestStatusUpdateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPullRequestStatusException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PullRequestStatusRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestStatusCall(String xAmzTarget, UpdatePullRequestStatusInput updatePullRequestStatusInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePullRequestStatusInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePullRequestStatusValidateBeforeCall(String xAmzTarget, UpdatePullRequestStatusInput updatePullRequestStatusInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updatePullRequestStatus(Async)");
        }

        // verify the required parameter 'updatePullRequestStatusInput' is set
        if (updatePullRequestStatusInput == null) {
            throw new ApiException("Missing the required parameter 'updatePullRequestStatusInput' when calling updatePullRequestStatus(Async)");
        }

        return updatePullRequestStatusCall(xAmzTarget, updatePullRequestStatusInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the status of a pull request. 
     * @param xAmzTarget  (required)
     * @param updatePullRequestStatusInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdatePullRequestStatusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestStatusUpdateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPullRequestStatusException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PullRequestStatusRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePullRequestStatusOutput updatePullRequestStatus(String xAmzTarget, UpdatePullRequestStatusInput updatePullRequestStatusInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdatePullRequestStatusOutput> localVarResp = updatePullRequestStatusWithHttpInfo(xAmzTarget, updatePullRequestStatusInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the status of a pull request. 
     * @param xAmzTarget  (required)
     * @param updatePullRequestStatusInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdatePullRequestStatusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestStatusUpdateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPullRequestStatusException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PullRequestStatusRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePullRequestStatusOutput> updatePullRequestStatusWithHttpInfo(String xAmzTarget, UpdatePullRequestStatusInput updatePullRequestStatusInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updatePullRequestStatusValidateBeforeCall(xAmzTarget, updatePullRequestStatusInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdatePullRequestStatusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the status of a pull request. 
     * @param xAmzTarget  (required)
     * @param updatePullRequestStatusInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPullRequestStatusUpdateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPullRequestStatusException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PullRequestStatusRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestStatusAsync(String xAmzTarget, UpdatePullRequestStatusInput updatePullRequestStatusInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdatePullRequestStatusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePullRequestStatusValidateBeforeCall(xAmzTarget, updatePullRequestStatusInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdatePullRequestStatusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePullRequestTitle
     * @param xAmzTarget  (required)
     * @param updatePullRequestTitleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TitleRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTitleException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestTitleCall(String xAmzTarget, UpdatePullRequestTitleInput updatePullRequestTitleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePullRequestTitleInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestTitle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePullRequestTitleValidateBeforeCall(String xAmzTarget, UpdatePullRequestTitleInput updatePullRequestTitleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updatePullRequestTitle(Async)");
        }

        // verify the required parameter 'updatePullRequestTitleInput' is set
        if (updatePullRequestTitleInput == null) {
            throw new ApiException("Missing the required parameter 'updatePullRequestTitleInput' when calling updatePullRequestTitle(Async)");
        }

        return updatePullRequestTitleCall(xAmzTarget, updatePullRequestTitleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Replaces the title of a pull request.
     * @param xAmzTarget  (required)
     * @param updatePullRequestTitleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdatePullRequestTitleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TitleRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTitleException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePullRequestTitleOutput updatePullRequestTitle(String xAmzTarget, UpdatePullRequestTitleInput updatePullRequestTitleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdatePullRequestTitleOutput> localVarResp = updatePullRequestTitleWithHttpInfo(xAmzTarget, updatePullRequestTitleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Replaces the title of a pull request.
     * @param xAmzTarget  (required)
     * @param updatePullRequestTitleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdatePullRequestTitleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TitleRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTitleException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePullRequestTitleOutput> updatePullRequestTitleWithHttpInfo(String xAmzTarget, UpdatePullRequestTitleInput updatePullRequestTitleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updatePullRequestTitleValidateBeforeCall(xAmzTarget, updatePullRequestTitleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdatePullRequestTitleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replaces the title of a pull request.
     * @param xAmzTarget  (required)
     * @param updatePullRequestTitleInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PullRequestDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPullRequestIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PullRequestIdRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TitleRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTitleException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PullRequestAlreadyClosedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestTitleAsync(String xAmzTarget, UpdatePullRequestTitleInput updatePullRequestTitleInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdatePullRequestTitleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePullRequestTitleValidateBeforeCall(xAmzTarget, updatePullRequestTitleInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdatePullRequestTitleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepositoryDescription
     * @param xAmzTarget  (required)
     * @param updateRepositoryDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryDescriptionCall(String xAmzTarget, UpdateRepositoryDescriptionInput updateRepositoryDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRepositoryDescriptionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryDescription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepositoryDescriptionValidateBeforeCall(String xAmzTarget, UpdateRepositoryDescriptionInput updateRepositoryDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateRepositoryDescription(Async)");
        }

        // verify the required parameter 'updateRepositoryDescriptionInput' is set
        if (updateRepositoryDescriptionInput == null) {
            throw new ApiException("Missing the required parameter 'updateRepositoryDescriptionInput' when calling updateRepositoryDescription(Async)");
        }

        return updateRepositoryDescriptionCall(xAmzTarget, updateRepositoryDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets or changes the comment or description for a repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateRepositoryDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public void updateRepositoryDescription(String xAmzTarget, UpdateRepositoryDescriptionInput updateRepositoryDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        updateRepositoryDescriptionWithHttpInfo(xAmzTarget, updateRepositoryDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Sets or changes the comment or description for a repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateRepositoryDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRepositoryDescriptionWithHttpInfo(String xAmzTarget, UpdateRepositoryDescriptionInput updateRepositoryDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRepositoryDescriptionValidateBeforeCall(xAmzTarget, updateRepositoryDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets or changes the comment or description for a repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateRepositoryDescriptionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryDescriptionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EncryptionIntegrityChecksFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EncryptionKeyAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EncryptionKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EncryptionKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EncryptionKeyUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryDescriptionAsync(String xAmzTarget, UpdateRepositoryDescriptionInput updateRepositoryDescriptionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepositoryDescriptionValidateBeforeCall(xAmzTarget, updateRepositoryDescriptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepositoryName
     * @param xAmzTarget  (required)
     * @param updateRepositoryNameInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryNameCall(String xAmzTarget, UpdateRepositoryNameInput updateRepositoryNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRepositoryNameInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepositoryNameValidateBeforeCall(String xAmzTarget, UpdateRepositoryNameInput updateRepositoryNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateRepositoryName(Async)");
        }

        // verify the required parameter 'updateRepositoryNameInput' is set
        if (updateRepositoryNameInput == null) {
            throw new ApiException("Missing the required parameter 'updateRepositoryNameInput' when calling updateRepositoryName(Async)");
        }

        return updateRepositoryNameCall(xAmzTarget, updateRepositoryNameInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Renames a repository. The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix .git is prohibited. For more information about the limits on repository names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\&quot;&gt;Limits&lt;/a&gt; in the AWS CodeCommit User Guide.
     * @param xAmzTarget  (required)
     * @param updateRepositoryNameInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
     </table>
     */
    public void updateRepositoryName(String xAmzTarget, UpdateRepositoryNameInput updateRepositoryNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        updateRepositoryNameWithHttpInfo(xAmzTarget, updateRepositoryNameInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Renames a repository. The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix .git is prohibited. For more information about the limits on repository names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\&quot;&gt;Limits&lt;/a&gt; in the AWS CodeCommit User Guide.
     * @param xAmzTarget  (required)
     * @param updateRepositoryNameInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRepositoryNameWithHttpInfo(String xAmzTarget, UpdateRepositoryNameInput updateRepositoryNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRepositoryNameValidateBeforeCall(xAmzTarget, updateRepositoryNameInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Renames a repository. The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix .git is prohibited. For more information about the limits on repository names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\&quot;&gt;Limits&lt;/a&gt; in the AWS CodeCommit User Guide.
     * @param xAmzTarget  (required)
     * @param updateRepositoryNameInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNameExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNameRequiredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidRepositoryNameException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryNameAsync(String xAmzTarget, UpdateRepositoryNameInput updateRepositoryNameInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepositoryNameValidateBeforeCall(xAmzTarget, updateRepositoryNameInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
