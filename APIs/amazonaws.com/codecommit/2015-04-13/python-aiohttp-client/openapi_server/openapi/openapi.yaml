openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<fullname>AWS CodeCommit</fullname> <p>This is the <i>AWS CodeCommit\
    \ API Reference</i>. This reference provides descriptions of the operations and\
    \ data types for AWS CodeCommit API along with usage examples.</p> <p>You can\
    \ use the AWS CodeCommit API to work with the following objects:</p> <p>Repositories,\
    \ by calling the following:</p> <ul> <li> <p> <a>BatchGetRepositories</a>, which\
    \ returns information about one or more repositories associated with your AWS\
    \ account.</p> </li> <li> <p> <a>CreateRepository</a>, which creates an AWS CodeCommit\
    \ repository.</p> </li> <li> <p> <a>DeleteRepository</a>, which deletes an AWS\
    \ CodeCommit repository.</p> </li> <li> <p> <a>GetRepository</a>, which returns\
    \ information about a specified repository.</p> </li> <li> <p> <a>ListRepositories</a>,\
    \ which lists all AWS CodeCommit repositories associated with your AWS account.</p>\
    \ </li> <li> <p> <a>UpdateRepositoryDescription</a>, which sets or updates the\
    \ description of the repository.</p> </li> <li> <p> <a>UpdateRepositoryName</a>,\
    \ which changes the name of the repository. If you change the name of a repository,\
    \ no other users of that repository can access it until you send them the new\
    \ HTTPS or SSH URL to use.</p> </li> </ul> <p>Branches, by calling the following:</p>\
    \ <ul> <li> <p> <a>CreateBranch</a>, which creates a branch in a specified repository.</p>\
    \ </li> <li> <p> <a>DeleteBranch</a>, which deletes the specified branch in a\
    \ repository unless it is the default branch.</p> </li> <li> <p> <a>GetBranch</a>,\
    \ which returns information about a specified branch.</p> </li> <li> <p> <a>ListBranches</a>,\
    \ which lists all branches for a specified repository.</p> </li> <li> <p> <a>UpdateDefaultBranch</a>,\
    \ which changes the default branch for a repository.</p> </li> </ul> <p>Files,\
    \ by calling the following:</p> <ul> <li> <p> <a>DeleteFile</a>, which deletes\
    \ the content of a specified file from a specified branch.</p> </li> <li> <p>\
    \ <a>GetBlob</a>, which returns the base-64 encoded content of an individual Git\
    \ blob object in a repository.</p> </li> <li> <p> <a>GetFile</a>, which returns\
    \ the base-64 encoded content of a specified file.</p> </li> <li> <p> <a>GetFolder</a>,\
    \ which returns the contents of a specified folder or directory.</p> </li> <li>\
    \ <p> <a>PutFile</a>, which adds or modifies a single file in a specified repository\
    \ and branch.</p> </li> </ul> <p>Commits, by calling the following:</p> <ul> <li>\
    \ <p> <a>BatchGetCommits</a>, which returns information about one or more commits\
    \ in a repository.</p> </li> <li> <p> <a>CreateCommit</a>, which creates a commit\
    \ for changes to a repository.</p> </li> <li> <p> <a>GetCommit</a>, which returns\
    \ information about a commit, including commit messages and author and committer\
    \ information.</p> </li> <li> <p> <a>GetDifferences</a>, which returns information\
    \ about the differences in a valid commit specifier (such as a branch, tag, HEAD,\
    \ commit ID, or other fully qualified reference).</p> </li> </ul> <p>Merges, by\
    \ calling the following:</p> <ul> <li> <p> <a>BatchDescribeMergeConflicts</a>,\
    \ which returns information about conflicts in a merge between commits in a repository.</p>\
    \ </li> <li> <p> <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced\
    \ commit between two branches or commits for the purpose of comparing them and\
    \ identifying any potential conflicts.</p> </li> <li> <p> <a>DescribeMergeConflicts</a>,\
    \ which returns information about merge conflicts between the base, source, and\
    \ destination versions of a file in a potential merge.</p> </li> <li> <p> <a>GetMergeCommit</a>,\
    \ which returns information about the merge between a source and destination commit.\
    \ </p> </li> <li> <p> <a>GetMergeConflicts</a>, which returns information about\
    \ merge conflicts between the source and destination branch in a pull request.</p>\
    \ </li> <li> <p> <a>GetMergeOptions</a>, which returns information about the available\
    \ merge options between two branches or commit specifiers.</p> </li> <li> <p>\
    \ <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward\
    \ merge option.</p> </li> <li> <p> <a>MergeBranchesBySquash</a>, which merges\
    \ two branches using the squash merge option.</p> </li> <li> <p> <a>MergeBranchesByThreeWay</a>,\
    \ which merges two branches using the three-way merge option.</p> </li> </ul>\
    \ <p>Pull requests, by calling the following:</p> <ul> <li> <p> <a>CreatePullRequest</a>,\
    \ which creates a pull request in a specified repository.</p> </li> <li> <p> <a>CreatePullRequestApprovalRule</a>,\
    \ which creates an approval rule for a specified pull request.</p> </li> <li>\
    \ <p> <a>DeletePullRequestApprovalRule</a>, which deletes an approval rule for\
    \ a specified pull request.</p> </li> <li> <p> <a>DescribePullRequestEvents</a>,\
    \ which returns information about one or more pull request events.</p> </li> <li>\
    \ <p> <a>EvaluatePullRequestApprovalRules</a>, which evaluates whether a pull\
    \ request has met all the conditions specified in its associated approval rules.</p>\
    \ </li> <li> <p> <a>GetCommentsForPullRequest</a>, which returns information about\
    \ comments on a specified pull request.</p> </li> <li> <p> <a>GetPullRequest</a>,\
    \ which returns information about a specified pull request.</p> </li> <li> <p>\
    \ <a>GetPullRequestApprovalStates</a>, which returns information about the approval\
    \ states for a specified pull request.</p> </li> <li> <p> <a>GetPullRequestOverrideState</a>,\
    \ which returns information about whether approval rules have been set aside (overriden)\
    \ for a pull request, and if so, the Amazon Resource Name (ARN) of the user or\
    \ identity that overrode the rules and their requirements for the pull request.</p>\
    \ </li> <li> <p> <a>ListPullRequests</a>, which lists all pull requests for a\
    \ repository.</p> </li> <li> <p> <a>MergePullRequestByFastForward</a>, which merges\
    \ the source destination branch of a pull request into the specified destination\
    \ branch for that pull request using the fast-forward merge option.</p> </li>\
    \ <li> <p> <a>MergePullRequestBySquash</a>, which merges the source destination\
    \ branch of a pull request into the specified destination branch for that pull\
    \ request using the squash merge option.</p> </li> <li> <p> <a>MergePullRequestByThreeWay</a>.\
    \ which merges the source destination branch of a pull request into the specified\
    \ destination branch for that pull request using the three-way merge option.</p>\
    \ </li> <li> <p> <a>OverridePullRequestApprovalRules</a>, which sets aside all\
    \ approval rule requirements for a pull request.</p> </li> <li> <p> <a>PostCommentForPullRequest</a>,\
    \ which posts a comment to a pull request at the specified line, file, or request.</p>\
    \ </li> <li> <p> <a>UpdatePullRequestApprovalRuleContent</a>, which updates the\
    \ structure of an approval rule for a pull request.</p> </li> <li> <p> <a>UpdatePullRequestApprovalState</a>,\
    \ which updates the state of an approval on a pull request.</p> </li> <li> <p>\
    \ <a>UpdatePullRequestDescription</a>, which updates the description of a pull\
    \ request.</p> </li> <li> <p> <a>UpdatePullRequestStatus</a>, which updates the\
    \ status of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestTitle</a>,\
    \ which updates the title of a pull request.</p> </li> </ul> <p>Approval rule\
    \ templates, by calling the following:</p> <ul> <li> <p> <a>AssociateApprovalRuleTemplateWithRepository</a>,\
    \ which associates a template with a specified repository. After the template\
    \ is associated with a repository, AWS CodeCommit creates approval rules that\
    \ match the template conditions on every pull request created in the specified\
    \ repository.</p> </li> <li> <p> <a>BatchAssociateApprovalRuleTemplateWithRepositories</a>,\
    \ which associates a template with one or more specified repositories. After the\
    \ template is associated with a repository, AWS CodeCommit creates approval rules\
    \ that match the template conditions on every pull request created in the specified\
    \ repositories.</p> </li> <li> <p> <a>BatchDisassociateApprovalRuleTemplateFromRepositories</a>,\
    \ which removes the association between a template and specified repositories\
    \ so that approval rules based on the template are not automatically created when\
    \ pull requests are created in those repositories.</p> </li> <li> <p> <a>CreateApprovalRuleTemplate</a>,\
    \ which creates a template for approval rules that can then be associated with\
    \ one or more repositories in your AWS account.</p> </li> <li> <p> <a>DeleteApprovalRuleTemplate</a>,\
    \ which deletes the specified template. It does not remove approval rules on pull\
    \ requests already created with the template.</p> </li> <li> <p> <a>DisassociateApprovalRuleTemplateFromRepository</a>,\
    \ which removes the association between a template and a repository so that approval\
    \ rules based on the template are not automatically created when pull requests\
    \ are created in the specified repository.</p> </li> <li> <p> <a>GetApprovalRuleTemplate</a>,\
    \ which returns information about an approval rule template.</p> </li> <li> <p>\
    \ <a>ListApprovalRuleTemplates</a>, which lists all approval rule templates in\
    \ the AWS Region in your AWS account.</p> </li> <li> <p> <a>ListAssociatedApprovalRuleTemplatesForRepository</a>,\
    \ which lists all approval rule templates that are associated with a specified\
    \ repository.</p> </li> <li> <p> <a>ListRepositoriesForApprovalRuleTemplate</a>,\
    \ which lists all repositories associated with the specified approval rule template.</p>\
    \ </li> <li> <p> <a>UpdateApprovalRuleTemplateDescription</a>, which updates the\
    \ description of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateName</a>,\
    \ which updates the name of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateContent</a>,\
    \ which updates the content of an approval rule template.</p> </li> </ul> <p>Comments\
    \ in a repository, by calling the following:</p> <ul> <li> <p> <a>DeleteCommentContent</a>,\
    \ which deletes the content of a comment on a commit in a repository.</p> </li>\
    \ <li> <p> <a>GetComment</a>, which returns information about a comment on a commit.</p>\
    \ </li> <li> <p> <a>GetCommentReactions</a>, which returns information about emoji\
    \ reactions to comments.</p> </li> <li> <p> <a>GetCommentsForComparedCommit</a>,\
    \ which returns information about comments on the comparison between two commit\
    \ specifiers in a repository.</p> </li> <li> <p> <a>PostCommentForComparedCommit</a>,\
    \ which creates a comment on the comparison between two commit specifiers in a\
    \ repository.</p> </li> <li> <p> <a>PostCommentReply</a>, which creates a reply\
    \ to a comment.</p> </li> <li> <p> <a>PutCommentReaction</a>, which creates or\
    \ updates an emoji reaction to a comment.</p> </li> <li> <p> <a>UpdateComment</a>,\
    \ which updates the content of a comment on a commit in a repository.</p> </li>\
    \ </ul> <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling\
    \ the following:</p> <ul> <li> <p> <a>ListTagsForResource</a>, which gets information\
    \ about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p>\
    \ </li> <li> <p> <a>TagResource</a>, which adds or updates tags for a resource\
    \ in AWS CodeCommit.</p> </li> <li> <p> <a>UntagResource</a>, which removes tags\
    \ for a resource in AWS CodeCommit.</p> </li> </ul> <p>Triggers, by calling the\
    \ following:</p> <ul> <li> <p> <a>GetRepositoryTriggers</a>, which returns information\
    \ about triggers configured for a repository.</p> </li> <li> <p> <a>PutRepositoryTriggers</a>,\
    \ which replaces all triggers for a repository and can be used to create or delete\
    \ triggers.</p> </li> <li> <p> <a>TestRepositoryTriggers</a>, which tests the\
    \ functionality of a repository trigger by sending data to the trigger target.</p>\
    \ </li> </ul> <p>For information about how to use AWS CodeCommit, see the <a href=\"\
    https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">AWS CodeCommit\
    \ User Guide</a>.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWS CodeCommit
  version: 2015-04-13
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: codecommit
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/codecommit-2015-04-13.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/codecommit/
servers:
- description: The CodeCommit multi-region endpoint
  url: "http://codecommit.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The CodeCommit multi-region endpoint
  url: "https://codecommit.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The CodeCommit endpoint for China (Beijing) and China (Ningxia)
  url: "http://codecommit.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The CodeCommit endpoint for China (Beijing) and China (Ningxia)
  url: "https://codecommit.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /#X-Amz-Target=CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository:
    post:
      description: "Creates an association between an approval rule template and a\
        \ specified repository. Then, the next time a pull request is created in the\
        \ repository where the destination reference (if specified) matches the destination\
        \ reference (branch) for the pull request, an approval rule that matches the\
        \ template conditions is automatically created for that pull request. If no\
        \ destination references are specified in the template, an approval rule that\
        \ matches the template contents is created for all pull requests in that repository."
      operationId: associate_approval_rule_template_with_repository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateApprovalRuleTemplateWithRepositoryInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
          description: ApprovalRuleTemplateDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRuleTemplatesAssociatedWithRepositoryException'
          description: MaximumRuleTemplatesAssociatedWithRepositoryException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories:
    post:
      description: 'Creates an association between an approval rule template and one
        or more specified repositories. '
      operationId: batch_associate_approval_rule_template_with_repositories
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchAssociateApprovalRuleTemplateWithRepositoriesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchAssociateApprovalRuleTemplateWithRepositoriesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
          description: ApprovalRuleTemplateDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNamesRequiredException'
          description: RepositoryNamesRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryNamesExceededException'
          description: MaximumRepositoryNamesExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.BatchDescribeMergeConflicts:
    post:
      description: Returns information about one or more merge conflicts in the attempted
        merge of two commit specifiers using the squash or three-way merge strategy.
      operationId: batch_describe_merge_conflicts
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.BatchDescribeMergeConflicts
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDescribeMergeConflictsInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDescribeMergeConflictsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeOptionRequiredException'
          description: MergeOptionRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMergeOptionException'
          description: InvalidMergeOptionException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxConflictFilesException'
          description: InvalidMaxConflictFilesException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxMergeHunksException'
          description: InvalidMaxMergeHunksException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
          description: MaximumFileContentToLoadExceededException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
          description: MaximumItemsToCompareExceededException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories:
    post:
      description: 'Removes the association between an approval rule template and
        one or more specified repositories. '
      operationId: batch_disassociate_approval_rule_template_from_repositories
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDisassociateApprovalRuleTemplateFromRepositoriesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
          description: ApprovalRuleTemplateDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNamesRequiredException'
          description: RepositoryNamesRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryNamesExceededException'
          description: MaximumRepositoryNamesExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.BatchGetCommits:
    post:
      description: Returns information about the contents of one or more commits in
        a repository.
      operationId: batch_get_commits
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.BatchGetCommits
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetCommitsInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetCommitsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdsListRequiredException'
          description: CommitIdsListRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdsLimitExceededException'
          description: CommitIdsLimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.BatchGetRepositories:
    post:
      description: <p>Returns information about one or more repositories.</p> <note>
        <p>The description field for a repository accepts all HTML characters and
        all valid Unicode characters. Applications that do not HTML-encode the description
        and display it in a webpage can expose users to potentially malicious code.
        Make sure that you HTML-encode the description field in any application that
        uses this API to display the repository description on a webpage.</p> </note>
      operationId: batch_get_repositories
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.BatchGetRepositories
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetRepositoriesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetRepositoriesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNamesRequiredException'
          description: RepositoryNamesRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryNamesExceededException'
          description: MaximumRepositoryNamesExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.CreateApprovalRuleTemplate:
    post:
      description: "Creates a template for approval rules that can then be associated\
        \ with one or more repositories in your AWS account. When you associate a\
        \ template with a repository, AWS CodeCommit creates an approval rule that\
        \ matches the conditions of the template for all pull requests that meet the\
        \ conditions of the template. For more information, see <a>AssociateApprovalRuleTemplateWithRepository</a>."
      operationId: create_approval_rule_template
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.CreateApprovalRuleTemplate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApprovalRuleTemplateInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApprovalRuleTemplateOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameAlreadyExistsException'
          description: ApprovalRuleTemplateNameAlreadyExistsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateContentRequiredException'
          description: ApprovalRuleTemplateContentRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateContentException'
          description: InvalidApprovalRuleTemplateContentException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateDescriptionException'
          description: InvalidApprovalRuleTemplateDescriptionException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NumberOfRuleTemplatesExceededException'
          description: NumberOfRuleTemplatesExceededException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.CreateBranch:
    post:
      description: "<p>Creates a branch in a repository and points the branch to a\
        \ commit.</p> <note> <p>Calling the create branch operation does not set a\
        \ repository's default branch. To do this, call the update default branch\
        \ operation.</p> </note>"
      operationId: create_branch
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.CreateBranch
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBranchInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameExistsException'
          description: BranchNameExistsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
          description: CommitIdRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.CreateCommit:
    post:
      description: Creates a commit for a repository on the tip of a specified branch.
      operationId: create_commit
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.CreateCommit
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommitInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommitOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdRequiredException'
          description: ParentCommitIdRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParentCommitIdException'
          description: InvalidParentCommitIdException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitDoesNotExistException'
          description: ParentCommitDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdOutdatedException'
          description: ParentCommitIdOutdatedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
          description: BranchDoesNotExistException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
          description: BranchNameIsTagNameException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileEntryRequiredException'
          description: FileEntryRequiredException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileEntriesExceededException'
          description: MaximumFileEntriesExceededException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutFileEntryConflictException'
          description: PutFileEntryConflictException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFileOrContentRequiredException'
          description: SourceFileOrContentRequiredException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentAndSourceFileSpecifiedException'
          description: FileContentAndSourceFileSpecifiedException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SamePathRequestException'
          description: SamePathRequestException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDoesNotExistException'
          description: FileDoesNotExistException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
          description: FileContentSizeLimitExceededException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
          description: FolderContentSizeLimitExceededException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeletionParameterException'
          description: InvalidDeletionParameterException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedSourceFileException'
          description: RestrictedSourceFileException
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModeRequiredException'
          description: FileModeRequiredException
        "505":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
          description: InvalidFileModeException
        "506":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
          description: NameLengthExceededException
        "507":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
          description: InvalidEmailException
        "508":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
          description: CommitMessageLengthExceededException
        "509":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "510":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "511":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "512":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "513":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
        "514":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoChangeException'
          description: NoChangeException
        "515":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileNameConflictsWithDirectoryNameException'
          description: FileNameConflictsWithDirectoryNameException
        "516":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryNameConflictsWithFileNameException'
          description: DirectoryNameConflictsWithFileNameException
        "517":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilePathConflictsWithSubmodulePathException'
          description: FilePathConflictsWithSubmodulePathException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.CreatePullRequest:
    post:
      description: Creates a pull request in the specified repository.
      operationId: create_pull_request
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.CreatePullRequest
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePullRequestInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePullRequestOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRequestTokenRequiredException'
          description: ClientRequestTokenRequiredException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientRequestTokenException'
          description: InvalidClientRequestTokenException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyParameterMismatchException'
          description: IdempotencyParameterMismatchException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceNameRequiredException'
          description: ReferenceNameRequiredException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReferenceNameException'
          description: InvalidReferenceNameException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceDoesNotExistException'
          description: ReferenceDoesNotExistException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceTypeNotSupportedException'
          description: ReferenceTypeNotSupportedException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleRequiredException'
          description: TitleRequiredException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTitleException'
          description: InvalidTitleException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDescriptionException'
          description: InvalidDescriptionException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetsRequiredException'
          description: TargetsRequiredException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetsException'
          description: InvalidTargetsException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetRequiredException'
          description: TargetRequiredException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetException'
          description: InvalidTargetException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleRepositoriesInPullRequestException'
          description: MultipleRepositoriesInPullRequestException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumOpenPullRequestsExceededException'
          description: MaximumOpenPullRequestsExceededException
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceAndDestinationAreSameException'
          description: SourceAndDestinationAreSameException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.CreatePullRequestApprovalRule:
    post:
      description: Creates an approval rule for a pull request.
      operationId: create_pull_request_approval_rule
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.CreatePullRequestApprovalRule
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePullRequestApprovalRuleInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePullRequestApprovalRuleOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleNameRequiredException'
          description: ApprovalRuleNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleNameException'
          description: InvalidApprovalRuleNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleNameAlreadyExistsException'
          description: ApprovalRuleNameAlreadyExistsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleContentRequiredException'
          description: ApprovalRuleContentRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleContentException'
          description: InvalidApprovalRuleContentException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NumberOfRulesExceededException'
          description: NumberOfRulesExceededException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.CreateRepository:
    post:
      description: "Creates a new, empty repository."
      operationId: create_repository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.CreateRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepositoryInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRepositoryOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameExistsException'
          description: RepositoryNameExistsException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryDescriptionException'
          description: InvalidRepositoryDescriptionException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryLimitExceededException'
          description: RepositoryLimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagsMapException'
          description: InvalidTagsMapException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSystemTagUsageException'
          description: InvalidSystemTagUsageException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
          description: TagPolicyException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit:
    post:
      description: "<p>Creates an unreferenced commit that represents the result of\
        \ merging two branches using a specified merge strategy. This can help you\
        \ determine the outcome of a potential merge. This API cannot be used with\
        \ the fast-forward merge strategy because that strategy does not create a\
        \ merge commit.</p> <note> <p>This unreferenced merge commit can only be accessed\
        \ using the GetCommit API or through git commands such as git fetch. To retrieve\
        \ this commit, you must specify its commit ID or otherwise reference it.</p>\
        \ </note>"
      operationId: create_unreferenced_merge_commit
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.CreateUnreferencedMergeCommit
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUnreferencedMergeCommitInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUnreferencedMergeCommitOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeOptionRequiredException'
          description: MergeOptionRequiredException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMergeOptionException'
          description: InvalidMergeOptionException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
          description: InvalidConflictResolutionException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
          description: ManualMergeRequiredException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
          description: MaximumConflictResolutionEntriesExceededException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
          description: MultipleConflictResolutionEntriesException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
          description: ReplacementTypeRequiredException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
          description: InvalidReplacementTypeException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
          description: ReplacementContentRequiredException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
          description: InvalidReplacementContentException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
          description: FileContentSizeLimitExceededException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
          description: FolderContentSizeLimitExceededException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
          description: MaximumFileContentToLoadExceededException
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
          description: MaximumItemsToCompareExceededException
        "505":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
          description: ConcurrentReferenceUpdateException
        "506":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModeRequiredException'
          description: FileModeRequiredException
        "507":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
          description: InvalidFileModeException
        "508":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
          description: NameLengthExceededException
        "509":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
          description: InvalidEmailException
        "510":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
          description: CommitMessageLengthExceededException
        "511":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "512":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "513":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "514":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "515":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.DeleteApprovalRuleTemplate:
    post:
      description: Deletes a specified approval rule template. Deleting a template
        does not remove approval rules on pull requests already created with the template.
      operationId: delete_approval_rule_template
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.DeleteApprovalRuleTemplate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteApprovalRuleTemplateInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApprovalRuleTemplateOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateInUseException'
          description: ApprovalRuleTemplateInUseException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.DeleteBranch:
    post:
      description: "Deletes a branch from a repository, unless that branch is the\
        \ default branch for the repository. "
      operationId: delete_branch
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.DeleteBranch
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBranchInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBranchOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultBranchCannotBeDeletedException'
          description: DefaultBranchCannotBeDeletedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.DeleteCommentContent:
    post:
      description: "Deletes the content of a comment made on a change, file, or commit\
        \ in a repository."
      operationId: delete_comment_content
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.DeleteCommentContent
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommentContentInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCommentContentOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
          description: CommentDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
          description: CommentIdRequiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
          description: InvalidCommentIdException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
          description: CommentDeletedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.DeleteFile:
    post:
      description: Deletes a specified file from a specified branch. A commit is created
        on the branch that contains the revision. The file still exists in the commits
        earlier to the commit that contains the deletion.
      operationId: delete_file
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.DeleteFile
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFileInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFileOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdRequiredException'
          description: ParentCommitIdRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParentCommitIdException'
          description: InvalidParentCommitIdException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitDoesNotExistException'
          description: ParentCommitDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdOutdatedException'
          description: ParentCommitIdOutdatedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDoesNotExistException'
          description: FileDoesNotExistException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
          description: BranchDoesNotExistException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
          description: BranchNameIsTagNameException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
          description: NameLengthExceededException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
          description: InvalidEmailException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
          description: CommitMessageLengthExceededException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.DeletePullRequestApprovalRule:
    post:
      description: "Deletes an approval rule from a specified pull request. Approval\
        \ rules can be deleted from a pull request only if the pull request is open,\
        \ and if the approval rule was created specifically for a pull request and\
        \ not generated from an approval rule template associated with the repository\
        \ where the pull request was created. You cannot delete an approval rule from\
        \ a merged or closed pull request."
      operationId: delete_pull_request_approval_rule
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.DeletePullRequestApprovalRule
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePullRequestApprovalRuleInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePullRequestApprovalRuleOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleNameRequiredException'
          description: ApprovalRuleNameRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleNameException'
          description: InvalidApprovalRuleNameException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CannotDeleteApprovalRuleFromTemplateException'
          description: CannotDeleteApprovalRuleFromTemplateException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.DeleteRepository:
    post:
      description: "<p>Deletes a repository. If a specified repository was already\
        \ deleted, a null repository ID is returned.</p> <important> <p>Deleting a\
        \ repository also deletes all associated objects and metadata. After a repository\
        \ is deleted, all future push calls to the deleted repository fail.</p> </important>"
      operationId: delete_repository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.DeleteRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRepositoryInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepositoryOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.DescribeMergeConflicts:
    post:
      description: "Returns information about one or more merge conflicts in the attempted\
        \ merge of two commit specifiers using the squash or three-way merge strategy.\
        \ If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE,\
        \ an exception is thrown."
      operationId: describe_merge_conflicts
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxMergeHunks
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.DescribeMergeConflicts
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeMergeConflictsInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeMergeConflictsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeOptionRequiredException'
          description: MergeOptionRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMergeOptionException'
          description: InvalidMergeOptionException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDoesNotExistException'
          description: FileDoesNotExistException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxMergeHunksException'
          description: InvalidMaxMergeHunksException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
          description: MaximumFileContentToLoadExceededException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
          description: MaximumItemsToCompareExceededException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.DescribePullRequestEvents:
    post:
      description: Returns information about one or more pull request events.
      operationId: describe_pull_request_events
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.DescribePullRequestEvents
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribePullRequestEventsInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribePullRequestEventsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestEventTypeException'
          description: InvalidPullRequestEventTypeException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidActorArnException'
          description: InvalidActorArnException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorDoesNotExistException'
          description: ActorDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
          description: InvalidMaxResultsException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository:
    post:
      description: Removes the association between a template and a repository so
        that approval rules based on the template are not automatically created when
        pull requests are created in the specified repository. This does not delete
        any approval rules previously created for pull requests through the template
        association.
      operationId: disassociate_approval_rule_template_from_repository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisassociateApprovalRuleTemplateFromRepositoryInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
          description: ApprovalRuleTemplateDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.EvaluatePullRequestApprovalRules:
    post:
      description: Evaluates whether a pull request has met all the conditions specified
        in its associated approval rules.
      operationId: evaluate_pull_request_approval_rules
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.EvaluatePullRequestApprovalRules
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluatePullRequestApprovalRulesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluatePullRequestApprovalRulesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
          description: InvalidRevisionIdException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
          description: RevisionIdRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionNotCurrentException'
          description: RevisionNotCurrentException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetApprovalRuleTemplate:
    post:
      description: Returns information about a specified approval rule template.
      operationId: get_approval_rule_template
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetApprovalRuleTemplate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetApprovalRuleTemplateInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApprovalRuleTemplateOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
          description: ApprovalRuleTemplateDoesNotExistException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetBlob:
    post:
      description: Returns the base-64 encoded content of an individual blob in a
        repository.
      operationId: get_blob
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetBlob
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBlobInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlobOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobIdRequiredException'
          description: BlobIdRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBlobIdException'
          description: InvalidBlobIdException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobIdDoesNotExistException'
          description: BlobIdDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTooLargeException'
          description: FileTooLargeException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetBranch:
    post:
      description: "Returns information about a repository branch, including its name\
        \ and the last commit ID."
      operationId: get_branch
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetBranch
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBranchInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBranchOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
          description: BranchDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetComment:
    post:
      description: "<p>Returns the content of a comment made on a change, file, or\
        \ commit in a repository. </p> <note> <p>Reaction counts might include numbers\
        \ from user identities who were deleted after the reaction was made. For a\
        \ count of reactions from active identities, use GetCommentReactions.</p>\
        \ </note>"
      operationId: get_comment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetComment
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
          description: CommentDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
          description: CommentDeletedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
          description: CommentIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
          description: InvalidCommentIdException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetCommentReactions:
    post:
      description: Returns information about reactions to a specified comment ID.
        Reactions from users who have been deleted will not be included in the count.
      operationId: get_comment_reactions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetCommentReactions
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentReactionsInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentReactionsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
          description: CommentDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
          description: CommentIdRequiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
          description: InvalidCommentIdException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReactionUserArnException'
          description: InvalidReactionUserArnException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
          description: InvalidMaxResultsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
          description: CommentDeletedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetCommentsForComparedCommit:
    post:
      description: "<p>Returns information about comments made on the comparison between\
        \ two commits.</p> <note> <p>Reaction counts might include numbers from user\
        \ identities who were deleted after the reaction was made. For a count of\
        \ reactions from active identities, use GetCommentReactions.</p> </note>"
      operationId: get_comments_for_compared_commit
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetCommentsForComparedCommit
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentsForComparedCommitInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsForComparedCommitOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
          description: CommitIdRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
          description: InvalidMaxResultsException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetCommentsForPullRequest:
    post:
      description: "<p>Returns comments made on a pull request.</p> <note> <p>Reaction\
        \ counts might include numbers from user identities who were deleted after\
        \ the reaction was made. For a count of reactions from active identities,\
        \ use GetCommentReactions.</p> </note>"
      operationId: get_comments_for_pull_request
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetCommentsForPullRequest
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentsForPullRequestInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsForPullRequestOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
          description: CommitIdRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
          description: InvalidMaxResultsException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
          description: RepositoryNotAssociatedWithPullRequestException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetCommit:
    post:
      description: "Returns information about a commit, including commit message and\
        \ committer information."
      operationId: get_commit
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetCommit
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommitInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommitOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
          description: CommitIdRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdDoesNotExistException'
          description: CommitIdDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetDifferences:
    post:
      description: "Returns information about the differences in a valid commit specifier\
        \ (such as a branch, tag, HEAD, commit ID, or other fully qualified reference).\
        \ Results can be limited to a specified path."
      operationId: get_differences
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetDifferences
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDifferencesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDifferencesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
          description: InvalidMaxResultsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathDoesNotExistException'
          description: PathDoesNotExistException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetFile:
    post:
      description: Returns the base-64 encoded contents of a specified file and its
        metadata.
      operationId: get_file
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetFile
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFileInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDoesNotExistException'
          description: FileDoesNotExistException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTooLargeException'
          description: FileTooLargeException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetFolder:
    post:
      description: Returns the contents of a specified folder in a repository.
      operationId: get_folder
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetFolder
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFolderInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderDoesNotExistException'
          description: FolderDoesNotExistException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetMergeCommit:
    post:
      description: Returns information about a specified merge commit.
      operationId: get_merge_commit
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetMergeCommit
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMergeCommitInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMergeCommitOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetMergeConflicts:
    post:
      description: Returns information about merge conflicts between the before and
        after commit IDs for a pull request in a repository.
      operationId: get_merge_conflicts
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxConflictFiles
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetMergeConflicts
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMergeConflictsInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMergeConflictsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeOptionRequiredException'
          description: MergeOptionRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMergeOptionException'
          description: InvalidMergeOptionException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxConflictFilesException'
          description: InvalidMaxConflictFilesException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDestinationCommitSpecifierException'
          description: InvalidDestinationCommitSpecifierException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSourceCommitSpecifierException'
          description: InvalidSourceCommitSpecifierException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
          description: MaximumFileContentToLoadExceededException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
          description: MaximumItemsToCompareExceededException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetMergeOptions:
    post:
      description: "Returns information about the merge options available for merging\
        \ two specified branches. For details about why a merge option is not available,\
        \ use GetMergeConflicts or DescribeMergeConflicts."
      operationId: get_merge_options
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetMergeOptions
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMergeOptionsInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMergeOptionsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
          description: MaximumFileContentToLoadExceededException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
          description: MaximumItemsToCompareExceededException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetPullRequest:
    post:
      description: Gets information about a pull request in a specified repository.
      operationId: get_pull_request
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetPullRequest
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPullRequestInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPullRequestOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetPullRequestApprovalStates:
    post:
      description: Gets information about the approval states for a specified pull
        request. Approval states only apply to pull requests that have one or more
        approval rules applied to them.
      operationId: get_pull_request_approval_states
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetPullRequestApprovalStates
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPullRequestApprovalStatesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPullRequestApprovalStatesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
          description: InvalidRevisionIdException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
          description: RevisionIdRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetPullRequestOverrideState:
    post:
      description: "Returns information about whether approval rules have been set\
        \ aside (overridden) for a pull request, and if so, the Amazon Resource Name\
        \ (ARN) of the user or identity that overrode the rules and their requirements\
        \ for the pull request."
      operationId: get_pull_request_override_state
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetPullRequestOverrideState
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPullRequestOverrideStateInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPullRequestOverrideStateOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
          description: InvalidRevisionIdException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
          description: RevisionIdRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetRepository:
    post:
      description: <p>Returns information about a repository.</p> <note> <p>The description
        field for a repository accepts all HTML characters and all valid Unicode characters.
        Applications that do not HTML-encode the description and display it in a webpage
        can expose users to potentially malicious code. Make sure that you HTML-encode
        the description field in any application that uses this API to display the
        repository description on a webpage.</p> </note>
      operationId: get_repository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRepositoryInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepositoryOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.GetRepositoryTriggers:
    post:
      description: Gets information about triggers configured for a repository.
      operationId: get_repository_triggers
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.GetRepositoryTriggers
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRepositoryTriggersInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepositoryTriggersOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.ListApprovalRuleTemplates:
    post:
      description: "Lists all approval rule templates in the specified AWS Region\
        \ in your AWS account. If an AWS Region is not specified, the AWS Region where\
        \ you are signed in is used."
      operationId: list_approval_rule_templates
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.ListApprovalRuleTemplates
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListApprovalRuleTemplatesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApprovalRuleTemplatesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
          description: InvalidMaxResultsException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository:
    post:
      description: Lists all approval rule templates that are associated with a specified
        repository.
      operationId: list_associated_approval_rule_templates_for_repository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAssociatedApprovalRuleTemplatesForRepositoryInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssociatedApprovalRuleTemplatesForRepositoryOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
          description: InvalidMaxResultsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.ListBranches:
    post:
      description: Gets information about one or more branches in a repository.
      operationId: list_branches
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.ListBranches
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBranchesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBranchesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.ListPullRequests:
    post:
      description: Returns a list of pull requests for a specified repository. The
        return list can be refined by pull request status or pull request author ARN.
      operationId: list_pull_requests
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.ListPullRequests
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPullRequestsInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPullRequestsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestStatusException'
          description: InvalidPullRequestStatusException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAuthorArnException'
          description: InvalidAuthorArnException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDoesNotExistException'
          description: AuthorDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
          description: InvalidMaxResultsException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.ListRepositories:
    post:
      description: Gets information about one or more repositories.
      operationId: list_repositories
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.ListRepositories
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRepositoriesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepositoriesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSortByException'
          description: InvalidSortByException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOrderException'
          description: InvalidOrderException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate:
    post:
      description: Lists all repositories associated with the specified approval rule
        template.
      operationId: list_repositories_for_approval_rule_template
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRepositoriesForApprovalRuleTemplateInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepositoriesForApprovalRuleTemplateOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
          description: ApprovalRuleTemplateDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMaxResultsException'
          description: InvalidMaxResultsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContinuationTokenException'
          description: InvalidContinuationTokenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.ListTagsForResource:
    post:
      description: "Gets information about AWS tags for a specified Amazon Resource\
        \ Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit,\
        \ see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\"\
        >CodeCommit Resources and Operations</a> in the<i> AWS CodeCommit User Guide</i>."
      operationId: list_tags_for_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.ListTagsForResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceArnRequiredException'
          description: ResourceArnRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidResourceArnException'
          description: InvalidResourceArnException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.MergeBranchesByFastForward:
    post:
      description: Merges two branches using the fast-forward merge strategy.
      operationId: merge_branches_by_fast_forward
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.MergeBranchesByFastForward
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeBranchesByFastForwardInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeBranchesByFastForwardOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetBranchException'
          description: InvalidTargetBranchException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
          description: BranchNameIsTagNameException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
          description: BranchDoesNotExistException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
          description: ManualMergeRequiredException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
          description: ConcurrentReferenceUpdateException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.MergeBranchesBySquash:
    post:
      description: Merges two branches using the squash merge strategy.
      operationId: merge_branches_by_squash
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.MergeBranchesBySquash
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeBranchesBySquashInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeBranchesBySquashOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetBranchException'
          description: InvalidTargetBranchException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
          description: BranchNameIsTagNameException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
          description: BranchDoesNotExistException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
          description: ManualMergeRequiredException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
          description: InvalidConflictResolutionException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
          description: MaximumConflictResolutionEntriesExceededException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
          description: MultipleConflictResolutionEntriesException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
          description: ReplacementTypeRequiredException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
          description: InvalidReplacementTypeException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
          description: ReplacementContentRequiredException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
          description: InvalidReplacementContentException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
          description: FileContentSizeLimitExceededException
        "505":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
          description: FolderContentSizeLimitExceededException
        "506":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
          description: MaximumFileContentToLoadExceededException
        "507":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
          description: MaximumItemsToCompareExceededException
        "508":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModeRequiredException'
          description: FileModeRequiredException
        "509":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
          description: InvalidFileModeException
        "510":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
          description: NameLengthExceededException
        "511":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
          description: InvalidEmailException
        "512":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
          description: CommitMessageLengthExceededException
        "513":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
          description: ConcurrentReferenceUpdateException
        "514":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "515":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "516":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "517":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "518":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.MergeBranchesByThreeWay:
    post:
      description: Merges two specified branches using the three-way merge strategy.
      operationId: merge_branches_by_three_way
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.MergeBranchesByThreeWay
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeBranchesByThreeWayInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeBranchesByThreeWayOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitRequiredException'
          description: CommitRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitException'
          description: InvalidCommitException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTargetBranchException'
          description: InvalidTargetBranchException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
          description: BranchNameIsTagNameException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
          description: BranchDoesNotExistException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
          description: ManualMergeRequiredException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
          description: ConcurrentReferenceUpdateException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
          description: InvalidConflictResolutionException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
          description: MaximumConflictResolutionEntriesExceededException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
          description: MultipleConflictResolutionEntriesException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
          description: ReplacementTypeRequiredException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
          description: InvalidReplacementTypeException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
          description: ReplacementContentRequiredException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
          description: InvalidReplacementContentException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "505":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
          description: FileContentSizeLimitExceededException
        "506":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
          description: FolderContentSizeLimitExceededException
        "507":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
          description: MaximumFileContentToLoadExceededException
        "508":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
          description: MaximumItemsToCompareExceededException
        "509":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModeRequiredException'
          description: FileModeRequiredException
        "510":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
          description: InvalidFileModeException
        "511":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
          description: NameLengthExceededException
        "512":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
          description: InvalidEmailException
        "513":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
          description: CommitMessageLengthExceededException
        "514":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "515":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "516":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "517":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "518":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.MergePullRequestByFastForward:
    post:
      description: "Attempts to merge the source commit of a pull request into the\
        \ specified destination branch for that pull request at the specified commit\
        \ using the fast-forward merge strategy. If the merge is successful, it closes\
        \ the pull request."
      operationId: merge_pull_request_by_fast_forward
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.MergePullRequestByFastForward
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergePullRequestByFastForwardInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergePullRequestByFastForwardOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
          description: ManualMergeRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipOfSourceReferenceIsDifferentException'
          description: TipOfSourceReferenceIsDifferentException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceDoesNotExistException'
          description: ReferenceDoesNotExistException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
          description: RepositoryNotAssociatedWithPullRequestException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
          description: ConcurrentReferenceUpdateException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestApprovalRulesNotSatisfiedException'
          description: PullRequestApprovalRulesNotSatisfiedException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.MergePullRequestBySquash:
    post:
      description: "Attempts to merge the source commit of a pull request into the\
        \ specified destination branch for that pull request at the specified commit\
        \ using the squash merge strategy. If the merge is successful, it closes the\
        \ pull request."
      operationId: merge_pull_request_by_squash
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.MergePullRequestBySquash
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergePullRequestBySquashInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergePullRequestBySquashOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
          description: ManualMergeRequiredException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipOfSourceReferenceIsDifferentException'
          description: TipOfSourceReferenceIsDifferentException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
          description: NameLengthExceededException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
          description: InvalidEmailException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
          description: CommitMessageLengthExceededException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
          description: InvalidConflictResolutionException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
          description: ReplacementTypeRequiredException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
          description: InvalidReplacementTypeException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
          description: MultipleConflictResolutionEntriesException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
          description: ReplacementContentRequiredException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
          description: MaximumConflictResolutionEntriesExceededException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
          description: ConcurrentReferenceUpdateException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
          description: InvalidFileModeException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
          description: InvalidReplacementContentException
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
          description: FileContentSizeLimitExceededException
        "505":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
          description: FolderContentSizeLimitExceededException
        "506":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
          description: MaximumFileContentToLoadExceededException
        "507":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
          description: MaximumItemsToCompareExceededException
        "508":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "509":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "510":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "511":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
          description: RepositoryNotAssociatedWithPullRequestException
        "512":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestApprovalRulesNotSatisfiedException'
          description: PullRequestApprovalRulesNotSatisfiedException
        "513":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "514":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "515":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "516":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "517":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay:
    post:
      description: "Attempts to merge the source commit of a pull request into the\
        \ specified destination branch for that pull request at the specified commit\
        \ using the three-way merge strategy. If the merge is successful, it closes\
        \ the pull request."
      operationId: merge_pull_request_by_three_way
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.MergePullRequestByThreeWay
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergePullRequestByThreeWayInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergePullRequestByThreeWayOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualMergeRequiredException'
          description: ManualMergeRequiredException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipOfSourceReferenceIsDifferentException'
          description: TipOfSourceReferenceIsDifferentException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TipsDivergenceExceededException'
          description: TipsDivergenceExceededException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
          description: NameLengthExceededException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
          description: InvalidEmailException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
          description: CommitMessageLengthExceededException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictDetailLevelException'
          description: InvalidConflictDetailLevelException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionStrategyException'
          description: InvalidConflictResolutionStrategyException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidConflictResolutionException'
          description: InvalidConflictResolutionException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementTypeRequiredException'
          description: ReplacementTypeRequiredException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementTypeException'
          description: InvalidReplacementTypeException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleConflictResolutionEntriesException'
          description: MultipleConflictResolutionEntriesException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplacementContentRequiredException'
          description: ReplacementContentRequiredException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumConflictResolutionEntriesExceededException'
          description: MaximumConflictResolutionEntriesExceededException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
          description: InvalidFileModeException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReplacementContentException'
          description: InvalidReplacementContentException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
          description: FileContentSizeLimitExceededException
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
          description: FolderContentSizeLimitExceededException
        "505":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumFileContentToLoadExceededException'
          description: MaximumFileContentToLoadExceededException
        "506":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumItemsToCompareExceededException'
          description: MaximumItemsToCompareExceededException
        "507":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "508":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "509":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "510":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
          description: RepositoryNotAssociatedWithPullRequestException
        "511":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentReferenceUpdateException'
          description: ConcurrentReferenceUpdateException
        "512":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestApprovalRulesNotSatisfiedException'
          description: PullRequestApprovalRulesNotSatisfiedException
        "513":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "514":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "515":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "516":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "517":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.OverridePullRequestApprovalRules:
    post:
      description: Sets aside (overrides) all approval rule requirements for a specified
        pull request.
      operationId: override_pull_request_approval_rules
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.OverridePullRequestApprovalRules
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverridePullRequestApprovalRulesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
          description: InvalidRevisionIdException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
          description: RevisionIdRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOverrideStatusException'
          description: InvalidOverrideStatusException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverrideStatusRequiredException'
          description: OverrideStatusRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverrideAlreadySetException'
          description: OverrideAlreadySetException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionNotCurrentException'
          description: RevisionNotCurrentException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.PostCommentForComparedCommit:
    post:
      description: Posts a comment on the comparison between two commits.
      operationId: post_comment_for_compared_commit
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.PostCommentForComparedCommit
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommentForComparedCommitInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommentForComparedCommitOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRequestTokenRequiredException'
          description: ClientRequestTokenRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientRequestTokenException'
          description: InvalidClientRequestTokenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyParameterMismatchException'
          description: IdempotencyParameterMismatchException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentRequiredException'
          description: CommentContentRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentSizeLimitExceededException'
          description: CommentContentSizeLimitExceededException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileLocationException'
          description: InvalidFileLocationException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRelativeFileVersionEnumException'
          description: InvalidRelativeFileVersionEnumException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFilePositionException'
          description: InvalidFilePositionException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
          description: CommitIdRequiredException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeforeCommitIdAndAfterCommitIdAreSameException'
          description: BeforeCommitIdAndAfterCommitIdAreSameException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathDoesNotExistException'
          description: PathDoesNotExistException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.PostCommentForPullRequest:
    post:
      description: Posts a comment on a pull request.
      operationId: post_comment_for_pull_request
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.PostCommentForPullRequest
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommentForPullRequestInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommentForPullRequestOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotAssociatedWithPullRequestException'
          description: RepositoryNotAssociatedWithPullRequestException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRequestTokenRequiredException'
          description: ClientRequestTokenRequiredException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientRequestTokenException'
          description: InvalidClientRequestTokenException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyParameterMismatchException'
          description: IdempotencyParameterMismatchException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentRequiredException'
          description: CommentContentRequiredException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentSizeLimitExceededException'
          description: CommentContentSizeLimitExceededException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileLocationException'
          description: InvalidFileLocationException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRelativeFileVersionEnumException'
          description: InvalidRelativeFileVersionEnumException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFilePositionException'
          description: InvalidFilePositionException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitIdRequiredException'
          description: CommitIdRequiredException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommitIdException'
          description: InvalidCommitIdException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeforeCommitIdAndAfterCommitIdAreSameException'
          description: BeforeCommitIdAndAfterCommitIdAreSameException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDoesNotExistException'
          description: CommitDoesNotExistException
        "505":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "506":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathDoesNotExistException'
          description: PathDoesNotExistException
        "507":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.PostCommentReply:
    post:
      description: Posts a comment in reply to an existing comment on a comparison
        between commits or a pull request.
      operationId: post_comment_reply
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.PostCommentReply
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommentReplyInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommentReplyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRequestTokenRequiredException'
          description: ClientRequestTokenRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientRequestTokenException'
          description: InvalidClientRequestTokenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyParameterMismatchException'
          description: IdempotencyParameterMismatchException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentRequiredException'
          description: CommentContentRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentSizeLimitExceededException'
          description: CommentContentSizeLimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
          description: CommentDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
          description: CommentIdRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
          description: InvalidCommentIdException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.PutCommentReaction:
    post:
      description: "Adds or updates a reaction to a specified comment for the user\
        \ whose identity is used to make the request. You can only add or update a\
        \ reaction for yourself. You cannot add, modify, or delete a reaction for\
        \ another user."
      operationId: put_comment_reaction
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.PutCommentReaction
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCommentReactionInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
          description: CommentDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
          description: CommentIdRequiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
          description: InvalidCommentIdException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidReactionValueException'
          description: InvalidReactionValueException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionValueRequiredException'
          description: ReactionValueRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionLimitExceededException'
          description: ReactionLimitExceededException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
          description: CommentDeletedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.PutFile:
    post:
      description: "Adds or updates a file in a branch in an AWS CodeCommit repository,\
        \ and generates a commit for the addition in the specified branch."
      operationId: put_file
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.PutFile
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFileInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutFileOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdRequiredException'
          description: ParentCommitIdRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParentCommitIdException'
          description: InvalidParentCommitIdException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitDoesNotExistException'
          description: ParentCommitDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentCommitIdOutdatedException'
          description: ParentCommitIdOutdatedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentRequiredException'
          description: FileContentRequiredException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSizeLimitExceededException'
          description: FileContentSizeLimitExceededException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderContentSizeLimitExceededException'
          description: FolderContentSizeLimitExceededException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathRequiredException'
          description: PathRequiredException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPathException'
          description: InvalidPathException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
          description: BranchDoesNotExistException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameIsTagNameException'
          description: BranchNameIsTagNameException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFileModeException'
          description: InvalidFileModeException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameLengthExceededException'
          description: NameLengthExceededException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailException'
          description: InvalidEmailException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitMessageLengthExceededException'
          description: CommitMessageLengthExceededException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDeletionParameterException'
          description: InvalidDeletionParameterException
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "505":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
        "506":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SameFileContentException'
          description: SameFileContentException
        "507":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileNameConflictsWithDirectoryNameException'
          description: FileNameConflictsWithDirectoryNameException
        "508":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryNameConflictsWithFileNameException'
          description: DirectoryNameConflictsWithFileNameException
        "509":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilePathConflictsWithSubmodulePathException'
          description: FilePathConflictsWithSubmodulePathException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.PutRepositoryTriggers:
    post:
      description: Replaces all triggers for a repository. Used to create or delete
        triggers.
      operationId: put_repository_triggers
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.PutRepositoryTriggers
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRepositoryTriggersInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutRepositoryTriggersOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggersListRequiredException'
          description: RepositoryTriggersListRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryTriggersExceededException'
          description: MaximumRepositoryTriggersExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerNameException'
          description: InvalidRepositoryTriggerNameException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerDestinationArnException'
          description: InvalidRepositoryTriggerDestinationArnException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerRegionException'
          description: InvalidRepositoryTriggerRegionException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerCustomDataException'
          description: InvalidRepositoryTriggerCustomDataException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumBranchesExceededException'
          description: MaximumBranchesExceededException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerBranchNameException'
          description: InvalidRepositoryTriggerBranchNameException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerEventsException'
          description: InvalidRepositoryTriggerEventsException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerNameRequiredException'
          description: RepositoryTriggerNameRequiredException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerDestinationArnRequiredException'
          description: RepositoryTriggerDestinationArnRequiredException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerBranchNameListRequiredException'
          description: RepositoryTriggerBranchNameListRequiredException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerEventsListRequiredException'
          description: RepositoryTriggerEventsListRequiredException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.TagResource:
    post:
      description: "Adds or updates tags for a resource in AWS CodeCommit. For a list\
        \ of valid resources in AWS CodeCommit, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\"\
        >CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>."
      operationId: tag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.TagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceArnRequiredException'
          description: ResourceArnRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidResourceArnException'
          description: InvalidResourceArnException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsMapRequiredException'
          description: TagsMapRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagsMapException'
          description: InvalidTagsMapException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSystemTagUsageException'
          description: InvalidSystemTagUsageException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
          description: TagPolicyException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.TestRepositoryTriggers:
    post:
      description: "Tests the functionality of repository triggers by sending information\
        \ to the trigger target. If real data is available in the repository, the\
        \ test sends data from the last commit. If no data is available, sample data\
        \ is generated."
      operationId: test_repository_triggers
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.TestRepositoryTriggers
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRepositoryTriggersInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestRepositoryTriggersOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggersListRequiredException'
          description: RepositoryTriggersListRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumRepositoryTriggersExceededException'
          description: MaximumRepositoryTriggersExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerNameException'
          description: InvalidRepositoryTriggerNameException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerDestinationArnException'
          description: InvalidRepositoryTriggerDestinationArnException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerRegionException'
          description: InvalidRepositoryTriggerRegionException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerCustomDataException'
          description: InvalidRepositoryTriggerCustomDataException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumBranchesExceededException'
          description: MaximumBranchesExceededException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerBranchNameException'
          description: InvalidRepositoryTriggerBranchNameException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryTriggerEventsException'
          description: InvalidRepositoryTriggerEventsException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerNameRequiredException'
          description: RepositoryTriggerNameRequiredException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerDestinationArnRequiredException'
          description: RepositoryTriggerDestinationArnRequiredException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerBranchNameListRequiredException'
          description: RepositoryTriggerBranchNameListRequiredException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryTriggerEventsListRequiredException'
          description: RepositoryTriggerEventsListRequiredException
        "496":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "497":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "498":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "499":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UntagResource:
    post:
      description: "Removes tags for a resource in AWS CodeCommit. For a list of valid\
        \ resources in AWS CodeCommit, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\"\
        >CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>."
      operationId: untag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UntagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceArnRequiredException'
          description: ResourceArnRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidResourceArnException'
          description: InvalidResourceArnException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagKeysListRequiredException'
          description: TagKeysListRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagKeysListException'
          description: InvalidTagKeysListException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSystemTagUsageException'
          description: InvalidSystemTagUsageException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
          description: TagPolicyException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateContent:
    post:
      description: "Updates the content of an approval rule template. You can change\
        \ the number of required approvals, the membership of the approval rule, and\
        \ whether an approval pool is defined."
      operationId: update_approval_rule_template_content
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdateApprovalRuleTemplateContent
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApprovalRuleTemplateContentInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApprovalRuleTemplateContentOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
          description: ApprovalRuleTemplateDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateContentException'
          description: InvalidApprovalRuleTemplateContentException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRuleContentSha256Exception'
          description: InvalidRuleContentSha256Exception
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateContentRequiredException'
          description: ApprovalRuleTemplateContentRequiredException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateDescription:
    post:
      description: Updates the description for a specified approval rule template.
      operationId: update_approval_rule_template_description
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdateApprovalRuleTemplateDescription
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApprovalRuleTemplateDescriptionInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApprovalRuleTemplateDescriptionOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
          description: ApprovalRuleTemplateDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateDescriptionException'
          description: InvalidApprovalRuleTemplateDescriptionException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateName:
    post:
      description: Updates the name of a specified approval rule template.
      operationId: update_approval_rule_template_name
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdateApprovalRuleTemplateName
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApprovalRuleTemplateNameInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApprovalRuleTemplateNameOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleTemplateNameException'
          description: InvalidApprovalRuleTemplateNameException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameRequiredException'
          description: ApprovalRuleTemplateNameRequiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateDoesNotExistException'
          description: ApprovalRuleTemplateDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleTemplateNameAlreadyExistsException'
          description: ApprovalRuleTemplateNameAlreadyExistsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdateComment:
    post:
      description: Replaces the contents of a comment.
      operationId: update_comment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdateComment
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCommentOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentRequiredException'
          description: CommentContentRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentContentSizeLimitExceededException'
          description: CommentContentSizeLimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDoesNotExistException'
          description: CommentDoesNotExistException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIdRequiredException'
          description: CommentIdRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCommentIdException'
          description: InvalidCommentIdException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentNotCreatedByCallerException'
          description: CommentNotCreatedByCallerException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeletedException'
          description: CommentDeletedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdateDefaultBranch:
    post:
      description: "<p>Sets or changes the default branch name for the specified repository.</p>\
        \ <note> <p>If you use this operation to change the default branch name to\
        \ the current default branch name, a success message is returned even though\
        \ the default branch did not change.</p> </note>"
      operationId: update_default_branch
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdateDefaultBranch
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDefaultBranchInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchNameRequiredException'
          description: BranchNameRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBranchNameException'
          description: InvalidBranchNameException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDoesNotExistException'
          description: BranchDoesNotExistException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalRuleContent:
    post:
      description: "Updates the structure of an approval rule created specifically\
        \ for a pull request. For example, you can change the number of required approvers\
        \ and the approval pool for approvers. "
      operationId: update_pull_request_approval_rule_content
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdatePullRequestApprovalRuleContent
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestApprovalRuleContentInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePullRequestApprovalRuleContentOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleNameRequiredException'
          description: ApprovalRuleNameRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleNameException'
          description: InvalidApprovalRuleNameException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleDoesNotExistException'
          description: ApprovalRuleDoesNotExistException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRuleContentSha256Exception'
          description: InvalidRuleContentSha256Exception
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRuleContentRequiredException'
          description: ApprovalRuleContentRequiredException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalRuleContentException'
          description: InvalidApprovalRuleContentException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CannotModifyApprovalRuleFromTemplateException'
          description: CannotModifyApprovalRuleFromTemplateException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalState:
    post:
      description: Updates the state of a user's approval on a pull request. The user
        is derived from the signed-in account when the request is made.
      operationId: update_pull_request_approval_state
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdatePullRequestApprovalState
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestApprovalStateInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRevisionIdException'
          description: InvalidRevisionIdException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionIdRequiredException'
          description: RevisionIdRequiredException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidApprovalStateException'
          description: InvalidApprovalStateException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalStateRequiredException'
          description: ApprovalStateRequiredException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestCannotBeApprovedByAuthorException'
          description: PullRequestCannotBeApprovedByAuthorException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionNotCurrentException'
          description: RevisionNotCurrentException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumNumberOfApprovalsExceededException'
          description: MaximumNumberOfApprovalsExceededException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "492":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "493":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "494":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "495":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestDescription:
    post:
      description: Replaces the contents of the description of a pull request.
      operationId: update_pull_request_description
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdatePullRequestDescription
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestDescriptionInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePullRequestDescriptionOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDescriptionException'
          description: InvalidDescriptionException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestStatus:
    post:
      description: 'Updates the status of a pull request. '
      operationId: update_pull_request_status
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdatePullRequestStatus
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestStatusInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePullRequestStatusOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestStatusUpdateException'
          description: InvalidPullRequestStatusUpdateException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestStatusException'
          description: InvalidPullRequestStatusException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestStatusRequiredException'
          description: PullRequestStatusRequiredException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestTitle:
    post:
      description: Replaces the title of a pull request.
      operationId: update_pull_request_title
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdatePullRequestTitle
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullRequestTitleInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePullRequestTitleOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestDoesNotExistException'
          description: PullRequestDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPullRequestIdException'
          description: InvalidPullRequestIdException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestIdRequiredException'
          description: PullRequestIdRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleRequiredException'
          description: TitleRequiredException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTitleException'
          description: InvalidTitleException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestAlreadyClosedException'
          description: PullRequestAlreadyClosedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryDescription:
    post:
      description: <p>Sets or changes the comment or description for a repository.</p>
        <note> <p>The description field for a repository accepts all HTML characters
        and all valid Unicode characters. Applications that do not HTML-encode the
        description and display it in a webpage can expose users to potentially malicious
        code. Make sure that you HTML-encode the description field in any application
        that uses this API to display the repository description on a webpage.</p>
        </note>
      operationId: update_repository_description
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdateRepositoryDescription
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRepositoryDescriptionInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryDescriptionException'
          description: InvalidRepositoryDescriptionException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionIntegrityChecksFailedException'
          description: EncryptionIntegrityChecksFailedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyAccessDeniedException'
          description: EncryptionKeyAccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyDisabledException'
          description: EncryptionKeyDisabledException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyNotFoundException'
          description: EncryptionKeyNotFoundException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionKeyUnavailableException'
          description: EncryptionKeyUnavailableException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryName:
    post:
      description: "Renames a repository. The repository name must be unique across\
        \ the calling AWS account. Repository names are limited to 100 alphanumeric,\
        \ dash, and underscore characters, and cannot include certain characters.\
        \ The suffix .git is prohibited. For more information about the limits on\
        \ repository names, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\"\
        >Limits</a> in the AWS CodeCommit User Guide."
      operationId: update_repository_name
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CodeCommit_20150413.UpdateRepositoryName
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRepositoryNameInput'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDoesNotExistException'
          description: RepositoryDoesNotExistException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameExistsException'
          description: RepositoryNameExistsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNameRequiredException'
          description: RepositoryNameRequiredException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRepositoryNameException'
          description: InvalidRepositoryNameException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    AssociateApprovalRuleTemplateWithRepositoryInput:
      example:
        approvalRuleTemplateName: ""
        repositoryName: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: 'The name for the approval rule template. '
          title: approvalRuleTemplateName
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that you want to associate with
              the template.
          title: repositoryName
      required:
      - approvalRuleTemplateName
      - repositoryName
      title: AssociateApprovalRuleTemplateWithRepositoryInput
      type: object
    ApprovalRuleTemplateNameRequiredException: {}
    InvalidApprovalRuleTemplateNameException: {}
    ApprovalRuleTemplateDoesNotExistException: {}
    MaximumRuleTemplatesAssociatedWithRepositoryException: {}
    RepositoryNameRequiredException: {}
    InvalidRepositoryNameException: {}
    RepositoryDoesNotExistException: {}
    EncryptionIntegrityChecksFailedException: {}
    EncryptionKeyAccessDeniedException: {}
    EncryptionKeyDisabledException: {}
    EncryptionKeyNotFoundException: {}
    EncryptionKeyUnavailableException: {}
    BatchAssociateApprovalRuleTemplateWithRepositoriesOutput:
      example:
        associatedRepositoryNames: ""
        errors: ""
      properties:
        associatedRepositoryNames:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameList'
          - description: A list of names of the repositories that have been associated
              with the template.
          title: associatedRepositoryNames
        errors:
          allOf:
          - $ref: '#/components/schemas/BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList'
          - description: A list of any errors that might have occurred while attempting
              to create the association between the template and the repositories.
          title: errors
      required:
      - associatedRepositoryNames
      - errors
      title: BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
      type: object
    BatchAssociateApprovalRuleTemplateWithRepositoriesInput:
      example:
        repositoryNames: ""
        approvalRuleTemplateName: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The name of the template you want to associate with one or
              more repositories.
          title: approvalRuleTemplateName
        repositoryNames:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameList'
          - description: <p>The names of the repositories you want to associate with
              the template.</p> <note> <p>The length constraint limit is for each
              string in the array. The array itself can be empty.</p> </note>
          title: repositoryNames
      required:
      - approvalRuleTemplateName
      - repositoryNames
      title: BatchAssociateApprovalRuleTemplateWithRepositoriesInput
      type: object
    RepositoryNamesRequiredException: {}
    MaximumRepositoryNamesExceededException: {}
    BatchDescribeMergeConflictsOutput:
      example:
        destinationCommitId: ""
        nextToken: ""
        conflicts: ""
        sourceCommitId: ""
        baseCommitId: ""
        errors: ""
      properties:
        conflicts:
          allOf:
          - $ref: '#/components/schemas/Conflicts'
          - description: "A list of conflicts for each file, including the conflict\
              \ metadata and the hunks of the differences between the files."
          title: conflicts
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that can be used in a request to return
              the next batch of the results.
          title: nextToken
        errors:
          allOf:
          - $ref: '#/components/schemas/BatchDescribeMergeConflictsErrors'
          - description: A list of any errors returned while describing the merge
              conflicts for each file.
          title: errors
        destinationCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the destination commit specifier that was
              used in the merge evaluation.
          title: destinationCommitId
        sourceCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the source commit specifier that was used
              in the merge evaluation.
          title: sourceCommitId
        baseCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the merge base.
          title: baseCommitId
      required:
      - conflicts
      - destinationCommitId
      - sourceCommitId
      title: BatchDescribeMergeConflictsOutput
      type: object
    BatchDescribeMergeConflictsInput:
      example:
        sourceCommitSpecifier: ""
        destinationCommitSpecifier: ""
        nextToken: ""
        maxMergeHunks: ""
        conflictDetailLevel: ""
        repositoryName: ""
        mergeOption: ""
        filePaths: ""
        maxConflictFiles: ""
        conflictResolutionStrategy: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the merge conflicts
              you want to review.
          title: repositoryName
        destinationCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: destinationCommitSpecifier
        sourceCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: sourceCommitSpecifier
        mergeOption:
          allOf:
          - $ref: '#/components/schemas/MergeOptionTypeEnum'
          - description: The merge option or strategy you want to use to merge the
              code.
          title: mergeOption
        maxMergeHunks:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: The maximum number of merge hunks to include in the output.
          title: maxMergeHunks
        maxConflictFiles:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: The maximum number of files to include in the output.
          title: maxConflictFiles
        filePaths:
          allOf:
          - $ref: '#/components/schemas/FilePaths'
          - description: "The path of the target files used to describe the conflicts.\
              \ If not specified, the default is all conflict files."
          title: filePaths
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
      required:
      - destinationCommitSpecifier
      - mergeOption
      - repositoryName
      - sourceCommitSpecifier
      title: BatchDescribeMergeConflictsInput
      type: object
    MergeOptionRequiredException: {}
    InvalidMergeOptionException: {}
    InvalidContinuationTokenException: {}
    CommitRequiredException: {}
    CommitDoesNotExistException: {}
    InvalidCommitException: {}
    TipsDivergenceExceededException: {}
    InvalidMaxConflictFilesException: {}
    InvalidMaxMergeHunksException: {}
    InvalidConflictDetailLevelException: {}
    InvalidConflictResolutionStrategyException: {}
    MaximumFileContentToLoadExceededException: {}
    MaximumItemsToCompareExceededException: {}
    BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput:
      example:
        disassociatedRepositoryNames: ""
        errors: ""
      properties:
        disassociatedRepositoryNames:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameList'
          - description: A list of repository names that have had their association
              with the template removed.
          title: disassociatedRepositoryNames
        errors:
          allOf:
          - $ref: '#/components/schemas/BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList'
          - description: A list of any errors that might have occurred while attempting
              to remove the association between the template and the repositories.
          title: errors
      required:
      - disassociatedRepositoryNames
      - errors
      title: BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
      type: object
    BatchDisassociateApprovalRuleTemplateFromRepositoriesInput:
      example:
        repositoryNames: ""
        approvalRuleTemplateName: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The name of the template that you want to disassociate from
              one or more repositories.
          title: approvalRuleTemplateName
        repositoryNames:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameList'
          - description: <p>The repository names that you want to disassociate from
              the approval rule template.</p> <note> <p>The length constraint limit
              is for each string in the array. The array itself can be empty.</p>
              </note>
          title: repositoryNames
      required:
      - approvalRuleTemplateName
      - repositoryNames
      title: BatchDisassociateApprovalRuleTemplateFromRepositoriesInput
      type: object
    BatchGetCommitsOutput:
      example:
        commits: ""
        errors: ""
      properties:
        commits:
          allOf:
          - $ref: '#/components/schemas/CommitObjectsList'
          - description: "An array of commit data type objects, each of which contains\
              \ information about a specified commit."
          title: commits
        errors:
          allOf:
          - $ref: '#/components/schemas/BatchGetCommitsErrorsList'
          - description: "Returns any commit IDs for which information could not be\
              \ found. For example, if one of the commit IDs was a shortened SHA ID\
              \ or that commit was not found in the specified repository, the ID returns\
              \ an error object with more information."
          title: errors
      title: BatchGetCommitsOutput
      type: object
    BatchGetCommitsInput:
      example:
        repositoryName: ""
        commitIds: ""
      properties:
        commitIds:
          allOf:
          - $ref: '#/components/schemas/CommitIdsInputList'
          - description: <p>The full commit IDs of the commits to get information
              about.</p> <note> <p>You must supply the full SHA IDs of each commit.
              You cannot use shortened SHA IDs.</p> </note>
          title: commitIds
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the commits.
          title: repositoryName
      required:
      - commitIds
      - repositoryName
      title: BatchGetCommitsInput
      type: object
    CommitIdsListRequiredException: {}
    CommitIdsLimitExceededException: {}
    BatchGetRepositoriesOutput:
      description: Represents the output of a batch get repositories operation.
      example:
        repositories: ""
        repositoriesNotFound: ""
      properties:
        repositories:
          allOf:
          - $ref: '#/components/schemas/RepositoryMetadataList'
          - description: A list of repositories returned by the batch get repositories
              operation.
          title: repositories
        repositoriesNotFound:
          allOf:
          - $ref: '#/components/schemas/RepositoryNotFoundList'
          - description: Returns a list of repository names for which information
              could not be found.
          title: repositoriesNotFound
      title: BatchGetRepositoriesOutput
      type: object
    BatchGetRepositoriesInput:
      description: Represents the input of a batch get repositories operation.
      example:
        repositoryNames: ""
      properties:
        repositoryNames:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameList'
          - description: <p>The names of the repositories to get information about.</p>
              <note> <p>The length constraint limit is for each string in the array.
              The array itself can be empty.</p> </note>
          title: repositoryNames
      required:
      - repositoryNames
      title: BatchGetRepositoriesInput
      type: object
    CreateApprovalRuleTemplateOutput:
      example:
        approvalRuleTemplate:
          lastModifiedDate: ""
          approvalRuleTemplateId: ""
          approvalRuleTemplateName: ""
          lastModifiedUser: ""
          creationDate: ""
          ruleContentSha256: ""
          approvalRuleTemplateDescription: ""
          approvalRuleTemplateContent: ""
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/CreateApprovalRuleTemplateOutput_approvalRuleTemplate'
      required:
      - approvalRuleTemplate
      title: CreateApprovalRuleTemplateOutput
      type: object
    CreateApprovalRuleTemplateInput:
      example:
        approvalRuleTemplateName: ""
        approvalRuleTemplateContent: ""
        approvalRuleTemplateDescription: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: "The name of the approval rule template. Provide descriptive\
              \ names, because this name is applied to the approval rules created\
              \ automatically in associated repositories."
          title: approvalRuleTemplateName
        approvalRuleTemplateContent:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateContent'
          - description: "<p>The content of the approval rule that is created on pull\
              \ requests in associated repositories. If you specify one or more destination\
              \ references (branches), approval rules are created in an associated\
              \ repository only if their destination references (branches) match those\
              \ specified in the template.</p> <note> <p>When you create the content\
              \ of the approval rule template, you can specify approvers in an approval\
              \ pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>:\
              \ This option only requires an AWS account and a resource. It can be\
              \ used for both IAM users and federated access users whose name matches\
              \ the provided resource name. This is a very powerful option that offers\
              \ a great deal of flexibility. For example, if you specify the AWS account\
              \ <i>123456789012</i> and <i>Mary_Major</i>, all of the following are\
              \ counted as approvals coming from that user:</p> <ul> <li> <p>An IAM\
              \ user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p>\
              \ </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p>\
              \ </li> </ul> <p>This option does not recognize an active session of\
              \ someone assuming the role of CodeCommitReview with a role session\
              \ name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>)\
              \ unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully\
              \ qualified ARN</b>: This option allows you to specify the fully qualified\
              \ Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul>\
              \ <p>For more information about IAM ARNs, wildcards, and formats, see\
              \ <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\"\
              >IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>"
          title: approvalRuleTemplateContent
        approvalRuleTemplateDescription:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateDescription'
          - description: The description of the approval rule template. Consider providing
              a description that explains what this template does and when it might
              be appropriate to associate it with repositories.
          title: approvalRuleTemplateDescription
      required:
      - approvalRuleTemplateContent
      - approvalRuleTemplateName
      title: CreateApprovalRuleTemplateInput
      type: object
    ApprovalRuleTemplateNameAlreadyExistsException: {}
    ApprovalRuleTemplateContentRequiredException: {}
    InvalidApprovalRuleTemplateContentException: {}
    InvalidApprovalRuleTemplateDescriptionException: {}
    NumberOfRuleTemplatesExceededException: {}
    CreateBranchInput:
      description: Represents the input of a create branch operation.
      example:
        branchName: ""
        commitId: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository in which you want to create the
              new branch.
          title: repositoryName
        branchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: The name of the new branch to create.
          title: branchName
        commitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The ID of the commit to point the new branch to.
          title: commitId
      required:
      - branchName
      - commitId
      - repositoryName
      title: CreateBranchInput
      type: object
    BranchNameRequiredException: {}
    BranchNameExistsException: {}
    InvalidBranchNameException: {}
    CommitIdRequiredException: {}
    InvalidCommitIdException: {}
    CreateCommitOutput:
      example:
        filesAdded: ""
        treeId: ""
        filesUpdated: ""
        filesDeleted: ""
        commitId: ""
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full commit ID of the commit that contains your committed
              file changes.
          title: commitId
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full SHA-1 pointer of the tree information for the commit
              that contains the commited file changes.
          title: treeId
        filesAdded:
          allOf:
          - $ref: '#/components/schemas/FilesMetadata'
          - description: The files added as part of the committed file changes.
          title: filesAdded
        filesUpdated:
          allOf:
          - $ref: '#/components/schemas/FilesMetadata'
          - description: The files updated as part of the commited file changes.
          title: filesUpdated
        filesDeleted:
          allOf:
          - $ref: '#/components/schemas/FilesMetadata'
          - description: The files deleted as part of the committed file changes.
          title: filesDeleted
      title: CreateCommitOutput
      type: object
    CreateCommitInput:
      example:
        deleteFiles: ""
        putFiles: ""
        keepEmptyFolders: ""
        parentCommitId: ""
        commitMessage: ""
        authorName: ""
        branchName: ""
        repositoryName: ""
        email: ""
        setFileModes: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you create the commit.
          title: repositoryName
        branchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: The name of the branch where you create the commit.
          title: branchName
        parentCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The ID of the commit that is the parent of the commit you
              create. Not required if this is an empty repository.
          title: parentCommitId
        authorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the author who created the commit. This information
              is used as both the author and committer for the commit.
          title: authorName
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: The email address of the person who created the commit.
          title: email
        commitMessage:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: "The commit message you want to include in the commit. Commit\
              \ messages are limited to 256 KB. If no message is specified, a default\
              \ message is used."
          title: commitMessage
        keepEmptyFolders:
          allOf:
          - $ref: '#/components/schemas/KeepEmptyFolders'
          - description: "If the commit contains deletions, whether to keep a folder\
              \ or folder structure if the changes leave the folders empty. If true,\
              \ a ..gitkeep file is created for empty folders. The default is false."
          title: keepEmptyFolders
        putFiles:
          allOf:
          - $ref: '#/components/schemas/PutFileEntries'
          - description: The files to add or update in this commit.
          title: putFiles
        deleteFiles:
          allOf:
          - $ref: '#/components/schemas/DeleteFileEntries'
          - description: The files to delete in this commit. These files still exist
              in earlier commits.
          title: deleteFiles
        setFileModes:
          allOf:
          - $ref: '#/components/schemas/SetFileModeEntries'
          - description: The file modes to update for files in this commit.
          title: setFileModes
      required:
      - branchName
      - repositoryName
      title: CreateCommitInput
      type: object
    ParentCommitIdRequiredException: {}
    InvalidParentCommitIdException: {}
    ParentCommitDoesNotExistException: {}
    ParentCommitIdOutdatedException: {}
    BranchDoesNotExistException: {}
    BranchNameIsTagNameException: {}
    FileEntryRequiredException: {}
    MaximumFileEntriesExceededException: {}
    PutFileEntryConflictException: {}
    SourceFileOrContentRequiredException: {}
    FileContentAndSourceFileSpecifiedException: {}
    PathRequiredException: {}
    InvalidPathException: {}
    SamePathRequestException: {}
    FileDoesNotExistException: {}
    FileContentSizeLimitExceededException: {}
    FolderContentSizeLimitExceededException: {}
    InvalidDeletionParameterException: {}
    RestrictedSourceFileException: {}
    FileModeRequiredException: {}
    InvalidFileModeException: {}
    NameLengthExceededException: {}
    InvalidEmailException: {}
    CommitMessageLengthExceededException: {}
    NoChangeException: {}
    FileNameConflictsWithDirectoryNameException: {}
    DirectoryNameConflictsWithFileNameException: {}
    FilePathConflictsWithSubmodulePathException: {}
    CreatePullRequestOutput:
      example:
        pullRequest:
          revisionId: ""
          authorArn: ""
          clientRequestToken: ""
          lastActivityDate: ""
          pullRequestStatus: ""
          description: ""
          pullRequestTargets: ""
          pullRequestId: ""
          title: ""
          creationDate: ""
          approvalRules: ""
      properties:
        pullRequest:
          $ref: '#/components/schemas/CreatePullRequestOutput_pullRequest'
      required:
      - pullRequest
      title: CreatePullRequestOutput
      type: object
    CreatePullRequestInput:
      example:
        clientRequestToken: ""
        description: ""
        title: ""
        targets: ""
      properties:
        title:
          allOf:
          - $ref: '#/components/schemas/Title'
          - description: The title of the pull request. This title is used to identify
              the pull request to other users in the repository.
          title: title
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the pull request.
          title: description
        targets:
          allOf:
          - $ref: '#/components/schemas/TargetList'
          - description: "The targets for the pull request, including the source of\
              \ the code to be reviewed (the source branch) and the destination where\
              \ the creator of the pull request intends the code to be merged after\
              \ the pull request is closed (the destination branch)."
          title: targets
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "<p>A unique, client-generated idempotency token that, when\
              \ provided in a request, ensures the request cannot be repeated with\
              \ a changed parameter. If a request is received with the same parameters\
              \ and a token is included, the request returns information about the\
              \ initial request that used that token.</p> <note> <p>The AWS SDKs prepopulate\
              \ client request tokens. If you are using an AWS SDK, an idempotency\
              \ token is created for you.</p> </note>"
          title: clientRequestToken
      required:
      - targets
      - title
      title: CreatePullRequestInput
      type: object
    ClientRequestTokenRequiredException: {}
    InvalidClientRequestTokenException: {}
    IdempotencyParameterMismatchException: {}
    ReferenceNameRequiredException: {}
    InvalidReferenceNameException: {}
    ReferenceDoesNotExistException: {}
    ReferenceTypeNotSupportedException: {}
    TitleRequiredException: {}
    InvalidTitleException: {}
    InvalidDescriptionException: {}
    TargetsRequiredException: {}
    InvalidTargetsException: {}
    TargetRequiredException: {}
    InvalidTargetException: {}
    MultipleRepositoriesInPullRequestException: {}
    MaximumOpenPullRequestsExceededException: {}
    SourceAndDestinationAreSameException: {}
    CreatePullRequestApprovalRuleOutput:
      example:
        approvalRule:
          lastModifiedDate: ""
          approvalRuleId: ""
          lastModifiedUser: ""
          approvalRuleName: ""
          creationDate: ""
          originApprovalRuleTemplate:
            approvalRuleTemplateId: ""
            approvalRuleTemplateName: ""
          approvalRuleContent: ""
          ruleContentSha256: ""
      properties:
        approvalRule:
          $ref: '#/components/schemas/CreatePullRequestApprovalRuleOutput_approvalRule'
      required:
      - approvalRule
      title: CreatePullRequestApprovalRuleOutput
      type: object
    CreatePullRequestApprovalRuleInput:
      example:
        approvalRuleName: ""
        pullRequestId: ""
        approvalRuleContent: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: The system-generated ID of the pull request for which you
              want to create the approval rule.
          title: pullRequestId
        approvalRuleName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleName'
          - description: The name for the approval rule.
          title: approvalRuleName
        approvalRuleContent:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleContent'
          - description: "<p>The content of the approval rule, including the number\
              \ of approvals needed and the structure of an approval pool defined\
              \ for approvals, if any. For more information about approval pools,\
              \ see the AWS CodeCommit User Guide.</p> <note> <p>When you create the\
              \ content of the approval rule, you can specify approvers in an approval\
              \ pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>:\
              \ This option only requires an AWS account and a resource. It can be\
              \ used for both IAM users and federated access users whose name matches\
              \ the provided resource name. This is a very powerful option that offers\
              \ a great deal of flexibility. For example, if you specify the AWS account\
              \ <i>123456789012</i> and <i>Mary_Major</i>, all of the following would\
              \ be counted as approvals coming from that user:</p> <ul> <li> <p>An\
              \ IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p>\
              \ </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p>\
              \ </li> </ul> <p>This option does not recognize an active session of\
              \ someone assuming the role of CodeCommitReview with a role session\
              \ name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>)\
              \ unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully\
              \ qualified ARN</b>: This option allows you to specify the fully qualified\
              \ Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul>\
              \ <p>For more information about IAM ARNs, wildcards, and formats, see\
              \ <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\"\
              >IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>"
          title: approvalRuleContent
      required:
      - approvalRuleContent
      - approvalRuleName
      - pullRequestId
      title: CreatePullRequestApprovalRuleInput
      type: object
    ApprovalRuleNameRequiredException: {}
    InvalidApprovalRuleNameException: {}
    ApprovalRuleNameAlreadyExistsException: {}
    ApprovalRuleContentRequiredException: {}
    InvalidApprovalRuleContentException: {}
    NumberOfRulesExceededException: {}
    PullRequestDoesNotExistException: {}
    InvalidPullRequestIdException: {}
    PullRequestIdRequiredException: {}
    PullRequestAlreadyClosedException: {}
    CreateRepositoryOutput:
      description: Represents the output of a create repository operation.
      example:
        repositoryMetadata:
          accountId: ""
          cloneUrlSsh: ""
          lastModifiedDate: ""
          defaultBranch: ""
          repositoryId: ""
          repositoryDescription: ""
          cloneUrlHttp: ""
          repositoryName: ""
          creationDate: ""
          Arn: ""
      properties:
        repositoryMetadata:
          $ref: '#/components/schemas/CreateRepositoryOutput_repositoryMetadata'
      title: CreateRepositoryOutput
      type: object
    CreateRepositoryInput:
      description: Represents the input of a create repository operation.
      example:
        repositoryDescription: ""
        repositoryName: ""
        tags: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: "<p>The name of the new repository to be created.</p> <note>\
              \ <p>The repository name must be unique across the calling AWS account.\
              \ Repository names are limited to 100 alphanumeric, dash, and underscore\
              \ characters, and cannot include certain characters. For more information\
              \ about the limits on repository names, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\"\
              >Limits</a> in the <i>AWS CodeCommit User Guide</i>. The suffix .git\
              \ is prohibited.</p> </note>"
          title: repositoryName
        repositoryDescription:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          - description: <p>A comment or description about the new repository.</p>
              <note> <p>The description field for a repository accepts all HTML characters
              and all valid Unicode characters. Applications that do not HTML-encode
              the description and display it in a webpage can expose users to potentially
              malicious code. Make sure that you HTML-encode the description field
              in any application that uses this API to display the repository description
              on a webpage.</p> </note>
          title: repositoryDescription
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: One or more tag key-value pairs to use when tagging this
              repository.
          title: tags
      required:
      - repositoryName
      title: CreateRepositoryInput
      type: object
    RepositoryNameExistsException: {}
    InvalidRepositoryDescriptionException: {}
    RepositoryLimitExceededException: {}
    InvalidTagsMapException: {}
    TooManyTagsException: {}
    InvalidSystemTagUsageException: {}
    TagPolicyException: {}
    CreateUnreferencedMergeCommitOutput:
      example:
        treeId: ""
        commitId: ""
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full commit ID of the commit that contains your merge
              results.
          title: commitId
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full SHA-1 pointer of the tree information for the commit
              that contains the merge results.
          title: treeId
      title: CreateUnreferencedMergeCommitOutput
      type: object
    CreateUnreferencedMergeCommitInput:
      example:
        sourceCommitSpecifier: ""
        keepEmptyFolders: ""
        commitMessage: ""
        destinationCommitSpecifier: ""
        authorName: ""
        conflictDetailLevel: ""
        repositoryName: ""
        mergeOption: ""
        email: ""
        conflictResolutionStrategy: ""
        conflictResolution:
          deleteFiles: ""
          replaceContents: ""
          setFileModes: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to create the unreferenced
              merge commit.
          title: repositoryName
        sourceCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: sourceCommitSpecifier
        destinationCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: destinationCommitSpecifier
        mergeOption:
          allOf:
          - $ref: '#/components/schemas/MergeOptionTypeEnum'
          - description: The merge option or strategy you want to use to merge the
              code.
          title: mergeOption
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
        authorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the author who created the unreferenced commit.
              This information is used as both the author and committer for the commit.
          title: authorName
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: The email address for the person who created the unreferenced
              commit.
          title: email
        commitMessage:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: The commit message for the unreferenced commit.
          title: commitMessage
        keepEmptyFolders:
          allOf:
          - $ref: '#/components/schemas/KeepEmptyFolders'
          - description: "If the commit contains deletions, whether to keep a folder\
              \ or folder structure if the changes leave the folders empty. If this\
              \ is specified as true, a .gitkeep file is created for empty folders.\
              \ The default is false."
          title: keepEmptyFolders
        conflictResolution:
          $ref: '#/components/schemas/CreateUnreferencedMergeCommitInput_conflictResolution'
      required:
      - destinationCommitSpecifier
      - mergeOption
      - repositoryName
      - sourceCommitSpecifier
      title: CreateUnreferencedMergeCommitInput
      type: object
    InvalidConflictResolutionException: {}
    ManualMergeRequiredException: {}
    MaximumConflictResolutionEntriesExceededException: {}
    MultipleConflictResolutionEntriesException: {}
    ReplacementTypeRequiredException: {}
    InvalidReplacementTypeException: {}
    ReplacementContentRequiredException: {}
    InvalidReplacementContentException: {}
    ConcurrentReferenceUpdateException: {}
    DeleteApprovalRuleTemplateOutput:
      example:
        approvalRuleTemplateId: ""
      properties:
        approvalRuleTemplateId:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateId'
          - description: "The system-generated ID of the deleted approval rule template.\
              \ If the template has been previously deleted, the only response is\
              \ a 200 OK."
          title: approvalRuleTemplateId
      required:
      - approvalRuleTemplateId
      title: DeleteApprovalRuleTemplateOutput
      type: object
    DeleteApprovalRuleTemplateInput:
      example:
        approvalRuleTemplateName: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The name of the approval rule template to delete.
          title: approvalRuleTemplateName
      required:
      - approvalRuleTemplateName
      title: DeleteApprovalRuleTemplateInput
      type: object
    ApprovalRuleTemplateInUseException: {}
    DeleteBranchOutput:
      description: Represents the output of a delete branch operation.
      example:
        deletedBranch:
          branchName: ""
          commitId: ""
      properties:
        deletedBranch:
          $ref: '#/components/schemas/DeleteBranchOutput_deletedBranch'
      title: DeleteBranchOutput
      type: object
    DeleteBranchInput:
      description: Represents the input of a delete branch operation.
      example:
        branchName: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the branch to be
              deleted.
          title: repositoryName
        branchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: The name of the branch to delete.
          title: branchName
      required:
      - branchName
      - repositoryName
      title: DeleteBranchInput
      type: object
    DefaultBranchCannotBeDeletedException: {}
    DeleteCommentContentOutput:
      example:
        comment:
          authorArn: ""
          callerReactions: ""
          deleted: ""
          clientRequestToken: ""
          lastModifiedDate: ""
          inReplyTo: ""
          commentId: ""
          reactionCounts: ""
          creationDate: ""
          content: ""
      properties:
        comment:
          $ref: '#/components/schemas/DeleteCommentContentOutput_comment'
      title: DeleteCommentContentOutput
      type: object
    DeleteCommentContentInput:
      example:
        commentId: ""
      properties:
        commentId:
          allOf:
          - $ref: '#/components/schemas/CommentId'
          - description: "The unique, system-generated ID of the comment. To get this\
              \ ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>."
          title: commentId
      required:
      - commentId
      title: DeleteCommentContentInput
      type: object
    CommentDoesNotExistException: {}
    CommentIdRequiredException: {}
    InvalidCommentIdException: {}
    CommentDeletedException: {}
    DeleteFileOutput:
      example:
        treeId: ""
        filePath: ""
        blobId: ""
        commitId: ""
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full commit ID of the commit that contains the change
              that deletes the file.
          title: commitId
        blobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The blob ID removed from the tree as part of deleting the
              file.
          title: blobId
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full SHA-1 pointer of the tree information for the commit
              that contains the delete file change.
          title: treeId
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The fully qualified path to the file to be deleted, including\
              \ the full name and extension of that file."
          title: filePath
      required:
      - blobId
      - commitId
      - filePath
      - treeId
      title: DeleteFileOutput
      type: object
    DeleteFileInput:
      example:
        keepEmptyFolders: ""
        parentCommitId: ""
        commitMessage: ""
        filePath: ""
        name: ""
        branchName: ""
        repositoryName: ""
        email: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the file to delete.
          title: repositoryName
        branchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: The name of the branch where the commit that deletes the
              file is made.
          title: branchName
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The fully qualified path to the file that to be deleted,\
              \ including the full name and extension of that file. For example, /examples/file.md\
              \ is a fully qualified path to a file named file.md in a folder named\
              \ examples."
          title: filePath
        parentCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The ID of the commit that is the tip of the branch where
              you want to create the commit that deletes the file. This must be the
              HEAD commit for the branch. The commit that deletes the file is created
              from this commit ID.
          title: parentCommitId
        keepEmptyFolders:
          allOf:
          - $ref: '#/components/schemas/KeepEmptyFolders'
          - description: "If a file is the only object in the folder or directory,\
              \ specifies whether to delete the folder or directory that contains\
              \ the file. By default, empty folders are deleted. This includes empty\
              \ folders that are part of the directory structure. For example, if\
              \ the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty,\
              \ deleting the last file in dir4 also deletes the empty folders dir4,\
              \ dir3, and dir2."
          title: keepEmptyFolders
        commitMessage:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: "The commit message you want to include as part of deleting\
              \ the file. Commit messages are limited to 256 KB. If no message is\
              \ specified, a default message is used."
          title: commitMessage
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: "The name of the author of the commit that deletes the file.\
              \ If no name is specified, the user's ARN is used as the author name\
              \ and committer name."
          title: name
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: "The email address for the commit that deletes the file.\
              \ If no email address is specified, the email address is left blank."
          title: email
      required:
      - branchName
      - filePath
      - parentCommitId
      - repositoryName
      title: DeleteFileInput
      type: object
    DeletePullRequestApprovalRuleOutput:
      example:
        approvalRuleId: ""
      properties:
        approvalRuleId:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleId'
          - description: "<p>The ID of the deleted approval rule. </p> <note> <p>If\
              \ the approval rule was deleted in an earlier API call, the response\
              \ is 200 OK without content.</p> </note>"
          title: approvalRuleId
      required:
      - approvalRuleId
      title: DeletePullRequestApprovalRuleOutput
      type: object
    DeletePullRequestApprovalRuleInput:
      example:
        approvalRuleName: ""
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: The system-generated ID of the pull request that contains
              the approval rule you want to delete.
          title: pullRequestId
        approvalRuleName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleName'
          - description: The name of the approval rule you want to delete.
          title: approvalRuleName
      required:
      - approvalRuleName
      - pullRequestId
      title: DeletePullRequestApprovalRuleInput
      type: object
    CannotDeleteApprovalRuleFromTemplateException: {}
    DeleteRepositoryOutput:
      description: Represents the output of a delete repository operation.
      example:
        repositoryId: ""
      properties:
        repositoryId:
          allOf:
          - $ref: '#/components/schemas/RepositoryId'
          - description: The ID of the repository that was deleted.
          title: repositoryId
      title: DeleteRepositoryOutput
      type: object
    DeleteRepositoryInput:
      description: Represents the input of a delete repository operation.
      example:
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to delete.
          title: repositoryName
      required:
      - repositoryName
      title: DeleteRepositoryInput
      type: object
    DescribeMergeConflictsOutput:
      example:
        mergeHunks: ""
        destinationCommitId: ""
        nextToken: ""
        sourceCommitId: ""
        baseCommitId: ""
        conflictMetadata:
          objectTypeConflict: ""
          filePath: ""
          numberOfConflicts: ""
          contentConflict: ""
          fileSizes:
            destination: ""
            source: ""
            base: ""
          objectTypes:
            destination: ""
            source: ""
            base: ""
          isBinaryFile:
            destination: ""
            source: ""
            base: ""
          fileModeConflict: ""
          fileModes:
            destination: ""
            source: ""
            base: ""
          mergeOperations:
            destination: ""
            source: ""
      properties:
        conflictMetadata:
          $ref: '#/components/schemas/DescribeMergeConflictsOutput_conflictMetadata'
        mergeHunks:
          allOf:
          - $ref: '#/components/schemas/MergeHunks'
          - description: A list of merge hunks of the differences between the files
              or lines.
          title: mergeHunks
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that can be used in a request to return
              the next batch of the results.
          title: nextToken
        destinationCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the destination commit specifier that was
              used in the merge evaluation.
          title: destinationCommitId
        sourceCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the source commit specifier that was used
              in the merge evaluation.
          title: sourceCommitId
        baseCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the merge base.
          title: baseCommitId
      required:
      - conflictMetadata
      - destinationCommitId
      - mergeHunks
      - sourceCommitId
      title: DescribeMergeConflictsOutput
      type: object
    DescribeMergeConflictsInput:
      example:
        sourceCommitSpecifier: ""
        destinationCommitSpecifier: ""
        nextToken: ""
        maxMergeHunks: ""
        filePath: ""
        conflictDetailLevel: ""
        repositoryName: ""
        mergeOption: ""
        conflictResolutionStrategy: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to get information
              about a merge conflict.
          title: repositoryName
        destinationCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: destinationCommitSpecifier
        sourceCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: sourceCommitSpecifier
        mergeOption:
          allOf:
          - $ref: '#/components/schemas/MergeOptionTypeEnum'
          - description: The merge option or strategy you want to use to merge the
              code.
          title: mergeOption
        maxMergeHunks:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: The maximum number of merge hunks to include in the output.
          title: maxMergeHunks
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: 'The path of the target files used to describe the conflicts. '
          title: filePath
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
      required:
      - destinationCommitSpecifier
      - filePath
      - mergeOption
      - repositoryName
      - sourceCommitSpecifier
      title: DescribeMergeConflictsInput
      type: object
    DescribePullRequestEventsOutput:
      example:
        pullRequestEvents: ""
        nextToken: ""
      properties:
        pullRequestEvents:
          allOf:
          - $ref: '#/components/schemas/PullRequestEventList'
          - description: Information about the pull request events.
          title: pullRequestEvents
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that can be used in a request to return
              the next batch of the results.
          title: nextToken
      required:
      - pullRequestEvents
      title: DescribePullRequestEventsOutput
      type: object
    DescribePullRequestEventsInput:
      example:
        pullRequestEventType: ""
        actorArn: ""
        nextToken: ""
        maxResults: ""
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
        pullRequestEventType:
          allOf:
          - $ref: '#/components/schemas/PullRequestEventType'
          - description: Optional. The pull request event type about which you want
              to return information.
          title: pullRequestEventType
        actorArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the user whose actions
              resulted in the event. Examples include updating the pull request with
              more commits or changing the status of a pull request.
          title: actorArn
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "A non-zero, non-negative integer used to limit the number\
              \ of returned results. The default is 100 events, which is also the\
              \ maximum number of events that can be returned in a result."
          title: maxResults
      required:
      - pullRequestId
      title: DescribePullRequestEventsInput
      type: object
    InvalidPullRequestEventTypeException: {}
    InvalidActorArnException: {}
    ActorDoesNotExistException: {}
    InvalidMaxResultsException: {}
    DisassociateApprovalRuleTemplateFromRepositoryInput:
      example:
        approvalRuleTemplateName: ""
        repositoryName: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The name of the approval rule template to disassociate from
              a specified repository.
          title: approvalRuleTemplateName
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository you want to disassociate from
              the template.
          title: repositoryName
      required:
      - approvalRuleTemplateName
      - repositoryName
      title: DisassociateApprovalRuleTemplateFromRepositoryInput
      type: object
    EvaluatePullRequestApprovalRulesOutput:
      example:
        evaluation:
          approved: ""
          approvalRulesSatisfied: ""
          approvalRulesNotSatisfied: ""
          overridden: ""
      properties:
        evaluation:
          $ref: '#/components/schemas/EvaluatePullRequestApprovalRulesOutput_evaluation'
      required:
      - evaluation
      title: EvaluatePullRequestApprovalRulesOutput
      type: object
    EvaluatePullRequestApprovalRulesInput:
      example:
        revisionId: ""
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: The system-generated ID of the pull request you want to evaluate.
          title: pullRequestId
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: "The system-generated ID for the pull request revision. To\
              \ retrieve the most recent revision ID for a pull request, use <a>GetPullRequest</a>."
          title: revisionId
      required:
      - pullRequestId
      - revisionId
      title: EvaluatePullRequestApprovalRulesInput
      type: object
    InvalidRevisionIdException: {}
    RevisionIdRequiredException: {}
    RevisionNotCurrentException: {}
    GetApprovalRuleTemplateOutput:
      example:
        approvalRuleTemplate:
          lastModifiedDate: ""
          approvalRuleTemplateId: ""
          approvalRuleTemplateName: ""
          lastModifiedUser: ""
          creationDate: ""
          ruleContentSha256: ""
          approvalRuleTemplateDescription: ""
          approvalRuleTemplateContent: ""
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/GetApprovalRuleTemplateOutput_approvalRuleTemplate'
      required:
      - approvalRuleTemplate
      title: GetApprovalRuleTemplateOutput
      type: object
    GetApprovalRuleTemplateInput:
      example:
        approvalRuleTemplateName: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The name of the approval rule template for which you want
              to get information.
          title: approvalRuleTemplateName
      required:
      - approvalRuleTemplateName
      title: GetApprovalRuleTemplateInput
      type: object
    GetBlobOutput:
      description: Represents the output of a get blob operation.
      example:
        content: ""
      properties:
        content:
          allOf:
          - $ref: '#/components/schemas/blob'
          - description: "The content of the blob, usually a file."
          title: content
      required:
      - content
      title: GetBlobOutput
      type: object
    GetBlobInput:
      description: Represents the input of a get blob operation.
      example:
        blobId: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the blob.
          title: repositoryName
        blobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: "The ID of the blob, which is its SHA-1 pointer."
          title: blobId
      required:
      - blobId
      - repositoryName
      title: GetBlobInput
      type: object
    BlobIdRequiredException: {}
    InvalidBlobIdException: {}
    BlobIdDoesNotExistException: {}
    FileTooLargeException: {}
    GetBranchOutput:
      description: Represents the output of a get branch operation.
      example:
        branch:
          branchName: ""
          commitId: ""
      properties:
        branch:
          $ref: '#/components/schemas/GetBranchOutput_branch'
      title: GetBranchOutput
      type: object
    GetBranchInput:
      description: Represents the input of a get branch operation.
      example:
        branchName: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the branch for which
              you want to retrieve information.
          title: repositoryName
        branchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: The name of the branch for which you want to retrieve information.
          title: branchName
      title: GetBranchInput
      type: object
    GetCommentOutput:
      example:
        comment:
          authorArn: ""
          callerReactions: ""
          deleted: ""
          clientRequestToken: ""
          lastModifiedDate: ""
          inReplyTo: ""
          commentId: ""
          reactionCounts: ""
          creationDate: ""
          content: ""
      properties:
        comment:
          $ref: '#/components/schemas/GetCommentOutput_comment'
      title: GetCommentOutput
      type: object
    GetCommentInput:
      example:
        commentId: ""
      properties:
        commentId:
          allOf:
          - $ref: '#/components/schemas/CommentId'
          - description: "The unique, system-generated ID of the comment. To get this\
              \ ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>."
          title: commentId
      required:
      - commentId
      title: GetCommentInput
      type: object
    GetCommentReactionsOutput:
      example:
        nextToken: ""
        reactionsForComment: ""
      properties:
        reactionsForComment:
          allOf:
          - $ref: '#/components/schemas/ReactionsForCommentList'
          - description: An array of reactions to the specified comment.
          title: reactionsForComment
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that can be used in a request to return
              the next batch of the results.
          title: nextToken
      required:
      - reactionsForComment
      title: GetCommentReactionsOutput
      type: object
    GetCommentReactionsInput:
      example:
        reactionUserArn: ""
        nextToken: ""
        maxResults: ""
        commentId: ""
      properties:
        commentId:
          allOf:
          - $ref: '#/components/schemas/CommentId'
          - description: The ID of the comment for which you want to get reactions
              information.
          title: commentId
        reactionUserArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: Optional. The Amazon Resource Name (ARN) of the user or identity
              for which you want to get reaction information.
          title: reactionUserArn
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results. "
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "A non-zero, non-negative integer used to limit the number\
              \ of returned results. The default is the same as the allowed maximum,\
              \ 1,000."
          title: maxResults
      required:
      - commentId
      title: GetCommentReactionsInput
      type: object
    InvalidReactionUserArnException: {}
    GetCommentsForComparedCommitOutput:
      example:
        nextToken: ""
        commentsForComparedCommitData: ""
      properties:
        commentsForComparedCommitData:
          allOf:
          - $ref: '#/components/schemas/CommentsForComparedCommitData'
          - description: A list of comment objects on the compared commit.
          title: commentsForComparedCommitData
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that can be used in a request to return
              the next batch of the results.
          title: nextToken
      title: GetCommentsForComparedCommitOutput
      type: object
    GetCommentsForComparedCommitInput:
      example:
        beforeCommitId: ""
        nextToken: ""
        maxResults: ""
        afterCommitId: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to compare commits.
          title: repositoryName
        beforeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "To establish the directionality of the comparison, the full\
              \ commit ID of the before commit."
          title: beforeCommitId
        afterCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "To establish the directionality of the comparison, the full\
              \ commit ID of the after commit."
          title: afterCommitId
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that when provided in a request, returns\
              \ the next batch of the results. "
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "A non-zero, non-negative integer used to limit the number\
              \ of returned results. The default is 100 comments, but you can configure\
              \ up to 500."
          title: maxResults
      required:
      - afterCommitId
      - repositoryName
      title: GetCommentsForComparedCommitInput
      type: object
    GetCommentsForPullRequestOutput:
      example:
        nextToken: ""
        commentsForPullRequestData: ""
      properties:
        commentsForPullRequestData:
          allOf:
          - $ref: '#/components/schemas/CommentsForPullRequestData'
          - description: An array of comment objects on the pull request.
          title: commentsForPullRequestData
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that can be used in a request to return
              the next batch of the results.
          title: nextToken
      title: GetCommentsForPullRequestOutput
      type: object
    GetCommentsForPullRequestInput:
      example:
        beforeCommitId: ""
        nextToken: ""
        maxResults: ""
        afterCommitId: ""
        pullRequestId: ""
        repositoryName: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the pull request.
          title: repositoryName
        beforeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit in the destination branch
              that was the tip of the branch at the time the pull request was created.
          title: beforeCommitId
        afterCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit in the source branch that
              was the tip of the branch at the time the comment was made.
          title: afterCommitId
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "A non-zero, non-negative integer used to limit the number\
              \ of returned results. The default is 100 comments. You can return up\
              \ to 500 comments with a single request."
          title: maxResults
      required:
      - pullRequestId
      title: GetCommentsForPullRequestInput
      type: object
    RepositoryNotAssociatedWithPullRequestException: {}
    GetCommitOutput:
      description: Represents the output of a get commit operation.
      example:
        commit:
          treeId: ""
          committer:
            date: ""
            name: ""
            email: ""
          author:
            date: ""
            name: ""
            email: ""
          commitId: ""
          additionalData: ""
          message: ""
          parents: ""
      properties:
        commit:
          $ref: '#/components/schemas/GetCommitOutput_commit'
      required:
      - commit
      title: GetCommitOutput
      type: object
    GetCommitInput:
      description: Represents the input of a get commit operation.
      example:
        commitId: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to which the commit was made.
          title: repositoryName
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID. Commit IDs are the full SHA ID of the commit.
          title: commitId
      required:
      - commitId
      - repositoryName
      title: GetCommitInput
      type: object
    CommitIdDoesNotExistException: {}
    GetDifferencesOutput:
      example:
        NextToken: ""
        differences: ""
      properties:
        differences:
          allOf:
          - $ref: '#/components/schemas/DifferenceList'
          - description: "A data type object that contains information about the differences,\
              \ including whether the difference is added, modified, or deleted (A,\
              \ D, M)."
          title: differences
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that can be used in a request to return
              the next batch of the results.
          title: NextToken
      title: GetDifferencesOutput
      type: object
    GetDifferencesInput:
      example:
        beforePath: ""
        NextToken: ""
        MaxResults: ""
        afterCommitSpecifier: ""
        repositoryName: ""
        beforeCommitSpecifier: ""
        afterPath: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to get differences.
          title: repositoryName
        beforeCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, the full commit ID). Optional.\
              \ If not specified, all changes before the <code>afterCommitSpecifier</code>\
              \ value are shown. If you do not use <code>beforeCommitSpecifier</code>\
              \ in your request, consider limiting the results with <code>maxResults</code>."
          title: beforeCommitSpecifier
        afterCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit."
          title: afterCommitSpecifier
        beforePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The file path in which to check for differences. Limits\
              \ the results to this path. Can also be used to specify the previous\
              \ name of a directory or folder. If <code>beforePath</code> and <code>afterPath</code>\
              \ are not specified, differences are shown for all paths."
          title: beforePath
        afterPath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The file path in which to check differences. Limits the\
              \ results to this path. Can also be used to specify the changed name\
              \ of a directory or folder, if it has changed. If not specified, differences\
              \ are shown for all paths."
          title: afterPath
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/Limit'
          - description: "A non-zero, non-negative integer used to limit the number\
              \ of returned results."
          title: MaxResults
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: NextToken
      required:
      - afterCommitSpecifier
      - repositoryName
      title: GetDifferencesInput
      type: object
    PathDoesNotExistException: {}
    GetFileOutput:
      example:
        fileSize: ""
        filePath: ""
        blobId: ""
        fileMode: ""
        commitId: ""
        fileContent: ""
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full commit ID of the commit that contains the content
              returned by GetFile.
          title: commitId
        blobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The blob ID of the object that represents the file content.
          title: blobId
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The fully qualified path to the specified file. Returns the
              name and extension of the file.
          title: filePath
        fileMode:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: "<p>The extrapolated file mode permissions of the blob. Valid\
              \ values include strings such as EXECUTABLE and not numeric values.</p>\
              \ <note> <p>The file mode permissions returned by this API are not the\
              \ standard file mode permission values, such as 100644, but rather extrapolated\
              \ values. See the supported return values.</p> </note>"
          title: fileMode
        fileSize:
          allOf:
          - $ref: '#/components/schemas/ObjectSize'
          - description: "The size of the contents of the file, in bytes."
          title: fileSize
        fileContent:
          allOf:
          - $ref: '#/components/schemas/FileContent'
          - description: The base-64 encoded binary data object that represents the
              content of the file.
          title: fileContent
      required:
      - blobId
      - commitId
      - fileContent
      - fileMode
      - filePath
      - fileSize
      title: GetFileOutput
      type: object
    GetFileInput:
      example:
        commitSpecifier: ""
        filePath: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the file.
          title: repositoryName
        commitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The fully quaified reference that identifies the commit\
              \ that contains the file. For example, you can specify a full commit\
              \ ID, a tag, a branch name, or a reference such as refs/heads/master.\
              \ If none is provided, the head commit is used."
          title: commitSpecifier
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The fully qualified path to the file, including the full\
              \ name and extension of the file. For example, /examples/file.md is\
              \ the fully qualified path to a file named file.md in a folder named\
              \ examples."
          title: filePath
      required:
      - filePath
      - repositoryName
      title: GetFileInput
      type: object
    GetFolderOutput:
      example:
        folderPath: ""
        treeId: ""
        subFolders: ""
        files: ""
        commitId: ""
        symbolicLinks: ""
        subModules: ""
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full commit ID used as a reference for the returned version
              of the folder content.
          title: commitId
        folderPath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The fully qualified path of the folder whose contents are
              returned.
          title: folderPath
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full SHA-1 pointer of the tree information for the commit
              that contains the folder.
          title: treeId
        subFolders:
          allOf:
          - $ref: '#/components/schemas/FolderList'
          - description: "The list of folders that exist under the specified folder,\
              \ if any."
          title: subFolders
        files:
          allOf:
          - $ref: '#/components/schemas/FileList'
          - description: "The list of files in the specified folder, if any."
          title: files
        symbolicLinks:
          allOf:
          - $ref: '#/components/schemas/SymbolicLinkList'
          - description: "The list of symbolic links to other files and folders in\
              \ the specified folder, if any."
          title: symbolicLinks
        subModules:
          allOf:
          - $ref: '#/components/schemas/SubModuleList'
          - description: "The list of submodules in the specified folder, if any."
          title: subModules
      required:
      - commitId
      - folderPath
      title: GetFolderOutput
      type: object
    GetFolderInput:
      example:
        folderPath: ""
        commitSpecifier: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository.
          title: repositoryName
        commitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "A fully qualified reference used to identify a commit that\
              \ contains the version of the folder's content to return. A fully qualified\
              \ reference can be a commit ID, branch name, tag, or reference such\
              \ as HEAD. If no specifier is provided, the folder content is returned\
              \ as it exists in the HEAD commit."
          title: commitSpecifier
        folderPath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The fully qualified path to the folder whose contents are\
              \ returned, including the folder name. For example, /examples is a fully-qualified\
              \ path to a folder named examples that was created off of the root directory\
              \ (/) of a repository. "
          title: folderPath
      required:
      - folderPath
      - repositoryName
      title: GetFolderInput
      type: object
    FolderDoesNotExistException: {}
    GetMergeCommitOutput:
      example:
        destinationCommitId: ""
        mergedCommitId: ""
        sourceCommitId: ""
        baseCommitId: ""
      properties:
        sourceCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the source commit specifier that was used
              in the merge evaluation.
          title: sourceCommitId
        destinationCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the destination commit specifier that was
              used in the merge evaluation.
          title: destinationCommitId
        baseCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the merge base.
          title: baseCommitId
        mergedCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: "The commit ID for the merge commit created when the source\
              \ branch was merged into the destination branch. If the fast-forward\
              \ merge strategy was used, there is no merge commit."
          title: mergedCommitId
      title: GetMergeCommitOutput
      type: object
    GetMergeCommitInput:
      example:
        sourceCommitSpecifier: ""
        destinationCommitSpecifier: ""
        conflictDetailLevel: ""
        repositoryName: ""
        conflictResolutionStrategy: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the merge commit
              about which you want to get information.
          title: repositoryName
        sourceCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: sourceCommitSpecifier
        destinationCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: destinationCommitSpecifier
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
      required:
      - destinationCommitSpecifier
      - repositoryName
      - sourceCommitSpecifier
      title: GetMergeCommitInput
      type: object
    GetMergeConflictsOutput:
      example:
        mergeable: ""
        conflictMetadataList: ""
        destinationCommitId: ""
        nextToken: ""
        sourceCommitId: ""
        baseCommitId: ""
      properties:
        mergeable:
          allOf:
          - $ref: '#/components/schemas/IsMergeable'
          - description: A Boolean value that indicates whether the code is mergeable
              by the specified merge option.
          title: mergeable
        destinationCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the destination commit specifier that was
              used in the merge evaluation.
          title: destinationCommitId
        sourceCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the source commit specifier that was used
              in the merge evaluation.
          title: sourceCommitId
        baseCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the merge base.
          title: baseCommitId
        conflictMetadataList:
          allOf:
          - $ref: '#/components/schemas/ConflictMetadataList'
          - description: "A list of metadata for any conflicting files. If the specified\
              \ merge strategy is FAST_FORWARD_MERGE, this list is always empty."
          title: conflictMetadataList
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that can be used in a request to return
              the next batch of the results.
          title: nextToken
      required:
      - conflictMetadataList
      - destinationCommitId
      - mergeable
      - sourceCommitId
      title: GetMergeConflictsOutput
      type: object
    GetMergeConflictsInput:
      example:
        sourceCommitSpecifier: ""
        destinationCommitSpecifier: ""
        nextToken: ""
        conflictDetailLevel: ""
        repositoryName: ""
        mergeOption: ""
        maxConflictFiles: ""
        conflictResolutionStrategy: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the pull request was created.
          title: repositoryName
        destinationCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: destinationCommitSpecifier
        sourceCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: sourceCommitSpecifier
        mergeOption:
          allOf:
          - $ref: '#/components/schemas/MergeOptionTypeEnum'
          - description: 'The merge option or strategy you want to use to merge the
              code. '
          title: mergeOption
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        maxConflictFiles:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: The maximum number of files to include in the output.
          title: maxConflictFiles
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
      required:
      - destinationCommitSpecifier
      - mergeOption
      - repositoryName
      - sourceCommitSpecifier
      title: GetMergeConflictsInput
      type: object
    InvalidDestinationCommitSpecifierException: {}
    InvalidSourceCommitSpecifierException: {}
    GetMergeOptionsOutput:
      example:
        destinationCommitId: ""
        mergeOptions: ""
        sourceCommitId: ""
        baseCommitId: ""
      properties:
        mergeOptions:
          allOf:
          - $ref: '#/components/schemas/MergeOptions'
          - description: The merge option or strategy used to merge the code.
          title: mergeOptions
        sourceCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the source commit specifier that was used
              in the merge evaluation.
          title: sourceCommitId
        destinationCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the destination commit specifier that was
              used in the merge evaluation.
          title: destinationCommitId
        baseCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the merge base.
          title: baseCommitId
      required:
      - baseCommitId
      - destinationCommitId
      - mergeOptions
      - sourceCommitId
      title: GetMergeOptionsOutput
      type: object
    GetMergeOptionsInput:
      example:
        sourceCommitSpecifier: ""
        destinationCommitSpecifier: ""
        conflictDetailLevel: ""
        repositoryName: ""
        conflictResolutionStrategy: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the commits about
              which you want to get merge options.
          title: repositoryName
        sourceCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: sourceCommitSpecifier
        destinationCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: destinationCommitSpecifier
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
      required:
      - destinationCommitSpecifier
      - repositoryName
      - sourceCommitSpecifier
      title: GetMergeOptionsInput
      type: object
    GetPullRequestOutput:
      example:
        pullRequest:
          revisionId: ""
          authorArn: ""
          clientRequestToken: ""
          lastActivityDate: ""
          pullRequestStatus: ""
          description: ""
          pullRequestTargets: ""
          pullRequestId: ""
          title: ""
          creationDate: ""
          approvalRules: ""
      properties:
        pullRequest:
          $ref: '#/components/schemas/GetPullRequestOutput_pullRequest'
      required:
      - pullRequest
      title: GetPullRequestOutput
      type: object
    GetPullRequestInput:
      example:
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
      required:
      - pullRequestId
      title: GetPullRequestInput
      type: object
    GetPullRequestApprovalStatesOutput:
      example:
        approvals: ""
      properties:
        approvals:
          allOf:
          - $ref: '#/components/schemas/ApprovalList'
          - description: Information about users who have approved the pull request.
          title: approvals
      title: GetPullRequestApprovalStatesOutput
      type: object
    GetPullRequestApprovalStatesInput:
      example:
        revisionId: ""
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: The system-generated ID for the pull request.
          title: pullRequestId
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: The system-generated ID for the pull request revision.
          title: revisionId
      required:
      - pullRequestId
      - revisionId
      title: GetPullRequestApprovalStatesInput
      type: object
    GetPullRequestOverrideStateOutput:
      example:
        overrider: ""
        overridden: ""
      properties:
        overridden:
          allOf:
          - $ref: '#/components/schemas/Overridden'
          - description: A Boolean value that indicates whether a pull request has
              had its rules set aside (TRUE) or whether all approval rules still apply
              (FALSE).
          title: overridden
        overrider:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the user or identity that
              overrode the rules and their requirements for the pull request.
          title: overrider
      title: GetPullRequestOverrideStateOutput
      type: object
    GetPullRequestOverrideStateInput:
      example:
        revisionId: ""
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: The ID of the pull request for which you want to get information
              about whether approval rules have been set aside (overridden).
          title: pullRequestId
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: "The system-generated ID of the revision for the pull request.\
              \ To retrieve the most recent revision ID, use <a>GetPullRequest</a>."
          title: revisionId
      required:
      - pullRequestId
      - revisionId
      title: GetPullRequestOverrideStateInput
      type: object
    GetRepositoryOutput:
      description: Represents the output of a get repository operation.
      example:
        repositoryMetadata:
          accountId: ""
          cloneUrlSsh: ""
          lastModifiedDate: ""
          defaultBranch: ""
          repositoryId: ""
          repositoryDescription: ""
          cloneUrlHttp: ""
          repositoryName: ""
          creationDate: ""
          Arn: ""
      properties:
        repositoryMetadata:
          $ref: '#/components/schemas/GetRepositoryOutput_repositoryMetadata'
      title: GetRepositoryOutput
      type: object
    GetRepositoryInput:
      description: Represents the input of a get repository operation.
      example:
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to get information about.
          title: repositoryName
      required:
      - repositoryName
      title: GetRepositoryInput
      type: object
    GetRepositoryTriggersOutput:
      description: Represents the output of a get repository triggers operation.
      example:
        configurationId: ""
        triggers: ""
      properties:
        configurationId:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggersConfigurationId'
          - description: The system-generated unique ID for the trigger.
          title: configurationId
        triggers:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggersList'
          - description: The JSON block of configuration information for each trigger.
          title: triggers
      title: GetRepositoryTriggersOutput
      type: object
    GetRepositoryTriggersInput:
      description: Represents the input of a get repository triggers operation.
      example:
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository for which the trigger is configured.
          title: repositoryName
      required:
      - repositoryName
      title: GetRepositoryTriggersInput
      type: object
    ListApprovalRuleTemplatesOutput:
      example:
        nextToken: ""
        approvalRuleTemplateNames: ""
      properties:
        approvalRuleTemplateNames:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateNameList'
          - description: The names of all the approval rule templates found in the
              AWS Region for your AWS account.
          title: approvalRuleTemplateNames
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that allows the operation to batch the
              next results of the operation.
          title: nextToken
      title: ListApprovalRuleTemplatesOutput
      type: object
    ListApprovalRuleTemplatesInput:
      example:
        nextToken: ""
        maxResults: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "A non-zero, non-negative integer used to limit the number\
              \ of returned results."
          title: maxResults
      title: ListApprovalRuleTemplatesInput
      type: object
    ListAssociatedApprovalRuleTemplatesForRepositoryOutput:
      example:
        nextToken: ""
        approvalRuleTemplateNames: ""
      properties:
        approvalRuleTemplateNames:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateNameList'
          - description: The names of all approval rule templates associated with
              the repository.
          title: approvalRuleTemplateNames
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that allows the operation to batch the
              next results of the operation.
          title: nextToken
      title: ListAssociatedApprovalRuleTemplatesForRepositoryOutput
      type: object
    ListAssociatedApprovalRuleTemplatesForRepositoryInput:
      example:
        nextToken: ""
        maxResults: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository for which you want to list all
              associated approval rule templates.
          title: repositoryName
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "A non-zero, non-negative integer used to limit the number\
              \ of returned results."
          title: maxResults
      required:
      - repositoryName
      title: ListAssociatedApprovalRuleTemplatesForRepositoryInput
      type: object
    ListBranchesOutput:
      description: Represents the output of a list branches operation.
      example:
        nextToken: ""
        branches: ""
      properties:
        branches:
          allOf:
          - $ref: '#/components/schemas/BranchNameList'
          - description: The list of branch names.
          title: branches
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that returns the batch of the results.
          title: nextToken
      title: ListBranchesOutput
      type: object
    ListBranchesInput:
      description: Represents the input of a list branches operation.
      example:
        nextToken: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the branches.
          title: repositoryName
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that allows the operation to batch the
              results.
          title: nextToken
      required:
      - repositoryName
      title: ListBranchesInput
      type: object
    ListPullRequestsOutput:
      example:
        pullRequestIds: ""
        nextToken: ""
      properties:
        pullRequestIds:
          allOf:
          - $ref: '#/components/schemas/PullRequestIdList'
          - description: The system-generated IDs of the pull requests.
          title: pullRequestIds
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that allows the operation to batch the
              next results of the operation.
          title: nextToken
      required:
      - pullRequestIds
      title: ListPullRequestsOutput
      type: object
    ListPullRequestsInput:
      example:
        authorArn: ""
        nextToken: ""
        maxResults: ""
        pullRequestStatus: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository for which you want to list pull
              requests.
          title: repositoryName
        authorArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "Optional. The Amazon Resource Name (ARN) of the user who\
              \ created the pull request. If used, this filters the results to pull\
              \ requests created by that user."
          title: authorArn
        pullRequestStatus:
          allOf:
          - $ref: '#/components/schemas/PullRequestStatusEnum'
          - description: "Optional. The status of the pull request. If used, this\
              \ refines the results to the pull requests that match the specified\
              \ status."
          title: pullRequestStatus
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "A non-zero, non-negative integer used to limit the number\
              \ of returned results."
          title: maxResults
      required:
      - repositoryName
      title: ListPullRequestsInput
      type: object
    InvalidPullRequestStatusException: {}
    InvalidAuthorArnException: {}
    AuthorDoesNotExistException: {}
    ListRepositoriesOutput:
      description: Represents the output of a list repositories operation.
      example:
        repositories: ""
        nextToken: ""
      properties:
        repositories:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameIdPairList'
          - description: Lists the repositories called by the list repositories operation.
          title: repositories
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that allows the operation to batch\
              \ the results of the operation. Batch sizes are 1,000 for list repository\
              \ operations. When the client sends the token back to AWS CodeCommit,\
              \ another page of 1,000 records is retrieved."
          title: nextToken
      title: ListRepositoriesOutput
      type: object
    ListRepositoriesInput:
      description: Represents the input of a list repositories operation.
      example:
        nextToken: ""
        sortBy: ""
        order: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that allows the operation to batch\
              \ the results of the operation. Batch sizes are 1,000 for list repository\
              \ operations. When the client sends the token back to AWS CodeCommit,\
              \ another page of 1,000 records is retrieved."
          title: nextToken
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SortByEnum'
          - description: The criteria used to sort the results of a list repositories
              operation.
          title: sortBy
        order:
          allOf:
          - $ref: '#/components/schemas/OrderEnum'
          - description: The order in which to sort the results of a list repositories
              operation.
          title: order
      title: ListRepositoriesInput
      type: object
    InvalidSortByException: {}
    InvalidOrderException: {}
    ListRepositoriesForApprovalRuleTemplateOutput:
      example:
        nextToken: ""
        repositoryNames: ""
      properties:
        repositoryNames:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameList'
          - description: A list of repository names that are associated with the specified
              approval rule template.
          title: repositoryNames
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that allows the operation to batch the
              next results of the operation.
          title: nextToken
      title: ListRepositoriesForApprovalRuleTemplateOutput
      type: object
    ListRepositoriesForApprovalRuleTemplateInput:
      example:
        nextToken: ""
        maxResults: ""
        approvalRuleTemplateName: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The name of the approval rule template for which you want
              to list repositories that are associated with that template.
          title: approvalRuleTemplateName
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "A non-zero, non-negative integer used to limit the number\
              \ of returned results."
          title: maxResults
      required:
      - approvalRuleTemplateName
      title: ListRepositoriesForApprovalRuleTemplateInput
      type: object
    ListTagsForResourceOutput:
      example:
        nextToken: ""
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: A list of tag key and value pairs associated with the specified
              resource.
          title: tags
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: An enumeration token that allows the operation to batch the
              next results of the operation.
          title: nextToken
      title: ListTagsForResourceOutput
      type: object
    ListTagsForResourceInput:
      example:
        nextToken: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          - description: "The Amazon Resource Name (ARN) of the resource for which\
              \ you want to get information about tags, if any."
          title: resourceArn
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An enumeration token that, when provided in a request, returns\
              \ the next batch of the results."
          title: nextToken
      required:
      - resourceArn
      title: ListTagsForResourceInput
      type: object
    ResourceArnRequiredException: {}
    InvalidResourceArnException: {}
    MergeBranchesByFastForwardOutput:
      example:
        treeId: ""
        commitId: ""
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the merge in the destination or target branch.
          title: commitId
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The tree ID of the merge in the destination or target branch.
          title: treeId
      title: MergeBranchesByFastForwardOutput
      type: object
    MergeBranchesByFastForwardInput:
      example:
        sourceCommitSpecifier: ""
        targetBranch: ""
        destinationCommitSpecifier: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to merge two branches.
          title: repositoryName
        sourceCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: sourceCommitSpecifier
        destinationCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: destinationCommitSpecifier
        targetBranch:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: The branch where the merge is applied.
          title: targetBranch
      required:
      - destinationCommitSpecifier
      - repositoryName
      - sourceCommitSpecifier
      title: MergeBranchesByFastForwardInput
      type: object
    InvalidTargetBranchException: {}
    MergeBranchesBySquashOutput:
      example:
        treeId: ""
        commitId: ""
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the merge in the destination or target branch.
          title: commitId
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The tree ID of the merge in the destination or target branch.
          title: treeId
      title: MergeBranchesBySquashOutput
      type: object
    MergeBranchesBySquashInput:
      example:
        sourceCommitSpecifier: ""
        targetBranch: ""
        keepEmptyFolders: ""
        commitMessage: ""
        destinationCommitSpecifier: ""
        authorName: ""
        conflictDetailLevel: ""
        repositoryName: ""
        email: ""
        conflictResolutionStrategy: ""
        conflictResolution:
          deleteFiles: ""
          replaceContents: ""
          setFileModes: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to merge two branches.
          title: repositoryName
        sourceCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: sourceCommitSpecifier
        destinationCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: destinationCommitSpecifier
        targetBranch:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: 'The branch where the merge is applied. '
          title: targetBranch
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
        authorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the author who created the commit. This information
              is used as both the author and committer for the commit.
          title: authorName
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: The email address of the person merging the branches. This
              information is used in the commit information for the merge.
          title: email
        commitMessage:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: The commit message for the merge.
          title: commitMessage
        keepEmptyFolders:
          allOf:
          - $ref: '#/components/schemas/KeepEmptyFolders'
          - description: "If the commit contains deletions, whether to keep a folder\
              \ or folder structure if the changes leave the folders empty. If this\
              \ is specified as true, a .gitkeep file is created for empty folders.\
              \ The default is false."
          title: keepEmptyFolders
        conflictResolution:
          $ref: '#/components/schemas/CreateUnreferencedMergeCommitInput_conflictResolution'
      required:
      - destinationCommitSpecifier
      - repositoryName
      - sourceCommitSpecifier
      title: MergeBranchesBySquashInput
      type: object
    MergeBranchesByThreeWayOutput:
      example:
        treeId: ""
        commitId: ""
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID of the merge in the destination or target branch.
          title: commitId
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The tree ID of the merge in the destination or target branch.
          title: treeId
      title: MergeBranchesByThreeWayOutput
      type: object
    MergeBranchesByThreeWayInput:
      example:
        sourceCommitSpecifier: ""
        targetBranch: ""
        keepEmptyFolders: ""
        commitMessage: ""
        destinationCommitSpecifier: ""
        authorName: ""
        conflictDetailLevel: ""
        repositoryName: ""
        email: ""
        conflictResolutionStrategy: ""
        conflictResolution:
          deleteFiles: ""
          replaceContents: ""
          setFileModes: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to merge two branches.
          title: repositoryName
        sourceCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: sourceCommitSpecifier
        destinationCommitSpecifier:
          allOf:
          - $ref: '#/components/schemas/CommitName'
          - description: "The branch, tag, HEAD, or other fully qualified reference\
              \ used to identify a commit (for example, a branch name or a full commit\
              \ ID)."
          title: destinationCommitSpecifier
        targetBranch:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: 'The branch where the merge is applied. '
          title: targetBranch
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
        authorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the author who created the commit. This information
              is used as both the author and committer for the commit.
          title: authorName
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: The email address of the person merging the branches. This
              information is used in the commit information for the merge.
          title: email
        commitMessage:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: The commit message to include in the commit information for
              the merge.
          title: commitMessage
        keepEmptyFolders:
          allOf:
          - $ref: '#/components/schemas/KeepEmptyFolders'
          - description: "If the commit contains deletions, whether to keep a folder\
              \ or folder structure if the changes leave the folders empty. If true,\
              \ a .gitkeep file is created for empty folders. The default is false."
          title: keepEmptyFolders
        conflictResolution:
          $ref: '#/components/schemas/CreateUnreferencedMergeCommitInput_conflictResolution'
      required:
      - destinationCommitSpecifier
      - repositoryName
      - sourceCommitSpecifier
      title: MergeBranchesByThreeWayInput
      type: object
    MergePullRequestByFastForwardOutput:
      example:
        pullRequest:
          revisionId: ""
          authorArn: ""
          clientRequestToken: ""
          lastActivityDate: ""
          pullRequestStatus: ""
          description: ""
          pullRequestTargets: ""
          pullRequestId: ""
          title: ""
          creationDate: ""
          approvalRules: ""
      properties:
        pullRequest:
          $ref: '#/components/schemas/MergePullRequestByFastForwardOutput_pullRequest'
      title: MergePullRequestByFastForwardOutput
      type: object
    MergePullRequestByFastForwardInput:
      example:
        sourceCommitId: ""
        pullRequestId: ""
        repositoryName: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the pull request was created.
          title: repositoryName
        sourceCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full commit ID of the original or updated commit in the
              pull request source branch. Pass this value if you want an exception
              thrown if the current commit ID of the tip of the source branch does
              not match this commit ID.
          title: sourceCommitId
      required:
      - pullRequestId
      - repositoryName
      title: MergePullRequestByFastForwardInput
      type: object
    TipOfSourceReferenceIsDifferentException: {}
    PullRequestApprovalRulesNotSatisfiedException: {}
    MergePullRequestBySquashOutput:
      example:
        pullRequest:
          revisionId: ""
          authorArn: ""
          clientRequestToken: ""
          lastActivityDate: ""
          pullRequestStatus: ""
          description: ""
          pullRequestTargets: ""
          pullRequestId: ""
          title: ""
          creationDate: ""
          approvalRules: ""
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
      title: MergePullRequestBySquashOutput
      type: object
    MergePullRequestBySquashInput:
      example:
        keepEmptyFolders: ""
        commitMessage: ""
        authorName: ""
        conflictDetailLevel: ""
        sourceCommitId: ""
        pullRequestId: ""
        repositoryName: ""
        email: ""
        conflictResolutionStrategy: ""
        conflictResolution:
          deleteFiles: ""
          replaceContents: ""
          setFileModes: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the pull request was created.
          title: repositoryName
        sourceCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full commit ID of the original or updated commit in the
              pull request source branch. Pass this value if you want an exception
              thrown if the current commit ID of the tip of the source branch does
              not match this commit ID.
          title: sourceCommitId
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
        commitMessage:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: The commit message to include in the commit information for
              the merge.
          title: commitMessage
        authorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the author who created the commit. This information
              is used as both the author and committer for the commit.
          title: authorName
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: The email address of the person merging the branches. This
              information is used in the commit information for the merge.
          title: email
        keepEmptyFolders:
          allOf:
          - $ref: '#/components/schemas/KeepEmptyFolders'
          - description: "If the commit contains deletions, whether to keep a folder\
              \ or folder structure if the changes leave the folders empty. If true,\
              \ a .gitkeep file is created for empty folders. The default is false."
          title: keepEmptyFolders
        conflictResolution:
          $ref: '#/components/schemas/CreateUnreferencedMergeCommitInput_conflictResolution'
      required:
      - pullRequestId
      - repositoryName
      title: MergePullRequestBySquashInput
      type: object
    MergePullRequestByThreeWayOutput:
      example:
        pullRequest:
          revisionId: ""
          authorArn: ""
          clientRequestToken: ""
          lastActivityDate: ""
          pullRequestStatus: ""
          description: ""
          pullRequestTargets: ""
          pullRequestId: ""
          title: ""
          creationDate: ""
          approvalRules: ""
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequest'
      title: MergePullRequestByThreeWayOutput
      type: object
    MergePullRequestByThreeWayInput:
      example:
        keepEmptyFolders: ""
        commitMessage: ""
        authorName: ""
        conflictDetailLevel: ""
        sourceCommitId: ""
        pullRequestId: ""
        repositoryName: ""
        email: ""
        conflictResolutionStrategy: ""
        conflictResolution:
          deleteFiles: ""
          replaceContents: ""
          setFileModes: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the pull request was created.
          title: repositoryName
        sourceCommitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full commit ID of the original or updated commit in the
              pull request source branch. Pass this value if you want an exception
              thrown if the current commit ID of the tip of the source branch does
              not match this commit ID.
          title: sourceCommitId
        conflictDetailLevel:
          allOf:
          - $ref: '#/components/schemas/ConflictDetailLevelTypeEnum'
          - description: "The level of conflict detail to use. If unspecified, the\
              \ default FILE_LEVEL is used, which returns a not-mergeable result if\
              \ the same file has differences in both branches. If LINE_LEVEL is specified,\
              \ a conflict is considered not mergeable if the same file in both branches\
              \ has differences on the same line."
          title: conflictDetailLevel
        conflictResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/ConflictResolutionStrategyTypeEnum'
          - description: "Specifies which branch to use when resolving conflicts,\
              \ or whether to attempt automatically merging two versions of a file.\
              \ The default is NONE, which requires any conflicts to be resolved manually\
              \ before the merge operation is successful."
          title: conflictResolutionStrategy
        commitMessage:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: The commit message to include in the commit information for
              the merge.
          title: commitMessage
        authorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the author who created the commit. This information
              is used as both the author and committer for the commit.
          title: authorName
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: The email address of the person merging the branches. This
              information is used in the commit information for the merge.
          title: email
        keepEmptyFolders:
          allOf:
          - $ref: '#/components/schemas/KeepEmptyFolders'
          - description: "If the commit contains deletions, whether to keep a folder\
              \ or folder structure if the changes leave the folders empty. If true,\
              \ a .gitkeep file is created for empty folders. The default is false."
          title: keepEmptyFolders
        conflictResolution:
          $ref: '#/components/schemas/CreateUnreferencedMergeCommitInput_conflictResolution'
      required:
      - pullRequestId
      - repositoryName
      title: MergePullRequestByThreeWayInput
      type: object
    OverridePullRequestApprovalRulesInput:
      example:
        revisionId: ""
        pullRequestId: ""
        overrideStatus: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request for which you\
              \ want to override all approval rule requirements. To get this information,\
              \ use <a>GetPullRequest</a>."
          title: pullRequestId
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: "The system-generated ID of the most recent revision of the\
              \ pull request. You cannot override approval rules for anything but\
              \ the most recent revision of a pull request. To get the revision ID,\
              \ use GetPullRequest."
          title: revisionId
        overrideStatus:
          allOf:
          - $ref: '#/components/schemas/OverrideStatus'
          - description: Whether you want to set aside approval rule requirements
              for the pull request (OVERRIDE) or revoke a previous override and apply
              approval rule requirements (REVOKE). REVOKE status is not stored.
          title: overrideStatus
      required:
      - overrideStatus
      - pullRequestId
      - revisionId
      title: OverridePullRequestApprovalRulesInput
      type: object
    InvalidOverrideStatusException: {}
    OverrideStatusRequiredException: {}
    OverrideAlreadySetException: {}
    PostCommentForComparedCommitOutput:
      example:
        beforeCommitId: ""
        location:
          filePath: ""
          relativeFileVersion: ""
          filePosition: ""
        comment:
          authorArn: ""
          callerReactions: ""
          deleted: ""
          clientRequestToken: ""
          lastModifiedDate: ""
          inReplyTo: ""
          commentId: ""
          reactionCounts: ""
          creationDate: ""
          content: ""
        afterCommitId: ""
        beforeBlobId: ""
        afterBlobId: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you posted a comment on
              the comparison between commits.
          title: repositoryName
        beforeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "In the directionality you established, the full commit ID\
              \ of the before commit."
          title: beforeCommitId
        afterCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "In the directionality you established, the full commit ID\
              \ of the after commit."
          title: afterCommitId
        beforeBlobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: "In the directionality you established, the blob ID of the\
              \ before blob."
          title: beforeBlobId
        afterBlobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: "In the directionality you established, the blob ID of the\
              \ after blob."
          title: afterBlobId
        location:
          $ref: '#/components/schemas/PostCommentForComparedCommitOutput_location'
        comment:
          $ref: '#/components/schemas/PostCommentForComparedCommitOutput_comment'
      title: PostCommentForComparedCommitOutput
      type: object
    PostCommentForComparedCommitInput:
      example:
        beforeCommitId: ""
        clientRequestToken: ""
        location:
          filePath: ""
          relativeFileVersion: ""
          filePosition: ""
        afterCommitId: ""
        repositoryName: ""
        content: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to post a comment
              on the comparison between commits.
          title: repositoryName
        beforeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "To establish the directionality of the comparison, the full\
              \ commit ID of the before commit. Required for commenting on any commit\
              \ unless that commit is the initial commit."
          title: beforeCommitId
        afterCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "To establish the directionality of the comparison, the full\
              \ commit ID of the after commit."
          title: afterCommitId
        location:
          $ref: '#/components/schemas/PostCommentForComparedCommitInput_location'
        content:
          allOf:
          - $ref: '#/components/schemas/Content'
          - description: The content of the comment you want to make.
          title: content
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "A unique, client-generated idempotency token that, when\
              \ provided in a request, ensures the request cannot be repeated with\
              \ a changed parameter. If a request is received with the same parameters\
              \ and a token is included, the request returns information about the\
              \ initial request that used that token."
          title: clientRequestToken
      required:
      - afterCommitId
      - content
      - repositoryName
      title: PostCommentForComparedCommitInput
      type: object
    CommentContentRequiredException: {}
    CommentContentSizeLimitExceededException: {}
    InvalidFileLocationException: {}
    InvalidRelativeFileVersionEnumException: {}
    InvalidFilePositionException: {}
    BeforeCommitIdAndAfterCommitIdAreSameException: {}
    PostCommentForPullRequestOutput:
      example:
        beforeCommitId: ""
        location:
          filePath: ""
          relativeFileVersion: ""
          filePosition: ""
        comment:
          authorArn: ""
          callerReactions: ""
          deleted: ""
          clientRequestToken: ""
          lastModifiedDate: ""
          inReplyTo: ""
          commentId: ""
          reactionCounts: ""
          creationDate: ""
          content: ""
        afterCommitId: ""
        beforeBlobId: ""
        afterBlobId: ""
        repositoryName: ""
        pullRequestId: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you posted a comment on
              a pull request.
          title: repositoryName
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: 'The system-generated ID of the pull request. '
          title: pullRequestId
        beforeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "The full commit ID of the commit in the source branch used\
              \ to create the pull request, or in the case of an updated pull request,\
              \ the full commit ID of the commit used to update the pull request."
          title: beforeCommitId
        afterCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit in the destination branch
              where the pull request is merged.
          title: afterCommitId
        beforeBlobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: "In the directionality of the pull request, the blob ID of\
              \ the before blob."
          title: beforeBlobId
        afterBlobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: "In the directionality of the pull request, the blob ID of\
              \ the after blob."
          title: afterBlobId
        location:
          $ref: '#/components/schemas/PostCommentForPullRequestOutput_location'
        comment:
          $ref: '#/components/schemas/PostCommentForComparedCommitOutput_comment'
      title: PostCommentForPullRequestOutput
      type: object
    PostCommentForPullRequestInput:
      example:
        beforeCommitId: ""
        clientRequestToken: ""
        location:
          filePath: ""
          relativeFileVersion: ""
          filePosition: ""
        afterCommitId: ""
        pullRequestId: ""
        repositoryName: ""
        content: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to post a comment
              on a pull request.
          title: repositoryName
        beforeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit in the destination branch
              that was the tip of the branch at the time the pull request was created.
          title: beforeCommitId
        afterCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit in the source branch that
              is the current tip of the branch for the pull request when you post
              the comment.
          title: afterCommitId
        location:
          $ref: '#/components/schemas/PostCommentForPullRequestInput_location'
        content:
          allOf:
          - $ref: '#/components/schemas/Content'
          - description: The content of your comment on the change.
          title: content
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "A unique, client-generated idempotency token that, when\
              \ provided in a request, ensures the request cannot be repeated with\
              \ a changed parameter. If a request is received with the same parameters\
              \ and a token is included, the request returns information about the\
              \ initial request that used that token."
          title: clientRequestToken
      required:
      - afterCommitId
      - beforeCommitId
      - content
      - pullRequestId
      - repositoryName
      title: PostCommentForPullRequestInput
      type: object
    PostCommentReplyOutput:
      example:
        comment:
          authorArn: ""
          callerReactions: ""
          deleted: ""
          clientRequestToken: ""
          lastModifiedDate: ""
          inReplyTo: ""
          commentId: ""
          reactionCounts: ""
          creationDate: ""
          content: ""
      properties:
        comment:
          $ref: '#/components/schemas/PostCommentReplyOutput_comment'
      title: PostCommentReplyOutput
      type: object
    PostCommentReplyInput:
      example:
        clientRequestToken: ""
        inReplyTo: ""
        content: ""
      properties:
        inReplyTo:
          allOf:
          - $ref: '#/components/schemas/CommentId'
          - description: "The system-generated ID of the comment to which you want\
              \ to reply. To get this ID, use <a>GetCommentsForComparedCommit</a>\
              \ or <a>GetCommentsForPullRequest</a>."
          title: inReplyTo
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "A unique, client-generated idempotency token that, when\
              \ provided in a request, ensures the request cannot be repeated with\
              \ a changed parameter. If a request is received with the same parameters\
              \ and a token is included, the request returns information about the\
              \ initial request that used that token."
          title: clientRequestToken
        content:
          allOf:
          - $ref: '#/components/schemas/Content'
          - description: The contents of your reply to a comment.
          title: content
      required:
      - content
      - inReplyTo
      title: PostCommentReplyInput
      type: object
    PutCommentReactionInput:
      example:
        reactionValue: ""
        commentId: ""
      properties:
        commentId:
          allOf:
          - $ref: '#/components/schemas/CommentId'
          - description: The ID of the comment to which you want to add or update
              a reaction.
          title: commentId
        reactionValue:
          allOf:
          - $ref: '#/components/schemas/ReactionValue'
          - description: "The emoji reaction you want to add or update. To remove\
              \ a reaction, provide a value of blank or null. You can also provide\
              \ the value of none. For information about emoji reaction values supported\
              \ in AWS CodeCommit, see the <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-commit-comment.html#emoji-reaction-table\"\
              >AWS CodeCommit User Guide</a>."
          title: reactionValue
      required:
      - commentId
      - reactionValue
      title: PutCommentReactionInput
      type: object
    InvalidReactionValueException: {}
    ReactionValueRequiredException: {}
    ReactionLimitExceededException: {}
    PutFileOutput:
      example:
        treeId: ""
        blobId: ""
        commitId: ""
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full SHA ID of the commit that contains this file change.
          title: commitId
        blobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: "The ID of the blob, which is its SHA-1 pointer."
          title: blobId
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full SHA-1 pointer of the tree information for the commit
              that contains this file change.
          title: treeId
      required:
      - blobId
      - commitId
      - treeId
      title: PutFileOutput
      type: object
    PutFileInput:
      example:
        parentCommitId: ""
        commitMessage: ""
        filePath: ""
        name: ""
        branchName: ""
        fileMode: ""
        repositoryName: ""
        fileContent: ""
        email: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to add or update
              the file.
          title: repositoryName
        branchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: "The name of the branch where you want to add or update the\
              \ file. If this is an empty repository, this branch is created."
          title: branchName
        fileContent:
          allOf:
          - $ref: '#/components/schemas/FileContent'
          - description: "The content of the file, in binary object format. "
          title: fileContent
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "<p>The name of the file you want to add or update, including\
              \ the relative path to the file in the repository.</p> <note> <p>If\
              \ the path does not currently exist in the repository, the path is created\
              \ as part of adding the file.</p> </note>"
          title: filePath
        fileMode:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The file mode permissions of the blob. Valid file mode permissions
              are listed here.
          title: fileMode
        parentCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "<p>The full commit ID of the head commit in the branch where\
              \ you want to add or update the file. If this is an empty repository,\
              \ no commit ID is required. If this is not an empty repository, a commit\
              \ ID is required. </p> <p>The commit ID must match the ID of the head\
              \ commit at the time of the operation. Otherwise, an error occurs, and\
              \ the file is not added or updated.</p>"
          title: parentCommitId
        commitMessage:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: "A message about why this file was added or updated. Although\
              \ it is optional, a message makes the commit history for your repository\
              \ more useful."
          title: commitMessage
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: "The name of the person adding or updating the file. Although\
              \ it is optional, a name makes the commit history for your repository\
              \ more useful."
          title: name
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: An email address for the person adding or updating the file.
          title: email
      required:
      - branchName
      - fileContent
      - filePath
      - repositoryName
      title: PutFileInput
      type: object
    FileContentRequiredException: {}
    SameFileContentException: {}
    PutRepositoryTriggersOutput:
      description: Represents the output of a put repository triggers operation.
      example:
        configurationId: ""
      properties:
        configurationId:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggersConfigurationId'
          - description: The system-generated unique ID for the create or update operation.
          title: configurationId
      title: PutRepositoryTriggersOutput
      type: object
    PutRepositoryTriggersInput:
      description: Represents the input of a put repository triggers operation.
      example:
        repositoryName: ""
        triggers: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where you want to create or update
              the trigger.
          title: repositoryName
        triggers:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggersList'
          - description: The JSON block of configuration information for each trigger.
          title: triggers
      required:
      - repositoryName
      - triggers
      title: PutRepositoryTriggersInput
      type: object
    RepositoryTriggersListRequiredException: {}
    MaximumRepositoryTriggersExceededException: {}
    InvalidRepositoryTriggerNameException: {}
    InvalidRepositoryTriggerDestinationArnException: {}
    InvalidRepositoryTriggerRegionException: {}
    InvalidRepositoryTriggerCustomDataException: {}
    MaximumBranchesExceededException: {}
    InvalidRepositoryTriggerBranchNameException: {}
    InvalidRepositoryTriggerEventsException: {}
    RepositoryTriggerNameRequiredException: {}
    RepositoryTriggerDestinationArnRequiredException: {}
    RepositoryTriggerBranchNameListRequiredException: {}
    RepositoryTriggerEventsListRequiredException: {}
    TagResourceInput:
      example:
        resourceArn: ""
        tags: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          - description: The Amazon Resource Name (ARN) of the resource to which you
              want to add or update tags.
          title: resourceArn
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: The key-value pair to use when tagging this repository.
          title: tags
      required:
      - resourceArn
      - tags
      title: TagResourceInput
      type: object
    TagsMapRequiredException: {}
    TestRepositoryTriggersOutput:
      description: Represents the output of a test repository triggers operation.
      example:
        successfulExecutions: ""
        failedExecutions: ""
      properties:
        successfulExecutions:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggerNameList'
          - description: "The list of triggers that were successfully tested. This\
              \ list provides the names of the triggers that were successfully tested,\
              \ separated by commas."
          title: successfulExecutions
        failedExecutions:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggerExecutionFailureList'
          - description: "The list of triggers that were not tested. This list provides\
              \ the names of the triggers that could not be tested, separated by commas."
          title: failedExecutions
      title: TestRepositoryTriggersOutput
      type: object
    TestRepositoryTriggersInput:
      description: Represents the input of a test repository triggers operation.
      example:
        repositoryName: ""
        triggers: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository in which to test the triggers.
          title: repositoryName
        triggers:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggersList'
          - description: The list of triggers to test.
          title: triggers
      required:
      - repositoryName
      - triggers
      title: TestRepositoryTriggersInput
      type: object
    UntagResourceInput:
      example:
        tagKeys: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          - description: The Amazon Resource Name (ARN) of the resource to which you
              want to remove tags.
          title: resourceArn
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeysList'
          - description: The tag key for each tag that you want to remove from the
              resource.
          title: tagKeys
      required:
      - resourceArn
      - tagKeys
      title: UntagResourceInput
      type: object
    TagKeysListRequiredException: {}
    InvalidTagKeysListException: {}
    UpdateApprovalRuleTemplateContentOutput:
      example:
        approvalRuleTemplate:
          lastModifiedDate: ""
          approvalRuleTemplateId: ""
          approvalRuleTemplateName: ""
          lastModifiedUser: ""
          creationDate: ""
          ruleContentSha256: ""
          approvalRuleTemplateDescription: ""
          approvalRuleTemplateContent: ""
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/ApprovalRuleTemplate'
      required:
      - approvalRuleTemplate
      title: UpdateApprovalRuleTemplateContentOutput
      type: object
    UpdateApprovalRuleTemplateContentInput:
      example:
        existingRuleContentSha256: ""
        newRuleContent: ""
        approvalRuleTemplateName: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: 'The name of the approval rule template where you want to
              update the content of the rule. '
          title: approvalRuleTemplateName
        newRuleContent:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateContent'
          - description: The content that replaces the existing content of the rule.
              Content statements must be complete. You cannot provide only the changes.
          title: newRuleContent
        existingRuleContentSha256:
          allOf:
          - $ref: '#/components/schemas/RuleContentSha256'
          - description: The SHA-256 hash signature for the content of the approval
              rule. You can retrieve this information by using <a>GetPullRequest</a>.
          title: existingRuleContentSha256
      required:
      - approvalRuleTemplateName
      - newRuleContent
      title: UpdateApprovalRuleTemplateContentInput
      type: object
    InvalidRuleContentSha256Exception: {}
    UpdateApprovalRuleTemplateDescriptionOutput:
      example:
        approvalRuleTemplate:
          lastModifiedDate: ""
          approvalRuleTemplateId: ""
          approvalRuleTemplateName: ""
          lastModifiedUser: ""
          creationDate: ""
          ruleContentSha256: ""
          approvalRuleTemplateDescription: ""
          approvalRuleTemplateContent: ""
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/UpdateApprovalRuleTemplateDescriptionOutput_approvalRuleTemplate'
      required:
      - approvalRuleTemplate
      title: UpdateApprovalRuleTemplateDescriptionOutput
      type: object
    UpdateApprovalRuleTemplateDescriptionInput:
      example:
        approvalRuleTemplateName: ""
        approvalRuleTemplateDescription: ""
      properties:
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The name of the template for which you want to update the
              description.
          title: approvalRuleTemplateName
        approvalRuleTemplateDescription:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateDescription'
          - description: The updated description of the approval rule template.
          title: approvalRuleTemplateDescription
      required:
      - approvalRuleTemplateDescription
      - approvalRuleTemplateName
      title: UpdateApprovalRuleTemplateDescriptionInput
      type: object
    UpdateApprovalRuleTemplateNameOutput:
      example:
        approvalRuleTemplate:
          lastModifiedDate: ""
          approvalRuleTemplateId: ""
          approvalRuleTemplateName: ""
          lastModifiedUser: ""
          creationDate: ""
          ruleContentSha256: ""
          approvalRuleTemplateDescription: ""
          approvalRuleTemplateContent: ""
      properties:
        approvalRuleTemplate:
          $ref: '#/components/schemas/UpdateApprovalRuleTemplateDescriptionOutput_approvalRuleTemplate'
      required:
      - approvalRuleTemplate
      title: UpdateApprovalRuleTemplateNameOutput
      type: object
    UpdateApprovalRuleTemplateNameInput:
      example:
        oldApprovalRuleTemplateName: ""
        newApprovalRuleTemplateName: ""
      properties:
        oldApprovalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The current name of the approval rule template.
          title: oldApprovalRuleTemplateName
        newApprovalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The new name you want to apply to the approval rule template.
          title: newApprovalRuleTemplateName
      required:
      - newApprovalRuleTemplateName
      - oldApprovalRuleTemplateName
      title: UpdateApprovalRuleTemplateNameInput
      type: object
    UpdateCommentOutput:
      example:
        comment:
          authorArn: ""
          callerReactions: ""
          deleted: ""
          clientRequestToken: ""
          lastModifiedDate: ""
          inReplyTo: ""
          commentId: ""
          reactionCounts: ""
          creationDate: ""
          content: ""
      properties:
        comment:
          $ref: '#/components/schemas/UpdateCommentOutput_comment'
      title: UpdateCommentOutput
      type: object
    UpdateCommentInput:
      example:
        commentId: ""
        content: ""
      properties:
        commentId:
          allOf:
          - $ref: '#/components/schemas/CommentId'
          - description: "The system-generated ID of the comment you want to update.\
              \ To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>."
          title: commentId
        content:
          allOf:
          - $ref: '#/components/schemas/Content'
          - description: The updated content to replace the existing content of the
              comment.
          title: content
      required:
      - commentId
      - content
      title: UpdateCommentInput
      type: object
    CommentNotCreatedByCallerException: {}
    UpdateDefaultBranchInput:
      description: Represents the input of an update default branch operation.
      example:
        defaultBranchName: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to set or change the default branch
              for.
          title: repositoryName
        defaultBranchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: The name of the branch to set as the default.
          title: defaultBranchName
      required:
      - defaultBranchName
      - repositoryName
      title: UpdateDefaultBranchInput
      type: object
    UpdatePullRequestApprovalRuleContentOutput:
      example:
        approvalRule:
          lastModifiedDate: ""
          approvalRuleId: ""
          lastModifiedUser: ""
          approvalRuleName: ""
          creationDate: ""
          originApprovalRuleTemplate:
            approvalRuleTemplateId: ""
            approvalRuleTemplateName: ""
          approvalRuleContent: ""
          ruleContentSha256: ""
      properties:
        approvalRule:
          $ref: '#/components/schemas/UpdatePullRequestApprovalRuleContentOutput_approvalRule'
      required:
      - approvalRule
      title: UpdatePullRequestApprovalRuleContentOutput
      type: object
    UpdatePullRequestApprovalRuleContentInput:
      example:
        existingRuleContentSha256: ""
        newRuleContent: ""
        approvalRuleName: ""
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: The system-generated ID of the pull request.
          title: pullRequestId
        approvalRuleName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleName'
          - description: The name of the approval rule you want to update.
          title: approvalRuleName
        existingRuleContentSha256:
          allOf:
          - $ref: '#/components/schemas/RuleContentSha256'
          - description: The SHA-256 hash signature for the content of the approval
              rule. You can retrieve this information by using <a>GetPullRequest</a>.
          title: existingRuleContentSha256
        newRuleContent:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleContent'
          - description: "<p>The updated content for the approval rule.</p> <note>\
              \ <p>When you update the content of the approval rule, you can specify\
              \ approvers in an approval pool in one of two ways:</p> <ul> <li> <p>\
              \ <b>CodeCommitApprovers</b>: This option only requires an AWS account\
              \ and a resource. It can be used for both IAM users and federated access\
              \ users whose name matches the provided resource name. This is a very\
              \ powerful option that offers a great deal of flexibility. For example,\
              \ if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>,\
              \ all of the following are counted as approvals coming from that user:</p>\
              \ <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p>\
              \ </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p>\
              \ </li> </ul> <p>This option does not recognize an active session of\
              \ someone assuming the role of CodeCommitReview with a role session\
              \ name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>)\
              \ unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully\
              \ qualified ARN</b>: This option allows you to specify the fully qualified\
              \ Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul>\
              \ <p>For more information about IAM ARNs, wildcards, and formats, see\
              \ <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\"\
              >IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>"
          title: newRuleContent
      required:
      - approvalRuleName
      - newRuleContent
      - pullRequestId
      title: UpdatePullRequestApprovalRuleContentInput
      type: object
    ApprovalRuleDoesNotExistException: {}
    CannotModifyApprovalRuleFromTemplateException: {}
    UpdatePullRequestApprovalStateInput:
      example:
        revisionId: ""
        approvalState: ""
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: The system-generated ID of the pull request.
          title: pullRequestId
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: The system-generated ID of the revision.
          title: revisionId
        approvalState:
          allOf:
          - $ref: '#/components/schemas/ApprovalState'
          - description: The approval state to associate with the user on the pull
              request.
          title: approvalState
      required:
      - approvalState
      - pullRequestId
      - revisionId
      title: UpdatePullRequestApprovalStateInput
      type: object
    InvalidApprovalStateException: {}
    ApprovalStateRequiredException: {}
    PullRequestCannotBeApprovedByAuthorException: {}
    MaximumNumberOfApprovalsExceededException: {}
    UpdatePullRequestDescriptionOutput:
      example:
        pullRequest:
          revisionId: ""
          authorArn: ""
          clientRequestToken: ""
          lastActivityDate: ""
          pullRequestStatus: ""
          description: ""
          pullRequestTargets: ""
          pullRequestId: ""
          title: ""
          creationDate: ""
          approvalRules: ""
      properties:
        pullRequest:
          $ref: '#/components/schemas/UpdatePullRequestDescriptionOutput_pullRequest'
      required:
      - pullRequest
      title: UpdatePullRequestDescriptionOutput
      type: object
    UpdatePullRequestDescriptionInput:
      example:
        description: ""
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The updated content of the description for the pull request.
              This content replaces the existing description.
          title: description
      required:
      - description
      - pullRequestId
      title: UpdatePullRequestDescriptionInput
      type: object
    UpdatePullRequestStatusOutput:
      example:
        pullRequest:
          revisionId: ""
          authorArn: ""
          clientRequestToken: ""
          lastActivityDate: ""
          pullRequestStatus: ""
          description: ""
          pullRequestTargets: ""
          pullRequestId: ""
          title: ""
          creationDate: ""
          approvalRules: ""
      properties:
        pullRequest:
          $ref: '#/components/schemas/UpdatePullRequestStatusOutput_pullRequest'
      required:
      - pullRequest
      title: UpdatePullRequestStatusOutput
      type: object
    UpdatePullRequestStatusInput:
      example:
        pullRequestStatus: ""
        pullRequestId: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
        pullRequestStatus:
          allOf:
          - $ref: '#/components/schemas/PullRequestStatusEnum'
          - description: "The status of the pull request. The only valid operations\
              \ are to update the status from <code>OPEN</code> to <code>OPEN</code>,\
              \ <code>OPEN</code> to <code>CLOSED</code> or from <code>CLOSED</code>\
              \ to <code>CLOSED</code>."
          title: pullRequestStatus
      required:
      - pullRequestId
      - pullRequestStatus
      title: UpdatePullRequestStatusInput
      type: object
    InvalidPullRequestStatusUpdateException: {}
    PullRequestStatusRequiredException: {}
    UpdatePullRequestTitleOutput:
      example:
        pullRequest:
          revisionId: ""
          authorArn: ""
          clientRequestToken: ""
          lastActivityDate: ""
          pullRequestStatus: ""
          description: ""
          pullRequestTargets: ""
          pullRequestId: ""
          title: ""
          creationDate: ""
          approvalRules: ""
      properties:
        pullRequest:
          $ref: '#/components/schemas/UpdatePullRequestDescriptionOutput_pullRequest'
      required:
      - pullRequest
      title: UpdatePullRequestTitleOutput
      type: object
    UpdatePullRequestTitleInput:
      example:
        pullRequestId: ""
        title: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: "The system-generated ID of the pull request. To get this\
              \ ID, use <a>ListPullRequests</a>."
          title: pullRequestId
        title:
          allOf:
          - $ref: '#/components/schemas/Title'
          - description: The updated title of the pull request. This replaces the
              existing title.
          title: title
      required:
      - pullRequestId
      - title
      title: UpdatePullRequestTitleInput
      type: object
    UpdateRepositoryDescriptionInput:
      description: Represents the input of an update repository description operation.
      example:
        repositoryDescription: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to set or change the comment or
              description for.
          title: repositoryName
        repositoryDescription:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          - description: "The new comment or description for the specified repository.\
              \ Repository descriptions are limited to 1,000 characters."
          title: repositoryDescription
      required:
      - repositoryName
      title: UpdateRepositoryDescriptionInput
      type: object
    UpdateRepositoryNameInput:
      description: Represents the input of an update repository description operation.
      example:
        newName: ""
        oldName: ""
      properties:
        oldName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The current name of the repository.
          title: oldName
        newName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The new name for the repository.
          title: newName
      required:
      - newName
      - oldName
      title: UpdateRepositoryNameInput
      type: object
    AccountId:
      type: string
    AdditionalData:
      type: string
    Arn:
      title: Arn
      type: string
    ApprovalState:
      enum:
      - APPROVE
      - REVOKE
      title: ApprovalState
      type: string
    Approval:
      description: Returns information about a specific approval on a pull request.
      properties:
        userArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the user.
          title: userArn
        approvalState:
          allOf:
          - $ref: '#/components/schemas/ApprovalState'
          - description: "The state of the approval, APPROVE or REVOKE. REVOKE states\
              \ are not stored."
          title: approvalState
      title: Approval
      type: object
    ApprovalList:
      items:
        $ref: '#/components/schemas/Approval'
      type: array
    ApprovalRuleId:
      type: string
    ApprovalRuleName:
      maxLength: 100
      minLength: 1
      title: ApprovalRuleName
      type: string
    ApprovalRuleContent:
      maxLength: 3000
      minLength: 1
      type: string
    RuleContentSha256:
      type: string
    LastModifiedDate:
      format: date-time
      type: string
    CreationDate:
      format: date-time
      type: string
    OriginApprovalRuleTemplate:
      description: Returns information about the template that created the approval
        rule for a pull request.
      properties:
        approvalRuleTemplateId:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateId'
          - description: The ID of the template that created the approval rule.
          title: approvalRuleTemplateId
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The name of the template that created the approval rule.
          title: approvalRuleTemplateName
      title: OriginApprovalRuleTemplate
      type: object
    ApprovalRule:
      description: Returns information about an approval rule.
      properties:
        approvalRuleId:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleId'
          - description: The system-generated ID of the approval rule.
          title: approvalRuleId
        approvalRuleName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleName'
          - description: The name of the approval rule.
          title: approvalRuleName
        approvalRuleContent:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleContent'
          - description: The content of the approval rule.
          title: approvalRuleContent
        ruleContentSha256:
          allOf:
          - $ref: '#/components/schemas/RuleContentSha256'
          - description: The SHA-256 hash signature for the content of the approval
              rule.
          title: ruleContentSha256
        lastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/LastModifiedDate'
          - description: "The date the approval rule was most recently changed, in\
              \ timestamp format."
          title: lastModifiedDate
        creationDate:
          allOf:
          - $ref: '#/components/schemas/CreationDate'
          - description: "The date the approval rule was created, in timestamp format."
          title: creationDate
        lastModifiedUser:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the user who made the most
              recent changes to the approval rule.
          title: lastModifiedUser
        originApprovalRuleTemplate:
          $ref: '#/components/schemas/ApprovalRule_originApprovalRuleTemplate'
      title: ApprovalRule
      type: object
    ApprovalRuleEventMetadata:
      description: Returns information about an event for an approval rule.
      properties:
        approvalRuleName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleName'
          - description: The name of the approval rule.
          title: approvalRuleName
        approvalRuleId:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleId'
          - description: The system-generated ID of the approval rule.
          title: approvalRuleId
        approvalRuleContent:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleContent'
          - description: The content of the approval rule.
          title: approvalRuleContent
      title: ApprovalRuleEventMetadata
      type: object
    RevisionId:
      type: string
    OverrideStatus:
      enum:
      - OVERRIDE
      - REVOKE
      title: OverrideStatus
      type: string
    ApprovalRuleOverriddenEventMetadata:
      description: Returns information about an override event for approval rules
        for a pull request.
      properties:
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: The revision ID of the pull request when the override event
              occurred.
          title: revisionId
        overrideStatus:
          allOf:
          - $ref: '#/components/schemas/OverrideStatus'
          - description: The status of the override event.
          title: overrideStatus
      title: ApprovalRuleOverriddenEventMetadata
      type: object
    ApprovalRuleTemplateId:
      type: string
    ApprovalRuleTemplateName:
      maxLength: 100
      minLength: 1
      title: ApprovalRuleTemplateName
      type: string
    ApprovalRuleTemplateDescription:
      maxLength: 1000
      minLength: 0
      type: string
    ApprovalRuleTemplateContent:
      maxLength: 3000
      minLength: 1
      type: string
    ApprovalRuleTemplate:
      description: Returns information about an approval rule template.
      example:
        lastModifiedDate: ""
        approvalRuleTemplateId: ""
        approvalRuleTemplateName: ""
        lastModifiedUser: ""
        creationDate: ""
        ruleContentSha256: ""
        approvalRuleTemplateDescription: ""
        approvalRuleTemplateContent: ""
      properties:
        approvalRuleTemplateId:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateId'
          - description: The system-generated ID of the approval rule template.
          title: approvalRuleTemplateId
        approvalRuleTemplateName:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateName'
          - description: The name of the approval rule template.
          title: approvalRuleTemplateName
        approvalRuleTemplateDescription:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateDescription'
          - description: The description of the approval rule template.
          title: approvalRuleTemplateDescription
        approvalRuleTemplateContent:
          allOf:
          - $ref: '#/components/schemas/ApprovalRuleTemplateContent'
          - description: The content of the approval rule template.
          title: approvalRuleTemplateContent
        ruleContentSha256:
          allOf:
          - $ref: '#/components/schemas/RuleContentSha256'
          - description: The SHA-256 hash signature for the content of the approval
              rule template.
          title: ruleContentSha256
        lastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/LastModifiedDate'
          - description: "The date the approval rule template was most recently changed,\
              \ in timestamp format."
          title: lastModifiedDate
        creationDate:
          allOf:
          - $ref: '#/components/schemas/CreationDate'
          - description: "The date the approval rule template was created, in timestamp\
              \ format."
          title: creationDate
        lastModifiedUser:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the user who made the most
              recent changes to the approval rule template.
          title: lastModifiedUser
      title: ApprovalRuleTemplate
      type: object
    ApprovalRuleTemplateNameList:
      items:
        $ref: '#/components/schemas/ApprovalRuleTemplateName'
      type: array
    ApprovalRulesList:
      items:
        $ref: '#/components/schemas/ApprovalRule'
      type: array
    ApprovalRulesNotSatisfiedList:
      items:
        $ref: '#/components/schemas/ApprovalRuleName'
      type: array
    ApprovalRulesSatisfiedList:
      items:
        $ref: '#/components/schemas/ApprovalRuleName'
      type: array
    ApprovalStateChangedEventMetadata:
      description: Returns information about a change in the approval state for a
        pull request.
      properties:
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: The revision ID of the pull request when the approval state
              changed.
          title: revisionId
        approvalStatus:
          allOf:
          - $ref: '#/components/schemas/ApprovalState'
          - description: The approval status for the pull request.
          title: approvalStatus
      title: ApprovalStateChangedEventMetadata
      type: object
    Approved:
      type: boolean
    RepositoryName:
      maxLength: 100
      minLength: 1
      pattern: "[\\w\\.-]+"
      title: RepositoryName
      type: string
    ErrorCode:
      type: string
    ErrorMessage:
      type: string
    BatchAssociateApprovalRuleTemplateWithRepositoriesError:
      description: Returns information about errors in a BatchAssociateApprovalRuleTemplateWithRepositories
        operation.
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the association was not
              made.
          title: repositoryName
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          - description: An error code that specifies whether the repository name
              was not valid or not found.
          title: errorCode
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          - description: An error message that provides details about why the repository
              name was not found or not valid.
          title: errorMessage
      title: BatchAssociateApprovalRuleTemplateWithRepositoriesError
      type: object
    BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList:
      items:
        $ref: '#/components/schemas/BatchAssociateApprovalRuleTemplateWithRepositoriesError'
      type: array
    RepositoryNameList:
      items:
        $ref: '#/components/schemas/RepositoryName'
      type: array
    Path:
      title: Path
      type: string
    ExceptionName:
      type: string
    Message:
      type: string
    BatchDescribeMergeConflictsError:
      description: Returns information about errors in a BatchDescribeMergeConflicts
        operation.
      properties:
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The path to the file.
          title: filePath
        exceptionName:
          allOf:
          - $ref: '#/components/schemas/ExceptionName'
          - description: The name of the exception.
          title: exceptionName
        message:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: The message provided by the exception.
          title: message
      required:
      - exceptionName
      - filePath
      - message
      title: BatchDescribeMergeConflictsError
      type: object
    BatchDescribeMergeConflictsErrors:
      items:
        $ref: '#/components/schemas/BatchDescribeMergeConflictsError'
      type: array
    CommitName:
      type: string
    MergeOptionTypeEnum:
      enum:
      - FAST_FORWARD_MERGE
      - SQUASH_MERGE
      - THREE_WAY_MERGE
      title: MergeOptionTypeEnum
      type: string
    MaxResults:
      type: integer
    FilePaths:
      items:
        $ref: '#/components/schemas/Path'
      type: array
    ConflictDetailLevelTypeEnum:
      enum:
      - FILE_LEVEL
      - LINE_LEVEL
      title: ConflictDetailLevelTypeEnum
      type: string
    ConflictResolutionStrategyTypeEnum:
      enum:
      - NONE
      - ACCEPT_SOURCE
      - ACCEPT_DESTINATION
      - AUTOMERGE
      title: ConflictResolutionStrategyTypeEnum
      type: string
    NextToken:
      type: string
    Conflicts:
      items:
        $ref: '#/components/schemas/Conflict'
      type: array
    ObjectId:
      title: ObjectId
      type: string
    BatchDisassociateApprovalRuleTemplateFromRepositoriesError:
      description: Returns information about errors in a BatchDisassociateApprovalRuleTemplateFromRepositories
        operation.
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the association with the
              template was not able to be removed.
          title: repositoryName
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          - description: An error code that specifies whether the repository name
              was not valid or not found.
          title: errorCode
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          - description: An error message that provides details about why the repository
              name was either not found or not valid.
          title: errorMessage
      title: BatchDisassociateApprovalRuleTemplateFromRepositoriesError
      type: object
    BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList:
      items:
        $ref: '#/components/schemas/BatchDisassociateApprovalRuleTemplateFromRepositoriesError'
      type: array
    BatchGetCommitsError:
      description: Returns information about errors in a BatchGetCommits operation.
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: A commit ID that either could not be found or was not in
              a valid format.
          title: commitId
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          - description: An error code that specifies whether the commit ID was not
              valid or not found.
          title: errorCode
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          - description: An error message that provides detail about why the commit
              ID either was not found or was not valid.
          title: errorMessage
      title: BatchGetCommitsError
      type: object
    BatchGetCommitsErrorsList:
      items:
        $ref: '#/components/schemas/BatchGetCommitsError'
      type: array
    CommitIdsInputList:
      items:
        $ref: '#/components/schemas/ObjectId'
      type: array
    CommitObjectsList:
      items:
        $ref: '#/components/schemas/Commit'
      type: array
    RepositoryMetadataList:
      items:
        $ref: '#/components/schemas/RepositoryMetadata'
      type: array
    RepositoryNotFoundList:
      items:
        $ref: '#/components/schemas/RepositoryName'
      type: array
    Mode:
      type: string
    BlobMetadata:
      description: Returns information about a specific Git blob object.
      properties:
        blobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full ID of the blob.
          title: blobId
        path:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The path to the blob and associated file name, if any."
          title: path
        mode:
          allOf:
          - $ref: '#/components/schemas/Mode'
          - description: <p>The file mode permissions of the blob. File mode permission
              codes include:</p> <ul> <li> <p> <code>100644</code> indicates read/write</p>
              </li> <li> <p> <code>100755</code> indicates read/write/execute</p>
              </li> <li> <p> <code>160000</code> indicates a submodule</p> </li> <li>
              <p> <code>120000</code> indicates a symlink</p> </li> </ul>
          title: mode
      title: BlobMetadata
      type: object
    BranchName:
      maxLength: 256
      minLength: 1
      title: BranchName
      type: string
    CommitId:
      type: string
    BranchInfo:
      description: Returns information about a branch.
      properties:
        branchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: The name of the branch.
          title: branchName
        commitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The ID of the last commit made to the branch.
          title: commitId
      title: BranchInfo
      type: object
    BranchNameList:
      items:
        $ref: '#/components/schemas/BranchName'
      type: array
    ReactionValue:
      title: ReactionValue
      type: string
    CallerReactions:
      items:
        $ref: '#/components/schemas/ReactionValue'
      type: array
    CapitalBoolean:
      type: boolean
    ChangeTypeEnum:
      enum:
      - A
      - M
      - D
      title: ChangeTypeEnum
      type: string
    ClientRequestToken:
      type: string
    CloneUrlHttp:
      type: string
    CloneUrlSsh:
      type: string
    CommentId:
      type: string
    Content:
      type: string
    IsCommentDeleted:
      type: boolean
    ReactionCountsMap:
      additionalProperties:
        $ref: '#/components/schemas/Count'
      type: object
    Comment:
      description: Returns information about a specific comment.
      properties:
        commentId:
          allOf:
          - $ref: '#/components/schemas/CommentId'
          - description: The system-generated comment ID.
          title: commentId
        content:
          allOf:
          - $ref: '#/components/schemas/Content'
          - description: The content of the comment.
          title: content
        inReplyTo:
          allOf:
          - $ref: '#/components/schemas/CommentId'
          - description: "The ID of the comment for which this comment is a reply,\
              \ if any."
          title: inReplyTo
        creationDate:
          allOf:
          - $ref: '#/components/schemas/CreationDate'
          - description: "The date and time the comment was created, in timestamp\
              \ format."
          title: creationDate
        lastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/LastModifiedDate'
          - description: "The date and time the comment was most recently modified,\
              \ in timestamp format."
          title: lastModifiedDate
        authorArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the person who posted the
              comment.
          title: authorArn
        deleted:
          allOf:
          - $ref: '#/components/schemas/IsCommentDeleted'
          - description: A Boolean value indicating whether the comment has been deleted.
          title: deleted
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "A unique, client-generated idempotency token that, when\
              \ provided in a request, ensures the request cannot be repeated with\
              \ a changed parameter. If a request is received with the same parameters\
              \ and a token is included, the request returns information about the\
              \ initial request that used that token."
          title: clientRequestToken
        callerReactions:
          allOf:
          - $ref: '#/components/schemas/CallerReactions'
          - description: "The emoji reactions to a comment, if any, submitted by the\
              \ user whose credentials are associated with the call to the API."
          title: callerReactions
        reactionCounts:
          allOf:
          - $ref: '#/components/schemas/ReactionCountsMap'
          - description: A string to integer map that represents the number of individual
              users who have responded to a comment with the specified reactions.
          title: reactionCounts
      title: Comment
      type: object
    Comments:
      items:
        $ref: '#/components/schemas/Comment'
      type: array
    Location:
      description: Returns information about the location of a change or comment in
        the comparison between two commits or a pull request.
      properties:
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The name of the file being compared, including its extension\
              \ and subdirectory, if any."
          title: filePath
        filePosition:
          allOf:
          - $ref: '#/components/schemas/Position'
          - description: "The position of a change in a compared file, in line number\
              \ format."
          title: filePosition
        relativeFileVersion:
          allOf:
          - $ref: '#/components/schemas/RelativeFileVersionEnum'
          - description: "In a comparison of commits or a pull request, whether the\
              \ change is in the before or after of that comparison."
          title: relativeFileVersion
      title: Location
      type: object
    CommentsForComparedCommit:
      description: Returns information about comments on the comparison between two
        commits.
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the compared commits.
          title: repositoryName
        beforeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit used to establish the before
              of the comparison.
          title: beforeCommitId
        afterCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit used to establish the after
              of the comparison.
          title: afterCommitId
        beforeBlobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full blob ID of the commit used to establish the before
              of the comparison.
          title: beforeBlobId
        afterBlobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full blob ID of the commit used to establish the after
              of the comparison.
          title: afterBlobId
        location:
          $ref: '#/components/schemas/CommentsForComparedCommit_location'
        comments:
          allOf:
          - $ref: '#/components/schemas/Comments'
          - description: An array of comment objects. Each comment object contains
              information about a comment on the comparison between commits.
          title: comments
      title: CommentsForComparedCommit
      type: object
    CommentsForComparedCommitData:
      items:
        $ref: '#/components/schemas/CommentsForComparedCommit'
      type: array
    PullRequestId:
      title: PullRequestId
      type: string
    CommentsForPullRequest:
      description: Returns information about comments on a pull request.
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: The system-generated ID of the pull request.
          title: pullRequestId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the pull request.
          title: repositoryName
        beforeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit that was the tip of the
              destination branch when the pull request was created. This commit is
              superceded by the after commit in the source branch when and if you
              merge the source branch into the destination branch.
          title: beforeCommitId
        afterCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: 'The full commit ID of the commit that was the tip of the
              source branch at the time the comment was made. '
          title: afterCommitId
        beforeBlobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full blob ID of the file on which you want to comment
              on the destination commit.
          title: beforeBlobId
        afterBlobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full blob ID of the file on which you want to comment
              on the source commit.
          title: afterBlobId
        location:
          $ref: '#/components/schemas/CommentsForPullRequest_location'
        comments:
          allOf:
          - $ref: '#/components/schemas/Comments'
          - description: An array of comment objects. Each comment object contains
              information about a comment on the pull request.
          title: comments
      title: CommentsForPullRequest
      type: object
    CommentsForPullRequestData:
      items:
        $ref: '#/components/schemas/CommentsForPullRequest'
      type: array
    ParentList:
      items:
        $ref: '#/components/schemas/ObjectId'
      type: array
    UserInfo:
      description: Information about the user who made a specified commit.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the user who made the specified commit.
          title: name
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: "The email address associated with the user who made the\
              \ commit, if any."
          title: email
        date:
          allOf:
          - $ref: '#/components/schemas/Date'
          - description: "The date when the specified commit was commited, in timestamp\
              \ format with GMT offset."
          title: date
      title: UserInfo
      type: object
    Commit:
      description: Returns information about a specific commit.
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: 'The full SHA ID of the specified commit. '
          title: commitId
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: Tree information for the specified commit.
          title: treeId
        parents:
          allOf:
          - $ref: '#/components/schemas/ParentList'
          - description: A list of parent commits for the specified commit. Each parent
              commit ID is the full commit ID.
          title: parents
        message:
          allOf:
          - $ref: '#/components/schemas/Message'
          - description: The commit message associated with the specified commit.
          title: message
        author:
          $ref: '#/components/schemas/Commit_author'
        committer:
          $ref: '#/components/schemas/Commit_committer'
        additionalData:
          allOf:
          - $ref: '#/components/schemas/AdditionalData'
          - description: Any other data associated with the specified commit.
          title: additionalData
      title: Commit
      type: object
    ConflictMetadata:
      description: Information about the metadata for a conflict in a merge operation.
      properties:
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The path of the file that contains conflicts.
          title: filePath
        fileSizes:
          $ref: '#/components/schemas/ConflictMetadata_fileSizes'
        fileModes:
          $ref: '#/components/schemas/ConflictMetadata_fileModes'
        objectTypes:
          $ref: '#/components/schemas/ConflictMetadata_objectTypes'
        numberOfConflicts:
          allOf:
          - $ref: '#/components/schemas/NumberOfConflicts'
          - description: "The number of conflicts, including both hunk conflicts and\
              \ metadata conflicts."
          title: numberOfConflicts
        isBinaryFile:
          $ref: '#/components/schemas/ConflictMetadata_isBinaryFile'
        contentConflict:
          allOf:
          - $ref: '#/components/schemas/IsContentConflict'
          - description: A boolean value indicating whether there are conflicts in
              the content of a file.
          title: contentConflict
        fileModeConflict:
          allOf:
          - $ref: '#/components/schemas/IsFileModeConflict'
          - description: A boolean value indicating whether there are conflicts in
              the file mode of a file.
          title: fileModeConflict
        objectTypeConflict:
          allOf:
          - $ref: '#/components/schemas/IsObjectTypeConflict'
          - description: "A boolean value (true or false) indicating whether there\
              \ are conflicts between the branches in the object type of a file, folder,\
              \ or submodule."
          title: objectTypeConflict
        mergeOperations:
          $ref: '#/components/schemas/ConflictMetadata_mergeOperations'
      title: ConflictMetadata
      type: object
    MergeHunks:
      items:
        $ref: '#/components/schemas/MergeHunk'
      type: array
    Conflict:
      description: Information about conflicts in a merge operation.
      properties:
        conflictMetadata:
          $ref: '#/components/schemas/Conflict_conflictMetadata'
        mergeHunks:
          allOf:
          - $ref: '#/components/schemas/MergeHunks'
          - description: A list of hunks that contain the differences between files
              or lines causing the conflict.
          title: mergeHunks
      title: Conflict
      type: object
    FileSizes:
      description: Information about the size of files in a merge or pull request.
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/FileSize'
          - description: The size of a file in the source of a merge or pull request.
          title: source
        destination:
          allOf:
          - $ref: '#/components/schemas/FileSize'
          - description: The size of a file in the destination of a merge or pull
              request.
          title: destination
        base:
          allOf:
          - $ref: '#/components/schemas/FileSize'
          - description: The size of a file in the base of a merge or pull request.
          title: base
      title: FileSizes
      type: object
    FileModes:
      description: Information about file modes in a merge or pull request.
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The file mode of a file in the source of a merge or pull
              request.
          title: source
        destination:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The file mode of a file in the destination of a merge or
              pull request.
          title: destination
        base:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The file mode of a file in the base of a merge or pull request.
          title: base
      title: FileModes
      type: object
    ObjectTypes:
      description: Information about the type of an object in a merge operation.
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/ObjectTypeEnum'
          - description: The type of the object in the source branch.
          title: source
        destination:
          allOf:
          - $ref: '#/components/schemas/ObjectTypeEnum'
          - description: The type of the object in the destination branch.
          title: destination
        base:
          allOf:
          - $ref: '#/components/schemas/ObjectTypeEnum'
          - description: The type of the object in the base commit of the merge.
          title: base
      title: ObjectTypes
      type: object
    NumberOfConflicts:
      type: integer
    IsBinaryFile:
      description: Information about whether a file is binary or textual in a merge
        or pull request operation.
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/CapitalBoolean'
          - description: The binary or non-binary status of file in the source of
              a merge or pull request.
          title: source
        destination:
          allOf:
          - $ref: '#/components/schemas/CapitalBoolean'
          - description: The binary or non-binary status of a file in the destination
              of a merge or pull request.
          title: destination
        base:
          allOf:
          - $ref: '#/components/schemas/CapitalBoolean'
          - description: The binary or non-binary status of a file in the base of
              a merge or pull request.
          title: base
      title: IsBinaryFile
      type: object
    IsContentConflict:
      type: boolean
    IsFileModeConflict:
      type: boolean
    IsObjectTypeConflict:
      type: boolean
    MergeOperations:
      description: Information about the file operation conflicts in a merge operation.
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/ChangeTypeEnum'
          - description: "The operation (add, modify, or delete) on a file in the\
              \ source of a merge or pull request."
          title: source
        destination:
          allOf:
          - $ref: '#/components/schemas/ChangeTypeEnum'
          - description: The operation on a file in the destination of a merge or
              pull request.
          title: destination
      title: MergeOperations
      type: object
    ConflictMetadataList:
      items:
        $ref: '#/components/schemas/ConflictMetadata'
      type: array
    ReplaceContentEntries:
      items:
        $ref: '#/components/schemas/ReplaceContentEntry'
      type: array
    DeleteFileEntries:
      items:
        $ref: '#/components/schemas/DeleteFileEntry'
      type: array
    SetFileModeEntries:
      items:
        $ref: '#/components/schemas/SetFileModeEntry'
      type: array
    ConflictResolution:
      description: "If AUTOMERGE is the conflict resolution strategy, a list of inputs\
        \ to use when resolving conflicts during a merge."
      properties:
        replaceContents:
          allOf:
          - $ref: '#/components/schemas/ReplaceContentEntries'
          - description: Files to have content replaced as part of the merge conflict
              resolution.
          title: replaceContents
        deleteFiles:
          allOf:
          - $ref: '#/components/schemas/DeleteFileEntries'
          - description: Files to be deleted as part of the merge conflict resolution.
          title: deleteFiles
        setFileModes:
          allOf:
          - $ref: '#/components/schemas/SetFileModeEntries'
          - description: File modes that are set as part of the merge conflict resolution.
          title: setFileModes
      title: ConflictResolution
      type: object
    Count:
      title: Count
      type: integer
    Name:
      type: string
    Email:
      type: string
    KeepEmptyFolders:
      type: boolean
    PutFileEntries:
      items:
        $ref: '#/components/schemas/PutFileEntry'
      type: array
    FilesMetadata:
      items:
        $ref: '#/components/schemas/FileMetadata'
      type: array
    Title:
      maxLength: 150
      type: string
    Description:
      maxLength: 10240
      type: string
    TargetList:
      items:
        $ref: '#/components/schemas/Target'
      type: array
    PullRequest:
      description: Returns information about a pull request.
      example:
        revisionId: ""
        authorArn: ""
        clientRequestToken: ""
        lastActivityDate: ""
        pullRequestStatus: ""
        description: ""
        pullRequestTargets: ""
        pullRequestId: ""
        title: ""
        creationDate: ""
        approvalRules: ""
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: 'The system-generated ID of the pull request. '
          title: pullRequestId
        title:
          allOf:
          - $ref: '#/components/schemas/Title'
          - description: The user-defined title of the pull request. This title is
              displayed in the list of pull requests to other repository users.
          title: title
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The user-defined description of the pull request. This description
              can be used to clarify what should be reviewed and other details of
              the request.
          title: description
        lastActivityDate:
          allOf:
          - $ref: '#/components/schemas/LastModifiedDate'
          - description: "The day and time of the last user or system activity on\
              \ the pull request, in timestamp format."
          title: lastActivityDate
        creationDate:
          allOf:
          - $ref: '#/components/schemas/CreationDate'
          - description: "The date and time the pull request was originally created,\
              \ in timestamp format."
          title: creationDate
        pullRequestStatus:
          allOf:
          - $ref: '#/components/schemas/PullRequestStatusEnum'
          - description: The status of the pull request. Pull request status can only
              change from <code>OPEN</code> to <code>CLOSED</code>.
          title: pullRequestStatus
        authorArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the user who created the
              pull request.
          title: authorArn
        pullRequestTargets:
          allOf:
          - $ref: '#/components/schemas/PullRequestTargetList'
          - description: "The targets of the pull request, including the source branch\
              \ and destination branch for the pull request."
          title: pullRequestTargets
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "A unique, client-generated idempotency token that, when\
              \ provided in a request, ensures the request cannot be repeated with\
              \ a changed parameter. If a request is received with the same parameters\
              \ and a token is included, the request returns information about the\
              \ initial request that used that token."
          title: clientRequestToken
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          - description: The system-generated revision ID for the pull request.
          title: revisionId
        approvalRules:
          allOf:
          - $ref: '#/components/schemas/ApprovalRulesList'
          - description: The approval rules applied to the pull request.
          title: approvalRules
      title: PullRequest
      type: object
    RepositoryDescription:
      maxLength: 1000
      type: string
    TagsMap:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      type: object
    RepositoryMetadata:
      description: Information about a repository.
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: The ID of the AWS account associated with the repository.
          title: accountId
        repositoryId:
          allOf:
          - $ref: '#/components/schemas/RepositoryId'
          - description: The ID of the repository.
          title: repositoryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository's name.
          title: repositoryName
        repositoryDescription:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          - description: A comment or description about the repository.
          title: repositoryDescription
        defaultBranch:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          - description: The repository's default branch name.
          title: defaultBranch
        lastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/LastModifiedDate'
          - description: "The date and time the repository was last modified, in timestamp\
              \ format."
          title: lastModifiedDate
        creationDate:
          allOf:
          - $ref: '#/components/schemas/CreationDate'
          - description: "The date and time the repository was created, in timestamp\
              \ format."
          title: creationDate
        cloneUrlHttp:
          allOf:
          - $ref: '#/components/schemas/CloneUrlHttp'
          - description: The URL to use for cloning the repository over HTTPS.
          title: cloneUrlHttp
        cloneUrlSsh:
          allOf:
          - $ref: '#/components/schemas/CloneUrlSsh'
          - description: The URL to use for cloning the repository over SSH.
          title: cloneUrlSsh
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the repository.
          title: Arn
      title: RepositoryMetadata
      type: object
    Date:
      type: string
    DeleteFileEntry:
      description: A file that is deleted as part of a commit.
      properties:
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The full path of the file to be deleted, including the name\
              \ of the file."
          title: filePath
      required:
      - filePath
      title: DeleteFileEntry
      type: object
    RepositoryId:
      type: string
    PullRequestEventType:
      enum:
      - PULL_REQUEST_CREATED
      - PULL_REQUEST_STATUS_CHANGED
      - PULL_REQUEST_SOURCE_REFERENCE_UPDATED
      - PULL_REQUEST_MERGE_STATE_CHANGED
      - PULL_REQUEST_APPROVAL_RULE_CREATED
      - PULL_REQUEST_APPROVAL_RULE_UPDATED
      - PULL_REQUEST_APPROVAL_RULE_DELETED
      - PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN
      - PULL_REQUEST_APPROVAL_STATE_CHANGED
      title: PullRequestEventType
      type: string
    PullRequestEventList:
      items:
        $ref: '#/components/schemas/PullRequestEvent'
      type: array
    Difference:
      description: Returns information about a set of differences for a commit specifier.
      properties:
        beforeBlob:
          $ref: '#/components/schemas/Difference_beforeBlob'
        afterBlob:
          $ref: '#/components/schemas/Difference_afterBlob'
        changeType:
          allOf:
          - $ref: '#/components/schemas/ChangeTypeEnum'
          - description: "Whether the change type of the difference is an addition\
              \ (A), deletion (D), or modification (M)."
          title: changeType
      title: Difference
      type: object
    DifferenceList:
      items:
        $ref: '#/components/schemas/Difference'
      type: array
    Evaluation:
      description: Returns information about the approval rules applied to a pull
        request and whether conditions have been met.
      properties:
        approved:
          allOf:
          - $ref: '#/components/schemas/Approved'
          - description: Whether the state of the pull request is approved.
          title: approved
        overridden:
          allOf:
          - $ref: '#/components/schemas/Overridden'
          - description: Whether the approval rule requirements for the pull request
              have been overridden and no longer need to be met.
          title: overridden
        approvalRulesSatisfied:
          allOf:
          - $ref: '#/components/schemas/ApprovalRulesSatisfiedList'
          - description: The names of the approval rules that have had their conditions
              met.
          title: approvalRulesSatisfied
        approvalRulesNotSatisfied:
          allOf:
          - $ref: '#/components/schemas/ApprovalRulesNotSatisfiedList'
          - description: The names of the approval rules that have not had their conditions
              met.
          title: approvalRulesNotSatisfied
      title: Evaluation
      type: object
    Overridden:
      type: boolean
    EventDate:
      format: date-time
      type: string
    FileModeTypeEnum:
      enum:
      - EXECUTABLE
      - NORMAL
      - SYMLINK
      title: FileModeTypeEnum
      type: string
    File:
      description: Returns information about a file in a repository.
      properties:
        blobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The blob ID that contains the file information.
          title: blobId
        absolutePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The fully qualified path to the file in the repository.
          title: absolutePath
        relativePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The relative path of the file from the folder where the query
              originated.
          title: relativePath
        fileMode:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The extrapolated file mode permissions for the file. Valid
              values include EXECUTABLE and NORMAL.
          title: fileMode
      title: File
      type: object
    FileContent:
      maxLength: 6291456
      type: string
    FileList:
      items:
        $ref: '#/components/schemas/File'
      type: array
    FileMetadata:
      description: "A file to be added, updated, or deleted as part of a commit."
      properties:
        absolutePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The full path to the file to be added or updated, including\
              \ the name of the file."
          title: absolutePath
        blobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The blob ID that contains the file information.
          title: blobId
        fileMode:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The extrapolated file mode permissions for the file. Valid
              values include EXECUTABLE and NORMAL.
          title: fileMode
      title: FileMetadata
      type: object
    FileSize:
      type: integer
    Folder:
      description: Returns information about a folder in a repository.
      properties:
        treeId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The full SHA-1 pointer of the tree information for the commit
              that contains the folder.
          title: treeId
        absolutePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The fully qualified path of the folder in the repository.
          title: absolutePath
        relativePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The relative path of the specified folder from the folder
              where the query originated.
          title: relativePath
      title: Folder
      type: object
    FolderList:
      items:
        $ref: '#/components/schemas/Folder'
      type: array
    blob:
      type: string
    ReactionsForCommentList:
      items:
        $ref: '#/components/schemas/ReactionForComment'
      type: array
    Limit:
      type: integer
    ObjectSize:
      type: integer
    SymbolicLinkList:
      items:
        $ref: '#/components/schemas/SymbolicLink'
      type: array
    SubModuleList:
      items:
        $ref: '#/components/schemas/SubModule'
      type: array
    IsMergeable:
      type: boolean
    MergeOptions:
      items:
        $ref: '#/components/schemas/MergeOptionTypeEnum'
      type: array
    RepositoryTriggersConfigurationId:
      type: string
    RepositoryTriggersList:
      items:
        $ref: '#/components/schemas/RepositoryTrigger'
      type: array
    HunkContent:
      type: string
    IsHunkConflict:
      type: boolean
    IsMerged:
      type: boolean
    IsMove:
      type: boolean
    LineNumber:
      type: integer
    PullRequestStatusEnum:
      enum:
      - OPEN
      - CLOSED
      title: PullRequestStatusEnum
      type: string
    PullRequestIdList:
      items:
        $ref: '#/components/schemas/PullRequestId'
      type: array
    SortByEnum:
      enum:
      - repositoryName
      - lastModifiedDate
      title: SortByEnum
      type: string
    OrderEnum:
      enum:
      - ascending
      - descending
      title: OrderEnum
      type: string
    RepositoryNameIdPairList:
      items:
        $ref: '#/components/schemas/RepositoryNameIdPair'
      type: array
    ResourceArn:
      type: string
    Position:
      type: integer
    RelativeFileVersionEnum:
      enum:
      - BEFORE
      - AFTER
      title: RelativeFileVersionEnum
      type: string
    MergeHunkDetail:
      description: Information about the details of a merge hunk that contains a conflict
        in a merge or pull request operation.
      properties:
        startLine:
          allOf:
          - $ref: '#/components/schemas/LineNumber'
          - description: The start position of the hunk in the merge result.
          title: startLine
        endLine:
          allOf:
          - $ref: '#/components/schemas/LineNumber'
          - description: The end position of the hunk in the merge result.
          title: endLine
        hunkContent:
          allOf:
          - $ref: '#/components/schemas/HunkContent'
          - description: The base-64 encoded content of the hunk merged region that
              might contain a conflict.
          title: hunkContent
      title: MergeHunkDetail
      type: object
    MergeHunk:
      description: Information about merge hunks in a merge or pull request operation.
      properties:
        isConflict:
          allOf:
          - $ref: '#/components/schemas/IsHunkConflict'
          - description: "A Boolean value indicating whether a combination of hunks\
              \ contains a conflict. Conflicts occur when the same file or the same\
              \ lines in a file were modified in both the source and destination of\
              \ a merge or pull request. Valid values include true, false, and null.\
              \ True when the hunk represents a conflict and one or more files contains\
              \ a line conflict. File mode conflicts in a merge do not set this to\
              \ true."
          title: isConflict
        source:
          $ref: '#/components/schemas/MergeHunk_source'
        destination:
          $ref: '#/components/schemas/MergeHunk_destination'
        base:
          $ref: '#/components/schemas/MergeHunk_base'
      title: MergeHunk
      type: object
    MergeMetadata:
      description: Returns information about a merge or potential merge between a
        source reference and a destination reference in a pull request.
      properties:
        isMerged:
          allOf:
          - $ref: '#/components/schemas/IsMerged'
          - description: A Boolean value indicating whether the merge has been made.
          title: isMerged
        mergedBy:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the user who merged the
              branches.
          title: mergedBy
        mergeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "The commit ID for the merge commit, if any."
          title: mergeCommitId
        mergeOption:
          allOf:
          - $ref: '#/components/schemas/MergeOptionTypeEnum'
          - description: The merge strategy used in the merge.
          title: mergeOption
      title: MergeMetadata
      type: object
    ObjectTypeEnum:
      enum:
      - FILE
      - DIRECTORY
      - GIT_LINK
      - SYMBOLIC_LINK
      title: ObjectTypeEnum
      type: string
    PullRequestTargetList:
      items:
        $ref: '#/components/schemas/PullRequestTarget'
      type: array
    PullRequestCreatedEventMetadata:
      description: Metadata about the pull request that is used when comparing the
        pull request source with its destination.
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the pull request was created.
          title: repositoryName
        sourceCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The commit ID on the source branch used when the pull request
              was created.
          title: sourceCommitId
        destinationCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The commit ID of the tip of the branch specified as the destination
              branch when the pull request was created.
          title: destinationCommitId
        mergeBase:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The commit ID of the most recent commit that the source branch
              and the destination branch have in common.
          title: mergeBase
      title: PullRequestCreatedEventMetadata
      type: object
    PullRequestStatusChangedEventMetadata:
      description: Information about a change to the status of a pull request.
      properties:
        pullRequestStatus:
          allOf:
          - $ref: '#/components/schemas/PullRequestStatusEnum'
          - description: The changed status of the pull request.
          title: pullRequestStatus
      title: PullRequestStatusChangedEventMetadata
      type: object
    PullRequestSourceReferenceUpdatedEventMetadata:
      description: Information about an update to the source branch of a pull request.
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the pull request was updated.
          title: repositoryName
        beforeCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit in the destination branch
              that was the tip of the branch at the time the pull request was updated.
          title: beforeCommitId
        afterCommitId:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID of the commit in the source branch that
              was the tip of the branch at the time the pull request was updated.
          title: afterCommitId
        mergeBase:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The commit ID of the most recent commit that the source branch
              and the destination branch have in common.
          title: mergeBase
      title: PullRequestSourceReferenceUpdatedEventMetadata
      type: object
    PullRequestMergedStateChangedEventMetadata:
      description: 'Returns information about the change in the merge state for a
        pull request event. '
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the pull request was created.
          title: repositoryName
        destinationReference:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: The name of the branch that the pull request is merged into.
          title: destinationReference
        mergeMetadata:
          $ref: '#/components/schemas/PullRequestMergedStateChangedEventMetadata_mergeMetadata'
      title: PullRequestMergedStateChangedEventMetadata
      type: object
    PullRequestEvent:
      description: Returns information about a pull request event.
      properties:
        pullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          - description: The system-generated ID of the pull request.
          title: pullRequestId
        eventDate:
          allOf:
          - $ref: '#/components/schemas/EventDate'
          - description: "The day and time of the pull request event, in timestamp\
              \ format."
          title: eventDate
        pullRequestEventType:
          allOf:
          - $ref: '#/components/schemas/PullRequestEventType'
          - description: "The type of the pull request event (for example, a status\
              \ change event (PULL_REQUEST_STATUS_CHANGED) or update event (PULL_REQUEST_SOURCE_REFERENCE_UPDATED))."
          title: pullRequestEventType
        actorArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the user whose actions
              resulted in the event. Examples include updating the pull request with
              more commits or changing the status of a pull request.
          title: actorArn
        pullRequestCreatedEventMetadata:
          $ref: '#/components/schemas/PullRequestEvent_pullRequestCreatedEventMetadata'
        pullRequestStatusChangedEventMetadata:
          $ref: '#/components/schemas/PullRequestEvent_pullRequestStatusChangedEventMetadata'
        pullRequestSourceReferenceUpdatedEventMetadata:
          $ref: '#/components/schemas/PullRequestEvent_pullRequestSourceReferenceUpdatedEventMetadata'
        pullRequestMergedStateChangedEventMetadata:
          $ref: '#/components/schemas/PullRequestEvent_pullRequestMergedStateChangedEventMetadata'
        approvalRuleEventMetadata:
          $ref: '#/components/schemas/PullRequestEvent_approvalRuleEventMetadata'
        approvalStateChangedEventMetadata:
          $ref: '#/components/schemas/PullRequestEvent_approvalStateChangedEventMetadata'
        approvalRuleOverriddenEventMetadata:
          $ref: '#/components/schemas/PullRequestEvent_approvalRuleOverriddenEventMetadata'
      title: PullRequestEvent
      type: object
    ReferenceName:
      type: string
    PullRequestTarget:
      description: Returns information about a pull request target.
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the pull request
              source and destination branches.
          title: repositoryName
        sourceReference:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: The branch of the repository that contains the changes for
              the pull request. Also known as the source branch.
          title: sourceReference
        destinationReference:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: 'The branch of the repository where the pull request changes
              are merged. Also known as the destination branch. '
          title: destinationReference
        destinationCommit:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The full commit ID that is the tip of the destination branch.
              This is the commit where the pull request was or will be merged.
          title: destinationCommit
        sourceCommit:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: "The full commit ID of the tip of the source branch used\
              \ to create the pull request. If the pull request branch is updated\
              \ by a push while the pull request is open, the commit ID changes to\
              \ reflect the new tip of the branch."
          title: sourceCommit
        mergeBase:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          - description: The commit ID of the most recent commit that the source branch
              and the destination branch have in common.
          title: mergeBase
        mergeMetadata:
          $ref: '#/components/schemas/PullRequestTarget_mergeMetadata'
      title: PullRequestTarget
      type: object
    PutFileEntry:
      description: Information about a file added or updated as part of a commit.
      properties:
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The full path to the file in the repository, including the\
              \ name of the file."
          title: filePath
        fileMode:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The extrapolated file mode permissions for the file. Valid
              values include EXECUTABLE and NORMAL.
          title: fileMode
        fileContent:
          allOf:
          - $ref: '#/components/schemas/FileContent'
          - description: "The content of the file, if a source file is not specified."
          title: fileContent
        sourceFile:
          $ref: '#/components/schemas/PutFileEntry_sourceFile'
      required:
      - filePath
      title: PutFileEntry
      type: object
    SourceFileSpecifier:
      description: Information about a source file that is part of changes made in
        a commit.
      properties:
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The full path to the file, including the name of the file."
          title: filePath
        isMove:
          allOf:
          - $ref: '#/components/schemas/IsMove'
          - description: Whether to remove the source file from the parent commit.
          title: isMove
      required:
      - filePath
      title: SourceFileSpecifier
      type: object
    ReactionEmoji:
      type: string
    ReactionValueFormats:
      description: Information about the values for reactions to a comment. AWS CodeCommit
        supports a limited set of reactions.
      properties:
        emoji:
          allOf:
          - $ref: '#/components/schemas/ReactionEmoji'
          - description: The Emoji Version 1.0 graphic of the reaction. These graphics
              are interpreted slightly differently on different operating systems.
          title: emoji
        shortCode:
          allOf:
          - $ref: '#/components/schemas/ReactionShortCode'
          - description: 'The emoji short code for the reaction. Short codes are interpreted
              slightly differently on different operating systems. '
          title: shortCode
        unicode:
          allOf:
          - $ref: '#/components/schemas/ReactionUnicode'
          - description: The Unicode codepoint for the reaction.
          title: unicode
      title: ReactionValueFormats
      type: object
    ReactionUsersList:
      items:
        $ref: '#/components/schemas/Arn'
      type: array
    ReactionForComment:
      description: Information about the reaction values provided by users on a comment.
      properties:
        reaction:
          $ref: '#/components/schemas/ReactionForComment_reaction'
        reactionUsers:
          allOf:
          - $ref: '#/components/schemas/ReactionUsersList'
          - description: The Amazon Resource Names (ARNs) of users who have provided
              reactions to the comment.
          title: reactionUsers
        reactionsFromDeletedUsersCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: "A numerical count of users who reacted with the specified\
              \ emoji whose identities have been subsequently deleted from IAM. While\
              \ these IAM users or roles no longer exist, the reactions might still\
              \ appear in total reaction counts."
          title: reactionsFromDeletedUsersCount
      title: ReactionForComment
      type: object
    ReactionShortCode:
      type: string
    ReactionUnicode:
      type: string
    ReplaceContentEntry:
      description: Information about a replacement content entry in the conflict of
        a merge or pull request operation.
      properties:
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The path of the conflicting file.
          title: filePath
        replacementType:
          allOf:
          - $ref: '#/components/schemas/ReplacementTypeEnum'
          - description: The replacement type to use when determining how to resolve
              the conflict.
          title: replacementType
        content:
          allOf:
          - $ref: '#/components/schemas/FileContent'
          - description: The base-64 encoded content to use when the replacement type
              is USE_NEW_CONTENT.
          title: content
        fileMode:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The file mode to apply during conflict resoltion.
          title: fileMode
      required:
      - filePath
      - replacementType
      title: ReplaceContentEntry
      type: object
    ReplacementTypeEnum:
      enum:
      - KEEP_BASE
      - KEEP_SOURCE
      - KEEP_DESTINATION
      - USE_NEW_CONTENT
      title: ReplacementTypeEnum
      type: string
    RepositoryNameIdPair:
      description: Information about a repository name and ID.
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name associated with the repository.
          title: repositoryName
        repositoryId:
          allOf:
          - $ref: '#/components/schemas/RepositoryId'
          - description: The ID associated with the repository.
          title: repositoryId
      title: RepositoryNameIdPair
      type: object
    RepositoryTriggerName:
      title: RepositoryTriggerName
      type: string
    RepositoryTriggerCustomData:
      type: string
    RepositoryTriggerEventList:
      items:
        $ref: '#/components/schemas/RepositoryTriggerEventEnum'
      type: array
    RepositoryTrigger:
      description: Information about a trigger for a repository.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggerName'
          - description: The name of the trigger.
          title: name
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The ARN of the resource that is the target for a trigger\
              \ (for example, the ARN of a topic in Amazon SNS)."
          title: destinationArn
        customData:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggerCustomData'
          - description: Any custom data associated with the trigger to be included
              in the information sent to the target of the trigger.
          title: customData
        branches:
          allOf:
          - $ref: '#/components/schemas/BranchNameList'
          - description: "<p>The branches to be included in the trigger configuration.\
              \ If you specify an empty array, the trigger applies to all branches.</p>\
              \ <note> <p>Although no content is required in the array, you must include\
              \ the array itself.</p> </note>"
          title: branches
        events:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggerEventList'
          - description: "<p>The repository events that cause the trigger to run actions\
              \ in another service, such as sending a notification through Amazon\
              \ SNS. </p> <note> <p>The valid value \"all\" cannot be used with any\
              \ other values.</p> </note>"
          title: events
      required:
      - destinationArn
      - events
      - name
      title: RepositoryTrigger
      type: object
    RepositoryTriggerEventEnum:
      enum:
      - all
      - updateReference
      - createReference
      - deleteReference
      title: RepositoryTriggerEventEnum
      type: string
    RepositoryTriggerExecutionFailureMessage:
      type: string
    RepositoryTriggerExecutionFailure:
      description: A trigger failed to run.
      properties:
        trigger:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggerName'
          - description: The name of the trigger that did not run.
          title: trigger
        failureMessage:
          allOf:
          - $ref: '#/components/schemas/RepositoryTriggerExecutionFailureMessage'
          - description: Message information about the trigger that did not run.
          title: failureMessage
      title: RepositoryTriggerExecutionFailure
      type: object
    RepositoryTriggerExecutionFailureList:
      items:
        $ref: '#/components/schemas/RepositoryTriggerExecutionFailure'
      type: array
    RepositoryTriggerNameList:
      items:
        $ref: '#/components/schemas/RepositoryTriggerName'
      type: array
    SetFileModeEntry:
      description: Information about the file mode changes.
      properties:
        filePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: "The full path to the file, including the name of the file."
          title: filePath
        fileMode:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The file mode for the file.
          title: fileMode
      required:
      - fileMode
      - filePath
      title: SetFileModeEntry
      type: object
    SubModule:
      description: Returns information about a submodule reference in a repository
        folder.
      properties:
        commitId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The commit ID that contains the reference to the submodule.
          title: commitId
        absolutePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The fully qualified path to the folder that contains the
              reference to the submodule.
          title: absolutePath
        relativePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The relative path of the submodule from the folder where
              the query originated.
          title: relativePath
      title: SubModule
      type: object
    SymbolicLink:
      description: Returns information about a symbolic link in a repository folder.
      properties:
        blobId:
          allOf:
          - $ref: '#/components/schemas/ObjectId'
          - description: The blob ID that contains the information about the symbolic
              link.
          title: blobId
        absolutePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The fully qualified path to the folder that contains the
              symbolic link.
          title: absolutePath
        relativePath:
          allOf:
          - $ref: '#/components/schemas/Path'
          - description: The relative path of the symbolic link from the folder where
              the query originated.
          title: relativePath
        fileMode:
          allOf:
          - $ref: '#/components/schemas/FileModeTypeEnum'
          - description: The file mode permissions of the blob that cotains information
              about the symbolic link.
          title: fileMode
      title: SymbolicLink
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      title: TagKey
      type: string
    TagKeysList:
      items:
        $ref: '#/components/schemas/TagKey'
      type: array
    TagValue:
      maxLength: 256
      minLength: 0
      title: TagValue
      type: string
    Target:
      description: Returns information about a target for a pull request.
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the pull request.
          title: repositoryName
        sourceReference:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: The branch of the repository that contains the changes for
              the pull request. Also known as the source branch.
          title: sourceReference
        destinationReference:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: The branch of the repository where the pull request changes
              are merged. Also known as the destination branch.
          title: destinationReference
      required:
      - repositoryName
      - sourceReference
      title: Target
      type: object
    CreateApprovalRuleTemplateOutput_approvalRuleTemplate:
      allOf:
      - $ref: '#/components/schemas/ApprovalRuleTemplate'
      - description: The content and structure of the created approval rule template.
      example:
        lastModifiedDate: ""
        approvalRuleTemplateId: ""
        approvalRuleTemplateName: ""
        lastModifiedUser: ""
        creationDate: ""
        ruleContentSha256: ""
        approvalRuleTemplateDescription: ""
        approvalRuleTemplateContent: ""
      title: CreateApprovalRuleTemplateOutput_approvalRuleTemplate
    CreatePullRequestOutput_pullRequest:
      allOf:
      - $ref: '#/components/schemas/PullRequest'
      - description: Information about the newly created pull request.
      example:
        revisionId: ""
        authorArn: ""
        clientRequestToken: ""
        lastActivityDate: ""
        pullRequestStatus: ""
        description: ""
        pullRequestTargets: ""
        pullRequestId: ""
        title: ""
        creationDate: ""
        approvalRules: ""
      title: CreatePullRequestOutput_pullRequest
    CreatePullRequestApprovalRuleOutput_approvalRule:
      allOf:
      - $ref: '#/components/schemas/ApprovalRule'
      - description: Information about the created approval rule.
      example:
        lastModifiedDate: ""
        approvalRuleId: ""
        lastModifiedUser: ""
        approvalRuleName: ""
        creationDate: ""
        originApprovalRuleTemplate:
          approvalRuleTemplateId: ""
          approvalRuleTemplateName: ""
        approvalRuleContent: ""
        ruleContentSha256: ""
      title: CreatePullRequestApprovalRuleOutput_approvalRule
    CreateRepositoryOutput_repositoryMetadata:
      allOf:
      - $ref: '#/components/schemas/RepositoryMetadata'
      - description: Information about the newly created repository.
      example:
        accountId: ""
        cloneUrlSsh: ""
        lastModifiedDate: ""
        defaultBranch: ""
        repositoryId: ""
        repositoryDescription: ""
        cloneUrlHttp: ""
        repositoryName: ""
        creationDate: ""
        Arn: ""
      title: CreateRepositoryOutput_repositoryMetadata
    CreateUnreferencedMergeCommitInput_conflictResolution:
      allOf:
      - $ref: '#/components/schemas/ConflictResolution'
      - description: "If AUTOMERGE is the conflict resolution strategy, a list of\
          \ inputs to use when resolving conflicts during a merge."
      example:
        deleteFiles: ""
        replaceContents: ""
        setFileModes: ""
      title: CreateUnreferencedMergeCommitInput_conflictResolution
    DeleteBranchOutput_deletedBranch:
      allOf:
      - $ref: '#/components/schemas/BranchInfo'
      - description: "Information about the branch deleted by the operation, including\
          \ the branch name and the commit ID that was the tip of the branch."
      example:
        branchName: ""
        commitId: ""
      title: DeleteBranchOutput_deletedBranch
    DeleteCommentContentOutput_comment:
      allOf:
      - $ref: '#/components/schemas/Comment'
      - description: Information about the comment you just deleted.
      example:
        authorArn: ""
        callerReactions: ""
        deleted: ""
        clientRequestToken: ""
        lastModifiedDate: ""
        inReplyTo: ""
        commentId: ""
        reactionCounts: ""
        creationDate: ""
        content: ""
      title: DeleteCommentContentOutput_comment
    DescribeMergeConflictsOutput_conflictMetadata:
      allOf:
      - $ref: '#/components/schemas/ConflictMetadata'
      - description: Contains metadata about the conflicts found in the merge.
      example:
        objectTypeConflict: ""
        filePath: ""
        numberOfConflicts: ""
        contentConflict: ""
        fileSizes:
          destination: ""
          source: ""
          base: ""
        objectTypes:
          destination: ""
          source: ""
          base: ""
        isBinaryFile:
          destination: ""
          source: ""
          base: ""
        fileModeConflict: ""
        fileModes:
          destination: ""
          source: ""
          base: ""
        mergeOperations:
          destination: ""
          source: ""
      title: DescribeMergeConflictsOutput_conflictMetadata
    EvaluatePullRequestApprovalRulesOutput_evaluation:
      allOf:
      - $ref: '#/components/schemas/Evaluation'
      - description: "The result of the evaluation, including the names of the rules\
          \ whose conditions have been met (if any), the names of the rules whose\
          \ conditions have not been met (if any), whether the pull request is in\
          \ the approved state, and whether the pull request approval rule has been\
          \ set aside by an override. "
      example:
        approved: ""
        approvalRulesSatisfied: ""
        approvalRulesNotSatisfied: ""
        overridden: ""
      title: EvaluatePullRequestApprovalRulesOutput_evaluation
    GetApprovalRuleTemplateOutput_approvalRuleTemplate:
      allOf:
      - $ref: '#/components/schemas/ApprovalRuleTemplate'
      - description: The content and structure of the approval rule template.
      example:
        lastModifiedDate: ""
        approvalRuleTemplateId: ""
        approvalRuleTemplateName: ""
        lastModifiedUser: ""
        creationDate: ""
        ruleContentSha256: ""
        approvalRuleTemplateDescription: ""
        approvalRuleTemplateContent: ""
      title: GetApprovalRuleTemplateOutput_approvalRuleTemplate
    GetBranchOutput_branch:
      allOf:
      - $ref: '#/components/schemas/BranchInfo'
      - description: The name of the branch.
      example:
        branchName: ""
        commitId: ""
      title: GetBranchOutput_branch
    GetCommentOutput_comment:
      allOf:
      - $ref: '#/components/schemas/Comment'
      - description: The contents of the comment.
      example:
        authorArn: ""
        callerReactions: ""
        deleted: ""
        clientRequestToken: ""
        lastModifiedDate: ""
        inReplyTo: ""
        commentId: ""
        reactionCounts: ""
        creationDate: ""
        content: ""
      title: GetCommentOutput_comment
    GetCommitOutput_commit:
      allOf:
      - $ref: '#/components/schemas/Commit'
      - description: A commit data type object that contains information about the
          specified commit.
      example:
        treeId: ""
        committer:
          date: ""
          name: ""
          email: ""
        author:
          date: ""
          name: ""
          email: ""
        commitId: ""
        additionalData: ""
        message: ""
        parents: ""
      title: GetCommitOutput_commit
    GetPullRequestOutput_pullRequest:
      allOf:
      - $ref: '#/components/schemas/PullRequest'
      - description: Information about the specified pull request.
      example:
        revisionId: ""
        authorArn: ""
        clientRequestToken: ""
        lastActivityDate: ""
        pullRequestStatus: ""
        description: ""
        pullRequestTargets: ""
        pullRequestId: ""
        title: ""
        creationDate: ""
        approvalRules: ""
      title: GetPullRequestOutput_pullRequest
    GetRepositoryOutput_repositoryMetadata:
      allOf:
      - $ref: '#/components/schemas/RepositoryMetadata'
      - description: Information about the repository.
      example:
        accountId: ""
        cloneUrlSsh: ""
        lastModifiedDate: ""
        defaultBranch: ""
        repositoryId: ""
        repositoryDescription: ""
        cloneUrlHttp: ""
        repositoryName: ""
        creationDate: ""
        Arn: ""
      title: GetRepositoryOutput_repositoryMetadata
    MergePullRequestByFastForwardOutput_pullRequest:
      allOf:
      - $ref: '#/components/schemas/PullRequest'
      - description: "Information about the specified pull request, including the\
          \ merge."
      example:
        revisionId: ""
        authorArn: ""
        clientRequestToken: ""
        lastActivityDate: ""
        pullRequestStatus: ""
        description: ""
        pullRequestTargets: ""
        pullRequestId: ""
        title: ""
        creationDate: ""
        approvalRules: ""
      title: MergePullRequestByFastForwardOutput_pullRequest
    PostCommentForComparedCommitOutput_location:
      allOf:
      - $ref: '#/components/schemas/Location'
      - description: The location of the comment in the comparison between the two
          commits.
      example:
        filePath: ""
        relativeFileVersion: ""
        filePosition: ""
      title: PostCommentForComparedCommitOutput_location
    PostCommentForComparedCommitOutput_comment:
      allOf:
      - $ref: '#/components/schemas/Comment'
      - description: The content of the comment you posted.
      example:
        authorArn: ""
        callerReactions: ""
        deleted: ""
        clientRequestToken: ""
        lastModifiedDate: ""
        inReplyTo: ""
        commentId: ""
        reactionCounts: ""
        creationDate: ""
        content: ""
      title: PostCommentForComparedCommitOutput_comment
    PostCommentForComparedCommitInput_location:
      allOf:
      - $ref: '#/components/schemas/Location'
      - description: The location of the comparison where you want to comment.
      example:
        filePath: ""
        relativeFileVersion: ""
        filePosition: ""
      title: PostCommentForComparedCommitInput_location
    PostCommentForPullRequestOutput_location:
      allOf:
      - $ref: '#/components/schemas/Location'
      - description: The location of the change where you posted your comment.
      example:
        filePath: ""
        relativeFileVersion: ""
        filePosition: ""
      title: PostCommentForPullRequestOutput_location
    PostCommentForPullRequestInput_location:
      allOf:
      - $ref: '#/components/schemas/Location'
      - description: "The location of the change where you want to post your comment.\
          \ If no location is provided, the comment is posted as a general comment\
          \ on the pull request difference between the before commit ID and the after\
          \ commit ID."
      example:
        filePath: ""
        relativeFileVersion: ""
        filePosition: ""
      title: PostCommentForPullRequestInput_location
    PostCommentReplyOutput_comment:
      allOf:
      - $ref: '#/components/schemas/Comment'
      - description: Information about the reply to a comment.
      example:
        authorArn: ""
        callerReactions: ""
        deleted: ""
        clientRequestToken: ""
        lastModifiedDate: ""
        inReplyTo: ""
        commentId: ""
        reactionCounts: ""
        creationDate: ""
        content: ""
      title: PostCommentReplyOutput_comment
    UpdateApprovalRuleTemplateDescriptionOutput_approvalRuleTemplate:
      allOf:
      - $ref: '#/components/schemas/ApprovalRuleTemplate'
      - description: The structure and content of the updated approval rule template.
      example:
        lastModifiedDate: ""
        approvalRuleTemplateId: ""
        approvalRuleTemplateName: ""
        lastModifiedUser: ""
        creationDate: ""
        ruleContentSha256: ""
        approvalRuleTemplateDescription: ""
        approvalRuleTemplateContent: ""
      title: UpdateApprovalRuleTemplateDescriptionOutput_approvalRuleTemplate
    UpdateCommentOutput_comment:
      allOf:
      - $ref: '#/components/schemas/Comment'
      - description: Information about the updated comment.
      example:
        authorArn: ""
        callerReactions: ""
        deleted: ""
        clientRequestToken: ""
        lastModifiedDate: ""
        inReplyTo: ""
        commentId: ""
        reactionCounts: ""
        creationDate: ""
        content: ""
      title: UpdateCommentOutput_comment
    UpdatePullRequestApprovalRuleContentOutput_approvalRule:
      allOf:
      - $ref: '#/components/schemas/ApprovalRule'
      - description: Information about the updated approval rule.
      example:
        lastModifiedDate: ""
        approvalRuleId: ""
        lastModifiedUser: ""
        approvalRuleName: ""
        creationDate: ""
        originApprovalRuleTemplate:
          approvalRuleTemplateId: ""
          approvalRuleTemplateName: ""
        approvalRuleContent: ""
        ruleContentSha256: ""
      title: UpdatePullRequestApprovalRuleContentOutput_approvalRule
    UpdatePullRequestDescriptionOutput_pullRequest:
      allOf:
      - $ref: '#/components/schemas/PullRequest'
      - description: Information about the updated pull request.
      example:
        revisionId: ""
        authorArn: ""
        clientRequestToken: ""
        lastActivityDate: ""
        pullRequestStatus: ""
        description: ""
        pullRequestTargets: ""
        pullRequestId: ""
        title: ""
        creationDate: ""
        approvalRules: ""
      title: UpdatePullRequestDescriptionOutput_pullRequest
    UpdatePullRequestStatusOutput_pullRequest:
      allOf:
      - $ref: '#/components/schemas/PullRequest'
      - description: Information about the pull request.
      example:
        revisionId: ""
        authorArn: ""
        clientRequestToken: ""
        lastActivityDate: ""
        pullRequestStatus: ""
        description: ""
        pullRequestTargets: ""
        pullRequestId: ""
        title: ""
        creationDate: ""
        approvalRules: ""
      title: UpdatePullRequestStatusOutput_pullRequest
    ApprovalRule_originApprovalRuleTemplate:
      allOf:
      - $ref: '#/components/schemas/OriginApprovalRuleTemplate'
      - description: The approval rule template used to create the rule.
      example:
        approvalRuleTemplateId: ""
        approvalRuleTemplateName: ""
      title: ApprovalRule_originApprovalRuleTemplate
    CommentsForComparedCommit_location:
      allOf:
      - $ref: '#/components/schemas/Location'
      - description: "Location information about the comment on the comparison, including\
          \ the file name, line number, and whether the version of the file where\
          \ the comment was made is BEFORE or AFTER."
      title: CommentsForComparedCommit_location
    CommentsForPullRequest_location:
      allOf:
      - $ref: '#/components/schemas/Location'
      - description: "Location information about the comment on the pull request,\
          \ including the file name, line number, and whether the version of the file\
          \ where the comment was made is BEFORE (destination branch) or AFTER (source\
          \ branch)."
      title: CommentsForPullRequest_location
    Commit_author:
      allOf:
      - $ref: '#/components/schemas/UserInfo'
      - description: "Information about the author of the specified commit. Information\
          \ includes the date in timestamp format with GMT offset, the name of the\
          \ author, and the email address for the author, as configured in Git."
      example:
        date: ""
        name: ""
        email: ""
      title: Commit_author
    Commit_committer:
      allOf:
      - $ref: '#/components/schemas/UserInfo'
      - description: "<p>Information about the person who committed the specified\
          \ commit, also known as the committer. Information includes the date in\
          \ timestamp format with GMT offset, the name of the committer, and the email\
          \ address for the committer, as configured in Git.</p> <p>For more information\
          \ about the difference between an author and a committer in Git, see <a\
          \ href=\"http://git-scm.com/book/ch2-3.html\">Viewing the Commit History</a>\
          \ in Pro Git by Scott Chacon and Ben Straub.</p>"
      example:
        date: ""
        name: ""
        email: ""
      title: Commit_committer
    ConflictMetadata_fileSizes:
      allOf:
      - $ref: '#/components/schemas/FileSizes'
      - description: "The file sizes of the file in the source, destination, and base\
          \ of the merge."
      example:
        destination: ""
        source: ""
        base: ""
      title: ConflictMetadata_fileSizes
    ConflictMetadata_fileModes:
      allOf:
      - $ref: '#/components/schemas/FileModes'
      - description: "The file modes of the file in the source, destination, and base\
          \ of the merge."
      example:
        destination: ""
        source: ""
        base: ""
      title: ConflictMetadata_fileModes
    ConflictMetadata_objectTypes:
      allOf:
      - $ref: '#/components/schemas/ObjectTypes'
      - description: Information about any object type conflicts in a merge operation.
      example:
        destination: ""
        source: ""
        base: ""
      title: ConflictMetadata_objectTypes
    ConflictMetadata_isBinaryFile:
      allOf:
      - $ref: '#/components/schemas/IsBinaryFile'
      - description: "A boolean value (true or false) indicating whether the file\
          \ is binary or textual in the source, destination, and base of the merge."
      example:
        destination: ""
        source: ""
        base: ""
      title: ConflictMetadata_isBinaryFile
    ConflictMetadata_mergeOperations:
      allOf:
      - $ref: '#/components/schemas/MergeOperations'
      - description: "Whether an add, modify, or delete operation caused the conflict\
          \ between the source and destination of the merge."
      example:
        destination: ""
        source: ""
      title: ConflictMetadata_mergeOperations
    Conflict_conflictMetadata:
      allOf:
      - $ref: '#/components/schemas/ConflictMetadata'
      - description: Metadata about a conflict in a merge operation.
      title: Conflict_conflictMetadata
    Difference_beforeBlob:
      allOf:
      - $ref: '#/components/schemas/BlobMetadata'
      - description: "Information about a <code>beforeBlob</code> data type object,\
          \ including the ID, the file mode permission code, and the path."
      title: Difference_beforeBlob
    Difference_afterBlob:
      allOf:
      - $ref: '#/components/schemas/BlobMetadata'
      - description: "Information about an <code>afterBlob</code> data type object,\
          \ including the ID, the file mode permission code, and the path."
      title: Difference_afterBlob
    MergeHunk_source:
      allOf:
      - $ref: '#/components/schemas/MergeHunkDetail'
      - description: Information about the merge hunk in the source of a merge or
          pull request.
      title: MergeHunk_source
    MergeHunk_destination:
      allOf:
      - $ref: '#/components/schemas/MergeHunkDetail'
      - description: Information about the merge hunk in the destination of a merge
          or pull request.
      title: MergeHunk_destination
    MergeHunk_base:
      allOf:
      - $ref: '#/components/schemas/MergeHunkDetail'
      - description: Information about the merge hunk in the base of a merge or pull
          request.
      title: MergeHunk_base
    PullRequestMergedStateChangedEventMetadata_mergeMetadata:
      allOf:
      - $ref: '#/components/schemas/MergeMetadata'
      - description: Information about the merge state change event.
      title: PullRequestMergedStateChangedEventMetadata_mergeMetadata
    PullRequestEvent_pullRequestCreatedEventMetadata:
      allOf:
      - $ref: '#/components/schemas/PullRequestCreatedEventMetadata'
      - description: Information about the source and destination branches for the
          pull request.
      title: PullRequestEvent_pullRequestCreatedEventMetadata
    PullRequestEvent_pullRequestStatusChangedEventMetadata:
      allOf:
      - $ref: '#/components/schemas/PullRequestStatusChangedEventMetadata'
      - description: Information about the change in status for the pull request event.
      title: PullRequestEvent_pullRequestStatusChangedEventMetadata
    PullRequestEvent_pullRequestSourceReferenceUpdatedEventMetadata:
      allOf:
      - $ref: '#/components/schemas/PullRequestSourceReferenceUpdatedEventMetadata'
      - description: 'Information about the updated source branch for the pull request
          event. '
      title: PullRequestEvent_pullRequestSourceReferenceUpdatedEventMetadata
    PullRequestEvent_pullRequestMergedStateChangedEventMetadata:
      allOf:
      - $ref: '#/components/schemas/PullRequestMergedStateChangedEventMetadata'
      - description: Information about the change in mergability state for the pull
          request event.
      title: PullRequestEvent_pullRequestMergedStateChangedEventMetadata
    PullRequestEvent_approvalRuleEventMetadata:
      allOf:
      - $ref: '#/components/schemas/ApprovalRuleEventMetadata'
      - description: Information about a pull request event.
      title: PullRequestEvent_approvalRuleEventMetadata
    PullRequestEvent_approvalStateChangedEventMetadata:
      allOf:
      - $ref: '#/components/schemas/ApprovalStateChangedEventMetadata'
      - description: Information about an approval state change for a pull request.
      title: PullRequestEvent_approvalStateChangedEventMetadata
    PullRequestEvent_approvalRuleOverriddenEventMetadata:
      allOf:
      - $ref: '#/components/schemas/ApprovalRuleOverriddenEventMetadata'
      - description: Information about an approval rule override event for a pull
          request.
      title: PullRequestEvent_approvalRuleOverriddenEventMetadata
    PullRequestTarget_mergeMetadata:
      allOf:
      - $ref: '#/components/schemas/MergeMetadata'
      - description: "Returns metadata about the state of the merge, including whether\
          \ the merge has been made."
      title: PullRequestTarget_mergeMetadata
    PutFileEntry_sourceFile:
      allOf:
      - $ref: '#/components/schemas/SourceFileSpecifier'
      - description: "The name and full path of the file that contains the changes\
          \ you want to make as part of the commit, if you are not providing the file\
          \ content directly."
      title: PutFileEntry_sourceFile
    ReactionForComment_reaction:
      allOf:
      - $ref: '#/components/schemas/ReactionValueFormats'
      - description: The reaction for a specified comment.
      title: ReactionForComment_reaction
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
x-hasEquivalentPaths: true
