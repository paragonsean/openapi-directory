# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Target(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, source_reference: str=None, destination_reference: str=None):
        """Target - a model defined in OpenAPI

        :param repository_name: The repository_name of this Target.
        :param source_reference: The source_reference of this Target.
        :param destination_reference: The destination_reference of this Target.
        """
        self.openapi_types = {
            'repository_name': str,
            'source_reference': str,
            'destination_reference': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'source_reference': 'sourceReference',
            'destination_reference': 'destinationReference'
        }

        self._repository_name = repository_name
        self._source_reference = source_reference
        self._destination_reference = destination_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Target of this Target.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this Target.


        :return: The repository_name of this Target.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this Target.


        :param repository_name: The repository_name of this Target.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def source_reference(self):
        """Gets the source_reference of this Target.


        :return: The source_reference of this Target.
        :rtype: str
        """
        return self._source_reference

    @source_reference.setter
    def source_reference(self, source_reference):
        """Sets the source_reference of this Target.


        :param source_reference: The source_reference of this Target.
        :type source_reference: str
        """
        if source_reference is None:
            raise ValueError("Invalid value for `source_reference`, must not be `None`")

        self._source_reference = source_reference

    @property
    def destination_reference(self):
        """Gets the destination_reference of this Target.


        :return: The destination_reference of this Target.
        :rtype: str
        """
        return self._destination_reference

    @destination_reference.setter
    def destination_reference(self, destination_reference):
        """Sets the destination_reference of this Target.


        :param destination_reference: The destination_reference of this Target.
        :type destination_reference: str
        """

        self._destination_reference = destination_reference
