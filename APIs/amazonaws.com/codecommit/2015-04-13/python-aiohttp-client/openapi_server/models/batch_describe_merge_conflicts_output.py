# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchDescribeMergeConflictsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conflicts: List=None, next_token: str=None, errors: List=None, destination_commit_id: str=None, source_commit_id: str=None, base_commit_id: str=None):
        """BatchDescribeMergeConflictsOutput - a model defined in OpenAPI

        :param conflicts: The conflicts of this BatchDescribeMergeConflictsOutput.
        :param next_token: The next_token of this BatchDescribeMergeConflictsOutput.
        :param errors: The errors of this BatchDescribeMergeConflictsOutput.
        :param destination_commit_id: The destination_commit_id of this BatchDescribeMergeConflictsOutput.
        :param source_commit_id: The source_commit_id of this BatchDescribeMergeConflictsOutput.
        :param base_commit_id: The base_commit_id of this BatchDescribeMergeConflictsOutput.
        """
        self.openapi_types = {
            'conflicts': List,
            'next_token': str,
            'errors': List,
            'destination_commit_id': str,
            'source_commit_id': str,
            'base_commit_id': str
        }

        self.attribute_map = {
            'conflicts': 'conflicts',
            'next_token': 'nextToken',
            'errors': 'errors',
            'destination_commit_id': 'destinationCommitId',
            'source_commit_id': 'sourceCommitId',
            'base_commit_id': 'baseCommitId'
        }

        self._conflicts = conflicts
        self._next_token = next_token
        self._errors = errors
        self._destination_commit_id = destination_commit_id
        self._source_commit_id = source_commit_id
        self._base_commit_id = base_commit_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDescribeMergeConflictsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDescribeMergeConflictsOutput of this BatchDescribeMergeConflictsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conflicts(self):
        """Gets the conflicts of this BatchDescribeMergeConflictsOutput.


        :return: The conflicts of this BatchDescribeMergeConflictsOutput.
        :rtype: List
        """
        return self._conflicts

    @conflicts.setter
    def conflicts(self, conflicts):
        """Sets the conflicts of this BatchDescribeMergeConflictsOutput.


        :param conflicts: The conflicts of this BatchDescribeMergeConflictsOutput.
        :type conflicts: List
        """
        if conflicts is None:
            raise ValueError("Invalid value for `conflicts`, must not be `None`")

        self._conflicts = conflicts

    @property
    def next_token(self):
        """Gets the next_token of this BatchDescribeMergeConflictsOutput.


        :return: The next_token of this BatchDescribeMergeConflictsOutput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this BatchDescribeMergeConflictsOutput.


        :param next_token: The next_token of this BatchDescribeMergeConflictsOutput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def errors(self):
        """Gets the errors of this BatchDescribeMergeConflictsOutput.


        :return: The errors of this BatchDescribeMergeConflictsOutput.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchDescribeMergeConflictsOutput.


        :param errors: The errors of this BatchDescribeMergeConflictsOutput.
        :type errors: List
        """

        self._errors = errors

    @property
    def destination_commit_id(self):
        """Gets the destination_commit_id of this BatchDescribeMergeConflictsOutput.


        :return: The destination_commit_id of this BatchDescribeMergeConflictsOutput.
        :rtype: str
        """
        return self._destination_commit_id

    @destination_commit_id.setter
    def destination_commit_id(self, destination_commit_id):
        """Sets the destination_commit_id of this BatchDescribeMergeConflictsOutput.


        :param destination_commit_id: The destination_commit_id of this BatchDescribeMergeConflictsOutput.
        :type destination_commit_id: str
        """
        if destination_commit_id is None:
            raise ValueError("Invalid value for `destination_commit_id`, must not be `None`")

        self._destination_commit_id = destination_commit_id

    @property
    def source_commit_id(self):
        """Gets the source_commit_id of this BatchDescribeMergeConflictsOutput.


        :return: The source_commit_id of this BatchDescribeMergeConflictsOutput.
        :rtype: str
        """
        return self._source_commit_id

    @source_commit_id.setter
    def source_commit_id(self, source_commit_id):
        """Sets the source_commit_id of this BatchDescribeMergeConflictsOutput.


        :param source_commit_id: The source_commit_id of this BatchDescribeMergeConflictsOutput.
        :type source_commit_id: str
        """
        if source_commit_id is None:
            raise ValueError("Invalid value for `source_commit_id`, must not be `None`")

        self._source_commit_id = source_commit_id

    @property
    def base_commit_id(self):
        """Gets the base_commit_id of this BatchDescribeMergeConflictsOutput.


        :return: The base_commit_id of this BatchDescribeMergeConflictsOutput.
        :rtype: str
        """
        return self._base_commit_id

    @base_commit_id.setter
    def base_commit_id(self, base_commit_id):
        """Sets the base_commit_id of this BatchDescribeMergeConflictsOutput.


        :param base_commit_id: The base_commit_id of this BatchDescribeMergeConflictsOutput.
        :type base_commit_id: str
        """

        self._base_commit_id = base_commit_id
