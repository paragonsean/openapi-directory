# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchAssociateApprovalRuleTemplateWithRepositoriesOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_repository_names: List=None, errors: List=None):
        """BatchAssociateApprovalRuleTemplateWithRepositoriesOutput - a model defined in OpenAPI

        :param associated_repository_names: The associated_repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.
        :param errors: The errors of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.
        """
        self.openapi_types = {
            'associated_repository_names': List,
            'errors': List
        }

        self.attribute_map = {
            'associated_repository_names': 'associatedRepositoryNames',
            'errors': 'errors'
        }

        self._associated_repository_names = associated_repository_names
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchAssociateApprovalRuleTemplateWithRepositoriesOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchAssociateApprovalRuleTemplateWithRepositoriesOutput of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_repository_names(self):
        """Gets the associated_repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.


        :return: The associated_repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.
        :rtype: List
        """
        return self._associated_repository_names

    @associated_repository_names.setter
    def associated_repository_names(self, associated_repository_names):
        """Sets the associated_repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.


        :param associated_repository_names: The associated_repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.
        :type associated_repository_names: List
        """
        if associated_repository_names is None:
            raise ValueError("Invalid value for `associated_repository_names`, must not be `None`")

        self._associated_repository_names = associated_repository_names

    @property
    def errors(self):
        """Gets the errors of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.


        :return: The errors of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.


        :param errors: The errors of this BatchAssociateApprovalRuleTemplateWithRepositoriesOutput.
        :type errors: List
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors
