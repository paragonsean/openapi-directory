# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePullRequestInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, description: str=None, targets: List=None, client_request_token: str=None):
        """CreatePullRequestInput - a model defined in OpenAPI

        :param title: The title of this CreatePullRequestInput.
        :param description: The description of this CreatePullRequestInput.
        :param targets: The targets of this CreatePullRequestInput.
        :param client_request_token: The client_request_token of this CreatePullRequestInput.
        """
        self.openapi_types = {
            'title': str,
            'description': str,
            'targets': List,
            'client_request_token': str
        }

        self.attribute_map = {
            'title': 'title',
            'description': 'description',
            'targets': 'targets',
            'client_request_token': 'clientRequestToken'
        }

        self._title = title
        self._description = description
        self._targets = targets
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePullRequestInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePullRequestInput of this CreatePullRequestInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this CreatePullRequestInput.


        :return: The title of this CreatePullRequestInput.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreatePullRequestInput.


        :param title: The title of this CreatePullRequestInput.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def description(self):
        """Gets the description of this CreatePullRequestInput.


        :return: The description of this CreatePullRequestInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePullRequestInput.


        :param description: The description of this CreatePullRequestInput.
        :type description: str
        """

        self._description = description

    @property
    def targets(self):
        """Gets the targets of this CreatePullRequestInput.


        :return: The targets of this CreatePullRequestInput.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this CreatePullRequestInput.


        :param targets: The targets of this CreatePullRequestInput.
        :type targets: List
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreatePullRequestInput.


        :return: The client_request_token of this CreatePullRequestInput.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreatePullRequestInput.


        :param client_request_token: The client_request_token of this CreatePullRequestInput.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token
