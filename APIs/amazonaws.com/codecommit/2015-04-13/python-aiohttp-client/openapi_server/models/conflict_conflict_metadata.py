# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conflict_metadata_file_modes import ConflictMetadataFileModes
from openapi_server.models.conflict_metadata_file_sizes import ConflictMetadataFileSizes
from openapi_server.models.conflict_metadata_is_binary_file import ConflictMetadataIsBinaryFile
from openapi_server.models.conflict_metadata_merge_operations import ConflictMetadataMergeOperations
from openapi_server.models.conflict_metadata_object_types import ConflictMetadataObjectTypes
from openapi_server import util


class ConflictConflictMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_path: str=None, file_sizes: ConflictMetadataFileSizes=None, file_modes: ConflictMetadataFileModes=None, object_types: ConflictMetadataObjectTypes=None, number_of_conflicts: int=None, is_binary_file: ConflictMetadataIsBinaryFile=None, content_conflict: bool=None, file_mode_conflict: bool=None, object_type_conflict: bool=None, merge_operations: ConflictMetadataMergeOperations=None):
        """ConflictConflictMetadata - a model defined in OpenAPI

        :param file_path: The file_path of this ConflictConflictMetadata.
        :param file_sizes: The file_sizes of this ConflictConflictMetadata.
        :param file_modes: The file_modes of this ConflictConflictMetadata.
        :param object_types: The object_types of this ConflictConflictMetadata.
        :param number_of_conflicts: The number_of_conflicts of this ConflictConflictMetadata.
        :param is_binary_file: The is_binary_file of this ConflictConflictMetadata.
        :param content_conflict: The content_conflict of this ConflictConflictMetadata.
        :param file_mode_conflict: The file_mode_conflict of this ConflictConflictMetadata.
        :param object_type_conflict: The object_type_conflict of this ConflictConflictMetadata.
        :param merge_operations: The merge_operations of this ConflictConflictMetadata.
        """
        self.openapi_types = {
            'file_path': str,
            'file_sizes': ConflictMetadataFileSizes,
            'file_modes': ConflictMetadataFileModes,
            'object_types': ConflictMetadataObjectTypes,
            'number_of_conflicts': int,
            'is_binary_file': ConflictMetadataIsBinaryFile,
            'content_conflict': bool,
            'file_mode_conflict': bool,
            'object_type_conflict': bool,
            'merge_operations': ConflictMetadataMergeOperations
        }

        self.attribute_map = {
            'file_path': 'filePath',
            'file_sizes': 'fileSizes',
            'file_modes': 'fileModes',
            'object_types': 'objectTypes',
            'number_of_conflicts': 'numberOfConflicts',
            'is_binary_file': 'isBinaryFile',
            'content_conflict': 'contentConflict',
            'file_mode_conflict': 'fileModeConflict',
            'object_type_conflict': 'objectTypeConflict',
            'merge_operations': 'mergeOperations'
        }

        self._file_path = file_path
        self._file_sizes = file_sizes
        self._file_modes = file_modes
        self._object_types = object_types
        self._number_of_conflicts = number_of_conflicts
        self._is_binary_file = is_binary_file
        self._content_conflict = content_conflict
        self._file_mode_conflict = file_mode_conflict
        self._object_type_conflict = object_type_conflict
        self._merge_operations = merge_operations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConflictConflictMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conflict_conflictMetadata of this ConflictConflictMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_path(self):
        """Gets the file_path of this ConflictConflictMetadata.


        :return: The file_path of this ConflictConflictMetadata.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this ConflictConflictMetadata.


        :param file_path: The file_path of this ConflictConflictMetadata.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def file_sizes(self):
        """Gets the file_sizes of this ConflictConflictMetadata.


        :return: The file_sizes of this ConflictConflictMetadata.
        :rtype: ConflictMetadataFileSizes
        """
        return self._file_sizes

    @file_sizes.setter
    def file_sizes(self, file_sizes):
        """Sets the file_sizes of this ConflictConflictMetadata.


        :param file_sizes: The file_sizes of this ConflictConflictMetadata.
        :type file_sizes: ConflictMetadataFileSizes
        """

        self._file_sizes = file_sizes

    @property
    def file_modes(self):
        """Gets the file_modes of this ConflictConflictMetadata.


        :return: The file_modes of this ConflictConflictMetadata.
        :rtype: ConflictMetadataFileModes
        """
        return self._file_modes

    @file_modes.setter
    def file_modes(self, file_modes):
        """Sets the file_modes of this ConflictConflictMetadata.


        :param file_modes: The file_modes of this ConflictConflictMetadata.
        :type file_modes: ConflictMetadataFileModes
        """

        self._file_modes = file_modes

    @property
    def object_types(self):
        """Gets the object_types of this ConflictConflictMetadata.


        :return: The object_types of this ConflictConflictMetadata.
        :rtype: ConflictMetadataObjectTypes
        """
        return self._object_types

    @object_types.setter
    def object_types(self, object_types):
        """Sets the object_types of this ConflictConflictMetadata.


        :param object_types: The object_types of this ConflictConflictMetadata.
        :type object_types: ConflictMetadataObjectTypes
        """

        self._object_types = object_types

    @property
    def number_of_conflicts(self):
        """Gets the number_of_conflicts of this ConflictConflictMetadata.


        :return: The number_of_conflicts of this ConflictConflictMetadata.
        :rtype: int
        """
        return self._number_of_conflicts

    @number_of_conflicts.setter
    def number_of_conflicts(self, number_of_conflicts):
        """Sets the number_of_conflicts of this ConflictConflictMetadata.


        :param number_of_conflicts: The number_of_conflicts of this ConflictConflictMetadata.
        :type number_of_conflicts: int
        """

        self._number_of_conflicts = number_of_conflicts

    @property
    def is_binary_file(self):
        """Gets the is_binary_file of this ConflictConflictMetadata.


        :return: The is_binary_file of this ConflictConflictMetadata.
        :rtype: ConflictMetadataIsBinaryFile
        """
        return self._is_binary_file

    @is_binary_file.setter
    def is_binary_file(self, is_binary_file):
        """Sets the is_binary_file of this ConflictConflictMetadata.


        :param is_binary_file: The is_binary_file of this ConflictConflictMetadata.
        :type is_binary_file: ConflictMetadataIsBinaryFile
        """

        self._is_binary_file = is_binary_file

    @property
    def content_conflict(self):
        """Gets the content_conflict of this ConflictConflictMetadata.


        :return: The content_conflict of this ConflictConflictMetadata.
        :rtype: bool
        """
        return self._content_conflict

    @content_conflict.setter
    def content_conflict(self, content_conflict):
        """Sets the content_conflict of this ConflictConflictMetadata.


        :param content_conflict: The content_conflict of this ConflictConflictMetadata.
        :type content_conflict: bool
        """

        self._content_conflict = content_conflict

    @property
    def file_mode_conflict(self):
        """Gets the file_mode_conflict of this ConflictConflictMetadata.


        :return: The file_mode_conflict of this ConflictConflictMetadata.
        :rtype: bool
        """
        return self._file_mode_conflict

    @file_mode_conflict.setter
    def file_mode_conflict(self, file_mode_conflict):
        """Sets the file_mode_conflict of this ConflictConflictMetadata.


        :param file_mode_conflict: The file_mode_conflict of this ConflictConflictMetadata.
        :type file_mode_conflict: bool
        """

        self._file_mode_conflict = file_mode_conflict

    @property
    def object_type_conflict(self):
        """Gets the object_type_conflict of this ConflictConflictMetadata.


        :return: The object_type_conflict of this ConflictConflictMetadata.
        :rtype: bool
        """
        return self._object_type_conflict

    @object_type_conflict.setter
    def object_type_conflict(self, object_type_conflict):
        """Sets the object_type_conflict of this ConflictConflictMetadata.


        :param object_type_conflict: The object_type_conflict of this ConflictConflictMetadata.
        :type object_type_conflict: bool
        """

        self._object_type_conflict = object_type_conflict

    @property
    def merge_operations(self):
        """Gets the merge_operations of this ConflictConflictMetadata.


        :return: The merge_operations of this ConflictConflictMetadata.
        :rtype: ConflictMetadataMergeOperations
        """
        return self._merge_operations

    @merge_operations.setter
    def merge_operations(self, merge_operations):
        """Sets the merge_operations of this ConflictConflictMetadata.


        :param merge_operations: The merge_operations of this ConflictConflictMetadata.
        :type merge_operations: ConflictMetadataMergeOperations
        """

        self._merge_operations = merge_operations
