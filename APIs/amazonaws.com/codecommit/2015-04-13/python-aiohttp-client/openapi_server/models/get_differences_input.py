# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDifferencesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, before_commit_specifier: str=None, after_commit_specifier: str=None, before_path: str=None, after_path: str=None, max_results: int=None, next_token: str=None):
        """GetDifferencesInput - a model defined in OpenAPI

        :param repository_name: The repository_name of this GetDifferencesInput.
        :param before_commit_specifier: The before_commit_specifier of this GetDifferencesInput.
        :param after_commit_specifier: The after_commit_specifier of this GetDifferencesInput.
        :param before_path: The before_path of this GetDifferencesInput.
        :param after_path: The after_path of this GetDifferencesInput.
        :param max_results: The max_results of this GetDifferencesInput.
        :param next_token: The next_token of this GetDifferencesInput.
        """
        self.openapi_types = {
            'repository_name': str,
            'before_commit_specifier': str,
            'after_commit_specifier': str,
            'before_path': str,
            'after_path': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'before_commit_specifier': 'beforeCommitSpecifier',
            'after_commit_specifier': 'afterCommitSpecifier',
            'before_path': 'beforePath',
            'after_path': 'afterPath',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._repository_name = repository_name
        self._before_commit_specifier = before_commit_specifier
        self._after_commit_specifier = after_commit_specifier
        self._before_path = before_path
        self._after_path = after_path
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDifferencesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDifferencesInput of this GetDifferencesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this GetDifferencesInput.


        :return: The repository_name of this GetDifferencesInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this GetDifferencesInput.


        :param repository_name: The repository_name of this GetDifferencesInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def before_commit_specifier(self):
        """Gets the before_commit_specifier of this GetDifferencesInput.


        :return: The before_commit_specifier of this GetDifferencesInput.
        :rtype: str
        """
        return self._before_commit_specifier

    @before_commit_specifier.setter
    def before_commit_specifier(self, before_commit_specifier):
        """Sets the before_commit_specifier of this GetDifferencesInput.


        :param before_commit_specifier: The before_commit_specifier of this GetDifferencesInput.
        :type before_commit_specifier: str
        """

        self._before_commit_specifier = before_commit_specifier

    @property
    def after_commit_specifier(self):
        """Gets the after_commit_specifier of this GetDifferencesInput.


        :return: The after_commit_specifier of this GetDifferencesInput.
        :rtype: str
        """
        return self._after_commit_specifier

    @after_commit_specifier.setter
    def after_commit_specifier(self, after_commit_specifier):
        """Sets the after_commit_specifier of this GetDifferencesInput.


        :param after_commit_specifier: The after_commit_specifier of this GetDifferencesInput.
        :type after_commit_specifier: str
        """
        if after_commit_specifier is None:
            raise ValueError("Invalid value for `after_commit_specifier`, must not be `None`")

        self._after_commit_specifier = after_commit_specifier

    @property
    def before_path(self):
        """Gets the before_path of this GetDifferencesInput.


        :return: The before_path of this GetDifferencesInput.
        :rtype: str
        """
        return self._before_path

    @before_path.setter
    def before_path(self, before_path):
        """Sets the before_path of this GetDifferencesInput.


        :param before_path: The before_path of this GetDifferencesInput.
        :type before_path: str
        """

        self._before_path = before_path

    @property
    def after_path(self):
        """Gets the after_path of this GetDifferencesInput.


        :return: The after_path of this GetDifferencesInput.
        :rtype: str
        """
        return self._after_path

    @after_path.setter
    def after_path(self, after_path):
        """Sets the after_path of this GetDifferencesInput.


        :param after_path: The after_path of this GetDifferencesInput.
        :type after_path: str
        """

        self._after_path = after_path

    @property
    def max_results(self):
        """Gets the max_results of this GetDifferencesInput.


        :return: The max_results of this GetDifferencesInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetDifferencesInput.


        :param max_results: The max_results of this GetDifferencesInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetDifferencesInput.


        :return: The next_token of this GetDifferencesInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetDifferencesInput.


        :param next_token: The next_token of this GetDifferencesInput.
        :type next_token: str
        """

        self._next_token = next_token
