# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReactionForCommentReaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emoji: str=None, short_code: str=None, unicode: str=None):
        """ReactionForCommentReaction - a model defined in OpenAPI

        :param emoji: The emoji of this ReactionForCommentReaction.
        :param short_code: The short_code of this ReactionForCommentReaction.
        :param unicode: The unicode of this ReactionForCommentReaction.
        """
        self.openapi_types = {
            'emoji': str,
            'short_code': str,
            'unicode': str
        }

        self.attribute_map = {
            'emoji': 'emoji',
            'short_code': 'shortCode',
            'unicode': 'unicode'
        }

        self._emoji = emoji
        self._short_code = short_code
        self._unicode = unicode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReactionForCommentReaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReactionForComment_reaction of this ReactionForCommentReaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emoji(self):
        """Gets the emoji of this ReactionForCommentReaction.


        :return: The emoji of this ReactionForCommentReaction.
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this ReactionForCommentReaction.


        :param emoji: The emoji of this ReactionForCommentReaction.
        :type emoji: str
        """

        self._emoji = emoji

    @property
    def short_code(self):
        """Gets the short_code of this ReactionForCommentReaction.


        :return: The short_code of this ReactionForCommentReaction.
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this ReactionForCommentReaction.


        :param short_code: The short_code of this ReactionForCommentReaction.
        :type short_code: str
        """

        self._short_code = short_code

    @property
    def unicode(self):
        """Gets the unicode of this ReactionForCommentReaction.


        :return: The unicode of this ReactionForCommentReaction.
        :rtype: str
        """
        return self._unicode

    @unicode.setter
    def unicode(self, unicode):
        """Sets the unicode of this ReactionForCommentReaction.


        :param unicode: The unicode of this ReactionForCommentReaction.
        :type unicode: str
        """

        self._unicode = unicode
