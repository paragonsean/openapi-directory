# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateRepositoryNameInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, old_name: str=None, new_name: str=None):
        """UpdateRepositoryNameInput - a model defined in OpenAPI

        :param old_name: The old_name of this UpdateRepositoryNameInput.
        :param new_name: The new_name of this UpdateRepositoryNameInput.
        """
        self.openapi_types = {
            'old_name': str,
            'new_name': str
        }

        self.attribute_map = {
            'old_name': 'oldName',
            'new_name': 'newName'
        }

        self._old_name = old_name
        self._new_name = new_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRepositoryNameInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRepositoryNameInput of this UpdateRepositoryNameInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def old_name(self):
        """Gets the old_name of this UpdateRepositoryNameInput.


        :return: The old_name of this UpdateRepositoryNameInput.
        :rtype: str
        """
        return self._old_name

    @old_name.setter
    def old_name(self, old_name):
        """Sets the old_name of this UpdateRepositoryNameInput.


        :param old_name: The old_name of this UpdateRepositoryNameInput.
        :type old_name: str
        """
        if old_name is None:
            raise ValueError("Invalid value for `old_name`, must not be `None`")

        self._old_name = old_name

    @property
    def new_name(self):
        """Gets the new_name of this UpdateRepositoryNameInput.


        :return: The new_name of this UpdateRepositoryNameInput.
        :rtype: str
        """
        return self._new_name

    @new_name.setter
    def new_name(self, new_name):
        """Sets the new_name of this UpdateRepositoryNameInput.


        :param new_name: The new_name of this UpdateRepositoryNameInput.
        :type new_name: str
        """
        if new_name is None:
            raise ValueError("Invalid value for `new_name`, must not be `None`")

        self._new_name = new_name
