# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conflict_detail_level_type_enum import ConflictDetailLevelTypeEnum
from openapi_server.models.conflict_resolution_strategy_type_enum import ConflictResolutionStrategyTypeEnum
from openapi_server.models.create_unreferenced_merge_commit_input_conflict_resolution import CreateUnreferencedMergeCommitInputConflictResolution
from openapi_server import util


class MergePullRequestBySquashInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pull_request_id: str=None, repository_name: str=None, source_commit_id: str=None, conflict_detail_level: ConflictDetailLevelTypeEnum=None, conflict_resolution_strategy: ConflictResolutionStrategyTypeEnum=None, commit_message: str=None, author_name: str=None, email: str=None, keep_empty_folders: bool=None, conflict_resolution: CreateUnreferencedMergeCommitInputConflictResolution=None):
        """MergePullRequestBySquashInput - a model defined in OpenAPI

        :param pull_request_id: The pull_request_id of this MergePullRequestBySquashInput.
        :param repository_name: The repository_name of this MergePullRequestBySquashInput.
        :param source_commit_id: The source_commit_id of this MergePullRequestBySquashInput.
        :param conflict_detail_level: The conflict_detail_level of this MergePullRequestBySquashInput.
        :param conflict_resolution_strategy: The conflict_resolution_strategy of this MergePullRequestBySquashInput.
        :param commit_message: The commit_message of this MergePullRequestBySquashInput.
        :param author_name: The author_name of this MergePullRequestBySquashInput.
        :param email: The email of this MergePullRequestBySquashInput.
        :param keep_empty_folders: The keep_empty_folders of this MergePullRequestBySquashInput.
        :param conflict_resolution: The conflict_resolution of this MergePullRequestBySquashInput.
        """
        self.openapi_types = {
            'pull_request_id': str,
            'repository_name': str,
            'source_commit_id': str,
            'conflict_detail_level': ConflictDetailLevelTypeEnum,
            'conflict_resolution_strategy': ConflictResolutionStrategyTypeEnum,
            'commit_message': str,
            'author_name': str,
            'email': str,
            'keep_empty_folders': bool,
            'conflict_resolution': CreateUnreferencedMergeCommitInputConflictResolution
        }

        self.attribute_map = {
            'pull_request_id': 'pullRequestId',
            'repository_name': 'repositoryName',
            'source_commit_id': 'sourceCommitId',
            'conflict_detail_level': 'conflictDetailLevel',
            'conflict_resolution_strategy': 'conflictResolutionStrategy',
            'commit_message': 'commitMessage',
            'author_name': 'authorName',
            'email': 'email',
            'keep_empty_folders': 'keepEmptyFolders',
            'conflict_resolution': 'conflictResolution'
        }

        self._pull_request_id = pull_request_id
        self._repository_name = repository_name
        self._source_commit_id = source_commit_id
        self._conflict_detail_level = conflict_detail_level
        self._conflict_resolution_strategy = conflict_resolution_strategy
        self._commit_message = commit_message
        self._author_name = author_name
        self._email = email
        self._keep_empty_folders = keep_empty_folders
        self._conflict_resolution = conflict_resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MergePullRequestBySquashInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MergePullRequestBySquashInput of this MergePullRequestBySquashInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pull_request_id(self):
        """Gets the pull_request_id of this MergePullRequestBySquashInput.


        :return: The pull_request_id of this MergePullRequestBySquashInput.
        :rtype: str
        """
        return self._pull_request_id

    @pull_request_id.setter
    def pull_request_id(self, pull_request_id):
        """Sets the pull_request_id of this MergePullRequestBySquashInput.


        :param pull_request_id: The pull_request_id of this MergePullRequestBySquashInput.
        :type pull_request_id: str
        """
        if pull_request_id is None:
            raise ValueError("Invalid value for `pull_request_id`, must not be `None`")

        self._pull_request_id = pull_request_id

    @property
    def repository_name(self):
        """Gets the repository_name of this MergePullRequestBySquashInput.


        :return: The repository_name of this MergePullRequestBySquashInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this MergePullRequestBySquashInput.


        :param repository_name: The repository_name of this MergePullRequestBySquashInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def source_commit_id(self):
        """Gets the source_commit_id of this MergePullRequestBySquashInput.


        :return: The source_commit_id of this MergePullRequestBySquashInput.
        :rtype: str
        """
        return self._source_commit_id

    @source_commit_id.setter
    def source_commit_id(self, source_commit_id):
        """Sets the source_commit_id of this MergePullRequestBySquashInput.


        :param source_commit_id: The source_commit_id of this MergePullRequestBySquashInput.
        :type source_commit_id: str
        """

        self._source_commit_id = source_commit_id

    @property
    def conflict_detail_level(self):
        """Gets the conflict_detail_level of this MergePullRequestBySquashInput.


        :return: The conflict_detail_level of this MergePullRequestBySquashInput.
        :rtype: ConflictDetailLevelTypeEnum
        """
        return self._conflict_detail_level

    @conflict_detail_level.setter
    def conflict_detail_level(self, conflict_detail_level):
        """Sets the conflict_detail_level of this MergePullRequestBySquashInput.


        :param conflict_detail_level: The conflict_detail_level of this MergePullRequestBySquashInput.
        :type conflict_detail_level: ConflictDetailLevelTypeEnum
        """

        self._conflict_detail_level = conflict_detail_level

    @property
    def conflict_resolution_strategy(self):
        """Gets the conflict_resolution_strategy of this MergePullRequestBySquashInput.


        :return: The conflict_resolution_strategy of this MergePullRequestBySquashInput.
        :rtype: ConflictResolutionStrategyTypeEnum
        """
        return self._conflict_resolution_strategy

    @conflict_resolution_strategy.setter
    def conflict_resolution_strategy(self, conflict_resolution_strategy):
        """Sets the conflict_resolution_strategy of this MergePullRequestBySquashInput.


        :param conflict_resolution_strategy: The conflict_resolution_strategy of this MergePullRequestBySquashInput.
        :type conflict_resolution_strategy: ConflictResolutionStrategyTypeEnum
        """

        self._conflict_resolution_strategy = conflict_resolution_strategy

    @property
    def commit_message(self):
        """Gets the commit_message of this MergePullRequestBySquashInput.


        :return: The commit_message of this MergePullRequestBySquashInput.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this MergePullRequestBySquashInput.


        :param commit_message: The commit_message of this MergePullRequestBySquashInput.
        :type commit_message: str
        """

        self._commit_message = commit_message

    @property
    def author_name(self):
        """Gets the author_name of this MergePullRequestBySquashInput.


        :return: The author_name of this MergePullRequestBySquashInput.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this MergePullRequestBySquashInput.


        :param author_name: The author_name of this MergePullRequestBySquashInput.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def email(self):
        """Gets the email of this MergePullRequestBySquashInput.


        :return: The email of this MergePullRequestBySquashInput.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MergePullRequestBySquashInput.


        :param email: The email of this MergePullRequestBySquashInput.
        :type email: str
        """

        self._email = email

    @property
    def keep_empty_folders(self):
        """Gets the keep_empty_folders of this MergePullRequestBySquashInput.


        :return: The keep_empty_folders of this MergePullRequestBySquashInput.
        :rtype: bool
        """
        return self._keep_empty_folders

    @keep_empty_folders.setter
    def keep_empty_folders(self, keep_empty_folders):
        """Sets the keep_empty_folders of this MergePullRequestBySquashInput.


        :param keep_empty_folders: The keep_empty_folders of this MergePullRequestBySquashInput.
        :type keep_empty_folders: bool
        """

        self._keep_empty_folders = keep_empty_folders

    @property
    def conflict_resolution(self):
        """Gets the conflict_resolution of this MergePullRequestBySquashInput.


        :return: The conflict_resolution of this MergePullRequestBySquashInput.
        :rtype: CreateUnreferencedMergeCommitInputConflictResolution
        """
        return self._conflict_resolution

    @conflict_resolution.setter
    def conflict_resolution(self, conflict_resolution):
        """Sets the conflict_resolution of this MergePullRequestBySquashInput.


        :param conflict_resolution: The conflict_resolution of this MergePullRequestBySquashInput.
        :type conflict_resolution: CreateUnreferencedMergeCommitInputConflictResolution
        """

        self._conflict_resolution = conflict_resolution
