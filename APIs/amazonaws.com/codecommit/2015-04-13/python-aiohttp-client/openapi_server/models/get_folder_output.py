# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetFolderOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_id: str=None, folder_path: str=None, tree_id: str=None, sub_folders: List=None, files: List=None, symbolic_links: List=None, sub_modules: List=None):
        """GetFolderOutput - a model defined in OpenAPI

        :param commit_id: The commit_id of this GetFolderOutput.
        :param folder_path: The folder_path of this GetFolderOutput.
        :param tree_id: The tree_id of this GetFolderOutput.
        :param sub_folders: The sub_folders of this GetFolderOutput.
        :param files: The files of this GetFolderOutput.
        :param symbolic_links: The symbolic_links of this GetFolderOutput.
        :param sub_modules: The sub_modules of this GetFolderOutput.
        """
        self.openapi_types = {
            'commit_id': str,
            'folder_path': str,
            'tree_id': str,
            'sub_folders': List,
            'files': List,
            'symbolic_links': List,
            'sub_modules': List
        }

        self.attribute_map = {
            'commit_id': 'commitId',
            'folder_path': 'folderPath',
            'tree_id': 'treeId',
            'sub_folders': 'subFolders',
            'files': 'files',
            'symbolic_links': 'symbolicLinks',
            'sub_modules': 'subModules'
        }

        self._commit_id = commit_id
        self._folder_path = folder_path
        self._tree_id = tree_id
        self._sub_folders = sub_folders
        self._files = files
        self._symbolic_links = symbolic_links
        self._sub_modules = sub_modules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFolderOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFolderOutput of this GetFolderOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_id(self):
        """Gets the commit_id of this GetFolderOutput.


        :return: The commit_id of this GetFolderOutput.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this GetFolderOutput.


        :param commit_id: The commit_id of this GetFolderOutput.
        :type commit_id: str
        """
        if commit_id is None:
            raise ValueError("Invalid value for `commit_id`, must not be `None`")

        self._commit_id = commit_id

    @property
    def folder_path(self):
        """Gets the folder_path of this GetFolderOutput.


        :return: The folder_path of this GetFolderOutput.
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this GetFolderOutput.


        :param folder_path: The folder_path of this GetFolderOutput.
        :type folder_path: str
        """
        if folder_path is None:
            raise ValueError("Invalid value for `folder_path`, must not be `None`")

        self._folder_path = folder_path

    @property
    def tree_id(self):
        """Gets the tree_id of this GetFolderOutput.


        :return: The tree_id of this GetFolderOutput.
        :rtype: str
        """
        return self._tree_id

    @tree_id.setter
    def tree_id(self, tree_id):
        """Sets the tree_id of this GetFolderOutput.


        :param tree_id: The tree_id of this GetFolderOutput.
        :type tree_id: str
        """

        self._tree_id = tree_id

    @property
    def sub_folders(self):
        """Gets the sub_folders of this GetFolderOutput.


        :return: The sub_folders of this GetFolderOutput.
        :rtype: List
        """
        return self._sub_folders

    @sub_folders.setter
    def sub_folders(self, sub_folders):
        """Sets the sub_folders of this GetFolderOutput.


        :param sub_folders: The sub_folders of this GetFolderOutput.
        :type sub_folders: List
        """

        self._sub_folders = sub_folders

    @property
    def files(self):
        """Gets the files of this GetFolderOutput.


        :return: The files of this GetFolderOutput.
        :rtype: List
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this GetFolderOutput.


        :param files: The files of this GetFolderOutput.
        :type files: List
        """

        self._files = files

    @property
    def symbolic_links(self):
        """Gets the symbolic_links of this GetFolderOutput.


        :return: The symbolic_links of this GetFolderOutput.
        :rtype: List
        """
        return self._symbolic_links

    @symbolic_links.setter
    def symbolic_links(self, symbolic_links):
        """Sets the symbolic_links of this GetFolderOutput.


        :param symbolic_links: The symbolic_links of this GetFolderOutput.
        :type symbolic_links: List
        """

        self._symbolic_links = symbolic_links

    @property
    def sub_modules(self):
        """Gets the sub_modules of this GetFolderOutput.


        :return: The sub_modules of this GetFolderOutput.
        :rtype: List
        """
        return self._sub_modules

    @sub_modules.setter
    def sub_modules(self, sub_modules):
        """Sets the sub_modules of this GetFolderOutput.


        :param sub_modules: The sub_modules of this GetFolderOutput.
        :type sub_modules: List
        """

        self._sub_modules = sub_modules
