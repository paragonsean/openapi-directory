# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetMergeOptionsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merge_options: List=None, source_commit_id: str=None, destination_commit_id: str=None, base_commit_id: str=None):
        """GetMergeOptionsOutput - a model defined in OpenAPI

        :param merge_options: The merge_options of this GetMergeOptionsOutput.
        :param source_commit_id: The source_commit_id of this GetMergeOptionsOutput.
        :param destination_commit_id: The destination_commit_id of this GetMergeOptionsOutput.
        :param base_commit_id: The base_commit_id of this GetMergeOptionsOutput.
        """
        self.openapi_types = {
            'merge_options': List,
            'source_commit_id': str,
            'destination_commit_id': str,
            'base_commit_id': str
        }

        self.attribute_map = {
            'merge_options': 'mergeOptions',
            'source_commit_id': 'sourceCommitId',
            'destination_commit_id': 'destinationCommitId',
            'base_commit_id': 'baseCommitId'
        }

        self._merge_options = merge_options
        self._source_commit_id = source_commit_id
        self._destination_commit_id = destination_commit_id
        self._base_commit_id = base_commit_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMergeOptionsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetMergeOptionsOutput of this GetMergeOptionsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merge_options(self):
        """Gets the merge_options of this GetMergeOptionsOutput.


        :return: The merge_options of this GetMergeOptionsOutput.
        :rtype: List
        """
        return self._merge_options

    @merge_options.setter
    def merge_options(self, merge_options):
        """Sets the merge_options of this GetMergeOptionsOutput.


        :param merge_options: The merge_options of this GetMergeOptionsOutput.
        :type merge_options: List
        """
        if merge_options is None:
            raise ValueError("Invalid value for `merge_options`, must not be `None`")

        self._merge_options = merge_options

    @property
    def source_commit_id(self):
        """Gets the source_commit_id of this GetMergeOptionsOutput.


        :return: The source_commit_id of this GetMergeOptionsOutput.
        :rtype: str
        """
        return self._source_commit_id

    @source_commit_id.setter
    def source_commit_id(self, source_commit_id):
        """Sets the source_commit_id of this GetMergeOptionsOutput.


        :param source_commit_id: The source_commit_id of this GetMergeOptionsOutput.
        :type source_commit_id: str
        """
        if source_commit_id is None:
            raise ValueError("Invalid value for `source_commit_id`, must not be `None`")

        self._source_commit_id = source_commit_id

    @property
    def destination_commit_id(self):
        """Gets the destination_commit_id of this GetMergeOptionsOutput.


        :return: The destination_commit_id of this GetMergeOptionsOutput.
        :rtype: str
        """
        return self._destination_commit_id

    @destination_commit_id.setter
    def destination_commit_id(self, destination_commit_id):
        """Sets the destination_commit_id of this GetMergeOptionsOutput.


        :param destination_commit_id: The destination_commit_id of this GetMergeOptionsOutput.
        :type destination_commit_id: str
        """
        if destination_commit_id is None:
            raise ValueError("Invalid value for `destination_commit_id`, must not be `None`")

        self._destination_commit_id = destination_commit_id

    @property
    def base_commit_id(self):
        """Gets the base_commit_id of this GetMergeOptionsOutput.


        :return: The base_commit_id of this GetMergeOptionsOutput.
        :rtype: str
        """
        return self._base_commit_id

    @base_commit_id.setter
    def base_commit_id(self, base_commit_id):
        """Sets the base_commit_id of this GetMergeOptionsOutput.


        :param base_commit_id: The base_commit_id of this GetMergeOptionsOutput.
        :type base_commit_id: str
        """
        if base_commit_id is None:
            raise ValueError("Invalid value for `base_commit_id`, must not be `None`")

        self._base_commit_id = base_commit_id
