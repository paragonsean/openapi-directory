# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_mode_type_enum import FileModeTypeEnum
from openapi_server import util


class PutFileInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, branch_name: str=None, file_content: str=None, file_path: str=None, file_mode: FileModeTypeEnum=None, parent_commit_id: str=None, commit_message: str=None, name: str=None, email: str=None):
        """PutFileInput - a model defined in OpenAPI

        :param repository_name: The repository_name of this PutFileInput.
        :param branch_name: The branch_name of this PutFileInput.
        :param file_content: The file_content of this PutFileInput.
        :param file_path: The file_path of this PutFileInput.
        :param file_mode: The file_mode of this PutFileInput.
        :param parent_commit_id: The parent_commit_id of this PutFileInput.
        :param commit_message: The commit_message of this PutFileInput.
        :param name: The name of this PutFileInput.
        :param email: The email of this PutFileInput.
        """
        self.openapi_types = {
            'repository_name': str,
            'branch_name': str,
            'file_content': str,
            'file_path': str,
            'file_mode': FileModeTypeEnum,
            'parent_commit_id': str,
            'commit_message': str,
            'name': str,
            'email': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'branch_name': 'branchName',
            'file_content': 'fileContent',
            'file_path': 'filePath',
            'file_mode': 'fileMode',
            'parent_commit_id': 'parentCommitId',
            'commit_message': 'commitMessage',
            'name': 'name',
            'email': 'email'
        }

        self._repository_name = repository_name
        self._branch_name = branch_name
        self._file_content = file_content
        self._file_path = file_path
        self._file_mode = file_mode
        self._parent_commit_id = parent_commit_id
        self._commit_message = commit_message
        self._name = name
        self._email = email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutFileInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutFileInput of this PutFileInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this PutFileInput.


        :return: The repository_name of this PutFileInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this PutFileInput.


        :param repository_name: The repository_name of this PutFileInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def branch_name(self):
        """Gets the branch_name of this PutFileInput.


        :return: The branch_name of this PutFileInput.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this PutFileInput.


        :param branch_name: The branch_name of this PutFileInput.
        :type branch_name: str
        """
        if branch_name is None:
            raise ValueError("Invalid value for `branch_name`, must not be `None`")

        self._branch_name = branch_name

    @property
    def file_content(self):
        """Gets the file_content of this PutFileInput.


        :return: The file_content of this PutFileInput.
        :rtype: str
        """
        return self._file_content

    @file_content.setter
    def file_content(self, file_content):
        """Sets the file_content of this PutFileInput.


        :param file_content: The file_content of this PutFileInput.
        :type file_content: str
        """
        if file_content is None:
            raise ValueError("Invalid value for `file_content`, must not be `None`")

        self._file_content = file_content

    @property
    def file_path(self):
        """Gets the file_path of this PutFileInput.


        :return: The file_path of this PutFileInput.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this PutFileInput.


        :param file_path: The file_path of this PutFileInput.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def file_mode(self):
        """Gets the file_mode of this PutFileInput.


        :return: The file_mode of this PutFileInput.
        :rtype: FileModeTypeEnum
        """
        return self._file_mode

    @file_mode.setter
    def file_mode(self, file_mode):
        """Sets the file_mode of this PutFileInput.


        :param file_mode: The file_mode of this PutFileInput.
        :type file_mode: FileModeTypeEnum
        """

        self._file_mode = file_mode

    @property
    def parent_commit_id(self):
        """Gets the parent_commit_id of this PutFileInput.


        :return: The parent_commit_id of this PutFileInput.
        :rtype: str
        """
        return self._parent_commit_id

    @parent_commit_id.setter
    def parent_commit_id(self, parent_commit_id):
        """Sets the parent_commit_id of this PutFileInput.


        :param parent_commit_id: The parent_commit_id of this PutFileInput.
        :type parent_commit_id: str
        """

        self._parent_commit_id = parent_commit_id

    @property
    def commit_message(self):
        """Gets the commit_message of this PutFileInput.


        :return: The commit_message of this PutFileInput.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this PutFileInput.


        :param commit_message: The commit_message of this PutFileInput.
        :type commit_message: str
        """

        self._commit_message = commit_message

    @property
    def name(self):
        """Gets the name of this PutFileInput.


        :return: The name of this PutFileInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutFileInput.


        :param name: The name of this PutFileInput.
        :type name: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this PutFileInput.


        :return: The email of this PutFileInput.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PutFileInput.


        :param email: The email of this PutFileInput.
        :type email: str
        """

        self._email = email
