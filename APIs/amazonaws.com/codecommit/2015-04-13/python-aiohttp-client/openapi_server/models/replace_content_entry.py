# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_mode_type_enum import FileModeTypeEnum
from openapi_server.models.replacement_type_enum import ReplacementTypeEnum
from openapi_server import util


class ReplaceContentEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_path: str=None, replacement_type: ReplacementTypeEnum=None, content: str=None, file_mode: FileModeTypeEnum=None):
        """ReplaceContentEntry - a model defined in OpenAPI

        :param file_path: The file_path of this ReplaceContentEntry.
        :param replacement_type: The replacement_type of this ReplaceContentEntry.
        :param content: The content of this ReplaceContentEntry.
        :param file_mode: The file_mode of this ReplaceContentEntry.
        """
        self.openapi_types = {
            'file_path': str,
            'replacement_type': ReplacementTypeEnum,
            'content': str,
            'file_mode': FileModeTypeEnum
        }

        self.attribute_map = {
            'file_path': 'filePath',
            'replacement_type': 'replacementType',
            'content': 'content',
            'file_mode': 'fileMode'
        }

        self._file_path = file_path
        self._replacement_type = replacement_type
        self._content = content
        self._file_mode = file_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplaceContentEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplaceContentEntry of this ReplaceContentEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_path(self):
        """Gets the file_path of this ReplaceContentEntry.


        :return: The file_path of this ReplaceContentEntry.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this ReplaceContentEntry.


        :param file_path: The file_path of this ReplaceContentEntry.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def replacement_type(self):
        """Gets the replacement_type of this ReplaceContentEntry.


        :return: The replacement_type of this ReplaceContentEntry.
        :rtype: ReplacementTypeEnum
        """
        return self._replacement_type

    @replacement_type.setter
    def replacement_type(self, replacement_type):
        """Sets the replacement_type of this ReplaceContentEntry.


        :param replacement_type: The replacement_type of this ReplaceContentEntry.
        :type replacement_type: ReplacementTypeEnum
        """
        if replacement_type is None:
            raise ValueError("Invalid value for `replacement_type`, must not be `None`")

        self._replacement_type = replacement_type

    @property
    def content(self):
        """Gets the content of this ReplaceContentEntry.


        :return: The content of this ReplaceContentEntry.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ReplaceContentEntry.


        :param content: The content of this ReplaceContentEntry.
        :type content: str
        """

        self._content = content

    @property
    def file_mode(self):
        """Gets the file_mode of this ReplaceContentEntry.


        :return: The file_mode of this ReplaceContentEntry.
        :rtype: FileModeTypeEnum
        """
        return self._file_mode

    @file_mode.setter
    def file_mode(self, file_mode):
        """Sets the file_mode of this ReplaceContentEntry.


        :param file_mode: The file_mode of this ReplaceContentEntry.
        :type file_mode: FileModeTypeEnum
        """

        self._file_mode = file_mode
