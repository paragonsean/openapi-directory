# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conflict_detail_level_type_enum import ConflictDetailLevelTypeEnum
from openapi_server.models.conflict_resolution_strategy_type_enum import ConflictResolutionStrategyTypeEnum
from openapi_server.models.merge_option_type_enum import MergeOptionTypeEnum
from openapi_server import util


class GetMergeConflictsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, destination_commit_specifier: str=None, source_commit_specifier: str=None, merge_option: MergeOptionTypeEnum=None, conflict_detail_level: ConflictDetailLevelTypeEnum=None, max_conflict_files: int=None, conflict_resolution_strategy: ConflictResolutionStrategyTypeEnum=None, next_token: str=None):
        """GetMergeConflictsInput - a model defined in OpenAPI

        :param repository_name: The repository_name of this GetMergeConflictsInput.
        :param destination_commit_specifier: The destination_commit_specifier of this GetMergeConflictsInput.
        :param source_commit_specifier: The source_commit_specifier of this GetMergeConflictsInput.
        :param merge_option: The merge_option of this GetMergeConflictsInput.
        :param conflict_detail_level: The conflict_detail_level of this GetMergeConflictsInput.
        :param max_conflict_files: The max_conflict_files of this GetMergeConflictsInput.
        :param conflict_resolution_strategy: The conflict_resolution_strategy of this GetMergeConflictsInput.
        :param next_token: The next_token of this GetMergeConflictsInput.
        """
        self.openapi_types = {
            'repository_name': str,
            'destination_commit_specifier': str,
            'source_commit_specifier': str,
            'merge_option': MergeOptionTypeEnum,
            'conflict_detail_level': ConflictDetailLevelTypeEnum,
            'max_conflict_files': int,
            'conflict_resolution_strategy': ConflictResolutionStrategyTypeEnum,
            'next_token': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'destination_commit_specifier': 'destinationCommitSpecifier',
            'source_commit_specifier': 'sourceCommitSpecifier',
            'merge_option': 'mergeOption',
            'conflict_detail_level': 'conflictDetailLevel',
            'max_conflict_files': 'maxConflictFiles',
            'conflict_resolution_strategy': 'conflictResolutionStrategy',
            'next_token': 'nextToken'
        }

        self._repository_name = repository_name
        self._destination_commit_specifier = destination_commit_specifier
        self._source_commit_specifier = source_commit_specifier
        self._merge_option = merge_option
        self._conflict_detail_level = conflict_detail_level
        self._max_conflict_files = max_conflict_files
        self._conflict_resolution_strategy = conflict_resolution_strategy
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMergeConflictsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetMergeConflictsInput of this GetMergeConflictsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this GetMergeConflictsInput.


        :return: The repository_name of this GetMergeConflictsInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this GetMergeConflictsInput.


        :param repository_name: The repository_name of this GetMergeConflictsInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def destination_commit_specifier(self):
        """Gets the destination_commit_specifier of this GetMergeConflictsInput.


        :return: The destination_commit_specifier of this GetMergeConflictsInput.
        :rtype: str
        """
        return self._destination_commit_specifier

    @destination_commit_specifier.setter
    def destination_commit_specifier(self, destination_commit_specifier):
        """Sets the destination_commit_specifier of this GetMergeConflictsInput.


        :param destination_commit_specifier: The destination_commit_specifier of this GetMergeConflictsInput.
        :type destination_commit_specifier: str
        """
        if destination_commit_specifier is None:
            raise ValueError("Invalid value for `destination_commit_specifier`, must not be `None`")

        self._destination_commit_specifier = destination_commit_specifier

    @property
    def source_commit_specifier(self):
        """Gets the source_commit_specifier of this GetMergeConflictsInput.


        :return: The source_commit_specifier of this GetMergeConflictsInput.
        :rtype: str
        """
        return self._source_commit_specifier

    @source_commit_specifier.setter
    def source_commit_specifier(self, source_commit_specifier):
        """Sets the source_commit_specifier of this GetMergeConflictsInput.


        :param source_commit_specifier: The source_commit_specifier of this GetMergeConflictsInput.
        :type source_commit_specifier: str
        """
        if source_commit_specifier is None:
            raise ValueError("Invalid value for `source_commit_specifier`, must not be `None`")

        self._source_commit_specifier = source_commit_specifier

    @property
    def merge_option(self):
        """Gets the merge_option of this GetMergeConflictsInput.


        :return: The merge_option of this GetMergeConflictsInput.
        :rtype: MergeOptionTypeEnum
        """
        return self._merge_option

    @merge_option.setter
    def merge_option(self, merge_option):
        """Sets the merge_option of this GetMergeConflictsInput.


        :param merge_option: The merge_option of this GetMergeConflictsInput.
        :type merge_option: MergeOptionTypeEnum
        """
        if merge_option is None:
            raise ValueError("Invalid value for `merge_option`, must not be `None`")

        self._merge_option = merge_option

    @property
    def conflict_detail_level(self):
        """Gets the conflict_detail_level of this GetMergeConflictsInput.


        :return: The conflict_detail_level of this GetMergeConflictsInput.
        :rtype: ConflictDetailLevelTypeEnum
        """
        return self._conflict_detail_level

    @conflict_detail_level.setter
    def conflict_detail_level(self, conflict_detail_level):
        """Sets the conflict_detail_level of this GetMergeConflictsInput.


        :param conflict_detail_level: The conflict_detail_level of this GetMergeConflictsInput.
        :type conflict_detail_level: ConflictDetailLevelTypeEnum
        """

        self._conflict_detail_level = conflict_detail_level

    @property
    def max_conflict_files(self):
        """Gets the max_conflict_files of this GetMergeConflictsInput.


        :return: The max_conflict_files of this GetMergeConflictsInput.
        :rtype: int
        """
        return self._max_conflict_files

    @max_conflict_files.setter
    def max_conflict_files(self, max_conflict_files):
        """Sets the max_conflict_files of this GetMergeConflictsInput.


        :param max_conflict_files: The max_conflict_files of this GetMergeConflictsInput.
        :type max_conflict_files: int
        """

        self._max_conflict_files = max_conflict_files

    @property
    def conflict_resolution_strategy(self):
        """Gets the conflict_resolution_strategy of this GetMergeConflictsInput.


        :return: The conflict_resolution_strategy of this GetMergeConflictsInput.
        :rtype: ConflictResolutionStrategyTypeEnum
        """
        return self._conflict_resolution_strategy

    @conflict_resolution_strategy.setter
    def conflict_resolution_strategy(self, conflict_resolution_strategy):
        """Sets the conflict_resolution_strategy of this GetMergeConflictsInput.


        :param conflict_resolution_strategy: The conflict_resolution_strategy of this GetMergeConflictsInput.
        :type conflict_resolution_strategy: ConflictResolutionStrategyTypeEnum
        """

        self._conflict_resolution_strategy = conflict_resolution_strategy

    @property
    def next_token(self):
        """Gets the next_token of this GetMergeConflictsInput.


        :return: The next_token of this GetMergeConflictsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetMergeConflictsInput.


        :param next_token: The next_token of this GetMergeConflictsInput.
        :type next_token: str
        """

        self._next_token = next_token
