# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DifferenceBeforeBlob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_id: str=None, path: str=None, mode: str=None):
        """DifferenceBeforeBlob - a model defined in OpenAPI

        :param blob_id: The blob_id of this DifferenceBeforeBlob.
        :param path: The path of this DifferenceBeforeBlob.
        :param mode: The mode of this DifferenceBeforeBlob.
        """
        self.openapi_types = {
            'blob_id': str,
            'path': str,
            'mode': str
        }

        self.attribute_map = {
            'blob_id': 'blobId',
            'path': 'path',
            'mode': 'mode'
        }

        self._blob_id = blob_id
        self._path = path
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DifferenceBeforeBlob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Difference_beforeBlob of this DifferenceBeforeBlob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_id(self):
        """Gets the blob_id of this DifferenceBeforeBlob.


        :return: The blob_id of this DifferenceBeforeBlob.
        :rtype: str
        """
        return self._blob_id

    @blob_id.setter
    def blob_id(self, blob_id):
        """Sets the blob_id of this DifferenceBeforeBlob.


        :param blob_id: The blob_id of this DifferenceBeforeBlob.
        :type blob_id: str
        """

        self._blob_id = blob_id

    @property
    def path(self):
        """Gets the path of this DifferenceBeforeBlob.


        :return: The path of this DifferenceBeforeBlob.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DifferenceBeforeBlob.


        :param path: The path of this DifferenceBeforeBlob.
        :type path: str
        """

        self._path = path

    @property
    def mode(self):
        """Gets the mode of this DifferenceBeforeBlob.


        :return: The mode of this DifferenceBeforeBlob.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DifferenceBeforeBlob.


        :param mode: The mode of this DifferenceBeforeBlob.
        :type mode: str
        """

        self._mode = mode
