# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit_author import CommitAuthor
from openapi_server.models.commit_committer import CommitCommitter
from openapi_server import util


class GetCommitOutputCommit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_id: str=None, tree_id: str=None, parents: List=None, message: str=None, author: CommitAuthor=None, committer: CommitCommitter=None, additional_data: str=None):
        """GetCommitOutputCommit - a model defined in OpenAPI

        :param commit_id: The commit_id of this GetCommitOutputCommit.
        :param tree_id: The tree_id of this GetCommitOutputCommit.
        :param parents: The parents of this GetCommitOutputCommit.
        :param message: The message of this GetCommitOutputCommit.
        :param author: The author of this GetCommitOutputCommit.
        :param committer: The committer of this GetCommitOutputCommit.
        :param additional_data: The additional_data of this GetCommitOutputCommit.
        """
        self.openapi_types = {
            'commit_id': str,
            'tree_id': str,
            'parents': List,
            'message': str,
            'author': CommitAuthor,
            'committer': CommitCommitter,
            'additional_data': str
        }

        self.attribute_map = {
            'commit_id': 'commitId',
            'tree_id': 'treeId',
            'parents': 'parents',
            'message': 'message',
            'author': 'author',
            'committer': 'committer',
            'additional_data': 'additionalData'
        }

        self._commit_id = commit_id
        self._tree_id = tree_id
        self._parents = parents
        self._message = message
        self._author = author
        self._committer = committer
        self._additional_data = additional_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCommitOutputCommit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCommitOutput_commit of this GetCommitOutputCommit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_id(self):
        """Gets the commit_id of this GetCommitOutputCommit.


        :return: The commit_id of this GetCommitOutputCommit.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this GetCommitOutputCommit.


        :param commit_id: The commit_id of this GetCommitOutputCommit.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def tree_id(self):
        """Gets the tree_id of this GetCommitOutputCommit.


        :return: The tree_id of this GetCommitOutputCommit.
        :rtype: str
        """
        return self._tree_id

    @tree_id.setter
    def tree_id(self, tree_id):
        """Sets the tree_id of this GetCommitOutputCommit.


        :param tree_id: The tree_id of this GetCommitOutputCommit.
        :type tree_id: str
        """

        self._tree_id = tree_id

    @property
    def parents(self):
        """Gets the parents of this GetCommitOutputCommit.


        :return: The parents of this GetCommitOutputCommit.
        :rtype: List
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this GetCommitOutputCommit.


        :param parents: The parents of this GetCommitOutputCommit.
        :type parents: List
        """

        self._parents = parents

    @property
    def message(self):
        """Gets the message of this GetCommitOutputCommit.


        :return: The message of this GetCommitOutputCommit.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetCommitOutputCommit.


        :param message: The message of this GetCommitOutputCommit.
        :type message: str
        """

        self._message = message

    @property
    def author(self):
        """Gets the author of this GetCommitOutputCommit.


        :return: The author of this GetCommitOutputCommit.
        :rtype: CommitAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GetCommitOutputCommit.


        :param author: The author of this GetCommitOutputCommit.
        :type author: CommitAuthor
        """

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this GetCommitOutputCommit.


        :return: The committer of this GetCommitOutputCommit.
        :rtype: CommitCommitter
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this GetCommitOutputCommit.


        :param committer: The committer of this GetCommitOutputCommit.
        :type committer: CommitCommitter
        """

        self._committer = committer

    @property
    def additional_data(self):
        """Gets the additional_data of this GetCommitOutputCommit.


        :return: The additional_data of this GetCommitOutputCommit.
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this GetCommitOutputCommit.


        :param additional_data: The additional_data of this GetCommitOutputCommit.
        :type additional_data: str
        """

        self._additional_data = additional_data
