# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCommitInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, branch_name: str=None, parent_commit_id: str=None, author_name: str=None, email: str=None, commit_message: str=None, keep_empty_folders: bool=None, put_files: List=None, delete_files: List=None, set_file_modes: List=None):
        """CreateCommitInput - a model defined in OpenAPI

        :param repository_name: The repository_name of this CreateCommitInput.
        :param branch_name: The branch_name of this CreateCommitInput.
        :param parent_commit_id: The parent_commit_id of this CreateCommitInput.
        :param author_name: The author_name of this CreateCommitInput.
        :param email: The email of this CreateCommitInput.
        :param commit_message: The commit_message of this CreateCommitInput.
        :param keep_empty_folders: The keep_empty_folders of this CreateCommitInput.
        :param put_files: The put_files of this CreateCommitInput.
        :param delete_files: The delete_files of this CreateCommitInput.
        :param set_file_modes: The set_file_modes of this CreateCommitInput.
        """
        self.openapi_types = {
            'repository_name': str,
            'branch_name': str,
            'parent_commit_id': str,
            'author_name': str,
            'email': str,
            'commit_message': str,
            'keep_empty_folders': bool,
            'put_files': List,
            'delete_files': List,
            'set_file_modes': List
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'branch_name': 'branchName',
            'parent_commit_id': 'parentCommitId',
            'author_name': 'authorName',
            'email': 'email',
            'commit_message': 'commitMessage',
            'keep_empty_folders': 'keepEmptyFolders',
            'put_files': 'putFiles',
            'delete_files': 'deleteFiles',
            'set_file_modes': 'setFileModes'
        }

        self._repository_name = repository_name
        self._branch_name = branch_name
        self._parent_commit_id = parent_commit_id
        self._author_name = author_name
        self._email = email
        self._commit_message = commit_message
        self._keep_empty_folders = keep_empty_folders
        self._put_files = put_files
        self._delete_files = delete_files
        self._set_file_modes = set_file_modes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCommitInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCommitInput of this CreateCommitInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this CreateCommitInput.


        :return: The repository_name of this CreateCommitInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this CreateCommitInput.


        :param repository_name: The repository_name of this CreateCommitInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def branch_name(self):
        """Gets the branch_name of this CreateCommitInput.


        :return: The branch_name of this CreateCommitInput.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this CreateCommitInput.


        :param branch_name: The branch_name of this CreateCommitInput.
        :type branch_name: str
        """
        if branch_name is None:
            raise ValueError("Invalid value for `branch_name`, must not be `None`")

        self._branch_name = branch_name

    @property
    def parent_commit_id(self):
        """Gets the parent_commit_id of this CreateCommitInput.


        :return: The parent_commit_id of this CreateCommitInput.
        :rtype: str
        """
        return self._parent_commit_id

    @parent_commit_id.setter
    def parent_commit_id(self, parent_commit_id):
        """Sets the parent_commit_id of this CreateCommitInput.


        :param parent_commit_id: The parent_commit_id of this CreateCommitInput.
        :type parent_commit_id: str
        """

        self._parent_commit_id = parent_commit_id

    @property
    def author_name(self):
        """Gets the author_name of this CreateCommitInput.


        :return: The author_name of this CreateCommitInput.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this CreateCommitInput.


        :param author_name: The author_name of this CreateCommitInput.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def email(self):
        """Gets the email of this CreateCommitInput.


        :return: The email of this CreateCommitInput.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateCommitInput.


        :param email: The email of this CreateCommitInput.
        :type email: str
        """

        self._email = email

    @property
    def commit_message(self):
        """Gets the commit_message of this CreateCommitInput.


        :return: The commit_message of this CreateCommitInput.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this CreateCommitInput.


        :param commit_message: The commit_message of this CreateCommitInput.
        :type commit_message: str
        """

        self._commit_message = commit_message

    @property
    def keep_empty_folders(self):
        """Gets the keep_empty_folders of this CreateCommitInput.


        :return: The keep_empty_folders of this CreateCommitInput.
        :rtype: bool
        """
        return self._keep_empty_folders

    @keep_empty_folders.setter
    def keep_empty_folders(self, keep_empty_folders):
        """Sets the keep_empty_folders of this CreateCommitInput.


        :param keep_empty_folders: The keep_empty_folders of this CreateCommitInput.
        :type keep_empty_folders: bool
        """

        self._keep_empty_folders = keep_empty_folders

    @property
    def put_files(self):
        """Gets the put_files of this CreateCommitInput.


        :return: The put_files of this CreateCommitInput.
        :rtype: List
        """
        return self._put_files

    @put_files.setter
    def put_files(self, put_files):
        """Sets the put_files of this CreateCommitInput.


        :param put_files: The put_files of this CreateCommitInput.
        :type put_files: List
        """

        self._put_files = put_files

    @property
    def delete_files(self):
        """Gets the delete_files of this CreateCommitInput.


        :return: The delete_files of this CreateCommitInput.
        :rtype: List
        """
        return self._delete_files

    @delete_files.setter
    def delete_files(self, delete_files):
        """Sets the delete_files of this CreateCommitInput.


        :param delete_files: The delete_files of this CreateCommitInput.
        :type delete_files: List
        """

        self._delete_files = delete_files

    @property
    def set_file_modes(self):
        """Gets the set_file_modes of this CreateCommitInput.


        :return: The set_file_modes of this CreateCommitInput.
        :rtype: List
        """
        return self._set_file_modes

    @set_file_modes.setter
    def set_file_modes(self, set_file_modes):
        """Sets the set_file_modes of this CreateCommitInput.


        :param set_file_modes: The set_file_modes of this CreateCommitInput.
        :type set_file_modes: List
        """

        self._set_file_modes = set_file_modes
