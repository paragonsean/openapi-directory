# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchDescribeMergeConflictsError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_path: str=None, exception_name: str=None, message: str=None):
        """BatchDescribeMergeConflictsError - a model defined in OpenAPI

        :param file_path: The file_path of this BatchDescribeMergeConflictsError.
        :param exception_name: The exception_name of this BatchDescribeMergeConflictsError.
        :param message: The message of this BatchDescribeMergeConflictsError.
        """
        self.openapi_types = {
            'file_path': str,
            'exception_name': str,
            'message': str
        }

        self.attribute_map = {
            'file_path': 'filePath',
            'exception_name': 'exceptionName',
            'message': 'message'
        }

        self._file_path = file_path
        self._exception_name = exception_name
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDescribeMergeConflictsError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDescribeMergeConflictsError of this BatchDescribeMergeConflictsError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_path(self):
        """Gets the file_path of this BatchDescribeMergeConflictsError.


        :return: The file_path of this BatchDescribeMergeConflictsError.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this BatchDescribeMergeConflictsError.


        :param file_path: The file_path of this BatchDescribeMergeConflictsError.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def exception_name(self):
        """Gets the exception_name of this BatchDescribeMergeConflictsError.


        :return: The exception_name of this BatchDescribeMergeConflictsError.
        :rtype: str
        """
        return self._exception_name

    @exception_name.setter
    def exception_name(self, exception_name):
        """Sets the exception_name of this BatchDescribeMergeConflictsError.


        :param exception_name: The exception_name of this BatchDescribeMergeConflictsError.
        :type exception_name: str
        """
        if exception_name is None:
            raise ValueError("Invalid value for `exception_name`, must not be `None`")

        self._exception_name = exception_name

    @property
    def message(self):
        """Gets the message of this BatchDescribeMergeConflictsError.


        :return: The message of this BatchDescribeMergeConflictsError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BatchDescribeMergeConflictsError.


        :param message: The message of this BatchDescribeMergeConflictsError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
