# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetFolderInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, commit_specifier: str=None, folder_path: str=None):
        """GetFolderInput - a model defined in OpenAPI

        :param repository_name: The repository_name of this GetFolderInput.
        :param commit_specifier: The commit_specifier of this GetFolderInput.
        :param folder_path: The folder_path of this GetFolderInput.
        """
        self.openapi_types = {
            'repository_name': str,
            'commit_specifier': str,
            'folder_path': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'commit_specifier': 'commitSpecifier',
            'folder_path': 'folderPath'
        }

        self._repository_name = repository_name
        self._commit_specifier = commit_specifier
        self._folder_path = folder_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFolderInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFolderInput of this GetFolderInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this GetFolderInput.


        :return: The repository_name of this GetFolderInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this GetFolderInput.


        :param repository_name: The repository_name of this GetFolderInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def commit_specifier(self):
        """Gets the commit_specifier of this GetFolderInput.


        :return: The commit_specifier of this GetFolderInput.
        :rtype: str
        """
        return self._commit_specifier

    @commit_specifier.setter
    def commit_specifier(self, commit_specifier):
        """Sets the commit_specifier of this GetFolderInput.


        :param commit_specifier: The commit_specifier of this GetFolderInput.
        :type commit_specifier: str
        """

        self._commit_specifier = commit_specifier

    @property
    def folder_path(self):
        """Gets the folder_path of this GetFolderInput.


        :return: The folder_path of this GetFolderInput.
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this GetFolderInput.


        :param folder_path: The folder_path of this GetFolderInput.
        :type folder_path: str
        """
        if folder_path is None:
            raise ValueError("Invalid value for `folder_path`, must not be `None`")

        self._folder_path = folder_path
