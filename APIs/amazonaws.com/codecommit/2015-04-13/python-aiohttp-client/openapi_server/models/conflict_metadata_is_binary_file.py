# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConflictMetadataIsBinaryFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source: bool=None, destination: bool=None, base: bool=None):
        """ConflictMetadataIsBinaryFile - a model defined in OpenAPI

        :param source: The source of this ConflictMetadataIsBinaryFile.
        :param destination: The destination of this ConflictMetadataIsBinaryFile.
        :param base: The base of this ConflictMetadataIsBinaryFile.
        """
        self.openapi_types = {
            'source': bool,
            'destination': bool,
            'base': bool
        }

        self.attribute_map = {
            'source': 'source',
            'destination': 'destination',
            'base': 'base'
        }

        self._source = source
        self._destination = destination
        self._base = base

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConflictMetadataIsBinaryFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConflictMetadata_isBinaryFile of this ConflictMetadataIsBinaryFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self):
        """Gets the source of this ConflictMetadataIsBinaryFile.


        :return: The source of this ConflictMetadataIsBinaryFile.
        :rtype: bool
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConflictMetadataIsBinaryFile.


        :param source: The source of this ConflictMetadataIsBinaryFile.
        :type source: bool
        """

        self._source = source

    @property
    def destination(self):
        """Gets the destination of this ConflictMetadataIsBinaryFile.


        :return: The destination of this ConflictMetadataIsBinaryFile.
        :rtype: bool
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ConflictMetadataIsBinaryFile.


        :param destination: The destination of this ConflictMetadataIsBinaryFile.
        :type destination: bool
        """

        self._destination = destination

    @property
    def base(self):
        """Gets the base of this ConflictMetadataIsBinaryFile.


        :return: The base of this ConflictMetadataIsBinaryFile.
        :rtype: bool
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this ConflictMetadataIsBinaryFile.


        :param base: The base of this ConflictMetadataIsBinaryFile.
        :type base: bool
        """

        self._base = base
