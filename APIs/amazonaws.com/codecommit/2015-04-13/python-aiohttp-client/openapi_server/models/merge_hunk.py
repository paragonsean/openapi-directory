# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.merge_hunk_base import MergeHunkBase
from openapi_server.models.merge_hunk_destination import MergeHunkDestination
from openapi_server.models.merge_hunk_source import MergeHunkSource
from openapi_server import util


class MergeHunk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_conflict: bool=None, source: MergeHunkSource=None, destination: MergeHunkDestination=None, base: MergeHunkBase=None):
        """MergeHunk - a model defined in OpenAPI

        :param is_conflict: The is_conflict of this MergeHunk.
        :param source: The source of this MergeHunk.
        :param destination: The destination of this MergeHunk.
        :param base: The base of this MergeHunk.
        """
        self.openapi_types = {
            'is_conflict': bool,
            'source': MergeHunkSource,
            'destination': MergeHunkDestination,
            'base': MergeHunkBase
        }

        self.attribute_map = {
            'is_conflict': 'isConflict',
            'source': 'source',
            'destination': 'destination',
            'base': 'base'
        }

        self._is_conflict = is_conflict
        self._source = source
        self._destination = destination
        self._base = base

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MergeHunk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MergeHunk of this MergeHunk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_conflict(self):
        """Gets the is_conflict of this MergeHunk.


        :return: The is_conflict of this MergeHunk.
        :rtype: bool
        """
        return self._is_conflict

    @is_conflict.setter
    def is_conflict(self, is_conflict):
        """Sets the is_conflict of this MergeHunk.


        :param is_conflict: The is_conflict of this MergeHunk.
        :type is_conflict: bool
        """

        self._is_conflict = is_conflict

    @property
    def source(self):
        """Gets the source of this MergeHunk.


        :return: The source of this MergeHunk.
        :rtype: MergeHunkSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MergeHunk.


        :param source: The source of this MergeHunk.
        :type source: MergeHunkSource
        """

        self._source = source

    @property
    def destination(self):
        """Gets the destination of this MergeHunk.


        :return: The destination of this MergeHunk.
        :rtype: MergeHunkDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this MergeHunk.


        :param destination: The destination of this MergeHunk.
        :type destination: MergeHunkDestination
        """

        self._destination = destination

    @property
    def base(self):
        """Gets the base of this MergeHunk.


        :return: The base of this MergeHunk.
        :rtype: MergeHunkBase
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this MergeHunk.


        :param base: The base of this MergeHunk.
        :type base: MergeHunkBase
        """

        self._base = base
