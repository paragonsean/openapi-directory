# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchAssociateApprovalRuleTemplateWithRepositoriesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approval_rule_template_name: str=None, repository_names: List=None):
        """BatchAssociateApprovalRuleTemplateWithRepositoriesInput - a model defined in OpenAPI

        :param approval_rule_template_name: The approval_rule_template_name of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.
        :param repository_names: The repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.
        """
        self.openapi_types = {
            'approval_rule_template_name': str,
            'repository_names': List
        }

        self.attribute_map = {
            'approval_rule_template_name': 'approvalRuleTemplateName',
            'repository_names': 'repositoryNames'
        }

        self._approval_rule_template_name = approval_rule_template_name
        self._repository_names = repository_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchAssociateApprovalRuleTemplateWithRepositoriesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchAssociateApprovalRuleTemplateWithRepositoriesInput of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approval_rule_template_name(self):
        """Gets the approval_rule_template_name of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.


        :return: The approval_rule_template_name of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.
        :rtype: str
        """
        return self._approval_rule_template_name

    @approval_rule_template_name.setter
    def approval_rule_template_name(self, approval_rule_template_name):
        """Sets the approval_rule_template_name of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.


        :param approval_rule_template_name: The approval_rule_template_name of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.
        :type approval_rule_template_name: str
        """
        if approval_rule_template_name is None:
            raise ValueError("Invalid value for `approval_rule_template_name`, must not be `None`")

        self._approval_rule_template_name = approval_rule_template_name

    @property
    def repository_names(self):
        """Gets the repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.


        :return: The repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.
        :rtype: List
        """
        return self._repository_names

    @repository_names.setter
    def repository_names(self, repository_names):
        """Sets the repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.


        :param repository_names: The repository_names of this BatchAssociateApprovalRuleTemplateWithRepositoriesInput.
        :type repository_names: List
        """
        if repository_names is None:
            raise ValueError("Invalid value for `repository_names`, must not be `None`")

        self._repository_names = repository_names
