# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostCommentReplyInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, in_reply_to: str=None, client_request_token: str=None, content: str=None):
        """PostCommentReplyInput - a model defined in OpenAPI

        :param in_reply_to: The in_reply_to of this PostCommentReplyInput.
        :param client_request_token: The client_request_token of this PostCommentReplyInput.
        :param content: The content of this PostCommentReplyInput.
        """
        self.openapi_types = {
            'in_reply_to': str,
            'client_request_token': str,
            'content': str
        }

        self.attribute_map = {
            'in_reply_to': 'inReplyTo',
            'client_request_token': 'clientRequestToken',
            'content': 'content'
        }

        self._in_reply_to = in_reply_to
        self._client_request_token = client_request_token
        self._content = content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostCommentReplyInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostCommentReplyInput of this PostCommentReplyInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def in_reply_to(self):
        """Gets the in_reply_to of this PostCommentReplyInput.


        :return: The in_reply_to of this PostCommentReplyInput.
        :rtype: str
        """
        return self._in_reply_to

    @in_reply_to.setter
    def in_reply_to(self, in_reply_to):
        """Sets the in_reply_to of this PostCommentReplyInput.


        :param in_reply_to: The in_reply_to of this PostCommentReplyInput.
        :type in_reply_to: str
        """
        if in_reply_to is None:
            raise ValueError("Invalid value for `in_reply_to`, must not be `None`")

        self._in_reply_to = in_reply_to

    @property
    def client_request_token(self):
        """Gets the client_request_token of this PostCommentReplyInput.


        :return: The client_request_token of this PostCommentReplyInput.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this PostCommentReplyInput.


        :param client_request_token: The client_request_token of this PostCommentReplyInput.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def content(self):
        """Gets the content of this PostCommentReplyInput.


        :return: The content of this PostCommentReplyInput.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PostCommentReplyInput.


        :param content: The content of this PostCommentReplyInput.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content
