# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepositoryTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, destination_arn: str=None, custom_data: str=None, branches: List=None, events: List=None):
        """RepositoryTrigger - a model defined in OpenAPI

        :param name: The name of this RepositoryTrigger.
        :param destination_arn: The destination_arn of this RepositoryTrigger.
        :param custom_data: The custom_data of this RepositoryTrigger.
        :param branches: The branches of this RepositoryTrigger.
        :param events: The events of this RepositoryTrigger.
        """
        self.openapi_types = {
            'name': str,
            'destination_arn': str,
            'custom_data': str,
            'branches': List,
            'events': List
        }

        self.attribute_map = {
            'name': 'name',
            'destination_arn': 'destinationArn',
            'custom_data': 'customData',
            'branches': 'branches',
            'events': 'events'
        }

        self._name = name
        self._destination_arn = destination_arn
        self._custom_data = custom_data
        self._branches = branches
        self._events = events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositoryTrigger of this RepositoryTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RepositoryTrigger.


        :return: The name of this RepositoryTrigger.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryTrigger.


        :param name: The name of this RepositoryTrigger.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def destination_arn(self):
        """Gets the destination_arn of this RepositoryTrigger.


        :return: The destination_arn of this RepositoryTrigger.
        :rtype: str
        """
        return self._destination_arn

    @destination_arn.setter
    def destination_arn(self, destination_arn):
        """Sets the destination_arn of this RepositoryTrigger.


        :param destination_arn: The destination_arn of this RepositoryTrigger.
        :type destination_arn: str
        """
        if destination_arn is None:
            raise ValueError("Invalid value for `destination_arn`, must not be `None`")

        self._destination_arn = destination_arn

    @property
    def custom_data(self):
        """Gets the custom_data of this RepositoryTrigger.


        :return: The custom_data of this RepositoryTrigger.
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this RepositoryTrigger.


        :param custom_data: The custom_data of this RepositoryTrigger.
        :type custom_data: str
        """

        self._custom_data = custom_data

    @property
    def branches(self):
        """Gets the branches of this RepositoryTrigger.


        :return: The branches of this RepositoryTrigger.
        :rtype: List
        """
        return self._branches

    @branches.setter
    def branches(self, branches):
        """Sets the branches of this RepositoryTrigger.


        :param branches: The branches of this RepositoryTrigger.
        :type branches: List
        """

        self._branches = branches

    @property
    def events(self):
        """Gets the events of this RepositoryTrigger.


        :return: The events of this RepositoryTrigger.
        :rtype: List
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this RepositoryTrigger.


        :param events: The events of this RepositoryTrigger.
        :type events: List
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events
