# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.merge_option_type_enum import MergeOptionTypeEnum
from openapi_server import util


class MergeMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_merged: bool=None, merged_by: str=None, merge_commit_id: str=None, merge_option: MergeOptionTypeEnum=None):
        """MergeMetadata - a model defined in OpenAPI

        :param is_merged: The is_merged of this MergeMetadata.
        :param merged_by: The merged_by of this MergeMetadata.
        :param merge_commit_id: The merge_commit_id of this MergeMetadata.
        :param merge_option: The merge_option of this MergeMetadata.
        """
        self.openapi_types = {
            'is_merged': bool,
            'merged_by': str,
            'merge_commit_id': str,
            'merge_option': MergeOptionTypeEnum
        }

        self.attribute_map = {
            'is_merged': 'isMerged',
            'merged_by': 'mergedBy',
            'merge_commit_id': 'mergeCommitId',
            'merge_option': 'mergeOption'
        }

        self._is_merged = is_merged
        self._merged_by = merged_by
        self._merge_commit_id = merge_commit_id
        self._merge_option = merge_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MergeMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MergeMetadata of this MergeMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_merged(self):
        """Gets the is_merged of this MergeMetadata.


        :return: The is_merged of this MergeMetadata.
        :rtype: bool
        """
        return self._is_merged

    @is_merged.setter
    def is_merged(self, is_merged):
        """Sets the is_merged of this MergeMetadata.


        :param is_merged: The is_merged of this MergeMetadata.
        :type is_merged: bool
        """

        self._is_merged = is_merged

    @property
    def merged_by(self):
        """Gets the merged_by of this MergeMetadata.


        :return: The merged_by of this MergeMetadata.
        :rtype: str
        """
        return self._merged_by

    @merged_by.setter
    def merged_by(self, merged_by):
        """Sets the merged_by of this MergeMetadata.


        :param merged_by: The merged_by of this MergeMetadata.
        :type merged_by: str
        """

        self._merged_by = merged_by

    @property
    def merge_commit_id(self):
        """Gets the merge_commit_id of this MergeMetadata.


        :return: The merge_commit_id of this MergeMetadata.
        :rtype: str
        """
        return self._merge_commit_id

    @merge_commit_id.setter
    def merge_commit_id(self, merge_commit_id):
        """Sets the merge_commit_id of this MergeMetadata.


        :param merge_commit_id: The merge_commit_id of this MergeMetadata.
        :type merge_commit_id: str
        """

        self._merge_commit_id = merge_commit_id

    @property
    def merge_option(self):
        """Gets the merge_option of this MergeMetadata.


        :return: The merge_option of this MergeMetadata.
        :rtype: MergeOptionTypeEnum
        """
        return self._merge_option

    @merge_option.setter
    def merge_option(self, merge_option):
        """Sets the merge_option of this MergeMetadata.


        :param merge_option: The merge_option of this MergeMetadata.
        :type merge_option: MergeOptionTypeEnum
        """

        self._merge_option = merge_option
