# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatePullRequestApprovalRuleContentInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pull_request_id: str=None, approval_rule_name: str=None, existing_rule_content_sha256: str=None, new_rule_content: str=None):
        """UpdatePullRequestApprovalRuleContentInput - a model defined in OpenAPI

        :param pull_request_id: The pull_request_id of this UpdatePullRequestApprovalRuleContentInput.
        :param approval_rule_name: The approval_rule_name of this UpdatePullRequestApprovalRuleContentInput.
        :param existing_rule_content_sha256: The existing_rule_content_sha256 of this UpdatePullRequestApprovalRuleContentInput.
        :param new_rule_content: The new_rule_content of this UpdatePullRequestApprovalRuleContentInput.
        """
        self.openapi_types = {
            'pull_request_id': str,
            'approval_rule_name': str,
            'existing_rule_content_sha256': str,
            'new_rule_content': str
        }

        self.attribute_map = {
            'pull_request_id': 'pullRequestId',
            'approval_rule_name': 'approvalRuleName',
            'existing_rule_content_sha256': 'existingRuleContentSha256',
            'new_rule_content': 'newRuleContent'
        }

        self._pull_request_id = pull_request_id
        self._approval_rule_name = approval_rule_name
        self._existing_rule_content_sha256 = existing_rule_content_sha256
        self._new_rule_content = new_rule_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePullRequestApprovalRuleContentInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePullRequestApprovalRuleContentInput of this UpdatePullRequestApprovalRuleContentInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pull_request_id(self):
        """Gets the pull_request_id of this UpdatePullRequestApprovalRuleContentInput.


        :return: The pull_request_id of this UpdatePullRequestApprovalRuleContentInput.
        :rtype: str
        """
        return self._pull_request_id

    @pull_request_id.setter
    def pull_request_id(self, pull_request_id):
        """Sets the pull_request_id of this UpdatePullRequestApprovalRuleContentInput.


        :param pull_request_id: The pull_request_id of this UpdatePullRequestApprovalRuleContentInput.
        :type pull_request_id: str
        """
        if pull_request_id is None:
            raise ValueError("Invalid value for `pull_request_id`, must not be `None`")

        self._pull_request_id = pull_request_id

    @property
    def approval_rule_name(self):
        """Gets the approval_rule_name of this UpdatePullRequestApprovalRuleContentInput.


        :return: The approval_rule_name of this UpdatePullRequestApprovalRuleContentInput.
        :rtype: str
        """
        return self._approval_rule_name

    @approval_rule_name.setter
    def approval_rule_name(self, approval_rule_name):
        """Sets the approval_rule_name of this UpdatePullRequestApprovalRuleContentInput.


        :param approval_rule_name: The approval_rule_name of this UpdatePullRequestApprovalRuleContentInput.
        :type approval_rule_name: str
        """
        if approval_rule_name is None:
            raise ValueError("Invalid value for `approval_rule_name`, must not be `None`")

        self._approval_rule_name = approval_rule_name

    @property
    def existing_rule_content_sha256(self):
        """Gets the existing_rule_content_sha256 of this UpdatePullRequestApprovalRuleContentInput.


        :return: The existing_rule_content_sha256 of this UpdatePullRequestApprovalRuleContentInput.
        :rtype: str
        """
        return self._existing_rule_content_sha256

    @existing_rule_content_sha256.setter
    def existing_rule_content_sha256(self, existing_rule_content_sha256):
        """Sets the existing_rule_content_sha256 of this UpdatePullRequestApprovalRuleContentInput.


        :param existing_rule_content_sha256: The existing_rule_content_sha256 of this UpdatePullRequestApprovalRuleContentInput.
        :type existing_rule_content_sha256: str
        """

        self._existing_rule_content_sha256 = existing_rule_content_sha256

    @property
    def new_rule_content(self):
        """Gets the new_rule_content of this UpdatePullRequestApprovalRuleContentInput.


        :return: The new_rule_content of this UpdatePullRequestApprovalRuleContentInput.
        :rtype: str
        """
        return self._new_rule_content

    @new_rule_content.setter
    def new_rule_content(self, new_rule_content):
        """Sets the new_rule_content of this UpdatePullRequestApprovalRuleContentInput.


        :param new_rule_content: The new_rule_content of this UpdatePullRequestApprovalRuleContentInput.
        :type new_rule_content: str
        """
        if new_rule_content is None:
            raise ValueError("Invalid value for `new_rule_content`, must not be `None`")

        self._new_rule_content = new_rule_content
