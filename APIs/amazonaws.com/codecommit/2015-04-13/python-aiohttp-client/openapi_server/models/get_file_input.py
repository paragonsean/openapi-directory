# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetFileInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, commit_specifier: str=None, file_path: str=None):
        """GetFileInput - a model defined in OpenAPI

        :param repository_name: The repository_name of this GetFileInput.
        :param commit_specifier: The commit_specifier of this GetFileInput.
        :param file_path: The file_path of this GetFileInput.
        """
        self.openapi_types = {
            'repository_name': str,
            'commit_specifier': str,
            'file_path': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'commit_specifier': 'commitSpecifier',
            'file_path': 'filePath'
        }

        self._repository_name = repository_name
        self._commit_specifier = commit_specifier
        self._file_path = file_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFileInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFileInput of this GetFileInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this GetFileInput.


        :return: The repository_name of this GetFileInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this GetFileInput.


        :param repository_name: The repository_name of this GetFileInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def commit_specifier(self):
        """Gets the commit_specifier of this GetFileInput.


        :return: The commit_specifier of this GetFileInput.
        :rtype: str
        """
        return self._commit_specifier

    @commit_specifier.setter
    def commit_specifier(self, commit_specifier):
        """Sets the commit_specifier of this GetFileInput.


        :param commit_specifier: The commit_specifier of this GetFileInput.
        :type commit_specifier: str
        """

        self._commit_specifier = commit_specifier

    @property
    def file_path(self):
        """Gets the file_path of this GetFileInput.


        :return: The file_path of this GetFileInput.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this GetFileInput.


        :param file_path: The file_path of this GetFileInput.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path
