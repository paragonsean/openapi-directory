# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateApprovalRuleTemplateNameInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, old_approval_rule_template_name: str=None, new_approval_rule_template_name: str=None):
        """UpdateApprovalRuleTemplateNameInput - a model defined in OpenAPI

        :param old_approval_rule_template_name: The old_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.
        :param new_approval_rule_template_name: The new_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.
        """
        self.openapi_types = {
            'old_approval_rule_template_name': str,
            'new_approval_rule_template_name': str
        }

        self.attribute_map = {
            'old_approval_rule_template_name': 'oldApprovalRuleTemplateName',
            'new_approval_rule_template_name': 'newApprovalRuleTemplateName'
        }

        self._old_approval_rule_template_name = old_approval_rule_template_name
        self._new_approval_rule_template_name = new_approval_rule_template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateApprovalRuleTemplateNameInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateApprovalRuleTemplateNameInput of this UpdateApprovalRuleTemplateNameInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def old_approval_rule_template_name(self):
        """Gets the old_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.


        :return: The old_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.
        :rtype: str
        """
        return self._old_approval_rule_template_name

    @old_approval_rule_template_name.setter
    def old_approval_rule_template_name(self, old_approval_rule_template_name):
        """Sets the old_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.


        :param old_approval_rule_template_name: The old_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.
        :type old_approval_rule_template_name: str
        """
        if old_approval_rule_template_name is None:
            raise ValueError("Invalid value for `old_approval_rule_template_name`, must not be `None`")

        self._old_approval_rule_template_name = old_approval_rule_template_name

    @property
    def new_approval_rule_template_name(self):
        """Gets the new_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.


        :return: The new_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.
        :rtype: str
        """
        return self._new_approval_rule_template_name

    @new_approval_rule_template_name.setter
    def new_approval_rule_template_name(self, new_approval_rule_template_name):
        """Sets the new_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.


        :param new_approval_rule_template_name: The new_approval_rule_template_name of this UpdateApprovalRuleTemplateNameInput.
        :type new_approval_rule_template_name: str
        """
        if new_approval_rule_template_name is None:
            raise ValueError("Invalid value for `new_approval_rule_template_name`, must not be `None`")

        self._new_approval_rule_template_name = new_approval_rule_template_name
