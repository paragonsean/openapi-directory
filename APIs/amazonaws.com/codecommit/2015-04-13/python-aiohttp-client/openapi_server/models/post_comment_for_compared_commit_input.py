# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_comment_for_compared_commit_input_location import PostCommentForComparedCommitInputLocation
from openapi_server import util


class PostCommentForComparedCommitInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, before_commit_id: str=None, after_commit_id: str=None, location: PostCommentForComparedCommitInputLocation=None, content: str=None, client_request_token: str=None):
        """PostCommentForComparedCommitInput - a model defined in OpenAPI

        :param repository_name: The repository_name of this PostCommentForComparedCommitInput.
        :param before_commit_id: The before_commit_id of this PostCommentForComparedCommitInput.
        :param after_commit_id: The after_commit_id of this PostCommentForComparedCommitInput.
        :param location: The location of this PostCommentForComparedCommitInput.
        :param content: The content of this PostCommentForComparedCommitInput.
        :param client_request_token: The client_request_token of this PostCommentForComparedCommitInput.
        """
        self.openapi_types = {
            'repository_name': str,
            'before_commit_id': str,
            'after_commit_id': str,
            'location': PostCommentForComparedCommitInputLocation,
            'content': str,
            'client_request_token': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'before_commit_id': 'beforeCommitId',
            'after_commit_id': 'afterCommitId',
            'location': 'location',
            'content': 'content',
            'client_request_token': 'clientRequestToken'
        }

        self._repository_name = repository_name
        self._before_commit_id = before_commit_id
        self._after_commit_id = after_commit_id
        self._location = location
        self._content = content
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostCommentForComparedCommitInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostCommentForComparedCommitInput of this PostCommentForComparedCommitInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this PostCommentForComparedCommitInput.


        :return: The repository_name of this PostCommentForComparedCommitInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this PostCommentForComparedCommitInput.


        :param repository_name: The repository_name of this PostCommentForComparedCommitInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def before_commit_id(self):
        """Gets the before_commit_id of this PostCommentForComparedCommitInput.


        :return: The before_commit_id of this PostCommentForComparedCommitInput.
        :rtype: str
        """
        return self._before_commit_id

    @before_commit_id.setter
    def before_commit_id(self, before_commit_id):
        """Sets the before_commit_id of this PostCommentForComparedCommitInput.


        :param before_commit_id: The before_commit_id of this PostCommentForComparedCommitInput.
        :type before_commit_id: str
        """

        self._before_commit_id = before_commit_id

    @property
    def after_commit_id(self):
        """Gets the after_commit_id of this PostCommentForComparedCommitInput.


        :return: The after_commit_id of this PostCommentForComparedCommitInput.
        :rtype: str
        """
        return self._after_commit_id

    @after_commit_id.setter
    def after_commit_id(self, after_commit_id):
        """Sets the after_commit_id of this PostCommentForComparedCommitInput.


        :param after_commit_id: The after_commit_id of this PostCommentForComparedCommitInput.
        :type after_commit_id: str
        """
        if after_commit_id is None:
            raise ValueError("Invalid value for `after_commit_id`, must not be `None`")

        self._after_commit_id = after_commit_id

    @property
    def location(self):
        """Gets the location of this PostCommentForComparedCommitInput.


        :return: The location of this PostCommentForComparedCommitInput.
        :rtype: PostCommentForComparedCommitInputLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PostCommentForComparedCommitInput.


        :param location: The location of this PostCommentForComparedCommitInput.
        :type location: PostCommentForComparedCommitInputLocation
        """

        self._location = location

    @property
    def content(self):
        """Gets the content of this PostCommentForComparedCommitInput.


        :return: The content of this PostCommentForComparedCommitInput.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PostCommentForComparedCommitInput.


        :param content: The content of this PostCommentForComparedCommitInput.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def client_request_token(self):
        """Gets the client_request_token of this PostCommentForComparedCommitInput.


        :return: The client_request_token of this PostCommentForComparedCommitInput.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this PostCommentForComparedCommitInput.


        :param client_request_token: The client_request_token of this PostCommentForComparedCommitInput.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token
