# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Folder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tree_id: str=None, absolute_path: str=None, relative_path: str=None):
        """Folder - a model defined in OpenAPI

        :param tree_id: The tree_id of this Folder.
        :param absolute_path: The absolute_path of this Folder.
        :param relative_path: The relative_path of this Folder.
        """
        self.openapi_types = {
            'tree_id': str,
            'absolute_path': str,
            'relative_path': str
        }

        self.attribute_map = {
            'tree_id': 'treeId',
            'absolute_path': 'absolutePath',
            'relative_path': 'relativePath'
        }

        self._tree_id = tree_id
        self._absolute_path = absolute_path
        self._relative_path = relative_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Folder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Folder of this Folder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tree_id(self):
        """Gets the tree_id of this Folder.


        :return: The tree_id of this Folder.
        :rtype: str
        """
        return self._tree_id

    @tree_id.setter
    def tree_id(self, tree_id):
        """Sets the tree_id of this Folder.


        :param tree_id: The tree_id of this Folder.
        :type tree_id: str
        """

        self._tree_id = tree_id

    @property
    def absolute_path(self):
        """Gets the absolute_path of this Folder.


        :return: The absolute_path of this Folder.
        :rtype: str
        """
        return self._absolute_path

    @absolute_path.setter
    def absolute_path(self, absolute_path):
        """Sets the absolute_path of this Folder.


        :param absolute_path: The absolute_path of this Folder.
        :type absolute_path: str
        """

        self._absolute_path = absolute_path

    @property
    def relative_path(self):
        """Gets the relative_path of this Folder.


        :return: The relative_path of this Folder.
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this Folder.


        :param relative_path: The relative_path of this Folder.
        :type relative_path: str
        """

        self._relative_path = relative_path
