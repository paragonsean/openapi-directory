# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCommitInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, commit_id: str=None):
        """GetCommitInput - a model defined in OpenAPI

        :param repository_name: The repository_name of this GetCommitInput.
        :param commit_id: The commit_id of this GetCommitInput.
        """
        self.openapi_types = {
            'repository_name': str,
            'commit_id': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'commit_id': 'commitId'
        }

        self._repository_name = repository_name
        self._commit_id = commit_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCommitInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCommitInput of this GetCommitInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this GetCommitInput.


        :return: The repository_name of this GetCommitInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this GetCommitInput.


        :param repository_name: The repository_name of this GetCommitInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def commit_id(self):
        """Gets the commit_id of this GetCommitInput.


        :return: The commit_id of this GetCommitInput.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this GetCommitInput.


        :param commit_id: The commit_id of this GetCommitInput.
        :type commit_id: str
        """
        if commit_id is None:
            raise ValueError("Invalid value for `commit_id`, must not be `None`")

        self._commit_id = commit_id
