# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDefaultBranchInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, default_branch_name: str=None):
        """UpdateDefaultBranchInput - a model defined in OpenAPI

        :param repository_name: The repository_name of this UpdateDefaultBranchInput.
        :param default_branch_name: The default_branch_name of this UpdateDefaultBranchInput.
        """
        self.openapi_types = {
            'repository_name': str,
            'default_branch_name': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'default_branch_name': 'defaultBranchName'
        }

        self._repository_name = repository_name
        self._default_branch_name = default_branch_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDefaultBranchInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDefaultBranchInput of this UpdateDefaultBranchInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this UpdateDefaultBranchInput.


        :return: The repository_name of this UpdateDefaultBranchInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this UpdateDefaultBranchInput.


        :param repository_name: The repository_name of this UpdateDefaultBranchInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def default_branch_name(self):
        """Gets the default_branch_name of this UpdateDefaultBranchInput.


        :return: The default_branch_name of this UpdateDefaultBranchInput.
        :rtype: str
        """
        return self._default_branch_name

    @default_branch_name.setter
    def default_branch_name(self, default_branch_name):
        """Sets the default_branch_name of this UpdateDefaultBranchInput.


        :param default_branch_name: The default_branch_name of this UpdateDefaultBranchInput.
        :type default_branch_name: str
        """
        if default_branch_name is None:
            raise ValueError("Invalid value for `default_branch_name`, must not be `None`")

        self._default_branch_name = default_branch_name
