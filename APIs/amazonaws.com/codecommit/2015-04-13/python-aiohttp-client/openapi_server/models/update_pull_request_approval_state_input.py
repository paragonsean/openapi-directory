# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.approval_state import ApprovalState
from openapi_server import util


class UpdatePullRequestApprovalStateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pull_request_id: str=None, revision_id: str=None, approval_state: ApprovalState=None):
        """UpdatePullRequestApprovalStateInput - a model defined in OpenAPI

        :param pull_request_id: The pull_request_id of this UpdatePullRequestApprovalStateInput.
        :param revision_id: The revision_id of this UpdatePullRequestApprovalStateInput.
        :param approval_state: The approval_state of this UpdatePullRequestApprovalStateInput.
        """
        self.openapi_types = {
            'pull_request_id': str,
            'revision_id': str,
            'approval_state': ApprovalState
        }

        self.attribute_map = {
            'pull_request_id': 'pullRequestId',
            'revision_id': 'revisionId',
            'approval_state': 'approvalState'
        }

        self._pull_request_id = pull_request_id
        self._revision_id = revision_id
        self._approval_state = approval_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePullRequestApprovalStateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePullRequestApprovalStateInput of this UpdatePullRequestApprovalStateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pull_request_id(self):
        """Gets the pull_request_id of this UpdatePullRequestApprovalStateInput.


        :return: The pull_request_id of this UpdatePullRequestApprovalStateInput.
        :rtype: str
        """
        return self._pull_request_id

    @pull_request_id.setter
    def pull_request_id(self, pull_request_id):
        """Sets the pull_request_id of this UpdatePullRequestApprovalStateInput.


        :param pull_request_id: The pull_request_id of this UpdatePullRequestApprovalStateInput.
        :type pull_request_id: str
        """
        if pull_request_id is None:
            raise ValueError("Invalid value for `pull_request_id`, must not be `None`")

        self._pull_request_id = pull_request_id

    @property
    def revision_id(self):
        """Gets the revision_id of this UpdatePullRequestApprovalStateInput.


        :return: The revision_id of this UpdatePullRequestApprovalStateInput.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this UpdatePullRequestApprovalStateInput.


        :param revision_id: The revision_id of this UpdatePullRequestApprovalStateInput.
        :type revision_id: str
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")

        self._revision_id = revision_id

    @property
    def approval_state(self):
        """Gets the approval_state of this UpdatePullRequestApprovalStateInput.


        :return: The approval_state of this UpdatePullRequestApprovalStateInput.
        :rtype: ApprovalState
        """
        return self._approval_state

    @approval_state.setter
    def approval_state(self, approval_state):
        """Sets the approval_state of this UpdatePullRequestApprovalStateInput.


        :param approval_state: The approval_state of this UpdatePullRequestApprovalStateInput.
        :type approval_state: ApprovalState
        """
        if approval_state is None:
            raise ValueError("Invalid value for `approval_state`, must not be `None`")

        self._approval_state = approval_state
