/**
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSinkPolicy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSinkPolicy_request::OAIGetSinkPolicy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSinkPolicy_request::OAIGetSinkPolicy_request() {
    this->initializeModel();
}

OAIGetSinkPolicy_request::~OAIGetSinkPolicy_request() {}

void OAIGetSinkPolicy_request::initializeModel() {

    m_sink_identifier_isSet = false;
    m_sink_identifier_isValid = false;
}

void OAIGetSinkPolicy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSinkPolicy_request::fromJsonObject(QJsonObject json) {

    m_sink_identifier_isValid = ::OpenAPI::fromJsonValue(m_sink_identifier, json[QString("SinkIdentifier")]);
    m_sink_identifier_isSet = !json[QString("SinkIdentifier")].isNull() && m_sink_identifier_isValid;
}

QString OAIGetSinkPolicy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSinkPolicy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_sink_identifier_isSet) {
        obj.insert(QString("SinkIdentifier"), ::OpenAPI::toJsonValue(m_sink_identifier));
    }
    return obj;
}

QString OAIGetSinkPolicy_request::getSinkIdentifier() const {
    return m_sink_identifier;
}
void OAIGetSinkPolicy_request::setSinkIdentifier(const QString &sink_identifier) {
    m_sink_identifier = sink_identifier;
    m_sink_identifier_isSet = true;
}

bool OAIGetSinkPolicy_request::is_sink_identifier_Set() const{
    return m_sink_identifier_isSet;
}

bool OAIGetSinkPolicy_request::is_sink_identifier_Valid() const{
    return m_sink_identifier_isValid;
}

bool OAIGetSinkPolicy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sink_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSinkPolicy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sink_identifier_isValid && true;
}

} // namespace OpenAPI
