/**
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSinkPolicyOutput.h
 *
 * 
 */

#ifndef OAIGetSinkPolicyOutput_H
#define OAIGetSinkPolicyOutput_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetSinkPolicyOutput : public OAIObject {
public:
    OAIGetSinkPolicyOutput();
    OAIGetSinkPolicyOutput(QString json);
    ~OAIGetSinkPolicyOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSinkArn() const;
    void setSinkArn(const QString &sink_arn);
    bool is_sink_arn_Set() const;
    bool is_sink_arn_Valid() const;

    QString getSinkId() const;
    void setSinkId(const QString &sink_id);
    bool is_sink_id_Set() const;
    bool is_sink_id_Valid() const;

    QString getPolicy() const;
    void setPolicy(const QString &policy);
    bool is_policy_Set() const;
    bool is_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_sink_arn;
    bool m_sink_arn_isSet;
    bool m_sink_arn_isValid;

    QString m_sink_id;
    bool m_sink_id_isSet;
    bool m_sink_id_isValid;

    QString m_policy;
    bool m_policy_isSet;
    bool m_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSinkPolicyOutput)

#endif // OAIGetSinkPolicyOutput_H
