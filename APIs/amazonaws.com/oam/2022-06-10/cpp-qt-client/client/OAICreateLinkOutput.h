/**
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLinkOutput.h
 *
 * 
 */

#ifndef OAICreateLinkOutput_H
#define OAICreateLinkOutput_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateLinkOutput : public OAIObject {
public:
    OAICreateLinkOutput();
    OAICreateLinkOutput(QString json);
    ~OAICreateLinkOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    QString getLabelTemplate() const;
    void setLabelTemplate(const QString &label_template);
    bool is_label_template_Set() const;
    bool is_label_template_Valid() const;

    QList getResourceTypes() const;
    void setResourceTypes(const QList &resource_types);
    bool is_resource_types_Set() const;
    bool is_resource_types_Valid() const;

    QString getSinkArn() const;
    void setSinkArn(const QString &sink_arn);
    bool is_sink_arn_Set() const;
    bool is_sink_arn_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    QString m_label_template;
    bool m_label_template_isSet;
    bool m_label_template_isValid;

    QList m_resource_types;
    bool m_resource_types_isSet;
    bool m_resource_types_isValid;

    QString m_sink_arn;
    bool m_sink_arn_isSet;
    bool m_sink_arn_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLinkOutput)

#endif // OAICreateLinkOutput_H
