/**
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLinksItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLinksItem::OAIListLinksItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLinksItem::OAIListLinksItem() {
    this->initializeModel();
}

OAIListLinksItem::~OAIListLinksItem() {}

void OAIListLinksItem::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_sink_arn_isSet = false;
    m_sink_arn_isValid = false;
}

void OAIListLinksItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLinksItem::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("Label")]);
    m_label_isSet = !json[QString("Label")].isNull() && m_label_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;

    m_sink_arn_isValid = ::OpenAPI::fromJsonValue(m_sink_arn, json[QString("SinkArn")]);
    m_sink_arn_isSet = !json[QString("SinkArn")].isNull() && m_sink_arn_isValid;
}

QString OAIListLinksItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLinksItem::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("Label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_sink_arn_isSet) {
        obj.insert(QString("SinkArn"), ::OpenAPI::toJsonValue(m_sink_arn));
    }
    return obj;
}

QString OAIListLinksItem::getArn() const {
    return m_arn;
}
void OAIListLinksItem::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIListLinksItem::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIListLinksItem::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIListLinksItem::getId() const {
    return m_id;
}
void OAIListLinksItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIListLinksItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIListLinksItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIListLinksItem::getLabel() const {
    return m_label;
}
void OAIListLinksItem::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIListLinksItem::is_label_Set() const{
    return m_label_isSet;
}

bool OAIListLinksItem::is_label_Valid() const{
    return m_label_isValid;
}

QList OAIListLinksItem::getResourceTypes() const {
    return m_resource_types;
}
void OAIListLinksItem::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIListLinksItem::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIListLinksItem::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QString OAIListLinksItem::getSinkArn() const {
    return m_sink_arn;
}
void OAIListLinksItem::setSinkArn(const QString &sink_arn) {
    m_sink_arn = sink_arn;
    m_sink_arn_isSet = true;
}

bool OAIListLinksItem::is_sink_arn_Set() const{
    return m_sink_arn_isSet;
}

bool OAIListLinksItem::is_sink_arn_Valid() const{
    return m_sink_arn_isValid;
}

bool OAIListLinksItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLinksItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
