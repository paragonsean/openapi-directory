/*
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLinkRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:18.674982-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLinkRequest {
  public static final String SERIALIZED_NAME_LABEL_TEMPLATE = "LabelTemplate";
  @SerializedName(SERIALIZED_NAME_LABEL_TEMPLATE)
  private String labelTemplate;

  public static final String SERIALIZED_NAME_RESOURCE_TYPES = "ResourceTypes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPES)
  private List<ResourceType> resourceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SINK_IDENTIFIER = "SinkIdentifier";
  @SerializedName(SERIALIZED_NAME_SINK_IDENTIFIER)
  private String sinkIdentifier;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateLinkRequest() {
  }

  public CreateLinkRequest labelTemplate(String labelTemplate) {
    this.labelTemplate = labelTemplate;
    return this;
  }

  /**
   * &lt;p&gt;Specify a friendly human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.&lt;/p&gt; &lt;p&gt;You can use a custom label or use the following variables:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;$AccountName&lt;/code&gt; is the name of the account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;$AccountEmail&lt;/code&gt; is the globally unique email address of the account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;$AccountEmailNoDomain&lt;/code&gt; is the email address of the account without the domain name&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return labelTemplate
   */
  @javax.annotation.Nonnull
  public String getLabelTemplate() {
    return labelTemplate;
  }

  public void setLabelTemplate(String labelTemplate) {
    this.labelTemplate = labelTemplate;
  }


  public CreateLinkRequest resourceTypes(List<ResourceType> resourceTypes) {
    this.resourceTypes = resourceTypes;
    return this;
  }

  public CreateLinkRequest addResourceTypesItem(ResourceType resourceTypesItem) {
    if (this.resourceTypes == null) {
      this.resourceTypes = new ArrayList<>();
    }
    this.resourceTypes.add(resourceTypesItem);
    return this;
  }

  /**
   * An array of strings that define which types of data that the source account shares with the monitoring account.
   * @return resourceTypes
   */
  @javax.annotation.Nonnull
  public List<ResourceType> getResourceTypes() {
    return resourceTypes;
  }

  public void setResourceTypes(List<ResourceType> resourceTypes) {
    this.resourceTypes = resourceTypes;
  }


  public CreateLinkRequest sinkIdentifier(String sinkIdentifier) {
    this.sinkIdentifier = sinkIdentifier;
    return this;
  }

  /**
   * &lt;p&gt;The ARN of the sink to use to create this link. You can use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/OAM/latest/APIReference/API_ListSinks.html\&quot;&gt;ListSinks&lt;/a&gt; to find the ARNs of sinks.&lt;/p&gt; &lt;p&gt;For more information about sinks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/OAM/latest/APIReference/API_CreateSink.html\&quot;&gt;CreateSink&lt;/a&gt;.&lt;/p&gt;
   * @return sinkIdentifier
   */
  @javax.annotation.Nonnull
  public String getSinkIdentifier() {
    return sinkIdentifier;
  }

  public void setSinkIdentifier(String sinkIdentifier) {
    this.sinkIdentifier = sinkIdentifier;
  }


  public CreateLinkRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateLinkRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;Assigns one or more tags (key-value pairs) to the link. &lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;For more information about using tags to control access, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\&quot;&gt;Controlling access to Amazon Web Services resources using tags&lt;/a&gt;.&lt;/p&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLinkRequest createLinkRequest = (CreateLinkRequest) o;
    return Objects.equals(this.labelTemplate, createLinkRequest.labelTemplate) &&
        Objects.equals(this.resourceTypes, createLinkRequest.resourceTypes) &&
        Objects.equals(this.sinkIdentifier, createLinkRequest.sinkIdentifier) &&
        Objects.equals(this.tags, createLinkRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labelTemplate, resourceTypes, sinkIdentifier, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLinkRequest {\n");
    sb.append("    labelTemplate: ").append(toIndentedString(labelTemplate)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("    sinkIdentifier: ").append(toIndentedString(sinkIdentifier)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LabelTemplate");
    openapiFields.add("ResourceTypes");
    openapiFields.add("SinkIdentifier");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LabelTemplate");
    openapiRequiredFields.add("ResourceTypes");
    openapiRequiredFields.add("SinkIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLinkRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLinkRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLinkRequest is not found in the empty JSON string", CreateLinkRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLinkRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLinkRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLinkRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("LabelTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LabelTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LabelTemplate").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ResourceTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ResourceTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("ResourceTypes").toString()));
      }
      if (!jsonObj.get("SinkIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SinkIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SinkIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLinkRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLinkRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLinkRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLinkRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLinkRequest>() {
           @Override
           public void write(JsonWriter out, CreateLinkRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLinkRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLinkRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLinkRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLinkRequest
   */
  public static CreateLinkRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLinkRequest.class);
  }

  /**
   * Convert an instance of CreateLinkRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

