/*
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutSinkPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:18.674982-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutSinkPolicyRequest {
  public static final String SERIALIZED_NAME_SINK_IDENTIFIER = "SinkIdentifier";
  @SerializedName(SERIALIZED_NAME_SINK_IDENTIFIER)
  private String sinkIdentifier;

  public static final String SERIALIZED_NAME_POLICY = "Policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public PutSinkPolicyRequest() {
  }

  public PutSinkPolicyRequest sinkIdentifier(String sinkIdentifier) {
    this.sinkIdentifier = sinkIdentifier;
    return this;
  }

  /**
   * The ARN of the sink to attach this policy to.
   * @return sinkIdentifier
   */
  @javax.annotation.Nonnull
  public String getSinkIdentifier() {
    return sinkIdentifier;
  }

  public void setSinkIdentifier(String sinkIdentifier) {
    this.sinkIdentifier = sinkIdentifier;
  }


  public PutSinkPolicyRequest policy(String policy) {
    this.policy = policy;
    return this;
  }

  /**
   * &lt;p&gt;The JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.&lt;/p&gt; &lt;p&gt;The policy must be in JSON string format with quotation marks escaped and no newlines.&lt;/p&gt; &lt;p&gt;For examples of different types of policies, see the &lt;b&gt;Examples&lt;/b&gt; section on this page.&lt;/p&gt;
   * @return policy
   */
  @javax.annotation.Nonnull
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutSinkPolicyRequest putSinkPolicyRequest = (PutSinkPolicyRequest) o;
    return Objects.equals(this.sinkIdentifier, putSinkPolicyRequest.sinkIdentifier) &&
        Objects.equals(this.policy, putSinkPolicyRequest.policy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sinkIdentifier, policy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutSinkPolicyRequest {\n");
    sb.append("    sinkIdentifier: ").append(toIndentedString(sinkIdentifier)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SinkIdentifier");
    openapiFields.add("Policy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SinkIdentifier");
    openapiRequiredFields.add("Policy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutSinkPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutSinkPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutSinkPolicyRequest is not found in the empty JSON string", PutSinkPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutSinkPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutSinkPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutSinkPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("SinkIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SinkIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SinkIdentifier").toString()));
      }
      if (!jsonObj.get("Policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Policy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutSinkPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutSinkPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutSinkPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutSinkPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutSinkPolicyRequest>() {
           @Override
           public void write(JsonWriter out, PutSinkPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutSinkPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutSinkPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutSinkPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to PutSinkPolicyRequest
   */
  public static PutSinkPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutSinkPolicyRequest.class);
  }

  /**
   * Convert an instance of PutSinkPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

