/*
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLinkOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:18.674982-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLinkOutput {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABEL = "Label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LABEL_TEMPLATE = "LabelTemplate";
  @SerializedName(SERIALIZED_NAME_LABEL_TEMPLATE)
  private String labelTemplate;

  public static final String SERIALIZED_NAME_RESOURCE_TYPES = "ResourceTypes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPES)
  private List resourceTypes;

  public static final String SERIALIZED_NAME_SINK_ARN = "SinkArn";
  @SerializedName(SERIALIZED_NAME_SINK_ARN)
  private String sinkArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public UpdateLinkOutput() {
  }

  public UpdateLinkOutput arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public UpdateLinkOutput id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UpdateLinkOutput label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public UpdateLinkOutput labelTemplate(String labelTemplate) {
    this.labelTemplate = labelTemplate;
    return this;
  }

  /**
   * Get labelTemplate
   * @return labelTemplate
   */
  @javax.annotation.Nullable
  public String getLabelTemplate() {
    return labelTemplate;
  }

  public void setLabelTemplate(String labelTemplate) {
    this.labelTemplate = labelTemplate;
  }


  public UpdateLinkOutput resourceTypes(List resourceTypes) {
    this.resourceTypes = resourceTypes;
    return this;
  }

  /**
   * Get resourceTypes
   * @return resourceTypes
   */
  @javax.annotation.Nullable
  public List getResourceTypes() {
    return resourceTypes;
  }

  public void setResourceTypes(List resourceTypes) {
    this.resourceTypes = resourceTypes;
  }


  public UpdateLinkOutput sinkArn(String sinkArn) {
    this.sinkArn = sinkArn;
    return this;
  }

  /**
   * Get sinkArn
   * @return sinkArn
   */
  @javax.annotation.Nullable
  public String getSinkArn() {
    return sinkArn;
  }

  public void setSinkArn(String sinkArn) {
    this.sinkArn = sinkArn;
  }


  public UpdateLinkOutput tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLinkOutput updateLinkOutput = (UpdateLinkOutput) o;
    return Objects.equals(this.arn, updateLinkOutput.arn) &&
        Objects.equals(this.id, updateLinkOutput.id) &&
        Objects.equals(this.label, updateLinkOutput.label) &&
        Objects.equals(this.labelTemplate, updateLinkOutput.labelTemplate) &&
        Objects.equals(this.resourceTypes, updateLinkOutput.resourceTypes) &&
        Objects.equals(this.sinkArn, updateLinkOutput.sinkArn) &&
        Objects.equals(this.tags, updateLinkOutput.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, id, label, labelTemplate, resourceTypes, sinkArn, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLinkOutput {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    labelTemplate: ").append(toIndentedString(labelTemplate)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("    sinkArn: ").append(toIndentedString(sinkArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Id");
    openapiFields.add("Label");
    openapiFields.add("LabelTemplate");
    openapiFields.add("ResourceTypes");
    openapiFields.add("SinkArn");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLinkOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLinkOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLinkOutput is not found in the empty JSON string", UpdateLinkOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLinkOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLinkOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Label`
      if (jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Label"));
      }
      // validate the optional field `LabelTemplate`
      if (jsonObj.get("LabelTemplate") != null && !jsonObj.get("LabelTemplate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LabelTemplate"));
      }
      // validate the optional field `ResourceTypes`
      if (jsonObj.get("ResourceTypes") != null && !jsonObj.get("ResourceTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceTypes"));
      }
      // validate the optional field `SinkArn`
      if (jsonObj.get("SinkArn") != null && !jsonObj.get("SinkArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SinkArn"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLinkOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLinkOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLinkOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLinkOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLinkOutput>() {
           @Override
           public void write(JsonWriter out, UpdateLinkOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLinkOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLinkOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLinkOutput
   * @throws IOException if the JSON string is invalid with respect to UpdateLinkOutput
   */
  public static UpdateLinkOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLinkOutput.class);
  }

  /**
   * Convert an instance of UpdateLinkOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

