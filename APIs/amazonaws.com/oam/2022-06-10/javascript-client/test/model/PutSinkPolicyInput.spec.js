/**
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudWatchObservabilityAccessManager);
  }
}(this, function(expect, CloudWatchObservabilityAccessManager) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudWatchObservabilityAccessManager.PutSinkPolicyInput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PutSinkPolicyInput', function() {
    it('should create an instance of PutSinkPolicyInput', function() {
      // uncomment below and update the code to test PutSinkPolicyInput
      //var instance = new CloudWatchObservabilityAccessManager.PutSinkPolicyInput();
      //expect(instance).to.be.a(CloudWatchObservabilityAccessManager.PutSinkPolicyInput);
    });

    it('should have the property sinkIdentifier (base name: "SinkIdentifier")', function() {
      // uncomment below and update the code to test the property sinkIdentifier
      //var instance = new CloudWatchObservabilityAccessManager.PutSinkPolicyInput();
      //expect(instance).to.be();
    });

    it('should have the property policy (base name: "Policy")', function() {
      // uncomment below and update the code to test the property policy
      //var instance = new CloudWatchObservabilityAccessManager.PutSinkPolicyInput();
      //expect(instance).to.be();
    });

  });

}));
