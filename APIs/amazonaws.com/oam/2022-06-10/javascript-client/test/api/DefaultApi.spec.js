/**
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudWatchObservabilityAccessManager);
  }
}(this, function(expect, CloudWatchObservabilityAccessManager) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudWatchObservabilityAccessManager.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createLink', function() {
      it('should call createLink successfully', function(done) {
        //uncomment below and update the code to test createLink
        //instance.createLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSink', function() {
      it('should call createSink successfully', function(done) {
        //uncomment below and update the code to test createSink
        //instance.createSink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLink', function() {
      it('should call deleteLink successfully', function(done) {
        //uncomment below and update the code to test deleteLink
        //instance.deleteLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSink', function() {
      it('should call deleteSink successfully', function(done) {
        //uncomment below and update the code to test deleteSink
        //instance.deleteSink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLink', function() {
      it('should call getLink successfully', function(done) {
        //uncomment below and update the code to test getLink
        //instance.getLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSink', function() {
      it('should call getSink successfully', function(done) {
        //uncomment below and update the code to test getSink
        //instance.getSink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSinkPolicy', function() {
      it('should call getSinkPolicy successfully', function(done) {
        //uncomment below and update the code to test getSinkPolicy
        //instance.getSinkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAttachedLinks', function() {
      it('should call listAttachedLinks successfully', function(done) {
        //uncomment below and update the code to test listAttachedLinks
        //instance.listAttachedLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLinks', function() {
      it('should call listLinks successfully', function(done) {
        //uncomment below and update the code to test listLinks
        //instance.listLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSinks', function() {
      it('should call listSinks successfully', function(done) {
        //uncomment below and update the code to test listSinks
        //instance.listSinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSinkPolicy', function() {
      it('should call putSinkPolicy successfully', function(done) {
        //uncomment below and update the code to test putSinkPolicy
        //instance.putSinkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLink', function() {
      it('should call updateLink successfully', function(done) {
        //uncomment below and update the code to test updateLink
        //instance.updateLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
