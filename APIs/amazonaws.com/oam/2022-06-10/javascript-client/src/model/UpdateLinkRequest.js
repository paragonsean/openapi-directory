/**
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceType from './ResourceType';

/**
 * The UpdateLinkRequest model module.
 * @module model/UpdateLinkRequest
 * @version 2022-06-10
 */
class UpdateLinkRequest {
    /**
     * Constructs a new <code>UpdateLinkRequest</code>.
     * @alias module:model/UpdateLinkRequest
     * @param identifier {String} The ARN of the link that you want to update.
     * @param resourceTypes {Array.<module:model/ResourceType>} <p>An array of strings that define which types of data that the source account will send to the monitoring account.</p> <p>Your input here replaces the current set of data types that are shared.</p>
     */
    constructor(identifier, resourceTypes) { 
        
        UpdateLinkRequest.initialize(this, identifier, resourceTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identifier, resourceTypes) { 
        obj['Identifier'] = identifier;
        obj['ResourceTypes'] = resourceTypes;
    }

    /**
     * Constructs a <code>UpdateLinkRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateLinkRequest} obj Optional instance to populate.
     * @return {module:model/UpdateLinkRequest} The populated <code>UpdateLinkRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateLinkRequest();

            if (data.hasOwnProperty('Identifier')) {
                obj['Identifier'] = ApiClient.convertToType(data['Identifier'], 'String');
            }
            if (data.hasOwnProperty('ResourceTypes')) {
                obj['ResourceTypes'] = ApiClient.convertToType(data['ResourceTypes'], [ResourceType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateLinkRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateLinkRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateLinkRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Identifier'] && !(typeof data['Identifier'] === 'string' || data['Identifier'] instanceof String)) {
            throw new Error("Expected the field `Identifier` to be a primitive type in the JSON string but got " + data['Identifier']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ResourceTypes'])) {
            throw new Error("Expected the field `ResourceTypes` to be an array in the JSON data but got " + data['ResourceTypes']);
        }

        return true;
    }


}

UpdateLinkRequest.RequiredProperties = ["Identifier", "ResourceTypes"];

/**
 * The ARN of the link that you want to update.
 * @member {String} Identifier
 */
UpdateLinkRequest.prototype['Identifier'] = undefined;

/**
 * <p>An array of strings that define which types of data that the source account will send to the monitoring account.</p> <p>Your input here replaces the current set of data types that are shared.</p>
 * @member {Array.<module:model/ResourceType>} ResourceTypes
 */
UpdateLinkRequest.prototype['ResourceTypes'] = undefined;






export default UpdateLinkRequest;

