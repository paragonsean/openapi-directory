/**
 * CloudWatch Observability Access Manager
 * <p>Use Amazon CloudWatch Observability Access Manager to create and manage links between source accounts and monitoring accounts by using <i>CloudWatch cross-account observability</i>. With CloudWatch cross-account observability, you can monitor and troubleshoot applications that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, and traces in any of the linked accounts without account boundaries.</p> <pre><code> &lt;p&gt;Set up one or more Amazon Web Services accounts as &lt;i&gt;monitoring accounts&lt;/i&gt; and link them with multiple &lt;i&gt;source accounts&lt;/i&gt;. A monitoring account is a central Amazon Web Services account that can view and interact with observability data generated from source accounts. A source account is an individual Amazon Web Services account that generates observability data for the resources that reside in it. Source accounts share their observability data with the monitoring account. The shared observability data can include metrics in Amazon CloudWatch, logs in Amazon CloudWatch Logs, and traces in X-Ray.&lt;/p&gt; </code></pre>
 *
 * The version of the OpenAPI document: 2022-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateLinkOutput model module.
 * @module model/CreateLinkOutput
 * @version 2022-06-10
 */
class CreateLinkOutput {
    /**
     * Constructs a new <code>CreateLinkOutput</code>.
     * @alias module:model/CreateLinkOutput
     */
    constructor() { 
        
        CreateLinkOutput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateLinkOutput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateLinkOutput} obj Optional instance to populate.
     * @return {module:model/CreateLinkOutput} The populated <code>CreateLinkOutput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateLinkOutput();

            if (data.hasOwnProperty('Arn')) {
                obj['Arn'] = ApiClient.convertToType(data['Arn'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Label')) {
                obj['Label'] = ApiClient.convertToType(data['Label'], 'String');
            }
            if (data.hasOwnProperty('LabelTemplate')) {
                obj['LabelTemplate'] = ApiClient.convertToType(data['LabelTemplate'], 'String');
            }
            if (data.hasOwnProperty('ResourceTypes')) {
                obj['ResourceTypes'] = ApiClient.convertToType(data['ResourceTypes'], Array);
            }
            if (data.hasOwnProperty('SinkArn')) {
                obj['SinkArn'] = ApiClient.convertToType(data['SinkArn'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateLinkOutput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateLinkOutput</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Arn`
        if (data['Arn']) { // data not null
          String.validateJSON(data['Arn']);
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `Label`
        if (data['Label']) { // data not null
          String.validateJSON(data['Label']);
        }
        // validate the optional field `LabelTemplate`
        if (data['LabelTemplate']) { // data not null
          String.validateJSON(data['LabelTemplate']);
        }
        // validate the optional field `ResourceTypes`
        if (data['ResourceTypes']) { // data not null
          Array.validateJSON(data['ResourceTypes']);
        }
        // validate the optional field `SinkArn`
        if (data['SinkArn']) { // data not null
          String.validateJSON(data['SinkArn']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Object.validateJSON(data['Tags']);
        }

        return true;
    }


}



/**
 * @member {String} Arn
 */
CreateLinkOutput.prototype['Arn'] = undefined;

/**
 * @member {String} Id
 */
CreateLinkOutput.prototype['Id'] = undefined;

/**
 * @member {String} Label
 */
CreateLinkOutput.prototype['Label'] = undefined;

/**
 * @member {String} LabelTemplate
 */
CreateLinkOutput.prototype['LabelTemplate'] = undefined;

/**
 * @member {Array} ResourceTypes
 */
CreateLinkOutput.prototype['ResourceTypes'] = undefined;

/**
 * @member {String} SinkArn
 */
CreateLinkOutput.prototype['SinkArn'] = undefined;

/**
 * @member {Object} Tags
 */
CreateLinkOutput.prototype['Tags'] = undefined;






export default CreateLinkOutput;

