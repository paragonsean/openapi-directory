# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_type import ResourceType
import re
from openapi_server import util


class CreateLinkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label_template: str=None, resource_types: List[ResourceType]=None, sink_identifier: str=None, tags: Dict[str, str]=None):
        """CreateLinkRequest - a model defined in OpenAPI

        :param label_template: The label_template of this CreateLinkRequest.
        :param resource_types: The resource_types of this CreateLinkRequest.
        :param sink_identifier: The sink_identifier of this CreateLinkRequest.
        :param tags: The tags of this CreateLinkRequest.
        """
        self.openapi_types = {
            'label_template': str,
            'resource_types': List[ResourceType],
            'sink_identifier': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'label_template': 'LabelTemplate',
            'resource_types': 'ResourceTypes',
            'sink_identifier': 'SinkIdentifier',
            'tags': 'Tags'
        }

        self._label_template = label_template
        self._resource_types = resource_types
        self._sink_identifier = sink_identifier
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLinkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLink_request of this CreateLinkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label_template(self):
        """Gets the label_template of this CreateLinkRequest.

        <p>Specify a friendly human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.</p> <p>You can use a custom label or use the following variables:</p> <ul> <li> <p> <code>$AccountName</code> is the name of the account</p> </li> <li> <p> <code>$AccountEmail</code> is the globally unique email address of the account</p> </li> <li> <p> <code>$AccountEmailNoDomain</code> is the email address of the account without the domain name</p> </li> </ul>

        :return: The label_template of this CreateLinkRequest.
        :rtype: str
        """
        return self._label_template

    @label_template.setter
    def label_template(self, label_template):
        """Sets the label_template of this CreateLinkRequest.

        <p>Specify a friendly human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.</p> <p>You can use a custom label or use the following variables:</p> <ul> <li> <p> <code>$AccountName</code> is the name of the account</p> </li> <li> <p> <code>$AccountEmail</code> is the globally unique email address of the account</p> </li> <li> <p> <code>$AccountEmailNoDomain</code> is the email address of the account without the domain name</p> </li> </ul>

        :param label_template: The label_template of this CreateLinkRequest.
        :type label_template: str
        """
        if label_template is None:
            raise ValueError("Invalid value for `label_template`, must not be `None`")
        if label_template is not None and len(label_template) > 64:
            raise ValueError("Invalid value for `label_template`, length must be less than or equal to `64`")
        if label_template is not None and len(label_template) < 1:
            raise ValueError("Invalid value for `label_template`, length must be greater than or equal to `1`")

        self._label_template = label_template

    @property
    def resource_types(self):
        """Gets the resource_types of this CreateLinkRequest.

        An array of strings that define which types of data that the source account shares with the monitoring account.

        :return: The resource_types of this CreateLinkRequest.
        :rtype: List[ResourceType]
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this CreateLinkRequest.

        An array of strings that define which types of data that the source account shares with the monitoring account.

        :param resource_types: The resource_types of this CreateLinkRequest.
        :type resource_types: List[ResourceType]
        """
        if resource_types is None:
            raise ValueError("Invalid value for `resource_types`, must not be `None`")
        if resource_types is not None and len(resource_types) > 50:
            raise ValueError("Invalid value for `resource_types`, number of items must be less than or equal to `50`")
        if resource_types is not None and len(resource_types) < 1:
            raise ValueError("Invalid value for `resource_types`, number of items must be greater than or equal to `1`")

        self._resource_types = resource_types

    @property
    def sink_identifier(self):
        """Gets the sink_identifier of this CreateLinkRequest.

        <p>The ARN of the sink to use to create this link. You can use <a href=\"https://docs.aws.amazon.com/OAM/latest/APIReference/API_ListSinks.html\">ListSinks</a> to find the ARNs of sinks.</p> <p>For more information about sinks, see <a href=\"https://docs.aws.amazon.com/OAM/latest/APIReference/API_CreateSink.html\">CreateSink</a>.</p>

        :return: The sink_identifier of this CreateLinkRequest.
        :rtype: str
        """
        return self._sink_identifier

    @sink_identifier.setter
    def sink_identifier(self, sink_identifier):
        """Sets the sink_identifier of this CreateLinkRequest.

        <p>The ARN of the sink to use to create this link. You can use <a href=\"https://docs.aws.amazon.com/OAM/latest/APIReference/API_ListSinks.html\">ListSinks</a> to find the ARNs of sinks.</p> <p>For more information about sinks, see <a href=\"https://docs.aws.amazon.com/OAM/latest/APIReference/API_CreateSink.html\">CreateSink</a>.</p>

        :param sink_identifier: The sink_identifier of this CreateLinkRequest.
        :type sink_identifier: str
        """
        if sink_identifier is None:
            raise ValueError("Invalid value for `sink_identifier`, must not be `None`")
        if sink_identifier is not None and not re.search(r'[a-zA-Z0-9][a-zA-Z0-9_:\.\-\/]{0,2047}', sink_identifier):
            raise ValueError("Invalid value for `sink_identifier`, must be a follow pattern or equal to `/[a-zA-Z0-9][a-zA-Z0-9_:\.\-\/]{0,2047}/`")

        self._sink_identifier = sink_identifier

    @property
    def tags(self):
        """Gets the tags of this CreateLinkRequest.

        <p>Assigns one or more tags (key-value pairs) to the link. </p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>For more information about using tags to control access, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\">Controlling access to Amazon Web Services resources using tags</a>.</p>

        :return: The tags of this CreateLinkRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLinkRequest.

        <p>Assigns one or more tags (key-value pairs) to the link. </p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>For more information about using tags to control access, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\">Controlling access to Amazon Web Services resources using tags</a>.</p>

        :param tags: The tags of this CreateLinkRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
