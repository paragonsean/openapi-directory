# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutSinkPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sink_identifier: str=None, policy: str=None):
        """PutSinkPolicyRequest - a model defined in OpenAPI

        :param sink_identifier: The sink_identifier of this PutSinkPolicyRequest.
        :param policy: The policy of this PutSinkPolicyRequest.
        """
        self.openapi_types = {
            'sink_identifier': str,
            'policy': str
        }

        self.attribute_map = {
            'sink_identifier': 'SinkIdentifier',
            'policy': 'Policy'
        }

        self._sink_identifier = sink_identifier
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutSinkPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutSinkPolicy_request of this PutSinkPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sink_identifier(self):
        """Gets the sink_identifier of this PutSinkPolicyRequest.

        The ARN of the sink to attach this policy to.

        :return: The sink_identifier of this PutSinkPolicyRequest.
        :rtype: str
        """
        return self._sink_identifier

    @sink_identifier.setter
    def sink_identifier(self, sink_identifier):
        """Sets the sink_identifier of this PutSinkPolicyRequest.

        The ARN of the sink to attach this policy to.

        :param sink_identifier: The sink_identifier of this PutSinkPolicyRequest.
        :type sink_identifier: str
        """
        if sink_identifier is None:
            raise ValueError("Invalid value for `sink_identifier`, must not be `None`")
        if sink_identifier is not None and not re.search(r'[a-zA-Z0-9][a-zA-Z0-9_:\.\-\/]{0,2047}', sink_identifier):
            raise ValueError("Invalid value for `sink_identifier`, must be a follow pattern or equal to `/[a-zA-Z0-9][a-zA-Z0-9_:\.\-\/]{0,2047}/`")

        self._sink_identifier = sink_identifier

    @property
    def policy(self):
        """Gets the policy of this PutSinkPolicyRequest.

        <p>The JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.</p> <p>The policy must be in JSON string format with quotation marks escaped and no newlines.</p> <p>For examples of different types of policies, see the <b>Examples</b> section on this page.</p>

        :return: The policy of this PutSinkPolicyRequest.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PutSinkPolicyRequest.

        <p>The JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.</p> <p>The policy must be in JSON string format with quotation marks escaped and no newlines.</p> <p>For examples of different types of policies, see the <b>Examples</b> section on this page.</p>

        :param policy: The policy of this PutSinkPolicyRequest.
        :type policy: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")

        self._policy = policy
