# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_type import ResourceType
import re
from openapi_server import util


class UpdateLinkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, resource_types: List[ResourceType]=None):
        """UpdateLinkRequest - a model defined in OpenAPI

        :param identifier: The identifier of this UpdateLinkRequest.
        :param resource_types: The resource_types of this UpdateLinkRequest.
        """
        self.openapi_types = {
            'identifier': str,
            'resource_types': List[ResourceType]
        }

        self.attribute_map = {
            'identifier': 'Identifier',
            'resource_types': 'ResourceTypes'
        }

        self._identifier = identifier
        self._resource_types = resource_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateLinkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateLink_request of this UpdateLinkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this UpdateLinkRequest.

        The ARN of the link that you want to update.

        :return: The identifier of this UpdateLinkRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this UpdateLinkRequest.

        The ARN of the link that you want to update.

        :param identifier: The identifier of this UpdateLinkRequest.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and not re.search(r'[a-zA-Z0-9][a-zA-Z0-9_:\.\-\/]{0,2047}', identifier):
            raise ValueError("Invalid value for `identifier`, must be a follow pattern or equal to `/[a-zA-Z0-9][a-zA-Z0-9_:\.\-\/]{0,2047}/`")

        self._identifier = identifier

    @property
    def resource_types(self):
        """Gets the resource_types of this UpdateLinkRequest.

        <p>An array of strings that define which types of data that the source account will send to the monitoring account.</p> <p>Your input here replaces the current set of data types that are shared.</p>

        :return: The resource_types of this UpdateLinkRequest.
        :rtype: List[ResourceType]
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this UpdateLinkRequest.

        <p>An array of strings that define which types of data that the source account will send to the monitoring account.</p> <p>Your input here replaces the current set of data types that are shared.</p>

        :param resource_types: The resource_types of this UpdateLinkRequest.
        :type resource_types: List[ResourceType]
        """
        if resource_types is None:
            raise ValueError("Invalid value for `resource_types`, must not be `None`")
        if resource_types is not None and len(resource_types) > 50:
            raise ValueError("Invalid value for `resource_types`, number of items must be less than or equal to `50`")
        if resource_types is not None and len(resource_types) < 1:
            raise ValueError("Invalid value for `resource_types`, number of items must be greater than or equal to `1`")

        self._resource_types = resource_types
