# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateLinkInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label_template: str=None, resource_types: List=None, sink_identifier: str=None, tags: Dict=None):
        """CreateLinkInput - a model defined in OpenAPI

        :param label_template: The label_template of this CreateLinkInput.
        :param resource_types: The resource_types of this CreateLinkInput.
        :param sink_identifier: The sink_identifier of this CreateLinkInput.
        :param tags: The tags of this CreateLinkInput.
        """
        self.openapi_types = {
            'label_template': str,
            'resource_types': List,
            'sink_identifier': str,
            'tags': Dict
        }

        self.attribute_map = {
            'label_template': 'LabelTemplate',
            'resource_types': 'ResourceTypes',
            'sink_identifier': 'SinkIdentifier',
            'tags': 'Tags'
        }

        self._label_template = label_template
        self._resource_types = resource_types
        self._sink_identifier = sink_identifier
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLinkInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLinkInput of this CreateLinkInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label_template(self):
        """Gets the label_template of this CreateLinkInput.


        :return: The label_template of this CreateLinkInput.
        :rtype: str
        """
        return self._label_template

    @label_template.setter
    def label_template(self, label_template):
        """Sets the label_template of this CreateLinkInput.


        :param label_template: The label_template of this CreateLinkInput.
        :type label_template: str
        """
        if label_template is None:
            raise ValueError("Invalid value for `label_template`, must not be `None`")

        self._label_template = label_template

    @property
    def resource_types(self):
        """Gets the resource_types of this CreateLinkInput.


        :return: The resource_types of this CreateLinkInput.
        :rtype: List
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this CreateLinkInput.


        :param resource_types: The resource_types of this CreateLinkInput.
        :type resource_types: List
        """
        if resource_types is None:
            raise ValueError("Invalid value for `resource_types`, must not be `None`")

        self._resource_types = resource_types

    @property
    def sink_identifier(self):
        """Gets the sink_identifier of this CreateLinkInput.


        :return: The sink_identifier of this CreateLinkInput.
        :rtype: str
        """
        return self._sink_identifier

    @sink_identifier.setter
    def sink_identifier(self, sink_identifier):
        """Sets the sink_identifier of this CreateLinkInput.


        :param sink_identifier: The sink_identifier of this CreateLinkInput.
        :type sink_identifier: str
        """
        if sink_identifier is None:
            raise ValueError("Invalid value for `sink_identifier`, must not be `None`")

        self._sink_identifier = sink_identifier

    @property
    def tags(self):
        """Gets the tags of this CreateLinkInput.


        :return: The tags of this CreateLinkInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLinkInput.


        :param tags: The tags of this CreateLinkInput.
        :type tags: Dict
        """

        self._tags = tags
