/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonConnectWisdomService);
  }
}(this, function(expect, AmazonConnectWisdomService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonConnectWisdomService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createAssistant', function() {
      it('should call createAssistant successfully', function(done) {
        //uncomment below and update the code to test createAssistant
        //instance.createAssistant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAssistantAssociation', function() {
      it('should call createAssistantAssociation successfully', function(done) {
        //uncomment below and update the code to test createAssistantAssociation
        //instance.createAssistantAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContent', function() {
      it('should call createContent successfully', function(done) {
        //uncomment below and update the code to test createContent
        //instance.createContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createKnowledgeBase', function() {
      it('should call createKnowledgeBase successfully', function(done) {
        //uncomment below and update the code to test createKnowledgeBase
        //instance.createKnowledgeBase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSession', function() {
      it('should call createSession successfully', function(done) {
        //uncomment below and update the code to test createSession
        //instance.createSession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAssistant', function() {
      it('should call deleteAssistant successfully', function(done) {
        //uncomment below and update the code to test deleteAssistant
        //instance.deleteAssistant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAssistantAssociation', function() {
      it('should call deleteAssistantAssociation successfully', function(done) {
        //uncomment below and update the code to test deleteAssistantAssociation
        //instance.deleteAssistantAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContent', function() {
      it('should call deleteContent successfully', function(done) {
        //uncomment below and update the code to test deleteContent
        //instance.deleteContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKnowledgeBase', function() {
      it('should call deleteKnowledgeBase successfully', function(done) {
        //uncomment below and update the code to test deleteKnowledgeBase
        //instance.deleteKnowledgeBase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAssistant', function() {
      it('should call getAssistant successfully', function(done) {
        //uncomment below and update the code to test getAssistant
        //instance.getAssistant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAssistantAssociation', function() {
      it('should call getAssistantAssociation successfully', function(done) {
        //uncomment below and update the code to test getAssistantAssociation
        //instance.getAssistantAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContent', function() {
      it('should call getContent successfully', function(done) {
        //uncomment below and update the code to test getContent
        //instance.getContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentSummary', function() {
      it('should call getContentSummary successfully', function(done) {
        //uncomment below and update the code to test getContentSummary
        //instance.getContentSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKnowledgeBase', function() {
      it('should call getKnowledgeBase successfully', function(done) {
        //uncomment below and update the code to test getKnowledgeBase
        //instance.getKnowledgeBase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecommendations', function() {
      it('should call getRecommendations successfully', function(done) {
        //uncomment below and update the code to test getRecommendations
        //instance.getRecommendations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSession', function() {
      it('should call getSession successfully', function(done) {
        //uncomment below and update the code to test getSession
        //instance.getSession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAssistantAssociations', function() {
      it('should call listAssistantAssociations successfully', function(done) {
        //uncomment below and update the code to test listAssistantAssociations
        //instance.listAssistantAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAssistants', function() {
      it('should call listAssistants successfully', function(done) {
        //uncomment below and update the code to test listAssistants
        //instance.listAssistants(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listContents', function() {
      it('should call listContents successfully', function(done) {
        //uncomment below and update the code to test listContents
        //instance.listContents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listKnowledgeBases', function() {
      it('should call listKnowledgeBases successfully', function(done) {
        //uncomment below and update the code to test listKnowledgeBases
        //instance.listKnowledgeBases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notifyRecommendationsReceived', function() {
      it('should call notifyRecommendationsReceived successfully', function(done) {
        //uncomment below and update the code to test notifyRecommendationsReceived
        //instance.notifyRecommendationsReceived(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryAssistant', function() {
      it('should call queryAssistant successfully', function(done) {
        //uncomment below and update the code to test queryAssistant
        //instance.queryAssistant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeKnowledgeBaseTemplateUri', function() {
      it('should call removeKnowledgeBaseTemplateUri successfully', function(done) {
        //uncomment below and update the code to test removeKnowledgeBaseTemplateUri
        //instance.removeKnowledgeBaseTemplateUri(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchContent', function() {
      it('should call searchContent successfully', function(done) {
        //uncomment below and update the code to test searchContent
        //instance.searchContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchSessions', function() {
      it('should call searchSessions successfully', function(done) {
        //uncomment below and update the code to test searchSessions
        //instance.searchSessions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startContentUpload', function() {
      it('should call startContentUpload successfully', function(done) {
        //uncomment below and update the code to test startContentUpload
        //instance.startContentUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContent', function() {
      it('should call updateContent successfully', function(done) {
        //uncomment below and update the code to test updateContent
        //instance.updateContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKnowledgeBaseTemplateUri', function() {
      it('should call updateKnowledgeBaseTemplateUri successfully', function(done) {
        //uncomment below and update the code to test updateKnowledgeBaseTemplateUri
        //instance.updateKnowledgeBaseTemplateUri(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
