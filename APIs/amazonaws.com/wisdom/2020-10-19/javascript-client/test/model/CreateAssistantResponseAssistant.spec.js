/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonConnectWisdomService);
  }
}(this, function(expect, AmazonConnectWisdomService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateAssistantResponseAssistant', function() {
    it('should create an instance of CreateAssistantResponseAssistant', function() {
      // uncomment below and update the code to test CreateAssistantResponseAssistant
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be.a(AmazonConnectWisdomService.CreateAssistantResponseAssistant);
    });

    it('should have the property assistantArn (base name: "assistantArn")', function() {
      // uncomment below and update the code to test the property assistantArn
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be();
    });

    it('should have the property assistantId (base name: "assistantId")', function() {
      // uncomment below and update the code to test the property assistantId
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be();
    });

    it('should have the property integrationConfiguration (base name: "integrationConfiguration")', function() {
      // uncomment below and update the code to test the property integrationConfiguration
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be();
    });

    it('should have the property serverSideEncryptionConfiguration (base name: "serverSideEncryptionConfiguration")', function() {
      // uncomment below and update the code to test the property serverSideEncryptionConfiguration
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AmazonConnectWisdomService.CreateAssistantResponseAssistant();
      //expect(instance).to.be();
    });

  });

}));
