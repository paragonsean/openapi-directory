/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAssistantAssociationRequest from '../model/CreateAssistantAssociationRequest';
import CreateAssistantAssociationResponse from '../model/CreateAssistantAssociationResponse';
import CreateAssistantRequest from '../model/CreateAssistantRequest';
import CreateAssistantResponse from '../model/CreateAssistantResponse';
import CreateContentRequest from '../model/CreateContentRequest';
import CreateContentResponse from '../model/CreateContentResponse';
import CreateKnowledgeBaseRequest from '../model/CreateKnowledgeBaseRequest';
import CreateKnowledgeBaseResponse from '../model/CreateKnowledgeBaseResponse';
import CreateSessionRequest from '../model/CreateSessionRequest';
import CreateSessionResponse from '../model/CreateSessionResponse';
import GetAssistantAssociationResponse from '../model/GetAssistantAssociationResponse';
import GetAssistantResponse from '../model/GetAssistantResponse';
import GetContentResponse from '../model/GetContentResponse';
import GetContentSummaryResponse from '../model/GetContentSummaryResponse';
import GetKnowledgeBaseResponse from '../model/GetKnowledgeBaseResponse';
import GetRecommendationsResponse from '../model/GetRecommendationsResponse';
import GetSessionResponse from '../model/GetSessionResponse';
import ListAssistantAssociationsResponse from '../model/ListAssistantAssociationsResponse';
import ListAssistantsResponse from '../model/ListAssistantsResponse';
import ListContentsResponse from '../model/ListContentsResponse';
import ListKnowledgeBasesResponse from '../model/ListKnowledgeBasesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import NotifyRecommendationsReceivedRequest from '../model/NotifyRecommendationsReceivedRequest';
import NotifyRecommendationsReceivedResponse from '../model/NotifyRecommendationsReceivedResponse';
import QueryAssistantRequest from '../model/QueryAssistantRequest';
import QueryAssistantResponse from '../model/QueryAssistantResponse';
import SearchContentRequest from '../model/SearchContentRequest';
import SearchContentResponse from '../model/SearchContentResponse';
import SearchSessionsResponse from '../model/SearchSessionsResponse';
import StartContentUploadRequest from '../model/StartContentUploadRequest';
import StartContentUploadResponse from '../model/StartContentUploadResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateContentRequest from '../model/UpdateContentRequest';
import UpdateContentResponse from '../model/UpdateContentResponse';
import UpdateKnowledgeBaseTemplateUriRequest from '../model/UpdateKnowledgeBaseTemplateUriRequest';
import UpdateKnowledgeBaseTemplateUriResponse from '../model/UpdateKnowledgeBaseTemplateUriResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-10-19
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAssistant operation.
     * @callback module:api/DefaultApi~createAssistantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAssistantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon Connect Wisdom assistant.
     * @param {module:model/CreateAssistantRequest} createAssistantRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAssistantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAssistantResponse}
     */
    createAssistant(createAssistantRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAssistantRequest;
      // verify the required parameter 'createAssistantRequest' is set
      if (createAssistantRequest === undefined || createAssistantRequest === null) {
        throw new Error("Missing the required parameter 'createAssistantRequest' when calling createAssistant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAssistantResponse;
      return this.apiClient.callApi(
        '/assistants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssistantAssociation operation.
     * @callback module:api/DefaultApi~createAssistantAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAssistantAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an association between an Amazon Connect Wisdom assistant and another resource. Currently, the only supported association is with a knowledge base. An assistant can have only a single association.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {module:model/CreateAssistantAssociationRequest} createAssistantAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAssistantAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAssistantAssociationResponse}
     */
    createAssistantAssociation(assistantId, createAssistantAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAssistantAssociationRequest;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling createAssistantAssociation");
      }
      // verify the required parameter 'createAssistantAssociationRequest' is set
      if (createAssistantAssociationRequest === undefined || createAssistantAssociationRequest === null) {
        throw new Error("Missing the required parameter 'createAssistantAssociationRequest' when calling createAssistantAssociation");
      }

      let pathParams = {
        'assistantId': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAssistantAssociationResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/associations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContent operation.
     * @callback module:api/DefaultApi~createContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates Wisdom content. Before to calling this API, use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a> to upload an asset.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {module:model/CreateContentRequest} createContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateContentResponse}
     */
    createContent(knowledgeBaseId, createContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createContentRequest;
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling createContent");
      }
      // verify the required parameter 'createContentRequest' is set
      if (createContentRequest === undefined || createContentRequest === null) {
        throw new Error("Missing the required parameter 'createContentRequest' when calling createContent");
      }

      let pathParams = {
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateContentResponse;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/contents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createKnowledgeBase operation.
     * @callback module:api/DefaultApi~createKnowledgeBaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateKnowledgeBaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a knowledge base.</p> <note> <p>When using this API, you cannot reuse <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html\">Amazon AppIntegrations</a> DataIntegrations with external knowledge bases such as Salesforce and ServiceNow. If you do, you'll get an <code>InvalidRequestException</code> error. </p> <p>For example, you're programmatically managing your external knowledge base, and you want to add or remove one of the fields that is being ingested from Salesforce. Do the following:</p> <ol> <li> <p>Call <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_DeleteKnowledgeBase.html\">DeleteKnowledgeBase</a>.</p> </li> <li> <p>Call <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html\">DeleteDataIntegration</a>.</p> </li> <li> <p>Call <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html\">CreateDataIntegration</a> to recreate the DataIntegration or a create different one.</p> </li> <li> <p>Call CreateKnowledgeBase.</p> </li> </ol> </note>
     * @param {module:model/CreateKnowledgeBaseRequest} createKnowledgeBaseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createKnowledgeBaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateKnowledgeBaseResponse}
     */
    createKnowledgeBase(createKnowledgeBaseRequest, opts, callback) {
      opts = opts || {};
      let postBody = createKnowledgeBaseRequest;
      // verify the required parameter 'createKnowledgeBaseRequest' is set
      if (createKnowledgeBaseRequest === undefined || createKnowledgeBaseRequest === null) {
        throw new Error("Missing the required parameter 'createKnowledgeBaseRequest' when calling createKnowledgeBase");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateKnowledgeBaseResponse;
      return this.apiClient.callApi(
        '/knowledgeBases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSession operation.
     * @callback module:api/DefaultApi~createSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a session. A session is a contextual container used for generating recommendations. Amazon Connect creates a new Wisdom session for each contact on which Wisdom is enabled.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {module:model/CreateSessionRequest} createSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSessionResponse}
     */
    createSession(assistantId, createSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSessionRequest;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling createSession");
      }
      // verify the required parameter 'createSessionRequest' is set
      if (createSessionRequest === undefined || createSessionRequest === null) {
        throw new Error("Missing the required parameter 'createSessionRequest' when calling createSession");
      }

      let pathParams = {
        'assistantId': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSessionResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssistant operation.
     * @callback module:api/DefaultApi~deleteAssistantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an assistant.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssistantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAssistant(assistantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling deleteAssistant");
      }

      let pathParams = {
        'assistantId': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assistants/{assistantId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssistantAssociation operation.
     * @callback module:api/DefaultApi~deleteAssistantAssociationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an assistant association.
     * @param {String} assistantAssociationId The identifier of the assistant association. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssistantAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAssistantAssociation(assistantAssociationId, assistantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantAssociationId' is set
      if (assistantAssociationId === undefined || assistantAssociationId === null) {
        throw new Error("Missing the required parameter 'assistantAssociationId' when calling deleteAssistantAssociation");
      }
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling deleteAssistantAssociation");
      }

      let pathParams = {
        'assistantAssociationId': assistantAssociationId,
        'assistantId': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/associations/{assistantAssociationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContent operation.
     * @callback module:api/DefaultApi~deleteContentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the content.
     * @param {String} contentId The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteContent(contentId, knowledgeBaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling deleteContent");
      }
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling deleteContent");
      }

      let pathParams = {
        'contentId': contentId,
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/contents/{contentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteKnowledgeBase operation.
     * @callback module:api/DefaultApi~deleteKnowledgeBaseCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the knowledge base.</p> <note> <p>When you use this API to delete an external knowledge base such as Salesforce or ServiceNow, you must also delete the <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html\">Amazon AppIntegrations</a> DataIntegration. This is because you can't reuse the DataIntegration after it's been associated with an external knowledge base. However, you can delete and recreate it. See <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html\">DeleteDataIntegration</a> and <a href=\"https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html\">CreateDataIntegration</a> in the <i>Amazon AppIntegrations API Reference</i>.</p> </note>
     * @param {String} knowledgeBaseId The knowledge base to delete content from. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteKnowledgeBaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteKnowledgeBase(knowledgeBaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling deleteKnowledgeBase");
      }

      let pathParams = {
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssistant operation.
     * @callback module:api/DefaultApi~getAssistantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssistantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about an assistant.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAssistantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssistantResponse}
     */
    getAssistant(assistantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling getAssistant");
      }

      let pathParams = {
        'assistantId': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssistantResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssistantAssociation operation.
     * @callback module:api/DefaultApi~getAssistantAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssistantAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about an assistant association.
     * @param {String} assistantAssociationId The identifier of the assistant association. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAssistantAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssistantAssociationResponse}
     */
    getAssistantAssociation(assistantAssociationId, assistantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantAssociationId' is set
      if (assistantAssociationId === undefined || assistantAssociationId === null) {
        throw new Error("Missing the required parameter 'assistantAssociationId' when calling getAssistantAssociation");
      }
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling getAssistantAssociation");
      }

      let pathParams = {
        'assistantAssociationId': assistantAssociationId,
        'assistantId': assistantId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssistantAssociationResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/associations/{assistantAssociationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContent operation.
     * @callback module:api/DefaultApi~getContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves content, including a pre-signed URL to download the content.
     * @param {String} contentId The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContentResponse}
     */
    getContent(contentId, knowledgeBaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getContent");
      }
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling getContent");
      }

      let pathParams = {
        'contentId': contentId,
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetContentResponse;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/contents/{contentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentSummary operation.
     * @callback module:api/DefaultApi~getContentSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContentSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves summary information about the content.
     * @param {String} contentId The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContentSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContentSummaryResponse}
     */
    getContentSummary(contentId, knowledgeBaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getContentSummary");
      }
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling getContentSummary");
      }

      let pathParams = {
        'contentId': contentId,
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetContentSummaryResponse;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKnowledgeBase operation.
     * @callback module:api/DefaultApi~getKnowledgeBaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetKnowledgeBaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the knowledge base.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getKnowledgeBaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetKnowledgeBaseResponse}
     */
    getKnowledgeBase(knowledgeBaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling getKnowledgeBase");
      }

      let pathParams = {
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetKnowledgeBaseResponse;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendations operation.
     * @callback module:api/DefaultApi~getRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves recommendations for the specified session. To avoid retrieving the same recommendations in subsequent calls, use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_NotifyRecommendationsReceived.html\">NotifyRecommendationsReceived</a>. This API supports long-polling behavior with the <code>waitTimeSeconds</code> parameter. Short poll is the default behavior and only returns recommendations already available. To perform a manual query against an assistant, use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_QueryAssistant.html\">QueryAssistant</a>.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {String} sessionId The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {Number} [waitTimeSeconds] The duration (in seconds) for which the call waits for a recommendation to be made available before returning. If a recommendation is available, the call returns sooner than <code>WaitTimeSeconds</code>. If no messages are available and the wait time expires, the call returns successfully with an empty list.
     * @param {module:api/DefaultApi~getRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecommendationsResponse}
     */
    getRecommendations(assistantId, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling getRecommendations");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getRecommendations");
      }

      let pathParams = {
        'assistantId': assistantId,
        'sessionId': sessionId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'waitTimeSeconds': opts['waitTimeSeconds']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecommendationsResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/sessions/{sessionId}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSession operation.
     * @callback module:api/DefaultApi~getSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information for a specified session.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {String} sessionId The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSessionResponse}
     */
    getSession(assistantId, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling getSession");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getSession");
      }

      let pathParams = {
        'assistantId': assistantId,
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSessionResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/sessions/{sessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssistantAssociations operation.
     * @callback module:api/DefaultApi~listAssistantAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssistantAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information about assistant associations.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {module:api/DefaultApi~listAssistantAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssistantAssociationsResponse}
     */
    listAssistantAssociations(assistantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling listAssistantAssociations");
      }

      let pathParams = {
        'assistantId': assistantId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssistantAssociationsResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/associations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssistants operation.
     * @callback module:api/DefaultApi~listAssistantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssistantsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information about assistants.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {module:api/DefaultApi~listAssistantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssistantsResponse}
     */
    listAssistants(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssistantsResponse;
      return this.apiClient.callApi(
        '/assistants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContents operation.
     * @callback module:api/DefaultApi~listContentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the content.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {module:api/DefaultApi~listContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContentsResponse}
     */
    listContents(knowledgeBaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling listContents");
      }

      let pathParams = {
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContentsResponse;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/contents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listKnowledgeBases operation.
     * @callback module:api/DefaultApi~listKnowledgeBasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListKnowledgeBasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the knowledge bases.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {module:api/DefaultApi~listKnowledgeBasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListKnowledgeBasesResponse}
     */
    listKnowledgeBases(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListKnowledgeBasesResponse;
      return this.apiClient.callApi(
        '/knowledgeBases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags for the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyRecommendationsReceived operation.
     * @callback module:api/DefaultApi~notifyRecommendationsReceivedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotifyRecommendationsReceivedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified recommendations from the specified assistant's queue of newly available recommendations. You can use this API in conjunction with <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html\">GetRecommendations</a> and a <code>waitTimeSeconds</code> input for long-polling behavior and avoiding duplicate recommendations.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {String} sessionId The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {module:model/NotifyRecommendationsReceivedRequest} notifyRecommendationsReceivedRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~notifyRecommendationsReceivedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotifyRecommendationsReceivedResponse}
     */
    notifyRecommendationsReceived(assistantId, sessionId, notifyRecommendationsReceivedRequest, opts, callback) {
      opts = opts || {};
      let postBody = notifyRecommendationsReceivedRequest;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling notifyRecommendationsReceived");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling notifyRecommendationsReceived");
      }
      // verify the required parameter 'notifyRecommendationsReceivedRequest' is set
      if (notifyRecommendationsReceivedRequest === undefined || notifyRecommendationsReceivedRequest === null) {
        throw new Error("Missing the required parameter 'notifyRecommendationsReceivedRequest' when calling notifyRecommendationsReceived");
      }

      let pathParams = {
        'assistantId': assistantId,
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotifyRecommendationsReceivedResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/sessions/{sessionId}/recommendations/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryAssistant operation.
     * @callback module:api/DefaultApi~queryAssistantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryAssistantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a manual search against the specified assistant. To retrieve recommendations for an assistant, use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html\">GetRecommendations</a>. 
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {module:model/QueryAssistantRequest} queryAssistantRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~queryAssistantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryAssistantResponse}
     */
    queryAssistant(assistantId, queryAssistantRequest, opts, callback) {
      opts = opts || {};
      let postBody = queryAssistantRequest;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling queryAssistant");
      }
      // verify the required parameter 'queryAssistantRequest' is set
      if (queryAssistantRequest === undefined || queryAssistantRequest === null) {
        throw new Error("Missing the required parameter 'queryAssistantRequest' when calling queryAssistant");
      }

      let pathParams = {
        'assistantId': assistantId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueryAssistantResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeKnowledgeBaseTemplateUri operation.
     * @callback module:api/DefaultApi~removeKnowledgeBaseTemplateUriCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a URI template from a knowledge base.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeKnowledgeBaseTemplateUriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeKnowledgeBaseTemplateUri(knowledgeBaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling removeKnowledgeBaseTemplateUri");
      }

      let pathParams = {
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/templateUri', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchContent operation.
     * @callback module:api/DefaultApi~searchContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for content in a specified knowledge base. Can be used to get a specific content resource by its name.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {module:model/SearchContentRequest} searchContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {module:api/DefaultApi~searchContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchContentResponse}
     */
    searchContent(knowledgeBaseId, searchContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchContentRequest;
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling searchContent");
      }
      // verify the required parameter 'searchContentRequest' is set
      if (searchContentRequest === undefined || searchContentRequest === null) {
        throw new Error("Missing the required parameter 'searchContentRequest' when calling searchContent");
      }

      let pathParams = {
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchContentResponse;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSessions operation.
     * @callback module:api/DefaultApi~searchSessionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchSessionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for sessions.
     * @param {String} assistantId The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {module:model/SearchContentRequest} searchContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {module:api/DefaultApi~searchSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchSessionsResponse}
     */
    searchSessions(assistantId, searchContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchContentRequest;
      // verify the required parameter 'assistantId' is set
      if (assistantId === undefined || assistantId === null) {
        throw new Error("Missing the required parameter 'assistantId' when calling searchSessions");
      }
      // verify the required parameter 'searchContentRequest' is set
      if (searchContentRequest === undefined || searchContentRequest === null) {
        throw new Error("Missing the required parameter 'searchContentRequest' when calling searchSessions");
      }

      let pathParams = {
        'assistantId': assistantId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchSessionsResponse;
      return this.apiClient.callApi(
        '/assistants/{assistantId}/searchSessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startContentUpload operation.
     * @callback module:api/DefaultApi~startContentUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartContentUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a URL to upload content to a knowledge base. To upload content, first make a PUT request to the returned URL with your file, making sure to include the required headers. Then use <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_CreateContent.html\">CreateContent</a> to finalize the content creation process or <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_UpdateContent.html\">UpdateContent</a> to modify an existing resource. You can only upload content to a knowledge base of type CUSTOM.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {module:model/StartContentUploadRequest} startContentUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startContentUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartContentUploadResponse}
     */
    startContentUpload(knowledgeBaseId, startContentUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = startContentUploadRequest;
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling startContentUpload");
      }
      // verify the required parameter 'startContentUploadRequest' is set
      if (startContentUploadRequest === undefined || startContentUploadRequest === null) {
        throw new Error("Missing the required parameter 'startContentUploadRequest' when calling startContentUpload");
      }

      let pathParams = {
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartContentUploadResponse;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified tags to the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified tags from the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Array.<String>} tagKeys The tag keys.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContent operation.
     * @callback module:api/DefaultApi~updateContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information about the content.
     * @param {String} contentId The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN
     * @param {module:model/UpdateContentRequest} updateContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateContentResponse}
     */
    updateContent(contentId, knowledgeBaseId, updateContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContentRequest;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling updateContent");
      }
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling updateContent");
      }
      // verify the required parameter 'updateContentRequest' is set
      if (updateContentRequest === undefined || updateContentRequest === null) {
        throw new Error("Missing the required parameter 'updateContentRequest' when calling updateContent");
      }

      let pathParams = {
        'contentId': contentId,
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateContentResponse;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/contents/{contentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKnowledgeBaseTemplateUri operation.
     * @callback module:api/DefaultApi~updateKnowledgeBaseTemplateUriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateKnowledgeBaseTemplateUriResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the template URI of a knowledge base. This is only supported for knowledge bases of type EXTERNAL. Include a single variable in <code>${variable}</code> format; this interpolated by Wisdom using ingested content. For example, if you ingest a Salesforce article, it has an <code>Id</code> value, and you can set the template URI to <code>https://myInstanceName.lightning.force.com/lightning/r/Knowledge__kav/_*${Id}*_/view</code>. 
     * @param {String} knowledgeBaseId The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.
     * @param {module:model/UpdateKnowledgeBaseTemplateUriRequest} updateKnowledgeBaseTemplateUriRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateKnowledgeBaseTemplateUriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateKnowledgeBaseTemplateUriResponse}
     */
    updateKnowledgeBaseTemplateUri(knowledgeBaseId, updateKnowledgeBaseTemplateUriRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateKnowledgeBaseTemplateUriRequest;
      // verify the required parameter 'knowledgeBaseId' is set
      if (knowledgeBaseId === undefined || knowledgeBaseId === null) {
        throw new Error("Missing the required parameter 'knowledgeBaseId' when calling updateKnowledgeBaseTemplateUri");
      }
      // verify the required parameter 'updateKnowledgeBaseTemplateUriRequest' is set
      if (updateKnowledgeBaseTemplateUriRequest === undefined || updateKnowledgeBaseTemplateUriRequest === null) {
        throw new Error("Missing the required parameter 'updateKnowledgeBaseTemplateUriRequest' when calling updateKnowledgeBaseTemplateUri");
      }

      let pathParams = {
        'knowledgeBaseId': knowledgeBaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateKnowledgeBaseTemplateUriResponse;
      return this.apiClient.callApi(
        '/knowledgeBases/{knowledgeBaseId}/templateUri', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
