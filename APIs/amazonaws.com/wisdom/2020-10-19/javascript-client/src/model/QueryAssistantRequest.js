/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueryAssistantRequest model module.
 * @module model/QueryAssistantRequest
 * @version 2020-10-19
 */
class QueryAssistantRequest {
    /**
     * Constructs a new <code>QueryAssistantRequest</code>.
     * @alias module:model/QueryAssistantRequest
     * @param queryText {String} The text to search for.
     */
    constructor(queryText) { 
        
        QueryAssistantRequest.initialize(this, queryText);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, queryText) { 
        obj['queryText'] = queryText;
    }

    /**
     * Constructs a <code>QueryAssistantRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryAssistantRequest} obj Optional instance to populate.
     * @return {module:model/QueryAssistantRequest} The populated <code>QueryAssistantRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryAssistantRequest();

            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('queryText')) {
                obj['queryText'] = ApiClient.convertToType(data['queryText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryAssistantRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryAssistantRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryAssistantRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }
        // ensure the json data is a string
        if (data['queryText'] && !(typeof data['queryText'] === 'string' || data['queryText'] instanceof String)) {
            throw new Error("Expected the field `queryText` to be a primitive type in the JSON string but got " + data['queryText']);
        }

        return true;
    }


}

QueryAssistantRequest.RequiredProperties = ["queryText"];

/**
 * The maximum number of results to return per page.
 * @member {Number} maxResults
 */
QueryAssistantRequest.prototype['maxResults'] = undefined;

/**
 * The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
 * @member {String} nextToken
 */
QueryAssistantRequest.prototype['nextToken'] = undefined;

/**
 * The text to search for.
 * @member {String} queryText
 */
QueryAssistantRequest.prototype['queryText'] = undefined;






export default QueryAssistantRequest;

