/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateContentRequest model module.
 * @module model/CreateContentRequest
 * @version 2020-10-19
 */
class CreateContentRequest {
    /**
     * Constructs a new <code>CreateContentRequest</code>.
     * @alias module:model/CreateContentRequest
     * @param name {String} The name of the content. Each piece of content in a knowledge base must have a unique name. You can retrieve a piece of content using only its knowledge base and its name with the <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_SearchContent.html\">SearchContent</a> API.
     * @param uploadId {String} A pointer to the uploaded asset. This value is returned by <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a>.
     */
    constructor(name, uploadId) { 
        
        CreateContentRequest.initialize(this, name, uploadId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, uploadId) { 
        obj['name'] = name;
        obj['uploadId'] = uploadId;
    }

    /**
     * Constructs a <code>CreateContentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateContentRequest} obj Optional instance to populate.
     * @return {module:model/CreateContentRequest} The populated <code>CreateContentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateContentRequest();

            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overrideLinkOutUri')) {
                obj['overrideLinkOutUri'] = ApiClient.convertToType(data['overrideLinkOutUri'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('uploadId')) {
                obj['uploadId'] = ApiClient.convertToType(data['uploadId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateContentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateContentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateContentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['overrideLinkOutUri'] && !(typeof data['overrideLinkOutUri'] === 'string' || data['overrideLinkOutUri'] instanceof String)) {
            throw new Error("Expected the field `overrideLinkOutUri` to be a primitive type in the JSON string but got " + data['overrideLinkOutUri']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uploadId'] && !(typeof data['uploadId'] === 'string' || data['uploadId'] instanceof String)) {
            throw new Error("Expected the field `uploadId` to be a primitive type in the JSON string but got " + data['uploadId']);
        }

        return true;
    }


}

CreateContentRequest.RequiredProperties = ["name", "uploadId"];

/**
 * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.
 * @member {String} clientToken
 */
CreateContentRequest.prototype['clientToken'] = undefined;

/**
 * A key/value map to store attributes without affecting tagging or recommendations. For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.
 * @member {Object.<String, String>} metadata
 */
CreateContentRequest.prototype['metadata'] = undefined;

/**
 * The name of the content. Each piece of content in a knowledge base must have a unique name. You can retrieve a piece of content using only its knowledge base and its name with the <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_SearchContent.html\">SearchContent</a> API.
 * @member {String} name
 */
CreateContentRequest.prototype['name'] = undefined;

/**
 * The URI you want to use for the article. If the knowledge base has a templateUri, setting this argument overrides it for this piece of content.
 * @member {String} overrideLinkOutUri
 */
CreateContentRequest.prototype['overrideLinkOutUri'] = undefined;

/**
 * The tags used to organize, track, or control access for this resource.
 * @member {Object.<String, String>} tags
 */
CreateContentRequest.prototype['tags'] = undefined;

/**
 * The title of the content. If not set, the title is equal to the name.
 * @member {String} title
 */
CreateContentRequest.prototype['title'] = undefined;

/**
 * A pointer to the uploaded asset. This value is returned by <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a>.
 * @member {String} uploadId
 */
CreateContentRequest.prototype['uploadId'] = undefined;






export default CreateContentRequest;

