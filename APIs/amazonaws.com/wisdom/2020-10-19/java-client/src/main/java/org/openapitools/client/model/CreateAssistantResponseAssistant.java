/*
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AssistantDataIntegrationConfiguration;
import org.openapitools.client.model.AssistantDataServerSideEncryptionConfiguration;
import org.openapitools.client.model.AssistantStatus;
import org.openapitools.client.model.AssistantType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAssistantResponseAssistant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.807270-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAssistantResponseAssistant {
  public static final String SERIALIZED_NAME_ASSISTANT_ARN = "assistantArn";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_ARN)
  private String assistantArn;

  public static final String SERIALIZED_NAME_ASSISTANT_ID = "assistantId";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_ID)
  private String assistantId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INTEGRATION_CONFIGURATION = "integrationConfiguration";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_CONFIGURATION)
  private AssistantDataIntegrationConfiguration integrationConfiguration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_CONFIGURATION = "serverSideEncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_CONFIGURATION)
  private AssistantDataServerSideEncryptionConfiguration serverSideEncryptionConfiguration;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AssistantStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AssistantType type;

  public CreateAssistantResponseAssistant() {
  }

  public CreateAssistantResponseAssistant assistantArn(String assistantArn) {
    this.assistantArn = assistantArn;
    return this;
  }

  /**
   * Get assistantArn
   * @return assistantArn
   */
  @javax.annotation.Nonnull
  public String getAssistantArn() {
    return assistantArn;
  }

  public void setAssistantArn(String assistantArn) {
    this.assistantArn = assistantArn;
  }


  public CreateAssistantResponseAssistant assistantId(String assistantId) {
    this.assistantId = assistantId;
    return this;
  }

  /**
   * Get assistantId
   * @return assistantId
   */
  @javax.annotation.Nonnull
  public String getAssistantId() {
    return assistantId;
  }

  public void setAssistantId(String assistantId) {
    this.assistantId = assistantId;
  }


  public CreateAssistantResponseAssistant description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateAssistantResponseAssistant integrationConfiguration(AssistantDataIntegrationConfiguration integrationConfiguration) {
    this.integrationConfiguration = integrationConfiguration;
    return this;
  }

  /**
   * Get integrationConfiguration
   * @return integrationConfiguration
   */
  @javax.annotation.Nullable
  public AssistantDataIntegrationConfiguration getIntegrationConfiguration() {
    return integrationConfiguration;
  }

  public void setIntegrationConfiguration(AssistantDataIntegrationConfiguration integrationConfiguration) {
    this.integrationConfiguration = integrationConfiguration;
  }


  public CreateAssistantResponseAssistant name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateAssistantResponseAssistant serverSideEncryptionConfiguration(AssistantDataServerSideEncryptionConfiguration serverSideEncryptionConfiguration) {
    this.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration;
    return this;
  }

  /**
   * Get serverSideEncryptionConfiguration
   * @return serverSideEncryptionConfiguration
   */
  @javax.annotation.Nullable
  public AssistantDataServerSideEncryptionConfiguration getServerSideEncryptionConfiguration() {
    return serverSideEncryptionConfiguration;
  }

  public void setServerSideEncryptionConfiguration(AssistantDataServerSideEncryptionConfiguration serverSideEncryptionConfiguration) {
    this.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration;
  }


  public CreateAssistantResponseAssistant status(AssistantStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public AssistantStatus getStatus() {
    return status;
  }

  public void setStatus(AssistantStatus status) {
    this.status = status;
  }


  public CreateAssistantResponseAssistant tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateAssistantResponseAssistant type(AssistantType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public AssistantType getType() {
    return type;
  }

  public void setType(AssistantType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAssistantResponseAssistant createAssistantResponseAssistant = (CreateAssistantResponseAssistant) o;
    return Objects.equals(this.assistantArn, createAssistantResponseAssistant.assistantArn) &&
        Objects.equals(this.assistantId, createAssistantResponseAssistant.assistantId) &&
        Objects.equals(this.description, createAssistantResponseAssistant.description) &&
        Objects.equals(this.integrationConfiguration, createAssistantResponseAssistant.integrationConfiguration) &&
        Objects.equals(this.name, createAssistantResponseAssistant.name) &&
        Objects.equals(this.serverSideEncryptionConfiguration, createAssistantResponseAssistant.serverSideEncryptionConfiguration) &&
        Objects.equals(this.status, createAssistantResponseAssistant.status) &&
        Objects.equals(this.tags, createAssistantResponseAssistant.tags) &&
        Objects.equals(this.type, createAssistantResponseAssistant.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistantArn, assistantId, description, integrationConfiguration, name, serverSideEncryptionConfiguration, status, tags, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAssistantResponseAssistant {\n");
    sb.append("    assistantArn: ").append(toIndentedString(assistantArn)).append("\n");
    sb.append("    assistantId: ").append(toIndentedString(assistantId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    integrationConfiguration: ").append(toIndentedString(integrationConfiguration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serverSideEncryptionConfiguration: ").append(toIndentedString(serverSideEncryptionConfiguration)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assistantArn");
    openapiFields.add("assistantId");
    openapiFields.add("description");
    openapiFields.add("integrationConfiguration");
    openapiFields.add("name");
    openapiFields.add("serverSideEncryptionConfiguration");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assistantArn");
    openapiRequiredFields.add("assistantId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAssistantResponseAssistant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAssistantResponseAssistant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAssistantResponseAssistant is not found in the empty JSON string", CreateAssistantResponseAssistant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAssistantResponseAssistant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAssistantResponseAssistant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAssistantResponseAssistant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `assistantArn`
      String.validateJsonElement(jsonObj.get("assistantArn"));
      // validate the required field `assistantId`
      String.validateJsonElement(jsonObj.get("assistantId"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `integrationConfiguration`
      if (jsonObj.get("integrationConfiguration") != null && !jsonObj.get("integrationConfiguration").isJsonNull()) {
        AssistantDataIntegrationConfiguration.validateJsonElement(jsonObj.get("integrationConfiguration"));
      }
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `serverSideEncryptionConfiguration`
      if (jsonObj.get("serverSideEncryptionConfiguration") != null && !jsonObj.get("serverSideEncryptionConfiguration").isJsonNull()) {
        AssistantDataServerSideEncryptionConfiguration.validateJsonElement(jsonObj.get("serverSideEncryptionConfiguration"));
      }
      // validate the required field `status`
      AssistantStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the required field `type`
      AssistantType.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAssistantResponseAssistant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAssistantResponseAssistant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAssistantResponseAssistant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAssistantResponseAssistant.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAssistantResponseAssistant>() {
           @Override
           public void write(JsonWriter out, CreateAssistantResponseAssistant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAssistantResponseAssistant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAssistantResponseAssistant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAssistantResponseAssistant
   * @throws IOException if the JSON string is invalid with respect to CreateAssistantResponseAssistant
   */
  public static CreateAssistantResponseAssistant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAssistantResponseAssistant.class);
  }

  /**
   * Convert an instance of CreateAssistantResponseAssistant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

