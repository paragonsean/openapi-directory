/*
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateKnowledgeBaseRequestSourceConfigurationAppIntegrations;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * KnowledgeBaseDataSourceConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.807270-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KnowledgeBaseDataSourceConfiguration {
  public static final String SERIALIZED_NAME_APP_INTEGRATIONS = "appIntegrations";
  @SerializedName(SERIALIZED_NAME_APP_INTEGRATIONS)
  private CreateKnowledgeBaseRequestSourceConfigurationAppIntegrations appIntegrations;

  public KnowledgeBaseDataSourceConfiguration() {
  }

  public KnowledgeBaseDataSourceConfiguration appIntegrations(CreateKnowledgeBaseRequestSourceConfigurationAppIntegrations appIntegrations) {
    this.appIntegrations = appIntegrations;
    return this;
  }

  /**
   * Get appIntegrations
   * @return appIntegrations
   */
  @javax.annotation.Nullable
  public CreateKnowledgeBaseRequestSourceConfigurationAppIntegrations getAppIntegrations() {
    return appIntegrations;
  }

  public void setAppIntegrations(CreateKnowledgeBaseRequestSourceConfigurationAppIntegrations appIntegrations) {
    this.appIntegrations = appIntegrations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KnowledgeBaseDataSourceConfiguration knowledgeBaseDataSourceConfiguration = (KnowledgeBaseDataSourceConfiguration) o;
    return Objects.equals(this.appIntegrations, knowledgeBaseDataSourceConfiguration.appIntegrations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appIntegrations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KnowledgeBaseDataSourceConfiguration {\n");
    sb.append("    appIntegrations: ").append(toIndentedString(appIntegrations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appIntegrations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KnowledgeBaseDataSourceConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KnowledgeBaseDataSourceConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KnowledgeBaseDataSourceConfiguration is not found in the empty JSON string", KnowledgeBaseDataSourceConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KnowledgeBaseDataSourceConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KnowledgeBaseDataSourceConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appIntegrations`
      if (jsonObj.get("appIntegrations") != null && !jsonObj.get("appIntegrations").isJsonNull()) {
        CreateKnowledgeBaseRequestSourceConfigurationAppIntegrations.validateJsonElement(jsonObj.get("appIntegrations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KnowledgeBaseDataSourceConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KnowledgeBaseDataSourceConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KnowledgeBaseDataSourceConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KnowledgeBaseDataSourceConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<KnowledgeBaseDataSourceConfiguration>() {
           @Override
           public void write(JsonWriter out, KnowledgeBaseDataSourceConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KnowledgeBaseDataSourceConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KnowledgeBaseDataSourceConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KnowledgeBaseDataSourceConfiguration
   * @throws IOException if the JSON string is invalid with respect to KnowledgeBaseDataSourceConfiguration
   */
  public static KnowledgeBaseDataSourceConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KnowledgeBaseDataSourceConfiguration.class);
  }

  /**
   * Convert an instance of KnowledgeBaseDataSourceConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

