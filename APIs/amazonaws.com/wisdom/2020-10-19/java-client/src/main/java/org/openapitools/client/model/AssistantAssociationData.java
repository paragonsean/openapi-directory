/*
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AssistantAssociationDataAssociationData;
import org.openapitools.client.model.AssociationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the assistant association.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.807270-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssistantAssociationData {
  public static final String SERIALIZED_NAME_ASSISTANT_ARN = "assistantArn";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_ARN)
  private String assistantArn;

  public static final String SERIALIZED_NAME_ASSISTANT_ASSOCIATION_ARN = "assistantAssociationArn";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_ASSOCIATION_ARN)
  private String assistantAssociationArn;

  public static final String SERIALIZED_NAME_ASSISTANT_ASSOCIATION_ID = "assistantAssociationId";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_ASSOCIATION_ID)
  private String assistantAssociationId;

  public static final String SERIALIZED_NAME_ASSISTANT_ID = "assistantId";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_ID)
  private String assistantId;

  public static final String SERIALIZED_NAME_ASSOCIATION_DATA = "associationData";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_DATA)
  private AssistantAssociationDataAssociationData associationData;

  public static final String SERIALIZED_NAME_ASSOCIATION_TYPE = "associationType";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_TYPE)
  private AssociationType associationType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public AssistantAssociationData() {
  }

  public AssistantAssociationData assistantArn(String assistantArn) {
    this.assistantArn = assistantArn;
    return this;
  }

  /**
   * Get assistantArn
   * @return assistantArn
   */
  @javax.annotation.Nonnull
  public String getAssistantArn() {
    return assistantArn;
  }

  public void setAssistantArn(String assistantArn) {
    this.assistantArn = assistantArn;
  }


  public AssistantAssociationData assistantAssociationArn(String assistantAssociationArn) {
    this.assistantAssociationArn = assistantAssociationArn;
    return this;
  }

  /**
   * Get assistantAssociationArn
   * @return assistantAssociationArn
   */
  @javax.annotation.Nonnull
  public String getAssistantAssociationArn() {
    return assistantAssociationArn;
  }

  public void setAssistantAssociationArn(String assistantAssociationArn) {
    this.assistantAssociationArn = assistantAssociationArn;
  }


  public AssistantAssociationData assistantAssociationId(String assistantAssociationId) {
    this.assistantAssociationId = assistantAssociationId;
    return this;
  }

  /**
   * Get assistantAssociationId
   * @return assistantAssociationId
   */
  @javax.annotation.Nonnull
  public String getAssistantAssociationId() {
    return assistantAssociationId;
  }

  public void setAssistantAssociationId(String assistantAssociationId) {
    this.assistantAssociationId = assistantAssociationId;
  }


  public AssistantAssociationData assistantId(String assistantId) {
    this.assistantId = assistantId;
    return this;
  }

  /**
   * Get assistantId
   * @return assistantId
   */
  @javax.annotation.Nonnull
  public String getAssistantId() {
    return assistantId;
  }

  public void setAssistantId(String assistantId) {
    this.assistantId = assistantId;
  }


  public AssistantAssociationData associationData(AssistantAssociationDataAssociationData associationData) {
    this.associationData = associationData;
    return this;
  }

  /**
   * Get associationData
   * @return associationData
   */
  @javax.annotation.Nonnull
  public AssistantAssociationDataAssociationData getAssociationData() {
    return associationData;
  }

  public void setAssociationData(AssistantAssociationDataAssociationData associationData) {
    this.associationData = associationData;
  }


  public AssistantAssociationData associationType(AssociationType associationType) {
    this.associationType = associationType;
    return this;
  }

  /**
   * Get associationType
   * @return associationType
   */
  @javax.annotation.Nonnull
  public AssociationType getAssociationType() {
    return associationType;
  }

  public void setAssociationType(AssociationType associationType) {
    this.associationType = associationType;
  }


  public AssistantAssociationData tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssistantAssociationData assistantAssociationData = (AssistantAssociationData) o;
    return Objects.equals(this.assistantArn, assistantAssociationData.assistantArn) &&
        Objects.equals(this.assistantAssociationArn, assistantAssociationData.assistantAssociationArn) &&
        Objects.equals(this.assistantAssociationId, assistantAssociationData.assistantAssociationId) &&
        Objects.equals(this.assistantId, assistantAssociationData.assistantId) &&
        Objects.equals(this.associationData, assistantAssociationData.associationData) &&
        Objects.equals(this.associationType, assistantAssociationData.associationType) &&
        Objects.equals(this.tags, assistantAssociationData.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistantArn, assistantAssociationArn, assistantAssociationId, assistantId, associationData, associationType, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssistantAssociationData {\n");
    sb.append("    assistantArn: ").append(toIndentedString(assistantArn)).append("\n");
    sb.append("    assistantAssociationArn: ").append(toIndentedString(assistantAssociationArn)).append("\n");
    sb.append("    assistantAssociationId: ").append(toIndentedString(assistantAssociationId)).append("\n");
    sb.append("    assistantId: ").append(toIndentedString(assistantId)).append("\n");
    sb.append("    associationData: ").append(toIndentedString(associationData)).append("\n");
    sb.append("    associationType: ").append(toIndentedString(associationType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assistantArn");
    openapiFields.add("assistantAssociationArn");
    openapiFields.add("assistantAssociationId");
    openapiFields.add("assistantId");
    openapiFields.add("associationData");
    openapiFields.add("associationType");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assistantArn");
    openapiRequiredFields.add("assistantAssociationArn");
    openapiRequiredFields.add("assistantAssociationId");
    openapiRequiredFields.add("assistantId");
    openapiRequiredFields.add("associationData");
    openapiRequiredFields.add("associationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssistantAssociationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssistantAssociationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssistantAssociationData is not found in the empty JSON string", AssistantAssociationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssistantAssociationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssistantAssociationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssistantAssociationData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `assistantArn`
      String.validateJsonElement(jsonObj.get("assistantArn"));
      // validate the required field `assistantAssociationArn`
      String.validateJsonElement(jsonObj.get("assistantAssociationArn"));
      // validate the required field `assistantAssociationId`
      String.validateJsonElement(jsonObj.get("assistantAssociationId"));
      // validate the required field `assistantId`
      String.validateJsonElement(jsonObj.get("assistantId"));
      // validate the required field `associationData`
      AssistantAssociationDataAssociationData.validateJsonElement(jsonObj.get("associationData"));
      // validate the required field `associationType`
      AssociationType.validateJsonElement(jsonObj.get("associationType"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssistantAssociationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssistantAssociationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssistantAssociationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssistantAssociationData.class));

       return (TypeAdapter<T>) new TypeAdapter<AssistantAssociationData>() {
           @Override
           public void write(JsonWriter out, AssistantAssociationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssistantAssociationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssistantAssociationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssistantAssociationData
   * @throws IOException if the JSON string is invalid with respect to AssistantAssociationData
   */
  public static AssistantAssociationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssistantAssociationData.class);
  }

  /**
   * Convert an instance of AssistantAssociationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

