/*
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ContentStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateContentResponseContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.807270-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateContentResponseContent {
  public static final String SERIALIZED_NAME_CONTENT_ARN = "contentArn";
  @SerializedName(SERIALIZED_NAME_CONTENT_ARN)
  private String contentArn;

  public static final String SERIALIZED_NAME_CONTENT_ID = "contentId";
  @SerializedName(SERIALIZED_NAME_CONTENT_ID)
  private String contentId;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_KNOWLEDGE_BASE_ARN = "knowledgeBaseArn";
  @SerializedName(SERIALIZED_NAME_KNOWLEDGE_BASE_ARN)
  private String knowledgeBaseArn;

  public static final String SERIALIZED_NAME_KNOWLEDGE_BASE_ID = "knowledgeBaseId";
  @SerializedName(SERIALIZED_NAME_KNOWLEDGE_BASE_ID)
  private String knowledgeBaseId;

  public static final String SERIALIZED_NAME_LINK_OUT_URI = "linkOutUri";
  @SerializedName(SERIALIZED_NAME_LINK_OUT_URI)
  private String linkOutUri;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ContentStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_EXPIRY = "urlExpiry";
  @SerializedName(SERIALIZED_NAME_URL_EXPIRY)
  private OffsetDateTime urlExpiry;

  public CreateContentResponseContent() {
  }

  public CreateContentResponseContent contentArn(String contentArn) {
    this.contentArn = contentArn;
    return this;
  }

  /**
   * Get contentArn
   * @return contentArn
   */
  @javax.annotation.Nonnull
  public String getContentArn() {
    return contentArn;
  }

  public void setContentArn(String contentArn) {
    this.contentArn = contentArn;
  }


  public CreateContentResponseContent contentId(String contentId) {
    this.contentId = contentId;
    return this;
  }

  /**
   * Get contentId
   * @return contentId
   */
  @javax.annotation.Nonnull
  public String getContentId() {
    return contentId;
  }

  public void setContentId(String contentId) {
    this.contentId = contentId;
  }


  public CreateContentResponseContent contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public CreateContentResponseContent knowledgeBaseArn(String knowledgeBaseArn) {
    this.knowledgeBaseArn = knowledgeBaseArn;
    return this;
  }

  /**
   * Get knowledgeBaseArn
   * @return knowledgeBaseArn
   */
  @javax.annotation.Nonnull
  public String getKnowledgeBaseArn() {
    return knowledgeBaseArn;
  }

  public void setKnowledgeBaseArn(String knowledgeBaseArn) {
    this.knowledgeBaseArn = knowledgeBaseArn;
  }


  public CreateContentResponseContent knowledgeBaseId(String knowledgeBaseId) {
    this.knowledgeBaseId = knowledgeBaseId;
    return this;
  }

  /**
   * Get knowledgeBaseId
   * @return knowledgeBaseId
   */
  @javax.annotation.Nonnull
  public String getKnowledgeBaseId() {
    return knowledgeBaseId;
  }

  public void setKnowledgeBaseId(String knowledgeBaseId) {
    this.knowledgeBaseId = knowledgeBaseId;
  }


  public CreateContentResponseContent linkOutUri(String linkOutUri) {
    this.linkOutUri = linkOutUri;
    return this;
  }

  /**
   * Get linkOutUri
   * @return linkOutUri
   */
  @javax.annotation.Nullable
  public String getLinkOutUri() {
    return linkOutUri;
  }

  public void setLinkOutUri(String linkOutUri) {
    this.linkOutUri = linkOutUri;
  }


  public CreateContentResponseContent metadata(Map metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public Map getMetadata() {
    return metadata;
  }

  public void setMetadata(Map metadata) {
    this.metadata = metadata;
  }


  public CreateContentResponseContent name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateContentResponseContent revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  /**
   * Get revisionId
   * @return revisionId
   */
  @javax.annotation.Nonnull
  public String getRevisionId() {
    return revisionId;
  }

  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }


  public CreateContentResponseContent status(ContentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ContentStatus getStatus() {
    return status;
  }

  public void setStatus(ContentStatus status) {
    this.status = status;
  }


  public CreateContentResponseContent tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateContentResponseContent title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CreateContentResponseContent url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CreateContentResponseContent urlExpiry(OffsetDateTime urlExpiry) {
    this.urlExpiry = urlExpiry;
    return this;
  }

  /**
   * Get urlExpiry
   * @return urlExpiry
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUrlExpiry() {
    return urlExpiry;
  }

  public void setUrlExpiry(OffsetDateTime urlExpiry) {
    this.urlExpiry = urlExpiry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateContentResponseContent createContentResponseContent = (CreateContentResponseContent) o;
    return Objects.equals(this.contentArn, createContentResponseContent.contentArn) &&
        Objects.equals(this.contentId, createContentResponseContent.contentId) &&
        Objects.equals(this.contentType, createContentResponseContent.contentType) &&
        Objects.equals(this.knowledgeBaseArn, createContentResponseContent.knowledgeBaseArn) &&
        Objects.equals(this.knowledgeBaseId, createContentResponseContent.knowledgeBaseId) &&
        Objects.equals(this.linkOutUri, createContentResponseContent.linkOutUri) &&
        Objects.equals(this.metadata, createContentResponseContent.metadata) &&
        Objects.equals(this.name, createContentResponseContent.name) &&
        Objects.equals(this.revisionId, createContentResponseContent.revisionId) &&
        Objects.equals(this.status, createContentResponseContent.status) &&
        Objects.equals(this.tags, createContentResponseContent.tags) &&
        Objects.equals(this.title, createContentResponseContent.title) &&
        Objects.equals(this.url, createContentResponseContent.url) &&
        Objects.equals(this.urlExpiry, createContentResponseContent.urlExpiry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentArn, contentId, contentType, knowledgeBaseArn, knowledgeBaseId, linkOutUri, metadata, name, revisionId, status, tags, title, url, urlExpiry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateContentResponseContent {\n");
    sb.append("    contentArn: ").append(toIndentedString(contentArn)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    knowledgeBaseArn: ").append(toIndentedString(knowledgeBaseArn)).append("\n");
    sb.append("    knowledgeBaseId: ").append(toIndentedString(knowledgeBaseId)).append("\n");
    sb.append("    linkOutUri: ").append(toIndentedString(linkOutUri)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlExpiry: ").append(toIndentedString(urlExpiry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentArn");
    openapiFields.add("contentId");
    openapiFields.add("contentType");
    openapiFields.add("knowledgeBaseArn");
    openapiFields.add("knowledgeBaseId");
    openapiFields.add("linkOutUri");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("revisionId");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("url");
    openapiFields.add("urlExpiry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contentArn");
    openapiRequiredFields.add("contentId");
    openapiRequiredFields.add("contentType");
    openapiRequiredFields.add("knowledgeBaseArn");
    openapiRequiredFields.add("knowledgeBaseId");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("revisionId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("urlExpiry");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateContentResponseContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateContentResponseContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateContentResponseContent is not found in the empty JSON string", CreateContentResponseContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateContentResponseContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateContentResponseContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateContentResponseContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `contentArn`
      String.validateJsonElement(jsonObj.get("contentArn"));
      // validate the required field `contentId`
      String.validateJsonElement(jsonObj.get("contentId"));
      // validate the required field `contentType`
      String.validateJsonElement(jsonObj.get("contentType"));
      // validate the required field `knowledgeBaseArn`
      String.validateJsonElement(jsonObj.get("knowledgeBaseArn"));
      // validate the required field `knowledgeBaseId`
      String.validateJsonElement(jsonObj.get("knowledgeBaseId"));
      // validate the optional field `linkOutUri`
      if (jsonObj.get("linkOutUri") != null && !jsonObj.get("linkOutUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("linkOutUri"));
      }
      // validate the required field `metadata`
      Map.validateJsonElement(jsonObj.get("metadata"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `revisionId`
      String.validateJsonElement(jsonObj.get("revisionId"));
      // validate the required field `status`
      ContentStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the required field `title`
      String.validateJsonElement(jsonObj.get("title"));
      // validate the required field `url`
      String.validateJsonElement(jsonObj.get("url"));
      // validate the required field `urlExpiry`
      OffsetDateTime.validateJsonElement(jsonObj.get("urlExpiry"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateContentResponseContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateContentResponseContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateContentResponseContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateContentResponseContent.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateContentResponseContent>() {
           @Override
           public void write(JsonWriter out, CreateContentResponseContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateContentResponseContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateContentResponseContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateContentResponseContent
   * @throws IOException if the JSON string is invalid with respect to CreateContentResponseContent
   */
  public static CreateContentResponseContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateContentResponseContent.class);
  }

  /**
   * Convert an instance of CreateContentResponseContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

