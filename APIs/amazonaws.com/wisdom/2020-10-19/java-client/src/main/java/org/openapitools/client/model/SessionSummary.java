/*
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary information about the session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.807270-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SessionSummary {
  public static final String SERIALIZED_NAME_ASSISTANT_ARN = "assistantArn";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_ARN)
  private String assistantArn;

  public static final String SERIALIZED_NAME_ASSISTANT_ID = "assistantId";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_ID)
  private String assistantId;

  public static final String SERIALIZED_NAME_SESSION_ARN = "sessionArn";
  @SerializedName(SERIALIZED_NAME_SESSION_ARN)
  private String sessionArn;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public SessionSummary() {
  }

  public SessionSummary assistantArn(String assistantArn) {
    this.assistantArn = assistantArn;
    return this;
  }

  /**
   * Get assistantArn
   * @return assistantArn
   */
  @javax.annotation.Nonnull
  public String getAssistantArn() {
    return assistantArn;
  }

  public void setAssistantArn(String assistantArn) {
    this.assistantArn = assistantArn;
  }


  public SessionSummary assistantId(String assistantId) {
    this.assistantId = assistantId;
    return this;
  }

  /**
   * Get assistantId
   * @return assistantId
   */
  @javax.annotation.Nonnull
  public String getAssistantId() {
    return assistantId;
  }

  public void setAssistantId(String assistantId) {
    this.assistantId = assistantId;
  }


  public SessionSummary sessionArn(String sessionArn) {
    this.sessionArn = sessionArn;
    return this;
  }

  /**
   * Get sessionArn
   * @return sessionArn
   */
  @javax.annotation.Nonnull
  public String getSessionArn() {
    return sessionArn;
  }

  public void setSessionArn(String sessionArn) {
    this.sessionArn = sessionArn;
  }


  public SessionSummary sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nonnull
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionSummary sessionSummary = (SessionSummary) o;
    return Objects.equals(this.assistantArn, sessionSummary.assistantArn) &&
        Objects.equals(this.assistantId, sessionSummary.assistantId) &&
        Objects.equals(this.sessionArn, sessionSummary.sessionArn) &&
        Objects.equals(this.sessionId, sessionSummary.sessionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistantArn, assistantId, sessionArn, sessionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionSummary {\n");
    sb.append("    assistantArn: ").append(toIndentedString(assistantArn)).append("\n");
    sb.append("    assistantId: ").append(toIndentedString(assistantId)).append("\n");
    sb.append("    sessionArn: ").append(toIndentedString(sessionArn)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assistantArn");
    openapiFields.add("assistantId");
    openapiFields.add("sessionArn");
    openapiFields.add("sessionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assistantArn");
    openapiRequiredFields.add("assistantId");
    openapiRequiredFields.add("sessionArn");
    openapiRequiredFields.add("sessionId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionSummary is not found in the empty JSON string", SessionSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SessionSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `assistantArn`
      String.validateJsonElement(jsonObj.get("assistantArn"));
      // validate the required field `assistantId`
      String.validateJsonElement(jsonObj.get("assistantId"));
      // validate the required field `sessionArn`
      String.validateJsonElement(jsonObj.get("sessionArn"));
      // validate the required field `sessionId`
      String.validateJsonElement(jsonObj.get("sessionId"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionSummary>() {
           @Override
           public void write(JsonWriter out, SessionSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionSummary
   * @throws IOException if the JSON string is invalid with respect to SessionSummary
   */
  public static SessionSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionSummary.class);
  }

  /**
   * Convert an instance of SessionSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

