/*
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecommendationSourceType;
import org.openapitools.client.model.RecommendationTriggerData;
import org.openapitools.client.model.RecommendationTriggerType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A recommendation trigger provides context on the event that produced the referenced recommendations. Recommendations are only referenced in &lt;code&gt;recommendationIds&lt;/code&gt; by a single RecommendationTrigger.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.807270-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationTrigger {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private RecommendationTriggerData data;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RECOMMENDATION_IDS = "recommendationIds";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_IDS)
  private List recommendationIds;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private RecommendationSourceType source;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RecommendationTriggerType type;

  public RecommendationTrigger() {
  }

  public RecommendationTrigger data(RecommendationTriggerData data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public RecommendationTriggerData getData() {
    return data;
  }

  public void setData(RecommendationTriggerData data) {
    this.data = data;
  }


  public RecommendationTrigger id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RecommendationTrigger recommendationIds(List recommendationIds) {
    this.recommendationIds = recommendationIds;
    return this;
  }

  /**
   * Get recommendationIds
   * @return recommendationIds
   */
  @javax.annotation.Nonnull
  public List getRecommendationIds() {
    return recommendationIds;
  }

  public void setRecommendationIds(List recommendationIds) {
    this.recommendationIds = recommendationIds;
  }


  public RecommendationTrigger source(RecommendationSourceType source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public RecommendationSourceType getSource() {
    return source;
  }

  public void setSource(RecommendationSourceType source) {
    this.source = source;
  }


  public RecommendationTrigger type(RecommendationTriggerType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public RecommendationTriggerType getType() {
    return type;
  }

  public void setType(RecommendationTriggerType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationTrigger recommendationTrigger = (RecommendationTrigger) o;
    return Objects.equals(this.data, recommendationTrigger.data) &&
        Objects.equals(this.id, recommendationTrigger.id) &&
        Objects.equals(this.recommendationIds, recommendationTrigger.recommendationIds) &&
        Objects.equals(this.source, recommendationTrigger.source) &&
        Objects.equals(this.type, recommendationTrigger.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, id, recommendationIds, source, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationTrigger {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recommendationIds: ").append(toIndentedString(recommendationIds)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("id");
    openapiFields.add("recommendationIds");
    openapiFields.add("source");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("recommendationIds");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationTrigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationTrigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationTrigger is not found in the empty JSON string", RecommendationTrigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationTrigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationTrigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecommendationTrigger.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `data`
      RecommendationTriggerData.validateJsonElement(jsonObj.get("data"));
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `recommendationIds`
      List.validateJsonElement(jsonObj.get("recommendationIds"));
      // validate the required field `source`
      RecommendationSourceType.validateJsonElement(jsonObj.get("source"));
      // validate the required field `type`
      RecommendationTriggerType.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationTrigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationTrigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationTrigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationTrigger.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationTrigger>() {
           @Override
           public void write(JsonWriter out, RecommendationTrigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationTrigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationTrigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationTrigger
   * @throws IOException if the JSON string is invalid with respect to RecommendationTrigger
   */
  public static RecommendationTrigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationTrigger.class);
  }

  /**
   * Convert an instance of RecommendationTrigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

