/*
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartContentUploadResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.807270-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartContentUploadResponse {
  public static final String SERIALIZED_NAME_HEADERS_TO_INCLUDE = "headersToInclude";
  @SerializedName(SERIALIZED_NAME_HEADERS_TO_INCLUDE)
  private Map headersToInclude;

  public static final String SERIALIZED_NAME_UPLOAD_ID = "uploadId";
  @SerializedName(SERIALIZED_NAME_UPLOAD_ID)
  private String uploadId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_EXPIRY = "urlExpiry";
  @SerializedName(SERIALIZED_NAME_URL_EXPIRY)
  private OffsetDateTime urlExpiry;

  public StartContentUploadResponse() {
  }

  public StartContentUploadResponse headersToInclude(Map headersToInclude) {
    this.headersToInclude = headersToInclude;
    return this;
  }

  /**
   * Get headersToInclude
   * @return headersToInclude
   */
  @javax.annotation.Nonnull
  public Map getHeadersToInclude() {
    return headersToInclude;
  }

  public void setHeadersToInclude(Map headersToInclude) {
    this.headersToInclude = headersToInclude;
  }


  public StartContentUploadResponse uploadId(String uploadId) {
    this.uploadId = uploadId;
    return this;
  }

  /**
   * Get uploadId
   * @return uploadId
   */
  @javax.annotation.Nonnull
  public String getUploadId() {
    return uploadId;
  }

  public void setUploadId(String uploadId) {
    this.uploadId = uploadId;
  }


  public StartContentUploadResponse url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public StartContentUploadResponse urlExpiry(OffsetDateTime urlExpiry) {
    this.urlExpiry = urlExpiry;
    return this;
  }

  /**
   * Get urlExpiry
   * @return urlExpiry
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUrlExpiry() {
    return urlExpiry;
  }

  public void setUrlExpiry(OffsetDateTime urlExpiry) {
    this.urlExpiry = urlExpiry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartContentUploadResponse startContentUploadResponse = (StartContentUploadResponse) o;
    return Objects.equals(this.headersToInclude, startContentUploadResponse.headersToInclude) &&
        Objects.equals(this.uploadId, startContentUploadResponse.uploadId) &&
        Objects.equals(this.url, startContentUploadResponse.url) &&
        Objects.equals(this.urlExpiry, startContentUploadResponse.urlExpiry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headersToInclude, uploadId, url, urlExpiry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartContentUploadResponse {\n");
    sb.append("    headersToInclude: ").append(toIndentedString(headersToInclude)).append("\n");
    sb.append("    uploadId: ").append(toIndentedString(uploadId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlExpiry: ").append(toIndentedString(urlExpiry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("headersToInclude");
    openapiFields.add("uploadId");
    openapiFields.add("url");
    openapiFields.add("urlExpiry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("headersToInclude");
    openapiRequiredFields.add("uploadId");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("urlExpiry");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartContentUploadResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartContentUploadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartContentUploadResponse is not found in the empty JSON string", StartContentUploadResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartContentUploadResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartContentUploadResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartContentUploadResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `headersToInclude`
      Map.validateJsonElement(jsonObj.get("headersToInclude"));
      // validate the required field `uploadId`
      String.validateJsonElement(jsonObj.get("uploadId"));
      // validate the required field `url`
      String.validateJsonElement(jsonObj.get("url"));
      // validate the required field `urlExpiry`
      OffsetDateTime.validateJsonElement(jsonObj.get("urlExpiry"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartContentUploadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartContentUploadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartContentUploadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartContentUploadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StartContentUploadResponse>() {
           @Override
           public void write(JsonWriter out, StartContentUploadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartContentUploadResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartContentUploadResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartContentUploadResponse
   * @throws IOException if the JSON string is invalid with respect to StartContentUploadResponse
   */
  public static StartContentUploadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartContentUploadResponse.class);
  }

  /**
   * Convert an instance of StartContentUploadResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

