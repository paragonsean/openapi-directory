/*
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RecommendationDataDocument;
import org.openapitools.client.model.RecommendationType;
import org.openapitools.client.model.RelevanceLevel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the recommendation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.807270-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationData {
  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private RecommendationDataDocument document;

  public static final String SERIALIZED_NAME_RECOMMENDATION_ID = "recommendationId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ID)
  private String recommendationId;

  public static final String SERIALIZED_NAME_RELEVANCE_LEVEL = "relevanceLevel";
  @SerializedName(SERIALIZED_NAME_RELEVANCE_LEVEL)
  private RelevanceLevel relevanceLevel;

  public static final String SERIALIZED_NAME_RELEVANCE_SCORE = "relevanceScore";
  @SerializedName(SERIALIZED_NAME_RELEVANCE_SCORE)
  private Double relevanceScore;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RecommendationType type;

  public RecommendationData() {
  }

  public RecommendationData document(RecommendationDataDocument document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   */
  @javax.annotation.Nonnull
  public RecommendationDataDocument getDocument() {
    return document;
  }

  public void setDocument(RecommendationDataDocument document) {
    this.document = document;
  }


  public RecommendationData recommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  /**
   * Get recommendationId
   * @return recommendationId
   */
  @javax.annotation.Nonnull
  public String getRecommendationId() {
    return recommendationId;
  }

  public void setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
  }


  public RecommendationData relevanceLevel(RelevanceLevel relevanceLevel) {
    this.relevanceLevel = relevanceLevel;
    return this;
  }

  /**
   * Get relevanceLevel
   * @return relevanceLevel
   */
  @javax.annotation.Nullable
  public RelevanceLevel getRelevanceLevel() {
    return relevanceLevel;
  }

  public void setRelevanceLevel(RelevanceLevel relevanceLevel) {
    this.relevanceLevel = relevanceLevel;
  }


  public RecommendationData relevanceScore(Double relevanceScore) {
    this.relevanceScore = relevanceScore;
    return this;
  }

  /**
   * Get relevanceScore
   * @return relevanceScore
   */
  @javax.annotation.Nullable
  public Double getRelevanceScore() {
    return relevanceScore;
  }

  public void setRelevanceScore(Double relevanceScore) {
    this.relevanceScore = relevanceScore;
  }


  public RecommendationData type(RecommendationType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public RecommendationType getType() {
    return type;
  }

  public void setType(RecommendationType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationData recommendationData = (RecommendationData) o;
    return Objects.equals(this.document, recommendationData.document) &&
        Objects.equals(this.recommendationId, recommendationData.recommendationId) &&
        Objects.equals(this.relevanceLevel, recommendationData.relevanceLevel) &&
        Objects.equals(this.relevanceScore, recommendationData.relevanceScore) &&
        Objects.equals(this.type, recommendationData.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, recommendationId, relevanceLevel, relevanceScore, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationData {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    recommendationId: ").append(toIndentedString(recommendationId)).append("\n");
    sb.append("    relevanceLevel: ").append(toIndentedString(relevanceLevel)).append("\n");
    sb.append("    relevanceScore: ").append(toIndentedString(relevanceScore)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document");
    openapiFields.add("recommendationId");
    openapiFields.add("relevanceLevel");
    openapiFields.add("relevanceScore");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("document");
    openapiRequiredFields.add("recommendationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationData is not found in the empty JSON string", RecommendationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecommendationData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `document`
      RecommendationDataDocument.validateJsonElement(jsonObj.get("document"));
      // validate the required field `recommendationId`
      String.validateJsonElement(jsonObj.get("recommendationId"));
      // validate the optional field `relevanceLevel`
      if (jsonObj.get("relevanceLevel") != null && !jsonObj.get("relevanceLevel").isJsonNull()) {
        RelevanceLevel.validateJsonElement(jsonObj.get("relevanceLevel"));
      }
      // validate the optional field `relevanceScore`
      if (jsonObj.get("relevanceScore") != null && !jsonObj.get("relevanceScore").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("relevanceScore"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        RecommendationType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationData.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationData>() {
           @Override
           public void write(JsonWriter out, RecommendationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationData
   * @throws IOException if the JSON string is invalid with respect to RecommendationData
   */
  public static RecommendationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationData.class);
  }

  /**
   * Convert an instance of RecommendationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

