/*
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAssistantAssociationRequest;
import org.openapitools.client.model.CreateAssistantAssociationResponse;
import org.openapitools.client.model.CreateAssistantRequest;
import org.openapitools.client.model.CreateAssistantResponse;
import org.openapitools.client.model.CreateContentRequest;
import org.openapitools.client.model.CreateContentResponse;
import org.openapitools.client.model.CreateKnowledgeBaseRequest;
import org.openapitools.client.model.CreateKnowledgeBaseResponse;
import org.openapitools.client.model.CreateSessionRequest;
import org.openapitools.client.model.CreateSessionResponse;
import org.openapitools.client.model.GetAssistantAssociationResponse;
import org.openapitools.client.model.GetAssistantResponse;
import org.openapitools.client.model.GetContentResponse;
import org.openapitools.client.model.GetContentSummaryResponse;
import org.openapitools.client.model.GetKnowledgeBaseResponse;
import org.openapitools.client.model.GetRecommendationsResponse;
import org.openapitools.client.model.GetSessionResponse;
import org.openapitools.client.model.ListAssistantAssociationsResponse;
import org.openapitools.client.model.ListAssistantsResponse;
import org.openapitools.client.model.ListContentsResponse;
import org.openapitools.client.model.ListKnowledgeBasesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.NotifyRecommendationsReceivedRequest;
import org.openapitools.client.model.NotifyRecommendationsReceivedResponse;
import org.openapitools.client.model.QueryAssistantRequest;
import org.openapitools.client.model.QueryAssistantResponse;
import org.openapitools.client.model.SearchContentRequest;
import org.openapitools.client.model.SearchContentResponse;
import org.openapitools.client.model.SearchSessionsResponse;
import org.openapitools.client.model.StartContentUploadRequest;
import org.openapitools.client.model.StartContentUploadResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateContentRequest;
import org.openapitools.client.model.UpdateContentResponse;
import org.openapitools.client.model.UpdateKnowledgeBaseTemplateUriRequest;
import org.openapitools.client.model.UpdateKnowledgeBaseTemplateUriResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates an Amazon Connect Wisdom assistant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssistantTest() throws ApiException {
        CreateAssistantRequest createAssistantRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAssistantResponse response = api.createAssistant(createAssistantRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an association between an Amazon Connect Wisdom assistant and another resource. Currently, the only supported association is with a knowledge base. An assistant can have only a single association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssistantAssociationTest() throws ApiException {
        String assistantId = null;
        CreateAssistantAssociationRequest createAssistantAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAssistantAssociationResponse response = api.createAssistantAssociation(assistantId, createAssistantAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates Wisdom content. Before to calling this API, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\&quot;&gt;StartContentUpload&lt;/a&gt; to upload an asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContentTest() throws ApiException {
        String knowledgeBaseId = null;
        CreateContentRequest createContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContentResponse response = api.createContent(knowledgeBaseId, createContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a knowledge base.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When using this API, you cannot reuse &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html\&quot;&gt;Amazon AppIntegrations&lt;/a&gt; DataIntegrations with external knowledge bases such as Salesforce and ServiceNow. If you do, you&#39;ll get an &lt;code&gt;InvalidRequestException&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;For example, you&#39;re programmatically managing your external knowledge base, and you want to add or remove one of the fields that is being ingested from Salesforce. Do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_DeleteKnowledgeBase.html\&quot;&gt;DeleteKnowledgeBase&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html\&quot;&gt;DeleteDataIntegration&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html\&quot;&gt;CreateDataIntegration&lt;/a&gt; to recreate the DataIntegration or a create different one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call CreateKnowledgeBase.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createKnowledgeBaseTest() throws ApiException {
        CreateKnowledgeBaseRequest createKnowledgeBaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateKnowledgeBaseResponse response = api.createKnowledgeBase(createKnowledgeBaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a session. A session is a contextual container used for generating recommendations. Amazon Connect creates a new Wisdom session for each contact on which Wisdom is enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSessionTest() throws ApiException {
        String assistantId = null;
        CreateSessionRequest createSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSessionResponse response = api.createSession(assistantId, createSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an assistant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssistantTest() throws ApiException {
        String assistantId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAssistant(assistantId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an assistant association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssistantAssociationTest() throws ApiException {
        String assistantAssociationId = null;
        String assistantId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAssistantAssociation(assistantAssociationId, assistantId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContentTest() throws ApiException {
        String contentId = null;
        String knowledgeBaseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContent(contentId, knowledgeBaseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the knowledge base.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you use this API to delete an external knowledge base such as Salesforce or ServiceNow, you must also delete the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html\&quot;&gt;Amazon AppIntegrations&lt;/a&gt; DataIntegration. This is because you can&#39;t reuse the DataIntegration after it&#39;s been associated with an external knowledge base. However, you can delete and recreate it. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html\&quot;&gt;DeleteDataIntegration&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html\&quot;&gt;CreateDataIntegration&lt;/a&gt; in the &lt;i&gt;Amazon AppIntegrations API Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKnowledgeBaseTest() throws ApiException {
        String knowledgeBaseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteKnowledgeBase(knowledgeBaseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an assistant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssistantTest() throws ApiException {
        String assistantId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAssistantResponse response = api.getAssistant(assistantId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an assistant association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssistantAssociationTest() throws ApiException {
        String assistantAssociationId = null;
        String assistantId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAssistantAssociationResponse response = api.getAssistantAssociation(assistantAssociationId, assistantId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves content, including a pre-signed URL to download the content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentTest() throws ApiException {
        String contentId = null;
        String knowledgeBaseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContentResponse response = api.getContent(contentId, knowledgeBaseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves summary information about the content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentSummaryTest() throws ApiException {
        String contentId = null;
        String knowledgeBaseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContentSummaryResponse response = api.getContentSummary(contentId, knowledgeBaseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the knowledge base.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKnowledgeBaseTest() throws ApiException {
        String knowledgeBaseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetKnowledgeBaseResponse response = api.getKnowledgeBase(knowledgeBaseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves recommendations for the specified session. To avoid retrieving the same recommendations in subsequent calls, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_NotifyRecommendationsReceived.html\&quot;&gt;NotifyRecommendationsReceived&lt;/a&gt;. This API supports long-polling behavior with the &lt;code&gt;waitTimeSeconds&lt;/code&gt; parameter. Short poll is the default behavior and only returns recommendations already available. To perform a manual query against an assistant, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_QueryAssistant.html\&quot;&gt;QueryAssistant&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommendationsTest() throws ApiException {
        String assistantId = null;
        String sessionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        Integer waitTimeSeconds = null;
        GetRecommendationsResponse response = api.getRecommendations(assistantId, sessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, waitTimeSeconds);
        // TODO: test validations
    }

    /**
     * Retrieves information for a specified session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionTest() throws ApiException {
        String assistantId = null;
        String sessionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSessionResponse response = api.getSession(assistantId, sessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists information about assistant associations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssistantAssociationsTest() throws ApiException {
        String assistantId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListAssistantAssociationsResponse response = api.listAssistantAssociations(assistantId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists information about assistants.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssistantsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListAssistantsResponse response = api.listAssistants(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContentsTest() throws ApiException {
        String knowledgeBaseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListContentsResponse response = api.listContents(knowledgeBaseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the knowledge bases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listKnowledgeBasesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListKnowledgeBasesResponse response = api.listKnowledgeBases(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified recommendations from the specified assistant&#39;s queue of newly available recommendations. You can use this API in conjunction with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html\&quot;&gt;GetRecommendations&lt;/a&gt; and a &lt;code&gt;waitTimeSeconds&lt;/code&gt; input for long-polling behavior and avoiding duplicate recommendations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notifyRecommendationsReceivedTest() throws ApiException {
        String assistantId = null;
        String sessionId = null;
        NotifyRecommendationsReceivedRequest notifyRecommendationsReceivedRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        NotifyRecommendationsReceivedResponse response = api.notifyRecommendationsReceived(assistantId, sessionId, notifyRecommendationsReceivedRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Performs a manual search against the specified assistant. To retrieve recommendations for an assistant, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html\&quot;&gt;GetRecommendations&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryAssistantTest() throws ApiException {
        String assistantId = null;
        QueryAssistantRequest queryAssistantRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        QueryAssistantResponse response = api.queryAssistant(assistantId, queryAssistantRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Removes a URI template from a knowledge base.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeKnowledgeBaseTemplateUriTest() throws ApiException {
        String knowledgeBaseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.removeKnowledgeBaseTemplateUri(knowledgeBaseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Searches for content in a specified knowledge base. Can be used to get a specific content resource by its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchContentTest() throws ApiException {
        String knowledgeBaseId = null;
        SearchContentRequest searchContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        SearchContentResponse response = api.searchContent(knowledgeBaseId, searchContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches for sessions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSessionsTest() throws ApiException {
        String assistantId = null;
        SearchContentRequest searchContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        SearchSessionsResponse response = api.searchSessions(assistantId, searchContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Get a URL to upload content to a knowledge base. To upload content, first make a PUT request to the returned URL with your file, making sure to include the required headers. Then use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_CreateContent.html\&quot;&gt;CreateContent&lt;/a&gt; to finalize the content creation process or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wisdom/latest/APIReference/API_UpdateContent.html\&quot;&gt;UpdateContent&lt;/a&gt; to modify an existing resource. You can only upload content to a knowledge base of type CUSTOM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startContentUploadTest() throws ApiException {
        String knowledgeBaseId = null;
        StartContentUploadRequest startContentUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartContentUploadResponse response = api.startContentUpload(knowledgeBaseId, startContentUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds the specified tags to the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified tags from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates information about the content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContentTest() throws ApiException {
        String contentId = null;
        String knowledgeBaseId = null;
        UpdateContentRequest updateContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateContentResponse response = api.updateContent(contentId, knowledgeBaseId, updateContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the template URI of a knowledge base. This is only supported for knowledge bases of type EXTERNAL. Include a single variable in &lt;code&gt;${variable}&lt;/code&gt; format; this interpolated by Wisdom using ingested content. For example, if you ingest a Salesforce article, it has an &lt;code&gt;Id&lt;/code&gt; value, and you can set the template URI to &lt;code&gt;https://myInstanceName.lightning.force.com/lightning/r/Knowledge__kav/_*${Id}*_/view&lt;/code&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateKnowledgeBaseTemplateUriTest() throws ApiException {
        String knowledgeBaseId = null;
        UpdateKnowledgeBaseTemplateUriRequest updateKnowledgeBaseTemplateUriRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateKnowledgeBaseTemplateUriResponse response = api.updateKnowledgeBaseTemplateUri(knowledgeBaseId, updateKnowledgeBaseTemplateUriRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
