/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResultData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResultData::OAIResultData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResultData::OAIResultData() {
    this->initializeModel();
}

OAIResultData::~OAIResultData() {}

void OAIResultData::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_relevance_score_isSet = false;
    m_relevance_score_isValid = false;

    m_result_id_isSet = false;
    m_result_id_isValid = false;
}

void OAIResultData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResultData::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_relevance_score_isValid = ::OpenAPI::fromJsonValue(m_relevance_score, json[QString("relevanceScore")]);
    m_relevance_score_isSet = !json[QString("relevanceScore")].isNull() && m_relevance_score_isValid;

    m_result_id_isValid = ::OpenAPI::fromJsonValue(m_result_id, json[QString("resultId")]);
    m_result_id_isSet = !json[QString("resultId")].isNull() && m_result_id_isValid;
}

QString OAIResultData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResultData::asJsonObject() const {
    QJsonObject obj;
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_relevance_score_isSet) {
        obj.insert(QString("relevanceScore"), ::OpenAPI::toJsonValue(m_relevance_score));
    }
    if (m_result_id_isSet) {
        obj.insert(QString("resultId"), ::OpenAPI::toJsonValue(m_result_id));
    }
    return obj;
}

OAIResultData_document OAIResultData::getDocument() const {
    return m_document;
}
void OAIResultData::setDocument(const OAIResultData_document &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIResultData::is_document_Set() const{
    return m_document_isSet;
}

bool OAIResultData::is_document_Valid() const{
    return m_document_isValid;
}

double OAIResultData::getRelevanceScore() const {
    return m_relevance_score;
}
void OAIResultData::setRelevanceScore(const double &relevance_score) {
    m_relevance_score = relevance_score;
    m_relevance_score_isSet = true;
}

bool OAIResultData::is_relevance_score_Set() const{
    return m_relevance_score_isSet;
}

bool OAIResultData::is_relevance_score_Valid() const{
    return m_relevance_score_isValid;
}

QString OAIResultData::getResultId() const {
    return m_result_id;
}
void OAIResultData::setResultId(const QString &result_id) {
    m_result_id = result_id;
    m_result_id_isSet = true;
}

bool OAIResultData::is_result_id_Set() const{
    return m_result_id_isSet;
}

bool OAIResultData::is_result_id_Valid() const{
    return m_result_id_isValid;
}

bool OAIResultData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResultData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && m_result_id_isValid && true;
}

} // namespace OpenAPI
