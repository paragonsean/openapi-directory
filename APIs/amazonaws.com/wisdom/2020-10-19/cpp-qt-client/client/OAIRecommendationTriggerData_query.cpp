/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationTriggerData_query.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationTriggerData_query::OAIRecommendationTriggerData_query(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationTriggerData_query::OAIRecommendationTriggerData_query() {
    this->initializeModel();
}

OAIRecommendationTriggerData_query::~OAIRecommendationTriggerData_query() {}

void OAIRecommendationTriggerData_query::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIRecommendationTriggerData_query::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationTriggerData_query::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIRecommendationTriggerData_query::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationTriggerData_query::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIRecommendationTriggerData_query::getText() const {
    return m_text;
}
void OAIRecommendationTriggerData_query::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIRecommendationTriggerData_query::is_text_Set() const{
    return m_text_isSet;
}

bool OAIRecommendationTriggerData_query::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIRecommendationTriggerData_query::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationTriggerData_query::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
