/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHighlight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHighlight::OAIHighlight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHighlight::OAIHighlight() {
    this->initializeModel();
}

OAIHighlight::~OAIHighlight() {}

void OAIHighlight::initializeModel() {

    m_begin_offset_inclusive_isSet = false;
    m_begin_offset_inclusive_isValid = false;

    m_end_offset_exclusive_isSet = false;
    m_end_offset_exclusive_isValid = false;
}

void OAIHighlight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHighlight::fromJsonObject(QJsonObject json) {

    m_begin_offset_inclusive_isValid = ::OpenAPI::fromJsonValue(m_begin_offset_inclusive, json[QString("beginOffsetInclusive")]);
    m_begin_offset_inclusive_isSet = !json[QString("beginOffsetInclusive")].isNull() && m_begin_offset_inclusive_isValid;

    m_end_offset_exclusive_isValid = ::OpenAPI::fromJsonValue(m_end_offset_exclusive, json[QString("endOffsetExclusive")]);
    m_end_offset_exclusive_isSet = !json[QString("endOffsetExclusive")].isNull() && m_end_offset_exclusive_isValid;
}

QString OAIHighlight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHighlight::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_offset_inclusive_isSet) {
        obj.insert(QString("beginOffsetInclusive"), ::OpenAPI::toJsonValue(m_begin_offset_inclusive));
    }
    if (m_end_offset_exclusive_isSet) {
        obj.insert(QString("endOffsetExclusive"), ::OpenAPI::toJsonValue(m_end_offset_exclusive));
    }
    return obj;
}

qint32 OAIHighlight::getBeginOffsetInclusive() const {
    return m_begin_offset_inclusive;
}
void OAIHighlight::setBeginOffsetInclusive(const qint32 &begin_offset_inclusive) {
    m_begin_offset_inclusive = begin_offset_inclusive;
    m_begin_offset_inclusive_isSet = true;
}

bool OAIHighlight::is_begin_offset_inclusive_Set() const{
    return m_begin_offset_inclusive_isSet;
}

bool OAIHighlight::is_begin_offset_inclusive_Valid() const{
    return m_begin_offset_inclusive_isValid;
}

qint32 OAIHighlight::getEndOffsetExclusive() const {
    return m_end_offset_exclusive;
}
void OAIHighlight::setEndOffsetExclusive(const qint32 &end_offset_exclusive) {
    m_end_offset_exclusive = end_offset_exclusive;
    m_end_offset_exclusive_isSet = true;
}

bool OAIHighlight::is_end_offset_exclusive_Set() const{
    return m_end_offset_exclusive_isSet;
}

bool OAIHighlight::is_end_offset_exclusive_Valid() const{
    return m_end_offset_exclusive_isValid;
}

bool OAIHighlight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_offset_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_offset_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHighlight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
