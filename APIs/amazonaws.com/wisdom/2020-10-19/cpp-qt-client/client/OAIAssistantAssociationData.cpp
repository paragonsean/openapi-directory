/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssistantAssociationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssistantAssociationData::OAIAssistantAssociationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssistantAssociationData::OAIAssistantAssociationData() {
    this->initializeModel();
}

OAIAssistantAssociationData::~OAIAssistantAssociationData() {}

void OAIAssistantAssociationData::initializeModel() {

    m_assistant_arn_isSet = false;
    m_assistant_arn_isValid = false;

    m_assistant_association_arn_isSet = false;
    m_assistant_association_arn_isValid = false;

    m_assistant_association_id_isSet = false;
    m_assistant_association_id_isValid = false;

    m_assistant_id_isSet = false;
    m_assistant_id_isValid = false;

    m_association_data_isSet = false;
    m_association_data_isValid = false;

    m_association_type_isSet = false;
    m_association_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIAssistantAssociationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssistantAssociationData::fromJsonObject(QJsonObject json) {

    m_assistant_arn_isValid = ::OpenAPI::fromJsonValue(m_assistant_arn, json[QString("assistantArn")]);
    m_assistant_arn_isSet = !json[QString("assistantArn")].isNull() && m_assistant_arn_isValid;

    m_assistant_association_arn_isValid = ::OpenAPI::fromJsonValue(m_assistant_association_arn, json[QString("assistantAssociationArn")]);
    m_assistant_association_arn_isSet = !json[QString("assistantAssociationArn")].isNull() && m_assistant_association_arn_isValid;

    m_assistant_association_id_isValid = ::OpenAPI::fromJsonValue(m_assistant_association_id, json[QString("assistantAssociationId")]);
    m_assistant_association_id_isSet = !json[QString("assistantAssociationId")].isNull() && m_assistant_association_id_isValid;

    m_assistant_id_isValid = ::OpenAPI::fromJsonValue(m_assistant_id, json[QString("assistantId")]);
    m_assistant_id_isSet = !json[QString("assistantId")].isNull() && m_assistant_id_isValid;

    m_association_data_isValid = ::OpenAPI::fromJsonValue(m_association_data, json[QString("associationData")]);
    m_association_data_isSet = !json[QString("associationData")].isNull() && m_association_data_isValid;

    m_association_type_isValid = ::OpenAPI::fromJsonValue(m_association_type, json[QString("associationType")]);
    m_association_type_isSet = !json[QString("associationType")].isNull() && m_association_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIAssistantAssociationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssistantAssociationData::asJsonObject() const {
    QJsonObject obj;
    if (m_assistant_arn_isSet) {
        obj.insert(QString("assistantArn"), ::OpenAPI::toJsonValue(m_assistant_arn));
    }
    if (m_assistant_association_arn_isSet) {
        obj.insert(QString("assistantAssociationArn"), ::OpenAPI::toJsonValue(m_assistant_association_arn));
    }
    if (m_assistant_association_id_isSet) {
        obj.insert(QString("assistantAssociationId"), ::OpenAPI::toJsonValue(m_assistant_association_id));
    }
    if (m_assistant_id_isSet) {
        obj.insert(QString("assistantId"), ::OpenAPI::toJsonValue(m_assistant_id));
    }
    if (m_association_data.isSet()) {
        obj.insert(QString("associationData"), ::OpenAPI::toJsonValue(m_association_data));
    }
    if (m_association_type.isSet()) {
        obj.insert(QString("associationType"), ::OpenAPI::toJsonValue(m_association_type));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIAssistantAssociationData::getAssistantArn() const {
    return m_assistant_arn;
}
void OAIAssistantAssociationData::setAssistantArn(const QString &assistant_arn) {
    m_assistant_arn = assistant_arn;
    m_assistant_arn_isSet = true;
}

bool OAIAssistantAssociationData::is_assistant_arn_Set() const{
    return m_assistant_arn_isSet;
}

bool OAIAssistantAssociationData::is_assistant_arn_Valid() const{
    return m_assistant_arn_isValid;
}

QString OAIAssistantAssociationData::getAssistantAssociationArn() const {
    return m_assistant_association_arn;
}
void OAIAssistantAssociationData::setAssistantAssociationArn(const QString &assistant_association_arn) {
    m_assistant_association_arn = assistant_association_arn;
    m_assistant_association_arn_isSet = true;
}

bool OAIAssistantAssociationData::is_assistant_association_arn_Set() const{
    return m_assistant_association_arn_isSet;
}

bool OAIAssistantAssociationData::is_assistant_association_arn_Valid() const{
    return m_assistant_association_arn_isValid;
}

QString OAIAssistantAssociationData::getAssistantAssociationId() const {
    return m_assistant_association_id;
}
void OAIAssistantAssociationData::setAssistantAssociationId(const QString &assistant_association_id) {
    m_assistant_association_id = assistant_association_id;
    m_assistant_association_id_isSet = true;
}

bool OAIAssistantAssociationData::is_assistant_association_id_Set() const{
    return m_assistant_association_id_isSet;
}

bool OAIAssistantAssociationData::is_assistant_association_id_Valid() const{
    return m_assistant_association_id_isValid;
}

QString OAIAssistantAssociationData::getAssistantId() const {
    return m_assistant_id;
}
void OAIAssistantAssociationData::setAssistantId(const QString &assistant_id) {
    m_assistant_id = assistant_id;
    m_assistant_id_isSet = true;
}

bool OAIAssistantAssociationData::is_assistant_id_Set() const{
    return m_assistant_id_isSet;
}

bool OAIAssistantAssociationData::is_assistant_id_Valid() const{
    return m_assistant_id_isValid;
}

OAIAssistantAssociationData_associationData OAIAssistantAssociationData::getAssociationData() const {
    return m_association_data;
}
void OAIAssistantAssociationData::setAssociationData(const OAIAssistantAssociationData_associationData &association_data) {
    m_association_data = association_data;
    m_association_data_isSet = true;
}

bool OAIAssistantAssociationData::is_association_data_Set() const{
    return m_association_data_isSet;
}

bool OAIAssistantAssociationData::is_association_data_Valid() const{
    return m_association_data_isValid;
}

OAIAssociationType OAIAssistantAssociationData::getAssociationType() const {
    return m_association_type;
}
void OAIAssistantAssociationData::setAssociationType(const OAIAssociationType &association_type) {
    m_association_type = association_type;
    m_association_type_isSet = true;
}

bool OAIAssistantAssociationData::is_association_type_Set() const{
    return m_association_type_isSet;
}

bool OAIAssistantAssociationData::is_association_type_Valid() const{
    return m_association_type_isValid;
}

QMap OAIAssistantAssociationData::getTags() const {
    return m_tags;
}
void OAIAssistantAssociationData::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAssistantAssociationData::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAssistantAssociationData::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIAssistantAssociationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assistant_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_association_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_association_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssistantAssociationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assistant_arn_isValid && m_assistant_association_arn_isValid && m_assistant_association_id_isValid && m_assistant_id_isValid && m_association_data_isValid && m_association_type_isValid && true;
}

} // namespace OpenAPI
