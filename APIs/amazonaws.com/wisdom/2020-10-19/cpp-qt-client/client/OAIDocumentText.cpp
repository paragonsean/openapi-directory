/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentText.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentText::OAIDocumentText(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentText::OAIDocumentText() {
    this->initializeModel();
}

OAIDocumentText::~OAIDocumentText() {}

void OAIDocumentText::initializeModel() {

    m_highlights_isSet = false;
    m_highlights_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIDocumentText::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentText::fromJsonObject(QJsonObject json) {

    m_highlights_isValid = ::OpenAPI::fromJsonValue(m_highlights, json[QString("highlights")]);
    m_highlights_isSet = !json[QString("highlights")].isNull() && m_highlights_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIDocumentText::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentText::asJsonObject() const {
    QJsonObject obj;
    if (m_highlights.isSet()) {
        obj.insert(QString("highlights"), ::OpenAPI::toJsonValue(m_highlights));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList OAIDocumentText::getHighlights() const {
    return m_highlights;
}
void OAIDocumentText::setHighlights(const QList &highlights) {
    m_highlights = highlights;
    m_highlights_isSet = true;
}

bool OAIDocumentText::is_highlights_Set() const{
    return m_highlights_isSet;
}

bool OAIDocumentText::is_highlights_Valid() const{
    return m_highlights_isValid;
}

QString OAIDocumentText::getText() const {
    return m_text;
}
void OAIDocumentText::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDocumentText::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDocumentText::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIDocumentText::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_highlights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentText::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
