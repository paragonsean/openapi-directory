/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionSummary::OAISessionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionSummary::OAISessionSummary() {
    this->initializeModel();
}

OAISessionSummary::~OAISessionSummary() {}

void OAISessionSummary::initializeModel() {

    m_assistant_arn_isSet = false;
    m_assistant_arn_isValid = false;

    m_assistant_id_isSet = false;
    m_assistant_id_isValid = false;

    m_session_arn_isSet = false;
    m_session_arn_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;
}

void OAISessionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionSummary::fromJsonObject(QJsonObject json) {

    m_assistant_arn_isValid = ::OpenAPI::fromJsonValue(m_assistant_arn, json[QString("assistantArn")]);
    m_assistant_arn_isSet = !json[QString("assistantArn")].isNull() && m_assistant_arn_isValid;

    m_assistant_id_isValid = ::OpenAPI::fromJsonValue(m_assistant_id, json[QString("assistantId")]);
    m_assistant_id_isSet = !json[QString("assistantId")].isNull() && m_assistant_id_isValid;

    m_session_arn_isValid = ::OpenAPI::fromJsonValue(m_session_arn, json[QString("sessionArn")]);
    m_session_arn_isSet = !json[QString("sessionArn")].isNull() && m_session_arn_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;
}

QString OAISessionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_assistant_arn_isSet) {
        obj.insert(QString("assistantArn"), ::OpenAPI::toJsonValue(m_assistant_arn));
    }
    if (m_assistant_id_isSet) {
        obj.insert(QString("assistantId"), ::OpenAPI::toJsonValue(m_assistant_id));
    }
    if (m_session_arn_isSet) {
        obj.insert(QString("sessionArn"), ::OpenAPI::toJsonValue(m_session_arn));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    return obj;
}

QString OAISessionSummary::getAssistantArn() const {
    return m_assistant_arn;
}
void OAISessionSummary::setAssistantArn(const QString &assistant_arn) {
    m_assistant_arn = assistant_arn;
    m_assistant_arn_isSet = true;
}

bool OAISessionSummary::is_assistant_arn_Set() const{
    return m_assistant_arn_isSet;
}

bool OAISessionSummary::is_assistant_arn_Valid() const{
    return m_assistant_arn_isValid;
}

QString OAISessionSummary::getAssistantId() const {
    return m_assistant_id;
}
void OAISessionSummary::setAssistantId(const QString &assistant_id) {
    m_assistant_id = assistant_id;
    m_assistant_id_isSet = true;
}

bool OAISessionSummary::is_assistant_id_Set() const{
    return m_assistant_id_isSet;
}

bool OAISessionSummary::is_assistant_id_Valid() const{
    return m_assistant_id_isValid;
}

QString OAISessionSummary::getSessionArn() const {
    return m_session_arn;
}
void OAISessionSummary::setSessionArn(const QString &session_arn) {
    m_session_arn = session_arn;
    m_session_arn_isSet = true;
}

bool OAISessionSummary::is_session_arn_Set() const{
    return m_session_arn_isSet;
}

bool OAISessionSummary::is_session_arn_Valid() const{
    return m_session_arn_isValid;
}

QString OAISessionSummary::getSessionId() const {
    return m_session_id;
}
void OAISessionSummary::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAISessionSummary::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAISessionSummary::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAISessionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assistant_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assistant_arn_isValid && m_assistant_id_isValid && m_session_arn_isValid && m_session_id_isValid && true;
}

} // namespace OpenAPI
