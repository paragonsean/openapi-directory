/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssistantResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssistantResponse::OAICreateAssistantResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssistantResponse::OAICreateAssistantResponse() {
    this->initializeModel();
}

OAICreateAssistantResponse::~OAICreateAssistantResponse() {}

void OAICreateAssistantResponse::initializeModel() {

    m_assistant_isSet = false;
    m_assistant_isValid = false;
}

void OAICreateAssistantResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssistantResponse::fromJsonObject(QJsonObject json) {

    m_assistant_isValid = ::OpenAPI::fromJsonValue(m_assistant, json[QString("assistant")]);
    m_assistant_isSet = !json[QString("assistant")].isNull() && m_assistant_isValid;
}

QString OAICreateAssistantResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssistantResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assistant.isSet()) {
        obj.insert(QString("assistant"), ::OpenAPI::toJsonValue(m_assistant));
    }
    return obj;
}

OAICreateAssistantResponse_assistant OAICreateAssistantResponse::getAssistant() const {
    return m_assistant;
}
void OAICreateAssistantResponse::setAssistant(const OAICreateAssistantResponse_assistant &assistant) {
    m_assistant = assistant;
    m_assistant_isSet = true;
}

bool OAICreateAssistantResponse::is_assistant_Set() const{
    return m_assistant_isSet;
}

bool OAICreateAssistantResponse::is_assistant_Valid() const{
    return m_assistant_isValid;
}

bool OAICreateAssistantResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assistant.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssistantResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
