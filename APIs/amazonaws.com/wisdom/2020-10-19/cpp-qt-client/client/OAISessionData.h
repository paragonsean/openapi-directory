/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISessionData.h
 *
 * Information about the session.
 */

#ifndef OAISessionData_H
#define OAISessionData_H

#include <QJsonObject>

#include "OAISessionData_integrationConfiguration.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISessionData_integrationConfiguration;

class OAISessionData : public OAIObject {
public:
    OAISessionData();
    OAISessionData(QString json);
    ~OAISessionData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAISessionData_integrationConfiguration getIntegrationConfiguration() const;
    void setIntegrationConfiguration(const OAISessionData_integrationConfiguration &integration_configuration);
    bool is_integration_configuration_Set() const;
    bool is_integration_configuration_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSessionArn() const;
    void setSessionArn(const QString &session_arn);
    bool is_session_arn_Set() const;
    bool is_session_arn_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAISessionData_integrationConfiguration m_integration_configuration;
    bool m_integration_configuration_isSet;
    bool m_integration_configuration_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_session_arn;
    bool m_session_arn_isSet;
    bool m_session_arn_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISessionData)

#endif // OAISessionData_H
