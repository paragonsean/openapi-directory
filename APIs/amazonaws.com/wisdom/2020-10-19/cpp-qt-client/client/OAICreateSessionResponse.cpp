/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSessionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSessionResponse::OAICreateSessionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSessionResponse::OAICreateSessionResponse() {
    this->initializeModel();
}

OAICreateSessionResponse::~OAICreateSessionResponse() {}

void OAICreateSessionResponse::initializeModel() {

    m_session_isSet = false;
    m_session_isValid = false;
}

void OAICreateSessionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSessionResponse::fromJsonObject(QJsonObject json) {

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;
}

QString OAICreateSessionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSessionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    return obj;
}

OAICreateSessionResponse_session OAICreateSessionResponse::getSession() const {
    return m_session;
}
void OAICreateSessionResponse::setSession(const OAICreateSessionResponse_session &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAICreateSessionResponse::is_session_Set() const{
    return m_session_isSet;
}

bool OAICreateSessionResponse::is_session_Valid() const{
    return m_session_isValid;
}

bool OAICreateSessionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSessionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
