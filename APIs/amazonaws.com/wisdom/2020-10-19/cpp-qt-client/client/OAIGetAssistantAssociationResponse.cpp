/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAssistantAssociationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAssistantAssociationResponse::OAIGetAssistantAssociationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAssistantAssociationResponse::OAIGetAssistantAssociationResponse() {
    this->initializeModel();
}

OAIGetAssistantAssociationResponse::~OAIGetAssistantAssociationResponse() {}

void OAIGetAssistantAssociationResponse::initializeModel() {

    m_assistant_association_isSet = false;
    m_assistant_association_isValid = false;
}

void OAIGetAssistantAssociationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAssistantAssociationResponse::fromJsonObject(QJsonObject json) {

    m_assistant_association_isValid = ::OpenAPI::fromJsonValue(m_assistant_association, json[QString("assistantAssociation")]);
    m_assistant_association_isSet = !json[QString("assistantAssociation")].isNull() && m_assistant_association_isValid;
}

QString OAIGetAssistantAssociationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAssistantAssociationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assistant_association.isSet()) {
        obj.insert(QString("assistantAssociation"), ::OpenAPI::toJsonValue(m_assistant_association));
    }
    return obj;
}

OAICreateAssistantAssociationResponse_assistantAssociation OAIGetAssistantAssociationResponse::getAssistantAssociation() const {
    return m_assistant_association;
}
void OAIGetAssistantAssociationResponse::setAssistantAssociation(const OAICreateAssistantAssociationResponse_assistantAssociation &assistant_association) {
    m_assistant_association = assistant_association;
    m_assistant_association_isSet = true;
}

bool OAIGetAssistantAssociationResponse::is_assistant_association_Set() const{
    return m_assistant_association_isSet;
}

bool OAIGetAssistantAssociationResponse::is_assistant_association_Valid() const{
    return m_assistant_association_isValid;
}

bool OAIGetAssistantAssociationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assistant_association.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAssistantAssociationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
