/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateContent_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateContent_request::OAICreateContent_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateContent_request::OAICreateContent_request() {
    this->initializeModel();
}

OAICreateContent_request::~OAICreateContent_request() {}

void OAICreateContent_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_override_link_out_uri_isSet = false;
    m_override_link_out_uri_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;
}

void OAICreateContent_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateContent_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_override_link_out_uri_isValid = ::OpenAPI::fromJsonValue(m_override_link_out_uri, json[QString("overrideLinkOutUri")]);
    m_override_link_out_uri_isSet = !json[QString("overrideLinkOutUri")].isNull() && m_override_link_out_uri_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;
}

QString OAICreateContent_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateContent_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_override_link_out_uri_isSet) {
        obj.insert(QString("overrideLinkOutUri"), ::OpenAPI::toJsonValue(m_override_link_out_uri));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    return obj;
}

QString OAICreateContent_request::getClientToken() const {
    return m_client_token;
}
void OAICreateContent_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateContent_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateContent_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QMap<QString, QString> OAICreateContent_request::getMetadata() const {
    return m_metadata;
}
void OAICreateContent_request::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateContent_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateContent_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICreateContent_request::getName() const {
    return m_name;
}
void OAICreateContent_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateContent_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateContent_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateContent_request::getOverrideLinkOutUri() const {
    return m_override_link_out_uri;
}
void OAICreateContent_request::setOverrideLinkOutUri(const QString &override_link_out_uri) {
    m_override_link_out_uri = override_link_out_uri;
    m_override_link_out_uri_isSet = true;
}

bool OAICreateContent_request::is_override_link_out_uri_Set() const{
    return m_override_link_out_uri_isSet;
}

bool OAICreateContent_request::is_override_link_out_uri_Valid() const{
    return m_override_link_out_uri_isValid;
}

QMap<QString, QString> OAICreateContent_request::getTags() const {
    return m_tags;
}
void OAICreateContent_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateContent_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateContent_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateContent_request::getTitle() const {
    return m_title;
}
void OAICreateContent_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICreateContent_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAICreateContent_request::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICreateContent_request::getUploadId() const {
    return m_upload_id;
}
void OAICreateContent_request::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAICreateContent_request::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAICreateContent_request::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

bool OAICreateContent_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_link_out_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateContent_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_upload_id_isValid && true;
}

} // namespace OpenAPI
