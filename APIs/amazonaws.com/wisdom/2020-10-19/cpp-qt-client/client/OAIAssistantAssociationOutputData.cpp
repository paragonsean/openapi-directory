/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssistantAssociationOutputData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssistantAssociationOutputData::OAIAssistantAssociationOutputData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssistantAssociationOutputData::OAIAssistantAssociationOutputData() {
    this->initializeModel();
}

OAIAssistantAssociationOutputData::~OAIAssistantAssociationOutputData() {}

void OAIAssistantAssociationOutputData::initializeModel() {

    m_knowledge_base_association_isSet = false;
    m_knowledge_base_association_isValid = false;
}

void OAIAssistantAssociationOutputData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssistantAssociationOutputData::fromJsonObject(QJsonObject json) {

    m_knowledge_base_association_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_association, json[QString("knowledgeBaseAssociation")]);
    m_knowledge_base_association_isSet = !json[QString("knowledgeBaseAssociation")].isNull() && m_knowledge_base_association_isValid;
}

QString OAIAssistantAssociationOutputData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssistantAssociationOutputData::asJsonObject() const {
    QJsonObject obj;
    if (m_knowledge_base_association.isSet()) {
        obj.insert(QString("knowledgeBaseAssociation"), ::OpenAPI::toJsonValue(m_knowledge_base_association));
    }
    return obj;
}

OAIAssistantAssociationOutputData_knowledgeBaseAssociation OAIAssistantAssociationOutputData::getKnowledgeBaseAssociation() const {
    return m_knowledge_base_association;
}
void OAIAssistantAssociationOutputData::setKnowledgeBaseAssociation(const OAIAssistantAssociationOutputData_knowledgeBaseAssociation &knowledge_base_association) {
    m_knowledge_base_association = knowledge_base_association;
    m_knowledge_base_association_isSet = true;
}

bool OAIAssistantAssociationOutputData::is_knowledge_base_association_Set() const{
    return m_knowledge_base_association_isSet;
}

bool OAIAssistantAssociationOutputData::is_knowledge_base_association_Valid() const{
    return m_knowledge_base_association_isValid;
}

bool OAIAssistantAssociationOutputData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_knowledge_base_association.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssistantAssociationOutputData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
