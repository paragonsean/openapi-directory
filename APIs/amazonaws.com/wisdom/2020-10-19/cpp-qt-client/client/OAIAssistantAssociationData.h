/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssistantAssociationData.h
 *
 * Information about the assistant association.
 */

#ifndef OAIAssistantAssociationData_H
#define OAIAssistantAssociationData_H

#include <QJsonObject>

#include "OAIAssistantAssociationData_associationData.h"
#include "OAIAssociationType.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAssistantAssociationData_associationData;

class OAIAssistantAssociationData : public OAIObject {
public:
    OAIAssistantAssociationData();
    OAIAssistantAssociationData(QString json);
    ~OAIAssistantAssociationData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssistantArn() const;
    void setAssistantArn(const QString &assistant_arn);
    bool is_assistant_arn_Set() const;
    bool is_assistant_arn_Valid() const;

    QString getAssistantAssociationArn() const;
    void setAssistantAssociationArn(const QString &assistant_association_arn);
    bool is_assistant_association_arn_Set() const;
    bool is_assistant_association_arn_Valid() const;

    QString getAssistantAssociationId() const;
    void setAssistantAssociationId(const QString &assistant_association_id);
    bool is_assistant_association_id_Set() const;
    bool is_assistant_association_id_Valid() const;

    QString getAssistantId() const;
    void setAssistantId(const QString &assistant_id);
    bool is_assistant_id_Set() const;
    bool is_assistant_id_Valid() const;

    OAIAssistantAssociationData_associationData getAssociationData() const;
    void setAssociationData(const OAIAssistantAssociationData_associationData &association_data);
    bool is_association_data_Set() const;
    bool is_association_data_Valid() const;

    OAIAssociationType getAssociationType() const;
    void setAssociationType(const OAIAssociationType &association_type);
    bool is_association_type_Set() const;
    bool is_association_type_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_assistant_arn;
    bool m_assistant_arn_isSet;
    bool m_assistant_arn_isValid;

    QString m_assistant_association_arn;
    bool m_assistant_association_arn_isSet;
    bool m_assistant_association_arn_isValid;

    QString m_assistant_association_id;
    bool m_assistant_association_id_isSet;
    bool m_assistant_association_id_isValid;

    QString m_assistant_id;
    bool m_assistant_id_isSet;
    bool m_assistant_id_isValid;

    OAIAssistantAssociationData_associationData m_association_data;
    bool m_association_data_isSet;
    bool m_association_data_isValid;

    OAIAssociationType m_association_type;
    bool m_association_type_isSet;
    bool m_association_type_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssistantAssociationData)

#endif // OAIAssistantAssociationData_H
