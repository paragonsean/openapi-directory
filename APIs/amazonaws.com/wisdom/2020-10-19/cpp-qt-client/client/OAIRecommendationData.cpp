/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationData::OAIRecommendationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationData::OAIRecommendationData() {
    this->initializeModel();
}

OAIRecommendationData::~OAIRecommendationData() {}

void OAIRecommendationData::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_relevance_level_isSet = false;
    m_relevance_level_isValid = false;

    m_relevance_score_isSet = false;
    m_relevance_score_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRecommendationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationData::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("recommendationId")]);
    m_recommendation_id_isSet = !json[QString("recommendationId")].isNull() && m_recommendation_id_isValid;

    m_relevance_level_isValid = ::OpenAPI::fromJsonValue(m_relevance_level, json[QString("relevanceLevel")]);
    m_relevance_level_isSet = !json[QString("relevanceLevel")].isNull() && m_relevance_level_isValid;

    m_relevance_score_isValid = ::OpenAPI::fromJsonValue(m_relevance_score, json[QString("relevanceScore")]);
    m_relevance_score_isSet = !json[QString("relevanceScore")].isNull() && m_relevance_score_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRecommendationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationData::asJsonObject() const {
    QJsonObject obj;
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("recommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_relevance_level.isSet()) {
        obj.insert(QString("relevanceLevel"), ::OpenAPI::toJsonValue(m_relevance_level));
    }
    if (m_relevance_score_isSet) {
        obj.insert(QString("relevanceScore"), ::OpenAPI::toJsonValue(m_relevance_score));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIRecommendationData_document OAIRecommendationData::getDocument() const {
    return m_document;
}
void OAIRecommendationData::setDocument(const OAIRecommendationData_document &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIRecommendationData::is_document_Set() const{
    return m_document_isSet;
}

bool OAIRecommendationData::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIRecommendationData::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIRecommendationData::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIRecommendationData::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIRecommendationData::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

OAIRelevanceLevel OAIRecommendationData::getRelevanceLevel() const {
    return m_relevance_level;
}
void OAIRecommendationData::setRelevanceLevel(const OAIRelevanceLevel &relevance_level) {
    m_relevance_level = relevance_level;
    m_relevance_level_isSet = true;
}

bool OAIRecommendationData::is_relevance_level_Set() const{
    return m_relevance_level_isSet;
}

bool OAIRecommendationData::is_relevance_level_Valid() const{
    return m_relevance_level_isValid;
}

double OAIRecommendationData::getRelevanceScore() const {
    return m_relevance_score;
}
void OAIRecommendationData::setRelevanceScore(const double &relevance_score) {
    m_relevance_score = relevance_score;
    m_relevance_score_isSet = true;
}

bool OAIRecommendationData::is_relevance_score_Set() const{
    return m_relevance_score_isSet;
}

bool OAIRecommendationData::is_relevance_score_Valid() const{
    return m_relevance_score_isValid;
}

OAIRecommendationType OAIRecommendationData::getType() const {
    return m_type;
}
void OAIRecommendationData::setType(const OAIRecommendationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRecommendationData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRecommendationData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRecommendationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && m_recommendation_id_isValid && true;
}

} // namespace OpenAPI
