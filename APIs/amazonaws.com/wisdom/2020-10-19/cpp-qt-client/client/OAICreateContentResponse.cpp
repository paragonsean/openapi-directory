/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateContentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateContentResponse::OAICreateContentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateContentResponse::OAICreateContentResponse() {
    this->initializeModel();
}

OAICreateContentResponse::~OAICreateContentResponse() {}

void OAICreateContentResponse::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;
}

void OAICreateContentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateContentResponse::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;
}

QString OAICreateContentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateContentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    return obj;
}

OAICreateContentResponse_content OAICreateContentResponse::getContent() const {
    return m_content;
}
void OAICreateContentResponse::setContent(const OAICreateContentResponse_content &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICreateContentResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAICreateContentResponse::is_content_Valid() const{
    return m_content_isValid;
}

bool OAICreateContentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateContentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
