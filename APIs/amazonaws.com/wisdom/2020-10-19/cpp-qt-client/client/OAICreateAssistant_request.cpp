/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssistant_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssistant_request::OAICreateAssistant_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssistant_request::OAICreateAssistant_request() {
    this->initializeModel();
}

OAICreateAssistant_request::~OAICreateAssistant_request() {}

void OAICreateAssistant_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_server_side_encryption_configuration_isSet = false;
    m_server_side_encryption_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateAssistant_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssistant_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_server_side_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption_configuration, json[QString("serverSideEncryptionConfiguration")]);
    m_server_side_encryption_configuration_isSet = !json[QString("serverSideEncryptionConfiguration")].isNull() && m_server_side_encryption_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreateAssistant_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssistant_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_server_side_encryption_configuration.isSet()) {
        obj.insert(QString("serverSideEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_server_side_encryption_configuration));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreateAssistant_request::getClientToken() const {
    return m_client_token;
}
void OAICreateAssistant_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAssistant_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAssistant_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateAssistant_request::getDescription() const {
    return m_description;
}
void OAICreateAssistant_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAssistant_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAssistant_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateAssistant_request::getName() const {
    return m_name;
}
void OAICreateAssistant_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAssistant_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAssistant_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateAssistant_request_serverSideEncryptionConfiguration OAICreateAssistant_request::getServerSideEncryptionConfiguration() const {
    return m_server_side_encryption_configuration;
}
void OAICreateAssistant_request::setServerSideEncryptionConfiguration(const OAICreateAssistant_request_serverSideEncryptionConfiguration &server_side_encryption_configuration) {
    m_server_side_encryption_configuration = server_side_encryption_configuration;
    m_server_side_encryption_configuration_isSet = true;
}

bool OAICreateAssistant_request::is_server_side_encryption_configuration_Set() const{
    return m_server_side_encryption_configuration_isSet;
}

bool OAICreateAssistant_request::is_server_side_encryption_configuration_Valid() const{
    return m_server_side_encryption_configuration_isValid;
}

QMap<QString, QString> OAICreateAssistant_request::getTags() const {
    return m_tags;
}
void OAICreateAssistant_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAssistant_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAssistant_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateAssistant_request::getType() const {
    return m_type;
}
void OAICreateAssistant_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateAssistant_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateAssistant_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateAssistant_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssistant_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
