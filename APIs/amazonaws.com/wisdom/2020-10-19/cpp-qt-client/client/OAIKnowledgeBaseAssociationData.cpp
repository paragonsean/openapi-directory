/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKnowledgeBaseAssociationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKnowledgeBaseAssociationData::OAIKnowledgeBaseAssociationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKnowledgeBaseAssociationData::OAIKnowledgeBaseAssociationData() {
    this->initializeModel();
}

OAIKnowledgeBaseAssociationData::~OAIKnowledgeBaseAssociationData() {}

void OAIKnowledgeBaseAssociationData::initializeModel() {

    m_knowledge_base_arn_isSet = false;
    m_knowledge_base_arn_isValid = false;

    m_knowledge_base_id_isSet = false;
    m_knowledge_base_id_isValid = false;
}

void OAIKnowledgeBaseAssociationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKnowledgeBaseAssociationData::fromJsonObject(QJsonObject json) {

    m_knowledge_base_arn_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_arn, json[QString("knowledgeBaseArn")]);
    m_knowledge_base_arn_isSet = !json[QString("knowledgeBaseArn")].isNull() && m_knowledge_base_arn_isValid;

    m_knowledge_base_id_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_id, json[QString("knowledgeBaseId")]);
    m_knowledge_base_id_isSet = !json[QString("knowledgeBaseId")].isNull() && m_knowledge_base_id_isValid;
}

QString OAIKnowledgeBaseAssociationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKnowledgeBaseAssociationData::asJsonObject() const {
    QJsonObject obj;
    if (m_knowledge_base_arn_isSet) {
        obj.insert(QString("knowledgeBaseArn"), ::OpenAPI::toJsonValue(m_knowledge_base_arn));
    }
    if (m_knowledge_base_id_isSet) {
        obj.insert(QString("knowledgeBaseId"), ::OpenAPI::toJsonValue(m_knowledge_base_id));
    }
    return obj;
}

QString OAIKnowledgeBaseAssociationData::getKnowledgeBaseArn() const {
    return m_knowledge_base_arn;
}
void OAIKnowledgeBaseAssociationData::setKnowledgeBaseArn(const QString &knowledge_base_arn) {
    m_knowledge_base_arn = knowledge_base_arn;
    m_knowledge_base_arn_isSet = true;
}

bool OAIKnowledgeBaseAssociationData::is_knowledge_base_arn_Set() const{
    return m_knowledge_base_arn_isSet;
}

bool OAIKnowledgeBaseAssociationData::is_knowledge_base_arn_Valid() const{
    return m_knowledge_base_arn_isValid;
}

QString OAIKnowledgeBaseAssociationData::getKnowledgeBaseId() const {
    return m_knowledge_base_id;
}
void OAIKnowledgeBaseAssociationData::setKnowledgeBaseId(const QString &knowledge_base_id) {
    m_knowledge_base_id = knowledge_base_id;
    m_knowledge_base_id_isSet = true;
}

bool OAIKnowledgeBaseAssociationData::is_knowledge_base_id_Set() const{
    return m_knowledge_base_id_isSet;
}

bool OAIKnowledgeBaseAssociationData::is_knowledge_base_id_Valid() const{
    return m_knowledge_base_id_isValid;
}

bool OAIKnowledgeBaseAssociationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_knowledge_base_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKnowledgeBaseAssociationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
