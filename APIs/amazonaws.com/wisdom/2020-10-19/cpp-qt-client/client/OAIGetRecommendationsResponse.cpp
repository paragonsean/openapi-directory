/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecommendationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecommendationsResponse::OAIGetRecommendationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecommendationsResponse::OAIGetRecommendationsResponse() {
    this->initializeModel();
}

OAIGetRecommendationsResponse::~OAIGetRecommendationsResponse() {}

void OAIGetRecommendationsResponse::initializeModel() {

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;

    m_triggers_isSet = false;
    m_triggers_isValid = false;
}

void OAIGetRecommendationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecommendationsResponse::fromJsonObject(QJsonObject json) {

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(m_recommendations, json[QString("recommendations")]);
    m_recommendations_isSet = !json[QString("recommendations")].isNull() && m_recommendations_isValid;

    m_triggers_isValid = ::OpenAPI::fromJsonValue(m_triggers, json[QString("triggers")]);
    m_triggers_isSet = !json[QString("triggers")].isNull() && m_triggers_isValid;
}

QString OAIGetRecommendationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecommendationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendations.isSet()) {
        obj.insert(QString("recommendations"), ::OpenAPI::toJsonValue(m_recommendations));
    }
    if (m_triggers.isSet()) {
        obj.insert(QString("triggers"), ::OpenAPI::toJsonValue(m_triggers));
    }
    return obj;
}

QList OAIGetRecommendationsResponse::getRecommendations() const {
    return m_recommendations;
}
void OAIGetRecommendationsResponse::setRecommendations(const QList &recommendations) {
    m_recommendations = recommendations;
    m_recommendations_isSet = true;
}

bool OAIGetRecommendationsResponse::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAIGetRecommendationsResponse::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

QList OAIGetRecommendationsResponse::getTriggers() const {
    return m_triggers;
}
void OAIGetRecommendationsResponse::setTriggers(const QList &triggers) {
    m_triggers = triggers;
    m_triggers_isSet = true;
}

bool OAIGetRecommendationsResponse::is_triggers_Set() const{
    return m_triggers_isSet;
}

bool OAIGetRecommendationsResponse::is_triggers_Valid() const{
    return m_triggers_isValid;
}

bool OAIGetRecommendationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecommendationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recommendations_isValid && true;
}

} // namespace OpenAPI
