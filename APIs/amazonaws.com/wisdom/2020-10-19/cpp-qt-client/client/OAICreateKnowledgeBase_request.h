/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateKnowledgeBase_request.h
 *
 * 
 */

#ifndef OAICreateKnowledgeBase_request_H
#define OAICreateKnowledgeBase_request_H

#include <QJsonObject>

#include "OAICreateAssistant_request_serverSideEncryptionConfiguration.h"
#include "OAICreateKnowledgeBase_request_renderingConfiguration.h"
#include "OAICreateKnowledgeBase_request_sourceConfiguration.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateKnowledgeBase_request_renderingConfiguration;
class OAICreateAssistant_request_serverSideEncryptionConfiguration;
class OAICreateKnowledgeBase_request_sourceConfiguration;

class OAICreateKnowledgeBase_request : public OAIObject {
public:
    OAICreateKnowledgeBase_request();
    OAICreateKnowledgeBase_request(QString json);
    ~OAICreateKnowledgeBase_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getKnowledgeBaseType() const;
    void setKnowledgeBaseType(const QString &knowledge_base_type);
    bool is_knowledge_base_type_Set() const;
    bool is_knowledge_base_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAICreateKnowledgeBase_request_renderingConfiguration getRenderingConfiguration() const;
    void setRenderingConfiguration(const OAICreateKnowledgeBase_request_renderingConfiguration &rendering_configuration);
    bool is_rendering_configuration_Set() const;
    bool is_rendering_configuration_Valid() const;

    OAICreateAssistant_request_serverSideEncryptionConfiguration getServerSideEncryptionConfiguration() const;
    void setServerSideEncryptionConfiguration(const OAICreateAssistant_request_serverSideEncryptionConfiguration &server_side_encryption_configuration);
    bool is_server_side_encryption_configuration_Set() const;
    bool is_server_side_encryption_configuration_Valid() const;

    OAICreateKnowledgeBase_request_sourceConfiguration getSourceConfiguration() const;
    void setSourceConfiguration(const OAICreateKnowledgeBase_request_sourceConfiguration &source_configuration);
    bool is_source_configuration_Set() const;
    bool is_source_configuration_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_knowledge_base_type;
    bool m_knowledge_base_type_isSet;
    bool m_knowledge_base_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAICreateKnowledgeBase_request_renderingConfiguration m_rendering_configuration;
    bool m_rendering_configuration_isSet;
    bool m_rendering_configuration_isValid;

    OAICreateAssistant_request_serverSideEncryptionConfiguration m_server_side_encryption_configuration;
    bool m_server_side_encryption_configuration_isSet;
    bool m_server_side_encryption_configuration_isValid;

    OAICreateKnowledgeBase_request_sourceConfiguration m_source_configuration;
    bool m_source_configuration_isSet;
    bool m_source_configuration_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateKnowledgeBase_request)

#endif // OAICreateKnowledgeBase_request_H
