/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateContentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateContentRequest::OAIUpdateContentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateContentRequest::OAIUpdateContentRequest() {
    this->initializeModel();
}

OAIUpdateContentRequest::~OAIUpdateContentRequest() {}

void OAIUpdateContentRequest::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_override_link_out_uri_isSet = false;
    m_override_link_out_uri_isValid = false;

    m_remove_override_link_out_uri_isSet = false;
    m_remove_override_link_out_uri_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;
}

void OAIUpdateContentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateContentRequest::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_override_link_out_uri_isValid = ::OpenAPI::fromJsonValue(m_override_link_out_uri, json[QString("overrideLinkOutUri")]);
    m_override_link_out_uri_isSet = !json[QString("overrideLinkOutUri")].isNull() && m_override_link_out_uri_isValid;

    m_remove_override_link_out_uri_isValid = ::OpenAPI::fromJsonValue(m_remove_override_link_out_uri, json[QString("removeOverrideLinkOutUri")]);
    m_remove_override_link_out_uri_isSet = !json[QString("removeOverrideLinkOutUri")].isNull() && m_remove_override_link_out_uri_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;
}

QString OAIUpdateContentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateContentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_override_link_out_uri_isSet) {
        obj.insert(QString("overrideLinkOutUri"), ::OpenAPI::toJsonValue(m_override_link_out_uri));
    }
    if (m_remove_override_link_out_uri_isSet) {
        obj.insert(QString("removeOverrideLinkOutUri"), ::OpenAPI::toJsonValue(m_remove_override_link_out_uri));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    return obj;
}

QMap OAIUpdateContentRequest::getMetadata() const {
    return m_metadata;
}
void OAIUpdateContentRequest::setMetadata(const QMap &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIUpdateContentRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIUpdateContentRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIUpdateContentRequest::getOverrideLinkOutUri() const {
    return m_override_link_out_uri;
}
void OAIUpdateContentRequest::setOverrideLinkOutUri(const QString &override_link_out_uri) {
    m_override_link_out_uri = override_link_out_uri;
    m_override_link_out_uri_isSet = true;
}

bool OAIUpdateContentRequest::is_override_link_out_uri_Set() const{
    return m_override_link_out_uri_isSet;
}

bool OAIUpdateContentRequest::is_override_link_out_uri_Valid() const{
    return m_override_link_out_uri_isValid;
}

bool OAIUpdateContentRequest::getRemoveOverrideLinkOutUri() const {
    return m_remove_override_link_out_uri;
}
void OAIUpdateContentRequest::setRemoveOverrideLinkOutUri(const bool &remove_override_link_out_uri) {
    m_remove_override_link_out_uri = remove_override_link_out_uri;
    m_remove_override_link_out_uri_isSet = true;
}

bool OAIUpdateContentRequest::is_remove_override_link_out_uri_Set() const{
    return m_remove_override_link_out_uri_isSet;
}

bool OAIUpdateContentRequest::is_remove_override_link_out_uri_Valid() const{
    return m_remove_override_link_out_uri_isValid;
}

QString OAIUpdateContentRequest::getRevisionId() const {
    return m_revision_id;
}
void OAIUpdateContentRequest::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIUpdateContentRequest::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIUpdateContentRequest::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIUpdateContentRequest::getTitle() const {
    return m_title;
}
void OAIUpdateContentRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUpdateContentRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUpdateContentRequest::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIUpdateContentRequest::getUploadId() const {
    return m_upload_id;
}
void OAIUpdateContentRequest::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAIUpdateContentRequest::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAIUpdateContentRequest::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

bool OAIUpdateContentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_link_out_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_override_link_out_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateContentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
