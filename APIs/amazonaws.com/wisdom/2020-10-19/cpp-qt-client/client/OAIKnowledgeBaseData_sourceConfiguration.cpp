/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKnowledgeBaseData_sourceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKnowledgeBaseData_sourceConfiguration::OAIKnowledgeBaseData_sourceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKnowledgeBaseData_sourceConfiguration::OAIKnowledgeBaseData_sourceConfiguration() {
    this->initializeModel();
}

OAIKnowledgeBaseData_sourceConfiguration::~OAIKnowledgeBaseData_sourceConfiguration() {}

void OAIKnowledgeBaseData_sourceConfiguration::initializeModel() {

    m_app_integrations_isSet = false;
    m_app_integrations_isValid = false;
}

void OAIKnowledgeBaseData_sourceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKnowledgeBaseData_sourceConfiguration::fromJsonObject(QJsonObject json) {

    m_app_integrations_isValid = ::OpenAPI::fromJsonValue(m_app_integrations, json[QString("appIntegrations")]);
    m_app_integrations_isSet = !json[QString("appIntegrations")].isNull() && m_app_integrations_isValid;
}

QString OAIKnowledgeBaseData_sourceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKnowledgeBaseData_sourceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_app_integrations.isSet()) {
        obj.insert(QString("appIntegrations"), ::OpenAPI::toJsonValue(m_app_integrations));
    }
    return obj;
}

OAICreateKnowledgeBase_request_sourceConfiguration_appIntegrations OAIKnowledgeBaseData_sourceConfiguration::getAppIntegrations() const {
    return m_app_integrations;
}
void OAIKnowledgeBaseData_sourceConfiguration::setAppIntegrations(const OAICreateKnowledgeBase_request_sourceConfiguration_appIntegrations &app_integrations) {
    m_app_integrations = app_integrations;
    m_app_integrations_isSet = true;
}

bool OAIKnowledgeBaseData_sourceConfiguration::is_app_integrations_Set() const{
    return m_app_integrations_isSet;
}

bool OAIKnowledgeBaseData_sourceConfiguration::is_app_integrations_Valid() const{
    return m_app_integrations_isValid;
}

bool OAIKnowledgeBaseData_sourceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_integrations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKnowledgeBaseData_sourceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
