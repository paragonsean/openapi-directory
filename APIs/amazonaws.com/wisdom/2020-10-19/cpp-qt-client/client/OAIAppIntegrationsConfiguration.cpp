/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppIntegrationsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppIntegrationsConfiguration::OAIAppIntegrationsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppIntegrationsConfiguration::OAIAppIntegrationsConfiguration() {
    this->initializeModel();
}

OAIAppIntegrationsConfiguration::~OAIAppIntegrationsConfiguration() {}

void OAIAppIntegrationsConfiguration::initializeModel() {

    m_app_integration_arn_isSet = false;
    m_app_integration_arn_isValid = false;

    m_object_fields_isSet = false;
    m_object_fields_isValid = false;
}

void OAIAppIntegrationsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppIntegrationsConfiguration::fromJsonObject(QJsonObject json) {

    m_app_integration_arn_isValid = ::OpenAPI::fromJsonValue(m_app_integration_arn, json[QString("appIntegrationArn")]);
    m_app_integration_arn_isSet = !json[QString("appIntegrationArn")].isNull() && m_app_integration_arn_isValid;

    m_object_fields_isValid = ::OpenAPI::fromJsonValue(m_object_fields, json[QString("objectFields")]);
    m_object_fields_isSet = !json[QString("objectFields")].isNull() && m_object_fields_isValid;
}

QString OAIAppIntegrationsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppIntegrationsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_app_integration_arn_isSet) {
        obj.insert(QString("appIntegrationArn"), ::OpenAPI::toJsonValue(m_app_integration_arn));
    }
    if (m_object_fields.isSet()) {
        obj.insert(QString("objectFields"), ::OpenAPI::toJsonValue(m_object_fields));
    }
    return obj;
}

QString OAIAppIntegrationsConfiguration::getAppIntegrationArn() const {
    return m_app_integration_arn;
}
void OAIAppIntegrationsConfiguration::setAppIntegrationArn(const QString &app_integration_arn) {
    m_app_integration_arn = app_integration_arn;
    m_app_integration_arn_isSet = true;
}

bool OAIAppIntegrationsConfiguration::is_app_integration_arn_Set() const{
    return m_app_integration_arn_isSet;
}

bool OAIAppIntegrationsConfiguration::is_app_integration_arn_Valid() const{
    return m_app_integration_arn_isValid;
}

QList OAIAppIntegrationsConfiguration::getObjectFields() const {
    return m_object_fields;
}
void OAIAppIntegrationsConfiguration::setObjectFields(const QList &object_fields) {
    m_object_fields = object_fields;
    m_object_fields_isSet = true;
}

bool OAIAppIntegrationsConfiguration::is_object_fields_Set() const{
    return m_object_fields_isSet;
}

bool OAIAppIntegrationsConfiguration::is_object_fields_Valid() const{
    return m_object_fields_isValid;
}

bool OAIAppIntegrationsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_integration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppIntegrationsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_integration_arn_isValid && true;
}

} // namespace OpenAPI
