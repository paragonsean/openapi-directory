/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartContentUploadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartContentUploadResponse::OAIStartContentUploadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartContentUploadResponse::OAIStartContentUploadResponse() {
    this->initializeModel();
}

OAIStartContentUploadResponse::~OAIStartContentUploadResponse() {}

void OAIStartContentUploadResponse::initializeModel() {

    m_headers_to_include_isSet = false;
    m_headers_to_include_isValid = false;

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_expiry_isSet = false;
    m_url_expiry_isValid = false;
}

void OAIStartContentUploadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartContentUploadResponse::fromJsonObject(QJsonObject json) {

    m_headers_to_include_isValid = ::OpenAPI::fromJsonValue(m_headers_to_include, json[QString("headersToInclude")]);
    m_headers_to_include_isSet = !json[QString("headersToInclude")].isNull() && m_headers_to_include_isValid;

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_expiry_isValid = ::OpenAPI::fromJsonValue(m_url_expiry, json[QString("urlExpiry")]);
    m_url_expiry_isSet = !json[QString("urlExpiry")].isNull() && m_url_expiry_isValid;
}

QString OAIStartContentUploadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartContentUploadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_headers_to_include.isSet()) {
        obj.insert(QString("headersToInclude"), ::OpenAPI::toJsonValue(m_headers_to_include));
    }
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_expiry_isSet) {
        obj.insert(QString("urlExpiry"), ::OpenAPI::toJsonValue(m_url_expiry));
    }
    return obj;
}

QMap OAIStartContentUploadResponse::getHeadersToInclude() const {
    return m_headers_to_include;
}
void OAIStartContentUploadResponse::setHeadersToInclude(const QMap &headers_to_include) {
    m_headers_to_include = headers_to_include;
    m_headers_to_include_isSet = true;
}

bool OAIStartContentUploadResponse::is_headers_to_include_Set() const{
    return m_headers_to_include_isSet;
}

bool OAIStartContentUploadResponse::is_headers_to_include_Valid() const{
    return m_headers_to_include_isValid;
}

QString OAIStartContentUploadResponse::getUploadId() const {
    return m_upload_id;
}
void OAIStartContentUploadResponse::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAIStartContentUploadResponse::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAIStartContentUploadResponse::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

QString OAIStartContentUploadResponse::getUrl() const {
    return m_url;
}
void OAIStartContentUploadResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIStartContentUploadResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAIStartContentUploadResponse::is_url_Valid() const{
    return m_url_isValid;
}

QDateTime OAIStartContentUploadResponse::getUrlExpiry() const {
    return m_url_expiry;
}
void OAIStartContentUploadResponse::setUrlExpiry(const QDateTime &url_expiry) {
    m_url_expiry = url_expiry;
    m_url_expiry_isSet = true;
}

bool OAIStartContentUploadResponse::is_url_expiry_Set() const{
    return m_url_expiry_isSet;
}

bool OAIStartContentUploadResponse::is_url_expiry_Valid() const{
    return m_url_expiry_isValid;
}

bool OAIStartContentUploadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers_to_include.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartContentUploadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_headers_to_include_isValid && m_upload_id_isValid && m_url_isValid && m_url_expiry_isValid && true;
}

} // namespace OpenAPI
