/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationTriggerData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationTriggerData::OAIRecommendationTriggerData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationTriggerData::OAIRecommendationTriggerData() {
    this->initializeModel();
}

OAIRecommendationTriggerData::~OAIRecommendationTriggerData() {}

void OAIRecommendationTriggerData::initializeModel() {

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAIRecommendationTriggerData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationTriggerData::fromJsonObject(QJsonObject json) {

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAIRecommendationTriggerData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationTriggerData::asJsonObject() const {
    QJsonObject obj;
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAIRecommendationTriggerData_query OAIRecommendationTriggerData::getQuery() const {
    return m_query;
}
void OAIRecommendationTriggerData::setQuery(const OAIRecommendationTriggerData_query &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIRecommendationTriggerData::is_query_Set() const{
    return m_query_isSet;
}

bool OAIRecommendationTriggerData::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIRecommendationTriggerData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationTriggerData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
