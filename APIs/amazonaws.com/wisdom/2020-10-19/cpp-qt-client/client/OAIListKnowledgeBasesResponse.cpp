/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListKnowledgeBasesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListKnowledgeBasesResponse::OAIListKnowledgeBasesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListKnowledgeBasesResponse::OAIListKnowledgeBasesResponse() {
    this->initializeModel();
}

OAIListKnowledgeBasesResponse::~OAIListKnowledgeBasesResponse() {}

void OAIListKnowledgeBasesResponse::initializeModel() {

    m_knowledge_base_summaries_isSet = false;
    m_knowledge_base_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListKnowledgeBasesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListKnowledgeBasesResponse::fromJsonObject(QJsonObject json) {

    m_knowledge_base_summaries_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_summaries, json[QString("knowledgeBaseSummaries")]);
    m_knowledge_base_summaries_isSet = !json[QString("knowledgeBaseSummaries")].isNull() && m_knowledge_base_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListKnowledgeBasesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListKnowledgeBasesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_knowledge_base_summaries.isSet()) {
        obj.insert(QString("knowledgeBaseSummaries"), ::OpenAPI::toJsonValue(m_knowledge_base_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListKnowledgeBasesResponse::getKnowledgeBaseSummaries() const {
    return m_knowledge_base_summaries;
}
void OAIListKnowledgeBasesResponse::setKnowledgeBaseSummaries(const QList &knowledge_base_summaries) {
    m_knowledge_base_summaries = knowledge_base_summaries;
    m_knowledge_base_summaries_isSet = true;
}

bool OAIListKnowledgeBasesResponse::is_knowledge_base_summaries_Set() const{
    return m_knowledge_base_summaries_isSet;
}

bool OAIListKnowledgeBasesResponse::is_knowledge_base_summaries_Valid() const{
    return m_knowledge_base_summaries_isValid;
}

QString OAIListKnowledgeBasesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListKnowledgeBasesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListKnowledgeBasesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListKnowledgeBasesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListKnowledgeBasesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_knowledge_base_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListKnowledgeBasesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_knowledge_base_summaries_isValid && true;
}

} // namespace OpenAPI
