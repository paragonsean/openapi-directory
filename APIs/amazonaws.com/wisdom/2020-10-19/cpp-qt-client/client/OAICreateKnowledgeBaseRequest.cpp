/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateKnowledgeBaseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateKnowledgeBaseRequest::OAICreateKnowledgeBaseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateKnowledgeBaseRequest::OAICreateKnowledgeBaseRequest() {
    this->initializeModel();
}

OAICreateKnowledgeBaseRequest::~OAICreateKnowledgeBaseRequest() {}

void OAICreateKnowledgeBaseRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_knowledge_base_type_isSet = false;
    m_knowledge_base_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rendering_configuration_isSet = false;
    m_rendering_configuration_isValid = false;

    m_server_side_encryption_configuration_isSet = false;
    m_server_side_encryption_configuration_isValid = false;

    m_source_configuration_isSet = false;
    m_source_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateKnowledgeBaseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateKnowledgeBaseRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_knowledge_base_type_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_type, json[QString("knowledgeBaseType")]);
    m_knowledge_base_type_isSet = !json[QString("knowledgeBaseType")].isNull() && m_knowledge_base_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rendering_configuration_isValid = ::OpenAPI::fromJsonValue(m_rendering_configuration, json[QString("renderingConfiguration")]);
    m_rendering_configuration_isSet = !json[QString("renderingConfiguration")].isNull() && m_rendering_configuration_isValid;

    m_server_side_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption_configuration, json[QString("serverSideEncryptionConfiguration")]);
    m_server_side_encryption_configuration_isSet = !json[QString("serverSideEncryptionConfiguration")].isNull() && m_server_side_encryption_configuration_isValid;

    m_source_configuration_isValid = ::OpenAPI::fromJsonValue(m_source_configuration, json[QString("sourceConfiguration")]);
    m_source_configuration_isSet = !json[QString("sourceConfiguration")].isNull() && m_source_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateKnowledgeBaseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateKnowledgeBaseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_knowledge_base_type.isSet()) {
        obj.insert(QString("knowledgeBaseType"), ::OpenAPI::toJsonValue(m_knowledge_base_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rendering_configuration.isSet()) {
        obj.insert(QString("renderingConfiguration"), ::OpenAPI::toJsonValue(m_rendering_configuration));
    }
    if (m_server_side_encryption_configuration.isSet()) {
        obj.insert(QString("serverSideEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_server_side_encryption_configuration));
    }
    if (m_source_configuration.isSet()) {
        obj.insert(QString("sourceConfiguration"), ::OpenAPI::toJsonValue(m_source_configuration));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateKnowledgeBaseRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateKnowledgeBaseRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateKnowledgeBaseRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateKnowledgeBaseRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateKnowledgeBaseRequest::getDescription() const {
    return m_description;
}
void OAICreateKnowledgeBaseRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateKnowledgeBaseRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateKnowledgeBaseRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIKnowledgeBaseType OAICreateKnowledgeBaseRequest::getKnowledgeBaseType() const {
    return m_knowledge_base_type;
}
void OAICreateKnowledgeBaseRequest::setKnowledgeBaseType(const OAIKnowledgeBaseType &knowledge_base_type) {
    m_knowledge_base_type = knowledge_base_type;
    m_knowledge_base_type_isSet = true;
}

bool OAICreateKnowledgeBaseRequest::is_knowledge_base_type_Set() const{
    return m_knowledge_base_type_isSet;
}

bool OAICreateKnowledgeBaseRequest::is_knowledge_base_type_Valid() const{
    return m_knowledge_base_type_isValid;
}

QString OAICreateKnowledgeBaseRequest::getName() const {
    return m_name;
}
void OAICreateKnowledgeBaseRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateKnowledgeBaseRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateKnowledgeBaseRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateKnowledgeBaseRequest_renderingConfiguration OAICreateKnowledgeBaseRequest::getRenderingConfiguration() const {
    return m_rendering_configuration;
}
void OAICreateKnowledgeBaseRequest::setRenderingConfiguration(const OAICreateKnowledgeBaseRequest_renderingConfiguration &rendering_configuration) {
    m_rendering_configuration = rendering_configuration;
    m_rendering_configuration_isSet = true;
}

bool OAICreateKnowledgeBaseRequest::is_rendering_configuration_Set() const{
    return m_rendering_configuration_isSet;
}

bool OAICreateKnowledgeBaseRequest::is_rendering_configuration_Valid() const{
    return m_rendering_configuration_isValid;
}

OAIAssistantData_serverSideEncryptionConfiguration OAICreateKnowledgeBaseRequest::getServerSideEncryptionConfiguration() const {
    return m_server_side_encryption_configuration;
}
void OAICreateKnowledgeBaseRequest::setServerSideEncryptionConfiguration(const OAIAssistantData_serverSideEncryptionConfiguration &server_side_encryption_configuration) {
    m_server_side_encryption_configuration = server_side_encryption_configuration;
    m_server_side_encryption_configuration_isSet = true;
}

bool OAICreateKnowledgeBaseRequest::is_server_side_encryption_configuration_Set() const{
    return m_server_side_encryption_configuration_isSet;
}

bool OAICreateKnowledgeBaseRequest::is_server_side_encryption_configuration_Valid() const{
    return m_server_side_encryption_configuration_isValid;
}

OAICreateKnowledgeBaseRequest_sourceConfiguration OAICreateKnowledgeBaseRequest::getSourceConfiguration() const {
    return m_source_configuration;
}
void OAICreateKnowledgeBaseRequest::setSourceConfiguration(const OAICreateKnowledgeBaseRequest_sourceConfiguration &source_configuration) {
    m_source_configuration = source_configuration;
    m_source_configuration_isSet = true;
}

bool OAICreateKnowledgeBaseRequest::is_source_configuration_Set() const{
    return m_source_configuration_isSet;
}

bool OAICreateKnowledgeBaseRequest::is_source_configuration_Valid() const{
    return m_source_configuration_isValid;
}

QMap OAICreateKnowledgeBaseRequest::getTags() const {
    return m_tags;
}
void OAICreateKnowledgeBaseRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateKnowledgeBaseRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateKnowledgeBaseRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateKnowledgeBaseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendering_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateKnowledgeBaseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_knowledge_base_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
