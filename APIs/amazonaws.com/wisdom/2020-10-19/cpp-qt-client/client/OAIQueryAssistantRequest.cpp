/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryAssistantRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryAssistantRequest::OAIQueryAssistantRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryAssistantRequest::OAIQueryAssistantRequest() {
    this->initializeModel();
}

OAIQueryAssistantRequest::~OAIQueryAssistantRequest() {}

void OAIQueryAssistantRequest::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_query_text_isSet = false;
    m_query_text_isValid = false;
}

void OAIQueryAssistantRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryAssistantRequest::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_query_text_isValid = ::OpenAPI::fromJsonValue(m_query_text, json[QString("queryText")]);
    m_query_text_isSet = !json[QString("queryText")].isNull() && m_query_text_isValid;
}

QString OAIQueryAssistantRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryAssistantRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_query_text_isSet) {
        obj.insert(QString("queryText"), ::OpenAPI::toJsonValue(m_query_text));
    }
    return obj;
}

qint32 OAIQueryAssistantRequest::getMaxResults() const {
    return m_max_results;
}
void OAIQueryAssistantRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIQueryAssistantRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIQueryAssistantRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIQueryAssistantRequest::getNextToken() const {
    return m_next_token;
}
void OAIQueryAssistantRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIQueryAssistantRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIQueryAssistantRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIQueryAssistantRequest::getQueryText() const {
    return m_query_text;
}
void OAIQueryAssistantRequest::setQueryText(const QString &query_text) {
    m_query_text = query_text;
    m_query_text_isSet = true;
}

bool OAIQueryAssistantRequest::is_query_text_Set() const{
    return m_query_text_isSet;
}

bool OAIQueryAssistantRequest::is_query_text_Valid() const{
    return m_query_text_isValid;
}

bool OAIQueryAssistantRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryAssistantRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_text_isValid && true;
}

} // namespace OpenAPI
