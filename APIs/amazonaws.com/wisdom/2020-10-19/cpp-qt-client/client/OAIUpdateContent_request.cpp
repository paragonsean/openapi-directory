/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateContent_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateContent_request::OAIUpdateContent_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateContent_request::OAIUpdateContent_request() {
    this->initializeModel();
}

OAIUpdateContent_request::~OAIUpdateContent_request() {}

void OAIUpdateContent_request::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_override_link_out_uri_isSet = false;
    m_override_link_out_uri_isValid = false;

    m_remove_override_link_out_uri_isSet = false;
    m_remove_override_link_out_uri_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;
}

void OAIUpdateContent_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateContent_request::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_override_link_out_uri_isValid = ::OpenAPI::fromJsonValue(m_override_link_out_uri, json[QString("overrideLinkOutUri")]);
    m_override_link_out_uri_isSet = !json[QString("overrideLinkOutUri")].isNull() && m_override_link_out_uri_isValid;

    m_remove_override_link_out_uri_isValid = ::OpenAPI::fromJsonValue(m_remove_override_link_out_uri, json[QString("removeOverrideLinkOutUri")]);
    m_remove_override_link_out_uri_isSet = !json[QString("removeOverrideLinkOutUri")].isNull() && m_remove_override_link_out_uri_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;
}

QString OAIUpdateContent_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateContent_request::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_override_link_out_uri_isSet) {
        obj.insert(QString("overrideLinkOutUri"), ::OpenAPI::toJsonValue(m_override_link_out_uri));
    }
    if (m_remove_override_link_out_uri_isSet) {
        obj.insert(QString("removeOverrideLinkOutUri"), ::OpenAPI::toJsonValue(m_remove_override_link_out_uri));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    return obj;
}

QMap<QString, QString> OAIUpdateContent_request::getMetadata() const {
    return m_metadata;
}
void OAIUpdateContent_request::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIUpdateContent_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIUpdateContent_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIUpdateContent_request::getOverrideLinkOutUri() const {
    return m_override_link_out_uri;
}
void OAIUpdateContent_request::setOverrideLinkOutUri(const QString &override_link_out_uri) {
    m_override_link_out_uri = override_link_out_uri;
    m_override_link_out_uri_isSet = true;
}

bool OAIUpdateContent_request::is_override_link_out_uri_Set() const{
    return m_override_link_out_uri_isSet;
}

bool OAIUpdateContent_request::is_override_link_out_uri_Valid() const{
    return m_override_link_out_uri_isValid;
}

bool OAIUpdateContent_request::isRemoveOverrideLinkOutUri() const {
    return m_remove_override_link_out_uri;
}
void OAIUpdateContent_request::setRemoveOverrideLinkOutUri(const bool &remove_override_link_out_uri) {
    m_remove_override_link_out_uri = remove_override_link_out_uri;
    m_remove_override_link_out_uri_isSet = true;
}

bool OAIUpdateContent_request::is_remove_override_link_out_uri_Set() const{
    return m_remove_override_link_out_uri_isSet;
}

bool OAIUpdateContent_request::is_remove_override_link_out_uri_Valid() const{
    return m_remove_override_link_out_uri_isValid;
}

QString OAIUpdateContent_request::getRevisionId() const {
    return m_revision_id;
}
void OAIUpdateContent_request::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIUpdateContent_request::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIUpdateContent_request::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIUpdateContent_request::getTitle() const {
    return m_title;
}
void OAIUpdateContent_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUpdateContent_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUpdateContent_request::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIUpdateContent_request::getUploadId() const {
    return m_upload_id;
}
void OAIUpdateContent_request::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAIUpdateContent_request::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAIUpdateContent_request::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

bool OAIUpdateContent_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_link_out_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_override_link_out_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateContent_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
