/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssistantData_serverSideEncryptionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssistantData_serverSideEncryptionConfiguration::OAIAssistantData_serverSideEncryptionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssistantData_serverSideEncryptionConfiguration::OAIAssistantData_serverSideEncryptionConfiguration() {
    this->initializeModel();
}

OAIAssistantData_serverSideEncryptionConfiguration::~OAIAssistantData_serverSideEncryptionConfiguration() {}

void OAIAssistantData_serverSideEncryptionConfiguration::initializeModel() {

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAIAssistantData_serverSideEncryptionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssistantData_serverSideEncryptionConfiguration::fromJsonObject(QJsonObject json) {

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;
}

QString OAIAssistantData_serverSideEncryptionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssistantData_serverSideEncryptionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

QString OAIAssistantData_serverSideEncryptionConfiguration::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIAssistantData_serverSideEncryptionConfiguration::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIAssistantData_serverSideEncryptionConfiguration::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIAssistantData_serverSideEncryptionConfiguration::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIAssistantData_serverSideEncryptionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssistantData_serverSideEncryptionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
