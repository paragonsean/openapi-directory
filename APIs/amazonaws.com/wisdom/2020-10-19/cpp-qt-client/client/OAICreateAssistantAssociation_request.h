/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAssistantAssociation_request.h
 *
 * 
 */

#ifndef OAICreateAssistantAssociation_request_H
#define OAICreateAssistantAssociation_request_H

#include <QJsonObject>

#include "OAICreateAssistantAssociation_request_association.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAssistantAssociation_request_association;

class OAICreateAssistantAssociation_request : public OAIObject {
public:
    OAICreateAssistantAssociation_request();
    OAICreateAssistantAssociation_request(QString json);
    ~OAICreateAssistantAssociation_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreateAssistantAssociation_request_association getAssociation() const;
    void setAssociation(const OAICreateAssistantAssociation_request_association &association);
    bool is_association_Set() const;
    bool is_association_Valid() const;

    QString getAssociationType() const;
    void setAssociationType(const QString &association_type);
    bool is_association_type_Set() const;
    bool is_association_type_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreateAssistantAssociation_request_association m_association;
    bool m_association_isSet;
    bool m_association_isValid;

    QString m_association_type;
    bool m_association_type_isSet;
    bool m_association_type_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAssistantAssociation_request)

#endif // OAICreateAssistantAssociation_request_H
