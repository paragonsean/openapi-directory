/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAssistant_request.h
 *
 * 
 */

#ifndef OAICreateAssistant_request_H
#define OAICreateAssistant_request_H

#include <QJsonObject>

#include "OAICreateAssistant_request_serverSideEncryptionConfiguration.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAssistant_request_serverSideEncryptionConfiguration;

class OAICreateAssistant_request : public OAIObject {
public:
    OAICreateAssistant_request();
    OAICreateAssistant_request(QString json);
    ~OAICreateAssistant_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAICreateAssistant_request_serverSideEncryptionConfiguration getServerSideEncryptionConfiguration() const;
    void setServerSideEncryptionConfiguration(const OAICreateAssistant_request_serverSideEncryptionConfiguration &server_side_encryption_configuration);
    bool is_server_side_encryption_configuration_Set() const;
    bool is_server_side_encryption_configuration_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAICreateAssistant_request_serverSideEncryptionConfiguration m_server_side_encryption_configuration;
    bool m_server_side_encryption_configuration_isSet;
    bool m_server_side_encryption_configuration_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAssistant_request)

#endif // OAICreateAssistant_request_H
