/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssistantAssociationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssistantAssociationRequest::OAICreateAssistantAssociationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssistantAssociationRequest::OAICreateAssistantAssociationRequest() {
    this->initializeModel();
}

OAICreateAssistantAssociationRequest::~OAICreateAssistantAssociationRequest() {}

void OAICreateAssistantAssociationRequest::initializeModel() {

    m_association_isSet = false;
    m_association_isValid = false;

    m_association_type_isSet = false;
    m_association_type_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAssistantAssociationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssistantAssociationRequest::fromJsonObject(QJsonObject json) {

    m_association_isValid = ::OpenAPI::fromJsonValue(m_association, json[QString("association")]);
    m_association_isSet = !json[QString("association")].isNull() && m_association_isValid;

    m_association_type_isValid = ::OpenAPI::fromJsonValue(m_association_type, json[QString("associationType")]);
    m_association_type_isSet = !json[QString("associationType")].isNull() && m_association_type_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAssistantAssociationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssistantAssociationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_association.isSet()) {
        obj.insert(QString("association"), ::OpenAPI::toJsonValue(m_association));
    }
    if (m_association_type.isSet()) {
        obj.insert(QString("associationType"), ::OpenAPI::toJsonValue(m_association_type));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateAssistantAssociationRequest_association OAICreateAssistantAssociationRequest::getAssociation() const {
    return m_association;
}
void OAICreateAssistantAssociationRequest::setAssociation(const OAICreateAssistantAssociationRequest_association &association) {
    m_association = association;
    m_association_isSet = true;
}

bool OAICreateAssistantAssociationRequest::is_association_Set() const{
    return m_association_isSet;
}

bool OAICreateAssistantAssociationRequest::is_association_Valid() const{
    return m_association_isValid;
}

OAIAssociationType OAICreateAssistantAssociationRequest::getAssociationType() const {
    return m_association_type;
}
void OAICreateAssistantAssociationRequest::setAssociationType(const OAIAssociationType &association_type) {
    m_association_type = association_type;
    m_association_type_isSet = true;
}

bool OAICreateAssistantAssociationRequest::is_association_type_Set() const{
    return m_association_type_isSet;
}

bool OAICreateAssistantAssociationRequest::is_association_type_Valid() const{
    return m_association_type_isValid;
}

QString OAICreateAssistantAssociationRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateAssistantAssociationRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAssistantAssociationRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAssistantAssociationRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QMap OAICreateAssistantAssociationRequest::getTags() const {
    return m_tags;
}
void OAICreateAssistantAssociationRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAssistantAssociationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAssistantAssociationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAssistantAssociationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssistantAssociationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_association_isValid && m_association_type_isValid && true;
}

} // namespace OpenAPI
