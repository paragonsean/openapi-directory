/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchSessionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchSessionsResponse::OAISearchSessionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchSessionsResponse::OAISearchSessionsResponse() {
    this->initializeModel();
}

OAISearchSessionsResponse::~OAISearchSessionsResponse() {}

void OAISearchSessionsResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_session_summaries_isSet = false;
    m_session_summaries_isValid = false;
}

void OAISearchSessionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchSessionsResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_session_summaries_isValid = ::OpenAPI::fromJsonValue(m_session_summaries, json[QString("sessionSummaries")]);
    m_session_summaries_isSet = !json[QString("sessionSummaries")].isNull() && m_session_summaries_isValid;
}

QString OAISearchSessionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchSessionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_session_summaries.isSet()) {
        obj.insert(QString("sessionSummaries"), ::OpenAPI::toJsonValue(m_session_summaries));
    }
    return obj;
}

QString OAISearchSessionsResponse::getNextToken() const {
    return m_next_token;
}
void OAISearchSessionsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchSessionsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchSessionsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAISearchSessionsResponse::getSessionSummaries() const {
    return m_session_summaries;
}
void OAISearchSessionsResponse::setSessionSummaries(const QList &session_summaries) {
    m_session_summaries = session_summaries;
    m_session_summaries_isSet = true;
}

bool OAISearchSessionsResponse::is_session_summaries_Set() const{
    return m_session_summaries_isSet;
}

bool OAISearchSessionsResponse::is_session_summaries_Valid() const{
    return m_session_summaries_isValid;
}

bool OAISearchSessionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchSessionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_session_summaries_isValid && true;
}

} // namespace OpenAPI
