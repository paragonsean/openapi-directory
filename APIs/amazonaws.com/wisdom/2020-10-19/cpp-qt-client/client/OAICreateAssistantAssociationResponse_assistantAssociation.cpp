/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssistantAssociationResponse_assistantAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssistantAssociationResponse_assistantAssociation::OAICreateAssistantAssociationResponse_assistantAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssistantAssociationResponse_assistantAssociation::OAICreateAssistantAssociationResponse_assistantAssociation() {
    this->initializeModel();
}

OAICreateAssistantAssociationResponse_assistantAssociation::~OAICreateAssistantAssociationResponse_assistantAssociation() {}

void OAICreateAssistantAssociationResponse_assistantAssociation::initializeModel() {

    m_assistant_arn_isSet = false;
    m_assistant_arn_isValid = false;

    m_assistant_association_arn_isSet = false;
    m_assistant_association_arn_isValid = false;

    m_assistant_association_id_isSet = false;
    m_assistant_association_id_isValid = false;

    m_assistant_id_isSet = false;
    m_assistant_id_isValid = false;

    m_association_data_isSet = false;
    m_association_data_isValid = false;

    m_association_type_isSet = false;
    m_association_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAssistantAssociationResponse_assistantAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssistantAssociationResponse_assistantAssociation::fromJsonObject(QJsonObject json) {

    m_assistant_arn_isValid = ::OpenAPI::fromJsonValue(m_assistant_arn, json[QString("assistantArn")]);
    m_assistant_arn_isSet = !json[QString("assistantArn")].isNull() && m_assistant_arn_isValid;

    m_assistant_association_arn_isValid = ::OpenAPI::fromJsonValue(m_assistant_association_arn, json[QString("assistantAssociationArn")]);
    m_assistant_association_arn_isSet = !json[QString("assistantAssociationArn")].isNull() && m_assistant_association_arn_isValid;

    m_assistant_association_id_isValid = ::OpenAPI::fromJsonValue(m_assistant_association_id, json[QString("assistantAssociationId")]);
    m_assistant_association_id_isSet = !json[QString("assistantAssociationId")].isNull() && m_assistant_association_id_isValid;

    m_assistant_id_isValid = ::OpenAPI::fromJsonValue(m_assistant_id, json[QString("assistantId")]);
    m_assistant_id_isSet = !json[QString("assistantId")].isNull() && m_assistant_id_isValid;

    m_association_data_isValid = ::OpenAPI::fromJsonValue(m_association_data, json[QString("associationData")]);
    m_association_data_isSet = !json[QString("associationData")].isNull() && m_association_data_isValid;

    m_association_type_isValid = ::OpenAPI::fromJsonValue(m_association_type, json[QString("associationType")]);
    m_association_type_isSet = !json[QString("associationType")].isNull() && m_association_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAssistantAssociationResponse_assistantAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssistantAssociationResponse_assistantAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_assistant_arn_isSet) {
        obj.insert(QString("assistantArn"), ::OpenAPI::toJsonValue(m_assistant_arn));
    }
    if (m_assistant_association_arn_isSet) {
        obj.insert(QString("assistantAssociationArn"), ::OpenAPI::toJsonValue(m_assistant_association_arn));
    }
    if (m_assistant_association_id_isSet) {
        obj.insert(QString("assistantAssociationId"), ::OpenAPI::toJsonValue(m_assistant_association_id));
    }
    if (m_assistant_id_isSet) {
        obj.insert(QString("assistantId"), ::OpenAPI::toJsonValue(m_assistant_id));
    }
    if (m_association_data.isSet()) {
        obj.insert(QString("associationData"), ::OpenAPI::toJsonValue(m_association_data));
    }
    if (m_association_type.isSet()) {
        obj.insert(QString("associationType"), ::OpenAPI::toJsonValue(m_association_type));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAssistantAssociationResponse_assistantAssociation::getAssistantArn() const {
    return m_assistant_arn;
}
void OAICreateAssistantAssociationResponse_assistantAssociation::setAssistantArn(const QString &assistant_arn) {
    m_assistant_arn = assistant_arn;
    m_assistant_arn_isSet = true;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_assistant_arn_Set() const{
    return m_assistant_arn_isSet;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_assistant_arn_Valid() const{
    return m_assistant_arn_isValid;
}

QString OAICreateAssistantAssociationResponse_assistantAssociation::getAssistantAssociationArn() const {
    return m_assistant_association_arn;
}
void OAICreateAssistantAssociationResponse_assistantAssociation::setAssistantAssociationArn(const QString &assistant_association_arn) {
    m_assistant_association_arn = assistant_association_arn;
    m_assistant_association_arn_isSet = true;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_assistant_association_arn_Set() const{
    return m_assistant_association_arn_isSet;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_assistant_association_arn_Valid() const{
    return m_assistant_association_arn_isValid;
}

QString OAICreateAssistantAssociationResponse_assistantAssociation::getAssistantAssociationId() const {
    return m_assistant_association_id;
}
void OAICreateAssistantAssociationResponse_assistantAssociation::setAssistantAssociationId(const QString &assistant_association_id) {
    m_assistant_association_id = assistant_association_id;
    m_assistant_association_id_isSet = true;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_assistant_association_id_Set() const{
    return m_assistant_association_id_isSet;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_assistant_association_id_Valid() const{
    return m_assistant_association_id_isValid;
}

QString OAICreateAssistantAssociationResponse_assistantAssociation::getAssistantId() const {
    return m_assistant_id;
}
void OAICreateAssistantAssociationResponse_assistantAssociation::setAssistantId(const QString &assistant_id) {
    m_assistant_id = assistant_id;
    m_assistant_id_isSet = true;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_assistant_id_Set() const{
    return m_assistant_id_isSet;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_assistant_id_Valid() const{
    return m_assistant_id_isValid;
}

OAIAssistantAssociationData_associationData OAICreateAssistantAssociationResponse_assistantAssociation::getAssociationData() const {
    return m_association_data;
}
void OAICreateAssistantAssociationResponse_assistantAssociation::setAssociationData(const OAIAssistantAssociationData_associationData &association_data) {
    m_association_data = association_data;
    m_association_data_isSet = true;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_association_data_Set() const{
    return m_association_data_isSet;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_association_data_Valid() const{
    return m_association_data_isValid;
}

OAIAssociationType OAICreateAssistantAssociationResponse_assistantAssociation::getAssociationType() const {
    return m_association_type;
}
void OAICreateAssistantAssociationResponse_assistantAssociation::setAssociationType(const OAIAssociationType &association_type) {
    m_association_type = association_type;
    m_association_type_isSet = true;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_association_type_Set() const{
    return m_association_type_isSet;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_association_type_Valid() const{
    return m_association_type_isValid;
}

QMap OAICreateAssistantAssociationResponse_assistantAssociation::getTags() const {
    return m_tags;
}
void OAICreateAssistantAssociationResponse_assistantAssociation::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assistant_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_association_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_association_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssistantAssociationResponse_assistantAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assistant_arn_isValid && m_assistant_association_arn_isValid && m_assistant_association_id_isValid && m_assistant_id_isValid && m_association_data_isValid && m_association_type_isValid && true;
}

} // namespace OpenAPI
