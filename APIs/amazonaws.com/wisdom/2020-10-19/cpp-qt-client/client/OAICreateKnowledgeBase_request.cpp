/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateKnowledgeBase_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateKnowledgeBase_request::OAICreateKnowledgeBase_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateKnowledgeBase_request::OAICreateKnowledgeBase_request() {
    this->initializeModel();
}

OAICreateKnowledgeBase_request::~OAICreateKnowledgeBase_request() {}

void OAICreateKnowledgeBase_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_knowledge_base_type_isSet = false;
    m_knowledge_base_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rendering_configuration_isSet = false;
    m_rendering_configuration_isValid = false;

    m_server_side_encryption_configuration_isSet = false;
    m_server_side_encryption_configuration_isValid = false;

    m_source_configuration_isSet = false;
    m_source_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateKnowledgeBase_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateKnowledgeBase_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_knowledge_base_type_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_type, json[QString("knowledgeBaseType")]);
    m_knowledge_base_type_isSet = !json[QString("knowledgeBaseType")].isNull() && m_knowledge_base_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rendering_configuration_isValid = ::OpenAPI::fromJsonValue(m_rendering_configuration, json[QString("renderingConfiguration")]);
    m_rendering_configuration_isSet = !json[QString("renderingConfiguration")].isNull() && m_rendering_configuration_isValid;

    m_server_side_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption_configuration, json[QString("serverSideEncryptionConfiguration")]);
    m_server_side_encryption_configuration_isSet = !json[QString("serverSideEncryptionConfiguration")].isNull() && m_server_side_encryption_configuration_isValid;

    m_source_configuration_isValid = ::OpenAPI::fromJsonValue(m_source_configuration, json[QString("sourceConfiguration")]);
    m_source_configuration_isSet = !json[QString("sourceConfiguration")].isNull() && m_source_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateKnowledgeBase_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateKnowledgeBase_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_knowledge_base_type_isSet) {
        obj.insert(QString("knowledgeBaseType"), ::OpenAPI::toJsonValue(m_knowledge_base_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rendering_configuration.isSet()) {
        obj.insert(QString("renderingConfiguration"), ::OpenAPI::toJsonValue(m_rendering_configuration));
    }
    if (m_server_side_encryption_configuration.isSet()) {
        obj.insert(QString("serverSideEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_server_side_encryption_configuration));
    }
    if (m_source_configuration.isSet()) {
        obj.insert(QString("sourceConfiguration"), ::OpenAPI::toJsonValue(m_source_configuration));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateKnowledgeBase_request::getClientToken() const {
    return m_client_token;
}
void OAICreateKnowledgeBase_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateKnowledgeBase_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateKnowledgeBase_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateKnowledgeBase_request::getDescription() const {
    return m_description;
}
void OAICreateKnowledgeBase_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateKnowledgeBase_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateKnowledgeBase_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateKnowledgeBase_request::getKnowledgeBaseType() const {
    return m_knowledge_base_type;
}
void OAICreateKnowledgeBase_request::setKnowledgeBaseType(const QString &knowledge_base_type) {
    m_knowledge_base_type = knowledge_base_type;
    m_knowledge_base_type_isSet = true;
}

bool OAICreateKnowledgeBase_request::is_knowledge_base_type_Set() const{
    return m_knowledge_base_type_isSet;
}

bool OAICreateKnowledgeBase_request::is_knowledge_base_type_Valid() const{
    return m_knowledge_base_type_isValid;
}

QString OAICreateKnowledgeBase_request::getName() const {
    return m_name;
}
void OAICreateKnowledgeBase_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateKnowledgeBase_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateKnowledgeBase_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateKnowledgeBase_request_renderingConfiguration OAICreateKnowledgeBase_request::getRenderingConfiguration() const {
    return m_rendering_configuration;
}
void OAICreateKnowledgeBase_request::setRenderingConfiguration(const OAICreateKnowledgeBase_request_renderingConfiguration &rendering_configuration) {
    m_rendering_configuration = rendering_configuration;
    m_rendering_configuration_isSet = true;
}

bool OAICreateKnowledgeBase_request::is_rendering_configuration_Set() const{
    return m_rendering_configuration_isSet;
}

bool OAICreateKnowledgeBase_request::is_rendering_configuration_Valid() const{
    return m_rendering_configuration_isValid;
}

OAICreateAssistant_request_serverSideEncryptionConfiguration OAICreateKnowledgeBase_request::getServerSideEncryptionConfiguration() const {
    return m_server_side_encryption_configuration;
}
void OAICreateKnowledgeBase_request::setServerSideEncryptionConfiguration(const OAICreateAssistant_request_serverSideEncryptionConfiguration &server_side_encryption_configuration) {
    m_server_side_encryption_configuration = server_side_encryption_configuration;
    m_server_side_encryption_configuration_isSet = true;
}

bool OAICreateKnowledgeBase_request::is_server_side_encryption_configuration_Set() const{
    return m_server_side_encryption_configuration_isSet;
}

bool OAICreateKnowledgeBase_request::is_server_side_encryption_configuration_Valid() const{
    return m_server_side_encryption_configuration_isValid;
}

OAICreateKnowledgeBase_request_sourceConfiguration OAICreateKnowledgeBase_request::getSourceConfiguration() const {
    return m_source_configuration;
}
void OAICreateKnowledgeBase_request::setSourceConfiguration(const OAICreateKnowledgeBase_request_sourceConfiguration &source_configuration) {
    m_source_configuration = source_configuration;
    m_source_configuration_isSet = true;
}

bool OAICreateKnowledgeBase_request::is_source_configuration_Set() const{
    return m_source_configuration_isSet;
}

bool OAICreateKnowledgeBase_request::is_source_configuration_Valid() const{
    return m_source_configuration_isValid;
}

QMap<QString, QString> OAICreateKnowledgeBase_request::getTags() const {
    return m_tags;
}
void OAICreateKnowledgeBase_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateKnowledgeBase_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateKnowledgeBase_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateKnowledgeBase_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendering_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateKnowledgeBase_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_knowledge_base_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
