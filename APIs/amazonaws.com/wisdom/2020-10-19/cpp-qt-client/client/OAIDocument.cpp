/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_content_reference_isSet = false;
    m_content_reference_isValid = false;

    m_excerpt_isSet = false;
    m_excerpt_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_content_reference_isValid = ::OpenAPI::fromJsonValue(m_content_reference, json[QString("contentReference")]);
    m_content_reference_isSet = !json[QString("contentReference")].isNull() && m_content_reference_isValid;

    m_excerpt_isValid = ::OpenAPI::fromJsonValue(m_excerpt, json[QString("excerpt")]);
    m_excerpt_isSet = !json[QString("excerpt")].isNull() && m_excerpt_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_content_reference.isSet()) {
        obj.insert(QString("contentReference"), ::OpenAPI::toJsonValue(m_content_reference));
    }
    if (m_excerpt.isSet()) {
        obj.insert(QString("excerpt"), ::OpenAPI::toJsonValue(m_excerpt));
    }
    if (m_title.isSet()) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIDocument_contentReference OAIDocument::getContentReference() const {
    return m_content_reference;
}
void OAIDocument::setContentReference(const OAIDocument_contentReference &content_reference) {
    m_content_reference = content_reference;
    m_content_reference_isSet = true;
}

bool OAIDocument::is_content_reference_Set() const{
    return m_content_reference_isSet;
}

bool OAIDocument::is_content_reference_Valid() const{
    return m_content_reference_isValid;
}

OAIDocument_excerpt OAIDocument::getExcerpt() const {
    return m_excerpt;
}
void OAIDocument::setExcerpt(const OAIDocument_excerpt &excerpt) {
    m_excerpt = excerpt;
    m_excerpt_isSet = true;
}

bool OAIDocument::is_excerpt_Set() const{
    return m_excerpt_isSet;
}

bool OAIDocument::is_excerpt_Valid() const{
    return m_excerpt_isValid;
}

OAIDocument_title OAIDocument::getTitle() const {
    return m_title;
}
void OAIDocument::setTitle(const OAIDocument_title &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDocument::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDocument::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excerpt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_reference_isValid && true;
}

} // namespace OpenAPI
