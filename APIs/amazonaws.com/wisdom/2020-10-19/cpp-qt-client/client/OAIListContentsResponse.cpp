/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListContentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListContentsResponse::OAIListContentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListContentsResponse::OAIListContentsResponse() {
    this->initializeModel();
}

OAIListContentsResponse::~OAIListContentsResponse() {}

void OAIListContentsResponse::initializeModel() {

    m_content_summaries_isSet = false;
    m_content_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListContentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListContentsResponse::fromJsonObject(QJsonObject json) {

    m_content_summaries_isValid = ::OpenAPI::fromJsonValue(m_content_summaries, json[QString("contentSummaries")]);
    m_content_summaries_isSet = !json[QString("contentSummaries")].isNull() && m_content_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListContentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListContentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content_summaries.isSet()) {
        obj.insert(QString("contentSummaries"), ::OpenAPI::toJsonValue(m_content_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListContentsResponse::getContentSummaries() const {
    return m_content_summaries;
}
void OAIListContentsResponse::setContentSummaries(const QList &content_summaries) {
    m_content_summaries = content_summaries;
    m_content_summaries_isSet = true;
}

bool OAIListContentsResponse::is_content_summaries_Set() const{
    return m_content_summaries_isSet;
}

bool OAIListContentsResponse::is_content_summaries_Valid() const{
    return m_content_summaries_isValid;
}

QString OAIListContentsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListContentsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListContentsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListContentsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListContentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListContentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_summaries_isValid && true;
}

} // namespace OpenAPI
