/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentReference::OAIContentReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentReference::OAIContentReference() {
    this->initializeModel();
}

OAIContentReference::~OAIContentReference() {}

void OAIContentReference::initializeModel() {

    m_content_arn_isSet = false;
    m_content_arn_isValid = false;

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_knowledge_base_arn_isSet = false;
    m_knowledge_base_arn_isValid = false;

    m_knowledge_base_id_isSet = false;
    m_knowledge_base_id_isValid = false;
}

void OAIContentReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentReference::fromJsonObject(QJsonObject json) {

    m_content_arn_isValid = ::OpenAPI::fromJsonValue(m_content_arn, json[QString("contentArn")]);
    m_content_arn_isSet = !json[QString("contentArn")].isNull() && m_content_arn_isValid;

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("contentId")]);
    m_content_id_isSet = !json[QString("contentId")].isNull() && m_content_id_isValid;

    m_knowledge_base_arn_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_arn, json[QString("knowledgeBaseArn")]);
    m_knowledge_base_arn_isSet = !json[QString("knowledgeBaseArn")].isNull() && m_knowledge_base_arn_isValid;

    m_knowledge_base_id_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_id, json[QString("knowledgeBaseId")]);
    m_knowledge_base_id_isSet = !json[QString("knowledgeBaseId")].isNull() && m_knowledge_base_id_isValid;
}

QString OAIContentReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentReference::asJsonObject() const {
    QJsonObject obj;
    if (m_content_arn_isSet) {
        obj.insert(QString("contentArn"), ::OpenAPI::toJsonValue(m_content_arn));
    }
    if (m_content_id_isSet) {
        obj.insert(QString("contentId"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_knowledge_base_arn_isSet) {
        obj.insert(QString("knowledgeBaseArn"), ::OpenAPI::toJsonValue(m_knowledge_base_arn));
    }
    if (m_knowledge_base_id_isSet) {
        obj.insert(QString("knowledgeBaseId"), ::OpenAPI::toJsonValue(m_knowledge_base_id));
    }
    return obj;
}

QString OAIContentReference::getContentArn() const {
    return m_content_arn;
}
void OAIContentReference::setContentArn(const QString &content_arn) {
    m_content_arn = content_arn;
    m_content_arn_isSet = true;
}

bool OAIContentReference::is_content_arn_Set() const{
    return m_content_arn_isSet;
}

bool OAIContentReference::is_content_arn_Valid() const{
    return m_content_arn_isValid;
}

QString OAIContentReference::getContentId() const {
    return m_content_id;
}
void OAIContentReference::setContentId(const QString &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAIContentReference::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAIContentReference::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QString OAIContentReference::getKnowledgeBaseArn() const {
    return m_knowledge_base_arn;
}
void OAIContentReference::setKnowledgeBaseArn(const QString &knowledge_base_arn) {
    m_knowledge_base_arn = knowledge_base_arn;
    m_knowledge_base_arn_isSet = true;
}

bool OAIContentReference::is_knowledge_base_arn_Set() const{
    return m_knowledge_base_arn_isSet;
}

bool OAIContentReference::is_knowledge_base_arn_Valid() const{
    return m_knowledge_base_arn_isValid;
}

QString OAIContentReference::getKnowledgeBaseId() const {
    return m_knowledge_base_id;
}
void OAIContentReference::setKnowledgeBaseId(const QString &knowledge_base_id) {
    m_knowledge_base_id = knowledge_base_id;
    m_knowledge_base_id_isSet = true;
}

bool OAIContentReference::is_knowledge_base_id_Set() const{
    return m_knowledge_base_id_isSet;
}

bool OAIContentReference::is_knowledge_base_id_Valid() const{
    return m_knowledge_base_id_isValid;
}

bool OAIContentReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
