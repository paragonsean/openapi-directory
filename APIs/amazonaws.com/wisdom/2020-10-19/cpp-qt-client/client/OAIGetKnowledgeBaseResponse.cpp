/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetKnowledgeBaseResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetKnowledgeBaseResponse::OAIGetKnowledgeBaseResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetKnowledgeBaseResponse::OAIGetKnowledgeBaseResponse() {
    this->initializeModel();
}

OAIGetKnowledgeBaseResponse::~OAIGetKnowledgeBaseResponse() {}

void OAIGetKnowledgeBaseResponse::initializeModel() {

    m_knowledge_base_isSet = false;
    m_knowledge_base_isValid = false;
}

void OAIGetKnowledgeBaseResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetKnowledgeBaseResponse::fromJsonObject(QJsonObject json) {

    m_knowledge_base_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base, json[QString("knowledgeBase")]);
    m_knowledge_base_isSet = !json[QString("knowledgeBase")].isNull() && m_knowledge_base_isValid;
}

QString OAIGetKnowledgeBaseResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetKnowledgeBaseResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_knowledge_base.isSet()) {
        obj.insert(QString("knowledgeBase"), ::OpenAPI::toJsonValue(m_knowledge_base));
    }
    return obj;
}

OAICreateKnowledgeBaseResponse_knowledgeBase OAIGetKnowledgeBaseResponse::getKnowledgeBase() const {
    return m_knowledge_base;
}
void OAIGetKnowledgeBaseResponse::setKnowledgeBase(const OAICreateKnowledgeBaseResponse_knowledgeBase &knowledge_base) {
    m_knowledge_base = knowledge_base;
    m_knowledge_base_isSet = true;
}

bool OAIGetKnowledgeBaseResponse::is_knowledge_base_Set() const{
    return m_knowledge_base_isSet;
}

bool OAIGetKnowledgeBaseResponse::is_knowledge_base_Valid() const{
    return m_knowledge_base_isValid;
}

bool OAIGetKnowledgeBaseResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_knowledge_base.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetKnowledgeBaseResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
