/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssistantAssociationData_associationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssistantAssociationData_associationData::OAIAssistantAssociationData_associationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssistantAssociationData_associationData::OAIAssistantAssociationData_associationData() {
    this->initializeModel();
}

OAIAssistantAssociationData_associationData::~OAIAssistantAssociationData_associationData() {}

void OAIAssistantAssociationData_associationData::initializeModel() {

    m_knowledge_base_association_isSet = false;
    m_knowledge_base_association_isValid = false;
}

void OAIAssistantAssociationData_associationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssistantAssociationData_associationData::fromJsonObject(QJsonObject json) {

    m_knowledge_base_association_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_association, json[QString("knowledgeBaseAssociation")]);
    m_knowledge_base_association_isSet = !json[QString("knowledgeBaseAssociation")].isNull() && m_knowledge_base_association_isValid;
}

QString OAIAssistantAssociationData_associationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssistantAssociationData_associationData::asJsonObject() const {
    QJsonObject obj;
    if (m_knowledge_base_association.isSet()) {
        obj.insert(QString("knowledgeBaseAssociation"), ::OpenAPI::toJsonValue(m_knowledge_base_association));
    }
    return obj;
}

OAIAssistantAssociationOutputData_knowledgeBaseAssociation OAIAssistantAssociationData_associationData::getKnowledgeBaseAssociation() const {
    return m_knowledge_base_association;
}
void OAIAssistantAssociationData_associationData::setKnowledgeBaseAssociation(const OAIAssistantAssociationOutputData_knowledgeBaseAssociation &knowledge_base_association) {
    m_knowledge_base_association = knowledge_base_association;
    m_knowledge_base_association_isSet = true;
}

bool OAIAssistantAssociationData_associationData::is_knowledge_base_association_Set() const{
    return m_knowledge_base_association_isSet;
}

bool OAIAssistantAssociationData_associationData::is_knowledge_base_association_Valid() const{
    return m_knowledge_base_association_isValid;
}

bool OAIAssistantAssociationData_associationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_knowledge_base_association.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssistantAssociationData_associationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
