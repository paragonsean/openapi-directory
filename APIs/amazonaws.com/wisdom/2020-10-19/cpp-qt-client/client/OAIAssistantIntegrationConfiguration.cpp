/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssistantIntegrationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssistantIntegrationConfiguration::OAIAssistantIntegrationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssistantIntegrationConfiguration::OAIAssistantIntegrationConfiguration() {
    this->initializeModel();
}

OAIAssistantIntegrationConfiguration::~OAIAssistantIntegrationConfiguration() {}

void OAIAssistantIntegrationConfiguration::initializeModel() {

    m_topic_integration_arn_isSet = false;
    m_topic_integration_arn_isValid = false;
}

void OAIAssistantIntegrationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssistantIntegrationConfiguration::fromJsonObject(QJsonObject json) {

    m_topic_integration_arn_isValid = ::OpenAPI::fromJsonValue(m_topic_integration_arn, json[QString("topicIntegrationArn")]);
    m_topic_integration_arn_isSet = !json[QString("topicIntegrationArn")].isNull() && m_topic_integration_arn_isValid;
}

QString OAIAssistantIntegrationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssistantIntegrationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_topic_integration_arn_isSet) {
        obj.insert(QString("topicIntegrationArn"), ::OpenAPI::toJsonValue(m_topic_integration_arn));
    }
    return obj;
}

QString OAIAssistantIntegrationConfiguration::getTopicIntegrationArn() const {
    return m_topic_integration_arn;
}
void OAIAssistantIntegrationConfiguration::setTopicIntegrationArn(const QString &topic_integration_arn) {
    m_topic_integration_arn = topic_integration_arn;
    m_topic_integration_arn_isSet = true;
}

bool OAIAssistantIntegrationConfiguration::is_topic_integration_arn_Set() const{
    return m_topic_integration_arn_isSet;
}

bool OAIAssistantIntegrationConfiguration::is_topic_integration_arn_Valid() const{
    return m_topic_integration_arn_isValid;
}

bool OAIAssistantIntegrationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_topic_integration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssistantIntegrationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
