/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryAssistant_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryAssistant_request::OAIQueryAssistant_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryAssistant_request::OAIQueryAssistant_request() {
    this->initializeModel();
}

OAIQueryAssistant_request::~OAIQueryAssistant_request() {}

void OAIQueryAssistant_request::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_query_text_isSet = false;
    m_query_text_isValid = false;
}

void OAIQueryAssistant_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryAssistant_request::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_query_text_isValid = ::OpenAPI::fromJsonValue(m_query_text, json[QString("queryText")]);
    m_query_text_isSet = !json[QString("queryText")].isNull() && m_query_text_isValid;
}

QString OAIQueryAssistant_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryAssistant_request::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_query_text_isSet) {
        obj.insert(QString("queryText"), ::OpenAPI::toJsonValue(m_query_text));
    }
    return obj;
}

qint32 OAIQueryAssistant_request::getMaxResults() const {
    return m_max_results;
}
void OAIQueryAssistant_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIQueryAssistant_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIQueryAssistant_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIQueryAssistant_request::getNextToken() const {
    return m_next_token;
}
void OAIQueryAssistant_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIQueryAssistant_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIQueryAssistant_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIQueryAssistant_request::getQueryText() const {
    return m_query_text;
}
void OAIQueryAssistant_request::setQueryText(const QString &query_text) {
    m_query_text = query_text;
    m_query_text_isSet = true;
}

bool OAIQueryAssistant_request::is_query_text_Set() const{
    return m_query_text_isSet;
}

bool OAIQueryAssistant_request::is_query_text_Valid() const{
    return m_query_text_isValid;
}

bool OAIQueryAssistant_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryAssistant_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_text_isValid && true;
}

} // namespace OpenAPI
