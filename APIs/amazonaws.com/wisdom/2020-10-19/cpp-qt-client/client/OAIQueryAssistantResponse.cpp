/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryAssistantResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryAssistantResponse::OAIQueryAssistantResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryAssistantResponse::OAIQueryAssistantResponse() {
    this->initializeModel();
}

OAIQueryAssistantResponse::~OAIQueryAssistantResponse() {}

void OAIQueryAssistantResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIQueryAssistantResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryAssistantResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAIQueryAssistantResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryAssistantResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_results.isSet()) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

QString OAIQueryAssistantResponse::getNextToken() const {
    return m_next_token;
}
void OAIQueryAssistantResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIQueryAssistantResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIQueryAssistantResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIQueryAssistantResponse::getResults() const {
    return m_results;
}
void OAIQueryAssistantResponse::setResults(const QList &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIQueryAssistantResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAIQueryAssistantResponse::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIQueryAssistantResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryAssistantResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_results_isValid && true;
}

} // namespace OpenAPI
