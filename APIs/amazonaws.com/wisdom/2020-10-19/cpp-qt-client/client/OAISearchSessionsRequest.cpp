/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchSessionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchSessionsRequest::OAISearchSessionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchSessionsRequest::OAISearchSessionsRequest() {
    this->initializeModel();
}

OAISearchSessionsRequest::~OAISearchSessionsRequest() {}

void OAISearchSessionsRequest::initializeModel() {

    m_search_expression_isSet = false;
    m_search_expression_isValid = false;
}

void OAISearchSessionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchSessionsRequest::fromJsonObject(QJsonObject json) {

    m_search_expression_isValid = ::OpenAPI::fromJsonValue(m_search_expression, json[QString("searchExpression")]);
    m_search_expression_isSet = !json[QString("searchExpression")].isNull() && m_search_expression_isValid;
}

QString OAISearchSessionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchSessionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_search_expression.isSet()) {
        obj.insert(QString("searchExpression"), ::OpenAPI::toJsonValue(m_search_expression));
    }
    return obj;
}

OAISearchContentRequest_searchExpression OAISearchSessionsRequest::getSearchExpression() const {
    return m_search_expression;
}
void OAISearchSessionsRequest::setSearchExpression(const OAISearchContentRequest_searchExpression &search_expression) {
    m_search_expression = search_expression;
    m_search_expression_isSet = true;
}

bool OAISearchSessionsRequest::is_search_expression_Set() const{
    return m_search_expression_isSet;
}

bool OAISearchSessionsRequest::is_search_expression_Valid() const{
    return m_search_expression_isValid;
}

bool OAISearchSessionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchSessionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_search_expression_isValid && true;
}

} // namespace OpenAPI
