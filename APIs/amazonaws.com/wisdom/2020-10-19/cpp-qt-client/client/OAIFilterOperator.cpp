/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterOperator::OAIFilterOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterOperator::OAIFilterOperator() {
    this->initializeModel();
}

OAIFilterOperator::~OAIFilterOperator() {}

void OAIFilterOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFilterOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFilterOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("EQUALS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterOperator::EQUALS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFilterOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFilterOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFilterOperator::EQUALS:
            val = "EQUALS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFilterOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFilterOperator::eOAIFilterOperator OAIFilterOperator::getValue() const {
    return m_value;
}

void OAIFilterOperator::setValue(const OAIFilterOperator::eOAIFilterOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFilterOperator::isSet() const {
    
    return m_value_isSet;
}

bool OAIFilterOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
