/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifyRecommendationsReceivedError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifyRecommendationsReceivedError::OAINotifyRecommendationsReceivedError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifyRecommendationsReceivedError::OAINotifyRecommendationsReceivedError() {
    this->initializeModel();
}

OAINotifyRecommendationsReceivedError::~OAINotifyRecommendationsReceivedError() {}

void OAINotifyRecommendationsReceivedError::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;
}

void OAINotifyRecommendationsReceivedError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifyRecommendationsReceivedError::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("recommendationId")]);
    m_recommendation_id_isSet = !json[QString("recommendationId")].isNull() && m_recommendation_id_isValid;
}

QString OAINotifyRecommendationsReceivedError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifyRecommendationsReceivedError::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("recommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    return obj;
}

QString OAINotifyRecommendationsReceivedError::getMessage() const {
    return m_message;
}
void OAINotifyRecommendationsReceivedError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINotifyRecommendationsReceivedError::is_message_Set() const{
    return m_message_isSet;
}

bool OAINotifyRecommendationsReceivedError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAINotifyRecommendationsReceivedError::getRecommendationId() const {
    return m_recommendation_id;
}
void OAINotifyRecommendationsReceivedError::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAINotifyRecommendationsReceivedError::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAINotifyRecommendationsReceivedError::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

bool OAINotifyRecommendationsReceivedError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifyRecommendationsReceivedError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
