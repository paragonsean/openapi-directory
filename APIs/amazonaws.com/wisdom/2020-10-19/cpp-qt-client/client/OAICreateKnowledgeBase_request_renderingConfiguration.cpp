/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateKnowledgeBase_request_renderingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateKnowledgeBase_request_renderingConfiguration::OAICreateKnowledgeBase_request_renderingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateKnowledgeBase_request_renderingConfiguration::OAICreateKnowledgeBase_request_renderingConfiguration() {
    this->initializeModel();
}

OAICreateKnowledgeBase_request_renderingConfiguration::~OAICreateKnowledgeBase_request_renderingConfiguration() {}

void OAICreateKnowledgeBase_request_renderingConfiguration::initializeModel() {

    m_template_uri_isSet = false;
    m_template_uri_isValid = false;
}

void OAICreateKnowledgeBase_request_renderingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateKnowledgeBase_request_renderingConfiguration::fromJsonObject(QJsonObject json) {

    m_template_uri_isValid = ::OpenAPI::fromJsonValue(m_template_uri, json[QString("templateUri")]);
    m_template_uri_isSet = !json[QString("templateUri")].isNull() && m_template_uri_isValid;
}

QString OAICreateKnowledgeBase_request_renderingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateKnowledgeBase_request_renderingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_template_uri_isSet) {
        obj.insert(QString("templateUri"), ::OpenAPI::toJsonValue(m_template_uri));
    }
    return obj;
}

QString OAICreateKnowledgeBase_request_renderingConfiguration::getTemplateUri() const {
    return m_template_uri;
}
void OAICreateKnowledgeBase_request_renderingConfiguration::setTemplateUri(const QString &template_uri) {
    m_template_uri = template_uri;
    m_template_uri_isSet = true;
}

bool OAICreateKnowledgeBase_request_renderingConfiguration::is_template_uri_Set() const{
    return m_template_uri_isSet;
}

bool OAICreateKnowledgeBase_request_renderingConfiguration::is_template_uri_Valid() const{
    return m_template_uri_isValid;
}

bool OAICreateKnowledgeBase_request_renderingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_template_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateKnowledgeBase_request_renderingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
