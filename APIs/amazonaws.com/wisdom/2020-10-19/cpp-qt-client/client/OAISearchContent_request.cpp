/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchContent_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchContent_request::OAISearchContent_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchContent_request::OAISearchContent_request() {
    this->initializeModel();
}

OAISearchContent_request::~OAISearchContent_request() {}

void OAISearchContent_request::initializeModel() {

    m_search_expression_isSet = false;
    m_search_expression_isValid = false;
}

void OAISearchContent_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchContent_request::fromJsonObject(QJsonObject json) {

    m_search_expression_isValid = ::OpenAPI::fromJsonValue(m_search_expression, json[QString("searchExpression")]);
    m_search_expression_isSet = !json[QString("searchExpression")].isNull() && m_search_expression_isValid;
}

QString OAISearchContent_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchContent_request::asJsonObject() const {
    QJsonObject obj;
    if (m_search_expression.isSet()) {
        obj.insert(QString("searchExpression"), ::OpenAPI::toJsonValue(m_search_expression));
    }
    return obj;
}

OAISearchContent_request_searchExpression OAISearchContent_request::getSearchExpression() const {
    return m_search_expression;
}
void OAISearchContent_request::setSearchExpression(const OAISearchContent_request_searchExpression &search_expression) {
    m_search_expression = search_expression;
    m_search_expression_isSet = true;
}

bool OAISearchContent_request::is_search_expression_Set() const{
    return m_search_expression_isSet;
}

bool OAISearchContent_request::is_search_expression_Valid() const{
    return m_search_expression_isValid;
}

bool OAISearchContent_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchContent_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_search_expression_isValid && true;
}

} // namespace OpenAPI
