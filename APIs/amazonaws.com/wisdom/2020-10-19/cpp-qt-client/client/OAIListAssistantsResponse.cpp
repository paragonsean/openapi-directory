/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAssistantsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAssistantsResponse::OAIListAssistantsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAssistantsResponse::OAIListAssistantsResponse() {
    this->initializeModel();
}

OAIListAssistantsResponse::~OAIListAssistantsResponse() {}

void OAIListAssistantsResponse::initializeModel() {

    m_assistant_summaries_isSet = false;
    m_assistant_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAssistantsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAssistantsResponse::fromJsonObject(QJsonObject json) {

    m_assistant_summaries_isValid = ::OpenAPI::fromJsonValue(m_assistant_summaries, json[QString("assistantSummaries")]);
    m_assistant_summaries_isSet = !json[QString("assistantSummaries")].isNull() && m_assistant_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAssistantsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAssistantsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assistant_summaries.isSet()) {
        obj.insert(QString("assistantSummaries"), ::OpenAPI::toJsonValue(m_assistant_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAssistantsResponse::getAssistantSummaries() const {
    return m_assistant_summaries;
}
void OAIListAssistantsResponse::setAssistantSummaries(const QList &assistant_summaries) {
    m_assistant_summaries = assistant_summaries;
    m_assistant_summaries_isSet = true;
}

bool OAIListAssistantsResponse::is_assistant_summaries_Set() const{
    return m_assistant_summaries_isSet;
}

bool OAIListAssistantsResponse::is_assistant_summaries_Valid() const{
    return m_assistant_summaries_isValid;
}

QString OAIListAssistantsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAssistantsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAssistantsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAssistantsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAssistantsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assistant_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAssistantsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assistant_summaries_isValid && true;
}

} // namespace OpenAPI
