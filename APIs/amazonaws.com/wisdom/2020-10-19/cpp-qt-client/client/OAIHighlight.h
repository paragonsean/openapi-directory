/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHighlight.h
 *
 * Offset specification to describe highlighting of document excerpts for rendering search results and recommendations.
 */

#ifndef OAIHighlight_H
#define OAIHighlight_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHighlight : public OAIObject {
public:
    OAIHighlight();
    OAIHighlight(QString json);
    ~OAIHighlight() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBeginOffsetInclusive() const;
    void setBeginOffsetInclusive(const qint32 &begin_offset_inclusive);
    bool is_begin_offset_inclusive_Set() const;
    bool is_begin_offset_inclusive_Valid() const;

    qint32 getEndOffsetExclusive() const;
    void setEndOffsetExclusive(const qint32 &end_offset_exclusive);
    bool is_end_offset_exclusive_Set() const;
    bool is_end_offset_exclusive_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_begin_offset_inclusive;
    bool m_begin_offset_inclusive_isSet;
    bool m_begin_offset_inclusive_isValid;

    qint32 m_end_offset_exclusive;
    bool m_end_offset_exclusive_isSet;
    bool m_end_offset_exclusive_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHighlight)

#endif // OAIHighlight_H
