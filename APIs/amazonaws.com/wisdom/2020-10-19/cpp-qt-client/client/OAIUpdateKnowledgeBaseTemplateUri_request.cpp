/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateKnowledgeBaseTemplateUri_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateKnowledgeBaseTemplateUri_request::OAIUpdateKnowledgeBaseTemplateUri_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateKnowledgeBaseTemplateUri_request::OAIUpdateKnowledgeBaseTemplateUri_request() {
    this->initializeModel();
}

OAIUpdateKnowledgeBaseTemplateUri_request::~OAIUpdateKnowledgeBaseTemplateUri_request() {}

void OAIUpdateKnowledgeBaseTemplateUri_request::initializeModel() {

    m_template_uri_isSet = false;
    m_template_uri_isValid = false;
}

void OAIUpdateKnowledgeBaseTemplateUri_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateKnowledgeBaseTemplateUri_request::fromJsonObject(QJsonObject json) {

    m_template_uri_isValid = ::OpenAPI::fromJsonValue(m_template_uri, json[QString("templateUri")]);
    m_template_uri_isSet = !json[QString("templateUri")].isNull() && m_template_uri_isValid;
}

QString OAIUpdateKnowledgeBaseTemplateUri_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateKnowledgeBaseTemplateUri_request::asJsonObject() const {
    QJsonObject obj;
    if (m_template_uri_isSet) {
        obj.insert(QString("templateUri"), ::OpenAPI::toJsonValue(m_template_uri));
    }
    return obj;
}

QString OAIUpdateKnowledgeBaseTemplateUri_request::getTemplateUri() const {
    return m_template_uri;
}
void OAIUpdateKnowledgeBaseTemplateUri_request::setTemplateUri(const QString &template_uri) {
    m_template_uri = template_uri;
    m_template_uri_isSet = true;
}

bool OAIUpdateKnowledgeBaseTemplateUri_request::is_template_uri_Set() const{
    return m_template_uri_isSet;
}

bool OAIUpdateKnowledgeBaseTemplateUri_request::is_template_uri_Valid() const{
    return m_template_uri_isValid;
}

bool OAIUpdateKnowledgeBaseTemplateUri_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_template_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateKnowledgeBaseTemplateUri_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_template_uri_isValid && true;
}

} // namespace OpenAPI
