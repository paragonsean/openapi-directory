/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerSideEncryptionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerSideEncryptionConfiguration::OAIServerSideEncryptionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerSideEncryptionConfiguration::OAIServerSideEncryptionConfiguration() {
    this->initializeModel();
}

OAIServerSideEncryptionConfiguration::~OAIServerSideEncryptionConfiguration() {}

void OAIServerSideEncryptionConfiguration::initializeModel() {

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAIServerSideEncryptionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerSideEncryptionConfiguration::fromJsonObject(QJsonObject json) {

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;
}

QString OAIServerSideEncryptionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerSideEncryptionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

QString OAIServerSideEncryptionConfiguration::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIServerSideEncryptionConfiguration::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIServerSideEncryptionConfiguration::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIServerSideEncryptionConfiguration::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIServerSideEncryptionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerSideEncryptionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
