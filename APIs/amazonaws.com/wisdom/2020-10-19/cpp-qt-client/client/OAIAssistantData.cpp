/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssistantData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssistantData::OAIAssistantData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssistantData::OAIAssistantData() {
    this->initializeModel();
}

OAIAssistantData::~OAIAssistantData() {}

void OAIAssistantData::initializeModel() {

    m_assistant_arn_isSet = false;
    m_assistant_arn_isValid = false;

    m_assistant_id_isSet = false;
    m_assistant_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_integration_configuration_isSet = false;
    m_integration_configuration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_server_side_encryption_configuration_isSet = false;
    m_server_side_encryption_configuration_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAssistantData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssistantData::fromJsonObject(QJsonObject json) {

    m_assistant_arn_isValid = ::OpenAPI::fromJsonValue(m_assistant_arn, json[QString("assistantArn")]);
    m_assistant_arn_isSet = !json[QString("assistantArn")].isNull() && m_assistant_arn_isValid;

    m_assistant_id_isValid = ::OpenAPI::fromJsonValue(m_assistant_id, json[QString("assistantId")]);
    m_assistant_id_isSet = !json[QString("assistantId")].isNull() && m_assistant_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_integration_configuration_isValid = ::OpenAPI::fromJsonValue(m_integration_configuration, json[QString("integrationConfiguration")]);
    m_integration_configuration_isSet = !json[QString("integrationConfiguration")].isNull() && m_integration_configuration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_server_side_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption_configuration, json[QString("serverSideEncryptionConfiguration")]);
    m_server_side_encryption_configuration_isSet = !json[QString("serverSideEncryptionConfiguration")].isNull() && m_server_side_encryption_configuration_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAssistantData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssistantData::asJsonObject() const {
    QJsonObject obj;
    if (m_assistant_arn_isSet) {
        obj.insert(QString("assistantArn"), ::OpenAPI::toJsonValue(m_assistant_arn));
    }
    if (m_assistant_id_isSet) {
        obj.insert(QString("assistantId"), ::OpenAPI::toJsonValue(m_assistant_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_integration_configuration.isSet()) {
        obj.insert(QString("integrationConfiguration"), ::OpenAPI::toJsonValue(m_integration_configuration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_server_side_encryption_configuration.isSet()) {
        obj.insert(QString("serverSideEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_server_side_encryption_configuration));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAssistantData::getAssistantArn() const {
    return m_assistant_arn;
}
void OAIAssistantData::setAssistantArn(const QString &assistant_arn) {
    m_assistant_arn = assistant_arn;
    m_assistant_arn_isSet = true;
}

bool OAIAssistantData::is_assistant_arn_Set() const{
    return m_assistant_arn_isSet;
}

bool OAIAssistantData::is_assistant_arn_Valid() const{
    return m_assistant_arn_isValid;
}

QString OAIAssistantData::getAssistantId() const {
    return m_assistant_id;
}
void OAIAssistantData::setAssistantId(const QString &assistant_id) {
    m_assistant_id = assistant_id;
    m_assistant_id_isSet = true;
}

bool OAIAssistantData::is_assistant_id_Set() const{
    return m_assistant_id_isSet;
}

bool OAIAssistantData::is_assistant_id_Valid() const{
    return m_assistant_id_isValid;
}

QString OAIAssistantData::getDescription() const {
    return m_description;
}
void OAIAssistantData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssistantData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssistantData::is_description_Valid() const{
    return m_description_isValid;
}

OAIAssistantData_integrationConfiguration OAIAssistantData::getIntegrationConfiguration() const {
    return m_integration_configuration;
}
void OAIAssistantData::setIntegrationConfiguration(const OAIAssistantData_integrationConfiguration &integration_configuration) {
    m_integration_configuration = integration_configuration;
    m_integration_configuration_isSet = true;
}

bool OAIAssistantData::is_integration_configuration_Set() const{
    return m_integration_configuration_isSet;
}

bool OAIAssistantData::is_integration_configuration_Valid() const{
    return m_integration_configuration_isValid;
}

QString OAIAssistantData::getName() const {
    return m_name;
}
void OAIAssistantData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssistantData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssistantData::is_name_Valid() const{
    return m_name_isValid;
}

OAIAssistantData_serverSideEncryptionConfiguration OAIAssistantData::getServerSideEncryptionConfiguration() const {
    return m_server_side_encryption_configuration;
}
void OAIAssistantData::setServerSideEncryptionConfiguration(const OAIAssistantData_serverSideEncryptionConfiguration &server_side_encryption_configuration) {
    m_server_side_encryption_configuration = server_side_encryption_configuration;
    m_server_side_encryption_configuration_isSet = true;
}

bool OAIAssistantData::is_server_side_encryption_configuration_Set() const{
    return m_server_side_encryption_configuration_isSet;
}

bool OAIAssistantData::is_server_side_encryption_configuration_Valid() const{
    return m_server_side_encryption_configuration_isValid;
}

OAIAssistantStatus OAIAssistantData::getStatus() const {
    return m_status;
}
void OAIAssistantData::setStatus(const OAIAssistantStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssistantData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssistantData::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIAssistantData::getTags() const {
    return m_tags;
}
void OAIAssistantData::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAssistantData::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAssistantData::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIAssistantType OAIAssistantData::getType() const {
    return m_type;
}
void OAIAssistantData::setType(const OAIAssistantType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAssistantData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAssistantData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAssistantData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assistant_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssistantData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assistant_arn_isValid && m_assistant_id_isValid && m_name_isValid && m_status_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
