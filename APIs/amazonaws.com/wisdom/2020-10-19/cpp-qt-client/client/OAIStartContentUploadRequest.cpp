/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartContentUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartContentUploadRequest::OAIStartContentUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartContentUploadRequest::OAIStartContentUploadRequest() {
    this->initializeModel();
}

OAIStartContentUploadRequest::~OAIStartContentUploadRequest() {}

void OAIStartContentUploadRequest::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;
}

void OAIStartContentUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartContentUploadRequest::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;
}

QString OAIStartContentUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartContentUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    return obj;
}

QString OAIStartContentUploadRequest::getContentType() const {
    return m_content_type;
}
void OAIStartContentUploadRequest::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIStartContentUploadRequest::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIStartContentUploadRequest::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIStartContentUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartContentUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_type_isValid && true;
}

} // namespace OpenAPI
