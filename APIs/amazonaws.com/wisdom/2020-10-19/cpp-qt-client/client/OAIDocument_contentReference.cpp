/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument_contentReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument_contentReference::OAIDocument_contentReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument_contentReference::OAIDocument_contentReference() {
    this->initializeModel();
}

OAIDocument_contentReference::~OAIDocument_contentReference() {}

void OAIDocument_contentReference::initializeModel() {

    m_content_arn_isSet = false;
    m_content_arn_isValid = false;

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_knowledge_base_arn_isSet = false;
    m_knowledge_base_arn_isValid = false;

    m_knowledge_base_id_isSet = false;
    m_knowledge_base_id_isValid = false;
}

void OAIDocument_contentReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument_contentReference::fromJsonObject(QJsonObject json) {

    m_content_arn_isValid = ::OpenAPI::fromJsonValue(m_content_arn, json[QString("contentArn")]);
    m_content_arn_isSet = !json[QString("contentArn")].isNull() && m_content_arn_isValid;

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("contentId")]);
    m_content_id_isSet = !json[QString("contentId")].isNull() && m_content_id_isValid;

    m_knowledge_base_arn_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_arn, json[QString("knowledgeBaseArn")]);
    m_knowledge_base_arn_isSet = !json[QString("knowledgeBaseArn")].isNull() && m_knowledge_base_arn_isValid;

    m_knowledge_base_id_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_id, json[QString("knowledgeBaseId")]);
    m_knowledge_base_id_isSet = !json[QString("knowledgeBaseId")].isNull() && m_knowledge_base_id_isValid;
}

QString OAIDocument_contentReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument_contentReference::asJsonObject() const {
    QJsonObject obj;
    if (m_content_arn_isSet) {
        obj.insert(QString("contentArn"), ::OpenAPI::toJsonValue(m_content_arn));
    }
    if (m_content_id_isSet) {
        obj.insert(QString("contentId"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_knowledge_base_arn_isSet) {
        obj.insert(QString("knowledgeBaseArn"), ::OpenAPI::toJsonValue(m_knowledge_base_arn));
    }
    if (m_knowledge_base_id_isSet) {
        obj.insert(QString("knowledgeBaseId"), ::OpenAPI::toJsonValue(m_knowledge_base_id));
    }
    return obj;
}

QString OAIDocument_contentReference::getContentArn() const {
    return m_content_arn;
}
void OAIDocument_contentReference::setContentArn(const QString &content_arn) {
    m_content_arn = content_arn;
    m_content_arn_isSet = true;
}

bool OAIDocument_contentReference::is_content_arn_Set() const{
    return m_content_arn_isSet;
}

bool OAIDocument_contentReference::is_content_arn_Valid() const{
    return m_content_arn_isValid;
}

QString OAIDocument_contentReference::getContentId() const {
    return m_content_id;
}
void OAIDocument_contentReference::setContentId(const QString &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAIDocument_contentReference::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAIDocument_contentReference::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QString OAIDocument_contentReference::getKnowledgeBaseArn() const {
    return m_knowledge_base_arn;
}
void OAIDocument_contentReference::setKnowledgeBaseArn(const QString &knowledge_base_arn) {
    m_knowledge_base_arn = knowledge_base_arn;
    m_knowledge_base_arn_isSet = true;
}

bool OAIDocument_contentReference::is_knowledge_base_arn_Set() const{
    return m_knowledge_base_arn_isSet;
}

bool OAIDocument_contentReference::is_knowledge_base_arn_Valid() const{
    return m_knowledge_base_arn_isValid;
}

QString OAIDocument_contentReference::getKnowledgeBaseId() const {
    return m_knowledge_base_id;
}
void OAIDocument_contentReference::setKnowledgeBaseId(const QString &knowledge_base_id) {
    m_knowledge_base_id = knowledge_base_id;
    m_knowledge_base_id_isSet = true;
}

bool OAIDocument_contentReference::is_knowledge_base_id_Set() const{
    return m_knowledge_base_id_isSet;
}

bool OAIDocument_contentReference::is_knowledge_base_id_Valid() const{
    return m_knowledge_base_id_isValid;
}

bool OAIDocument_contentReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument_contentReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
