/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentData::OAIContentData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentData::OAIContentData() {
    this->initializeModel();
}

OAIContentData::~OAIContentData() {}

void OAIContentData::initializeModel() {

    m_content_arn_isSet = false;
    m_content_arn_isValid = false;

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_knowledge_base_arn_isSet = false;
    m_knowledge_base_arn_isValid = false;

    m_knowledge_base_id_isSet = false;
    m_knowledge_base_id_isValid = false;

    m_link_out_uri_isSet = false;
    m_link_out_uri_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_expiry_isSet = false;
    m_url_expiry_isValid = false;
}

void OAIContentData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentData::fromJsonObject(QJsonObject json) {

    m_content_arn_isValid = ::OpenAPI::fromJsonValue(m_content_arn, json[QString("contentArn")]);
    m_content_arn_isSet = !json[QString("contentArn")].isNull() && m_content_arn_isValid;

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("contentId")]);
    m_content_id_isSet = !json[QString("contentId")].isNull() && m_content_id_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_knowledge_base_arn_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_arn, json[QString("knowledgeBaseArn")]);
    m_knowledge_base_arn_isSet = !json[QString("knowledgeBaseArn")].isNull() && m_knowledge_base_arn_isValid;

    m_knowledge_base_id_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_id, json[QString("knowledgeBaseId")]);
    m_knowledge_base_id_isSet = !json[QString("knowledgeBaseId")].isNull() && m_knowledge_base_id_isValid;

    m_link_out_uri_isValid = ::OpenAPI::fromJsonValue(m_link_out_uri, json[QString("linkOutUri")]);
    m_link_out_uri_isSet = !json[QString("linkOutUri")].isNull() && m_link_out_uri_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_expiry_isValid = ::OpenAPI::fromJsonValue(m_url_expiry, json[QString("urlExpiry")]);
    m_url_expiry_isSet = !json[QString("urlExpiry")].isNull() && m_url_expiry_isValid;
}

QString OAIContentData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentData::asJsonObject() const {
    QJsonObject obj;
    if (m_content_arn_isSet) {
        obj.insert(QString("contentArn"), ::OpenAPI::toJsonValue(m_content_arn));
    }
    if (m_content_id_isSet) {
        obj.insert(QString("contentId"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_knowledge_base_arn_isSet) {
        obj.insert(QString("knowledgeBaseArn"), ::OpenAPI::toJsonValue(m_knowledge_base_arn));
    }
    if (m_knowledge_base_id_isSet) {
        obj.insert(QString("knowledgeBaseId"), ::OpenAPI::toJsonValue(m_knowledge_base_id));
    }
    if (m_link_out_uri_isSet) {
        obj.insert(QString("linkOutUri"), ::OpenAPI::toJsonValue(m_link_out_uri));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_expiry_isSet) {
        obj.insert(QString("urlExpiry"), ::OpenAPI::toJsonValue(m_url_expiry));
    }
    return obj;
}

QString OAIContentData::getContentArn() const {
    return m_content_arn;
}
void OAIContentData::setContentArn(const QString &content_arn) {
    m_content_arn = content_arn;
    m_content_arn_isSet = true;
}

bool OAIContentData::is_content_arn_Set() const{
    return m_content_arn_isSet;
}

bool OAIContentData::is_content_arn_Valid() const{
    return m_content_arn_isValid;
}

QString OAIContentData::getContentId() const {
    return m_content_id;
}
void OAIContentData::setContentId(const QString &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAIContentData::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAIContentData::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QString OAIContentData::getContentType() const {
    return m_content_type;
}
void OAIContentData::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIContentData::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIContentData::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIContentData::getKnowledgeBaseArn() const {
    return m_knowledge_base_arn;
}
void OAIContentData::setKnowledgeBaseArn(const QString &knowledge_base_arn) {
    m_knowledge_base_arn = knowledge_base_arn;
    m_knowledge_base_arn_isSet = true;
}

bool OAIContentData::is_knowledge_base_arn_Set() const{
    return m_knowledge_base_arn_isSet;
}

bool OAIContentData::is_knowledge_base_arn_Valid() const{
    return m_knowledge_base_arn_isValid;
}

QString OAIContentData::getKnowledgeBaseId() const {
    return m_knowledge_base_id;
}
void OAIContentData::setKnowledgeBaseId(const QString &knowledge_base_id) {
    m_knowledge_base_id = knowledge_base_id;
    m_knowledge_base_id_isSet = true;
}

bool OAIContentData::is_knowledge_base_id_Set() const{
    return m_knowledge_base_id_isSet;
}

bool OAIContentData::is_knowledge_base_id_Valid() const{
    return m_knowledge_base_id_isValid;
}

QString OAIContentData::getLinkOutUri() const {
    return m_link_out_uri;
}
void OAIContentData::setLinkOutUri(const QString &link_out_uri) {
    m_link_out_uri = link_out_uri;
    m_link_out_uri_isSet = true;
}

bool OAIContentData::is_link_out_uri_Set() const{
    return m_link_out_uri_isSet;
}

bool OAIContentData::is_link_out_uri_Valid() const{
    return m_link_out_uri_isValid;
}

QMap OAIContentData::getMetadata() const {
    return m_metadata;
}
void OAIContentData::setMetadata(const QMap &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIContentData::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIContentData::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIContentData::getName() const {
    return m_name;
}
void OAIContentData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContentData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContentData::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContentData::getRevisionId() const {
    return m_revision_id;
}
void OAIContentData::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIContentData::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIContentData::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

OAIContentStatus OAIContentData::getStatus() const {
    return m_status;
}
void OAIContentData::setStatus(const OAIContentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIContentData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIContentData::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIContentData::getTags() const {
    return m_tags;
}
void OAIContentData::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIContentData::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIContentData::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIContentData::getTitle() const {
    return m_title;
}
void OAIContentData::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIContentData::is_title_Set() const{
    return m_title_isSet;
}

bool OAIContentData::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIContentData::getUrl() const {
    return m_url;
}
void OAIContentData::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContentData::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContentData::is_url_Valid() const{
    return m_url_isValid;
}

QDateTime OAIContentData::getUrlExpiry() const {
    return m_url_expiry;
}
void OAIContentData::setUrlExpiry(const QDateTime &url_expiry) {
    m_url_expiry = url_expiry;
    m_url_expiry_isSet = true;
}

bool OAIContentData::is_url_expiry_Set() const{
    return m_url_expiry_isSet;
}

bool OAIContentData::is_url_expiry_Valid() const{
    return m_url_expiry_isValid;
}

bool OAIContentData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_out_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_arn_isValid && m_content_id_isValid && m_content_type_isValid && m_knowledge_base_arn_isValid && m_knowledge_base_id_isValid && m_metadata_isValid && m_name_isValid && m_revision_id_isValid && m_status_isValid && m_title_isValid && m_url_isValid && m_url_expiry_isValid && true;
}

} // namespace OpenAPI
