/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecommendationTrigger.h
 *
 * A recommendation trigger provides context on the event that produced the referenced recommendations. Recommendations are only referenced in &lt;code&gt;recommendationIds&lt;/code&gt; by a single RecommendationTrigger.
 */

#ifndef OAIRecommendationTrigger_H
#define OAIRecommendationTrigger_H

#include <QJsonObject>

#include "OAIRecommendationSourceType.h"
#include "OAIRecommendationTriggerType.h"
#include "OAIRecommendationTrigger_data.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRecommendationTrigger_data;

class OAIRecommendationTrigger : public OAIObject {
public:
    OAIRecommendationTrigger();
    OAIRecommendationTrigger(QString json);
    ~OAIRecommendationTrigger() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRecommendationTrigger_data getData() const;
    void setData(const OAIRecommendationTrigger_data &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList getRecommendationIds() const;
    void setRecommendationIds(const QList &recommendation_ids);
    bool is_recommendation_ids_Set() const;
    bool is_recommendation_ids_Valid() const;

    OAIRecommendationSourceType getSource() const;
    void setSource(const OAIRecommendationSourceType &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    OAIRecommendationTriggerType getType() const;
    void setType(const OAIRecommendationTriggerType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRecommendationTrigger_data m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList m_recommendation_ids;
    bool m_recommendation_ids_isSet;
    bool m_recommendation_ids_isValid;

    OAIRecommendationSourceType m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    OAIRecommendationTriggerType m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecommendationTrigger)

#endif // OAIRecommendationTrigger_H
