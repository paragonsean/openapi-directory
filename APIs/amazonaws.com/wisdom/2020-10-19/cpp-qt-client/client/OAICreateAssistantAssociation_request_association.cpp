/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssistantAssociation_request_association.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssistantAssociation_request_association::OAICreateAssistantAssociation_request_association(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssistantAssociation_request_association::OAICreateAssistantAssociation_request_association() {
    this->initializeModel();
}

OAICreateAssistantAssociation_request_association::~OAICreateAssistantAssociation_request_association() {}

void OAICreateAssistantAssociation_request_association::initializeModel() {

    m_knowledge_base_id_isSet = false;
    m_knowledge_base_id_isValid = false;
}

void OAICreateAssistantAssociation_request_association::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssistantAssociation_request_association::fromJsonObject(QJsonObject json) {

    m_knowledge_base_id_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_id, json[QString("knowledgeBaseId")]);
    m_knowledge_base_id_isSet = !json[QString("knowledgeBaseId")].isNull() && m_knowledge_base_id_isValid;
}

QString OAICreateAssistantAssociation_request_association::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssistantAssociation_request_association::asJsonObject() const {
    QJsonObject obj;
    if (m_knowledge_base_id_isSet) {
        obj.insert(QString("knowledgeBaseId"), ::OpenAPI::toJsonValue(m_knowledge_base_id));
    }
    return obj;
}

QString OAICreateAssistantAssociation_request_association::getKnowledgeBaseId() const {
    return m_knowledge_base_id;
}
void OAICreateAssistantAssociation_request_association::setKnowledgeBaseId(const QString &knowledge_base_id) {
    m_knowledge_base_id = knowledge_base_id;
    m_knowledge_base_id_isSet = true;
}

bool OAICreateAssistantAssociation_request_association::is_knowledge_base_id_Set() const{
    return m_knowledge_base_id_isSet;
}

bool OAICreateAssistantAssociation_request_association::is_knowledge_base_id_Valid() const{
    return m_knowledge_base_id_isValid;
}

bool OAICreateAssistantAssociation_request_association::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_knowledge_base_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssistantAssociation_request_association::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
