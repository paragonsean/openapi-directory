/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAssistantAssociationRequest.h
 *
 * 
 */

#ifndef OAICreateAssistantAssociationRequest_H
#define OAICreateAssistantAssociationRequest_H

#include <QJsonObject>

#include "OAIAssociationType.h"
#include "OAICreateAssistantAssociationRequest_association.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAssistantAssociationRequest_association;

class OAICreateAssistantAssociationRequest : public OAIObject {
public:
    OAICreateAssistantAssociationRequest();
    OAICreateAssistantAssociationRequest(QString json);
    ~OAICreateAssistantAssociationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreateAssistantAssociationRequest_association getAssociation() const;
    void setAssociation(const OAICreateAssistantAssociationRequest_association &association);
    bool is_association_Set() const;
    bool is_association_Valid() const;

    OAIAssociationType getAssociationType() const;
    void setAssociationType(const OAIAssociationType &association_type);
    bool is_association_type_Set() const;
    bool is_association_type_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreateAssistantAssociationRequest_association m_association;
    bool m_association_isSet;
    bool m_association_isValid;

    OAIAssociationType m_association_type;
    bool m_association_type_isSet;
    bool m_association_type_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAssistantAssociationRequest)

#endif // OAICreateAssistantAssociationRequest_H
