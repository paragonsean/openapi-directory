/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchContent_request_searchExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchContent_request_searchExpression::OAISearchContent_request_searchExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchContent_request_searchExpression::OAISearchContent_request_searchExpression() {
    this->initializeModel();
}

OAISearchContent_request_searchExpression::~OAISearchContent_request_searchExpression() {}

void OAISearchContent_request_searchExpression::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAISearchContent_request_searchExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchContent_request_searchExpression::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;
}

QString OAISearchContent_request_searchExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchContent_request_searchExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QList OAISearchContent_request_searchExpression::getFilters() const {
    return m_filters;
}
void OAISearchContent_request_searchExpression::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchContent_request_searchExpression::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchContent_request_searchExpression::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAISearchContent_request_searchExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchContent_request_searchExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
