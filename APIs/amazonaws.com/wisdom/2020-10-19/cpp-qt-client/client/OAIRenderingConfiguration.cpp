/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenderingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenderingConfiguration::OAIRenderingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenderingConfiguration::OAIRenderingConfiguration() {
    this->initializeModel();
}

OAIRenderingConfiguration::~OAIRenderingConfiguration() {}

void OAIRenderingConfiguration::initializeModel() {

    m_template_uri_isSet = false;
    m_template_uri_isValid = false;
}

void OAIRenderingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRenderingConfiguration::fromJsonObject(QJsonObject json) {

    m_template_uri_isValid = ::OpenAPI::fromJsonValue(m_template_uri, json[QString("templateUri")]);
    m_template_uri_isSet = !json[QString("templateUri")].isNull() && m_template_uri_isValid;
}

QString OAIRenderingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRenderingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_template_uri_isSet) {
        obj.insert(QString("templateUri"), ::OpenAPI::toJsonValue(m_template_uri));
    }
    return obj;
}

QString OAIRenderingConfiguration::getTemplateUri() const {
    return m_template_uri;
}
void OAIRenderingConfiguration::setTemplateUri(const QString &template_uri) {
    m_template_uri = template_uri;
    m_template_uri_isSet = true;
}

bool OAIRenderingConfiguration::is_template_uri_Set() const{
    return m_template_uri_isSet;
}

bool OAIRenderingConfiguration::is_template_uri_Valid() const{
    return m_template_uri_isValid;
}

bool OAIRenderingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_template_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRenderingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
