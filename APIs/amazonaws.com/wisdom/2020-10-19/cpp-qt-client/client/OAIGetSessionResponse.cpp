/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSessionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSessionResponse::OAIGetSessionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSessionResponse::OAIGetSessionResponse() {
    this->initializeModel();
}

OAIGetSessionResponse::~OAIGetSessionResponse() {}

void OAIGetSessionResponse::initializeModel() {

    m_session_isSet = false;
    m_session_isValid = false;
}

void OAIGetSessionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSessionResponse::fromJsonObject(QJsonObject json) {

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;
}

QString OAIGetSessionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSessionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    return obj;
}

OAICreateSessionResponse_session OAIGetSessionResponse::getSession() const {
    return m_session;
}
void OAIGetSessionResponse::setSession(const OAICreateSessionResponse_session &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIGetSessionResponse::is_session_Set() const{
    return m_session_isSet;
}

bool OAIGetSessionResponse::is_session_Valid() const{
    return m_session_isValid;
}

bool OAIGetSessionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSessionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
