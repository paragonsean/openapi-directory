/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifyRecommendationsReceived_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifyRecommendationsReceived_request::OAINotifyRecommendationsReceived_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifyRecommendationsReceived_request::OAINotifyRecommendationsReceived_request() {
    this->initializeModel();
}

OAINotifyRecommendationsReceived_request::~OAINotifyRecommendationsReceived_request() {}

void OAINotifyRecommendationsReceived_request::initializeModel() {

    m_recommendation_ids_isSet = false;
    m_recommendation_ids_isValid = false;
}

void OAINotifyRecommendationsReceived_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifyRecommendationsReceived_request::fromJsonObject(QJsonObject json) {

    m_recommendation_ids_isValid = ::OpenAPI::fromJsonValue(m_recommendation_ids, json[QString("recommendationIds")]);
    m_recommendation_ids_isSet = !json[QString("recommendationIds")].isNull() && m_recommendation_ids_isValid;
}

QString OAINotifyRecommendationsReceived_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifyRecommendationsReceived_request::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_ids.size() > 0) {
        obj.insert(QString("recommendationIds"), ::OpenAPI::toJsonValue(m_recommendation_ids));
    }
    return obj;
}

QList<QString> OAINotifyRecommendationsReceived_request::getRecommendationIds() const {
    return m_recommendation_ids;
}
void OAINotifyRecommendationsReceived_request::setRecommendationIds(const QList<QString> &recommendation_ids) {
    m_recommendation_ids = recommendation_ids;
    m_recommendation_ids_isSet = true;
}

bool OAINotifyRecommendationsReceived_request::is_recommendation_ids_Set() const{
    return m_recommendation_ids_isSet;
}

bool OAINotifyRecommendationsReceived_request::is_recommendation_ids_Valid() const{
    return m_recommendation_ids_isValid;
}

bool OAINotifyRecommendationsReceived_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifyRecommendationsReceived_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recommendation_ids_isValid && true;
}

} // namespace OpenAPI
