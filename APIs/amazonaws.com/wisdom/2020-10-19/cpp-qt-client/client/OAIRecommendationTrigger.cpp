/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationTrigger::OAIRecommendationTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationTrigger::OAIRecommendationTrigger() {
    this->initializeModel();
}

OAIRecommendationTrigger::~OAIRecommendationTrigger() {}

void OAIRecommendationTrigger::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_recommendation_ids_isSet = false;
    m_recommendation_ids_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRecommendationTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationTrigger::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_recommendation_ids_isValid = ::OpenAPI::fromJsonValue(m_recommendation_ids, json[QString("recommendationIds")]);
    m_recommendation_ids_isSet = !json[QString("recommendationIds")].isNull() && m_recommendation_ids_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRecommendationTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_recommendation_ids.isSet()) {
        obj.insert(QString("recommendationIds"), ::OpenAPI::toJsonValue(m_recommendation_ids));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIRecommendationTrigger_data OAIRecommendationTrigger::getData() const {
    return m_data;
}
void OAIRecommendationTrigger::setData(const OAIRecommendationTrigger_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIRecommendationTrigger::is_data_Set() const{
    return m_data_isSet;
}

bool OAIRecommendationTrigger::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIRecommendationTrigger::getId() const {
    return m_id;
}
void OAIRecommendationTrigger::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecommendationTrigger::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecommendationTrigger::is_id_Valid() const{
    return m_id_isValid;
}

QList OAIRecommendationTrigger::getRecommendationIds() const {
    return m_recommendation_ids;
}
void OAIRecommendationTrigger::setRecommendationIds(const QList &recommendation_ids) {
    m_recommendation_ids = recommendation_ids;
    m_recommendation_ids_isSet = true;
}

bool OAIRecommendationTrigger::is_recommendation_ids_Set() const{
    return m_recommendation_ids_isSet;
}

bool OAIRecommendationTrigger::is_recommendation_ids_Valid() const{
    return m_recommendation_ids_isValid;
}

OAIRecommendationSourceType OAIRecommendationTrigger::getSource() const {
    return m_source;
}
void OAIRecommendationTrigger::setSource(const OAIRecommendationSourceType &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRecommendationTrigger::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRecommendationTrigger::is_source_Valid() const{
    return m_source_isValid;
}

OAIRecommendationTriggerType OAIRecommendationTrigger::getType() const {
    return m_type;
}
void OAIRecommendationTrigger::setType(const OAIRecommendationTriggerType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRecommendationTrigger::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRecommendationTrigger::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRecommendationTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_id_isValid && m_recommendation_ids_isValid && m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
