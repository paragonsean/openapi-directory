/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssistantAssociationInputData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssistantAssociationInputData::OAIAssistantAssociationInputData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssistantAssociationInputData::OAIAssistantAssociationInputData() {
    this->initializeModel();
}

OAIAssistantAssociationInputData::~OAIAssistantAssociationInputData() {}

void OAIAssistantAssociationInputData::initializeModel() {

    m_knowledge_base_id_isSet = false;
    m_knowledge_base_id_isValid = false;
}

void OAIAssistantAssociationInputData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssistantAssociationInputData::fromJsonObject(QJsonObject json) {

    m_knowledge_base_id_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_id, json[QString("knowledgeBaseId")]);
    m_knowledge_base_id_isSet = !json[QString("knowledgeBaseId")].isNull() && m_knowledge_base_id_isValid;
}

QString OAIAssistantAssociationInputData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssistantAssociationInputData::asJsonObject() const {
    QJsonObject obj;
    if (m_knowledge_base_id_isSet) {
        obj.insert(QString("knowledgeBaseId"), ::OpenAPI::toJsonValue(m_knowledge_base_id));
    }
    return obj;
}

QString OAIAssistantAssociationInputData::getKnowledgeBaseId() const {
    return m_knowledge_base_id;
}
void OAIAssistantAssociationInputData::setKnowledgeBaseId(const QString &knowledge_base_id) {
    m_knowledge_base_id = knowledge_base_id;
    m_knowledge_base_id_isSet = true;
}

bool OAIAssistantAssociationInputData::is_knowledge_base_id_Set() const{
    return m_knowledge_base_id_isSet;
}

bool OAIAssistantAssociationInputData::is_knowledge_base_id_Valid() const{
    return m_knowledge_base_id_isValid;
}

bool OAIAssistantAssociationInputData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_knowledge_base_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssistantAssociationInputData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
