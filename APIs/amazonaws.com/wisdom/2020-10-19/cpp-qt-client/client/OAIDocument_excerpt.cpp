/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument_excerpt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument_excerpt::OAIDocument_excerpt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument_excerpt::OAIDocument_excerpt() {
    this->initializeModel();
}

OAIDocument_excerpt::~OAIDocument_excerpt() {}

void OAIDocument_excerpt::initializeModel() {

    m_highlights_isSet = false;
    m_highlights_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIDocument_excerpt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument_excerpt::fromJsonObject(QJsonObject json) {

    m_highlights_isValid = ::OpenAPI::fromJsonValue(m_highlights, json[QString("highlights")]);
    m_highlights_isSet = !json[QString("highlights")].isNull() && m_highlights_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIDocument_excerpt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument_excerpt::asJsonObject() const {
    QJsonObject obj;
    if (m_highlights.isSet()) {
        obj.insert(QString("highlights"), ::OpenAPI::toJsonValue(m_highlights));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList OAIDocument_excerpt::getHighlights() const {
    return m_highlights;
}
void OAIDocument_excerpt::setHighlights(const QList &highlights) {
    m_highlights = highlights;
    m_highlights_isSet = true;
}

bool OAIDocument_excerpt::is_highlights_Set() const{
    return m_highlights_isSet;
}

bool OAIDocument_excerpt::is_highlights_Valid() const{
    return m_highlights_isValid;
}

QString OAIDocument_excerpt::getText() const {
    return m_text;
}
void OAIDocument_excerpt::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDocument_excerpt::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDocument_excerpt::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIDocument_excerpt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_highlights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument_excerpt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
