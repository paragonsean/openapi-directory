/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKnowledgeBaseSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKnowledgeBaseSummary::OAIKnowledgeBaseSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKnowledgeBaseSummary::OAIKnowledgeBaseSummary() {
    this->initializeModel();
}

OAIKnowledgeBaseSummary::~OAIKnowledgeBaseSummary() {}

void OAIKnowledgeBaseSummary::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_knowledge_base_arn_isSet = false;
    m_knowledge_base_arn_isValid = false;

    m_knowledge_base_id_isSet = false;
    m_knowledge_base_id_isValid = false;

    m_knowledge_base_type_isSet = false;
    m_knowledge_base_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rendering_configuration_isSet = false;
    m_rendering_configuration_isValid = false;

    m_server_side_encryption_configuration_isSet = false;
    m_server_side_encryption_configuration_isValid = false;

    m_source_configuration_isSet = false;
    m_source_configuration_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIKnowledgeBaseSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKnowledgeBaseSummary::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_knowledge_base_arn_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_arn, json[QString("knowledgeBaseArn")]);
    m_knowledge_base_arn_isSet = !json[QString("knowledgeBaseArn")].isNull() && m_knowledge_base_arn_isValid;

    m_knowledge_base_id_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_id, json[QString("knowledgeBaseId")]);
    m_knowledge_base_id_isSet = !json[QString("knowledgeBaseId")].isNull() && m_knowledge_base_id_isValid;

    m_knowledge_base_type_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_type, json[QString("knowledgeBaseType")]);
    m_knowledge_base_type_isSet = !json[QString("knowledgeBaseType")].isNull() && m_knowledge_base_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rendering_configuration_isValid = ::OpenAPI::fromJsonValue(m_rendering_configuration, json[QString("renderingConfiguration")]);
    m_rendering_configuration_isSet = !json[QString("renderingConfiguration")].isNull() && m_rendering_configuration_isValid;

    m_server_side_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption_configuration, json[QString("serverSideEncryptionConfiguration")]);
    m_server_side_encryption_configuration_isSet = !json[QString("serverSideEncryptionConfiguration")].isNull() && m_server_side_encryption_configuration_isValid;

    m_source_configuration_isValid = ::OpenAPI::fromJsonValue(m_source_configuration, json[QString("sourceConfiguration")]);
    m_source_configuration_isSet = !json[QString("sourceConfiguration")].isNull() && m_source_configuration_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIKnowledgeBaseSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKnowledgeBaseSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_knowledge_base_arn_isSet) {
        obj.insert(QString("knowledgeBaseArn"), ::OpenAPI::toJsonValue(m_knowledge_base_arn));
    }
    if (m_knowledge_base_id_isSet) {
        obj.insert(QString("knowledgeBaseId"), ::OpenAPI::toJsonValue(m_knowledge_base_id));
    }
    if (m_knowledge_base_type.isSet()) {
        obj.insert(QString("knowledgeBaseType"), ::OpenAPI::toJsonValue(m_knowledge_base_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rendering_configuration.isSet()) {
        obj.insert(QString("renderingConfiguration"), ::OpenAPI::toJsonValue(m_rendering_configuration));
    }
    if (m_server_side_encryption_configuration.isSet()) {
        obj.insert(QString("serverSideEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_server_side_encryption_configuration));
    }
    if (m_source_configuration.isSet()) {
        obj.insert(QString("sourceConfiguration"), ::OpenAPI::toJsonValue(m_source_configuration));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIKnowledgeBaseSummary::getDescription() const {
    return m_description;
}
void OAIKnowledgeBaseSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIKnowledgeBaseSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIKnowledgeBaseSummary::getKnowledgeBaseArn() const {
    return m_knowledge_base_arn;
}
void OAIKnowledgeBaseSummary::setKnowledgeBaseArn(const QString &knowledge_base_arn) {
    m_knowledge_base_arn = knowledge_base_arn;
    m_knowledge_base_arn_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_knowledge_base_arn_Set() const{
    return m_knowledge_base_arn_isSet;
}

bool OAIKnowledgeBaseSummary::is_knowledge_base_arn_Valid() const{
    return m_knowledge_base_arn_isValid;
}

QString OAIKnowledgeBaseSummary::getKnowledgeBaseId() const {
    return m_knowledge_base_id;
}
void OAIKnowledgeBaseSummary::setKnowledgeBaseId(const QString &knowledge_base_id) {
    m_knowledge_base_id = knowledge_base_id;
    m_knowledge_base_id_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_knowledge_base_id_Set() const{
    return m_knowledge_base_id_isSet;
}

bool OAIKnowledgeBaseSummary::is_knowledge_base_id_Valid() const{
    return m_knowledge_base_id_isValid;
}

OAIKnowledgeBaseType OAIKnowledgeBaseSummary::getKnowledgeBaseType() const {
    return m_knowledge_base_type;
}
void OAIKnowledgeBaseSummary::setKnowledgeBaseType(const OAIKnowledgeBaseType &knowledge_base_type) {
    m_knowledge_base_type = knowledge_base_type;
    m_knowledge_base_type_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_knowledge_base_type_Set() const{
    return m_knowledge_base_type_isSet;
}

bool OAIKnowledgeBaseSummary::is_knowledge_base_type_Valid() const{
    return m_knowledge_base_type_isValid;
}

QString OAIKnowledgeBaseSummary::getName() const {
    return m_name;
}
void OAIKnowledgeBaseSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIKnowledgeBaseSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateKnowledgeBaseRequest_renderingConfiguration OAIKnowledgeBaseSummary::getRenderingConfiguration() const {
    return m_rendering_configuration;
}
void OAIKnowledgeBaseSummary::setRenderingConfiguration(const OAICreateKnowledgeBaseRequest_renderingConfiguration &rendering_configuration) {
    m_rendering_configuration = rendering_configuration;
    m_rendering_configuration_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_rendering_configuration_Set() const{
    return m_rendering_configuration_isSet;
}

bool OAIKnowledgeBaseSummary::is_rendering_configuration_Valid() const{
    return m_rendering_configuration_isValid;
}

OAIAssistantData_serverSideEncryptionConfiguration OAIKnowledgeBaseSummary::getServerSideEncryptionConfiguration() const {
    return m_server_side_encryption_configuration;
}
void OAIKnowledgeBaseSummary::setServerSideEncryptionConfiguration(const OAIAssistantData_serverSideEncryptionConfiguration &server_side_encryption_configuration) {
    m_server_side_encryption_configuration = server_side_encryption_configuration;
    m_server_side_encryption_configuration_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_server_side_encryption_configuration_Set() const{
    return m_server_side_encryption_configuration_isSet;
}

bool OAIKnowledgeBaseSummary::is_server_side_encryption_configuration_Valid() const{
    return m_server_side_encryption_configuration_isValid;
}

OAIKnowledgeBaseSummary_sourceConfiguration OAIKnowledgeBaseSummary::getSourceConfiguration() const {
    return m_source_configuration;
}
void OAIKnowledgeBaseSummary::setSourceConfiguration(const OAIKnowledgeBaseSummary_sourceConfiguration &source_configuration) {
    m_source_configuration = source_configuration;
    m_source_configuration_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_source_configuration_Set() const{
    return m_source_configuration_isSet;
}

bool OAIKnowledgeBaseSummary::is_source_configuration_Valid() const{
    return m_source_configuration_isValid;
}

OAIKnowledgeBaseStatus OAIKnowledgeBaseSummary::getStatus() const {
    return m_status;
}
void OAIKnowledgeBaseSummary::setStatus(const OAIKnowledgeBaseStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIKnowledgeBaseSummary::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIKnowledgeBaseSummary::getTags() const {
    return m_tags;
}
void OAIKnowledgeBaseSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIKnowledgeBaseSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIKnowledgeBaseSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIKnowledgeBaseSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendering_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKnowledgeBaseSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_knowledge_base_arn_isValid && m_knowledge_base_id_isValid && m_knowledge_base_type_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
