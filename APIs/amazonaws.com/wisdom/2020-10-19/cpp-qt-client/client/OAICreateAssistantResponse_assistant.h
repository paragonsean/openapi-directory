/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAssistantResponse_assistant.h
 *
 * 
 */

#ifndef OAICreateAssistantResponse_assistant_H
#define OAICreateAssistantResponse_assistant_H

#include <QJsonObject>

#include "OAIAssistantData_integrationConfiguration.h"
#include "OAIAssistantData_serverSideEncryptionConfiguration.h"
#include "OAIAssistantStatus.h"
#include "OAIAssistantType.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAssistantData_integrationConfiguration;
class OAIAssistantData_serverSideEncryptionConfiguration;

class OAICreateAssistantResponse_assistant : public OAIObject {
public:
    OAICreateAssistantResponse_assistant();
    OAICreateAssistantResponse_assistant(QString json);
    ~OAICreateAssistantResponse_assistant() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssistantArn() const;
    void setAssistantArn(const QString &assistant_arn);
    bool is_assistant_arn_Set() const;
    bool is_assistant_arn_Valid() const;

    QString getAssistantId() const;
    void setAssistantId(const QString &assistant_id);
    bool is_assistant_id_Set() const;
    bool is_assistant_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIAssistantData_integrationConfiguration getIntegrationConfiguration() const;
    void setIntegrationConfiguration(const OAIAssistantData_integrationConfiguration &integration_configuration);
    bool is_integration_configuration_Set() const;
    bool is_integration_configuration_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIAssistantData_serverSideEncryptionConfiguration getServerSideEncryptionConfiguration() const;
    void setServerSideEncryptionConfiguration(const OAIAssistantData_serverSideEncryptionConfiguration &server_side_encryption_configuration);
    bool is_server_side_encryption_configuration_Set() const;
    bool is_server_side_encryption_configuration_Valid() const;

    OAIAssistantStatus getStatus() const;
    void setStatus(const OAIAssistantStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIAssistantType getType() const;
    void setType(const OAIAssistantType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_assistant_arn;
    bool m_assistant_arn_isSet;
    bool m_assistant_arn_isValid;

    QString m_assistant_id;
    bool m_assistant_id_isSet;
    bool m_assistant_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIAssistantData_integrationConfiguration m_integration_configuration;
    bool m_integration_configuration_isSet;
    bool m_integration_configuration_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIAssistantData_serverSideEncryptionConfiguration m_server_side_encryption_configuration;
    bool m_server_side_encryption_configuration_isSet;
    bool m_server_side_encryption_configuration_isValid;

    OAIAssistantStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIAssistantType m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAssistantResponse_assistant)

#endif // OAICreateAssistantResponse_assistant_H
