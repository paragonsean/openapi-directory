/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSessionResponse_session.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSessionResponse_session::OAICreateSessionResponse_session(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSessionResponse_session::OAICreateSessionResponse_session() {
    this->initializeModel();
}

OAICreateSessionResponse_session::~OAICreateSessionResponse_session() {}

void OAICreateSessionResponse_session::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_integration_configuration_isSet = false;
    m_integration_configuration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_session_arn_isSet = false;
    m_session_arn_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSessionResponse_session::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSessionResponse_session::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_integration_configuration_isValid = ::OpenAPI::fromJsonValue(m_integration_configuration, json[QString("integrationConfiguration")]);
    m_integration_configuration_isSet = !json[QString("integrationConfiguration")].isNull() && m_integration_configuration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_session_arn_isValid = ::OpenAPI::fromJsonValue(m_session_arn, json[QString("sessionArn")]);
    m_session_arn_isSet = !json[QString("sessionArn")].isNull() && m_session_arn_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateSessionResponse_session::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSessionResponse_session::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_integration_configuration.isSet()) {
        obj.insert(QString("integrationConfiguration"), ::OpenAPI::toJsonValue(m_integration_configuration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_session_arn_isSet) {
        obj.insert(QString("sessionArn"), ::OpenAPI::toJsonValue(m_session_arn));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateSessionResponse_session::getDescription() const {
    return m_description;
}
void OAICreateSessionResponse_session::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSessionResponse_session::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSessionResponse_session::is_description_Valid() const{
    return m_description_isValid;
}

OAISessionData_integrationConfiguration OAICreateSessionResponse_session::getIntegrationConfiguration() const {
    return m_integration_configuration;
}
void OAICreateSessionResponse_session::setIntegrationConfiguration(const OAISessionData_integrationConfiguration &integration_configuration) {
    m_integration_configuration = integration_configuration;
    m_integration_configuration_isSet = true;
}

bool OAICreateSessionResponse_session::is_integration_configuration_Set() const{
    return m_integration_configuration_isSet;
}

bool OAICreateSessionResponse_session::is_integration_configuration_Valid() const{
    return m_integration_configuration_isValid;
}

QString OAICreateSessionResponse_session::getName() const {
    return m_name;
}
void OAICreateSessionResponse_session::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSessionResponse_session::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSessionResponse_session::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateSessionResponse_session::getSessionArn() const {
    return m_session_arn;
}
void OAICreateSessionResponse_session::setSessionArn(const QString &session_arn) {
    m_session_arn = session_arn;
    m_session_arn_isSet = true;
}

bool OAICreateSessionResponse_session::is_session_arn_Set() const{
    return m_session_arn_isSet;
}

bool OAICreateSessionResponse_session::is_session_arn_Valid() const{
    return m_session_arn_isValid;
}

QString OAICreateSessionResponse_session::getSessionId() const {
    return m_session_id;
}
void OAICreateSessionResponse_session::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAICreateSessionResponse_session::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAICreateSessionResponse_session::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QMap OAICreateSessionResponse_session::getTags() const {
    return m_tags;
}
void OAICreateSessionResponse_session::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSessionResponse_session::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSessionResponse_session::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSessionResponse_session::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSessionResponse_session::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_session_arn_isValid && m_session_id_isValid && true;
}

} // namespace OpenAPI
