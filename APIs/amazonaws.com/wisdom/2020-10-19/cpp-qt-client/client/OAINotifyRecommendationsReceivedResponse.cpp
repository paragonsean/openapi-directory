/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifyRecommendationsReceivedResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifyRecommendationsReceivedResponse::OAINotifyRecommendationsReceivedResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifyRecommendationsReceivedResponse::OAINotifyRecommendationsReceivedResponse() {
    this->initializeModel();
}

OAINotifyRecommendationsReceivedResponse::~OAINotifyRecommendationsReceivedResponse() {}

void OAINotifyRecommendationsReceivedResponse::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_recommendation_ids_isSet = false;
    m_recommendation_ids_isValid = false;
}

void OAINotifyRecommendationsReceivedResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifyRecommendationsReceivedResponse::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_recommendation_ids_isValid = ::OpenAPI::fromJsonValue(m_recommendation_ids, json[QString("recommendationIds")]);
    m_recommendation_ids_isSet = !json[QString("recommendationIds")].isNull() && m_recommendation_ids_isValid;
}

QString OAINotifyRecommendationsReceivedResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifyRecommendationsReceivedResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_recommendation_ids.isSet()) {
        obj.insert(QString("recommendationIds"), ::OpenAPI::toJsonValue(m_recommendation_ids));
    }
    return obj;
}

QList OAINotifyRecommendationsReceivedResponse::getErrors() const {
    return m_errors;
}
void OAINotifyRecommendationsReceivedResponse::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAINotifyRecommendationsReceivedResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAINotifyRecommendationsReceivedResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QList OAINotifyRecommendationsReceivedResponse::getRecommendationIds() const {
    return m_recommendation_ids;
}
void OAINotifyRecommendationsReceivedResponse::setRecommendationIds(const QList &recommendation_ids) {
    m_recommendation_ids = recommendation_ids;
    m_recommendation_ids_isSet = true;
}

bool OAINotifyRecommendationsReceivedResponse::is_recommendation_ids_Set() const{
    return m_recommendation_ids_isSet;
}

bool OAINotifyRecommendationsReceivedResponse::is_recommendation_ids_Valid() const{
    return m_recommendation_ids_isValid;
}

bool OAINotifyRecommendationsReceivedResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifyRecommendationsReceivedResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
