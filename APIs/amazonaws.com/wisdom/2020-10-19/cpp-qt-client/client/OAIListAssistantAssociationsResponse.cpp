/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAssistantAssociationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAssistantAssociationsResponse::OAIListAssistantAssociationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAssistantAssociationsResponse::OAIListAssistantAssociationsResponse() {
    this->initializeModel();
}

OAIListAssistantAssociationsResponse::~OAIListAssistantAssociationsResponse() {}

void OAIListAssistantAssociationsResponse::initializeModel() {

    m_assistant_association_summaries_isSet = false;
    m_assistant_association_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAssistantAssociationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAssistantAssociationsResponse::fromJsonObject(QJsonObject json) {

    m_assistant_association_summaries_isValid = ::OpenAPI::fromJsonValue(m_assistant_association_summaries, json[QString("assistantAssociationSummaries")]);
    m_assistant_association_summaries_isSet = !json[QString("assistantAssociationSummaries")].isNull() && m_assistant_association_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAssistantAssociationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAssistantAssociationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assistant_association_summaries.isSet()) {
        obj.insert(QString("assistantAssociationSummaries"), ::OpenAPI::toJsonValue(m_assistant_association_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAssistantAssociationsResponse::getAssistantAssociationSummaries() const {
    return m_assistant_association_summaries;
}
void OAIListAssistantAssociationsResponse::setAssistantAssociationSummaries(const QList &assistant_association_summaries) {
    m_assistant_association_summaries = assistant_association_summaries;
    m_assistant_association_summaries_isSet = true;
}

bool OAIListAssistantAssociationsResponse::is_assistant_association_summaries_Set() const{
    return m_assistant_association_summaries_isSet;
}

bool OAIListAssistantAssociationsResponse::is_assistant_association_summaries_Valid() const{
    return m_assistant_association_summaries_isValid;
}

QString OAIListAssistantAssociationsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAssistantAssociationsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAssistantAssociationsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAssistantAssociationsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAssistantAssociationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assistant_association_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAssistantAssociationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assistant_association_summaries_isValid && true;
}

} // namespace OpenAPI
