/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateKnowledgeBaseRequest.h
 *
 * 
 */

#ifndef OAICreateKnowledgeBaseRequest_H
#define OAICreateKnowledgeBaseRequest_H

#include <QJsonObject>

#include "OAIAssistantData_serverSideEncryptionConfiguration.h"
#include "OAICreateKnowledgeBaseRequest_renderingConfiguration.h"
#include "OAICreateKnowledgeBaseRequest_sourceConfiguration.h"
#include "OAIKnowledgeBaseType.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateKnowledgeBaseRequest_renderingConfiguration;
class OAIAssistantData_serverSideEncryptionConfiguration;
class OAICreateKnowledgeBaseRequest_sourceConfiguration;

class OAICreateKnowledgeBaseRequest : public OAIObject {
public:
    OAICreateKnowledgeBaseRequest();
    OAICreateKnowledgeBaseRequest(QString json);
    ~OAICreateKnowledgeBaseRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIKnowledgeBaseType getKnowledgeBaseType() const;
    void setKnowledgeBaseType(const OAIKnowledgeBaseType &knowledge_base_type);
    bool is_knowledge_base_type_Set() const;
    bool is_knowledge_base_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAICreateKnowledgeBaseRequest_renderingConfiguration getRenderingConfiguration() const;
    void setRenderingConfiguration(const OAICreateKnowledgeBaseRequest_renderingConfiguration &rendering_configuration);
    bool is_rendering_configuration_Set() const;
    bool is_rendering_configuration_Valid() const;

    OAIAssistantData_serverSideEncryptionConfiguration getServerSideEncryptionConfiguration() const;
    void setServerSideEncryptionConfiguration(const OAIAssistantData_serverSideEncryptionConfiguration &server_side_encryption_configuration);
    bool is_server_side_encryption_configuration_Set() const;
    bool is_server_side_encryption_configuration_Valid() const;

    OAICreateKnowledgeBaseRequest_sourceConfiguration getSourceConfiguration() const;
    void setSourceConfiguration(const OAICreateKnowledgeBaseRequest_sourceConfiguration &source_configuration);
    bool is_source_configuration_Set() const;
    bool is_source_configuration_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIKnowledgeBaseType m_knowledge_base_type;
    bool m_knowledge_base_type_isSet;
    bool m_knowledge_base_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAICreateKnowledgeBaseRequest_renderingConfiguration m_rendering_configuration;
    bool m_rendering_configuration_isSet;
    bool m_rendering_configuration_isValid;

    OAIAssistantData_serverSideEncryptionConfiguration m_server_side_encryption_configuration;
    bool m_server_side_encryption_configuration_isSet;
    bool m_server_side_encryption_configuration_isValid;

    OAICreateKnowledgeBaseRequest_sourceConfiguration m_source_configuration;
    bool m_source_configuration_isSet;
    bool m_source_configuration_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateKnowledgeBaseRequest)

#endif // OAICreateKnowledgeBaseRequest_H
