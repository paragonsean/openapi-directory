/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssistantAssociationOutputData_knowledgeBaseAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssistantAssociationOutputData_knowledgeBaseAssociation::OAIAssistantAssociationOutputData_knowledgeBaseAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssistantAssociationOutputData_knowledgeBaseAssociation::OAIAssistantAssociationOutputData_knowledgeBaseAssociation() {
    this->initializeModel();
}

OAIAssistantAssociationOutputData_knowledgeBaseAssociation::~OAIAssistantAssociationOutputData_knowledgeBaseAssociation() {}

void OAIAssistantAssociationOutputData_knowledgeBaseAssociation::initializeModel() {

    m_knowledge_base_arn_isSet = false;
    m_knowledge_base_arn_isValid = false;

    m_knowledge_base_id_isSet = false;
    m_knowledge_base_id_isValid = false;
}

void OAIAssistantAssociationOutputData_knowledgeBaseAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssistantAssociationOutputData_knowledgeBaseAssociation::fromJsonObject(QJsonObject json) {

    m_knowledge_base_arn_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_arn, json[QString("knowledgeBaseArn")]);
    m_knowledge_base_arn_isSet = !json[QString("knowledgeBaseArn")].isNull() && m_knowledge_base_arn_isValid;

    m_knowledge_base_id_isValid = ::OpenAPI::fromJsonValue(m_knowledge_base_id, json[QString("knowledgeBaseId")]);
    m_knowledge_base_id_isSet = !json[QString("knowledgeBaseId")].isNull() && m_knowledge_base_id_isValid;
}

QString OAIAssistantAssociationOutputData_knowledgeBaseAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssistantAssociationOutputData_knowledgeBaseAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_knowledge_base_arn_isSet) {
        obj.insert(QString("knowledgeBaseArn"), ::OpenAPI::toJsonValue(m_knowledge_base_arn));
    }
    if (m_knowledge_base_id_isSet) {
        obj.insert(QString("knowledgeBaseId"), ::OpenAPI::toJsonValue(m_knowledge_base_id));
    }
    return obj;
}

QString OAIAssistantAssociationOutputData_knowledgeBaseAssociation::getKnowledgeBaseArn() const {
    return m_knowledge_base_arn;
}
void OAIAssistantAssociationOutputData_knowledgeBaseAssociation::setKnowledgeBaseArn(const QString &knowledge_base_arn) {
    m_knowledge_base_arn = knowledge_base_arn;
    m_knowledge_base_arn_isSet = true;
}

bool OAIAssistantAssociationOutputData_knowledgeBaseAssociation::is_knowledge_base_arn_Set() const{
    return m_knowledge_base_arn_isSet;
}

bool OAIAssistantAssociationOutputData_knowledgeBaseAssociation::is_knowledge_base_arn_Valid() const{
    return m_knowledge_base_arn_isValid;
}

QString OAIAssistantAssociationOutputData_knowledgeBaseAssociation::getKnowledgeBaseId() const {
    return m_knowledge_base_id;
}
void OAIAssistantAssociationOutputData_knowledgeBaseAssociation::setKnowledgeBaseId(const QString &knowledge_base_id) {
    m_knowledge_base_id = knowledge_base_id;
    m_knowledge_base_id_isSet = true;
}

bool OAIAssistantAssociationOutputData_knowledgeBaseAssociation::is_knowledge_base_id_Set() const{
    return m_knowledge_base_id_isSet;
}

bool OAIAssistantAssociationOutputData_knowledgeBaseAssociation::is_knowledge_base_id_Valid() const{
    return m_knowledge_base_id_isValid;
}

bool OAIAssistantAssociationOutputData_knowledgeBaseAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_knowledge_base_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_base_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssistantAssociationOutputData_knowledgeBaseAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
