/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssistantStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssistantStatus::OAIAssistantStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssistantStatus::OAIAssistantStatus() {
    this->initializeModel();
}

OAIAssistantStatus::~OAIAssistantStatus() {}

void OAIAssistantStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAssistantStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAssistantStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssistantStatus::CREATE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssistantStatus::CREATE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssistantStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssistantStatus::DELETE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssistantStatus::DELETE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssistantStatus::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAssistantStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAssistantStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAssistantStatus::CREATE_IN_PROGRESS:
            val = "CREATE_IN_PROGRESS";
            break;
        case eOAIAssistantStatus::CREATE_FAILED:
            val = "CREATE_FAILED";
            break;
        case eOAIAssistantStatus::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIAssistantStatus::DELETE_IN_PROGRESS:
            val = "DELETE_IN_PROGRESS";
            break;
        case eOAIAssistantStatus::DELETE_FAILED:
            val = "DELETE_FAILED";
            break;
        case eOAIAssistantStatus::DELETED:
            val = "DELETED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAssistantStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAssistantStatus::eOAIAssistantStatus OAIAssistantStatus::getValue() const {
    return m_value;
}

void OAIAssistantStatus::setValue(const OAIAssistantStatus::eOAIAssistantStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAssistantStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIAssistantStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
