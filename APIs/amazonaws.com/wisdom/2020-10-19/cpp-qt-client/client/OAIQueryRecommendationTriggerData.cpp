/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRecommendationTriggerData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRecommendationTriggerData::OAIQueryRecommendationTriggerData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRecommendationTriggerData::OAIQueryRecommendationTriggerData() {
    this->initializeModel();
}

OAIQueryRecommendationTriggerData::~OAIQueryRecommendationTriggerData() {}

void OAIQueryRecommendationTriggerData::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIQueryRecommendationTriggerData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRecommendationTriggerData::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIQueryRecommendationTriggerData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRecommendationTriggerData::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIQueryRecommendationTriggerData::getText() const {
    return m_text;
}
void OAIQueryRecommendationTriggerData::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIQueryRecommendationTriggerData::is_text_Set() const{
    return m_text_isSet;
}

bool OAIQueryRecommendationTriggerData::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIQueryRecommendationTriggerData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRecommendationTriggerData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
