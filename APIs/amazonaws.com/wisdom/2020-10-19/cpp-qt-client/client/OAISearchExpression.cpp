/**
 * Amazon Connect Wisdom Service
 * Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively speaking with customers. Agents can search across connected repositories from within their agent desktop to find answers quickly. Use Amazon Connect Wisdom to create an assistant and a knowledge base, for example, or manage content by uploading custom files.
 *
 * The version of the OpenAPI document: 2020-10-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchExpression::OAISearchExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchExpression::OAISearchExpression() {
    this->initializeModel();
}

OAISearchExpression::~OAISearchExpression() {}

void OAISearchExpression::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAISearchExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchExpression::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;
}

QString OAISearchExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QList OAISearchExpression::getFilters() const {
    return m_filters;
}
void OAISearchExpression::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchExpression::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchExpression::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAISearchExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filters_isValid && true;
}

} // namespace OpenAPI
