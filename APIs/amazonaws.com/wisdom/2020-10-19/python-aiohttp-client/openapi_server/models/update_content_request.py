# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateContentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: Dict[str, str]=None, override_link_out_uri: str=None, remove_override_link_out_uri: bool=None, revision_id: str=None, title: str=None, upload_id: str=None):
        """UpdateContentRequest - a model defined in OpenAPI

        :param metadata: The metadata of this UpdateContentRequest.
        :param override_link_out_uri: The override_link_out_uri of this UpdateContentRequest.
        :param remove_override_link_out_uri: The remove_override_link_out_uri of this UpdateContentRequest.
        :param revision_id: The revision_id of this UpdateContentRequest.
        :param title: The title of this UpdateContentRequest.
        :param upload_id: The upload_id of this UpdateContentRequest.
        """
        self.openapi_types = {
            'metadata': Dict[str, str],
            'override_link_out_uri': str,
            'remove_override_link_out_uri': bool,
            'revision_id': str,
            'title': str,
            'upload_id': str
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'override_link_out_uri': 'overrideLinkOutUri',
            'remove_override_link_out_uri': 'removeOverrideLinkOutUri',
            'revision_id': 'revisionId',
            'title': 'title',
            'upload_id': 'uploadId'
        }

        self._metadata = metadata
        self._override_link_out_uri = override_link_out_uri
        self._remove_override_link_out_uri = remove_override_link_out_uri
        self._revision_id = revision_id
        self._title = title
        self._upload_id = upload_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContent_request of this UpdateContentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this UpdateContentRequest.

        A key/value map to store attributes without affecting tagging or recommendations. For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.

        :return: The metadata of this UpdateContentRequest.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateContentRequest.

        A key/value map to store attributes without affecting tagging or recommendations. For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.

        :param metadata: The metadata of this UpdateContentRequest.
        :type metadata: Dict[str, str]
        """
        if metadata is not None and len(metadata) > 10:
            raise ValueError("Invalid value for `metadata`, number of items must be less than or equal to `10`")
        if metadata is not None and len(metadata) < 0:
            raise ValueError("Invalid value for `metadata`, number of items must be greater than or equal to `0`")

        self._metadata = metadata

    @property
    def override_link_out_uri(self):
        """Gets the override_link_out_uri of this UpdateContentRequest.

        The URI for the article. If the knowledge base has a templateUri, setting this argument overrides it for this piece of content. To remove an existing <code>overrideLinkOurUri</code>, exclude this argument and set <code>removeOverrideLinkOutUri</code> to true.

        :return: The override_link_out_uri of this UpdateContentRequest.
        :rtype: str
        """
        return self._override_link_out_uri

    @override_link_out_uri.setter
    def override_link_out_uri(self, override_link_out_uri):
        """Sets the override_link_out_uri of this UpdateContentRequest.

        The URI for the article. If the knowledge base has a templateUri, setting this argument overrides it for this piece of content. To remove an existing <code>overrideLinkOurUri</code>, exclude this argument and set <code>removeOverrideLinkOutUri</code> to true.

        :param override_link_out_uri: The override_link_out_uri of this UpdateContentRequest.
        :type override_link_out_uri: str
        """
        if override_link_out_uri is not None and len(override_link_out_uri) > 4096:
            raise ValueError("Invalid value for `override_link_out_uri`, length must be less than or equal to `4096`")
        if override_link_out_uri is not None and len(override_link_out_uri) < 1:
            raise ValueError("Invalid value for `override_link_out_uri`, length must be greater than or equal to `1`")

        self._override_link_out_uri = override_link_out_uri

    @property
    def remove_override_link_out_uri(self):
        """Gets the remove_override_link_out_uri of this UpdateContentRequest.

        Unset the existing <code>overrideLinkOutUri</code> if it exists.

        :return: The remove_override_link_out_uri of this UpdateContentRequest.
        :rtype: bool
        """
        return self._remove_override_link_out_uri

    @remove_override_link_out_uri.setter
    def remove_override_link_out_uri(self, remove_override_link_out_uri):
        """Sets the remove_override_link_out_uri of this UpdateContentRequest.

        Unset the existing <code>overrideLinkOutUri</code> if it exists.

        :param remove_override_link_out_uri: The remove_override_link_out_uri of this UpdateContentRequest.
        :type remove_override_link_out_uri: bool
        """

        self._remove_override_link_out_uri = remove_override_link_out_uri

    @property
    def revision_id(self):
        """Gets the revision_id of this UpdateContentRequest.

        The <code>revisionId</code> of the content resource to update, taken from an earlier call to <code>GetContent</code>, <code>GetContentSummary</code>, <code>SearchContent</code>, or <code>ListContents</code>. If included, this argument acts as an optimistic lock to ensure content was not modified since it was last read. If it has been modified, this API throws a <code>PreconditionFailedException</code>.

        :return: The revision_id of this UpdateContentRequest.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this UpdateContentRequest.

        The <code>revisionId</code> of the content resource to update, taken from an earlier call to <code>GetContent</code>, <code>GetContentSummary</code>, <code>SearchContent</code>, or <code>ListContents</code>. If included, this argument acts as an optimistic lock to ensure content was not modified since it was last read. If it has been modified, this API throws a <code>PreconditionFailedException</code>.

        :param revision_id: The revision_id of this UpdateContentRequest.
        :type revision_id: str
        """
        if revision_id is not None and len(revision_id) > 4096:
            raise ValueError("Invalid value for `revision_id`, length must be less than or equal to `4096`")
        if revision_id is not None and len(revision_id) < 1:
            raise ValueError("Invalid value for `revision_id`, length must be greater than or equal to `1`")

        self._revision_id = revision_id

    @property
    def title(self):
        """Gets the title of this UpdateContentRequest.

        The title of the content.

        :return: The title of this UpdateContentRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateContentRequest.

        The title of the content.

        :param title: The title of this UpdateContentRequest.
        :type title: str
        """
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def upload_id(self):
        """Gets the upload_id of this UpdateContentRequest.

        A pointer to the uploaded asset. This value is returned by <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a>. 

        :return: The upload_id of this UpdateContentRequest.
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this UpdateContentRequest.

        A pointer to the uploaded asset. This value is returned by <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a>. 

        :param upload_id: The upload_id of this UpdateContentRequest.
        :type upload_id: str
        """
        if upload_id is not None and len(upload_id) > 1200:
            raise ValueError("Invalid value for `upload_id`, length must be less than or equal to `1200`")
        if upload_id is not None and len(upload_id) < 1:
            raise ValueError("Invalid value for `upload_id`, length must be greater than or equal to `1`")

        self._upload_id = upload_id
