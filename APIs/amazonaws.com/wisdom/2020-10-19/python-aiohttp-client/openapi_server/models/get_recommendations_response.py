# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRecommendationsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recommendations: List=None, triggers: List=None):
        """GetRecommendationsResponse - a model defined in OpenAPI

        :param recommendations: The recommendations of this GetRecommendationsResponse.
        :param triggers: The triggers of this GetRecommendationsResponse.
        """
        self.openapi_types = {
            'recommendations': List,
            'triggers': List
        }

        self.attribute_map = {
            'recommendations': 'recommendations',
            'triggers': 'triggers'
        }

        self._recommendations = recommendations
        self._triggers = triggers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecommendationsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRecommendationsResponse of this GetRecommendationsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommendations(self):
        """Gets the recommendations of this GetRecommendationsResponse.


        :return: The recommendations of this GetRecommendationsResponse.
        :rtype: List
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this GetRecommendationsResponse.


        :param recommendations: The recommendations of this GetRecommendationsResponse.
        :type recommendations: List
        """
        if recommendations is None:
            raise ValueError("Invalid value for `recommendations`, must not be `None`")

        self._recommendations = recommendations

    @property
    def triggers(self):
        """Gets the triggers of this GetRecommendationsResponse.


        :return: The triggers of this GetRecommendationsResponse.
        :rtype: List
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this GetRecommendationsResponse.


        :param triggers: The triggers of this GetRecommendationsResponse.
        :type triggers: List
        """

        self._triggers = triggers
