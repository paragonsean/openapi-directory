# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_source_type import RecommendationSourceType
from openapi_server.models.recommendation_trigger_data import RecommendationTriggerData
from openapi_server.models.recommendation_trigger_type import RecommendationTriggerType
from openapi_server import util


class RecommendationTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: RecommendationTriggerData=None, id: str=None, recommendation_ids: List=None, source: RecommendationSourceType=None, type: RecommendationTriggerType=None):
        """RecommendationTrigger - a model defined in OpenAPI

        :param data: The data of this RecommendationTrigger.
        :param id: The id of this RecommendationTrigger.
        :param recommendation_ids: The recommendation_ids of this RecommendationTrigger.
        :param source: The source of this RecommendationTrigger.
        :param type: The type of this RecommendationTrigger.
        """
        self.openapi_types = {
            'data': RecommendationTriggerData,
            'id': str,
            'recommendation_ids': List,
            'source': RecommendationSourceType,
            'type': RecommendationTriggerType
        }

        self.attribute_map = {
            'data': 'data',
            'id': 'id',
            'recommendation_ids': 'recommendationIds',
            'source': 'source',
            'type': 'type'
        }

        self._data = data
        self._id = id
        self._recommendation_ids = recommendation_ids
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationTrigger of this RecommendationTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this RecommendationTrigger.


        :return: The data of this RecommendationTrigger.
        :rtype: RecommendationTriggerData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RecommendationTrigger.


        :param data: The data of this RecommendationTrigger.
        :type data: RecommendationTriggerData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def id(self):
        """Gets the id of this RecommendationTrigger.


        :return: The id of this RecommendationTrigger.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecommendationTrigger.


        :param id: The id of this RecommendationTrigger.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def recommendation_ids(self):
        """Gets the recommendation_ids of this RecommendationTrigger.


        :return: The recommendation_ids of this RecommendationTrigger.
        :rtype: List
        """
        return self._recommendation_ids

    @recommendation_ids.setter
    def recommendation_ids(self, recommendation_ids):
        """Sets the recommendation_ids of this RecommendationTrigger.


        :param recommendation_ids: The recommendation_ids of this RecommendationTrigger.
        :type recommendation_ids: List
        """
        if recommendation_ids is None:
            raise ValueError("Invalid value for `recommendation_ids`, must not be `None`")

        self._recommendation_ids = recommendation_ids

    @property
    def source(self):
        """Gets the source of this RecommendationTrigger.


        :return: The source of this RecommendationTrigger.
        :rtype: RecommendationSourceType
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RecommendationTrigger.


        :param source: The source of this RecommendationTrigger.
        :type source: RecommendationSourceType
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this RecommendationTrigger.


        :return: The type of this RecommendationTrigger.
        :rtype: RecommendationTriggerType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecommendationTrigger.


        :param type: The type of this RecommendationTrigger.
        :type type: RecommendationTriggerType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
