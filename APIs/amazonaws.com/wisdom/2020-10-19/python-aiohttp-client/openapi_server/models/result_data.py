# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.result_data_document import ResultDataDocument
from openapi_server import util


class ResultData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: ResultDataDocument=None, relevance_score: float=None, result_id: str=None):
        """ResultData - a model defined in OpenAPI

        :param document: The document of this ResultData.
        :param relevance_score: The relevance_score of this ResultData.
        :param result_id: The result_id of this ResultData.
        """
        self.openapi_types = {
            'document': ResultDataDocument,
            'relevance_score': float,
            'result_id': str
        }

        self.attribute_map = {
            'document': 'document',
            'relevance_score': 'relevanceScore',
            'result_id': 'resultId'
        }

        self._document = document
        self._relevance_score = relevance_score
        self._result_id = result_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResultData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResultData of this ResultData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this ResultData.


        :return: The document of this ResultData.
        :rtype: ResultDataDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this ResultData.


        :param document: The document of this ResultData.
        :type document: ResultDataDocument
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def relevance_score(self):
        """Gets the relevance_score of this ResultData.


        :return: The relevance_score of this ResultData.
        :rtype: float
        """
        return self._relevance_score

    @relevance_score.setter
    def relevance_score(self, relevance_score):
        """Sets the relevance_score of this ResultData.


        :param relevance_score: The relevance_score of this ResultData.
        :type relevance_score: float
        """

        self._relevance_score = relevance_score

    @property
    def result_id(self):
        """Gets the result_id of this ResultData.


        :return: The result_id of this ResultData.
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this ResultData.


        :param result_id: The result_id of this ResultData.
        :type result_id: str
        """
        if result_id is None:
            raise ValueError("Invalid value for `result_id`, must not be `None`")

        self._result_id = result_id
