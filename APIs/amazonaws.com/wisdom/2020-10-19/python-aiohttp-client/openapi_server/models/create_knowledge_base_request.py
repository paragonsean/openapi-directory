# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_assistant_request_server_side_encryption_configuration import CreateAssistantRequestServerSideEncryptionConfiguration
from openapi_server.models.create_knowledge_base_request_rendering_configuration import CreateKnowledgeBaseRequestRenderingConfiguration
from openapi_server.models.create_knowledge_base_request_source_configuration import CreateKnowledgeBaseRequestSourceConfiguration
import re
from openapi_server import util


class CreateKnowledgeBaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, knowledge_base_type: str=None, name: str=None, rendering_configuration: CreateKnowledgeBaseRequestRenderingConfiguration=None, server_side_encryption_configuration: CreateAssistantRequestServerSideEncryptionConfiguration=None, source_configuration: CreateKnowledgeBaseRequestSourceConfiguration=None, tags: Dict[str, str]=None):
        """CreateKnowledgeBaseRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateKnowledgeBaseRequest.
        :param description: The description of this CreateKnowledgeBaseRequest.
        :param knowledge_base_type: The knowledge_base_type of this CreateKnowledgeBaseRequest.
        :param name: The name of this CreateKnowledgeBaseRequest.
        :param rendering_configuration: The rendering_configuration of this CreateKnowledgeBaseRequest.
        :param server_side_encryption_configuration: The server_side_encryption_configuration of this CreateKnowledgeBaseRequest.
        :param source_configuration: The source_configuration of this CreateKnowledgeBaseRequest.
        :param tags: The tags of this CreateKnowledgeBaseRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'knowledge_base_type': str,
            'name': str,
            'rendering_configuration': CreateKnowledgeBaseRequestRenderingConfiguration,
            'server_side_encryption_configuration': CreateAssistantRequestServerSideEncryptionConfiguration,
            'source_configuration': CreateKnowledgeBaseRequestSourceConfiguration,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'description': 'description',
            'knowledge_base_type': 'knowledgeBaseType',
            'name': 'name',
            'rendering_configuration': 'renderingConfiguration',
            'server_side_encryption_configuration': 'serverSideEncryptionConfiguration',
            'source_configuration': 'sourceConfiguration',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._description = description
        self._knowledge_base_type = knowledge_base_type
        self._name = name
        self._rendering_configuration = rendering_configuration
        self._server_side_encryption_configuration = server_side_encryption_configuration
        self._source_configuration = source_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateKnowledgeBaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateKnowledgeBase_request of this CreateKnowledgeBaseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateKnowledgeBaseRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this CreateKnowledgeBaseRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateKnowledgeBaseRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this CreateKnowledgeBaseRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 4096:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `4096`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateKnowledgeBaseRequest.

        The description.

        :return: The description of this CreateKnowledgeBaseRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateKnowledgeBaseRequest.

        The description.

        :param description: The description of this CreateKnowledgeBaseRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'^[a-zA-Z0-9\s_.,-]+', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[a-zA-Z0-9\s_.,-]+/`")

        self._description = description

    @property
    def knowledge_base_type(self):
        """Gets the knowledge_base_type of this CreateKnowledgeBaseRequest.

        The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content. EXTERNAL knowledge bases support integrations with third-party systems whose content is synchronized automatically. 

        :return: The knowledge_base_type of this CreateKnowledgeBaseRequest.
        :rtype: str
        """
        return self._knowledge_base_type

    @knowledge_base_type.setter
    def knowledge_base_type(self, knowledge_base_type):
        """Sets the knowledge_base_type of this CreateKnowledgeBaseRequest.

        The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content. EXTERNAL knowledge bases support integrations with third-party systems whose content is synchronized automatically. 

        :param knowledge_base_type: The knowledge_base_type of this CreateKnowledgeBaseRequest.
        :type knowledge_base_type: str
        """
        allowed_values = ["EXTERNAL", "CUSTOM"]  # noqa: E501
        if knowledge_base_type not in allowed_values:
            raise ValueError(
                "Invalid value for `knowledge_base_type` ({0}), must be one of {1}"
                .format(knowledge_base_type, allowed_values)
            )

        self._knowledge_base_type = knowledge_base_type

    @property
    def name(self):
        """Gets the name of this CreateKnowledgeBaseRequest.

        The name of the knowledge base.

        :return: The name of this CreateKnowledgeBaseRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateKnowledgeBaseRequest.

        The name of the knowledge base.

        :param name: The name of this CreateKnowledgeBaseRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9\s_.,-]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\s_.,-]+/`")

        self._name = name

    @property
    def rendering_configuration(self):
        """Gets the rendering_configuration of this CreateKnowledgeBaseRequest.


        :return: The rendering_configuration of this CreateKnowledgeBaseRequest.
        :rtype: CreateKnowledgeBaseRequestRenderingConfiguration
        """
        return self._rendering_configuration

    @rendering_configuration.setter
    def rendering_configuration(self, rendering_configuration):
        """Sets the rendering_configuration of this CreateKnowledgeBaseRequest.


        :param rendering_configuration: The rendering_configuration of this CreateKnowledgeBaseRequest.
        :type rendering_configuration: CreateKnowledgeBaseRequestRenderingConfiguration
        """

        self._rendering_configuration = rendering_configuration

    @property
    def server_side_encryption_configuration(self):
        """Gets the server_side_encryption_configuration of this CreateKnowledgeBaseRequest.


        :return: The server_side_encryption_configuration of this CreateKnowledgeBaseRequest.
        :rtype: CreateAssistantRequestServerSideEncryptionConfiguration
        """
        return self._server_side_encryption_configuration

    @server_side_encryption_configuration.setter
    def server_side_encryption_configuration(self, server_side_encryption_configuration):
        """Sets the server_side_encryption_configuration of this CreateKnowledgeBaseRequest.


        :param server_side_encryption_configuration: The server_side_encryption_configuration of this CreateKnowledgeBaseRequest.
        :type server_side_encryption_configuration: CreateAssistantRequestServerSideEncryptionConfiguration
        """

        self._server_side_encryption_configuration = server_side_encryption_configuration

    @property
    def source_configuration(self):
        """Gets the source_configuration of this CreateKnowledgeBaseRequest.


        :return: The source_configuration of this CreateKnowledgeBaseRequest.
        :rtype: CreateKnowledgeBaseRequestSourceConfiguration
        """
        return self._source_configuration

    @source_configuration.setter
    def source_configuration(self, source_configuration):
        """Sets the source_configuration of this CreateKnowledgeBaseRequest.


        :param source_configuration: The source_configuration of this CreateKnowledgeBaseRequest.
        :type source_configuration: CreateKnowledgeBaseRequestSourceConfiguration
        """

        self._source_configuration = source_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateKnowledgeBaseRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this CreateKnowledgeBaseRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateKnowledgeBaseRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this CreateKnowledgeBaseRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
