# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Highlight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_offset_inclusive: int=None, end_offset_exclusive: int=None):
        """Highlight - a model defined in OpenAPI

        :param begin_offset_inclusive: The begin_offset_inclusive of this Highlight.
        :param end_offset_exclusive: The end_offset_exclusive of this Highlight.
        """
        self.openapi_types = {
            'begin_offset_inclusive': int,
            'end_offset_exclusive': int
        }

        self.attribute_map = {
            'begin_offset_inclusive': 'beginOffsetInclusive',
            'end_offset_exclusive': 'endOffsetExclusive'
        }

        self._begin_offset_inclusive = begin_offset_inclusive
        self._end_offset_exclusive = end_offset_exclusive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Highlight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Highlight of this Highlight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_offset_inclusive(self):
        """Gets the begin_offset_inclusive of this Highlight.


        :return: The begin_offset_inclusive of this Highlight.
        :rtype: int
        """
        return self._begin_offset_inclusive

    @begin_offset_inclusive.setter
    def begin_offset_inclusive(self, begin_offset_inclusive):
        """Sets the begin_offset_inclusive of this Highlight.


        :param begin_offset_inclusive: The begin_offset_inclusive of this Highlight.
        :type begin_offset_inclusive: int
        """

        self._begin_offset_inclusive = begin_offset_inclusive

    @property
    def end_offset_exclusive(self):
        """Gets the end_offset_exclusive of this Highlight.


        :return: The end_offset_exclusive of this Highlight.
        :rtype: int
        """
        return self._end_offset_exclusive

    @end_offset_exclusive.setter
    def end_offset_exclusive(self, end_offset_exclusive):
        """Sets the end_offset_exclusive of this Highlight.


        :param end_offset_exclusive: The end_offset_exclusive of this Highlight.
        :type end_offset_exclusive: int
        """

        self._end_offset_exclusive = end_offset_exclusive
