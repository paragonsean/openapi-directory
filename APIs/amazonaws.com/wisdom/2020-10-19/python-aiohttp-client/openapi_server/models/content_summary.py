# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_status import ContentStatus
from openapi_server import util


class ContentSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_arn: str=None, content_id: str=None, content_type: str=None, knowledge_base_arn: str=None, knowledge_base_id: str=None, metadata: Dict=None, name: str=None, revision_id: str=None, status: ContentStatus=None, tags: Dict=None, title: str=None):
        """ContentSummary - a model defined in OpenAPI

        :param content_arn: The content_arn of this ContentSummary.
        :param content_id: The content_id of this ContentSummary.
        :param content_type: The content_type of this ContentSummary.
        :param knowledge_base_arn: The knowledge_base_arn of this ContentSummary.
        :param knowledge_base_id: The knowledge_base_id of this ContentSummary.
        :param metadata: The metadata of this ContentSummary.
        :param name: The name of this ContentSummary.
        :param revision_id: The revision_id of this ContentSummary.
        :param status: The status of this ContentSummary.
        :param tags: The tags of this ContentSummary.
        :param title: The title of this ContentSummary.
        """
        self.openapi_types = {
            'content_arn': str,
            'content_id': str,
            'content_type': str,
            'knowledge_base_arn': str,
            'knowledge_base_id': str,
            'metadata': Dict,
            'name': str,
            'revision_id': str,
            'status': ContentStatus,
            'tags': Dict,
            'title': str
        }

        self.attribute_map = {
            'content_arn': 'contentArn',
            'content_id': 'contentId',
            'content_type': 'contentType',
            'knowledge_base_arn': 'knowledgeBaseArn',
            'knowledge_base_id': 'knowledgeBaseId',
            'metadata': 'metadata',
            'name': 'name',
            'revision_id': 'revisionId',
            'status': 'status',
            'tags': 'tags',
            'title': 'title'
        }

        self._content_arn = content_arn
        self._content_id = content_id
        self._content_type = content_type
        self._knowledge_base_arn = knowledge_base_arn
        self._knowledge_base_id = knowledge_base_id
        self._metadata = metadata
        self._name = name
        self._revision_id = revision_id
        self._status = status
        self._tags = tags
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentSummary of this ContentSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_arn(self):
        """Gets the content_arn of this ContentSummary.


        :return: The content_arn of this ContentSummary.
        :rtype: str
        """
        return self._content_arn

    @content_arn.setter
    def content_arn(self, content_arn):
        """Sets the content_arn of this ContentSummary.


        :param content_arn: The content_arn of this ContentSummary.
        :type content_arn: str
        """
        if content_arn is None:
            raise ValueError("Invalid value for `content_arn`, must not be `None`")

        self._content_arn = content_arn

    @property
    def content_id(self):
        """Gets the content_id of this ContentSummary.


        :return: The content_id of this ContentSummary.
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this ContentSummary.


        :param content_id: The content_id of this ContentSummary.
        :type content_id: str
        """
        if content_id is None:
            raise ValueError("Invalid value for `content_id`, must not be `None`")

        self._content_id = content_id

    @property
    def content_type(self):
        """Gets the content_type of this ContentSummary.


        :return: The content_type of this ContentSummary.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ContentSummary.


        :param content_type: The content_type of this ContentSummary.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def knowledge_base_arn(self):
        """Gets the knowledge_base_arn of this ContentSummary.


        :return: The knowledge_base_arn of this ContentSummary.
        :rtype: str
        """
        return self._knowledge_base_arn

    @knowledge_base_arn.setter
    def knowledge_base_arn(self, knowledge_base_arn):
        """Sets the knowledge_base_arn of this ContentSummary.


        :param knowledge_base_arn: The knowledge_base_arn of this ContentSummary.
        :type knowledge_base_arn: str
        """
        if knowledge_base_arn is None:
            raise ValueError("Invalid value for `knowledge_base_arn`, must not be `None`")

        self._knowledge_base_arn = knowledge_base_arn

    @property
    def knowledge_base_id(self):
        """Gets the knowledge_base_id of this ContentSummary.


        :return: The knowledge_base_id of this ContentSummary.
        :rtype: str
        """
        return self._knowledge_base_id

    @knowledge_base_id.setter
    def knowledge_base_id(self, knowledge_base_id):
        """Sets the knowledge_base_id of this ContentSummary.


        :param knowledge_base_id: The knowledge_base_id of this ContentSummary.
        :type knowledge_base_id: str
        """
        if knowledge_base_id is None:
            raise ValueError("Invalid value for `knowledge_base_id`, must not be `None`")

        self._knowledge_base_id = knowledge_base_id

    @property
    def metadata(self):
        """Gets the metadata of this ContentSummary.


        :return: The metadata of this ContentSummary.
        :rtype: Dict
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ContentSummary.


        :param metadata: The metadata of this ContentSummary.
        :type metadata: Dict
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ContentSummary.


        :return: The name of this ContentSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentSummary.


        :param name: The name of this ContentSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def revision_id(self):
        """Gets the revision_id of this ContentSummary.


        :return: The revision_id of this ContentSummary.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this ContentSummary.


        :param revision_id: The revision_id of this ContentSummary.
        :type revision_id: str
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")

        self._revision_id = revision_id

    @property
    def status(self):
        """Gets the status of this ContentSummary.


        :return: The status of this ContentSummary.
        :rtype: ContentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContentSummary.


        :param status: The status of this ContentSummary.
        :type status: ContentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this ContentSummary.


        :return: The tags of this ContentSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ContentSummary.


        :param tags: The tags of this ContentSummary.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this ContentSummary.


        :return: The title of this ContentSummary.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContentSummary.


        :param title: The title of this ContentSummary.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
