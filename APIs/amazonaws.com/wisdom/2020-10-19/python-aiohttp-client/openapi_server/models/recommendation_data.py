# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_data_document import RecommendationDataDocument
from openapi_server.models.recommendation_type import RecommendationType
from openapi_server.models.relevance_level import RelevanceLevel
from openapi_server import util


class RecommendationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: RecommendationDataDocument=None, recommendation_id: str=None, relevance_level: RelevanceLevel=None, relevance_score: float=None, type: RecommendationType=None):
        """RecommendationData - a model defined in OpenAPI

        :param document: The document of this RecommendationData.
        :param recommendation_id: The recommendation_id of this RecommendationData.
        :param relevance_level: The relevance_level of this RecommendationData.
        :param relevance_score: The relevance_score of this RecommendationData.
        :param type: The type of this RecommendationData.
        """
        self.openapi_types = {
            'document': RecommendationDataDocument,
            'recommendation_id': str,
            'relevance_level': RelevanceLevel,
            'relevance_score': float,
            'type': RecommendationType
        }

        self.attribute_map = {
            'document': 'document',
            'recommendation_id': 'recommendationId',
            'relevance_level': 'relevanceLevel',
            'relevance_score': 'relevanceScore',
            'type': 'type'
        }

        self._document = document
        self._recommendation_id = recommendation_id
        self._relevance_level = relevance_level
        self._relevance_score = relevance_score
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationData of this RecommendationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this RecommendationData.


        :return: The document of this RecommendationData.
        :rtype: RecommendationDataDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this RecommendationData.


        :param document: The document of this RecommendationData.
        :type document: RecommendationDataDocument
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this RecommendationData.


        :return: The recommendation_id of this RecommendationData.
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this RecommendationData.


        :param recommendation_id: The recommendation_id of this RecommendationData.
        :type recommendation_id: str
        """
        if recommendation_id is None:
            raise ValueError("Invalid value for `recommendation_id`, must not be `None`")

        self._recommendation_id = recommendation_id

    @property
    def relevance_level(self):
        """Gets the relevance_level of this RecommendationData.


        :return: The relevance_level of this RecommendationData.
        :rtype: RelevanceLevel
        """
        return self._relevance_level

    @relevance_level.setter
    def relevance_level(self, relevance_level):
        """Sets the relevance_level of this RecommendationData.


        :param relevance_level: The relevance_level of this RecommendationData.
        :type relevance_level: RelevanceLevel
        """

        self._relevance_level = relevance_level

    @property
    def relevance_score(self):
        """Gets the relevance_score of this RecommendationData.


        :return: The relevance_score of this RecommendationData.
        :rtype: float
        """
        return self._relevance_score

    @relevance_score.setter
    def relevance_score(self, relevance_score):
        """Sets the relevance_score of this RecommendationData.


        :param relevance_score: The relevance_score of this RecommendationData.
        :type relevance_score: float
        """

        self._relevance_score = relevance_score

    @property
    def type(self):
        """Gets the type of this RecommendationData.


        :return: The type of this RecommendationData.
        :rtype: RecommendationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecommendationData.


        :param type: The type of this RecommendationData.
        :type type: RecommendationType
        """

        self._type = type
