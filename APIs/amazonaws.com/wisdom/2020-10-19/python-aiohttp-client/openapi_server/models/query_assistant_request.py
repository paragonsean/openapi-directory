# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryAssistantRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, next_token: str=None, query_text: str=None):
        """QueryAssistantRequest - a model defined in OpenAPI

        :param max_results: The max_results of this QueryAssistantRequest.
        :param next_token: The next_token of this QueryAssistantRequest.
        :param query_text: The query_text of this QueryAssistantRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'next_token': str,
            'query_text': str
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'query_text': 'queryText'
        }

        self._max_results = max_results
        self._next_token = next_token
        self._query_text = query_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryAssistantRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryAssistant_request of this QueryAssistantRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this QueryAssistantRequest.

        The maximum number of results to return per page.

        :return: The max_results of this QueryAssistantRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this QueryAssistantRequest.

        The maximum number of results to return per page.

        :param max_results: The max_results of this QueryAssistantRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this QueryAssistantRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :return: The next_token of this QueryAssistantRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this QueryAssistantRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :param next_token: The next_token of this QueryAssistantRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token

    @property
    def query_text(self):
        """Gets the query_text of this QueryAssistantRequest.

        The text to search for.

        :return: The query_text of this QueryAssistantRequest.
        :rtype: str
        """
        return self._query_text

    @query_text.setter
    def query_text(self, query_text):
        """Sets the query_text of this QueryAssistantRequest.

        The text to search for.

        :param query_text: The query_text of this QueryAssistantRequest.
        :type query_text: str
        """
        if query_text is None:
            raise ValueError("Invalid value for `query_text`, must not be `None`")

        self._query_text = query_text
