# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assistant_data_server_side_encryption_configuration import AssistantDataServerSideEncryptionConfiguration
from openapi_server.models.create_knowledge_base_request_rendering_configuration import CreateKnowledgeBaseRequestRenderingConfiguration
from openapi_server.models.knowledge_base_status import KnowledgeBaseStatus
from openapi_server.models.knowledge_base_summary_source_configuration import KnowledgeBaseSummarySourceConfiguration
from openapi_server.models.knowledge_base_type import KnowledgeBaseType
from openapi_server import util


class KnowledgeBaseSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, knowledge_base_arn: str=None, knowledge_base_id: str=None, knowledge_base_type: KnowledgeBaseType=None, name: str=None, rendering_configuration: CreateKnowledgeBaseRequestRenderingConfiguration=None, server_side_encryption_configuration: AssistantDataServerSideEncryptionConfiguration=None, source_configuration: KnowledgeBaseSummarySourceConfiguration=None, status: KnowledgeBaseStatus=None, tags: Dict=None):
        """KnowledgeBaseSummary - a model defined in OpenAPI

        :param description: The description of this KnowledgeBaseSummary.
        :param knowledge_base_arn: The knowledge_base_arn of this KnowledgeBaseSummary.
        :param knowledge_base_id: The knowledge_base_id of this KnowledgeBaseSummary.
        :param knowledge_base_type: The knowledge_base_type of this KnowledgeBaseSummary.
        :param name: The name of this KnowledgeBaseSummary.
        :param rendering_configuration: The rendering_configuration of this KnowledgeBaseSummary.
        :param server_side_encryption_configuration: The server_side_encryption_configuration of this KnowledgeBaseSummary.
        :param source_configuration: The source_configuration of this KnowledgeBaseSummary.
        :param status: The status of this KnowledgeBaseSummary.
        :param tags: The tags of this KnowledgeBaseSummary.
        """
        self.openapi_types = {
            'description': str,
            'knowledge_base_arn': str,
            'knowledge_base_id': str,
            'knowledge_base_type': KnowledgeBaseType,
            'name': str,
            'rendering_configuration': CreateKnowledgeBaseRequestRenderingConfiguration,
            'server_side_encryption_configuration': AssistantDataServerSideEncryptionConfiguration,
            'source_configuration': KnowledgeBaseSummarySourceConfiguration,
            'status': KnowledgeBaseStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'description': 'description',
            'knowledge_base_arn': 'knowledgeBaseArn',
            'knowledge_base_id': 'knowledgeBaseId',
            'knowledge_base_type': 'knowledgeBaseType',
            'name': 'name',
            'rendering_configuration': 'renderingConfiguration',
            'server_side_encryption_configuration': 'serverSideEncryptionConfiguration',
            'source_configuration': 'sourceConfiguration',
            'status': 'status',
            'tags': 'tags'
        }

        self._description = description
        self._knowledge_base_arn = knowledge_base_arn
        self._knowledge_base_id = knowledge_base_id
        self._knowledge_base_type = knowledge_base_type
        self._name = name
        self._rendering_configuration = rendering_configuration
        self._server_side_encryption_configuration = server_side_encryption_configuration
        self._source_configuration = source_configuration
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KnowledgeBaseSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KnowledgeBaseSummary of this KnowledgeBaseSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this KnowledgeBaseSummary.


        :return: The description of this KnowledgeBaseSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this KnowledgeBaseSummary.


        :param description: The description of this KnowledgeBaseSummary.
        :type description: str
        """

        self._description = description

    @property
    def knowledge_base_arn(self):
        """Gets the knowledge_base_arn of this KnowledgeBaseSummary.


        :return: The knowledge_base_arn of this KnowledgeBaseSummary.
        :rtype: str
        """
        return self._knowledge_base_arn

    @knowledge_base_arn.setter
    def knowledge_base_arn(self, knowledge_base_arn):
        """Sets the knowledge_base_arn of this KnowledgeBaseSummary.


        :param knowledge_base_arn: The knowledge_base_arn of this KnowledgeBaseSummary.
        :type knowledge_base_arn: str
        """
        if knowledge_base_arn is None:
            raise ValueError("Invalid value for `knowledge_base_arn`, must not be `None`")

        self._knowledge_base_arn = knowledge_base_arn

    @property
    def knowledge_base_id(self):
        """Gets the knowledge_base_id of this KnowledgeBaseSummary.


        :return: The knowledge_base_id of this KnowledgeBaseSummary.
        :rtype: str
        """
        return self._knowledge_base_id

    @knowledge_base_id.setter
    def knowledge_base_id(self, knowledge_base_id):
        """Sets the knowledge_base_id of this KnowledgeBaseSummary.


        :param knowledge_base_id: The knowledge_base_id of this KnowledgeBaseSummary.
        :type knowledge_base_id: str
        """
        if knowledge_base_id is None:
            raise ValueError("Invalid value for `knowledge_base_id`, must not be `None`")

        self._knowledge_base_id = knowledge_base_id

    @property
    def knowledge_base_type(self):
        """Gets the knowledge_base_type of this KnowledgeBaseSummary.


        :return: The knowledge_base_type of this KnowledgeBaseSummary.
        :rtype: KnowledgeBaseType
        """
        return self._knowledge_base_type

    @knowledge_base_type.setter
    def knowledge_base_type(self, knowledge_base_type):
        """Sets the knowledge_base_type of this KnowledgeBaseSummary.


        :param knowledge_base_type: The knowledge_base_type of this KnowledgeBaseSummary.
        :type knowledge_base_type: KnowledgeBaseType
        """
        if knowledge_base_type is None:
            raise ValueError("Invalid value for `knowledge_base_type`, must not be `None`")

        self._knowledge_base_type = knowledge_base_type

    @property
    def name(self):
        """Gets the name of this KnowledgeBaseSummary.


        :return: The name of this KnowledgeBaseSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KnowledgeBaseSummary.


        :param name: The name of this KnowledgeBaseSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rendering_configuration(self):
        """Gets the rendering_configuration of this KnowledgeBaseSummary.


        :return: The rendering_configuration of this KnowledgeBaseSummary.
        :rtype: CreateKnowledgeBaseRequestRenderingConfiguration
        """
        return self._rendering_configuration

    @rendering_configuration.setter
    def rendering_configuration(self, rendering_configuration):
        """Sets the rendering_configuration of this KnowledgeBaseSummary.


        :param rendering_configuration: The rendering_configuration of this KnowledgeBaseSummary.
        :type rendering_configuration: CreateKnowledgeBaseRequestRenderingConfiguration
        """

        self._rendering_configuration = rendering_configuration

    @property
    def server_side_encryption_configuration(self):
        """Gets the server_side_encryption_configuration of this KnowledgeBaseSummary.


        :return: The server_side_encryption_configuration of this KnowledgeBaseSummary.
        :rtype: AssistantDataServerSideEncryptionConfiguration
        """
        return self._server_side_encryption_configuration

    @server_side_encryption_configuration.setter
    def server_side_encryption_configuration(self, server_side_encryption_configuration):
        """Sets the server_side_encryption_configuration of this KnowledgeBaseSummary.


        :param server_side_encryption_configuration: The server_side_encryption_configuration of this KnowledgeBaseSummary.
        :type server_side_encryption_configuration: AssistantDataServerSideEncryptionConfiguration
        """

        self._server_side_encryption_configuration = server_side_encryption_configuration

    @property
    def source_configuration(self):
        """Gets the source_configuration of this KnowledgeBaseSummary.


        :return: The source_configuration of this KnowledgeBaseSummary.
        :rtype: KnowledgeBaseSummarySourceConfiguration
        """
        return self._source_configuration

    @source_configuration.setter
    def source_configuration(self, source_configuration):
        """Sets the source_configuration of this KnowledgeBaseSummary.


        :param source_configuration: The source_configuration of this KnowledgeBaseSummary.
        :type source_configuration: KnowledgeBaseSummarySourceConfiguration
        """

        self._source_configuration = source_configuration

    @property
    def status(self):
        """Gets the status of this KnowledgeBaseSummary.


        :return: The status of this KnowledgeBaseSummary.
        :rtype: KnowledgeBaseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this KnowledgeBaseSummary.


        :param status: The status of this KnowledgeBaseSummary.
        :type status: KnowledgeBaseStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this KnowledgeBaseSummary.


        :return: The tags of this KnowledgeBaseSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this KnowledgeBaseSummary.


        :param tags: The tags of this KnowledgeBaseSummary.
        :type tags: Dict
        """

        self._tags = tags
