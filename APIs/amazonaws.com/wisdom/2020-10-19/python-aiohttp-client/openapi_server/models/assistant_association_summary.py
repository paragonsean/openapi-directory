# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assistant_association_summary_association_data import AssistantAssociationSummaryAssociationData
from openapi_server.models.association_type import AssociationType
from openapi_server import util


class AssistantAssociationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assistant_arn: str=None, assistant_association_arn: str=None, assistant_association_id: str=None, assistant_id: str=None, association_data: AssistantAssociationSummaryAssociationData=None, association_type: AssociationType=None, tags: Dict=None):
        """AssistantAssociationSummary - a model defined in OpenAPI

        :param assistant_arn: The assistant_arn of this AssistantAssociationSummary.
        :param assistant_association_arn: The assistant_association_arn of this AssistantAssociationSummary.
        :param assistant_association_id: The assistant_association_id of this AssistantAssociationSummary.
        :param assistant_id: The assistant_id of this AssistantAssociationSummary.
        :param association_data: The association_data of this AssistantAssociationSummary.
        :param association_type: The association_type of this AssistantAssociationSummary.
        :param tags: The tags of this AssistantAssociationSummary.
        """
        self.openapi_types = {
            'assistant_arn': str,
            'assistant_association_arn': str,
            'assistant_association_id': str,
            'assistant_id': str,
            'association_data': AssistantAssociationSummaryAssociationData,
            'association_type': AssociationType,
            'tags': Dict
        }

        self.attribute_map = {
            'assistant_arn': 'assistantArn',
            'assistant_association_arn': 'assistantAssociationArn',
            'assistant_association_id': 'assistantAssociationId',
            'assistant_id': 'assistantId',
            'association_data': 'associationData',
            'association_type': 'associationType',
            'tags': 'tags'
        }

        self._assistant_arn = assistant_arn
        self._assistant_association_arn = assistant_association_arn
        self._assistant_association_id = assistant_association_id
        self._assistant_id = assistant_id
        self._association_data = association_data
        self._association_type = association_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssistantAssociationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssistantAssociationSummary of this AssistantAssociationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assistant_arn(self):
        """Gets the assistant_arn of this AssistantAssociationSummary.


        :return: The assistant_arn of this AssistantAssociationSummary.
        :rtype: str
        """
        return self._assistant_arn

    @assistant_arn.setter
    def assistant_arn(self, assistant_arn):
        """Sets the assistant_arn of this AssistantAssociationSummary.


        :param assistant_arn: The assistant_arn of this AssistantAssociationSummary.
        :type assistant_arn: str
        """
        if assistant_arn is None:
            raise ValueError("Invalid value for `assistant_arn`, must not be `None`")

        self._assistant_arn = assistant_arn

    @property
    def assistant_association_arn(self):
        """Gets the assistant_association_arn of this AssistantAssociationSummary.


        :return: The assistant_association_arn of this AssistantAssociationSummary.
        :rtype: str
        """
        return self._assistant_association_arn

    @assistant_association_arn.setter
    def assistant_association_arn(self, assistant_association_arn):
        """Sets the assistant_association_arn of this AssistantAssociationSummary.


        :param assistant_association_arn: The assistant_association_arn of this AssistantAssociationSummary.
        :type assistant_association_arn: str
        """
        if assistant_association_arn is None:
            raise ValueError("Invalid value for `assistant_association_arn`, must not be `None`")

        self._assistant_association_arn = assistant_association_arn

    @property
    def assistant_association_id(self):
        """Gets the assistant_association_id of this AssistantAssociationSummary.


        :return: The assistant_association_id of this AssistantAssociationSummary.
        :rtype: str
        """
        return self._assistant_association_id

    @assistant_association_id.setter
    def assistant_association_id(self, assistant_association_id):
        """Sets the assistant_association_id of this AssistantAssociationSummary.


        :param assistant_association_id: The assistant_association_id of this AssistantAssociationSummary.
        :type assistant_association_id: str
        """
        if assistant_association_id is None:
            raise ValueError("Invalid value for `assistant_association_id`, must not be `None`")

        self._assistant_association_id = assistant_association_id

    @property
    def assistant_id(self):
        """Gets the assistant_id of this AssistantAssociationSummary.


        :return: The assistant_id of this AssistantAssociationSummary.
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this AssistantAssociationSummary.


        :param assistant_id: The assistant_id of this AssistantAssociationSummary.
        :type assistant_id: str
        """
        if assistant_id is None:
            raise ValueError("Invalid value for `assistant_id`, must not be `None`")

        self._assistant_id = assistant_id

    @property
    def association_data(self):
        """Gets the association_data of this AssistantAssociationSummary.


        :return: The association_data of this AssistantAssociationSummary.
        :rtype: AssistantAssociationSummaryAssociationData
        """
        return self._association_data

    @association_data.setter
    def association_data(self, association_data):
        """Sets the association_data of this AssistantAssociationSummary.


        :param association_data: The association_data of this AssistantAssociationSummary.
        :type association_data: AssistantAssociationSummaryAssociationData
        """
        if association_data is None:
            raise ValueError("Invalid value for `association_data`, must not be `None`")

        self._association_data = association_data

    @property
    def association_type(self):
        """Gets the association_type of this AssistantAssociationSummary.


        :return: The association_type of this AssistantAssociationSummary.
        :rtype: AssociationType
        """
        return self._association_type

    @association_type.setter
    def association_type(self, association_type):
        """Sets the association_type of this AssistantAssociationSummary.


        :param association_type: The association_type of this AssistantAssociationSummary.
        :type association_type: AssociationType
        """
        if association_type is None:
            raise ValueError("Invalid value for `association_type`, must not be `None`")

        self._association_type = association_type

    @property
    def tags(self):
        """Gets the tags of this AssistantAssociationSummary.


        :return: The tags of this AssistantAssociationSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssistantAssociationSummary.


        :param tags: The tags of this AssistantAssociationSummary.
        :type tags: Dict
        """

        self._tags = tags
