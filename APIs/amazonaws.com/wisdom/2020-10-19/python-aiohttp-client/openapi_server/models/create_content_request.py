# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateContentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, metadata: Dict[str, str]=None, name: str=None, override_link_out_uri: str=None, tags: Dict[str, str]=None, title: str=None, upload_id: str=None):
        """CreateContentRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateContentRequest.
        :param metadata: The metadata of this CreateContentRequest.
        :param name: The name of this CreateContentRequest.
        :param override_link_out_uri: The override_link_out_uri of this CreateContentRequest.
        :param tags: The tags of this CreateContentRequest.
        :param title: The title of this CreateContentRequest.
        :param upload_id: The upload_id of this CreateContentRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'metadata': Dict[str, str],
            'name': str,
            'override_link_out_uri': str,
            'tags': Dict[str, str],
            'title': str,
            'upload_id': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'metadata': 'metadata',
            'name': 'name',
            'override_link_out_uri': 'overrideLinkOutUri',
            'tags': 'tags',
            'title': 'title',
            'upload_id': 'uploadId'
        }

        self._client_token = client_token
        self._metadata = metadata
        self._name = name
        self._override_link_out_uri = override_link_out_uri
        self._tags = tags
        self._title = title
        self._upload_id = upload_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateContentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateContent_request of this CreateContentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateContentRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this CreateContentRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateContentRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this CreateContentRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 4096:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `4096`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token

    @property
    def metadata(self):
        """Gets the metadata of this CreateContentRequest.

        A key/value map to store attributes without affecting tagging or recommendations. For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.

        :return: The metadata of this CreateContentRequest.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateContentRequest.

        A key/value map to store attributes without affecting tagging or recommendations. For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.

        :param metadata: The metadata of this CreateContentRequest.
        :type metadata: Dict[str, str]
        """
        if metadata is not None and len(metadata) > 10:
            raise ValueError("Invalid value for `metadata`, number of items must be less than or equal to `10`")
        if metadata is not None and len(metadata) < 0:
            raise ValueError("Invalid value for `metadata`, number of items must be greater than or equal to `0`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this CreateContentRequest.

        The name of the content. Each piece of content in a knowledge base must have a unique name. You can retrieve a piece of content using only its knowledge base and its name with the <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_SearchContent.html\">SearchContent</a> API.

        :return: The name of this CreateContentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateContentRequest.

        The name of the content. Each piece of content in a knowledge base must have a unique name. You can retrieve a piece of content using only its knowledge base and its name with the <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_SearchContent.html\">SearchContent</a> API.

        :param name: The name of this CreateContentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9\s_.,-]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\s_.,-]+/`")

        self._name = name

    @property
    def override_link_out_uri(self):
        """Gets the override_link_out_uri of this CreateContentRequest.

        The URI you want to use for the article. If the knowledge base has a templateUri, setting this argument overrides it for this piece of content.

        :return: The override_link_out_uri of this CreateContentRequest.
        :rtype: str
        """
        return self._override_link_out_uri

    @override_link_out_uri.setter
    def override_link_out_uri(self, override_link_out_uri):
        """Sets the override_link_out_uri of this CreateContentRequest.

        The URI you want to use for the article. If the knowledge base has a templateUri, setting this argument overrides it for this piece of content.

        :param override_link_out_uri: The override_link_out_uri of this CreateContentRequest.
        :type override_link_out_uri: str
        """
        if override_link_out_uri is not None and len(override_link_out_uri) > 4096:
            raise ValueError("Invalid value for `override_link_out_uri`, length must be less than or equal to `4096`")
        if override_link_out_uri is not None and len(override_link_out_uri) < 1:
            raise ValueError("Invalid value for `override_link_out_uri`, length must be greater than or equal to `1`")

        self._override_link_out_uri = override_link_out_uri

    @property
    def tags(self):
        """Gets the tags of this CreateContentRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this CreateContentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateContentRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this CreateContentRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this CreateContentRequest.

        The title of the content. If not set, the title is equal to the name.

        :return: The title of this CreateContentRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateContentRequest.

        The title of the content. If not set, the title is equal to the name.

        :param title: The title of this CreateContentRequest.
        :type title: str
        """
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def upload_id(self):
        """Gets the upload_id of this CreateContentRequest.

        A pointer to the uploaded asset. This value is returned by <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a>.

        :return: The upload_id of this CreateContentRequest.
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this CreateContentRequest.

        A pointer to the uploaded asset. This value is returned by <a href=\"https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html\">StartContentUpload</a>.

        :param upload_id: The upload_id of this CreateContentRequest.
        :type upload_id: str
        """
        if upload_id is None:
            raise ValueError("Invalid value for `upload_id`, must not be `None`")
        if upload_id is not None and len(upload_id) > 1200:
            raise ValueError("Invalid value for `upload_id`, length must be less than or equal to `1200`")
        if upload_id is not None and len(upload_id) < 1:
            raise ValueError("Invalid value for `upload_id`, length must be greater than or equal to `1`")

        self._upload_id = upload_id
