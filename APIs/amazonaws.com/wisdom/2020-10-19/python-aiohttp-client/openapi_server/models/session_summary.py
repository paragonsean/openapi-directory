# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assistant_arn: str=None, assistant_id: str=None, session_arn: str=None, session_id: str=None):
        """SessionSummary - a model defined in OpenAPI

        :param assistant_arn: The assistant_arn of this SessionSummary.
        :param assistant_id: The assistant_id of this SessionSummary.
        :param session_arn: The session_arn of this SessionSummary.
        :param session_id: The session_id of this SessionSummary.
        """
        self.openapi_types = {
            'assistant_arn': str,
            'assistant_id': str,
            'session_arn': str,
            'session_id': str
        }

        self.attribute_map = {
            'assistant_arn': 'assistantArn',
            'assistant_id': 'assistantId',
            'session_arn': 'sessionArn',
            'session_id': 'sessionId'
        }

        self._assistant_arn = assistant_arn
        self._assistant_id = assistant_id
        self._session_arn = session_arn
        self._session_id = session_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionSummary of this SessionSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assistant_arn(self):
        """Gets the assistant_arn of this SessionSummary.


        :return: The assistant_arn of this SessionSummary.
        :rtype: str
        """
        return self._assistant_arn

    @assistant_arn.setter
    def assistant_arn(self, assistant_arn):
        """Sets the assistant_arn of this SessionSummary.


        :param assistant_arn: The assistant_arn of this SessionSummary.
        :type assistant_arn: str
        """
        if assistant_arn is None:
            raise ValueError("Invalid value for `assistant_arn`, must not be `None`")

        self._assistant_arn = assistant_arn

    @property
    def assistant_id(self):
        """Gets the assistant_id of this SessionSummary.


        :return: The assistant_id of this SessionSummary.
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this SessionSummary.


        :param assistant_id: The assistant_id of this SessionSummary.
        :type assistant_id: str
        """
        if assistant_id is None:
            raise ValueError("Invalid value for `assistant_id`, must not be `None`")

        self._assistant_id = assistant_id

    @property
    def session_arn(self):
        """Gets the session_arn of this SessionSummary.


        :return: The session_arn of this SessionSummary.
        :rtype: str
        """
        return self._session_arn

    @session_arn.setter
    def session_arn(self, session_arn):
        """Sets the session_arn of this SessionSummary.


        :param session_arn: The session_arn of this SessionSummary.
        :type session_arn: str
        """
        if session_arn is None:
            raise ValueError("Invalid value for `session_arn`, must not be `None`")

        self._session_arn = session_arn

    @property
    def session_id(self):
        """Gets the session_id of this SessionSummary.


        :return: The session_id of this SessionSummary.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SessionSummary.


        :param session_id: The session_id of this SessionSummary.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")

        self._session_id = session_id
