# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_content_reference import DocumentContentReference
from openapi_server.models.document_excerpt import DocumentExcerpt
from openapi_server.models.document_title import DocumentTitle
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_reference: DocumentContentReference=None, excerpt: DocumentExcerpt=None, title: DocumentTitle=None):
        """Document - a model defined in OpenAPI

        :param content_reference: The content_reference of this Document.
        :param excerpt: The excerpt of this Document.
        :param title: The title of this Document.
        """
        self.openapi_types = {
            'content_reference': DocumentContentReference,
            'excerpt': DocumentExcerpt,
            'title': DocumentTitle
        }

        self.attribute_map = {
            'content_reference': 'contentReference',
            'excerpt': 'excerpt',
            'title': 'title'
        }

        self._content_reference = content_reference
        self._excerpt = excerpt
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_reference(self):
        """Gets the content_reference of this Document.


        :return: The content_reference of this Document.
        :rtype: DocumentContentReference
        """
        return self._content_reference

    @content_reference.setter
    def content_reference(self, content_reference):
        """Sets the content_reference of this Document.


        :param content_reference: The content_reference of this Document.
        :type content_reference: DocumentContentReference
        """
        if content_reference is None:
            raise ValueError("Invalid value for `content_reference`, must not be `None`")

        self._content_reference = content_reference

    @property
    def excerpt(self):
        """Gets the excerpt of this Document.


        :return: The excerpt of this Document.
        :rtype: DocumentExcerpt
        """
        return self._excerpt

    @excerpt.setter
    def excerpt(self, excerpt):
        """Sets the excerpt of this Document.


        :param excerpt: The excerpt of this Document.
        :type excerpt: DocumentExcerpt
        """

        self._excerpt = excerpt

    @property
    def title(self):
        """Gets the title of this Document.


        :return: The title of this Document.
        :rtype: DocumentTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Document.


        :param title: The title of this Document.
        :type title: DocumentTitle
        """

        self._title = title
