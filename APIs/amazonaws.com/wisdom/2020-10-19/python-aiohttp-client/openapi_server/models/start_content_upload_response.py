# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartContentUploadResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers_to_include: Dict=None, upload_id: str=None, url: str=None, url_expiry: datetime=None):
        """StartContentUploadResponse - a model defined in OpenAPI

        :param headers_to_include: The headers_to_include of this StartContentUploadResponse.
        :param upload_id: The upload_id of this StartContentUploadResponse.
        :param url: The url of this StartContentUploadResponse.
        :param url_expiry: The url_expiry of this StartContentUploadResponse.
        """
        self.openapi_types = {
            'headers_to_include': Dict,
            'upload_id': str,
            'url': str,
            'url_expiry': datetime
        }

        self.attribute_map = {
            'headers_to_include': 'headersToInclude',
            'upload_id': 'uploadId',
            'url': 'url',
            'url_expiry': 'urlExpiry'
        }

        self._headers_to_include = headers_to_include
        self._upload_id = upload_id
        self._url = url
        self._url_expiry = url_expiry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartContentUploadResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartContentUploadResponse of this StartContentUploadResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers_to_include(self):
        """Gets the headers_to_include of this StartContentUploadResponse.


        :return: The headers_to_include of this StartContentUploadResponse.
        :rtype: Dict
        """
        return self._headers_to_include

    @headers_to_include.setter
    def headers_to_include(self, headers_to_include):
        """Sets the headers_to_include of this StartContentUploadResponse.


        :param headers_to_include: The headers_to_include of this StartContentUploadResponse.
        :type headers_to_include: Dict
        """
        if headers_to_include is None:
            raise ValueError("Invalid value for `headers_to_include`, must not be `None`")

        self._headers_to_include = headers_to_include

    @property
    def upload_id(self):
        """Gets the upload_id of this StartContentUploadResponse.


        :return: The upload_id of this StartContentUploadResponse.
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this StartContentUploadResponse.


        :param upload_id: The upload_id of this StartContentUploadResponse.
        :type upload_id: str
        """
        if upload_id is None:
            raise ValueError("Invalid value for `upload_id`, must not be `None`")

        self._upload_id = upload_id

    @property
    def url(self):
        """Gets the url of this StartContentUploadResponse.


        :return: The url of this StartContentUploadResponse.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this StartContentUploadResponse.


        :param url: The url of this StartContentUploadResponse.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def url_expiry(self):
        """Gets the url_expiry of this StartContentUploadResponse.


        :return: The url_expiry of this StartContentUploadResponse.
        :rtype: datetime
        """
        return self._url_expiry

    @url_expiry.setter
    def url_expiry(self, url_expiry):
        """Sets the url_expiry of this StartContentUploadResponse.


        :param url_expiry: The url_expiry of this StartContentUploadResponse.
        :type url_expiry: datetime
        """
        if url_expiry is None:
            raise ValueError("Invalid value for `url_expiry`, must not be `None`")

        self._url_expiry = url_expiry
