# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_content_request_search_expression import SearchContentRequestSearchExpression
from openapi_server import util


class SearchContentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_expression: SearchContentRequestSearchExpression=None):
        """SearchContentRequest - a model defined in OpenAPI

        :param search_expression: The search_expression of this SearchContentRequest.
        """
        self.openapi_types = {
            'search_expression': SearchContentRequestSearchExpression
        }

        self.attribute_map = {
            'search_expression': 'searchExpression'
        }

        self._search_expression = search_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchContentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchContent_request of this SearchContentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_expression(self):
        """Gets the search_expression of this SearchContentRequest.


        :return: The search_expression of this SearchContentRequest.
        :rtype: SearchContentRequestSearchExpression
        """
        return self._search_expression

    @search_expression.setter
    def search_expression(self, search_expression):
        """Sets the search_expression of this SearchContentRequest.


        :param search_expression: The search_expression of this SearchContentRequest.
        :type search_expression: SearchContentRequestSearchExpression
        """
        if search_expression is None:
            raise ValueError("Invalid value for `search_expression`, must not be `None`")

        self._search_expression = search_expression
