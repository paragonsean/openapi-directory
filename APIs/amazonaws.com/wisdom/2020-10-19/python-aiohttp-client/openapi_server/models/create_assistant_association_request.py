# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_assistant_association_request_association import CreateAssistantAssociationRequestAssociation
from openapi_server import util


class CreateAssistantAssociationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, association: CreateAssistantAssociationRequestAssociation=None, association_type: str=None, client_token: str=None, tags: Dict[str, str]=None):
        """CreateAssistantAssociationRequest - a model defined in OpenAPI

        :param association: The association of this CreateAssistantAssociationRequest.
        :param association_type: The association_type of this CreateAssistantAssociationRequest.
        :param client_token: The client_token of this CreateAssistantAssociationRequest.
        :param tags: The tags of this CreateAssistantAssociationRequest.
        """
        self.openapi_types = {
            'association': CreateAssistantAssociationRequestAssociation,
            'association_type': str,
            'client_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'association': 'association',
            'association_type': 'associationType',
            'client_token': 'clientToken',
            'tags': 'tags'
        }

        self._association = association
        self._association_type = association_type
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssistantAssociationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAssistantAssociation_request of this CreateAssistantAssociationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def association(self):
        """Gets the association of this CreateAssistantAssociationRequest.


        :return: The association of this CreateAssistantAssociationRequest.
        :rtype: CreateAssistantAssociationRequestAssociation
        """
        return self._association

    @association.setter
    def association(self, association):
        """Sets the association of this CreateAssistantAssociationRequest.


        :param association: The association of this CreateAssistantAssociationRequest.
        :type association: CreateAssistantAssociationRequestAssociation
        """
        if association is None:
            raise ValueError("Invalid value for `association`, must not be `None`")

        self._association = association

    @property
    def association_type(self):
        """Gets the association_type of this CreateAssistantAssociationRequest.

        The type of association.

        :return: The association_type of this CreateAssistantAssociationRequest.
        :rtype: str
        """
        return self._association_type

    @association_type.setter
    def association_type(self, association_type):
        """Sets the association_type of this CreateAssistantAssociationRequest.

        The type of association.

        :param association_type: The association_type of this CreateAssistantAssociationRequest.
        :type association_type: str
        """
        allowed_values = ["KNOWLEDGE_BASE"]  # noqa: E501
        if association_type not in allowed_values:
            raise ValueError(
                "Invalid value for `association_type` ({0}), must be one of {1}"
                .format(association_type, allowed_values)
            )

        self._association_type = association_type

    @property
    def client_token(self):
        """Gets the client_token of this CreateAssistantAssociationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this CreateAssistantAssociationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateAssistantAssociationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this CreateAssistantAssociationRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 4096:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `4096`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateAssistantAssociationRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this CreateAssistantAssociationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAssistantAssociationRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this CreateAssistantAssociationRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
