# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_status import ContentStatus
from openapi_server import util


class CreateContentResponseContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_arn: str=None, content_id: str=None, content_type: str=None, knowledge_base_arn: str=None, knowledge_base_id: str=None, link_out_uri: str=None, metadata: Dict=None, name: str=None, revision_id: str=None, status: ContentStatus=None, tags: Dict=None, title: str=None, url: str=None, url_expiry: datetime=None):
        """CreateContentResponseContent - a model defined in OpenAPI

        :param content_arn: The content_arn of this CreateContentResponseContent.
        :param content_id: The content_id of this CreateContentResponseContent.
        :param content_type: The content_type of this CreateContentResponseContent.
        :param knowledge_base_arn: The knowledge_base_arn of this CreateContentResponseContent.
        :param knowledge_base_id: The knowledge_base_id of this CreateContentResponseContent.
        :param link_out_uri: The link_out_uri of this CreateContentResponseContent.
        :param metadata: The metadata of this CreateContentResponseContent.
        :param name: The name of this CreateContentResponseContent.
        :param revision_id: The revision_id of this CreateContentResponseContent.
        :param status: The status of this CreateContentResponseContent.
        :param tags: The tags of this CreateContentResponseContent.
        :param title: The title of this CreateContentResponseContent.
        :param url: The url of this CreateContentResponseContent.
        :param url_expiry: The url_expiry of this CreateContentResponseContent.
        """
        self.openapi_types = {
            'content_arn': str,
            'content_id': str,
            'content_type': str,
            'knowledge_base_arn': str,
            'knowledge_base_id': str,
            'link_out_uri': str,
            'metadata': Dict,
            'name': str,
            'revision_id': str,
            'status': ContentStatus,
            'tags': Dict,
            'title': str,
            'url': str,
            'url_expiry': datetime
        }

        self.attribute_map = {
            'content_arn': 'contentArn',
            'content_id': 'contentId',
            'content_type': 'contentType',
            'knowledge_base_arn': 'knowledgeBaseArn',
            'knowledge_base_id': 'knowledgeBaseId',
            'link_out_uri': 'linkOutUri',
            'metadata': 'metadata',
            'name': 'name',
            'revision_id': 'revisionId',
            'status': 'status',
            'tags': 'tags',
            'title': 'title',
            'url': 'url',
            'url_expiry': 'urlExpiry'
        }

        self._content_arn = content_arn
        self._content_id = content_id
        self._content_type = content_type
        self._knowledge_base_arn = knowledge_base_arn
        self._knowledge_base_id = knowledge_base_id
        self._link_out_uri = link_out_uri
        self._metadata = metadata
        self._name = name
        self._revision_id = revision_id
        self._status = status
        self._tags = tags
        self._title = title
        self._url = url
        self._url_expiry = url_expiry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateContentResponseContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateContentResponse_content of this CreateContentResponseContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_arn(self):
        """Gets the content_arn of this CreateContentResponseContent.


        :return: The content_arn of this CreateContentResponseContent.
        :rtype: str
        """
        return self._content_arn

    @content_arn.setter
    def content_arn(self, content_arn):
        """Sets the content_arn of this CreateContentResponseContent.


        :param content_arn: The content_arn of this CreateContentResponseContent.
        :type content_arn: str
        """
        if content_arn is None:
            raise ValueError("Invalid value for `content_arn`, must not be `None`")

        self._content_arn = content_arn

    @property
    def content_id(self):
        """Gets the content_id of this CreateContentResponseContent.


        :return: The content_id of this CreateContentResponseContent.
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this CreateContentResponseContent.


        :param content_id: The content_id of this CreateContentResponseContent.
        :type content_id: str
        """
        if content_id is None:
            raise ValueError("Invalid value for `content_id`, must not be `None`")

        self._content_id = content_id

    @property
    def content_type(self):
        """Gets the content_type of this CreateContentResponseContent.


        :return: The content_type of this CreateContentResponseContent.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CreateContentResponseContent.


        :param content_type: The content_type of this CreateContentResponseContent.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def knowledge_base_arn(self):
        """Gets the knowledge_base_arn of this CreateContentResponseContent.


        :return: The knowledge_base_arn of this CreateContentResponseContent.
        :rtype: str
        """
        return self._knowledge_base_arn

    @knowledge_base_arn.setter
    def knowledge_base_arn(self, knowledge_base_arn):
        """Sets the knowledge_base_arn of this CreateContentResponseContent.


        :param knowledge_base_arn: The knowledge_base_arn of this CreateContentResponseContent.
        :type knowledge_base_arn: str
        """
        if knowledge_base_arn is None:
            raise ValueError("Invalid value for `knowledge_base_arn`, must not be `None`")

        self._knowledge_base_arn = knowledge_base_arn

    @property
    def knowledge_base_id(self):
        """Gets the knowledge_base_id of this CreateContentResponseContent.


        :return: The knowledge_base_id of this CreateContentResponseContent.
        :rtype: str
        """
        return self._knowledge_base_id

    @knowledge_base_id.setter
    def knowledge_base_id(self, knowledge_base_id):
        """Sets the knowledge_base_id of this CreateContentResponseContent.


        :param knowledge_base_id: The knowledge_base_id of this CreateContentResponseContent.
        :type knowledge_base_id: str
        """
        if knowledge_base_id is None:
            raise ValueError("Invalid value for `knowledge_base_id`, must not be `None`")

        self._knowledge_base_id = knowledge_base_id

    @property
    def link_out_uri(self):
        """Gets the link_out_uri of this CreateContentResponseContent.


        :return: The link_out_uri of this CreateContentResponseContent.
        :rtype: str
        """
        return self._link_out_uri

    @link_out_uri.setter
    def link_out_uri(self, link_out_uri):
        """Sets the link_out_uri of this CreateContentResponseContent.


        :param link_out_uri: The link_out_uri of this CreateContentResponseContent.
        :type link_out_uri: str
        """

        self._link_out_uri = link_out_uri

    @property
    def metadata(self):
        """Gets the metadata of this CreateContentResponseContent.


        :return: The metadata of this CreateContentResponseContent.
        :rtype: Dict
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateContentResponseContent.


        :param metadata: The metadata of this CreateContentResponseContent.
        :type metadata: Dict
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this CreateContentResponseContent.


        :return: The name of this CreateContentResponseContent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateContentResponseContent.


        :param name: The name of this CreateContentResponseContent.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def revision_id(self):
        """Gets the revision_id of this CreateContentResponseContent.


        :return: The revision_id of this CreateContentResponseContent.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this CreateContentResponseContent.


        :param revision_id: The revision_id of this CreateContentResponseContent.
        :type revision_id: str
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")

        self._revision_id = revision_id

    @property
    def status(self):
        """Gets the status of this CreateContentResponseContent.


        :return: The status of this CreateContentResponseContent.
        :rtype: ContentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateContentResponseContent.


        :param status: The status of this CreateContentResponseContent.
        :type status: ContentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this CreateContentResponseContent.


        :return: The tags of this CreateContentResponseContent.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateContentResponseContent.


        :param tags: The tags of this CreateContentResponseContent.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this CreateContentResponseContent.


        :return: The title of this CreateContentResponseContent.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateContentResponseContent.


        :param title: The title of this CreateContentResponseContent.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this CreateContentResponseContent.


        :return: The url of this CreateContentResponseContent.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateContentResponseContent.


        :param url: The url of this CreateContentResponseContent.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def url_expiry(self):
        """Gets the url_expiry of this CreateContentResponseContent.


        :return: The url_expiry of this CreateContentResponseContent.
        :rtype: datetime
        """
        return self._url_expiry

    @url_expiry.setter
    def url_expiry(self, url_expiry):
        """Sets the url_expiry of this CreateContentResponseContent.


        :param url_expiry: The url_expiry of this CreateContentResponseContent.
        :type url_expiry: datetime
        """
        if url_expiry is None:
            raise ValueError("Invalid value for `url_expiry`, must not be `None`")

        self._url_expiry = url_expiry
