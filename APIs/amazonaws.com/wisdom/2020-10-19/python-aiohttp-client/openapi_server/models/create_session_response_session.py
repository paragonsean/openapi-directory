# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.session_data_integration_configuration import SessionDataIntegrationConfiguration
from openapi_server import util


class CreateSessionResponseSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, integration_configuration: SessionDataIntegrationConfiguration=None, name: str=None, session_arn: str=None, session_id: str=None, tags: Dict=None):
        """CreateSessionResponseSession - a model defined in OpenAPI

        :param description: The description of this CreateSessionResponseSession.
        :param integration_configuration: The integration_configuration of this CreateSessionResponseSession.
        :param name: The name of this CreateSessionResponseSession.
        :param session_arn: The session_arn of this CreateSessionResponseSession.
        :param session_id: The session_id of this CreateSessionResponseSession.
        :param tags: The tags of this CreateSessionResponseSession.
        """
        self.openapi_types = {
            'description': str,
            'integration_configuration': SessionDataIntegrationConfiguration,
            'name': str,
            'session_arn': str,
            'session_id': str,
            'tags': Dict
        }

        self.attribute_map = {
            'description': 'description',
            'integration_configuration': 'integrationConfiguration',
            'name': 'name',
            'session_arn': 'sessionArn',
            'session_id': 'sessionId',
            'tags': 'tags'
        }

        self._description = description
        self._integration_configuration = integration_configuration
        self._name = name
        self._session_arn = session_arn
        self._session_id = session_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSessionResponseSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSessionResponse_session of this CreateSessionResponseSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateSessionResponseSession.


        :return: The description of this CreateSessionResponseSession.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSessionResponseSession.


        :param description: The description of this CreateSessionResponseSession.
        :type description: str
        """

        self._description = description

    @property
    def integration_configuration(self):
        """Gets the integration_configuration of this CreateSessionResponseSession.


        :return: The integration_configuration of this CreateSessionResponseSession.
        :rtype: SessionDataIntegrationConfiguration
        """
        return self._integration_configuration

    @integration_configuration.setter
    def integration_configuration(self, integration_configuration):
        """Sets the integration_configuration of this CreateSessionResponseSession.


        :param integration_configuration: The integration_configuration of this CreateSessionResponseSession.
        :type integration_configuration: SessionDataIntegrationConfiguration
        """

        self._integration_configuration = integration_configuration

    @property
    def name(self):
        """Gets the name of this CreateSessionResponseSession.


        :return: The name of this CreateSessionResponseSession.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSessionResponseSession.


        :param name: The name of this CreateSessionResponseSession.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def session_arn(self):
        """Gets the session_arn of this CreateSessionResponseSession.


        :return: The session_arn of this CreateSessionResponseSession.
        :rtype: str
        """
        return self._session_arn

    @session_arn.setter
    def session_arn(self, session_arn):
        """Sets the session_arn of this CreateSessionResponseSession.


        :param session_arn: The session_arn of this CreateSessionResponseSession.
        :type session_arn: str
        """
        if session_arn is None:
            raise ValueError("Invalid value for `session_arn`, must not be `None`")

        self._session_arn = session_arn

    @property
    def session_id(self):
        """Gets the session_id of this CreateSessionResponseSession.


        :return: The session_id of this CreateSessionResponseSession.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this CreateSessionResponseSession.


        :param session_id: The session_id of this CreateSessionResponseSession.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")

        self._session_id = session_id

    @property
    def tags(self):
        """Gets the tags of this CreateSessionResponseSession.


        :return: The tags of this CreateSessionResponseSession.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSessionResponseSession.


        :param tags: The tags of this CreateSessionResponseSession.
        :type tags: Dict
        """

        self._tags = tags
