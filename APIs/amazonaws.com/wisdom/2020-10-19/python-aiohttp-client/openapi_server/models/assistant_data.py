# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assistant_data_integration_configuration import AssistantDataIntegrationConfiguration
from openapi_server.models.assistant_data_server_side_encryption_configuration import AssistantDataServerSideEncryptionConfiguration
from openapi_server.models.assistant_status import AssistantStatus
from openapi_server.models.assistant_type import AssistantType
from openapi_server import util


class AssistantData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assistant_arn: str=None, assistant_id: str=None, description: str=None, integration_configuration: AssistantDataIntegrationConfiguration=None, name: str=None, server_side_encryption_configuration: AssistantDataServerSideEncryptionConfiguration=None, status: AssistantStatus=None, tags: Dict=None, type: AssistantType=None):
        """AssistantData - a model defined in OpenAPI

        :param assistant_arn: The assistant_arn of this AssistantData.
        :param assistant_id: The assistant_id of this AssistantData.
        :param description: The description of this AssistantData.
        :param integration_configuration: The integration_configuration of this AssistantData.
        :param name: The name of this AssistantData.
        :param server_side_encryption_configuration: The server_side_encryption_configuration of this AssistantData.
        :param status: The status of this AssistantData.
        :param tags: The tags of this AssistantData.
        :param type: The type of this AssistantData.
        """
        self.openapi_types = {
            'assistant_arn': str,
            'assistant_id': str,
            'description': str,
            'integration_configuration': AssistantDataIntegrationConfiguration,
            'name': str,
            'server_side_encryption_configuration': AssistantDataServerSideEncryptionConfiguration,
            'status': AssistantStatus,
            'tags': Dict,
            'type': AssistantType
        }

        self.attribute_map = {
            'assistant_arn': 'assistantArn',
            'assistant_id': 'assistantId',
            'description': 'description',
            'integration_configuration': 'integrationConfiguration',
            'name': 'name',
            'server_side_encryption_configuration': 'serverSideEncryptionConfiguration',
            'status': 'status',
            'tags': 'tags',
            'type': 'type'
        }

        self._assistant_arn = assistant_arn
        self._assistant_id = assistant_id
        self._description = description
        self._integration_configuration = integration_configuration
        self._name = name
        self._server_side_encryption_configuration = server_side_encryption_configuration
        self._status = status
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssistantData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssistantData of this AssistantData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assistant_arn(self):
        """Gets the assistant_arn of this AssistantData.


        :return: The assistant_arn of this AssistantData.
        :rtype: str
        """
        return self._assistant_arn

    @assistant_arn.setter
    def assistant_arn(self, assistant_arn):
        """Sets the assistant_arn of this AssistantData.


        :param assistant_arn: The assistant_arn of this AssistantData.
        :type assistant_arn: str
        """
        if assistant_arn is None:
            raise ValueError("Invalid value for `assistant_arn`, must not be `None`")

        self._assistant_arn = assistant_arn

    @property
    def assistant_id(self):
        """Gets the assistant_id of this AssistantData.


        :return: The assistant_id of this AssistantData.
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this AssistantData.


        :param assistant_id: The assistant_id of this AssistantData.
        :type assistant_id: str
        """
        if assistant_id is None:
            raise ValueError("Invalid value for `assistant_id`, must not be `None`")

        self._assistant_id = assistant_id

    @property
    def description(self):
        """Gets the description of this AssistantData.


        :return: The description of this AssistantData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssistantData.


        :param description: The description of this AssistantData.
        :type description: str
        """

        self._description = description

    @property
    def integration_configuration(self):
        """Gets the integration_configuration of this AssistantData.


        :return: The integration_configuration of this AssistantData.
        :rtype: AssistantDataIntegrationConfiguration
        """
        return self._integration_configuration

    @integration_configuration.setter
    def integration_configuration(self, integration_configuration):
        """Sets the integration_configuration of this AssistantData.


        :param integration_configuration: The integration_configuration of this AssistantData.
        :type integration_configuration: AssistantDataIntegrationConfiguration
        """

        self._integration_configuration = integration_configuration

    @property
    def name(self):
        """Gets the name of this AssistantData.


        :return: The name of this AssistantData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssistantData.


        :param name: The name of this AssistantData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def server_side_encryption_configuration(self):
        """Gets the server_side_encryption_configuration of this AssistantData.


        :return: The server_side_encryption_configuration of this AssistantData.
        :rtype: AssistantDataServerSideEncryptionConfiguration
        """
        return self._server_side_encryption_configuration

    @server_side_encryption_configuration.setter
    def server_side_encryption_configuration(self, server_side_encryption_configuration):
        """Sets the server_side_encryption_configuration of this AssistantData.


        :param server_side_encryption_configuration: The server_side_encryption_configuration of this AssistantData.
        :type server_side_encryption_configuration: AssistantDataServerSideEncryptionConfiguration
        """

        self._server_side_encryption_configuration = server_side_encryption_configuration

    @property
    def status(self):
        """Gets the status of this AssistantData.


        :return: The status of this AssistantData.
        :rtype: AssistantStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssistantData.


        :param status: The status of this AssistantData.
        :type status: AssistantStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this AssistantData.


        :return: The tags of this AssistantData.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssistantData.


        :param tags: The tags of this AssistantData.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this AssistantData.


        :return: The type of this AssistantData.
        :rtype: AssistantType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssistantData.


        :param type: The type of this AssistantData.
        :type type: AssistantType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
