# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchContainerOverrides(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: List=None, environment: List=None, instance_type: str=None, resource_requirements: List=None):
        """BatchContainerOverrides - a model defined in OpenAPI

        :param command: The command of this BatchContainerOverrides.
        :param environment: The environment of this BatchContainerOverrides.
        :param instance_type: The instance_type of this BatchContainerOverrides.
        :param resource_requirements: The resource_requirements of this BatchContainerOverrides.
        """
        self.openapi_types = {
            'command': List,
            'environment': List,
            'instance_type': str,
            'resource_requirements': List
        }

        self.attribute_map = {
            'command': 'Command',
            'environment': 'Environment',
            'instance_type': 'InstanceType',
            'resource_requirements': 'ResourceRequirements'
        }

        self._command = command
        self._environment = environment
        self._instance_type = instance_type
        self._resource_requirements = resource_requirements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchContainerOverrides':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchContainerOverrides of this BatchContainerOverrides.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this BatchContainerOverrides.


        :return: The command of this BatchContainerOverrides.
        :rtype: List
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this BatchContainerOverrides.


        :param command: The command of this BatchContainerOverrides.
        :type command: List
        """

        self._command = command

    @property
    def environment(self):
        """Gets the environment of this BatchContainerOverrides.


        :return: The environment of this BatchContainerOverrides.
        :rtype: List
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this BatchContainerOverrides.


        :param environment: The environment of this BatchContainerOverrides.
        :type environment: List
        """

        self._environment = environment

    @property
    def instance_type(self):
        """Gets the instance_type of this BatchContainerOverrides.


        :return: The instance_type of this BatchContainerOverrides.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this BatchContainerOverrides.


        :param instance_type: The instance_type of this BatchContainerOverrides.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def resource_requirements(self):
        """Gets the resource_requirements of this BatchContainerOverrides.


        :return: The resource_requirements of this BatchContainerOverrides.
        :rtype: List
        """
        return self._resource_requirements

    @resource_requirements.setter
    def resource_requirements(self, resource_requirements):
        """Sets the resource_requirements of this BatchContainerOverrides.


        :param resource_requirements: The resource_requirements of this BatchContainerOverrides.
        :type resource_requirements: List
        """

        self._resource_requirements = resource_requirements
