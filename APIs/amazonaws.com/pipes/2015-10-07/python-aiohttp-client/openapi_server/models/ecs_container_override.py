# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EcsContainerOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: List=None, cpu: int=None, environment: List=None, environment_files: List=None, memory: int=None, memory_reservation: int=None, name: str=None, resource_requirements: List=None):
        """EcsContainerOverride - a model defined in OpenAPI

        :param command: The command of this EcsContainerOverride.
        :param cpu: The cpu of this EcsContainerOverride.
        :param environment: The environment of this EcsContainerOverride.
        :param environment_files: The environment_files of this EcsContainerOverride.
        :param memory: The memory of this EcsContainerOverride.
        :param memory_reservation: The memory_reservation of this EcsContainerOverride.
        :param name: The name of this EcsContainerOverride.
        :param resource_requirements: The resource_requirements of this EcsContainerOverride.
        """
        self.openapi_types = {
            'command': List,
            'cpu': int,
            'environment': List,
            'environment_files': List,
            'memory': int,
            'memory_reservation': int,
            'name': str,
            'resource_requirements': List
        }

        self.attribute_map = {
            'command': 'Command',
            'cpu': 'Cpu',
            'environment': 'Environment',
            'environment_files': 'EnvironmentFiles',
            'memory': 'Memory',
            'memory_reservation': 'MemoryReservation',
            'name': 'Name',
            'resource_requirements': 'ResourceRequirements'
        }

        self._command = command
        self._cpu = cpu
        self._environment = environment
        self._environment_files = environment_files
        self._memory = memory
        self._memory_reservation = memory_reservation
        self._name = name
        self._resource_requirements = resource_requirements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcsContainerOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcsContainerOverride of this EcsContainerOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this EcsContainerOverride.


        :return: The command of this EcsContainerOverride.
        :rtype: List
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this EcsContainerOverride.


        :param command: The command of this EcsContainerOverride.
        :type command: List
        """

        self._command = command

    @property
    def cpu(self):
        """Gets the cpu of this EcsContainerOverride.


        :return: The cpu of this EcsContainerOverride.
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this EcsContainerOverride.


        :param cpu: The cpu of this EcsContainerOverride.
        :type cpu: int
        """

        self._cpu = cpu

    @property
    def environment(self):
        """Gets the environment of this EcsContainerOverride.


        :return: The environment of this EcsContainerOverride.
        :rtype: List
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this EcsContainerOverride.


        :param environment: The environment of this EcsContainerOverride.
        :type environment: List
        """

        self._environment = environment

    @property
    def environment_files(self):
        """Gets the environment_files of this EcsContainerOverride.


        :return: The environment_files of this EcsContainerOverride.
        :rtype: List
        """
        return self._environment_files

    @environment_files.setter
    def environment_files(self, environment_files):
        """Sets the environment_files of this EcsContainerOverride.


        :param environment_files: The environment_files of this EcsContainerOverride.
        :type environment_files: List
        """

        self._environment_files = environment_files

    @property
    def memory(self):
        """Gets the memory of this EcsContainerOverride.


        :return: The memory of this EcsContainerOverride.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this EcsContainerOverride.


        :param memory: The memory of this EcsContainerOverride.
        :type memory: int
        """

        self._memory = memory

    @property
    def memory_reservation(self):
        """Gets the memory_reservation of this EcsContainerOverride.


        :return: The memory_reservation of this EcsContainerOverride.
        :rtype: int
        """
        return self._memory_reservation

    @memory_reservation.setter
    def memory_reservation(self, memory_reservation):
        """Sets the memory_reservation of this EcsContainerOverride.


        :param memory_reservation: The memory_reservation of this EcsContainerOverride.
        :type memory_reservation: int
        """

        self._memory_reservation = memory_reservation

    @property
    def name(self):
        """Gets the name of this EcsContainerOverride.


        :return: The name of this EcsContainerOverride.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EcsContainerOverride.


        :param name: The name of this EcsContainerOverride.
        :type name: str
        """

        self._name = name

    @property
    def resource_requirements(self):
        """Gets the resource_requirements of this EcsContainerOverride.


        :return: The resource_requirements of this EcsContainerOverride.
        :rtype: List
        """
        return self._resource_requirements

    @resource_requirements.setter
    def resource_requirements(self, resource_requirements):
        """Sets the resource_requirements of this EcsContainerOverride.


        :param resource_requirements: The resource_requirements of this EcsContainerOverride.
        :type resource_requirements: List
        """

        self._resource_requirements = resource_requirements
