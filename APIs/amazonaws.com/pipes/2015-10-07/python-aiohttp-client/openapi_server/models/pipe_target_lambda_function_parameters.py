# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipe_target_invocation_type import PipeTargetInvocationType
from openapi_server import util


class PipeTargetLambdaFunctionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invocation_type: PipeTargetInvocationType=None):
        """PipeTargetLambdaFunctionParameters - a model defined in OpenAPI

        :param invocation_type: The invocation_type of this PipeTargetLambdaFunctionParameters.
        """
        self.openapi_types = {
            'invocation_type': PipeTargetInvocationType
        }

        self.attribute_map = {
            'invocation_type': 'InvocationType'
        }

        self._invocation_type = invocation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipeTargetLambdaFunctionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipeTargetLambdaFunctionParameters of this PipeTargetLambdaFunctionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invocation_type(self):
        """Gets the invocation_type of this PipeTargetLambdaFunctionParameters.


        :return: The invocation_type of this PipeTargetLambdaFunctionParameters.
        :rtype: PipeTargetInvocationType
        """
        return self._invocation_type

    @invocation_type.setter
    def invocation_type(self, invocation_type):
        """Sets the invocation_type of this PipeTargetLambdaFunctionParameters.


        :param invocation_type: The invocation_type of this PipeTargetLambdaFunctionParameters.
        :type invocation_type: PipeTargetInvocationType
        """

        self._invocation_type = invocation_type
