# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_pipe_request_enrichment_parameters import UpdatePipeRequestEnrichmentParameters
from openapi_server.models.update_pipe_request_source_parameters import UpdatePipeRequestSourceParameters
from openapi_server.models.update_pipe_request_target_parameters import UpdatePipeRequestTargetParameters
import re
from openapi_server import util


class UpdatePipeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, desired_state: str=None, enrichment: str=None, enrichment_parameters: UpdatePipeRequestEnrichmentParameters=None, role_arn: str=None, source_parameters: UpdatePipeRequestSourceParameters=None, target: str=None, target_parameters: UpdatePipeRequestTargetParameters=None):
        """UpdatePipeRequest - a model defined in OpenAPI

        :param description: The description of this UpdatePipeRequest.
        :param desired_state: The desired_state of this UpdatePipeRequest.
        :param enrichment: The enrichment of this UpdatePipeRequest.
        :param enrichment_parameters: The enrichment_parameters of this UpdatePipeRequest.
        :param role_arn: The role_arn of this UpdatePipeRequest.
        :param source_parameters: The source_parameters of this UpdatePipeRequest.
        :param target: The target of this UpdatePipeRequest.
        :param target_parameters: The target_parameters of this UpdatePipeRequest.
        """
        self.openapi_types = {
            'description': str,
            'desired_state': str,
            'enrichment': str,
            'enrichment_parameters': UpdatePipeRequestEnrichmentParameters,
            'role_arn': str,
            'source_parameters': UpdatePipeRequestSourceParameters,
            'target': str,
            'target_parameters': UpdatePipeRequestTargetParameters
        }

        self.attribute_map = {
            'description': 'Description',
            'desired_state': 'DesiredState',
            'enrichment': 'Enrichment',
            'enrichment_parameters': 'EnrichmentParameters',
            'role_arn': 'RoleArn',
            'source_parameters': 'SourceParameters',
            'target': 'Target',
            'target_parameters': 'TargetParameters'
        }

        self._description = description
        self._desired_state = desired_state
        self._enrichment = enrichment
        self._enrichment_parameters = enrichment_parameters
        self._role_arn = role_arn
        self._source_parameters = source_parameters
        self._target = target
        self._target_parameters = target_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePipeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePipe_request of this UpdatePipeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdatePipeRequest.

        A description of the pipe.

        :return: The description of this UpdatePipeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatePipeRequest.

        A description of the pipe.

        :param description: The description of this UpdatePipeRequest.
        :type description: str
        """
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'^.*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^.*$/`")

        self._description = description

    @property
    def desired_state(self):
        """Gets the desired_state of this UpdatePipeRequest.

        The state the pipe should be in.

        :return: The desired_state of this UpdatePipeRequest.
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this UpdatePipeRequest.

        The state the pipe should be in.

        :param desired_state: The desired_state of this UpdatePipeRequest.
        :type desired_state: str
        """
        allowed_values = ["RUNNING", "STOPPED"]  # noqa: E501
        if desired_state not in allowed_values:
            raise ValueError(
                "Invalid value for `desired_state` ({0}), must be one of {1}"
                .format(desired_state, allowed_values)
            )

        self._desired_state = desired_state

    @property
    def enrichment(self):
        """Gets the enrichment of this UpdatePipeRequest.

        The ARN of the enrichment resource.

        :return: The enrichment of this UpdatePipeRequest.
        :rtype: str
        """
        return self._enrichment

    @enrichment.setter
    def enrichment(self, enrichment):
        """Sets the enrichment of this UpdatePipeRequest.

        The ARN of the enrichment resource.

        :param enrichment: The enrichment of this UpdatePipeRequest.
        :type enrichment: str
        """
        if enrichment is not None and len(enrichment) > 1600:
            raise ValueError("Invalid value for `enrichment`, length must be less than or equal to `1600`")
        if enrichment is not None and len(enrichment) < 0:
            raise ValueError("Invalid value for `enrichment`, length must be greater than or equal to `0`")
        if enrichment is not None and not re.search(r'^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$', enrichment):
            raise ValueError("Invalid value for `enrichment`, must be a follow pattern or equal to `/^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$/`")

        self._enrichment = enrichment

    @property
    def enrichment_parameters(self):
        """Gets the enrichment_parameters of this UpdatePipeRequest.


        :return: The enrichment_parameters of this UpdatePipeRequest.
        :rtype: UpdatePipeRequestEnrichmentParameters
        """
        return self._enrichment_parameters

    @enrichment_parameters.setter
    def enrichment_parameters(self, enrichment_parameters):
        """Sets the enrichment_parameters of this UpdatePipeRequest.


        :param enrichment_parameters: The enrichment_parameters of this UpdatePipeRequest.
        :type enrichment_parameters: UpdatePipeRequestEnrichmentParameters
        """

        self._enrichment_parameters = enrichment_parameters

    @property
    def role_arn(self):
        """Gets the role_arn of this UpdatePipeRequest.

        The ARN of the role that allows the pipe to send data to the target.

        :return: The role_arn of this UpdatePipeRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this UpdatePipeRequest.

        The ARN of the role that allows the pipe to send data to the target.

        :param role_arn: The role_arn of this UpdatePipeRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 1600:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `1600`")
        if role_arn is not None and len(role_arn) < 1:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `1`")
        if role_arn is not None and not re.search(r'^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role\/?[a-zA-Z0-9+=,.@\-_\/]+$', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role\/?[a-zA-Z0-9+=,.@\-_\/]+$/`")

        self._role_arn = role_arn

    @property
    def source_parameters(self):
        """Gets the source_parameters of this UpdatePipeRequest.


        :return: The source_parameters of this UpdatePipeRequest.
        :rtype: UpdatePipeRequestSourceParameters
        """
        return self._source_parameters

    @source_parameters.setter
    def source_parameters(self, source_parameters):
        """Sets the source_parameters of this UpdatePipeRequest.


        :param source_parameters: The source_parameters of this UpdatePipeRequest.
        :type source_parameters: UpdatePipeRequestSourceParameters
        """

        self._source_parameters = source_parameters

    @property
    def target(self):
        """Gets the target of this UpdatePipeRequest.

        The ARN of the target resource.

        :return: The target of this UpdatePipeRequest.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this UpdatePipeRequest.

        The ARN of the target resource.

        :param target: The target of this UpdatePipeRequest.
        :type target: str
        """
        if target is not None and len(target) > 1600:
            raise ValueError("Invalid value for `target`, length must be less than or equal to `1600`")
        if target is not None and len(target) < 1:
            raise ValueError("Invalid value for `target`, length must be greater than or equal to `1`")
        if target is not None and not re.search(r'^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$', target):
            raise ValueError("Invalid value for `target`, must be a follow pattern or equal to `/^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$/`")

        self._target = target

    @property
    def target_parameters(self):
        """Gets the target_parameters of this UpdatePipeRequest.


        :return: The target_parameters of this UpdatePipeRequest.
        :rtype: UpdatePipeRequestTargetParameters
        """
        return self._target_parameters

    @target_parameters.setter
    def target_parameters(self, target_parameters):
        """Sets the target_parameters of this UpdatePipeRequest.


        :param target_parameters: The target_parameters of this UpdatePipeRequest.
        :type target_parameters: UpdatePipeRequestTargetParameters
        """

        self._target_parameters = target_parameters
