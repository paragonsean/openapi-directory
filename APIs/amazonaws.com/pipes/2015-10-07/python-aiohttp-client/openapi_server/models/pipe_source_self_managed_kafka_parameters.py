# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipe_source_self_managed_kafka_parameters_credentials import PipeSourceSelfManagedKafkaParametersCredentials
from openapi_server.models.pipe_source_self_managed_kafka_parameters_vpc import PipeSourceSelfManagedKafkaParametersVpc
from openapi_server.models.self_managed_kafka_start_position import SelfManagedKafkaStartPosition
from openapi_server import util


class PipeSourceSelfManagedKafkaParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_bootstrap_servers: List=None, batch_size: int=None, consumer_group_id: str=None, credentials: PipeSourceSelfManagedKafkaParametersCredentials=None, maximum_batching_window_in_seconds: int=None, server_root_ca_certificate: str=None, starting_position: SelfManagedKafkaStartPosition=None, topic_name: str=None, vpc: PipeSourceSelfManagedKafkaParametersVpc=None):
        """PipeSourceSelfManagedKafkaParameters - a model defined in OpenAPI

        :param additional_bootstrap_servers: The additional_bootstrap_servers of this PipeSourceSelfManagedKafkaParameters.
        :param batch_size: The batch_size of this PipeSourceSelfManagedKafkaParameters.
        :param consumer_group_id: The consumer_group_id of this PipeSourceSelfManagedKafkaParameters.
        :param credentials: The credentials of this PipeSourceSelfManagedKafkaParameters.
        :param maximum_batching_window_in_seconds: The maximum_batching_window_in_seconds of this PipeSourceSelfManagedKafkaParameters.
        :param server_root_ca_certificate: The server_root_ca_certificate of this PipeSourceSelfManagedKafkaParameters.
        :param starting_position: The starting_position of this PipeSourceSelfManagedKafkaParameters.
        :param topic_name: The topic_name of this PipeSourceSelfManagedKafkaParameters.
        :param vpc: The vpc of this PipeSourceSelfManagedKafkaParameters.
        """
        self.openapi_types = {
            'additional_bootstrap_servers': List,
            'batch_size': int,
            'consumer_group_id': str,
            'credentials': PipeSourceSelfManagedKafkaParametersCredentials,
            'maximum_batching_window_in_seconds': int,
            'server_root_ca_certificate': str,
            'starting_position': SelfManagedKafkaStartPosition,
            'topic_name': str,
            'vpc': PipeSourceSelfManagedKafkaParametersVpc
        }

        self.attribute_map = {
            'additional_bootstrap_servers': 'AdditionalBootstrapServers',
            'batch_size': 'BatchSize',
            'consumer_group_id': 'ConsumerGroupID',
            'credentials': 'Credentials',
            'maximum_batching_window_in_seconds': 'MaximumBatchingWindowInSeconds',
            'server_root_ca_certificate': 'ServerRootCaCertificate',
            'starting_position': 'StartingPosition',
            'topic_name': 'TopicName',
            'vpc': 'Vpc'
        }

        self._additional_bootstrap_servers = additional_bootstrap_servers
        self._batch_size = batch_size
        self._consumer_group_id = consumer_group_id
        self._credentials = credentials
        self._maximum_batching_window_in_seconds = maximum_batching_window_in_seconds
        self._server_root_ca_certificate = server_root_ca_certificate
        self._starting_position = starting_position
        self._topic_name = topic_name
        self._vpc = vpc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipeSourceSelfManagedKafkaParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipeSourceSelfManagedKafkaParameters of this PipeSourceSelfManagedKafkaParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_bootstrap_servers(self):
        """Gets the additional_bootstrap_servers of this PipeSourceSelfManagedKafkaParameters.


        :return: The additional_bootstrap_servers of this PipeSourceSelfManagedKafkaParameters.
        :rtype: List
        """
        return self._additional_bootstrap_servers

    @additional_bootstrap_servers.setter
    def additional_bootstrap_servers(self, additional_bootstrap_servers):
        """Sets the additional_bootstrap_servers of this PipeSourceSelfManagedKafkaParameters.


        :param additional_bootstrap_servers: The additional_bootstrap_servers of this PipeSourceSelfManagedKafkaParameters.
        :type additional_bootstrap_servers: List
        """

        self._additional_bootstrap_servers = additional_bootstrap_servers

    @property
    def batch_size(self):
        """Gets the batch_size of this PipeSourceSelfManagedKafkaParameters.


        :return: The batch_size of this PipeSourceSelfManagedKafkaParameters.
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this PipeSourceSelfManagedKafkaParameters.


        :param batch_size: The batch_size of this PipeSourceSelfManagedKafkaParameters.
        :type batch_size: int
        """

        self._batch_size = batch_size

    @property
    def consumer_group_id(self):
        """Gets the consumer_group_id of this PipeSourceSelfManagedKafkaParameters.


        :return: The consumer_group_id of this PipeSourceSelfManagedKafkaParameters.
        :rtype: str
        """
        return self._consumer_group_id

    @consumer_group_id.setter
    def consumer_group_id(self, consumer_group_id):
        """Sets the consumer_group_id of this PipeSourceSelfManagedKafkaParameters.


        :param consumer_group_id: The consumer_group_id of this PipeSourceSelfManagedKafkaParameters.
        :type consumer_group_id: str
        """

        self._consumer_group_id = consumer_group_id

    @property
    def credentials(self):
        """Gets the credentials of this PipeSourceSelfManagedKafkaParameters.


        :return: The credentials of this PipeSourceSelfManagedKafkaParameters.
        :rtype: PipeSourceSelfManagedKafkaParametersCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this PipeSourceSelfManagedKafkaParameters.


        :param credentials: The credentials of this PipeSourceSelfManagedKafkaParameters.
        :type credentials: PipeSourceSelfManagedKafkaParametersCredentials
        """

        self._credentials = credentials

    @property
    def maximum_batching_window_in_seconds(self):
        """Gets the maximum_batching_window_in_seconds of this PipeSourceSelfManagedKafkaParameters.


        :return: The maximum_batching_window_in_seconds of this PipeSourceSelfManagedKafkaParameters.
        :rtype: int
        """
        return self._maximum_batching_window_in_seconds

    @maximum_batching_window_in_seconds.setter
    def maximum_batching_window_in_seconds(self, maximum_batching_window_in_seconds):
        """Sets the maximum_batching_window_in_seconds of this PipeSourceSelfManagedKafkaParameters.


        :param maximum_batching_window_in_seconds: The maximum_batching_window_in_seconds of this PipeSourceSelfManagedKafkaParameters.
        :type maximum_batching_window_in_seconds: int
        """

        self._maximum_batching_window_in_seconds = maximum_batching_window_in_seconds

    @property
    def server_root_ca_certificate(self):
        """Gets the server_root_ca_certificate of this PipeSourceSelfManagedKafkaParameters.


        :return: The server_root_ca_certificate of this PipeSourceSelfManagedKafkaParameters.
        :rtype: str
        """
        return self._server_root_ca_certificate

    @server_root_ca_certificate.setter
    def server_root_ca_certificate(self, server_root_ca_certificate):
        """Sets the server_root_ca_certificate of this PipeSourceSelfManagedKafkaParameters.


        :param server_root_ca_certificate: The server_root_ca_certificate of this PipeSourceSelfManagedKafkaParameters.
        :type server_root_ca_certificate: str
        """

        self._server_root_ca_certificate = server_root_ca_certificate

    @property
    def starting_position(self):
        """Gets the starting_position of this PipeSourceSelfManagedKafkaParameters.


        :return: The starting_position of this PipeSourceSelfManagedKafkaParameters.
        :rtype: SelfManagedKafkaStartPosition
        """
        return self._starting_position

    @starting_position.setter
    def starting_position(self, starting_position):
        """Sets the starting_position of this PipeSourceSelfManagedKafkaParameters.


        :param starting_position: The starting_position of this PipeSourceSelfManagedKafkaParameters.
        :type starting_position: SelfManagedKafkaStartPosition
        """

        self._starting_position = starting_position

    @property
    def topic_name(self):
        """Gets the topic_name of this PipeSourceSelfManagedKafkaParameters.


        :return: The topic_name of this PipeSourceSelfManagedKafkaParameters.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this PipeSourceSelfManagedKafkaParameters.


        :param topic_name: The topic_name of this PipeSourceSelfManagedKafkaParameters.
        :type topic_name: str
        """
        if topic_name is None:
            raise ValueError("Invalid value for `topic_name`, must not be `None`")

        self._topic_name = topic_name

    @property
    def vpc(self):
        """Gets the vpc of this PipeSourceSelfManagedKafkaParameters.


        :return: The vpc of this PipeSourceSelfManagedKafkaParameters.
        :rtype: PipeSourceSelfManagedKafkaParametersVpc
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this PipeSourceSelfManagedKafkaParameters.


        :param vpc: The vpc of this PipeSourceSelfManagedKafkaParameters.
        :type vpc: PipeSourceSelfManagedKafkaParametersVpc
        """

        self._vpc = vpc
