/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEventBridgePipes);
  }
}(this, function(expect, AmazonEventBridgePipes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEventBridgePipes.PipeTargetBatchJobParameters();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PipeTargetBatchJobParameters', function() {
    it('should create an instance of PipeTargetBatchJobParameters', function() {
      // uncomment below and update the code to test PipeTargetBatchJobParameters
      //var instance = new AmazonEventBridgePipes.PipeTargetBatchJobParameters();
      //expect(instance).to.be.a(AmazonEventBridgePipes.PipeTargetBatchJobParameters);
    });

    it('should have the property arrayProperties (base name: "ArrayProperties")', function() {
      // uncomment below and update the code to test the property arrayProperties
      //var instance = new AmazonEventBridgePipes.PipeTargetBatchJobParameters();
      //expect(instance).to.be();
    });

    it('should have the property containerOverrides (base name: "ContainerOverrides")', function() {
      // uncomment below and update the code to test the property containerOverrides
      //var instance = new AmazonEventBridgePipes.PipeTargetBatchJobParameters();
      //expect(instance).to.be();
    });

    it('should have the property dependsOn (base name: "DependsOn")', function() {
      // uncomment below and update the code to test the property dependsOn
      //var instance = new AmazonEventBridgePipes.PipeTargetBatchJobParameters();
      //expect(instance).to.be();
    });

    it('should have the property jobDefinition (base name: "JobDefinition")', function() {
      // uncomment below and update the code to test the property jobDefinition
      //var instance = new AmazonEventBridgePipes.PipeTargetBatchJobParameters();
      //expect(instance).to.be();
    });

    it('should have the property jobName (base name: "JobName")', function() {
      // uncomment below and update the code to test the property jobName
      //var instance = new AmazonEventBridgePipes.PipeTargetBatchJobParameters();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "Parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new AmazonEventBridgePipes.PipeTargetBatchJobParameters();
      //expect(instance).to.be();
    });

    it('should have the property retryStrategy (base name: "RetryStrategy")', function() {
      // uncomment below and update the code to test the property retryStrategy
      //var instance = new AmazonEventBridgePipes.PipeTargetBatchJobParameters();
      //expect(instance).to.be();
    });

  });

}));
