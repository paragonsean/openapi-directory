/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssignPublicIp from './AssignPublicIp';

/**
 * The AwsVpcConfiguration model module.
 * @module model/AwsVpcConfiguration
 * @version 2015-10-07
 */
class AwsVpcConfiguration {
    /**
     * Constructs a new <code>AwsVpcConfiguration</code>.
     * This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the &lt;code&gt;awsvpc&lt;/code&gt; network mode.
     * @alias module:model/AwsVpcConfiguration
     * @param subnets {Array} 
     */
    constructor(subnets) { 
        
        AwsVpcConfiguration.initialize(this, subnets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subnets) { 
        obj['Subnets'] = subnets;
    }

    /**
     * Constructs a <code>AwsVpcConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AwsVpcConfiguration} obj Optional instance to populate.
     * @return {module:model/AwsVpcConfiguration} The populated <code>AwsVpcConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AwsVpcConfiguration();

            if (data.hasOwnProperty('AssignPublicIp')) {
                obj['AssignPublicIp'] = ApiClient.convertToType(data['AssignPublicIp'], AssignPublicIp);
            }
            if (data.hasOwnProperty('SecurityGroups')) {
                obj['SecurityGroups'] = ApiClient.convertToType(data['SecurityGroups'], Array);
            }
            if (data.hasOwnProperty('Subnets')) {
                obj['Subnets'] = ApiClient.convertToType(data['Subnets'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AwsVpcConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AwsVpcConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AwsVpcConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AssignPublicIp`
        if (data['AssignPublicIp']) { // data not null
          AssignPublicIp.validateJSON(data['AssignPublicIp']);
        }
        // validate the optional field `SecurityGroups`
        if (data['SecurityGroups']) { // data not null
          Array.validateJSON(data['SecurityGroups']);
        }
        // validate the optional field `Subnets`
        if (data['Subnets']) { // data not null
          Array.validateJSON(data['Subnets']);
        }

        return true;
    }


}

AwsVpcConfiguration.RequiredProperties = ["Subnets"];

/**
 * @member {module:model/AssignPublicIp} AssignPublicIp
 */
AwsVpcConfiguration.prototype['AssignPublicIp'] = undefined;

/**
 * @member {Array} SecurityGroups
 */
AwsVpcConfiguration.prototype['SecurityGroups'] = undefined;

/**
 * @member {Array} Subnets
 */
AwsVpcConfiguration.prototype['Subnets'] = undefined;






export default AwsVpcConfiguration;

