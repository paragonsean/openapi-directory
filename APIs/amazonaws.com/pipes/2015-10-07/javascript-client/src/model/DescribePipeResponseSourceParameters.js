/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreatePipeRequestSourceParametersActiveMQBrokerParameters from './CreatePipeRequestSourceParametersActiveMQBrokerParameters';
import CreatePipeRequestSourceParametersDynamoDBStreamParameters from './CreatePipeRequestSourceParametersDynamoDBStreamParameters';
import CreatePipeRequestSourceParametersKinesisStreamParameters from './CreatePipeRequestSourceParametersKinesisStreamParameters';
import CreatePipeRequestSourceParametersManagedStreamingKafkaParameters from './CreatePipeRequestSourceParametersManagedStreamingKafkaParameters';
import CreatePipeRequestSourceParametersRabbitMQBrokerParameters from './CreatePipeRequestSourceParametersRabbitMQBrokerParameters';
import CreatePipeRequestSourceParametersSelfManagedKafkaParameters from './CreatePipeRequestSourceParametersSelfManagedKafkaParameters';
import CreatePipeRequestSourceParametersSqsQueueParameters from './CreatePipeRequestSourceParametersSqsQueueParameters';
import PipeSourceParameters from './PipeSourceParameters';
import UpdatePipeRequestSourceParametersFilterCriteria from './UpdatePipeRequestSourceParametersFilterCriteria';

/**
 * The DescribePipeResponseSourceParameters model module.
 * @module model/DescribePipeResponseSourceParameters
 * @version 2015-10-07
 */
class DescribePipeResponseSourceParameters {
    /**
     * Constructs a new <code>DescribePipeResponseSourceParameters</code>.
     * @alias module:model/DescribePipeResponseSourceParameters
     * @implements module:model/PipeSourceParameters
     */
    constructor() { 
        PipeSourceParameters.initialize(this);
        DescribePipeResponseSourceParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribePipeResponseSourceParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribePipeResponseSourceParameters} obj Optional instance to populate.
     * @return {module:model/DescribePipeResponseSourceParameters} The populated <code>DescribePipeResponseSourceParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribePipeResponseSourceParameters();
            PipeSourceParameters.constructFromObject(data, obj);

            if (data.hasOwnProperty('ActiveMQBrokerParameters')) {
                obj['ActiveMQBrokerParameters'] = CreatePipeRequestSourceParametersActiveMQBrokerParameters.constructFromObject(data['ActiveMQBrokerParameters']);
            }
            if (data.hasOwnProperty('DynamoDBStreamParameters')) {
                obj['DynamoDBStreamParameters'] = CreatePipeRequestSourceParametersDynamoDBStreamParameters.constructFromObject(data['DynamoDBStreamParameters']);
            }
            if (data.hasOwnProperty('FilterCriteria')) {
                obj['FilterCriteria'] = UpdatePipeRequestSourceParametersFilterCriteria.constructFromObject(data['FilterCriteria']);
            }
            if (data.hasOwnProperty('KinesisStreamParameters')) {
                obj['KinesisStreamParameters'] = CreatePipeRequestSourceParametersKinesisStreamParameters.constructFromObject(data['KinesisStreamParameters']);
            }
            if (data.hasOwnProperty('ManagedStreamingKafkaParameters')) {
                obj['ManagedStreamingKafkaParameters'] = CreatePipeRequestSourceParametersManagedStreamingKafkaParameters.constructFromObject(data['ManagedStreamingKafkaParameters']);
            }
            if (data.hasOwnProperty('RabbitMQBrokerParameters')) {
                obj['RabbitMQBrokerParameters'] = CreatePipeRequestSourceParametersRabbitMQBrokerParameters.constructFromObject(data['RabbitMQBrokerParameters']);
            }
            if (data.hasOwnProperty('SelfManagedKafkaParameters')) {
                obj['SelfManagedKafkaParameters'] = CreatePipeRequestSourceParametersSelfManagedKafkaParameters.constructFromObject(data['SelfManagedKafkaParameters']);
            }
            if (data.hasOwnProperty('SqsQueueParameters')) {
                obj['SqsQueueParameters'] = CreatePipeRequestSourceParametersSqsQueueParameters.constructFromObject(data['SqsQueueParameters']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribePipeResponseSourceParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribePipeResponseSourceParameters</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ActiveMQBrokerParameters`
        if (data['ActiveMQBrokerParameters']) { // data not null
          CreatePipeRequestSourceParametersActiveMQBrokerParameters.validateJSON(data['ActiveMQBrokerParameters']);
        }
        // validate the optional field `DynamoDBStreamParameters`
        if (data['DynamoDBStreamParameters']) { // data not null
          CreatePipeRequestSourceParametersDynamoDBStreamParameters.validateJSON(data['DynamoDBStreamParameters']);
        }
        // validate the optional field `FilterCriteria`
        if (data['FilterCriteria']) { // data not null
          UpdatePipeRequestSourceParametersFilterCriteria.validateJSON(data['FilterCriteria']);
        }
        // validate the optional field `KinesisStreamParameters`
        if (data['KinesisStreamParameters']) { // data not null
          CreatePipeRequestSourceParametersKinesisStreamParameters.validateJSON(data['KinesisStreamParameters']);
        }
        // validate the optional field `ManagedStreamingKafkaParameters`
        if (data['ManagedStreamingKafkaParameters']) { // data not null
          CreatePipeRequestSourceParametersManagedStreamingKafkaParameters.validateJSON(data['ManagedStreamingKafkaParameters']);
        }
        // validate the optional field `RabbitMQBrokerParameters`
        if (data['RabbitMQBrokerParameters']) { // data not null
          CreatePipeRequestSourceParametersRabbitMQBrokerParameters.validateJSON(data['RabbitMQBrokerParameters']);
        }
        // validate the optional field `SelfManagedKafkaParameters`
        if (data['SelfManagedKafkaParameters']) { // data not null
          CreatePipeRequestSourceParametersSelfManagedKafkaParameters.validateJSON(data['SelfManagedKafkaParameters']);
        }
        // validate the optional field `SqsQueueParameters`
        if (data['SqsQueueParameters']) { // data not null
          CreatePipeRequestSourceParametersSqsQueueParameters.validateJSON(data['SqsQueueParameters']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreatePipeRequestSourceParametersActiveMQBrokerParameters} ActiveMQBrokerParameters
 */
DescribePipeResponseSourceParameters.prototype['ActiveMQBrokerParameters'] = undefined;

/**
 * @member {module:model/CreatePipeRequestSourceParametersDynamoDBStreamParameters} DynamoDBStreamParameters
 */
DescribePipeResponseSourceParameters.prototype['DynamoDBStreamParameters'] = undefined;

/**
 * @member {module:model/UpdatePipeRequestSourceParametersFilterCriteria} FilterCriteria
 */
DescribePipeResponseSourceParameters.prototype['FilterCriteria'] = undefined;

/**
 * @member {module:model/CreatePipeRequestSourceParametersKinesisStreamParameters} KinesisStreamParameters
 */
DescribePipeResponseSourceParameters.prototype['KinesisStreamParameters'] = undefined;

/**
 * @member {module:model/CreatePipeRequestSourceParametersManagedStreamingKafkaParameters} ManagedStreamingKafkaParameters
 */
DescribePipeResponseSourceParameters.prototype['ManagedStreamingKafkaParameters'] = undefined;

/**
 * @member {module:model/CreatePipeRequestSourceParametersRabbitMQBrokerParameters} RabbitMQBrokerParameters
 */
DescribePipeResponseSourceParameters.prototype['RabbitMQBrokerParameters'] = undefined;

/**
 * @member {module:model/CreatePipeRequestSourceParametersSelfManagedKafkaParameters} SelfManagedKafkaParameters
 */
DescribePipeResponseSourceParameters.prototype['SelfManagedKafkaParameters'] = undefined;

/**
 * @member {module:model/CreatePipeRequestSourceParametersSqsQueueParameters} SqsQueueParameters
 */
DescribePipeResponseSourceParameters.prototype['SqsQueueParameters'] = undefined;


// Implement PipeSourceParameters interface:
/**
 * @member {module:model/CreatePipeRequestSourceParametersActiveMQBrokerParameters} ActiveMQBrokerParameters
 */
PipeSourceParameters.prototype['ActiveMQBrokerParameters'] = undefined;
/**
 * @member {module:model/CreatePipeRequestSourceParametersDynamoDBStreamParameters} DynamoDBStreamParameters
 */
PipeSourceParameters.prototype['DynamoDBStreamParameters'] = undefined;
/**
 * @member {module:model/UpdatePipeRequestSourceParametersFilterCriteria} FilterCriteria
 */
PipeSourceParameters.prototype['FilterCriteria'] = undefined;
/**
 * @member {module:model/CreatePipeRequestSourceParametersKinesisStreamParameters} KinesisStreamParameters
 */
PipeSourceParameters.prototype['KinesisStreamParameters'] = undefined;
/**
 * @member {module:model/CreatePipeRequestSourceParametersManagedStreamingKafkaParameters} ManagedStreamingKafkaParameters
 */
PipeSourceParameters.prototype['ManagedStreamingKafkaParameters'] = undefined;
/**
 * @member {module:model/CreatePipeRequestSourceParametersRabbitMQBrokerParameters} RabbitMQBrokerParameters
 */
PipeSourceParameters.prototype['RabbitMQBrokerParameters'] = undefined;
/**
 * @member {module:model/CreatePipeRequestSourceParametersSelfManagedKafkaParameters} SelfManagedKafkaParameters
 */
PipeSourceParameters.prototype['SelfManagedKafkaParameters'] = undefined;
/**
 * @member {module:model/CreatePipeRequestSourceParametersSqsQueueParameters} SqsQueueParameters
 */
PipeSourceParameters.prototype['SqsQueueParameters'] = undefined;




export default DescribePipeResponseSourceParameters;

