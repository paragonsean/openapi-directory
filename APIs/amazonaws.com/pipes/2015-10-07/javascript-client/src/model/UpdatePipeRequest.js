/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdatePipeRequestEnrichmentParameters from './UpdatePipeRequestEnrichmentParameters';
import UpdatePipeRequestSourceParameters from './UpdatePipeRequestSourceParameters';
import UpdatePipeRequestTargetParameters from './UpdatePipeRequestTargetParameters';

/**
 * The UpdatePipeRequest model module.
 * @module model/UpdatePipeRequest
 * @version 2015-10-07
 */
class UpdatePipeRequest {
    /**
     * Constructs a new <code>UpdatePipeRequest</code>.
     * @alias module:model/UpdatePipeRequest
     * @param roleArn {String} The ARN of the role that allows the pipe to send data to the target.
     */
    constructor(roleArn) { 
        
        UpdatePipeRequest.initialize(this, roleArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, roleArn) { 
        obj['RoleArn'] = roleArn;
    }

    /**
     * Constructs a <code>UpdatePipeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatePipeRequest} obj Optional instance to populate.
     * @return {module:model/UpdatePipeRequest} The populated <code>UpdatePipeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatePipeRequest();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DesiredState')) {
                obj['DesiredState'] = ApiClient.convertToType(data['DesiredState'], 'String');
            }
            if (data.hasOwnProperty('Enrichment')) {
                obj['Enrichment'] = ApiClient.convertToType(data['Enrichment'], 'String');
            }
            if (data.hasOwnProperty('EnrichmentParameters')) {
                obj['EnrichmentParameters'] = UpdatePipeRequestEnrichmentParameters.constructFromObject(data['EnrichmentParameters']);
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('SourceParameters')) {
                obj['SourceParameters'] = UpdatePipeRequestSourceParameters.constructFromObject(data['SourceParameters']);
            }
            if (data.hasOwnProperty('Target')) {
                obj['Target'] = ApiClient.convertToType(data['Target'], 'String');
            }
            if (data.hasOwnProperty('TargetParameters')) {
                obj['TargetParameters'] = UpdatePipeRequestTargetParameters.constructFromObject(data['TargetParameters']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatePipeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatePipeRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdatePipeRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['DesiredState'] && !(typeof data['DesiredState'] === 'string' || data['DesiredState'] instanceof String)) {
            throw new Error("Expected the field `DesiredState` to be a primitive type in the JSON string but got " + data['DesiredState']);
        }
        // ensure the json data is a string
        if (data['Enrichment'] && !(typeof data['Enrichment'] === 'string' || data['Enrichment'] instanceof String)) {
            throw new Error("Expected the field `Enrichment` to be a primitive type in the JSON string but got " + data['Enrichment']);
        }
        // validate the optional field `EnrichmentParameters`
        if (data['EnrichmentParameters']) { // data not null
          UpdatePipeRequestEnrichmentParameters.validateJSON(data['EnrichmentParameters']);
        }
        // ensure the json data is a string
        if (data['RoleArn'] && !(typeof data['RoleArn'] === 'string' || data['RoleArn'] instanceof String)) {
            throw new Error("Expected the field `RoleArn` to be a primitive type in the JSON string but got " + data['RoleArn']);
        }
        // validate the optional field `SourceParameters`
        if (data['SourceParameters']) { // data not null
          UpdatePipeRequestSourceParameters.validateJSON(data['SourceParameters']);
        }
        // ensure the json data is a string
        if (data['Target'] && !(typeof data['Target'] === 'string' || data['Target'] instanceof String)) {
            throw new Error("Expected the field `Target` to be a primitive type in the JSON string but got " + data['Target']);
        }
        // validate the optional field `TargetParameters`
        if (data['TargetParameters']) { // data not null
          UpdatePipeRequestTargetParameters.validateJSON(data['TargetParameters']);
        }

        return true;
    }


}

UpdatePipeRequest.RequiredProperties = ["RoleArn"];

/**
 * A description of the pipe.
 * @member {String} Description
 */
UpdatePipeRequest.prototype['Description'] = undefined;

/**
 * The state the pipe should be in.
 * @member {module:model/UpdatePipeRequest.DesiredStateEnum} DesiredState
 */
UpdatePipeRequest.prototype['DesiredState'] = undefined;

/**
 * The ARN of the enrichment resource.
 * @member {String} Enrichment
 */
UpdatePipeRequest.prototype['Enrichment'] = undefined;

/**
 * @member {module:model/UpdatePipeRequestEnrichmentParameters} EnrichmentParameters
 */
UpdatePipeRequest.prototype['EnrichmentParameters'] = undefined;

/**
 * The ARN of the role that allows the pipe to send data to the target.
 * @member {String} RoleArn
 */
UpdatePipeRequest.prototype['RoleArn'] = undefined;

/**
 * @member {module:model/UpdatePipeRequestSourceParameters} SourceParameters
 */
UpdatePipeRequest.prototype['SourceParameters'] = undefined;

/**
 * The ARN of the target resource.
 * @member {String} Target
 */
UpdatePipeRequest.prototype['Target'] = undefined;

/**
 * @member {module:model/UpdatePipeRequestTargetParameters} TargetParameters
 */
UpdatePipeRequest.prototype['TargetParameters'] = undefined;





/**
 * Allowed values for the <code>DesiredState</code> property.
 * @enum {String}
 * @readonly
 */
UpdatePipeRequest['DesiredStateEnum'] = {

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "STOPPED"
     * @const
     */
    "STOPPED": "STOPPED"
};



export default UpdatePipeRequest;

