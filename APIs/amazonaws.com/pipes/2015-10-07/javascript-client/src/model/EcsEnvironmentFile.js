/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EcsEnvironmentFileType from './EcsEnvironmentFileType';

/**
 * The EcsEnvironmentFile model module.
 * @module model/EcsEnvironmentFile
 * @version 2015-10-07
 */
class EcsEnvironmentFile {
    /**
     * Constructs a new <code>EcsEnvironmentFile</code>.
     * &lt;p&gt;A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a &lt;code&gt;.env&lt;/code&gt; file extension. Each line in an environment file should contain an environment variable in &lt;code&gt;VARIABLE&#x3D;VALUE&lt;/code&gt; format. Lines beginning with &lt;code&gt;#&lt;/code&gt; are treated as comments and are ignored. For more information about the environment variable file syntax, see &lt;a href&#x3D;\&quot;https://docs.docker.com/compose/env-file/\&quot;&gt;Declare default environment variables in file&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If there are environment variables specified using the &lt;code&gt;environment&lt;/code&gt; parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they&#39;re processed from the top down. We recommend that you use unique variable names. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html\&quot;&gt;Specifying environment variables&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This parameter is only supported for tasks hosted on Fargate using the following platform versions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Linux platform version &lt;code&gt;1.4.0&lt;/code&gt; or later.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Windows platform version &lt;code&gt;1.0.0&lt;/code&gt; or later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @alias module:model/EcsEnvironmentFile
     * @param type {module:model/EcsEnvironmentFileType} 
     * @param value {String} 
     */
    constructor(type, value) { 
        
        EcsEnvironmentFile.initialize(this, type, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, value) { 
        obj['type'] = type;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>EcsEnvironmentFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EcsEnvironmentFile} obj Optional instance to populate.
     * @return {module:model/EcsEnvironmentFile} The populated <code>EcsEnvironmentFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EcsEnvironmentFile();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], EcsEnvironmentFileType);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EcsEnvironmentFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EcsEnvironmentFile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EcsEnvironmentFile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          EcsEnvironmentFileType.validateJSON(data['type']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          String.validateJSON(data['value']);
        }

        return true;
    }


}

EcsEnvironmentFile.RequiredProperties = ["type", "value"];

/**
 * @member {module:model/EcsEnvironmentFileType} type
 */
EcsEnvironmentFile.prototype['type'] = undefined;

/**
 * @member {String} value
 */
EcsEnvironmentFile.prototype['value'] = undefined;






export default EcsEnvironmentFile;

