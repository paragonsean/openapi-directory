/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EcsInferenceAcceleratorOverride model module.
 * @module model/EcsInferenceAcceleratorOverride
 * @version 2015-10-07
 */
class EcsInferenceAcceleratorOverride {
    /**
     * Constructs a new <code>EcsInferenceAcceleratorOverride</code>.
     * Details on an Elastic Inference accelerator task override. This parameter is used to override the Elastic Inference accelerator specified in the task definition. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/userguide/ecs-inference.html\&quot;&gt;Working with Amazon Elastic Inference on Amazon ECS&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @alias module:model/EcsInferenceAcceleratorOverride
     */
    constructor() { 
        
        EcsInferenceAcceleratorOverride.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EcsInferenceAcceleratorOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EcsInferenceAcceleratorOverride} obj Optional instance to populate.
     * @return {module:model/EcsInferenceAcceleratorOverride} The populated <code>EcsInferenceAcceleratorOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EcsInferenceAcceleratorOverride();

            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EcsInferenceAcceleratorOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EcsInferenceAcceleratorOverride</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deviceName`
        if (data['deviceName']) { // data not null
          String.validateJSON(data['deviceName']);
        }
        // validate the optional field `deviceType`
        if (data['deviceType']) { // data not null
          String.validateJSON(data['deviceType']);
        }

        return true;
    }


}



/**
 * @member {String} deviceName
 */
EcsInferenceAcceleratorOverride.prototype['deviceName'] = undefined;

/**
 * @member {String} deviceType
 */
EcsInferenceAcceleratorOverride.prototype['deviceType'] = undefined;






export default EcsInferenceAcceleratorOverride;

