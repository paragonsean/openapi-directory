/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EcsEphemeralStorage model module.
 * @module model/EcsEphemeralStorage
 * @version 2015-10-07
 */
class EcsEphemeralStorage {
    /**
     * Constructs a new <code>EcsEphemeralStorage</code>.
     * &lt;p&gt;The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html\&quot;&gt;Fargate task storage&lt;/a&gt; in the &lt;i&gt;Amazon ECS User Guide for Fargate&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only supported for tasks hosted on Fargate using Linux platform version &lt;code&gt;1.4.0&lt;/code&gt; or later. This parameter is not supported for Windows containers on Fargate.&lt;/p&gt; &lt;/note&gt;
     * @alias module:model/EcsEphemeralStorage
     * @param sizeInGiB {Number} 
     */
    constructor(sizeInGiB) { 
        
        EcsEphemeralStorage.initialize(this, sizeInGiB);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sizeInGiB) { 
        obj['sizeInGiB'] = sizeInGiB;
    }

    /**
     * Constructs a <code>EcsEphemeralStorage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EcsEphemeralStorage} obj Optional instance to populate.
     * @return {module:model/EcsEphemeralStorage} The populated <code>EcsEphemeralStorage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EcsEphemeralStorage();

            if (data.hasOwnProperty('sizeInGiB')) {
                obj['sizeInGiB'] = ApiClient.convertToType(data['sizeInGiB'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EcsEphemeralStorage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EcsEphemeralStorage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EcsEphemeralStorage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `sizeInGiB`
        if (data['sizeInGiB']) { // data not null
          Number.validateJSON(data['sizeInGiB']);
        }

        return true;
    }


}

EcsEphemeralStorage.RequiredProperties = ["sizeInGiB"];

/**
 * @member {Number} sizeInGiB
 */
EcsEphemeralStorage.prototype['sizeInGiB'] = undefined;






export default EcsEphemeralStorage;

