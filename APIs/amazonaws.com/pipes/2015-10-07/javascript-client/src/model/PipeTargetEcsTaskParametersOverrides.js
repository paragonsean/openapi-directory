/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EcsTaskOverride from './EcsTaskOverride';
import EcsTaskOverrideEphemeralStorage from './EcsTaskOverrideEphemeralStorage';

/**
 * The PipeTargetEcsTaskParametersOverrides model module.
 * @module model/PipeTargetEcsTaskParametersOverrides
 * @version 2015-10-07
 */
class PipeTargetEcsTaskParametersOverrides {
    /**
     * Constructs a new <code>PipeTargetEcsTaskParametersOverrides</code>.
     * @alias module:model/PipeTargetEcsTaskParametersOverrides
     * @implements module:model/EcsTaskOverride
     */
    constructor() { 
        EcsTaskOverride.initialize(this);
        PipeTargetEcsTaskParametersOverrides.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PipeTargetEcsTaskParametersOverrides</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipeTargetEcsTaskParametersOverrides} obj Optional instance to populate.
     * @return {module:model/PipeTargetEcsTaskParametersOverrides} The populated <code>PipeTargetEcsTaskParametersOverrides</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipeTargetEcsTaskParametersOverrides();
            EcsTaskOverride.constructFromObject(data, obj);

            if (data.hasOwnProperty('ContainerOverrides')) {
                obj['ContainerOverrides'] = ApiClient.convertToType(data['ContainerOverrides'], Array);
            }
            if (data.hasOwnProperty('Cpu')) {
                obj['Cpu'] = ApiClient.convertToType(data['Cpu'], 'String');
            }
            if (data.hasOwnProperty('EphemeralStorage')) {
                obj['EphemeralStorage'] = EcsTaskOverrideEphemeralStorage.constructFromObject(data['EphemeralStorage']);
            }
            if (data.hasOwnProperty('ExecutionRoleArn')) {
                obj['ExecutionRoleArn'] = ApiClient.convertToType(data['ExecutionRoleArn'], 'String');
            }
            if (data.hasOwnProperty('InferenceAcceleratorOverrides')) {
                obj['InferenceAcceleratorOverrides'] = ApiClient.convertToType(data['InferenceAcceleratorOverrides'], Array);
            }
            if (data.hasOwnProperty('Memory')) {
                obj['Memory'] = ApiClient.convertToType(data['Memory'], 'String');
            }
            if (data.hasOwnProperty('TaskRoleArn')) {
                obj['TaskRoleArn'] = ApiClient.convertToType(data['TaskRoleArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipeTargetEcsTaskParametersOverrides</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipeTargetEcsTaskParametersOverrides</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ContainerOverrides`
        if (data['ContainerOverrides']) { // data not null
          Array.validateJSON(data['ContainerOverrides']);
        }
        // validate the optional field `Cpu`
        if (data['Cpu']) { // data not null
          String.validateJSON(data['Cpu']);
        }
        // validate the optional field `EphemeralStorage`
        if (data['EphemeralStorage']) { // data not null
          EcsTaskOverrideEphemeralStorage.validateJSON(data['EphemeralStorage']);
        }
        // validate the optional field `ExecutionRoleArn`
        if (data['ExecutionRoleArn']) { // data not null
          String.validateJSON(data['ExecutionRoleArn']);
        }
        // validate the optional field `InferenceAcceleratorOverrides`
        if (data['InferenceAcceleratorOverrides']) { // data not null
          Array.validateJSON(data['InferenceAcceleratorOverrides']);
        }
        // validate the optional field `Memory`
        if (data['Memory']) { // data not null
          String.validateJSON(data['Memory']);
        }
        // validate the optional field `TaskRoleArn`
        if (data['TaskRoleArn']) { // data not null
          String.validateJSON(data['TaskRoleArn']);
        }

        return true;
    }


}



/**
 * @member {Array} ContainerOverrides
 */
PipeTargetEcsTaskParametersOverrides.prototype['ContainerOverrides'] = undefined;

/**
 * @member {String} Cpu
 */
PipeTargetEcsTaskParametersOverrides.prototype['Cpu'] = undefined;

/**
 * @member {module:model/EcsTaskOverrideEphemeralStorage} EphemeralStorage
 */
PipeTargetEcsTaskParametersOverrides.prototype['EphemeralStorage'] = undefined;

/**
 * @member {String} ExecutionRoleArn
 */
PipeTargetEcsTaskParametersOverrides.prototype['ExecutionRoleArn'] = undefined;

/**
 * @member {Array} InferenceAcceleratorOverrides
 */
PipeTargetEcsTaskParametersOverrides.prototype['InferenceAcceleratorOverrides'] = undefined;

/**
 * @member {String} Memory
 */
PipeTargetEcsTaskParametersOverrides.prototype['Memory'] = undefined;

/**
 * @member {String} TaskRoleArn
 */
PipeTargetEcsTaskParametersOverrides.prototype['TaskRoleArn'] = undefined;


// Implement EcsTaskOverride interface:
/**
 * @member {Array} ContainerOverrides
 */
EcsTaskOverride.prototype['ContainerOverrides'] = undefined;
/**
 * @member {String} Cpu
 */
EcsTaskOverride.prototype['Cpu'] = undefined;
/**
 * @member {module:model/EcsTaskOverrideEphemeralStorage} EphemeralStorage
 */
EcsTaskOverride.prototype['EphemeralStorage'] = undefined;
/**
 * @member {String} ExecutionRoleArn
 */
EcsTaskOverride.prototype['ExecutionRoleArn'] = undefined;
/**
 * @member {Array} InferenceAcceleratorOverrides
 */
EcsTaskOverride.prototype['InferenceAcceleratorOverrides'] = undefined;
/**
 * @member {String} Memory
 */
EcsTaskOverride.prototype['Memory'] = undefined;
/**
 * @member {String} TaskRoleArn
 */
EcsTaskOverride.prototype['TaskRoleArn'] = undefined;




export default PipeTargetEcsTaskParametersOverrides;

