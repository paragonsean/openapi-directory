/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LaunchType from './LaunchType';
import PipeTargetEcsTaskParametersNetworkConfiguration from './PipeTargetEcsTaskParametersNetworkConfiguration';
import PipeTargetEcsTaskParametersOverrides from './PipeTargetEcsTaskParametersOverrides';
import PropagateTags from './PropagateTags';

/**
 * The PipeTargetEcsTaskParameters model module.
 * @module model/PipeTargetEcsTaskParameters
 * @version 2015-10-07
 */
class PipeTargetEcsTaskParameters {
    /**
     * Constructs a new <code>PipeTargetEcsTaskParameters</code>.
     * The parameters for using an Amazon ECS task as a target.
     * @alias module:model/PipeTargetEcsTaskParameters
     * @param taskDefinitionArn {String} 
     */
    constructor(taskDefinitionArn) { 
        
        PipeTargetEcsTaskParameters.initialize(this, taskDefinitionArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, taskDefinitionArn) { 
        obj['TaskDefinitionArn'] = taskDefinitionArn;
    }

    /**
     * Constructs a <code>PipeTargetEcsTaskParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipeTargetEcsTaskParameters} obj Optional instance to populate.
     * @return {module:model/PipeTargetEcsTaskParameters} The populated <code>PipeTargetEcsTaskParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipeTargetEcsTaskParameters();

            if (data.hasOwnProperty('CapacityProviderStrategy')) {
                obj['CapacityProviderStrategy'] = ApiClient.convertToType(data['CapacityProviderStrategy'], Array);
            }
            if (data.hasOwnProperty('EnableECSManagedTags')) {
                obj['EnableECSManagedTags'] = ApiClient.convertToType(data['EnableECSManagedTags'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableExecuteCommand')) {
                obj['EnableExecuteCommand'] = ApiClient.convertToType(data['EnableExecuteCommand'], 'Boolean');
            }
            if (data.hasOwnProperty('Group')) {
                obj['Group'] = ApiClient.convertToType(data['Group'], 'String');
            }
            if (data.hasOwnProperty('LaunchType')) {
                obj['LaunchType'] = ApiClient.convertToType(data['LaunchType'], LaunchType);
            }
            if (data.hasOwnProperty('NetworkConfiguration')) {
                obj['NetworkConfiguration'] = PipeTargetEcsTaskParametersNetworkConfiguration.constructFromObject(data['NetworkConfiguration']);
            }
            if (data.hasOwnProperty('Overrides')) {
                obj['Overrides'] = PipeTargetEcsTaskParametersOverrides.constructFromObject(data['Overrides']);
            }
            if (data.hasOwnProperty('PlacementConstraints')) {
                obj['PlacementConstraints'] = ApiClient.convertToType(data['PlacementConstraints'], Array);
            }
            if (data.hasOwnProperty('PlacementStrategy')) {
                obj['PlacementStrategy'] = ApiClient.convertToType(data['PlacementStrategy'], Array);
            }
            if (data.hasOwnProperty('PlatformVersion')) {
                obj['PlatformVersion'] = ApiClient.convertToType(data['PlatformVersion'], 'String');
            }
            if (data.hasOwnProperty('PropagateTags')) {
                obj['PropagateTags'] = ApiClient.convertToType(data['PropagateTags'], PropagateTags);
            }
            if (data.hasOwnProperty('ReferenceId')) {
                obj['ReferenceId'] = ApiClient.convertToType(data['ReferenceId'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
            if (data.hasOwnProperty('TaskCount')) {
                obj['TaskCount'] = ApiClient.convertToType(data['TaskCount'], 'Number');
            }
            if (data.hasOwnProperty('TaskDefinitionArn')) {
                obj['TaskDefinitionArn'] = ApiClient.convertToType(data['TaskDefinitionArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipeTargetEcsTaskParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipeTargetEcsTaskParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PipeTargetEcsTaskParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CapacityProviderStrategy`
        if (data['CapacityProviderStrategy']) { // data not null
          Array.validateJSON(data['CapacityProviderStrategy']);
        }
        // validate the optional field `EnableECSManagedTags`
        if (data['EnableECSManagedTags']) { // data not null
          Boolean.validateJSON(data['EnableECSManagedTags']);
        }
        // validate the optional field `EnableExecuteCommand`
        if (data['EnableExecuteCommand']) { // data not null
          Boolean.validateJSON(data['EnableExecuteCommand']);
        }
        // validate the optional field `Group`
        if (data['Group']) { // data not null
          String.validateJSON(data['Group']);
        }
        // validate the optional field `LaunchType`
        if (data['LaunchType']) { // data not null
          LaunchType.validateJSON(data['LaunchType']);
        }
        // validate the optional field `NetworkConfiguration`
        if (data['NetworkConfiguration']) { // data not null
          PipeTargetEcsTaskParametersNetworkConfiguration.validateJSON(data['NetworkConfiguration']);
        }
        // validate the optional field `Overrides`
        if (data['Overrides']) { // data not null
          PipeTargetEcsTaskParametersOverrides.validateJSON(data['Overrides']);
        }
        // validate the optional field `PlacementConstraints`
        if (data['PlacementConstraints']) { // data not null
          Array.validateJSON(data['PlacementConstraints']);
        }
        // validate the optional field `PlacementStrategy`
        if (data['PlacementStrategy']) { // data not null
          Array.validateJSON(data['PlacementStrategy']);
        }
        // validate the optional field `PlatformVersion`
        if (data['PlatformVersion']) { // data not null
          String.validateJSON(data['PlatformVersion']);
        }
        // validate the optional field `PropagateTags`
        if (data['PropagateTags']) { // data not null
          PropagateTags.validateJSON(data['PropagateTags']);
        }
        // validate the optional field `ReferenceId`
        if (data['ReferenceId']) { // data not null
          String.validateJSON(data['ReferenceId']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }
        // validate the optional field `TaskCount`
        if (data['TaskCount']) { // data not null
          Number.validateJSON(data['TaskCount']);
        }
        // validate the optional field `TaskDefinitionArn`
        if (data['TaskDefinitionArn']) { // data not null
          String.validateJSON(data['TaskDefinitionArn']);
        }

        return true;
    }


}

PipeTargetEcsTaskParameters.RequiredProperties = ["TaskDefinitionArn"];

/**
 * @member {Array} CapacityProviderStrategy
 */
PipeTargetEcsTaskParameters.prototype['CapacityProviderStrategy'] = undefined;

/**
 * @member {Boolean} EnableECSManagedTags
 */
PipeTargetEcsTaskParameters.prototype['EnableECSManagedTags'] = undefined;

/**
 * @member {Boolean} EnableExecuteCommand
 */
PipeTargetEcsTaskParameters.prototype['EnableExecuteCommand'] = undefined;

/**
 * @member {String} Group
 */
PipeTargetEcsTaskParameters.prototype['Group'] = undefined;

/**
 * @member {module:model/LaunchType} LaunchType
 */
PipeTargetEcsTaskParameters.prototype['LaunchType'] = undefined;

/**
 * @member {module:model/PipeTargetEcsTaskParametersNetworkConfiguration} NetworkConfiguration
 */
PipeTargetEcsTaskParameters.prototype['NetworkConfiguration'] = undefined;

/**
 * @member {module:model/PipeTargetEcsTaskParametersOverrides} Overrides
 */
PipeTargetEcsTaskParameters.prototype['Overrides'] = undefined;

/**
 * @member {Array} PlacementConstraints
 */
PipeTargetEcsTaskParameters.prototype['PlacementConstraints'] = undefined;

/**
 * @member {Array} PlacementStrategy
 */
PipeTargetEcsTaskParameters.prototype['PlacementStrategy'] = undefined;

/**
 * @member {String} PlatformVersion
 */
PipeTargetEcsTaskParameters.prototype['PlatformVersion'] = undefined;

/**
 * @member {module:model/PropagateTags} PropagateTags
 */
PipeTargetEcsTaskParameters.prototype['PropagateTags'] = undefined;

/**
 * @member {String} ReferenceId
 */
PipeTargetEcsTaskParameters.prototype['ReferenceId'] = undefined;

/**
 * @member {Array} Tags
 */
PipeTargetEcsTaskParameters.prototype['Tags'] = undefined;

/**
 * @member {Number} TaskCount
 */
PipeTargetEcsTaskParameters.prototype['TaskCount'] = undefined;

/**
 * @member {String} TaskDefinitionArn
 */
PipeTargetEcsTaskParameters.prototype['TaskDefinitionArn'] = undefined;






export default PipeTargetEcsTaskParameters;

