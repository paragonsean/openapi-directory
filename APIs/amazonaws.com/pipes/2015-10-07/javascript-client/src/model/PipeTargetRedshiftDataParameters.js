/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PipeTargetRedshiftDataParameters model module.
 * @module model/PipeTargetRedshiftDataParameters
 * @version 2015-10-07
 */
class PipeTargetRedshiftDataParameters {
    /**
     * Constructs a new <code>PipeTargetRedshiftDataParameters</code>.
     * These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API ExecuteStatement.
     * @alias module:model/PipeTargetRedshiftDataParameters
     * @param database {String} 
     * @param sqls {Array} 
     */
    constructor(database, sqls) { 
        
        PipeTargetRedshiftDataParameters.initialize(this, database, sqls);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, database, sqls) { 
        obj['Database'] = database;
        obj['Sqls'] = sqls;
    }

    /**
     * Constructs a <code>PipeTargetRedshiftDataParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipeTargetRedshiftDataParameters} obj Optional instance to populate.
     * @return {module:model/PipeTargetRedshiftDataParameters} The populated <code>PipeTargetRedshiftDataParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipeTargetRedshiftDataParameters();

            if (data.hasOwnProperty('Database')) {
                obj['Database'] = ApiClient.convertToType(data['Database'], 'String');
            }
            if (data.hasOwnProperty('DbUser')) {
                obj['DbUser'] = ApiClient.convertToType(data['DbUser'], 'String');
            }
            if (data.hasOwnProperty('SecretManagerArn')) {
                obj['SecretManagerArn'] = ApiClient.convertToType(data['SecretManagerArn'], 'String');
            }
            if (data.hasOwnProperty('Sqls')) {
                obj['Sqls'] = ApiClient.convertToType(data['Sqls'], Array);
            }
            if (data.hasOwnProperty('StatementName')) {
                obj['StatementName'] = ApiClient.convertToType(data['StatementName'], 'String');
            }
            if (data.hasOwnProperty('WithEvent')) {
                obj['WithEvent'] = ApiClient.convertToType(data['WithEvent'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipeTargetRedshiftDataParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipeTargetRedshiftDataParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PipeTargetRedshiftDataParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Database`
        if (data['Database']) { // data not null
          String.validateJSON(data['Database']);
        }
        // validate the optional field `DbUser`
        if (data['DbUser']) { // data not null
          String.validateJSON(data['DbUser']);
        }
        // validate the optional field `SecretManagerArn`
        if (data['SecretManagerArn']) { // data not null
          String.validateJSON(data['SecretManagerArn']);
        }
        // validate the optional field `Sqls`
        if (data['Sqls']) { // data not null
          Array.validateJSON(data['Sqls']);
        }
        // validate the optional field `StatementName`
        if (data['StatementName']) { // data not null
          String.validateJSON(data['StatementName']);
        }
        // validate the optional field `WithEvent`
        if (data['WithEvent']) { // data not null
          Boolean.validateJSON(data['WithEvent']);
        }

        return true;
    }


}

PipeTargetRedshiftDataParameters.RequiredProperties = ["Database", "Sqls"];

/**
 * @member {String} Database
 */
PipeTargetRedshiftDataParameters.prototype['Database'] = undefined;

/**
 * @member {String} DbUser
 */
PipeTargetRedshiftDataParameters.prototype['DbUser'] = undefined;

/**
 * @member {String} SecretManagerArn
 */
PipeTargetRedshiftDataParameters.prototype['SecretManagerArn'] = undefined;

/**
 * @member {Array} Sqls
 */
PipeTargetRedshiftDataParameters.prototype['Sqls'] = undefined;

/**
 * @member {String} StatementName
 */
PipeTargetRedshiftDataParameters.prototype['StatementName'] = undefined;

/**
 * @member {Boolean} WithEvent
 */
PipeTargetRedshiftDataParameters.prototype['WithEvent'] = undefined;






export default PipeTargetRedshiftDataParameters;

