/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EcsContainerOverride model module.
 * @module model/EcsContainerOverride
 * @version 2015-10-07
 */
class EcsContainerOverride {
    /**
     * Constructs a new <code>EcsContainerOverride</code>.
     * The overrides that are sent to a container. An empty container override can be passed in. An example of an empty container override is &lt;code&gt;{\&quot;containerOverrides\&quot;: [ ] }&lt;/code&gt;. If a non-empty container override is specified, the &lt;code&gt;name&lt;/code&gt; parameter must be included.
     * @alias module:model/EcsContainerOverride
     */
    constructor() { 
        
        EcsContainerOverride.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EcsContainerOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EcsContainerOverride} obj Optional instance to populate.
     * @return {module:model/EcsContainerOverride} The populated <code>EcsContainerOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EcsContainerOverride();

            if (data.hasOwnProperty('Command')) {
                obj['Command'] = ApiClient.convertToType(data['Command'], Array);
            }
            if (data.hasOwnProperty('Cpu')) {
                obj['Cpu'] = ApiClient.convertToType(data['Cpu'], 'Number');
            }
            if (data.hasOwnProperty('Environment')) {
                obj['Environment'] = ApiClient.convertToType(data['Environment'], Array);
            }
            if (data.hasOwnProperty('EnvironmentFiles')) {
                obj['EnvironmentFiles'] = ApiClient.convertToType(data['EnvironmentFiles'], Array);
            }
            if (data.hasOwnProperty('Memory')) {
                obj['Memory'] = ApiClient.convertToType(data['Memory'], 'Number');
            }
            if (data.hasOwnProperty('MemoryReservation')) {
                obj['MemoryReservation'] = ApiClient.convertToType(data['MemoryReservation'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ResourceRequirements')) {
                obj['ResourceRequirements'] = ApiClient.convertToType(data['ResourceRequirements'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EcsContainerOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EcsContainerOverride</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Command`
        if (data['Command']) { // data not null
          Array.validateJSON(data['Command']);
        }
        // validate the optional field `Cpu`
        if (data['Cpu']) { // data not null
          Number.validateJSON(data['Cpu']);
        }
        // validate the optional field `Environment`
        if (data['Environment']) { // data not null
          Array.validateJSON(data['Environment']);
        }
        // validate the optional field `EnvironmentFiles`
        if (data['EnvironmentFiles']) { // data not null
          Array.validateJSON(data['EnvironmentFiles']);
        }
        // validate the optional field `Memory`
        if (data['Memory']) { // data not null
          Number.validateJSON(data['Memory']);
        }
        // validate the optional field `MemoryReservation`
        if (data['MemoryReservation']) { // data not null
          Number.validateJSON(data['MemoryReservation']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `ResourceRequirements`
        if (data['ResourceRequirements']) { // data not null
          Array.validateJSON(data['ResourceRequirements']);
        }

        return true;
    }


}



/**
 * @member {Array} Command
 */
EcsContainerOverride.prototype['Command'] = undefined;

/**
 * @member {Number} Cpu
 */
EcsContainerOverride.prototype['Cpu'] = undefined;

/**
 * @member {Array} Environment
 */
EcsContainerOverride.prototype['Environment'] = undefined;

/**
 * @member {Array} EnvironmentFiles
 */
EcsContainerOverride.prototype['EnvironmentFiles'] = undefined;

/**
 * @member {Number} Memory
 */
EcsContainerOverride.prototype['Memory'] = undefined;

/**
 * @member {Number} MemoryReservation
 */
EcsContainerOverride.prototype['MemoryReservation'] = undefined;

/**
 * @member {String} Name
 */
EcsContainerOverride.prototype['Name'] = undefined;

/**
 * @member {Array} ResourceRequirements
 */
EcsContainerOverride.prototype['ResourceRequirements'] = undefined;






export default EcsContainerOverride;

