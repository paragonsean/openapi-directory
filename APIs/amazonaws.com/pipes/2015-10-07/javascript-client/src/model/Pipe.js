/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PipeState from './PipeState';
import RequestedPipeState from './RequestedPipeState';

/**
 * The Pipe model module.
 * @module model/Pipe
 * @version 2015-10-07
 */
class Pipe {
    /**
     * Constructs a new <code>Pipe</code>.
     * An object that represents a pipe. Amazon EventBridgePipes connect event sources to targets and reduces the need for specialized knowledge and integration code.
     * @alias module:model/Pipe
     */
    constructor() { 
        
        Pipe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pipe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pipe} obj Optional instance to populate.
     * @return {module:model/Pipe} The populated <code>Pipe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pipe();

            if (data.hasOwnProperty('Arn')) {
                obj['Arn'] = ApiClient.convertToType(data['Arn'], 'String');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('CurrentState')) {
                obj['CurrentState'] = ApiClient.convertToType(data['CurrentState'], PipeState);
            }
            if (data.hasOwnProperty('DesiredState')) {
                obj['DesiredState'] = ApiClient.convertToType(data['DesiredState'], RequestedPipeState);
            }
            if (data.hasOwnProperty('Enrichment')) {
                obj['Enrichment'] = ApiClient.convertToType(data['Enrichment'], 'String');
            }
            if (data.hasOwnProperty('LastModifiedTime')) {
                obj['LastModifiedTime'] = ApiClient.convertToType(data['LastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Source')) {
                obj['Source'] = ApiClient.convertToType(data['Source'], 'String');
            }
            if (data.hasOwnProperty('StateReason')) {
                obj['StateReason'] = ApiClient.convertToType(data['StateReason'], 'String');
            }
            if (data.hasOwnProperty('Target')) {
                obj['Target'] = ApiClient.convertToType(data['Target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pipe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pipe</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Arn`
        if (data['Arn']) { // data not null
          String.validateJSON(data['Arn']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `CurrentState`
        if (data['CurrentState']) { // data not null
          PipeState.validateJSON(data['CurrentState']);
        }
        // validate the optional field `DesiredState`
        if (data['DesiredState']) { // data not null
          RequestedPipeState.validateJSON(data['DesiredState']);
        }
        // validate the optional field `Enrichment`
        if (data['Enrichment']) { // data not null
          String.validateJSON(data['Enrichment']);
        }
        // validate the optional field `LastModifiedTime`
        if (data['LastModifiedTime']) { // data not null
          Date.validateJSON(data['LastModifiedTime']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Source`
        if (data['Source']) { // data not null
          String.validateJSON(data['Source']);
        }
        // validate the optional field `StateReason`
        if (data['StateReason']) { // data not null
          String.validateJSON(data['StateReason']);
        }
        // validate the optional field `Target`
        if (data['Target']) { // data not null
          String.validateJSON(data['Target']);
        }

        return true;
    }


}



/**
 * @member {String} Arn
 */
Pipe.prototype['Arn'] = undefined;

/**
 * @member {Date} CreationTime
 */
Pipe.prototype['CreationTime'] = undefined;

/**
 * @member {module:model/PipeState} CurrentState
 */
Pipe.prototype['CurrentState'] = undefined;

/**
 * @member {module:model/RequestedPipeState} DesiredState
 */
Pipe.prototype['DesiredState'] = undefined;

/**
 * @member {String} Enrichment
 */
Pipe.prototype['Enrichment'] = undefined;

/**
 * @member {Date} LastModifiedTime
 */
Pipe.prototype['LastModifiedTime'] = undefined;

/**
 * @member {String} Name
 */
Pipe.prototype['Name'] = undefined;

/**
 * @member {String} Source
 */
Pipe.prototype['Source'] = undefined;

/**
 * @member {String} StateReason
 */
Pipe.prototype['StateReason'] = undefined;

/**
 * @member {String} Target
 */
Pipe.prototype['Target'] = undefined;






export default Pipe;

