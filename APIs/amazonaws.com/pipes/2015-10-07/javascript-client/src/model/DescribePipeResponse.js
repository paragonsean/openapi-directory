/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DescribePipeResponseEnrichmentParameters from './DescribePipeResponseEnrichmentParameters';
import DescribePipeResponseSourceParameters from './DescribePipeResponseSourceParameters';
import DescribePipeResponseTargetParameters from './DescribePipeResponseTargetParameters';
import PipeState from './PipeState';
import RequestedPipeStateDescribeResponse from './RequestedPipeStateDescribeResponse';

/**
 * The DescribePipeResponse model module.
 * @module model/DescribePipeResponse
 * @version 2015-10-07
 */
class DescribePipeResponse {
    /**
     * Constructs a new <code>DescribePipeResponse</code>.
     * @alias module:model/DescribePipeResponse
     */
    constructor() { 
        
        DescribePipeResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribePipeResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribePipeResponse} obj Optional instance to populate.
     * @return {module:model/DescribePipeResponse} The populated <code>DescribePipeResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribePipeResponse();

            if (data.hasOwnProperty('Arn')) {
                obj['Arn'] = ApiClient.convertToType(data['Arn'], 'String');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('CurrentState')) {
                obj['CurrentState'] = ApiClient.convertToType(data['CurrentState'], PipeState);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DesiredState')) {
                obj['DesiredState'] = ApiClient.convertToType(data['DesiredState'], RequestedPipeStateDescribeResponse);
            }
            if (data.hasOwnProperty('Enrichment')) {
                obj['Enrichment'] = ApiClient.convertToType(data['Enrichment'], 'String');
            }
            if (data.hasOwnProperty('EnrichmentParameters')) {
                obj['EnrichmentParameters'] = DescribePipeResponseEnrichmentParameters.constructFromObject(data['EnrichmentParameters']);
            }
            if (data.hasOwnProperty('LastModifiedTime')) {
                obj['LastModifiedTime'] = ApiClient.convertToType(data['LastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('Source')) {
                obj['Source'] = ApiClient.convertToType(data['Source'], 'String');
            }
            if (data.hasOwnProperty('SourceParameters')) {
                obj['SourceParameters'] = DescribePipeResponseSourceParameters.constructFromObject(data['SourceParameters']);
            }
            if (data.hasOwnProperty('StateReason')) {
                obj['StateReason'] = ApiClient.convertToType(data['StateReason'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Object);
            }
            if (data.hasOwnProperty('Target')) {
                obj['Target'] = ApiClient.convertToType(data['Target'], 'String');
            }
            if (data.hasOwnProperty('TargetParameters')) {
                obj['TargetParameters'] = DescribePipeResponseTargetParameters.constructFromObject(data['TargetParameters']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribePipeResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribePipeResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Arn`
        if (data['Arn']) { // data not null
          String.validateJSON(data['Arn']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `CurrentState`
        if (data['CurrentState']) { // data not null
          PipeState.validateJSON(data['CurrentState']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `DesiredState`
        if (data['DesiredState']) { // data not null
          RequestedPipeStateDescribeResponse.validateJSON(data['DesiredState']);
        }
        // validate the optional field `Enrichment`
        if (data['Enrichment']) { // data not null
          String.validateJSON(data['Enrichment']);
        }
        // validate the optional field `EnrichmentParameters`
        if (data['EnrichmentParameters']) { // data not null
          DescribePipeResponseEnrichmentParameters.validateJSON(data['EnrichmentParameters']);
        }
        // validate the optional field `LastModifiedTime`
        if (data['LastModifiedTime']) { // data not null
          Date.validateJSON(data['LastModifiedTime']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `RoleArn`
        if (data['RoleArn']) { // data not null
          String.validateJSON(data['RoleArn']);
        }
        // validate the optional field `Source`
        if (data['Source']) { // data not null
          String.validateJSON(data['Source']);
        }
        // validate the optional field `SourceParameters`
        if (data['SourceParameters']) { // data not null
          DescribePipeResponseSourceParameters.validateJSON(data['SourceParameters']);
        }
        // validate the optional field `StateReason`
        if (data['StateReason']) { // data not null
          String.validateJSON(data['StateReason']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Object.validateJSON(data['Tags']);
        }
        // validate the optional field `Target`
        if (data['Target']) { // data not null
          String.validateJSON(data['Target']);
        }
        // validate the optional field `TargetParameters`
        if (data['TargetParameters']) { // data not null
          DescribePipeResponseTargetParameters.validateJSON(data['TargetParameters']);
        }

        return true;
    }


}



/**
 * @member {String} Arn
 */
DescribePipeResponse.prototype['Arn'] = undefined;

/**
 * @member {Date} CreationTime
 */
DescribePipeResponse.prototype['CreationTime'] = undefined;

/**
 * @member {module:model/PipeState} CurrentState
 */
DescribePipeResponse.prototype['CurrentState'] = undefined;

/**
 * @member {String} Description
 */
DescribePipeResponse.prototype['Description'] = undefined;

/**
 * @member {module:model/RequestedPipeStateDescribeResponse} DesiredState
 */
DescribePipeResponse.prototype['DesiredState'] = undefined;

/**
 * @member {String} Enrichment
 */
DescribePipeResponse.prototype['Enrichment'] = undefined;

/**
 * @member {module:model/DescribePipeResponseEnrichmentParameters} EnrichmentParameters
 */
DescribePipeResponse.prototype['EnrichmentParameters'] = undefined;

/**
 * @member {Date} LastModifiedTime
 */
DescribePipeResponse.prototype['LastModifiedTime'] = undefined;

/**
 * @member {String} Name
 */
DescribePipeResponse.prototype['Name'] = undefined;

/**
 * @member {String} RoleArn
 */
DescribePipeResponse.prototype['RoleArn'] = undefined;

/**
 * @member {String} Source
 */
DescribePipeResponse.prototype['Source'] = undefined;

/**
 * @member {module:model/DescribePipeResponseSourceParameters} SourceParameters
 */
DescribePipeResponse.prototype['SourceParameters'] = undefined;

/**
 * @member {String} StateReason
 */
DescribePipeResponse.prototype['StateReason'] = undefined;

/**
 * @member {Object} Tags
 */
DescribePipeResponse.prototype['Tags'] = undefined;

/**
 * @member {String} Target
 */
DescribePipeResponse.prototype['Target'] = undefined;

/**
 * @member {module:model/DescribePipeResponseTargetParameters} TargetParameters
 */
DescribePipeResponse.prototype['TargetParameters'] = undefined;






export default DescribePipeResponse;

