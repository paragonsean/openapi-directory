/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreatePipeRequest;
import org.openapitools.client.model.CreatePipeResponse;
import org.openapitools.client.model.DeletePipeResponse;
import org.openapitools.client.model.DescribePipeResponse;
import org.openapitools.client.model.ListPipesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.StartPipeResponse;
import org.openapitools.client.model.StopPipeResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdatePipeRequest;
import org.openapitools.client.model.UpdatePipeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create a pipe. Amazon EventBridge Pipes connect event sources to targets and reduces the need for specialized knowledge and integration code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPipeTest() throws ApiException {
        String name = null;
        CreatePipeRequest createPipeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePipeResponse response = api.createPipe(name, createPipeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an existing pipe. For more information about pipes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html\&quot;&gt;Amazon EventBridge Pipes&lt;/a&gt; in the Amazon EventBridge User Guide.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePipeTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeletePipeResponse response = api.deletePipe(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the information about an existing pipe. For more information about pipes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html\&quot;&gt;Amazon EventBridge Pipes&lt;/a&gt; in the Amazon EventBridge User Guide.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePipeTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePipeResponse response = api.describePipe(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the pipes associated with this account. For more information about pipes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html\&quot;&gt;Amazon EventBridge Pipes&lt;/a&gt; in the Amazon EventBridge User Guide.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPipesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String currentState = null;
        String desiredState = null;
        Integer limit = null;
        String namePrefix = null;
        String nextToken = null;
        String sourcePrefix = null;
        String targetPrefix = null;
        ListPipesResponse response = api.listPipes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, currentState, desiredState, limit, namePrefix, nextToken, sourcePrefix, targetPrefix);
        // TODO: test validations
    }

    /**
     * Displays the tags associated with a pipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start an existing pipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPipeTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartPipeResponse response = api.startPipe(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stop an existing pipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopPipeTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopPipeResponse response = api.stopPipe(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified pipe. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; action with a pipe that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the pipe. If you specify a tag key that is already associated with the pipe, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a pipe.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from the specified pipes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update an existing pipe. When you call &lt;code&gt;UpdatePipe&lt;/code&gt;, only the fields that are included in the request are changed, the rest are unchanged. The exception to this is if you modify any Amazon Web Services-service specific fields in the &lt;code&gt;SourceParameters&lt;/code&gt;, &lt;code&gt;EnrichmentParameters&lt;/code&gt;, or &lt;code&gt;TargetParameters&lt;/code&gt; objects. The fields in these objects are updated atomically as one and override existing values. This is by design and means that if you don&#39;t specify an optional field in one of these Parameters objects, that field will be set to its system-default value after the update.&lt;/p&gt; &lt;p&gt;For more information about pipes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html\&quot;&gt; Amazon EventBridge Pipes&lt;/a&gt; in the Amazon EventBridge User Guide.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePipeTest() throws ApiException {
        String name = null;
        UpdatePipeRequest updatePipeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePipeResponse response = api.updatePipe(name, updatePipeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
