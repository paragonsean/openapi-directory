/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersActiveMQBrokerParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersDynamoDBStreamParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersFilterCriteria;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersKinesisStreamParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersManagedStreamingKafkaParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersRabbitMQBrokerParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersSelfManagedKafkaParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersSqsQueueParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UpdatePipeSourceParameters
 */
public class UpdatePipeSourceParametersTest {
    private final UpdatePipeSourceParameters model = new UpdatePipeSourceParameters();

    /**
     * Model tests for UpdatePipeSourceParameters
     */
    @Test
    public void testUpdatePipeSourceParameters() {
        // TODO: test UpdatePipeSourceParameters
    }

    /**
     * Test the property 'activeMQBrokerParameters'
     */
    @Test
    public void activeMQBrokerParametersTest() {
        // TODO: test activeMQBrokerParameters
    }

    /**
     * Test the property 'dynamoDBStreamParameters'
     */
    @Test
    public void dynamoDBStreamParametersTest() {
        // TODO: test dynamoDBStreamParameters
    }

    /**
     * Test the property 'filterCriteria'
     */
    @Test
    public void filterCriteriaTest() {
        // TODO: test filterCriteria
    }

    /**
     * Test the property 'kinesisStreamParameters'
     */
    @Test
    public void kinesisStreamParametersTest() {
        // TODO: test kinesisStreamParameters
    }

    /**
     * Test the property 'managedStreamingKafkaParameters'
     */
    @Test
    public void managedStreamingKafkaParametersTest() {
        // TODO: test managedStreamingKafkaParameters
    }

    /**
     * Test the property 'rabbitMQBrokerParameters'
     */
    @Test
    public void rabbitMQBrokerParametersTest() {
        // TODO: test rabbitMQBrokerParameters
    }

    /**
     * Test the property 'selfManagedKafkaParameters'
     */
    @Test
    public void selfManagedKafkaParametersTest() {
        // TODO: test selfManagedKafkaParameters
    }

    /**
     * Test the property 'sqsQueueParameters'
     */
    @Test
    public void sqsQueueParametersTest() {
        // TODO: test sqsQueueParameters
    }

}
