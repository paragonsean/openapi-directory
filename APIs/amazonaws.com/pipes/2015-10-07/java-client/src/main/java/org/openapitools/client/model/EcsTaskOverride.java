/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EcsTaskOverrideEphemeralStorage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The overrides that are associated with a task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EcsTaskOverride {
  public static final String SERIALIZED_NAME_CONTAINER_OVERRIDES = "ContainerOverrides";
  @SerializedName(SERIALIZED_NAME_CONTAINER_OVERRIDES)
  private List containerOverrides;

  public static final String SERIALIZED_NAME_CPU = "Cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private String cpu;

  public static final String SERIALIZED_NAME_EPHEMERAL_STORAGE = "EphemeralStorage";
  @SerializedName(SERIALIZED_NAME_EPHEMERAL_STORAGE)
  private EcsTaskOverrideEphemeralStorage ephemeralStorage;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_ARN = "ExecutionRoleArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_ARN)
  private String executionRoleArn;

  public static final String SERIALIZED_NAME_INFERENCE_ACCELERATOR_OVERRIDES = "InferenceAcceleratorOverrides";
  @SerializedName(SERIALIZED_NAME_INFERENCE_ACCELERATOR_OVERRIDES)
  private List inferenceAcceleratorOverrides;

  public static final String SERIALIZED_NAME_MEMORY = "Memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private String memory;

  public static final String SERIALIZED_NAME_TASK_ROLE_ARN = "TaskRoleArn";
  @SerializedName(SERIALIZED_NAME_TASK_ROLE_ARN)
  private String taskRoleArn;

  public EcsTaskOverride() {
  }

  public EcsTaskOverride containerOverrides(List containerOverrides) {
    this.containerOverrides = containerOverrides;
    return this;
  }

  /**
   * Get containerOverrides
   * @return containerOverrides
   */
  @javax.annotation.Nullable
  public List getContainerOverrides() {
    return containerOverrides;
  }

  public void setContainerOverrides(List containerOverrides) {
    this.containerOverrides = containerOverrides;
  }


  public EcsTaskOverride cpu(String cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @javax.annotation.Nullable
  public String getCpu() {
    return cpu;
  }

  public void setCpu(String cpu) {
    this.cpu = cpu;
  }


  public EcsTaskOverride ephemeralStorage(EcsTaskOverrideEphemeralStorage ephemeralStorage) {
    this.ephemeralStorage = ephemeralStorage;
    return this;
  }

  /**
   * Get ephemeralStorage
   * @return ephemeralStorage
   */
  @javax.annotation.Nullable
  public EcsTaskOverrideEphemeralStorage getEphemeralStorage() {
    return ephemeralStorage;
  }

  public void setEphemeralStorage(EcsTaskOverrideEphemeralStorage ephemeralStorage) {
    this.ephemeralStorage = ephemeralStorage;
  }


  public EcsTaskOverride executionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
    return this;
  }

  /**
   * Get executionRoleArn
   * @return executionRoleArn
   */
  @javax.annotation.Nullable
  public String getExecutionRoleArn() {
    return executionRoleArn;
  }

  public void setExecutionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
  }


  public EcsTaskOverride inferenceAcceleratorOverrides(List inferenceAcceleratorOverrides) {
    this.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides;
    return this;
  }

  /**
   * Get inferenceAcceleratorOverrides
   * @return inferenceAcceleratorOverrides
   */
  @javax.annotation.Nullable
  public List getInferenceAcceleratorOverrides() {
    return inferenceAcceleratorOverrides;
  }

  public void setInferenceAcceleratorOverrides(List inferenceAcceleratorOverrides) {
    this.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides;
  }


  public EcsTaskOverride memory(String memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public String getMemory() {
    return memory;
  }

  public void setMemory(String memory) {
    this.memory = memory;
  }


  public EcsTaskOverride taskRoleArn(String taskRoleArn) {
    this.taskRoleArn = taskRoleArn;
    return this;
  }

  /**
   * Get taskRoleArn
   * @return taskRoleArn
   */
  @javax.annotation.Nullable
  public String getTaskRoleArn() {
    return taskRoleArn;
  }

  public void setTaskRoleArn(String taskRoleArn) {
    this.taskRoleArn = taskRoleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcsTaskOverride ecsTaskOverride = (EcsTaskOverride) o;
    return Objects.equals(this.containerOverrides, ecsTaskOverride.containerOverrides) &&
        Objects.equals(this.cpu, ecsTaskOverride.cpu) &&
        Objects.equals(this.ephemeralStorage, ecsTaskOverride.ephemeralStorage) &&
        Objects.equals(this.executionRoleArn, ecsTaskOverride.executionRoleArn) &&
        Objects.equals(this.inferenceAcceleratorOverrides, ecsTaskOverride.inferenceAcceleratorOverrides) &&
        Objects.equals(this.memory, ecsTaskOverride.memory) &&
        Objects.equals(this.taskRoleArn, ecsTaskOverride.taskRoleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerOverrides, cpu, ephemeralStorage, executionRoleArn, inferenceAcceleratorOverrides, memory, taskRoleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcsTaskOverride {\n");
    sb.append("    containerOverrides: ").append(toIndentedString(containerOverrides)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    ephemeralStorage: ").append(toIndentedString(ephemeralStorage)).append("\n");
    sb.append("    executionRoleArn: ").append(toIndentedString(executionRoleArn)).append("\n");
    sb.append("    inferenceAcceleratorOverrides: ").append(toIndentedString(inferenceAcceleratorOverrides)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    taskRoleArn: ").append(toIndentedString(taskRoleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContainerOverrides");
    openapiFields.add("Cpu");
    openapiFields.add("EphemeralStorage");
    openapiFields.add("ExecutionRoleArn");
    openapiFields.add("InferenceAcceleratorOverrides");
    openapiFields.add("Memory");
    openapiFields.add("TaskRoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EcsTaskOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EcsTaskOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EcsTaskOverride is not found in the empty JSON string", EcsTaskOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EcsTaskOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EcsTaskOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ContainerOverrides`
      if (jsonObj.get("ContainerOverrides") != null && !jsonObj.get("ContainerOverrides").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ContainerOverrides"));
      }
      // validate the optional field `Cpu`
      if (jsonObj.get("Cpu") != null && !jsonObj.get("Cpu").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Cpu"));
      }
      // validate the optional field `EphemeralStorage`
      if (jsonObj.get("EphemeralStorage") != null && !jsonObj.get("EphemeralStorage").isJsonNull()) {
        EcsTaskOverrideEphemeralStorage.validateJsonElement(jsonObj.get("EphemeralStorage"));
      }
      // validate the optional field `ExecutionRoleArn`
      if (jsonObj.get("ExecutionRoleArn") != null && !jsonObj.get("ExecutionRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutionRoleArn"));
      }
      // validate the optional field `InferenceAcceleratorOverrides`
      if (jsonObj.get("InferenceAcceleratorOverrides") != null && !jsonObj.get("InferenceAcceleratorOverrides").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InferenceAcceleratorOverrides"));
      }
      // validate the optional field `Memory`
      if (jsonObj.get("Memory") != null && !jsonObj.get("Memory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Memory"));
      }
      // validate the optional field `TaskRoleArn`
      if (jsonObj.get("TaskRoleArn") != null && !jsonObj.get("TaskRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TaskRoleArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EcsTaskOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EcsTaskOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EcsTaskOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EcsTaskOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<EcsTaskOverride>() {
           @Override
           public void write(JsonWriter out, EcsTaskOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EcsTaskOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EcsTaskOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EcsTaskOverride
   * @throws IOException if the JSON string is invalid with respect to EcsTaskOverride
   */
  public static EcsTaskOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EcsTaskOverride.class);
  }

  /**
   * Convert an instance of EcsTaskOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

