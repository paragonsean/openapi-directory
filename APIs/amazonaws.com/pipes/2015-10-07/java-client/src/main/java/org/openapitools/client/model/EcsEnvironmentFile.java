/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EcsEnvironmentFileType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a &lt;code&gt;.env&lt;/code&gt; file extension. Each line in an environment file should contain an environment variable in &lt;code&gt;VARIABLE&#x3D;VALUE&lt;/code&gt; format. Lines beginning with &lt;code&gt;#&lt;/code&gt; are treated as comments and are ignored. For more information about the environment variable file syntax, see &lt;a href&#x3D;\&quot;https://docs.docker.com/compose/env-file/\&quot;&gt;Declare default environment variables in file&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If there are environment variables specified using the &lt;code&gt;environment&lt;/code&gt; parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they&#39;re processed from the top down. We recommend that you use unique variable names. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html\&quot;&gt;Specifying environment variables&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This parameter is only supported for tasks hosted on Fargate using the following platform versions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Linux platform version &lt;code&gt;1.4.0&lt;/code&gt; or later.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Windows platform version &lt;code&gt;1.0.0&lt;/code&gt; or later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EcsEnvironmentFile {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EcsEnvironmentFileType type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public EcsEnvironmentFile() {
  }

  public EcsEnvironmentFile type(EcsEnvironmentFileType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public EcsEnvironmentFileType getType() {
    return type;
  }

  public void setType(EcsEnvironmentFileType type) {
    this.type = type;
  }


  public EcsEnvironmentFile value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcsEnvironmentFile ecsEnvironmentFile = (EcsEnvironmentFile) o;
    return Objects.equals(this.type, ecsEnvironmentFile.type) &&
        Objects.equals(this.value, ecsEnvironmentFile.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcsEnvironmentFile {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EcsEnvironmentFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EcsEnvironmentFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EcsEnvironmentFile is not found in the empty JSON string", EcsEnvironmentFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EcsEnvironmentFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EcsEnvironmentFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EcsEnvironmentFile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      EcsEnvironmentFileType.validateJsonElement(jsonObj.get("type"));
      // validate the required field `value`
      String.validateJsonElement(jsonObj.get("value"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EcsEnvironmentFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EcsEnvironmentFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EcsEnvironmentFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EcsEnvironmentFile.class));

       return (TypeAdapter<T>) new TypeAdapter<EcsEnvironmentFile>() {
           @Override
           public void write(JsonWriter out, EcsEnvironmentFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EcsEnvironmentFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EcsEnvironmentFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EcsEnvironmentFile
   * @throws IOException if the JSON string is invalid with respect to EcsEnvironmentFile
   */
  public static EcsEnvironmentFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EcsEnvironmentFile.class);
  }

  /**
   * Convert an instance of EcsEnvironmentFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

