/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API ExecuteStatement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipeTargetRedshiftDataParameters {
  public static final String SERIALIZED_NAME_DATABASE = "Database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_DB_USER = "DbUser";
  @SerializedName(SERIALIZED_NAME_DB_USER)
  private String dbUser;

  public static final String SERIALIZED_NAME_SECRET_MANAGER_ARN = "SecretManagerArn";
  @SerializedName(SERIALIZED_NAME_SECRET_MANAGER_ARN)
  private String secretManagerArn;

  public static final String SERIALIZED_NAME_SQLS = "Sqls";
  @SerializedName(SERIALIZED_NAME_SQLS)
  private List sqls;

  public static final String SERIALIZED_NAME_STATEMENT_NAME = "StatementName";
  @SerializedName(SERIALIZED_NAME_STATEMENT_NAME)
  private String statementName;

  public static final String SERIALIZED_NAME_WITH_EVENT = "WithEvent";
  @SerializedName(SERIALIZED_NAME_WITH_EVENT)
  private Boolean withEvent;

  public PipeTargetRedshiftDataParameters() {
  }

  public PipeTargetRedshiftDataParameters database(String database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nonnull
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public PipeTargetRedshiftDataParameters dbUser(String dbUser) {
    this.dbUser = dbUser;
    return this;
  }

  /**
   * Get dbUser
   * @return dbUser
   */
  @javax.annotation.Nullable
  public String getDbUser() {
    return dbUser;
  }

  public void setDbUser(String dbUser) {
    this.dbUser = dbUser;
  }


  public PipeTargetRedshiftDataParameters secretManagerArn(String secretManagerArn) {
    this.secretManagerArn = secretManagerArn;
    return this;
  }

  /**
   * Get secretManagerArn
   * @return secretManagerArn
   */
  @javax.annotation.Nullable
  public String getSecretManagerArn() {
    return secretManagerArn;
  }

  public void setSecretManagerArn(String secretManagerArn) {
    this.secretManagerArn = secretManagerArn;
  }


  public PipeTargetRedshiftDataParameters sqls(List sqls) {
    this.sqls = sqls;
    return this;
  }

  /**
   * Get sqls
   * @return sqls
   */
  @javax.annotation.Nonnull
  public List getSqls() {
    return sqls;
  }

  public void setSqls(List sqls) {
    this.sqls = sqls;
  }


  public PipeTargetRedshiftDataParameters statementName(String statementName) {
    this.statementName = statementName;
    return this;
  }

  /**
   * Get statementName
   * @return statementName
   */
  @javax.annotation.Nullable
  public String getStatementName() {
    return statementName;
  }

  public void setStatementName(String statementName) {
    this.statementName = statementName;
  }


  public PipeTargetRedshiftDataParameters withEvent(Boolean withEvent) {
    this.withEvent = withEvent;
    return this;
  }

  /**
   * Get withEvent
   * @return withEvent
   */
  @javax.annotation.Nullable
  public Boolean getWithEvent() {
    return withEvent;
  }

  public void setWithEvent(Boolean withEvent) {
    this.withEvent = withEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipeTargetRedshiftDataParameters pipeTargetRedshiftDataParameters = (PipeTargetRedshiftDataParameters) o;
    return Objects.equals(this.database, pipeTargetRedshiftDataParameters.database) &&
        Objects.equals(this.dbUser, pipeTargetRedshiftDataParameters.dbUser) &&
        Objects.equals(this.secretManagerArn, pipeTargetRedshiftDataParameters.secretManagerArn) &&
        Objects.equals(this.sqls, pipeTargetRedshiftDataParameters.sqls) &&
        Objects.equals(this.statementName, pipeTargetRedshiftDataParameters.statementName) &&
        Objects.equals(this.withEvent, pipeTargetRedshiftDataParameters.withEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(database, dbUser, secretManagerArn, sqls, statementName, withEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipeTargetRedshiftDataParameters {\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    dbUser: ").append(toIndentedString(dbUser)).append("\n");
    sb.append("    secretManagerArn: ").append(toIndentedString(secretManagerArn)).append("\n");
    sb.append("    sqls: ").append(toIndentedString(sqls)).append("\n");
    sb.append("    statementName: ").append(toIndentedString(statementName)).append("\n");
    sb.append("    withEvent: ").append(toIndentedString(withEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Database");
    openapiFields.add("DbUser");
    openapiFields.add("SecretManagerArn");
    openapiFields.add("Sqls");
    openapiFields.add("StatementName");
    openapiFields.add("WithEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Database");
    openapiRequiredFields.add("Sqls");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipeTargetRedshiftDataParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipeTargetRedshiftDataParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipeTargetRedshiftDataParameters is not found in the empty JSON string", PipeTargetRedshiftDataParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PipeTargetRedshiftDataParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PipeTargetRedshiftDataParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PipeTargetRedshiftDataParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Database`
      String.validateJsonElement(jsonObj.get("Database"));
      // validate the optional field `DbUser`
      if (jsonObj.get("DbUser") != null && !jsonObj.get("DbUser").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DbUser"));
      }
      // validate the optional field `SecretManagerArn`
      if (jsonObj.get("SecretManagerArn") != null && !jsonObj.get("SecretManagerArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretManagerArn"));
      }
      // validate the required field `Sqls`
      List.validateJsonElement(jsonObj.get("Sqls"));
      // validate the optional field `StatementName`
      if (jsonObj.get("StatementName") != null && !jsonObj.get("StatementName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatementName"));
      }
      // validate the optional field `WithEvent`
      if (jsonObj.get("WithEvent") != null && !jsonObj.get("WithEvent").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("WithEvent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipeTargetRedshiftDataParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipeTargetRedshiftDataParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipeTargetRedshiftDataParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipeTargetRedshiftDataParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<PipeTargetRedshiftDataParameters>() {
           @Override
           public void write(JsonWriter out, PipeTargetRedshiftDataParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PipeTargetRedshiftDataParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipeTargetRedshiftDataParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipeTargetRedshiftDataParameters
   * @throws IOException if the JSON string is invalid with respect to PipeTargetRedshiftDataParameters
   */
  public static PipeTargetRedshiftDataParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipeTargetRedshiftDataParameters.class);
  }

  /**
   * Convert an instance of PipeTargetRedshiftDataParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

