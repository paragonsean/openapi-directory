/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The overrides that are sent to a container. An empty container override can be passed in. An example of an empty container override is &lt;code&gt;{\&quot;containerOverrides\&quot;: [ ] }&lt;/code&gt;. If a non-empty container override is specified, the &lt;code&gt;name&lt;/code&gt; parameter must be included.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EcsContainerOverride {
  public static final String SERIALIZED_NAME_COMMAND = "Command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private List command;

  public static final String SERIALIZED_NAME_CPU = "Cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private Integer cpu;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "Environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private List environment;

  public static final String SERIALIZED_NAME_ENVIRONMENT_FILES = "EnvironmentFiles";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_FILES)
  private List environmentFiles;

  public static final String SERIALIZED_NAME_MEMORY = "Memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private Integer memory;

  public static final String SERIALIZED_NAME_MEMORY_RESERVATION = "MemoryReservation";
  @SerializedName(SERIALIZED_NAME_MEMORY_RESERVATION)
  private Integer memoryReservation;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_REQUIREMENTS = "ResourceRequirements";
  @SerializedName(SERIALIZED_NAME_RESOURCE_REQUIREMENTS)
  private List resourceRequirements;

  public EcsContainerOverride() {
  }

  public EcsContainerOverride command(List command) {
    this.command = command;
    return this;
  }

  /**
   * Get command
   * @return command
   */
  @javax.annotation.Nullable
  public List getCommand() {
    return command;
  }

  public void setCommand(List command) {
    this.command = command;
  }


  public EcsContainerOverride cpu(Integer cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @javax.annotation.Nullable
  public Integer getCpu() {
    return cpu;
  }

  public void setCpu(Integer cpu) {
    this.cpu = cpu;
  }


  public EcsContainerOverride environment(List environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public List getEnvironment() {
    return environment;
  }

  public void setEnvironment(List environment) {
    this.environment = environment;
  }


  public EcsContainerOverride environmentFiles(List environmentFiles) {
    this.environmentFiles = environmentFiles;
    return this;
  }

  /**
   * Get environmentFiles
   * @return environmentFiles
   */
  @javax.annotation.Nullable
  public List getEnvironmentFiles() {
    return environmentFiles;
  }

  public void setEnvironmentFiles(List environmentFiles) {
    this.environmentFiles = environmentFiles;
  }


  public EcsContainerOverride memory(Integer memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }


  public EcsContainerOverride memoryReservation(Integer memoryReservation) {
    this.memoryReservation = memoryReservation;
    return this;
  }

  /**
   * Get memoryReservation
   * @return memoryReservation
   */
  @javax.annotation.Nullable
  public Integer getMemoryReservation() {
    return memoryReservation;
  }

  public void setMemoryReservation(Integer memoryReservation) {
    this.memoryReservation = memoryReservation;
  }


  public EcsContainerOverride name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EcsContainerOverride resourceRequirements(List resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
    return this;
  }

  /**
   * Get resourceRequirements
   * @return resourceRequirements
   */
  @javax.annotation.Nullable
  public List getResourceRequirements() {
    return resourceRequirements;
  }

  public void setResourceRequirements(List resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcsContainerOverride ecsContainerOverride = (EcsContainerOverride) o;
    return Objects.equals(this.command, ecsContainerOverride.command) &&
        Objects.equals(this.cpu, ecsContainerOverride.cpu) &&
        Objects.equals(this.environment, ecsContainerOverride.environment) &&
        Objects.equals(this.environmentFiles, ecsContainerOverride.environmentFiles) &&
        Objects.equals(this.memory, ecsContainerOverride.memory) &&
        Objects.equals(this.memoryReservation, ecsContainerOverride.memoryReservation) &&
        Objects.equals(this.name, ecsContainerOverride.name) &&
        Objects.equals(this.resourceRequirements, ecsContainerOverride.resourceRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, cpu, environment, environmentFiles, memory, memoryReservation, name, resourceRequirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcsContainerOverride {\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    environmentFiles: ").append(toIndentedString(environmentFiles)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    memoryReservation: ").append(toIndentedString(memoryReservation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceRequirements: ").append(toIndentedString(resourceRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Command");
    openapiFields.add("Cpu");
    openapiFields.add("Environment");
    openapiFields.add("EnvironmentFiles");
    openapiFields.add("Memory");
    openapiFields.add("MemoryReservation");
    openapiFields.add("Name");
    openapiFields.add("ResourceRequirements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EcsContainerOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EcsContainerOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EcsContainerOverride is not found in the empty JSON string", EcsContainerOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EcsContainerOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EcsContainerOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Command`
      if (jsonObj.get("Command") != null && !jsonObj.get("Command").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Command"));
      }
      // validate the optional field `Cpu`
      if (jsonObj.get("Cpu") != null && !jsonObj.get("Cpu").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Cpu"));
      }
      // validate the optional field `Environment`
      if (jsonObj.get("Environment") != null && !jsonObj.get("Environment").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Environment"));
      }
      // validate the optional field `EnvironmentFiles`
      if (jsonObj.get("EnvironmentFiles") != null && !jsonObj.get("EnvironmentFiles").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EnvironmentFiles"));
      }
      // validate the optional field `Memory`
      if (jsonObj.get("Memory") != null && !jsonObj.get("Memory").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Memory"));
      }
      // validate the optional field `MemoryReservation`
      if (jsonObj.get("MemoryReservation") != null && !jsonObj.get("MemoryReservation").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MemoryReservation"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `ResourceRequirements`
      if (jsonObj.get("ResourceRequirements") != null && !jsonObj.get("ResourceRequirements").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceRequirements"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EcsContainerOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EcsContainerOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EcsContainerOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EcsContainerOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<EcsContainerOverride>() {
           @Override
           public void write(JsonWriter out, EcsContainerOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EcsContainerOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EcsContainerOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EcsContainerOverride
   * @throws IOException if the JSON string is invalid with respect to EcsContainerOverride
   */
  public static EcsContainerOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EcsContainerOverride.class);
  }

  /**
   * Convert an instance of EcsContainerOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

