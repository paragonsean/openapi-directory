/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdatePipeRequestEnrichmentParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePipeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePipeRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The state the pipe should be in.
   */
  @JsonAdapter(DesiredStateEnum.Adapter.class)
  public enum DesiredStateEnum {
    RUNNING("RUNNING"),
    
    STOPPED("STOPPED");

    private String value;

    DesiredStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DesiredStateEnum fromValue(String value) {
      for (DesiredStateEnum b : DesiredStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DesiredStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DesiredStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DesiredStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DesiredStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DesiredStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESIRED_STATE = "DesiredState";
  @SerializedName(SERIALIZED_NAME_DESIRED_STATE)
  private DesiredStateEnum desiredState;

  public static final String SERIALIZED_NAME_ENRICHMENT = "Enrichment";
  @SerializedName(SERIALIZED_NAME_ENRICHMENT)
  private String enrichment;

  public static final String SERIALIZED_NAME_ENRICHMENT_PARAMETERS = "EnrichmentParameters";
  @SerializedName(SERIALIZED_NAME_ENRICHMENT_PARAMETERS)
  private UpdatePipeRequestEnrichmentParameters enrichmentParameters;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_SOURCE_PARAMETERS = "SourceParameters";
  @SerializedName(SERIALIZED_NAME_SOURCE_PARAMETERS)
  private UpdatePipeRequestSourceParameters sourceParameters;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TARGET_PARAMETERS = "TargetParameters";
  @SerializedName(SERIALIZED_NAME_TARGET_PARAMETERS)
  private UpdatePipeRequestTargetParameters targetParameters;

  public UpdatePipeRequest() {
  }

  public UpdatePipeRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the pipe.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdatePipeRequest desiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
    return this;
  }

  /**
   * The state the pipe should be in.
   * @return desiredState
   */
  @javax.annotation.Nullable
  public DesiredStateEnum getDesiredState() {
    return desiredState;
  }

  public void setDesiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
  }


  public UpdatePipeRequest enrichment(String enrichment) {
    this.enrichment = enrichment;
    return this;
  }

  /**
   * The ARN of the enrichment resource.
   * @return enrichment
   */
  @javax.annotation.Nullable
  public String getEnrichment() {
    return enrichment;
  }

  public void setEnrichment(String enrichment) {
    this.enrichment = enrichment;
  }


  public UpdatePipeRequest enrichmentParameters(UpdatePipeRequestEnrichmentParameters enrichmentParameters) {
    this.enrichmentParameters = enrichmentParameters;
    return this;
  }

  /**
   * Get enrichmentParameters
   * @return enrichmentParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestEnrichmentParameters getEnrichmentParameters() {
    return enrichmentParameters;
  }

  public void setEnrichmentParameters(UpdatePipeRequestEnrichmentParameters enrichmentParameters) {
    this.enrichmentParameters = enrichmentParameters;
  }


  public UpdatePipeRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The ARN of the role that allows the pipe to send data to the target.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public UpdatePipeRequest sourceParameters(UpdatePipeRequestSourceParameters sourceParameters) {
    this.sourceParameters = sourceParameters;
    return this;
  }

  /**
   * Get sourceParameters
   * @return sourceParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestSourceParameters getSourceParameters() {
    return sourceParameters;
  }

  public void setSourceParameters(UpdatePipeRequestSourceParameters sourceParameters) {
    this.sourceParameters = sourceParameters;
  }


  public UpdatePipeRequest target(String target) {
    this.target = target;
    return this;
  }

  /**
   * The ARN of the target resource.
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public UpdatePipeRequest targetParameters(UpdatePipeRequestTargetParameters targetParameters) {
    this.targetParameters = targetParameters;
    return this;
  }

  /**
   * Get targetParameters
   * @return targetParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParameters getTargetParameters() {
    return targetParameters;
  }

  public void setTargetParameters(UpdatePipeRequestTargetParameters targetParameters) {
    this.targetParameters = targetParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePipeRequest updatePipeRequest = (UpdatePipeRequest) o;
    return Objects.equals(this.description, updatePipeRequest.description) &&
        Objects.equals(this.desiredState, updatePipeRequest.desiredState) &&
        Objects.equals(this.enrichment, updatePipeRequest.enrichment) &&
        Objects.equals(this.enrichmentParameters, updatePipeRequest.enrichmentParameters) &&
        Objects.equals(this.roleArn, updatePipeRequest.roleArn) &&
        Objects.equals(this.sourceParameters, updatePipeRequest.sourceParameters) &&
        Objects.equals(this.target, updatePipeRequest.target) &&
        Objects.equals(this.targetParameters, updatePipeRequest.targetParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, desiredState, enrichment, enrichmentParameters, roleArn, sourceParameters, target, targetParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePipeRequest {\n");
    sb.append("    description: ").append("*").append("\n");
    sb.append("    desiredState: ").append(toIndentedString(desiredState)).append("\n");
    sb.append("    enrichment: ").append(toIndentedString(enrichment)).append("\n");
    sb.append("    enrichmentParameters: ").append(toIndentedString(enrichmentParameters)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    sourceParameters: ").append(toIndentedString(sourceParameters)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    targetParameters: ").append(toIndentedString(targetParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("DesiredState");
    openapiFields.add("Enrichment");
    openapiFields.add("EnrichmentParameters");
    openapiFields.add("RoleArn");
    openapiFields.add("SourceParameters");
    openapiFields.add("Target");
    openapiFields.add("TargetParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePipeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePipeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePipeRequest is not found in the empty JSON string", UpdatePipeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePipeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePipeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePipeRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("DesiredState") != null && !jsonObj.get("DesiredState").isJsonNull()) && !jsonObj.get("DesiredState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DesiredState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DesiredState").toString()));
      }
      // validate the optional field `DesiredState`
      if (jsonObj.get("DesiredState") != null && !jsonObj.get("DesiredState").isJsonNull()) {
        DesiredStateEnum.validateJsonElement(jsonObj.get("DesiredState"));
      }
      if ((jsonObj.get("Enrichment") != null && !jsonObj.get("Enrichment").isJsonNull()) && !jsonObj.get("Enrichment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Enrichment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Enrichment").toString()));
      }
      // validate the optional field `EnrichmentParameters`
      if (jsonObj.get("EnrichmentParameters") != null && !jsonObj.get("EnrichmentParameters").isJsonNull()) {
        UpdatePipeRequestEnrichmentParameters.validateJsonElement(jsonObj.get("EnrichmentParameters"));
      }
      if (!jsonObj.get("RoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleArn").toString()));
      }
      // validate the optional field `SourceParameters`
      if (jsonObj.get("SourceParameters") != null && !jsonObj.get("SourceParameters").isJsonNull()) {
        UpdatePipeRequestSourceParameters.validateJsonElement(jsonObj.get("SourceParameters"));
      }
      if ((jsonObj.get("Target") != null && !jsonObj.get("Target").isJsonNull()) && !jsonObj.get("Target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Target").toString()));
      }
      // validate the optional field `TargetParameters`
      if (jsonObj.get("TargetParameters") != null && !jsonObj.get("TargetParameters").isJsonNull()) {
        UpdatePipeRequestTargetParameters.validateJsonElement(jsonObj.get("TargetParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePipeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePipeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePipeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePipeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePipeRequest>() {
           @Override
           public void write(JsonWriter out, UpdatePipeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePipeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePipeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePipeRequest
   * @throws IOException if the JSON string is invalid with respect to UpdatePipeRequest
   */
  public static UpdatePipeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePipeRequest.class);
  }

  /**
   * Convert an instance of UpdatePipeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

