/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html\&quot;&gt;Fargate task storage&lt;/a&gt; in the &lt;i&gt;Amazon ECS User Guide for Fargate&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only supported for tasks hosted on Fargate using Linux platform version &lt;code&gt;1.4.0&lt;/code&gt; or later. This parameter is not supported for Windows containers on Fargate.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EcsEphemeralStorage {
  public static final String SERIALIZED_NAME_SIZE_IN_GI_B = "sizeInGiB";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_GI_B)
  private Integer sizeInGiB;

  public EcsEphemeralStorage() {
  }

  public EcsEphemeralStorage sizeInGiB(Integer sizeInGiB) {
    this.sizeInGiB = sizeInGiB;
    return this;
  }

  /**
   * Get sizeInGiB
   * @return sizeInGiB
   */
  @javax.annotation.Nonnull
  public Integer getSizeInGiB() {
    return sizeInGiB;
  }

  public void setSizeInGiB(Integer sizeInGiB) {
    this.sizeInGiB = sizeInGiB;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcsEphemeralStorage ecsEphemeralStorage = (EcsEphemeralStorage) o;
    return Objects.equals(this.sizeInGiB, ecsEphemeralStorage.sizeInGiB);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sizeInGiB);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcsEphemeralStorage {\n");
    sb.append("    sizeInGiB: ").append(toIndentedString(sizeInGiB)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sizeInGiB");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sizeInGiB");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EcsEphemeralStorage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EcsEphemeralStorage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EcsEphemeralStorage is not found in the empty JSON string", EcsEphemeralStorage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EcsEphemeralStorage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EcsEphemeralStorage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EcsEphemeralStorage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `sizeInGiB`
      Integer.validateJsonElement(jsonObj.get("sizeInGiB"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EcsEphemeralStorage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EcsEphemeralStorage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EcsEphemeralStorage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EcsEphemeralStorage.class));

       return (TypeAdapter<T>) new TypeAdapter<EcsEphemeralStorage>() {
           @Override
           public void write(JsonWriter out, EcsEphemeralStorage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EcsEphemeralStorage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EcsEphemeralStorage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EcsEphemeralStorage
   * @throws IOException if the JSON string is invalid with respect to EcsEphemeralStorage
   */
  public static EcsEphemeralStorage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EcsEphemeralStorage.class);
  }

  /**
   * Convert an instance of EcsEphemeralStorage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

