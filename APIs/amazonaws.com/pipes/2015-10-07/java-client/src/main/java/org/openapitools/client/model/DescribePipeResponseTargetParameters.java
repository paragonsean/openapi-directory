/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersBatchJobParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersCloudWatchLogsParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersEcsTaskParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersEventBridgeEventBusParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersHttpParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersKinesisStreamParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersLambdaFunctionParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersRedshiftDataParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersSageMakerPipelineParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersSqsQueueParameters;
import org.openapitools.client.model.UpdatePipeRequestTargetParametersStepFunctionStateMachineParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribePipeResponseTargetParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribePipeResponseTargetParameters {
  public static final String SERIALIZED_NAME_BATCH_JOB_PARAMETERS = "BatchJobParameters";
  @SerializedName(SERIALIZED_NAME_BATCH_JOB_PARAMETERS)
  private UpdatePipeRequestTargetParametersBatchJobParameters batchJobParameters;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGS_PARAMETERS = "CloudWatchLogsParameters";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGS_PARAMETERS)
  private UpdatePipeRequestTargetParametersCloudWatchLogsParameters cloudWatchLogsParameters;

  public static final String SERIALIZED_NAME_ECS_TASK_PARAMETERS = "EcsTaskParameters";
  @SerializedName(SERIALIZED_NAME_ECS_TASK_PARAMETERS)
  private UpdatePipeRequestTargetParametersEcsTaskParameters ecsTaskParameters;

  public static final String SERIALIZED_NAME_EVENT_BRIDGE_EVENT_BUS_PARAMETERS = "EventBridgeEventBusParameters";
  @SerializedName(SERIALIZED_NAME_EVENT_BRIDGE_EVENT_BUS_PARAMETERS)
  private UpdatePipeRequestTargetParametersEventBridgeEventBusParameters eventBridgeEventBusParameters;

  public static final String SERIALIZED_NAME_HTTP_PARAMETERS = "HttpParameters";
  @SerializedName(SERIALIZED_NAME_HTTP_PARAMETERS)
  private UpdatePipeRequestTargetParametersHttpParameters httpParameters;

  public static final String SERIALIZED_NAME_INPUT_TEMPLATE = "InputTemplate";
  @SerializedName(SERIALIZED_NAME_INPUT_TEMPLATE)
  private String inputTemplate;

  public static final String SERIALIZED_NAME_KINESIS_STREAM_PARAMETERS = "KinesisStreamParameters";
  @SerializedName(SERIALIZED_NAME_KINESIS_STREAM_PARAMETERS)
  private UpdatePipeRequestTargetParametersKinesisStreamParameters kinesisStreamParameters;

  public static final String SERIALIZED_NAME_LAMBDA_FUNCTION_PARAMETERS = "LambdaFunctionParameters";
  @SerializedName(SERIALIZED_NAME_LAMBDA_FUNCTION_PARAMETERS)
  private UpdatePipeRequestTargetParametersLambdaFunctionParameters lambdaFunctionParameters;

  public static final String SERIALIZED_NAME_REDSHIFT_DATA_PARAMETERS = "RedshiftDataParameters";
  @SerializedName(SERIALIZED_NAME_REDSHIFT_DATA_PARAMETERS)
  private UpdatePipeRequestTargetParametersRedshiftDataParameters redshiftDataParameters;

  public static final String SERIALIZED_NAME_SAGE_MAKER_PIPELINE_PARAMETERS = "SageMakerPipelineParameters";
  @SerializedName(SERIALIZED_NAME_SAGE_MAKER_PIPELINE_PARAMETERS)
  private UpdatePipeRequestTargetParametersSageMakerPipelineParameters sageMakerPipelineParameters;

  public static final String SERIALIZED_NAME_SQS_QUEUE_PARAMETERS = "SqsQueueParameters";
  @SerializedName(SERIALIZED_NAME_SQS_QUEUE_PARAMETERS)
  private UpdatePipeRequestTargetParametersSqsQueueParameters sqsQueueParameters;

  public static final String SERIALIZED_NAME_STEP_FUNCTION_STATE_MACHINE_PARAMETERS = "StepFunctionStateMachineParameters";
  @SerializedName(SERIALIZED_NAME_STEP_FUNCTION_STATE_MACHINE_PARAMETERS)
  private UpdatePipeRequestTargetParametersStepFunctionStateMachineParameters stepFunctionStateMachineParameters;

  public DescribePipeResponseTargetParameters() {
  }

  public DescribePipeResponseTargetParameters batchJobParameters(UpdatePipeRequestTargetParametersBatchJobParameters batchJobParameters) {
    this.batchJobParameters = batchJobParameters;
    return this;
  }

  /**
   * Get batchJobParameters
   * @return batchJobParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersBatchJobParameters getBatchJobParameters() {
    return batchJobParameters;
  }

  public void setBatchJobParameters(UpdatePipeRequestTargetParametersBatchJobParameters batchJobParameters) {
    this.batchJobParameters = batchJobParameters;
  }


  public DescribePipeResponseTargetParameters cloudWatchLogsParameters(UpdatePipeRequestTargetParametersCloudWatchLogsParameters cloudWatchLogsParameters) {
    this.cloudWatchLogsParameters = cloudWatchLogsParameters;
    return this;
  }

  /**
   * Get cloudWatchLogsParameters
   * @return cloudWatchLogsParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersCloudWatchLogsParameters getCloudWatchLogsParameters() {
    return cloudWatchLogsParameters;
  }

  public void setCloudWatchLogsParameters(UpdatePipeRequestTargetParametersCloudWatchLogsParameters cloudWatchLogsParameters) {
    this.cloudWatchLogsParameters = cloudWatchLogsParameters;
  }


  public DescribePipeResponseTargetParameters ecsTaskParameters(UpdatePipeRequestTargetParametersEcsTaskParameters ecsTaskParameters) {
    this.ecsTaskParameters = ecsTaskParameters;
    return this;
  }

  /**
   * Get ecsTaskParameters
   * @return ecsTaskParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersEcsTaskParameters getEcsTaskParameters() {
    return ecsTaskParameters;
  }

  public void setEcsTaskParameters(UpdatePipeRequestTargetParametersEcsTaskParameters ecsTaskParameters) {
    this.ecsTaskParameters = ecsTaskParameters;
  }


  public DescribePipeResponseTargetParameters eventBridgeEventBusParameters(UpdatePipeRequestTargetParametersEventBridgeEventBusParameters eventBridgeEventBusParameters) {
    this.eventBridgeEventBusParameters = eventBridgeEventBusParameters;
    return this;
  }

  /**
   * Get eventBridgeEventBusParameters
   * @return eventBridgeEventBusParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersEventBridgeEventBusParameters getEventBridgeEventBusParameters() {
    return eventBridgeEventBusParameters;
  }

  public void setEventBridgeEventBusParameters(UpdatePipeRequestTargetParametersEventBridgeEventBusParameters eventBridgeEventBusParameters) {
    this.eventBridgeEventBusParameters = eventBridgeEventBusParameters;
  }


  public DescribePipeResponseTargetParameters httpParameters(UpdatePipeRequestTargetParametersHttpParameters httpParameters) {
    this.httpParameters = httpParameters;
    return this;
  }

  /**
   * Get httpParameters
   * @return httpParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersHttpParameters getHttpParameters() {
    return httpParameters;
  }

  public void setHttpParameters(UpdatePipeRequestTargetParametersHttpParameters httpParameters) {
    this.httpParameters = httpParameters;
  }


  public DescribePipeResponseTargetParameters inputTemplate(String inputTemplate) {
    this.inputTemplate = inputTemplate;
    return this;
  }

  /**
   * Get inputTemplate
   * @return inputTemplate
   */
  @javax.annotation.Nullable
  public String getInputTemplate() {
    return inputTemplate;
  }

  public void setInputTemplate(String inputTemplate) {
    this.inputTemplate = inputTemplate;
  }


  public DescribePipeResponseTargetParameters kinesisStreamParameters(UpdatePipeRequestTargetParametersKinesisStreamParameters kinesisStreamParameters) {
    this.kinesisStreamParameters = kinesisStreamParameters;
    return this;
  }

  /**
   * Get kinesisStreamParameters
   * @return kinesisStreamParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersKinesisStreamParameters getKinesisStreamParameters() {
    return kinesisStreamParameters;
  }

  public void setKinesisStreamParameters(UpdatePipeRequestTargetParametersKinesisStreamParameters kinesisStreamParameters) {
    this.kinesisStreamParameters = kinesisStreamParameters;
  }


  public DescribePipeResponseTargetParameters lambdaFunctionParameters(UpdatePipeRequestTargetParametersLambdaFunctionParameters lambdaFunctionParameters) {
    this.lambdaFunctionParameters = lambdaFunctionParameters;
    return this;
  }

  /**
   * Get lambdaFunctionParameters
   * @return lambdaFunctionParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersLambdaFunctionParameters getLambdaFunctionParameters() {
    return lambdaFunctionParameters;
  }

  public void setLambdaFunctionParameters(UpdatePipeRequestTargetParametersLambdaFunctionParameters lambdaFunctionParameters) {
    this.lambdaFunctionParameters = lambdaFunctionParameters;
  }


  public DescribePipeResponseTargetParameters redshiftDataParameters(UpdatePipeRequestTargetParametersRedshiftDataParameters redshiftDataParameters) {
    this.redshiftDataParameters = redshiftDataParameters;
    return this;
  }

  /**
   * Get redshiftDataParameters
   * @return redshiftDataParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersRedshiftDataParameters getRedshiftDataParameters() {
    return redshiftDataParameters;
  }

  public void setRedshiftDataParameters(UpdatePipeRequestTargetParametersRedshiftDataParameters redshiftDataParameters) {
    this.redshiftDataParameters = redshiftDataParameters;
  }


  public DescribePipeResponseTargetParameters sageMakerPipelineParameters(UpdatePipeRequestTargetParametersSageMakerPipelineParameters sageMakerPipelineParameters) {
    this.sageMakerPipelineParameters = sageMakerPipelineParameters;
    return this;
  }

  /**
   * Get sageMakerPipelineParameters
   * @return sageMakerPipelineParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersSageMakerPipelineParameters getSageMakerPipelineParameters() {
    return sageMakerPipelineParameters;
  }

  public void setSageMakerPipelineParameters(UpdatePipeRequestTargetParametersSageMakerPipelineParameters sageMakerPipelineParameters) {
    this.sageMakerPipelineParameters = sageMakerPipelineParameters;
  }


  public DescribePipeResponseTargetParameters sqsQueueParameters(UpdatePipeRequestTargetParametersSqsQueueParameters sqsQueueParameters) {
    this.sqsQueueParameters = sqsQueueParameters;
    return this;
  }

  /**
   * Get sqsQueueParameters
   * @return sqsQueueParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersSqsQueueParameters getSqsQueueParameters() {
    return sqsQueueParameters;
  }

  public void setSqsQueueParameters(UpdatePipeRequestTargetParametersSqsQueueParameters sqsQueueParameters) {
    this.sqsQueueParameters = sqsQueueParameters;
  }


  public DescribePipeResponseTargetParameters stepFunctionStateMachineParameters(UpdatePipeRequestTargetParametersStepFunctionStateMachineParameters stepFunctionStateMachineParameters) {
    this.stepFunctionStateMachineParameters = stepFunctionStateMachineParameters;
    return this;
  }

  /**
   * Get stepFunctionStateMachineParameters
   * @return stepFunctionStateMachineParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestTargetParametersStepFunctionStateMachineParameters getStepFunctionStateMachineParameters() {
    return stepFunctionStateMachineParameters;
  }

  public void setStepFunctionStateMachineParameters(UpdatePipeRequestTargetParametersStepFunctionStateMachineParameters stepFunctionStateMachineParameters) {
    this.stepFunctionStateMachineParameters = stepFunctionStateMachineParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribePipeResponseTargetParameters describePipeResponseTargetParameters = (DescribePipeResponseTargetParameters) o;
    return Objects.equals(this.batchJobParameters, describePipeResponseTargetParameters.batchJobParameters) &&
        Objects.equals(this.cloudWatchLogsParameters, describePipeResponseTargetParameters.cloudWatchLogsParameters) &&
        Objects.equals(this.ecsTaskParameters, describePipeResponseTargetParameters.ecsTaskParameters) &&
        Objects.equals(this.eventBridgeEventBusParameters, describePipeResponseTargetParameters.eventBridgeEventBusParameters) &&
        Objects.equals(this.httpParameters, describePipeResponseTargetParameters.httpParameters) &&
        Objects.equals(this.inputTemplate, describePipeResponseTargetParameters.inputTemplate) &&
        Objects.equals(this.kinesisStreamParameters, describePipeResponseTargetParameters.kinesisStreamParameters) &&
        Objects.equals(this.lambdaFunctionParameters, describePipeResponseTargetParameters.lambdaFunctionParameters) &&
        Objects.equals(this.redshiftDataParameters, describePipeResponseTargetParameters.redshiftDataParameters) &&
        Objects.equals(this.sageMakerPipelineParameters, describePipeResponseTargetParameters.sageMakerPipelineParameters) &&
        Objects.equals(this.sqsQueueParameters, describePipeResponseTargetParameters.sqsQueueParameters) &&
        Objects.equals(this.stepFunctionStateMachineParameters, describePipeResponseTargetParameters.stepFunctionStateMachineParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchJobParameters, cloudWatchLogsParameters, ecsTaskParameters, eventBridgeEventBusParameters, httpParameters, inputTemplate, kinesisStreamParameters, lambdaFunctionParameters, redshiftDataParameters, sageMakerPipelineParameters, sqsQueueParameters, stepFunctionStateMachineParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribePipeResponseTargetParameters {\n");
    sb.append("    batchJobParameters: ").append(toIndentedString(batchJobParameters)).append("\n");
    sb.append("    cloudWatchLogsParameters: ").append(toIndentedString(cloudWatchLogsParameters)).append("\n");
    sb.append("    ecsTaskParameters: ").append(toIndentedString(ecsTaskParameters)).append("\n");
    sb.append("    eventBridgeEventBusParameters: ").append(toIndentedString(eventBridgeEventBusParameters)).append("\n");
    sb.append("    httpParameters: ").append(toIndentedString(httpParameters)).append("\n");
    sb.append("    inputTemplate: ").append(toIndentedString(inputTemplate)).append("\n");
    sb.append("    kinesisStreamParameters: ").append(toIndentedString(kinesisStreamParameters)).append("\n");
    sb.append("    lambdaFunctionParameters: ").append(toIndentedString(lambdaFunctionParameters)).append("\n");
    sb.append("    redshiftDataParameters: ").append(toIndentedString(redshiftDataParameters)).append("\n");
    sb.append("    sageMakerPipelineParameters: ").append(toIndentedString(sageMakerPipelineParameters)).append("\n");
    sb.append("    sqsQueueParameters: ").append(toIndentedString(sqsQueueParameters)).append("\n");
    sb.append("    stepFunctionStateMachineParameters: ").append(toIndentedString(stepFunctionStateMachineParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BatchJobParameters");
    openapiFields.add("CloudWatchLogsParameters");
    openapiFields.add("EcsTaskParameters");
    openapiFields.add("EventBridgeEventBusParameters");
    openapiFields.add("HttpParameters");
    openapiFields.add("InputTemplate");
    openapiFields.add("KinesisStreamParameters");
    openapiFields.add("LambdaFunctionParameters");
    openapiFields.add("RedshiftDataParameters");
    openapiFields.add("SageMakerPipelineParameters");
    openapiFields.add("SqsQueueParameters");
    openapiFields.add("StepFunctionStateMachineParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribePipeResponseTargetParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribePipeResponseTargetParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribePipeResponseTargetParameters is not found in the empty JSON string", DescribePipeResponseTargetParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribePipeResponseTargetParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribePipeResponseTargetParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BatchJobParameters`
      if (jsonObj.get("BatchJobParameters") != null && !jsonObj.get("BatchJobParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersBatchJobParameters.validateJsonElement(jsonObj.get("BatchJobParameters"));
      }
      // validate the optional field `CloudWatchLogsParameters`
      if (jsonObj.get("CloudWatchLogsParameters") != null && !jsonObj.get("CloudWatchLogsParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersCloudWatchLogsParameters.validateJsonElement(jsonObj.get("CloudWatchLogsParameters"));
      }
      // validate the optional field `EcsTaskParameters`
      if (jsonObj.get("EcsTaskParameters") != null && !jsonObj.get("EcsTaskParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersEcsTaskParameters.validateJsonElement(jsonObj.get("EcsTaskParameters"));
      }
      // validate the optional field `EventBridgeEventBusParameters`
      if (jsonObj.get("EventBridgeEventBusParameters") != null && !jsonObj.get("EventBridgeEventBusParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersEventBridgeEventBusParameters.validateJsonElement(jsonObj.get("EventBridgeEventBusParameters"));
      }
      // validate the optional field `HttpParameters`
      if (jsonObj.get("HttpParameters") != null && !jsonObj.get("HttpParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersHttpParameters.validateJsonElement(jsonObj.get("HttpParameters"));
      }
      // validate the optional field `InputTemplate`
      if (jsonObj.get("InputTemplate") != null && !jsonObj.get("InputTemplate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputTemplate"));
      }
      // validate the optional field `KinesisStreamParameters`
      if (jsonObj.get("KinesisStreamParameters") != null && !jsonObj.get("KinesisStreamParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersKinesisStreamParameters.validateJsonElement(jsonObj.get("KinesisStreamParameters"));
      }
      // validate the optional field `LambdaFunctionParameters`
      if (jsonObj.get("LambdaFunctionParameters") != null && !jsonObj.get("LambdaFunctionParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersLambdaFunctionParameters.validateJsonElement(jsonObj.get("LambdaFunctionParameters"));
      }
      // validate the optional field `RedshiftDataParameters`
      if (jsonObj.get("RedshiftDataParameters") != null && !jsonObj.get("RedshiftDataParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersRedshiftDataParameters.validateJsonElement(jsonObj.get("RedshiftDataParameters"));
      }
      // validate the optional field `SageMakerPipelineParameters`
      if (jsonObj.get("SageMakerPipelineParameters") != null && !jsonObj.get("SageMakerPipelineParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersSageMakerPipelineParameters.validateJsonElement(jsonObj.get("SageMakerPipelineParameters"));
      }
      // validate the optional field `SqsQueueParameters`
      if (jsonObj.get("SqsQueueParameters") != null && !jsonObj.get("SqsQueueParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersSqsQueueParameters.validateJsonElement(jsonObj.get("SqsQueueParameters"));
      }
      // validate the optional field `StepFunctionStateMachineParameters`
      if (jsonObj.get("StepFunctionStateMachineParameters") != null && !jsonObj.get("StepFunctionStateMachineParameters").isJsonNull()) {
        UpdatePipeRequestTargetParametersStepFunctionStateMachineParameters.validateJsonElement(jsonObj.get("StepFunctionStateMachineParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribePipeResponseTargetParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribePipeResponseTargetParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribePipeResponseTargetParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribePipeResponseTargetParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribePipeResponseTargetParameters>() {
           @Override
           public void write(JsonWriter out, DescribePipeResponseTargetParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribePipeResponseTargetParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribePipeResponseTargetParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribePipeResponseTargetParameters
   * @throws IOException if the JSON string is invalid with respect to DescribePipeResponseTargetParameters
   */
  public static DescribePipeResponseTargetParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribePipeResponseTargetParameters.class);
  }

  /**
   * Convert an instance of DescribePipeResponseTargetParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

