/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters for using an EventBridge event bus as a target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipeTargetEventBridgeEventBusParameters {
  public static final String SERIALIZED_NAME_DETAIL_TYPE = "DetailType";
  @SerializedName(SERIALIZED_NAME_DETAIL_TYPE)
  private String detailType;

  public static final String SERIALIZED_NAME_ENDPOINT_ID = "EndpointId";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_ID)
  private String endpointId;

  public static final String SERIALIZED_NAME_RESOURCES = "Resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List resources;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TIME = "Time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public PipeTargetEventBridgeEventBusParameters() {
  }

  public PipeTargetEventBridgeEventBusParameters detailType(String detailType) {
    this.detailType = detailType;
    return this;
  }

  /**
   * Get detailType
   * @return detailType
   */
  @javax.annotation.Nullable
  public String getDetailType() {
    return detailType;
  }

  public void setDetailType(String detailType) {
    this.detailType = detailType;
  }


  public PipeTargetEventBridgeEventBusParameters endpointId(String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

  /**
   * Get endpointId
   * @return endpointId
   */
  @javax.annotation.Nullable
  public String getEndpointId() {
    return endpointId;
  }

  public void setEndpointId(String endpointId) {
    this.endpointId = endpointId;
  }


  public PipeTargetEventBridgeEventBusParameters resources(List resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public List getResources() {
    return resources;
  }

  public void setResources(List resources) {
    this.resources = resources;
  }


  public PipeTargetEventBridgeEventBusParameters source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public PipeTargetEventBridgeEventBusParameters time(String time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipeTargetEventBridgeEventBusParameters pipeTargetEventBridgeEventBusParameters = (PipeTargetEventBridgeEventBusParameters) o;
    return Objects.equals(this.detailType, pipeTargetEventBridgeEventBusParameters.detailType) &&
        Objects.equals(this.endpointId, pipeTargetEventBridgeEventBusParameters.endpointId) &&
        Objects.equals(this.resources, pipeTargetEventBridgeEventBusParameters.resources) &&
        Objects.equals(this.source, pipeTargetEventBridgeEventBusParameters.source) &&
        Objects.equals(this.time, pipeTargetEventBridgeEventBusParameters.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detailType, endpointId, resources, source, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipeTargetEventBridgeEventBusParameters {\n");
    sb.append("    detailType: ").append(toIndentedString(detailType)).append("\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DetailType");
    openapiFields.add("EndpointId");
    openapiFields.add("Resources");
    openapiFields.add("Source");
    openapiFields.add("Time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipeTargetEventBridgeEventBusParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipeTargetEventBridgeEventBusParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipeTargetEventBridgeEventBusParameters is not found in the empty JSON string", PipeTargetEventBridgeEventBusParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PipeTargetEventBridgeEventBusParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PipeTargetEventBridgeEventBusParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DetailType`
      if (jsonObj.get("DetailType") != null && !jsonObj.get("DetailType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DetailType"));
      }
      // validate the optional field `EndpointId`
      if (jsonObj.get("EndpointId") != null && !jsonObj.get("EndpointId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndpointId"));
      }
      // validate the optional field `Resources`
      if (jsonObj.get("Resources") != null && !jsonObj.get("Resources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Resources"));
      }
      // validate the optional field `Source`
      if (jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Source"));
      }
      // validate the optional field `Time`
      if (jsonObj.get("Time") != null && !jsonObj.get("Time").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Time"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipeTargetEventBridgeEventBusParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipeTargetEventBridgeEventBusParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipeTargetEventBridgeEventBusParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipeTargetEventBridgeEventBusParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<PipeTargetEventBridgeEventBusParameters>() {
           @Override
           public void write(JsonWriter out, PipeTargetEventBridgeEventBusParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PipeTargetEventBridgeEventBusParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipeTargetEventBridgeEventBusParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipeTargetEventBridgeEventBusParameters
   * @throws IOException if the JSON string is invalid with respect to PipeTargetEventBridgeEventBusParameters
   */
  public static PipeTargetEventBridgeEventBusParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipeTargetEventBridgeEventBusParameters.class);
  }

  /**
   * Convert an instance of PipeTargetEventBridgeEventBusParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

