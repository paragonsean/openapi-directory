/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PipeTargetBatchJobParametersArrayProperties;
import org.openapitools.client.model.PipeTargetBatchJobParametersContainerOverrides;
import org.openapitools.client.model.PipeTargetBatchJobParametersRetryStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePipeRequestTargetParametersBatchJobParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePipeRequestTargetParametersBatchJobParameters {
  public static final String SERIALIZED_NAME_ARRAY_PROPERTIES = "ArrayProperties";
  @SerializedName(SERIALIZED_NAME_ARRAY_PROPERTIES)
  private PipeTargetBatchJobParametersArrayProperties arrayProperties;

  public static final String SERIALIZED_NAME_CONTAINER_OVERRIDES = "ContainerOverrides";
  @SerializedName(SERIALIZED_NAME_CONTAINER_OVERRIDES)
  private PipeTargetBatchJobParametersContainerOverrides containerOverrides;

  public static final String SERIALIZED_NAME_DEPENDS_ON = "DependsOn";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON)
  private List dependsOn;

  public static final String SERIALIZED_NAME_JOB_DEFINITION = "JobDefinition";
  @SerializedName(SERIALIZED_NAME_JOB_DEFINITION)
  private String jobDefinition;

  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_RETRY_STRATEGY = "RetryStrategy";
  @SerializedName(SERIALIZED_NAME_RETRY_STRATEGY)
  private PipeTargetBatchJobParametersRetryStrategy retryStrategy;

  public UpdatePipeRequestTargetParametersBatchJobParameters() {
  }

  public UpdatePipeRequestTargetParametersBatchJobParameters arrayProperties(PipeTargetBatchJobParametersArrayProperties arrayProperties) {
    this.arrayProperties = arrayProperties;
    return this;
  }

  /**
   * Get arrayProperties
   * @return arrayProperties
   */
  @javax.annotation.Nullable
  public PipeTargetBatchJobParametersArrayProperties getArrayProperties() {
    return arrayProperties;
  }

  public void setArrayProperties(PipeTargetBatchJobParametersArrayProperties arrayProperties) {
    this.arrayProperties = arrayProperties;
  }


  public UpdatePipeRequestTargetParametersBatchJobParameters containerOverrides(PipeTargetBatchJobParametersContainerOverrides containerOverrides) {
    this.containerOverrides = containerOverrides;
    return this;
  }

  /**
   * Get containerOverrides
   * @return containerOverrides
   */
  @javax.annotation.Nullable
  public PipeTargetBatchJobParametersContainerOverrides getContainerOverrides() {
    return containerOverrides;
  }

  public void setContainerOverrides(PipeTargetBatchJobParametersContainerOverrides containerOverrides) {
    this.containerOverrides = containerOverrides;
  }


  public UpdatePipeRequestTargetParametersBatchJobParameters dependsOn(List dependsOn) {
    this.dependsOn = dependsOn;
    return this;
  }

  /**
   * Get dependsOn
   * @return dependsOn
   */
  @javax.annotation.Nullable
  public List getDependsOn() {
    return dependsOn;
  }

  public void setDependsOn(List dependsOn) {
    this.dependsOn = dependsOn;
  }


  public UpdatePipeRequestTargetParametersBatchJobParameters jobDefinition(String jobDefinition) {
    this.jobDefinition = jobDefinition;
    return this;
  }

  /**
   * Get jobDefinition
   * @return jobDefinition
   */
  @javax.annotation.Nonnull
  public String getJobDefinition() {
    return jobDefinition;
  }

  public void setJobDefinition(String jobDefinition) {
    this.jobDefinition = jobDefinition;
  }


  public UpdatePipeRequestTargetParametersBatchJobParameters jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nonnull
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public UpdatePipeRequestTargetParametersBatchJobParameters parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public UpdatePipeRequestTargetParametersBatchJobParameters retryStrategy(PipeTargetBatchJobParametersRetryStrategy retryStrategy) {
    this.retryStrategy = retryStrategy;
    return this;
  }

  /**
   * Get retryStrategy
   * @return retryStrategy
   */
  @javax.annotation.Nullable
  public PipeTargetBatchJobParametersRetryStrategy getRetryStrategy() {
    return retryStrategy;
  }

  public void setRetryStrategy(PipeTargetBatchJobParametersRetryStrategy retryStrategy) {
    this.retryStrategy = retryStrategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePipeRequestTargetParametersBatchJobParameters updatePipeRequestTargetParametersBatchJobParameters = (UpdatePipeRequestTargetParametersBatchJobParameters) o;
    return Objects.equals(this.arrayProperties, updatePipeRequestTargetParametersBatchJobParameters.arrayProperties) &&
        Objects.equals(this.containerOverrides, updatePipeRequestTargetParametersBatchJobParameters.containerOverrides) &&
        Objects.equals(this.dependsOn, updatePipeRequestTargetParametersBatchJobParameters.dependsOn) &&
        Objects.equals(this.jobDefinition, updatePipeRequestTargetParametersBatchJobParameters.jobDefinition) &&
        Objects.equals(this.jobName, updatePipeRequestTargetParametersBatchJobParameters.jobName) &&
        Objects.equals(this.parameters, updatePipeRequestTargetParametersBatchJobParameters.parameters) &&
        Objects.equals(this.retryStrategy, updatePipeRequestTargetParametersBatchJobParameters.retryStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayProperties, containerOverrides, dependsOn, jobDefinition, jobName, parameters, retryStrategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePipeRequestTargetParametersBatchJobParameters {\n");
    sb.append("    arrayProperties: ").append(toIndentedString(arrayProperties)).append("\n");
    sb.append("    containerOverrides: ").append(toIndentedString(containerOverrides)).append("\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("    jobDefinition: ").append(toIndentedString(jobDefinition)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    retryStrategy: ").append(toIndentedString(retryStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ArrayProperties");
    openapiFields.add("ContainerOverrides");
    openapiFields.add("DependsOn");
    openapiFields.add("JobDefinition");
    openapiFields.add("JobName");
    openapiFields.add("Parameters");
    openapiFields.add("RetryStrategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("JobDefinition");
    openapiRequiredFields.add("JobName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePipeRequestTargetParametersBatchJobParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePipeRequestTargetParametersBatchJobParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePipeRequestTargetParametersBatchJobParameters is not found in the empty JSON string", UpdatePipeRequestTargetParametersBatchJobParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePipeRequestTargetParametersBatchJobParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePipeRequestTargetParametersBatchJobParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePipeRequestTargetParametersBatchJobParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ArrayProperties`
      if (jsonObj.get("ArrayProperties") != null && !jsonObj.get("ArrayProperties").isJsonNull()) {
        PipeTargetBatchJobParametersArrayProperties.validateJsonElement(jsonObj.get("ArrayProperties"));
      }
      // validate the optional field `ContainerOverrides`
      if (jsonObj.get("ContainerOverrides") != null && !jsonObj.get("ContainerOverrides").isJsonNull()) {
        PipeTargetBatchJobParametersContainerOverrides.validateJsonElement(jsonObj.get("ContainerOverrides"));
      }
      // validate the optional field `DependsOn`
      if (jsonObj.get("DependsOn") != null && !jsonObj.get("DependsOn").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DependsOn"));
      }
      // validate the required field `JobDefinition`
      String.validateJsonElement(jsonObj.get("JobDefinition"));
      // validate the required field `JobName`
      String.validateJsonElement(jsonObj.get("JobName"));
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `RetryStrategy`
      if (jsonObj.get("RetryStrategy") != null && !jsonObj.get("RetryStrategy").isJsonNull()) {
        PipeTargetBatchJobParametersRetryStrategy.validateJsonElement(jsonObj.get("RetryStrategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePipeRequestTargetParametersBatchJobParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePipeRequestTargetParametersBatchJobParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePipeRequestTargetParametersBatchJobParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePipeRequestTargetParametersBatchJobParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePipeRequestTargetParametersBatchJobParameters>() {
           @Override
           public void write(JsonWriter out, UpdatePipeRequestTargetParametersBatchJobParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePipeRequestTargetParametersBatchJobParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePipeRequestTargetParametersBatchJobParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePipeRequestTargetParametersBatchJobParameters
   * @throws IOException if the JSON string is invalid with respect to UpdatePipeRequestTargetParametersBatchJobParameters
   */
  public static UpdatePipeRequestTargetParametersBatchJobParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePipeRequestTargetParametersBatchJobParameters.class);
  }

  /**
   * Convert an instance of UpdatePipeRequestTargetParametersBatchJobParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

