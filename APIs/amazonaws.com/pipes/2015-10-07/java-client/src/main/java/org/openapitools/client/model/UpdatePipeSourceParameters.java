/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersActiveMQBrokerParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersDynamoDBStreamParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersFilterCriteria;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersKinesisStreamParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersManagedStreamingKafkaParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersRabbitMQBrokerParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersSelfManagedKafkaParameters;
import org.openapitools.client.model.UpdatePipeRequestSourceParametersSqsQueueParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters required to set up a source for your pipe.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePipeSourceParameters {
  public static final String SERIALIZED_NAME_ACTIVE_M_Q_BROKER_PARAMETERS = "ActiveMQBrokerParameters";
  @SerializedName(SERIALIZED_NAME_ACTIVE_M_Q_BROKER_PARAMETERS)
  private UpdatePipeRequestSourceParametersActiveMQBrokerParameters activeMQBrokerParameters;

  public static final String SERIALIZED_NAME_DYNAMO_D_B_STREAM_PARAMETERS = "DynamoDBStreamParameters";
  @SerializedName(SERIALIZED_NAME_DYNAMO_D_B_STREAM_PARAMETERS)
  private UpdatePipeRequestSourceParametersDynamoDBStreamParameters dynamoDBStreamParameters;

  public static final String SERIALIZED_NAME_FILTER_CRITERIA = "FilterCriteria";
  @SerializedName(SERIALIZED_NAME_FILTER_CRITERIA)
  private UpdatePipeRequestSourceParametersFilterCriteria filterCriteria;

  public static final String SERIALIZED_NAME_KINESIS_STREAM_PARAMETERS = "KinesisStreamParameters";
  @SerializedName(SERIALIZED_NAME_KINESIS_STREAM_PARAMETERS)
  private UpdatePipeRequestSourceParametersKinesisStreamParameters kinesisStreamParameters;

  public static final String SERIALIZED_NAME_MANAGED_STREAMING_KAFKA_PARAMETERS = "ManagedStreamingKafkaParameters";
  @SerializedName(SERIALIZED_NAME_MANAGED_STREAMING_KAFKA_PARAMETERS)
  private UpdatePipeRequestSourceParametersManagedStreamingKafkaParameters managedStreamingKafkaParameters;

  public static final String SERIALIZED_NAME_RABBIT_M_Q_BROKER_PARAMETERS = "RabbitMQBrokerParameters";
  @SerializedName(SERIALIZED_NAME_RABBIT_M_Q_BROKER_PARAMETERS)
  private UpdatePipeRequestSourceParametersRabbitMQBrokerParameters rabbitMQBrokerParameters;

  public static final String SERIALIZED_NAME_SELF_MANAGED_KAFKA_PARAMETERS = "SelfManagedKafkaParameters";
  @SerializedName(SERIALIZED_NAME_SELF_MANAGED_KAFKA_PARAMETERS)
  private UpdatePipeRequestSourceParametersSelfManagedKafkaParameters selfManagedKafkaParameters;

  public static final String SERIALIZED_NAME_SQS_QUEUE_PARAMETERS = "SqsQueueParameters";
  @SerializedName(SERIALIZED_NAME_SQS_QUEUE_PARAMETERS)
  private UpdatePipeRequestSourceParametersSqsQueueParameters sqsQueueParameters;

  public UpdatePipeSourceParameters() {
  }

  public UpdatePipeSourceParameters activeMQBrokerParameters(UpdatePipeRequestSourceParametersActiveMQBrokerParameters activeMQBrokerParameters) {
    this.activeMQBrokerParameters = activeMQBrokerParameters;
    return this;
  }

  /**
   * Get activeMQBrokerParameters
   * @return activeMQBrokerParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestSourceParametersActiveMQBrokerParameters getActiveMQBrokerParameters() {
    return activeMQBrokerParameters;
  }

  public void setActiveMQBrokerParameters(UpdatePipeRequestSourceParametersActiveMQBrokerParameters activeMQBrokerParameters) {
    this.activeMQBrokerParameters = activeMQBrokerParameters;
  }


  public UpdatePipeSourceParameters dynamoDBStreamParameters(UpdatePipeRequestSourceParametersDynamoDBStreamParameters dynamoDBStreamParameters) {
    this.dynamoDBStreamParameters = dynamoDBStreamParameters;
    return this;
  }

  /**
   * Get dynamoDBStreamParameters
   * @return dynamoDBStreamParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestSourceParametersDynamoDBStreamParameters getDynamoDBStreamParameters() {
    return dynamoDBStreamParameters;
  }

  public void setDynamoDBStreamParameters(UpdatePipeRequestSourceParametersDynamoDBStreamParameters dynamoDBStreamParameters) {
    this.dynamoDBStreamParameters = dynamoDBStreamParameters;
  }


  public UpdatePipeSourceParameters filterCriteria(UpdatePipeRequestSourceParametersFilterCriteria filterCriteria) {
    this.filterCriteria = filterCriteria;
    return this;
  }

  /**
   * Get filterCriteria
   * @return filterCriteria
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestSourceParametersFilterCriteria getFilterCriteria() {
    return filterCriteria;
  }

  public void setFilterCriteria(UpdatePipeRequestSourceParametersFilterCriteria filterCriteria) {
    this.filterCriteria = filterCriteria;
  }


  public UpdatePipeSourceParameters kinesisStreamParameters(UpdatePipeRequestSourceParametersKinesisStreamParameters kinesisStreamParameters) {
    this.kinesisStreamParameters = kinesisStreamParameters;
    return this;
  }

  /**
   * Get kinesisStreamParameters
   * @return kinesisStreamParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestSourceParametersKinesisStreamParameters getKinesisStreamParameters() {
    return kinesisStreamParameters;
  }

  public void setKinesisStreamParameters(UpdatePipeRequestSourceParametersKinesisStreamParameters kinesisStreamParameters) {
    this.kinesisStreamParameters = kinesisStreamParameters;
  }


  public UpdatePipeSourceParameters managedStreamingKafkaParameters(UpdatePipeRequestSourceParametersManagedStreamingKafkaParameters managedStreamingKafkaParameters) {
    this.managedStreamingKafkaParameters = managedStreamingKafkaParameters;
    return this;
  }

  /**
   * Get managedStreamingKafkaParameters
   * @return managedStreamingKafkaParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestSourceParametersManagedStreamingKafkaParameters getManagedStreamingKafkaParameters() {
    return managedStreamingKafkaParameters;
  }

  public void setManagedStreamingKafkaParameters(UpdatePipeRequestSourceParametersManagedStreamingKafkaParameters managedStreamingKafkaParameters) {
    this.managedStreamingKafkaParameters = managedStreamingKafkaParameters;
  }


  public UpdatePipeSourceParameters rabbitMQBrokerParameters(UpdatePipeRequestSourceParametersRabbitMQBrokerParameters rabbitMQBrokerParameters) {
    this.rabbitMQBrokerParameters = rabbitMQBrokerParameters;
    return this;
  }

  /**
   * Get rabbitMQBrokerParameters
   * @return rabbitMQBrokerParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestSourceParametersRabbitMQBrokerParameters getRabbitMQBrokerParameters() {
    return rabbitMQBrokerParameters;
  }

  public void setRabbitMQBrokerParameters(UpdatePipeRequestSourceParametersRabbitMQBrokerParameters rabbitMQBrokerParameters) {
    this.rabbitMQBrokerParameters = rabbitMQBrokerParameters;
  }


  public UpdatePipeSourceParameters selfManagedKafkaParameters(UpdatePipeRequestSourceParametersSelfManagedKafkaParameters selfManagedKafkaParameters) {
    this.selfManagedKafkaParameters = selfManagedKafkaParameters;
    return this;
  }

  /**
   * Get selfManagedKafkaParameters
   * @return selfManagedKafkaParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestSourceParametersSelfManagedKafkaParameters getSelfManagedKafkaParameters() {
    return selfManagedKafkaParameters;
  }

  public void setSelfManagedKafkaParameters(UpdatePipeRequestSourceParametersSelfManagedKafkaParameters selfManagedKafkaParameters) {
    this.selfManagedKafkaParameters = selfManagedKafkaParameters;
  }


  public UpdatePipeSourceParameters sqsQueueParameters(UpdatePipeRequestSourceParametersSqsQueueParameters sqsQueueParameters) {
    this.sqsQueueParameters = sqsQueueParameters;
    return this;
  }

  /**
   * Get sqsQueueParameters
   * @return sqsQueueParameters
   */
  @javax.annotation.Nullable
  public UpdatePipeRequestSourceParametersSqsQueueParameters getSqsQueueParameters() {
    return sqsQueueParameters;
  }

  public void setSqsQueueParameters(UpdatePipeRequestSourceParametersSqsQueueParameters sqsQueueParameters) {
    this.sqsQueueParameters = sqsQueueParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePipeSourceParameters updatePipeSourceParameters = (UpdatePipeSourceParameters) o;
    return Objects.equals(this.activeMQBrokerParameters, updatePipeSourceParameters.activeMQBrokerParameters) &&
        Objects.equals(this.dynamoDBStreamParameters, updatePipeSourceParameters.dynamoDBStreamParameters) &&
        Objects.equals(this.filterCriteria, updatePipeSourceParameters.filterCriteria) &&
        Objects.equals(this.kinesisStreamParameters, updatePipeSourceParameters.kinesisStreamParameters) &&
        Objects.equals(this.managedStreamingKafkaParameters, updatePipeSourceParameters.managedStreamingKafkaParameters) &&
        Objects.equals(this.rabbitMQBrokerParameters, updatePipeSourceParameters.rabbitMQBrokerParameters) &&
        Objects.equals(this.selfManagedKafkaParameters, updatePipeSourceParameters.selfManagedKafkaParameters) &&
        Objects.equals(this.sqsQueueParameters, updatePipeSourceParameters.sqsQueueParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeMQBrokerParameters, dynamoDBStreamParameters, filterCriteria, kinesisStreamParameters, managedStreamingKafkaParameters, rabbitMQBrokerParameters, selfManagedKafkaParameters, sqsQueueParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePipeSourceParameters {\n");
    sb.append("    activeMQBrokerParameters: ").append(toIndentedString(activeMQBrokerParameters)).append("\n");
    sb.append("    dynamoDBStreamParameters: ").append(toIndentedString(dynamoDBStreamParameters)).append("\n");
    sb.append("    filterCriteria: ").append(toIndentedString(filterCriteria)).append("\n");
    sb.append("    kinesisStreamParameters: ").append(toIndentedString(kinesisStreamParameters)).append("\n");
    sb.append("    managedStreamingKafkaParameters: ").append(toIndentedString(managedStreamingKafkaParameters)).append("\n");
    sb.append("    rabbitMQBrokerParameters: ").append(toIndentedString(rabbitMQBrokerParameters)).append("\n");
    sb.append("    selfManagedKafkaParameters: ").append(toIndentedString(selfManagedKafkaParameters)).append("\n");
    sb.append("    sqsQueueParameters: ").append(toIndentedString(sqsQueueParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActiveMQBrokerParameters");
    openapiFields.add("DynamoDBStreamParameters");
    openapiFields.add("FilterCriteria");
    openapiFields.add("KinesisStreamParameters");
    openapiFields.add("ManagedStreamingKafkaParameters");
    openapiFields.add("RabbitMQBrokerParameters");
    openapiFields.add("SelfManagedKafkaParameters");
    openapiFields.add("SqsQueueParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePipeSourceParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePipeSourceParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePipeSourceParameters is not found in the empty JSON string", UpdatePipeSourceParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePipeSourceParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePipeSourceParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActiveMQBrokerParameters`
      if (jsonObj.get("ActiveMQBrokerParameters") != null && !jsonObj.get("ActiveMQBrokerParameters").isJsonNull()) {
        UpdatePipeRequestSourceParametersActiveMQBrokerParameters.validateJsonElement(jsonObj.get("ActiveMQBrokerParameters"));
      }
      // validate the optional field `DynamoDBStreamParameters`
      if (jsonObj.get("DynamoDBStreamParameters") != null && !jsonObj.get("DynamoDBStreamParameters").isJsonNull()) {
        UpdatePipeRequestSourceParametersDynamoDBStreamParameters.validateJsonElement(jsonObj.get("DynamoDBStreamParameters"));
      }
      // validate the optional field `FilterCriteria`
      if (jsonObj.get("FilterCriteria") != null && !jsonObj.get("FilterCriteria").isJsonNull()) {
        UpdatePipeRequestSourceParametersFilterCriteria.validateJsonElement(jsonObj.get("FilterCriteria"));
      }
      // validate the optional field `KinesisStreamParameters`
      if (jsonObj.get("KinesisStreamParameters") != null && !jsonObj.get("KinesisStreamParameters").isJsonNull()) {
        UpdatePipeRequestSourceParametersKinesisStreamParameters.validateJsonElement(jsonObj.get("KinesisStreamParameters"));
      }
      // validate the optional field `ManagedStreamingKafkaParameters`
      if (jsonObj.get("ManagedStreamingKafkaParameters") != null && !jsonObj.get("ManagedStreamingKafkaParameters").isJsonNull()) {
        UpdatePipeRequestSourceParametersManagedStreamingKafkaParameters.validateJsonElement(jsonObj.get("ManagedStreamingKafkaParameters"));
      }
      // validate the optional field `RabbitMQBrokerParameters`
      if (jsonObj.get("RabbitMQBrokerParameters") != null && !jsonObj.get("RabbitMQBrokerParameters").isJsonNull()) {
        UpdatePipeRequestSourceParametersRabbitMQBrokerParameters.validateJsonElement(jsonObj.get("RabbitMQBrokerParameters"));
      }
      // validate the optional field `SelfManagedKafkaParameters`
      if (jsonObj.get("SelfManagedKafkaParameters") != null && !jsonObj.get("SelfManagedKafkaParameters").isJsonNull()) {
        UpdatePipeRequestSourceParametersSelfManagedKafkaParameters.validateJsonElement(jsonObj.get("SelfManagedKafkaParameters"));
      }
      // validate the optional field `SqsQueueParameters`
      if (jsonObj.get("SqsQueueParameters") != null && !jsonObj.get("SqsQueueParameters").isJsonNull()) {
        UpdatePipeRequestSourceParametersSqsQueueParameters.validateJsonElement(jsonObj.get("SqsQueueParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePipeSourceParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePipeSourceParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePipeSourceParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePipeSourceParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePipeSourceParameters>() {
           @Override
           public void write(JsonWriter out, UpdatePipeSourceParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePipeSourceParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePipeSourceParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePipeSourceParameters
   * @throws IOException if the JSON string is invalid with respect to UpdatePipeSourceParameters
   */
  public static UpdatePipeSourceParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePipeSourceParameters.class);
  }

  /**
   * Convert an instance of UpdatePipeSourceParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

