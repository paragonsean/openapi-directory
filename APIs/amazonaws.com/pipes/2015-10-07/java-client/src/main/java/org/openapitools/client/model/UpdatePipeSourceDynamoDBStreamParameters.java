/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OnPartialBatchItemFailureStreams;
import org.openapitools.client.model.PipeSourceDynamoDBStreamParametersDeadLetterConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters for using a DynamoDB stream as a source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePipeSourceDynamoDBStreamParameters {
  public static final String SERIALIZED_NAME_BATCH_SIZE = "BatchSize";
  @SerializedName(SERIALIZED_NAME_BATCH_SIZE)
  private Integer batchSize;

  public static final String SERIALIZED_NAME_DEAD_LETTER_CONFIG = "DeadLetterConfig";
  @SerializedName(SERIALIZED_NAME_DEAD_LETTER_CONFIG)
  private PipeSourceDynamoDBStreamParametersDeadLetterConfig deadLetterConfig;

  public static final String SERIALIZED_NAME_MAXIMUM_BATCHING_WINDOW_IN_SECONDS = "MaximumBatchingWindowInSeconds";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_BATCHING_WINDOW_IN_SECONDS)
  private Integer maximumBatchingWindowInSeconds;

  public static final String SERIALIZED_NAME_MAXIMUM_RECORD_AGE_IN_SECONDS = "MaximumRecordAgeInSeconds";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RECORD_AGE_IN_SECONDS)
  private Integer maximumRecordAgeInSeconds;

  public static final String SERIALIZED_NAME_MAXIMUM_RETRY_ATTEMPTS = "MaximumRetryAttempts";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RETRY_ATTEMPTS)
  private Integer maximumRetryAttempts;

  public static final String SERIALIZED_NAME_ON_PARTIAL_BATCH_ITEM_FAILURE = "OnPartialBatchItemFailure";
  @SerializedName(SERIALIZED_NAME_ON_PARTIAL_BATCH_ITEM_FAILURE)
  private OnPartialBatchItemFailureStreams onPartialBatchItemFailure;

  public static final String SERIALIZED_NAME_PARALLELIZATION_FACTOR = "ParallelizationFactor";
  @SerializedName(SERIALIZED_NAME_PARALLELIZATION_FACTOR)
  private Integer parallelizationFactor;

  public UpdatePipeSourceDynamoDBStreamParameters() {
  }

  public UpdatePipeSourceDynamoDBStreamParameters batchSize(Integer batchSize) {
    this.batchSize = batchSize;
    return this;
  }

  /**
   * Get batchSize
   * @return batchSize
   */
  @javax.annotation.Nullable
  public Integer getBatchSize() {
    return batchSize;
  }

  public void setBatchSize(Integer batchSize) {
    this.batchSize = batchSize;
  }


  public UpdatePipeSourceDynamoDBStreamParameters deadLetterConfig(PipeSourceDynamoDBStreamParametersDeadLetterConfig deadLetterConfig) {
    this.deadLetterConfig = deadLetterConfig;
    return this;
  }

  /**
   * Get deadLetterConfig
   * @return deadLetterConfig
   */
  @javax.annotation.Nullable
  public PipeSourceDynamoDBStreamParametersDeadLetterConfig getDeadLetterConfig() {
    return deadLetterConfig;
  }

  public void setDeadLetterConfig(PipeSourceDynamoDBStreamParametersDeadLetterConfig deadLetterConfig) {
    this.deadLetterConfig = deadLetterConfig;
  }


  public UpdatePipeSourceDynamoDBStreamParameters maximumBatchingWindowInSeconds(Integer maximumBatchingWindowInSeconds) {
    this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
    return this;
  }

  /**
   * Get maximumBatchingWindowInSeconds
   * @return maximumBatchingWindowInSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaximumBatchingWindowInSeconds() {
    return maximumBatchingWindowInSeconds;
  }

  public void setMaximumBatchingWindowInSeconds(Integer maximumBatchingWindowInSeconds) {
    this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
  }


  public UpdatePipeSourceDynamoDBStreamParameters maximumRecordAgeInSeconds(Integer maximumRecordAgeInSeconds) {
    this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
    return this;
  }

  /**
   * Get maximumRecordAgeInSeconds
   * @return maximumRecordAgeInSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaximumRecordAgeInSeconds() {
    return maximumRecordAgeInSeconds;
  }

  public void setMaximumRecordAgeInSeconds(Integer maximumRecordAgeInSeconds) {
    this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
  }


  public UpdatePipeSourceDynamoDBStreamParameters maximumRetryAttempts(Integer maximumRetryAttempts) {
    this.maximumRetryAttempts = maximumRetryAttempts;
    return this;
  }

  /**
   * Get maximumRetryAttempts
   * @return maximumRetryAttempts
   */
  @javax.annotation.Nullable
  public Integer getMaximumRetryAttempts() {
    return maximumRetryAttempts;
  }

  public void setMaximumRetryAttempts(Integer maximumRetryAttempts) {
    this.maximumRetryAttempts = maximumRetryAttempts;
  }


  public UpdatePipeSourceDynamoDBStreamParameters onPartialBatchItemFailure(OnPartialBatchItemFailureStreams onPartialBatchItemFailure) {
    this.onPartialBatchItemFailure = onPartialBatchItemFailure;
    return this;
  }

  /**
   * Get onPartialBatchItemFailure
   * @return onPartialBatchItemFailure
   */
  @javax.annotation.Nullable
  public OnPartialBatchItemFailureStreams getOnPartialBatchItemFailure() {
    return onPartialBatchItemFailure;
  }

  public void setOnPartialBatchItemFailure(OnPartialBatchItemFailureStreams onPartialBatchItemFailure) {
    this.onPartialBatchItemFailure = onPartialBatchItemFailure;
  }


  public UpdatePipeSourceDynamoDBStreamParameters parallelizationFactor(Integer parallelizationFactor) {
    this.parallelizationFactor = parallelizationFactor;
    return this;
  }

  /**
   * Get parallelizationFactor
   * @return parallelizationFactor
   */
  @javax.annotation.Nullable
  public Integer getParallelizationFactor() {
    return parallelizationFactor;
  }

  public void setParallelizationFactor(Integer parallelizationFactor) {
    this.parallelizationFactor = parallelizationFactor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePipeSourceDynamoDBStreamParameters updatePipeSourceDynamoDBStreamParameters = (UpdatePipeSourceDynamoDBStreamParameters) o;
    return Objects.equals(this.batchSize, updatePipeSourceDynamoDBStreamParameters.batchSize) &&
        Objects.equals(this.deadLetterConfig, updatePipeSourceDynamoDBStreamParameters.deadLetterConfig) &&
        Objects.equals(this.maximumBatchingWindowInSeconds, updatePipeSourceDynamoDBStreamParameters.maximumBatchingWindowInSeconds) &&
        Objects.equals(this.maximumRecordAgeInSeconds, updatePipeSourceDynamoDBStreamParameters.maximumRecordAgeInSeconds) &&
        Objects.equals(this.maximumRetryAttempts, updatePipeSourceDynamoDBStreamParameters.maximumRetryAttempts) &&
        Objects.equals(this.onPartialBatchItemFailure, updatePipeSourceDynamoDBStreamParameters.onPartialBatchItemFailure) &&
        Objects.equals(this.parallelizationFactor, updatePipeSourceDynamoDBStreamParameters.parallelizationFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchSize, deadLetterConfig, maximumBatchingWindowInSeconds, maximumRecordAgeInSeconds, maximumRetryAttempts, onPartialBatchItemFailure, parallelizationFactor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePipeSourceDynamoDBStreamParameters {\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    deadLetterConfig: ").append(toIndentedString(deadLetterConfig)).append("\n");
    sb.append("    maximumBatchingWindowInSeconds: ").append(toIndentedString(maximumBatchingWindowInSeconds)).append("\n");
    sb.append("    maximumRecordAgeInSeconds: ").append(toIndentedString(maximumRecordAgeInSeconds)).append("\n");
    sb.append("    maximumRetryAttempts: ").append(toIndentedString(maximumRetryAttempts)).append("\n");
    sb.append("    onPartialBatchItemFailure: ").append(toIndentedString(onPartialBatchItemFailure)).append("\n");
    sb.append("    parallelizationFactor: ").append(toIndentedString(parallelizationFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BatchSize");
    openapiFields.add("DeadLetterConfig");
    openapiFields.add("MaximumBatchingWindowInSeconds");
    openapiFields.add("MaximumRecordAgeInSeconds");
    openapiFields.add("MaximumRetryAttempts");
    openapiFields.add("OnPartialBatchItemFailure");
    openapiFields.add("ParallelizationFactor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePipeSourceDynamoDBStreamParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePipeSourceDynamoDBStreamParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePipeSourceDynamoDBStreamParameters is not found in the empty JSON string", UpdatePipeSourceDynamoDBStreamParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePipeSourceDynamoDBStreamParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePipeSourceDynamoDBStreamParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BatchSize`
      if (jsonObj.get("BatchSize") != null && !jsonObj.get("BatchSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BatchSize"));
      }
      // validate the optional field `DeadLetterConfig`
      if (jsonObj.get("DeadLetterConfig") != null && !jsonObj.get("DeadLetterConfig").isJsonNull()) {
        PipeSourceDynamoDBStreamParametersDeadLetterConfig.validateJsonElement(jsonObj.get("DeadLetterConfig"));
      }
      // validate the optional field `MaximumBatchingWindowInSeconds`
      if (jsonObj.get("MaximumBatchingWindowInSeconds") != null && !jsonObj.get("MaximumBatchingWindowInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaximumBatchingWindowInSeconds"));
      }
      // validate the optional field `MaximumRecordAgeInSeconds`
      if (jsonObj.get("MaximumRecordAgeInSeconds") != null && !jsonObj.get("MaximumRecordAgeInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaximumRecordAgeInSeconds"));
      }
      // validate the optional field `MaximumRetryAttempts`
      if (jsonObj.get("MaximumRetryAttempts") != null && !jsonObj.get("MaximumRetryAttempts").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaximumRetryAttempts"));
      }
      // validate the optional field `OnPartialBatchItemFailure`
      if (jsonObj.get("OnPartialBatchItemFailure") != null && !jsonObj.get("OnPartialBatchItemFailure").isJsonNull()) {
        OnPartialBatchItemFailureStreams.validateJsonElement(jsonObj.get("OnPartialBatchItemFailure"));
      }
      // validate the optional field `ParallelizationFactor`
      if (jsonObj.get("ParallelizationFactor") != null && !jsonObj.get("ParallelizationFactor").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParallelizationFactor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePipeSourceDynamoDBStreamParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePipeSourceDynamoDBStreamParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePipeSourceDynamoDBStreamParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePipeSourceDynamoDBStreamParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePipeSourceDynamoDBStreamParameters>() {
           @Override
           public void write(JsonWriter out, UpdatePipeSourceDynamoDBStreamParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePipeSourceDynamoDBStreamParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePipeSourceDynamoDBStreamParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePipeSourceDynamoDBStreamParameters
   * @throws IOException if the JSON string is invalid with respect to UpdatePipeSourceDynamoDBStreamParameters
   */
  public static UpdatePipeSourceDynamoDBStreamParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePipeSourceDynamoDBStreamParameters.class);
  }

  /**
   * Convert an instance of UpdatePipeSourceDynamoDBStreamParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

