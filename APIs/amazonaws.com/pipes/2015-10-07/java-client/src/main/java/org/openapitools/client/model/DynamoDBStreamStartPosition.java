/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets DynamoDBStreamStartPosition
 */
@JsonAdapter(DynamoDBStreamStartPosition.Adapter.class)
public enum DynamoDBStreamStartPosition {
  
  TRIM_HORIZON("TRIM_HORIZON"),
  
  LATEST("LATEST");

  private String value;

  DynamoDBStreamStartPosition(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DynamoDBStreamStartPosition fromValue(String value) {
    for (DynamoDBStreamStartPosition b : DynamoDBStreamStartPosition.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DynamoDBStreamStartPosition> {
    @Override
    public void write(final JsonWriter jsonWriter, final DynamoDBStreamStartPosition enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DynamoDBStreamStartPosition read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DynamoDBStreamStartPosition.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DynamoDBStreamStartPosition.fromValue(value);
  }
}

