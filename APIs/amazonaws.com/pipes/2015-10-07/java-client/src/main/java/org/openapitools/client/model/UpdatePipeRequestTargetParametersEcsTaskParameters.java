/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LaunchType;
import org.openapitools.client.model.PipeTargetEcsTaskParametersNetworkConfiguration;
import org.openapitools.client.model.PipeTargetEcsTaskParametersOverrides;
import org.openapitools.client.model.PropagateTags;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePipeRequestTargetParametersEcsTaskParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePipeRequestTargetParametersEcsTaskParameters {
  public static final String SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY = "CapacityProviderStrategy";
  @SerializedName(SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY)
  private List capacityProviderStrategy;

  public static final String SERIALIZED_NAME_ENABLE_E_C_S_MANAGED_TAGS = "EnableECSManagedTags";
  @SerializedName(SERIALIZED_NAME_ENABLE_E_C_S_MANAGED_TAGS)
  private Boolean enableECSManagedTags;

  public static final String SERIALIZED_NAME_ENABLE_EXECUTE_COMMAND = "EnableExecuteCommand";
  @SerializedName(SERIALIZED_NAME_ENABLE_EXECUTE_COMMAND)
  private Boolean enableExecuteCommand;

  public static final String SERIALIZED_NAME_GROUP = "Group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_LAUNCH_TYPE = "LaunchType";
  @SerializedName(SERIALIZED_NAME_LAUNCH_TYPE)
  private LaunchType launchType;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "NetworkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private PipeTargetEcsTaskParametersNetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_OVERRIDES = "Overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private PipeTargetEcsTaskParametersOverrides overrides;

  public static final String SERIALIZED_NAME_PLACEMENT_CONSTRAINTS = "PlacementConstraints";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_CONSTRAINTS)
  private List placementConstraints;

  public static final String SERIALIZED_NAME_PLACEMENT_STRATEGY = "PlacementStrategy";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_STRATEGY)
  private List placementStrategy;

  public static final String SERIALIZED_NAME_PLATFORM_VERSION = "PlatformVersion";
  @SerializedName(SERIALIZED_NAME_PLATFORM_VERSION)
  private String platformVersion;

  public static final String SERIALIZED_NAME_PROPAGATE_TAGS = "PropagateTags";
  @SerializedName(SERIALIZED_NAME_PROPAGATE_TAGS)
  private PropagateTags propagateTags;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "ReferenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_TASK_COUNT = "TaskCount";
  @SerializedName(SERIALIZED_NAME_TASK_COUNT)
  private Integer taskCount;

  public static final String SERIALIZED_NAME_TASK_DEFINITION_ARN = "TaskDefinitionArn";
  @SerializedName(SERIALIZED_NAME_TASK_DEFINITION_ARN)
  private String taskDefinitionArn;

  public UpdatePipeRequestTargetParametersEcsTaskParameters() {
  }

  public UpdatePipeRequestTargetParametersEcsTaskParameters capacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
    return this;
  }

  /**
   * Get capacityProviderStrategy
   * @return capacityProviderStrategy
   */
  @javax.annotation.Nullable
  public List getCapacityProviderStrategy() {
    return capacityProviderStrategy;
  }

  public void setCapacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters enableECSManagedTags(Boolean enableECSManagedTags) {
    this.enableECSManagedTags = enableECSManagedTags;
    return this;
  }

  /**
   * Get enableECSManagedTags
   * @return enableECSManagedTags
   */
  @javax.annotation.Nullable
  public Boolean getEnableECSManagedTags() {
    return enableECSManagedTags;
  }

  public void setEnableECSManagedTags(Boolean enableECSManagedTags) {
    this.enableECSManagedTags = enableECSManagedTags;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters enableExecuteCommand(Boolean enableExecuteCommand) {
    this.enableExecuteCommand = enableExecuteCommand;
    return this;
  }

  /**
   * Get enableExecuteCommand
   * @return enableExecuteCommand
   */
  @javax.annotation.Nullable
  public Boolean getEnableExecuteCommand() {
    return enableExecuteCommand;
  }

  public void setEnableExecuteCommand(Boolean enableExecuteCommand) {
    this.enableExecuteCommand = enableExecuteCommand;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters launchType(LaunchType launchType) {
    this.launchType = launchType;
    return this;
  }

  /**
   * Get launchType
   * @return launchType
   */
  @javax.annotation.Nullable
  public LaunchType getLaunchType() {
    return launchType;
  }

  public void setLaunchType(LaunchType launchType) {
    this.launchType = launchType;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters networkConfiguration(PipeTargetEcsTaskParametersNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public PipeTargetEcsTaskParametersNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(PipeTargetEcsTaskParametersNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters overrides(PipeTargetEcsTaskParametersOverrides overrides) {
    this.overrides = overrides;
    return this;
  }

  /**
   * Get overrides
   * @return overrides
   */
  @javax.annotation.Nullable
  public PipeTargetEcsTaskParametersOverrides getOverrides() {
    return overrides;
  }

  public void setOverrides(PipeTargetEcsTaskParametersOverrides overrides) {
    this.overrides = overrides;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters placementConstraints(List placementConstraints) {
    this.placementConstraints = placementConstraints;
    return this;
  }

  /**
   * Get placementConstraints
   * @return placementConstraints
   */
  @javax.annotation.Nullable
  public List getPlacementConstraints() {
    return placementConstraints;
  }

  public void setPlacementConstraints(List placementConstraints) {
    this.placementConstraints = placementConstraints;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters placementStrategy(List placementStrategy) {
    this.placementStrategy = placementStrategy;
    return this;
  }

  /**
   * Get placementStrategy
   * @return placementStrategy
   */
  @javax.annotation.Nullable
  public List getPlacementStrategy() {
    return placementStrategy;
  }

  public void setPlacementStrategy(List placementStrategy) {
    this.placementStrategy = placementStrategy;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters platformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
    return this;
  }

  /**
   * Get platformVersion
   * @return platformVersion
   */
  @javax.annotation.Nullable
  public String getPlatformVersion() {
    return platformVersion;
  }

  public void setPlatformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters propagateTags(PropagateTags propagateTags) {
    this.propagateTags = propagateTags;
    return this;
  }

  /**
   * Get propagateTags
   * @return propagateTags
   */
  @javax.annotation.Nullable
  public PropagateTags getPropagateTags() {
    return propagateTags;
  }

  public void setPropagateTags(PropagateTags propagateTags) {
    this.propagateTags = propagateTags;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters taskCount(Integer taskCount) {
    this.taskCount = taskCount;
    return this;
  }

  /**
   * Get taskCount
   * @return taskCount
   */
  @javax.annotation.Nullable
  public Integer getTaskCount() {
    return taskCount;
  }

  public void setTaskCount(Integer taskCount) {
    this.taskCount = taskCount;
  }


  public UpdatePipeRequestTargetParametersEcsTaskParameters taskDefinitionArn(String taskDefinitionArn) {
    this.taskDefinitionArn = taskDefinitionArn;
    return this;
  }

  /**
   * Get taskDefinitionArn
   * @return taskDefinitionArn
   */
  @javax.annotation.Nonnull
  public String getTaskDefinitionArn() {
    return taskDefinitionArn;
  }

  public void setTaskDefinitionArn(String taskDefinitionArn) {
    this.taskDefinitionArn = taskDefinitionArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePipeRequestTargetParametersEcsTaskParameters updatePipeRequestTargetParametersEcsTaskParameters = (UpdatePipeRequestTargetParametersEcsTaskParameters) o;
    return Objects.equals(this.capacityProviderStrategy, updatePipeRequestTargetParametersEcsTaskParameters.capacityProviderStrategy) &&
        Objects.equals(this.enableECSManagedTags, updatePipeRequestTargetParametersEcsTaskParameters.enableECSManagedTags) &&
        Objects.equals(this.enableExecuteCommand, updatePipeRequestTargetParametersEcsTaskParameters.enableExecuteCommand) &&
        Objects.equals(this.group, updatePipeRequestTargetParametersEcsTaskParameters.group) &&
        Objects.equals(this.launchType, updatePipeRequestTargetParametersEcsTaskParameters.launchType) &&
        Objects.equals(this.networkConfiguration, updatePipeRequestTargetParametersEcsTaskParameters.networkConfiguration) &&
        Objects.equals(this.overrides, updatePipeRequestTargetParametersEcsTaskParameters.overrides) &&
        Objects.equals(this.placementConstraints, updatePipeRequestTargetParametersEcsTaskParameters.placementConstraints) &&
        Objects.equals(this.placementStrategy, updatePipeRequestTargetParametersEcsTaskParameters.placementStrategy) &&
        Objects.equals(this.platformVersion, updatePipeRequestTargetParametersEcsTaskParameters.platformVersion) &&
        Objects.equals(this.propagateTags, updatePipeRequestTargetParametersEcsTaskParameters.propagateTags) &&
        Objects.equals(this.referenceId, updatePipeRequestTargetParametersEcsTaskParameters.referenceId) &&
        Objects.equals(this.tags, updatePipeRequestTargetParametersEcsTaskParameters.tags) &&
        Objects.equals(this.taskCount, updatePipeRequestTargetParametersEcsTaskParameters.taskCount) &&
        Objects.equals(this.taskDefinitionArn, updatePipeRequestTargetParametersEcsTaskParameters.taskDefinitionArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityProviderStrategy, enableECSManagedTags, enableExecuteCommand, group, launchType, networkConfiguration, overrides, placementConstraints, placementStrategy, platformVersion, propagateTags, referenceId, tags, taskCount, taskDefinitionArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePipeRequestTargetParametersEcsTaskParameters {\n");
    sb.append("    capacityProviderStrategy: ").append(toIndentedString(capacityProviderStrategy)).append("\n");
    sb.append("    enableECSManagedTags: ").append(toIndentedString(enableECSManagedTags)).append("\n");
    sb.append("    enableExecuteCommand: ").append(toIndentedString(enableExecuteCommand)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    launchType: ").append(toIndentedString(launchType)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    placementConstraints: ").append(toIndentedString(placementConstraints)).append("\n");
    sb.append("    placementStrategy: ").append(toIndentedString(placementStrategy)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    propagateTags: ").append(toIndentedString(propagateTags)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    taskCount: ").append(toIndentedString(taskCount)).append("\n");
    sb.append("    taskDefinitionArn: ").append(toIndentedString(taskDefinitionArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CapacityProviderStrategy");
    openapiFields.add("EnableECSManagedTags");
    openapiFields.add("EnableExecuteCommand");
    openapiFields.add("Group");
    openapiFields.add("LaunchType");
    openapiFields.add("NetworkConfiguration");
    openapiFields.add("Overrides");
    openapiFields.add("PlacementConstraints");
    openapiFields.add("PlacementStrategy");
    openapiFields.add("PlatformVersion");
    openapiFields.add("PropagateTags");
    openapiFields.add("ReferenceId");
    openapiFields.add("Tags");
    openapiFields.add("TaskCount");
    openapiFields.add("TaskDefinitionArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TaskDefinitionArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePipeRequestTargetParametersEcsTaskParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePipeRequestTargetParametersEcsTaskParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePipeRequestTargetParametersEcsTaskParameters is not found in the empty JSON string", UpdatePipeRequestTargetParametersEcsTaskParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePipeRequestTargetParametersEcsTaskParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePipeRequestTargetParametersEcsTaskParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePipeRequestTargetParametersEcsTaskParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CapacityProviderStrategy`
      if (jsonObj.get("CapacityProviderStrategy") != null && !jsonObj.get("CapacityProviderStrategy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CapacityProviderStrategy"));
      }
      // validate the optional field `EnableECSManagedTags`
      if (jsonObj.get("EnableECSManagedTags") != null && !jsonObj.get("EnableECSManagedTags").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableECSManagedTags"));
      }
      // validate the optional field `EnableExecuteCommand`
      if (jsonObj.get("EnableExecuteCommand") != null && !jsonObj.get("EnableExecuteCommand").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableExecuteCommand"));
      }
      // validate the optional field `Group`
      if (jsonObj.get("Group") != null && !jsonObj.get("Group").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Group"));
      }
      // validate the optional field `LaunchType`
      if (jsonObj.get("LaunchType") != null && !jsonObj.get("LaunchType").isJsonNull()) {
        LaunchType.validateJsonElement(jsonObj.get("LaunchType"));
      }
      // validate the optional field `NetworkConfiguration`
      if (jsonObj.get("NetworkConfiguration") != null && !jsonObj.get("NetworkConfiguration").isJsonNull()) {
        PipeTargetEcsTaskParametersNetworkConfiguration.validateJsonElement(jsonObj.get("NetworkConfiguration"));
      }
      // validate the optional field `Overrides`
      if (jsonObj.get("Overrides") != null && !jsonObj.get("Overrides").isJsonNull()) {
        PipeTargetEcsTaskParametersOverrides.validateJsonElement(jsonObj.get("Overrides"));
      }
      // validate the optional field `PlacementConstraints`
      if (jsonObj.get("PlacementConstraints") != null && !jsonObj.get("PlacementConstraints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PlacementConstraints"));
      }
      // validate the optional field `PlacementStrategy`
      if (jsonObj.get("PlacementStrategy") != null && !jsonObj.get("PlacementStrategy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PlacementStrategy"));
      }
      // validate the optional field `PlatformVersion`
      if (jsonObj.get("PlatformVersion") != null && !jsonObj.get("PlatformVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformVersion"));
      }
      // validate the optional field `PropagateTags`
      if (jsonObj.get("PropagateTags") != null && !jsonObj.get("PropagateTags").isJsonNull()) {
        PropagateTags.validateJsonElement(jsonObj.get("PropagateTags"));
      }
      // validate the optional field `ReferenceId`
      if (jsonObj.get("ReferenceId") != null && !jsonObj.get("ReferenceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReferenceId"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `TaskCount`
      if (jsonObj.get("TaskCount") != null && !jsonObj.get("TaskCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TaskCount"));
      }
      // validate the required field `TaskDefinitionArn`
      String.validateJsonElement(jsonObj.get("TaskDefinitionArn"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePipeRequestTargetParametersEcsTaskParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePipeRequestTargetParametersEcsTaskParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePipeRequestTargetParametersEcsTaskParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePipeRequestTargetParametersEcsTaskParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePipeRequestTargetParametersEcsTaskParameters>() {
           @Override
           public void write(JsonWriter out, UpdatePipeRequestTargetParametersEcsTaskParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePipeRequestTargetParametersEcsTaskParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePipeRequestTargetParametersEcsTaskParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePipeRequestTargetParametersEcsTaskParameters
   * @throws IOException if the JSON string is invalid with respect to UpdatePipeRequestTargetParametersEcsTaskParameters
   */
  public static UpdatePipeRequestTargetParametersEcsTaskParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePipeRequestTargetParametersEcsTaskParameters.class);
  }

  /**
   * Convert an instance of UpdatePipeRequestTargetParametersEcsTaskParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

