/*
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PipeSourceSelfManagedKafkaParametersCredentials;
import org.openapitools.client.model.PipeSourceSelfManagedKafkaParametersVpc;
import org.openapitools.client.model.SelfManagedKafkaStartPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreatePipeRequestSourceParametersSelfManagedKafkaParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:08.188199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreatePipeRequestSourceParametersSelfManagedKafkaParameters {
  public static final String SERIALIZED_NAME_ADDITIONAL_BOOTSTRAP_SERVERS = "AdditionalBootstrapServers";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_BOOTSTRAP_SERVERS)
  private List additionalBootstrapServers;

  public static final String SERIALIZED_NAME_BATCH_SIZE = "BatchSize";
  @SerializedName(SERIALIZED_NAME_BATCH_SIZE)
  private Integer batchSize;

  public static final String SERIALIZED_NAME_CONSUMER_GROUP_I_D = "ConsumerGroupID";
  @SerializedName(SERIALIZED_NAME_CONSUMER_GROUP_I_D)
  private String consumerGroupID;

  public static final String SERIALIZED_NAME_CREDENTIALS = "Credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private PipeSourceSelfManagedKafkaParametersCredentials credentials;

  public static final String SERIALIZED_NAME_MAXIMUM_BATCHING_WINDOW_IN_SECONDS = "MaximumBatchingWindowInSeconds";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_BATCHING_WINDOW_IN_SECONDS)
  private Integer maximumBatchingWindowInSeconds;

  public static final String SERIALIZED_NAME_SERVER_ROOT_CA_CERTIFICATE = "ServerRootCaCertificate";
  @SerializedName(SERIALIZED_NAME_SERVER_ROOT_CA_CERTIFICATE)
  private String serverRootCaCertificate;

  public static final String SERIALIZED_NAME_STARTING_POSITION = "StartingPosition";
  @SerializedName(SERIALIZED_NAME_STARTING_POSITION)
  private SelfManagedKafkaStartPosition startingPosition;

  public static final String SERIALIZED_NAME_TOPIC_NAME = "TopicName";
  @SerializedName(SERIALIZED_NAME_TOPIC_NAME)
  private String topicName;

  public static final String SERIALIZED_NAME_VPC = "Vpc";
  @SerializedName(SERIALIZED_NAME_VPC)
  private PipeSourceSelfManagedKafkaParametersVpc vpc;

  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters() {
  }

  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters additionalBootstrapServers(List additionalBootstrapServers) {
    this.additionalBootstrapServers = additionalBootstrapServers;
    return this;
  }

  /**
   * Get additionalBootstrapServers
   * @return additionalBootstrapServers
   */
  @javax.annotation.Nullable
  public List getAdditionalBootstrapServers() {
    return additionalBootstrapServers;
  }

  public void setAdditionalBootstrapServers(List additionalBootstrapServers) {
    this.additionalBootstrapServers = additionalBootstrapServers;
  }


  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters batchSize(Integer batchSize) {
    this.batchSize = batchSize;
    return this;
  }

  /**
   * Get batchSize
   * @return batchSize
   */
  @javax.annotation.Nullable
  public Integer getBatchSize() {
    return batchSize;
  }

  public void setBatchSize(Integer batchSize) {
    this.batchSize = batchSize;
  }


  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters consumerGroupID(String consumerGroupID) {
    this.consumerGroupID = consumerGroupID;
    return this;
  }

  /**
   * Get consumerGroupID
   * @return consumerGroupID
   */
  @javax.annotation.Nullable
  public String getConsumerGroupID() {
    return consumerGroupID;
  }

  public void setConsumerGroupID(String consumerGroupID) {
    this.consumerGroupID = consumerGroupID;
  }


  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters credentials(PipeSourceSelfManagedKafkaParametersCredentials credentials) {
    this.credentials = credentials;
    return this;
  }

  /**
   * Get credentials
   * @return credentials
   */
  @javax.annotation.Nullable
  public PipeSourceSelfManagedKafkaParametersCredentials getCredentials() {
    return credentials;
  }

  public void setCredentials(PipeSourceSelfManagedKafkaParametersCredentials credentials) {
    this.credentials = credentials;
  }


  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters maximumBatchingWindowInSeconds(Integer maximumBatchingWindowInSeconds) {
    this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
    return this;
  }

  /**
   * Get maximumBatchingWindowInSeconds
   * @return maximumBatchingWindowInSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaximumBatchingWindowInSeconds() {
    return maximumBatchingWindowInSeconds;
  }

  public void setMaximumBatchingWindowInSeconds(Integer maximumBatchingWindowInSeconds) {
    this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
  }


  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters serverRootCaCertificate(String serverRootCaCertificate) {
    this.serverRootCaCertificate = serverRootCaCertificate;
    return this;
  }

  /**
   * Get serverRootCaCertificate
   * @return serverRootCaCertificate
   */
  @javax.annotation.Nullable
  public String getServerRootCaCertificate() {
    return serverRootCaCertificate;
  }

  public void setServerRootCaCertificate(String serverRootCaCertificate) {
    this.serverRootCaCertificate = serverRootCaCertificate;
  }


  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters startingPosition(SelfManagedKafkaStartPosition startingPosition) {
    this.startingPosition = startingPosition;
    return this;
  }

  /**
   * Get startingPosition
   * @return startingPosition
   */
  @javax.annotation.Nullable
  public SelfManagedKafkaStartPosition getStartingPosition() {
    return startingPosition;
  }

  public void setStartingPosition(SelfManagedKafkaStartPosition startingPosition) {
    this.startingPosition = startingPosition;
  }


  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters topicName(String topicName) {
    this.topicName = topicName;
    return this;
  }

  /**
   * Get topicName
   * @return topicName
   */
  @javax.annotation.Nonnull
  public String getTopicName() {
    return topicName;
  }

  public void setTopicName(String topicName) {
    this.topicName = topicName;
  }


  public CreatePipeRequestSourceParametersSelfManagedKafkaParameters vpc(PipeSourceSelfManagedKafkaParametersVpc vpc) {
    this.vpc = vpc;
    return this;
  }

  /**
   * Get vpc
   * @return vpc
   */
  @javax.annotation.Nullable
  public PipeSourceSelfManagedKafkaParametersVpc getVpc() {
    return vpc;
  }

  public void setVpc(PipeSourceSelfManagedKafkaParametersVpc vpc) {
    this.vpc = vpc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePipeRequestSourceParametersSelfManagedKafkaParameters createPipeRequestSourceParametersSelfManagedKafkaParameters = (CreatePipeRequestSourceParametersSelfManagedKafkaParameters) o;
    return Objects.equals(this.additionalBootstrapServers, createPipeRequestSourceParametersSelfManagedKafkaParameters.additionalBootstrapServers) &&
        Objects.equals(this.batchSize, createPipeRequestSourceParametersSelfManagedKafkaParameters.batchSize) &&
        Objects.equals(this.consumerGroupID, createPipeRequestSourceParametersSelfManagedKafkaParameters.consumerGroupID) &&
        Objects.equals(this.credentials, createPipeRequestSourceParametersSelfManagedKafkaParameters.credentials) &&
        Objects.equals(this.maximumBatchingWindowInSeconds, createPipeRequestSourceParametersSelfManagedKafkaParameters.maximumBatchingWindowInSeconds) &&
        Objects.equals(this.serverRootCaCertificate, createPipeRequestSourceParametersSelfManagedKafkaParameters.serverRootCaCertificate) &&
        Objects.equals(this.startingPosition, createPipeRequestSourceParametersSelfManagedKafkaParameters.startingPosition) &&
        Objects.equals(this.topicName, createPipeRequestSourceParametersSelfManagedKafkaParameters.topicName) &&
        Objects.equals(this.vpc, createPipeRequestSourceParametersSelfManagedKafkaParameters.vpc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalBootstrapServers, batchSize, consumerGroupID, credentials, maximumBatchingWindowInSeconds, serverRootCaCertificate, startingPosition, topicName, vpc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePipeRequestSourceParametersSelfManagedKafkaParameters {\n");
    sb.append("    additionalBootstrapServers: ").append(toIndentedString(additionalBootstrapServers)).append("\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    consumerGroupID: ").append(toIndentedString(consumerGroupID)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    maximumBatchingWindowInSeconds: ").append(toIndentedString(maximumBatchingWindowInSeconds)).append("\n");
    sb.append("    serverRootCaCertificate: ").append(toIndentedString(serverRootCaCertificate)).append("\n");
    sb.append("    startingPosition: ").append(toIndentedString(startingPosition)).append("\n");
    sb.append("    topicName: ").append(toIndentedString(topicName)).append("\n");
    sb.append("    vpc: ").append(toIndentedString(vpc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdditionalBootstrapServers");
    openapiFields.add("BatchSize");
    openapiFields.add("ConsumerGroupID");
    openapiFields.add("Credentials");
    openapiFields.add("MaximumBatchingWindowInSeconds");
    openapiFields.add("ServerRootCaCertificate");
    openapiFields.add("StartingPosition");
    openapiFields.add("TopicName");
    openapiFields.add("Vpc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TopicName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePipeRequestSourceParametersSelfManagedKafkaParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePipeRequestSourceParametersSelfManagedKafkaParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePipeRequestSourceParametersSelfManagedKafkaParameters is not found in the empty JSON string", CreatePipeRequestSourceParametersSelfManagedKafkaParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePipeRequestSourceParametersSelfManagedKafkaParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePipeRequestSourceParametersSelfManagedKafkaParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePipeRequestSourceParametersSelfManagedKafkaParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdditionalBootstrapServers`
      if (jsonObj.get("AdditionalBootstrapServers") != null && !jsonObj.get("AdditionalBootstrapServers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalBootstrapServers"));
      }
      // validate the optional field `BatchSize`
      if (jsonObj.get("BatchSize") != null && !jsonObj.get("BatchSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BatchSize"));
      }
      // validate the optional field `ConsumerGroupID`
      if (jsonObj.get("ConsumerGroupID") != null && !jsonObj.get("ConsumerGroupID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConsumerGroupID"));
      }
      // validate the optional field `Credentials`
      if (jsonObj.get("Credentials") != null && !jsonObj.get("Credentials").isJsonNull()) {
        PipeSourceSelfManagedKafkaParametersCredentials.validateJsonElement(jsonObj.get("Credentials"));
      }
      // validate the optional field `MaximumBatchingWindowInSeconds`
      if (jsonObj.get("MaximumBatchingWindowInSeconds") != null && !jsonObj.get("MaximumBatchingWindowInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaximumBatchingWindowInSeconds"));
      }
      // validate the optional field `ServerRootCaCertificate`
      if (jsonObj.get("ServerRootCaCertificate") != null && !jsonObj.get("ServerRootCaCertificate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerRootCaCertificate"));
      }
      // validate the optional field `StartingPosition`
      if (jsonObj.get("StartingPosition") != null && !jsonObj.get("StartingPosition").isJsonNull()) {
        SelfManagedKafkaStartPosition.validateJsonElement(jsonObj.get("StartingPosition"));
      }
      // validate the required field `TopicName`
      String.validateJsonElement(jsonObj.get("TopicName"));
      // validate the optional field `Vpc`
      if (jsonObj.get("Vpc") != null && !jsonObj.get("Vpc").isJsonNull()) {
        PipeSourceSelfManagedKafkaParametersVpc.validateJsonElement(jsonObj.get("Vpc"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePipeRequestSourceParametersSelfManagedKafkaParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePipeRequestSourceParametersSelfManagedKafkaParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePipeRequestSourceParametersSelfManagedKafkaParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePipeRequestSourceParametersSelfManagedKafkaParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePipeRequestSourceParametersSelfManagedKafkaParameters>() {
           @Override
           public void write(JsonWriter out, CreatePipeRequestSourceParametersSelfManagedKafkaParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePipeRequestSourceParametersSelfManagedKafkaParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePipeRequestSourceParametersSelfManagedKafkaParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePipeRequestSourceParametersSelfManagedKafkaParameters
   * @throws IOException if the JSON string is invalid with respect to CreatePipeRequestSourceParametersSelfManagedKafkaParameters
   */
  public static CreatePipeRequestSourceParametersSelfManagedKafkaParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePipeRequestSourceParametersSelfManagedKafkaParameters.class);
  }

  /**
   * Convert an instance of CreatePipeRequestSourceParametersSelfManagedKafkaParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

