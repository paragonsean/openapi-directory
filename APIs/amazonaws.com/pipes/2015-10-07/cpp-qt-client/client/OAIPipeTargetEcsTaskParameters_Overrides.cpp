/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeTargetEcsTaskParameters_Overrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeTargetEcsTaskParameters_Overrides::OAIPipeTargetEcsTaskParameters_Overrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeTargetEcsTaskParameters_Overrides::OAIPipeTargetEcsTaskParameters_Overrides() {
    this->initializeModel();
}

OAIPipeTargetEcsTaskParameters_Overrides::~OAIPipeTargetEcsTaskParameters_Overrides() {}

void OAIPipeTargetEcsTaskParameters_Overrides::initializeModel() {

    m_container_overrides_isSet = false;
    m_container_overrides_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_ephemeral_storage_isSet = false;
    m_ephemeral_storage_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_inference_accelerator_overrides_isSet = false;
    m_inference_accelerator_overrides_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_task_role_arn_isSet = false;
    m_task_role_arn_isValid = false;
}

void OAIPipeTargetEcsTaskParameters_Overrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeTargetEcsTaskParameters_Overrides::fromJsonObject(QJsonObject json) {

    m_container_overrides_isValid = ::OpenAPI::fromJsonValue(m_container_overrides, json[QString("ContainerOverrides")]);
    m_container_overrides_isSet = !json[QString("ContainerOverrides")].isNull() && m_container_overrides_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("Cpu")]);
    m_cpu_isSet = !json[QString("Cpu")].isNull() && m_cpu_isValid;

    m_ephemeral_storage_isValid = ::OpenAPI::fromJsonValue(m_ephemeral_storage, json[QString("EphemeralStorage")]);
    m_ephemeral_storage_isSet = !json[QString("EphemeralStorage")].isNull() && m_ephemeral_storage_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("ExecutionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("ExecutionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_inference_accelerator_overrides_isValid = ::OpenAPI::fromJsonValue(m_inference_accelerator_overrides, json[QString("InferenceAcceleratorOverrides")]);
    m_inference_accelerator_overrides_isSet = !json[QString("InferenceAcceleratorOverrides")].isNull() && m_inference_accelerator_overrides_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("Memory")]);
    m_memory_isSet = !json[QString("Memory")].isNull() && m_memory_isValid;

    m_task_role_arn_isValid = ::OpenAPI::fromJsonValue(m_task_role_arn, json[QString("TaskRoleArn")]);
    m_task_role_arn_isSet = !json[QString("TaskRoleArn")].isNull() && m_task_role_arn_isValid;
}

QString OAIPipeTargetEcsTaskParameters_Overrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeTargetEcsTaskParameters_Overrides::asJsonObject() const {
    QJsonObject obj;
    if (m_container_overrides.isSet()) {
        obj.insert(QString("ContainerOverrides"), ::OpenAPI::toJsonValue(m_container_overrides));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("Cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_ephemeral_storage.isSet()) {
        obj.insert(QString("EphemeralStorage"), ::OpenAPI::toJsonValue(m_ephemeral_storage));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("ExecutionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_inference_accelerator_overrides.isSet()) {
        obj.insert(QString("InferenceAcceleratorOverrides"), ::OpenAPI::toJsonValue(m_inference_accelerator_overrides));
    }
    if (m_memory_isSet) {
        obj.insert(QString("Memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_task_role_arn_isSet) {
        obj.insert(QString("TaskRoleArn"), ::OpenAPI::toJsonValue(m_task_role_arn));
    }
    return obj;
}

QList OAIPipeTargetEcsTaskParameters_Overrides::getContainerOverrides() const {
    return m_container_overrides;
}
void OAIPipeTargetEcsTaskParameters_Overrides::setContainerOverrides(const QList &container_overrides) {
    m_container_overrides = container_overrides;
    m_container_overrides_isSet = true;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_container_overrides_Set() const{
    return m_container_overrides_isSet;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_container_overrides_Valid() const{
    return m_container_overrides_isValid;
}

QString OAIPipeTargetEcsTaskParameters_Overrides::getCpu() const {
    return m_cpu;
}
void OAIPipeTargetEcsTaskParameters_Overrides::setCpu(const QString &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_cpu_Valid() const{
    return m_cpu_isValid;
}

OAIEcsTaskOverride_EphemeralStorage OAIPipeTargetEcsTaskParameters_Overrides::getEphemeralStorage() const {
    return m_ephemeral_storage;
}
void OAIPipeTargetEcsTaskParameters_Overrides::setEphemeralStorage(const OAIEcsTaskOverride_EphemeralStorage &ephemeral_storage) {
    m_ephemeral_storage = ephemeral_storage;
    m_ephemeral_storage_isSet = true;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_ephemeral_storage_Set() const{
    return m_ephemeral_storage_isSet;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_ephemeral_storage_Valid() const{
    return m_ephemeral_storage_isValid;
}

QString OAIPipeTargetEcsTaskParameters_Overrides::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIPipeTargetEcsTaskParameters_Overrides::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

QList OAIPipeTargetEcsTaskParameters_Overrides::getInferenceAcceleratorOverrides() const {
    return m_inference_accelerator_overrides;
}
void OAIPipeTargetEcsTaskParameters_Overrides::setInferenceAcceleratorOverrides(const QList &inference_accelerator_overrides) {
    m_inference_accelerator_overrides = inference_accelerator_overrides;
    m_inference_accelerator_overrides_isSet = true;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_inference_accelerator_overrides_Set() const{
    return m_inference_accelerator_overrides_isSet;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_inference_accelerator_overrides_Valid() const{
    return m_inference_accelerator_overrides_isValid;
}

QString OAIPipeTargetEcsTaskParameters_Overrides::getMemory() const {
    return m_memory;
}
void OAIPipeTargetEcsTaskParameters_Overrides::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIPipeTargetEcsTaskParameters_Overrides::getTaskRoleArn() const {
    return m_task_role_arn;
}
void OAIPipeTargetEcsTaskParameters_Overrides::setTaskRoleArn(const QString &task_role_arn) {
    m_task_role_arn = task_role_arn;
    m_task_role_arn_isSet = true;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_task_role_arn_Set() const{
    return m_task_role_arn_isSet;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::is_task_role_arn_Valid() const{
    return m_task_role_arn_isValid;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeral_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_accelerator_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeTargetEcsTaskParameters_Overrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
