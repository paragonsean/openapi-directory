/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePipeSourceSelfManagedKafkaParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePipeSourceSelfManagedKafkaParameters::OAIUpdatePipeSourceSelfManagedKafkaParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePipeSourceSelfManagedKafkaParameters::OAIUpdatePipeSourceSelfManagedKafkaParameters() {
    this->initializeModel();
}

OAIUpdatePipeSourceSelfManagedKafkaParameters::~OAIUpdatePipeSourceSelfManagedKafkaParameters() {}

void OAIUpdatePipeSourceSelfManagedKafkaParameters::initializeModel() {

    m_batch_size_isSet = false;
    m_batch_size_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_maximum_batching_window_in_seconds_isSet = false;
    m_maximum_batching_window_in_seconds_isValid = false;

    m_server_root_ca_certificate_isSet = false;
    m_server_root_ca_certificate_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;
}

void OAIUpdatePipeSourceSelfManagedKafkaParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePipeSourceSelfManagedKafkaParameters::fromJsonObject(QJsonObject json) {

    m_batch_size_isValid = ::OpenAPI::fromJsonValue(m_batch_size, json[QString("BatchSize")]);
    m_batch_size_isSet = !json[QString("BatchSize")].isNull() && m_batch_size_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;

    m_maximum_batching_window_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_maximum_batching_window_in_seconds, json[QString("MaximumBatchingWindowInSeconds")]);
    m_maximum_batching_window_in_seconds_isSet = !json[QString("MaximumBatchingWindowInSeconds")].isNull() && m_maximum_batching_window_in_seconds_isValid;

    m_server_root_ca_certificate_isValid = ::OpenAPI::fromJsonValue(m_server_root_ca_certificate, json[QString("ServerRootCaCertificate")]);
    m_server_root_ca_certificate_isSet = !json[QString("ServerRootCaCertificate")].isNull() && m_server_root_ca_certificate_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("Vpc")]);
    m_vpc_isSet = !json[QString("Vpc")].isNull() && m_vpc_isValid;
}

QString OAIUpdatePipeSourceSelfManagedKafkaParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePipeSourceSelfManagedKafkaParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_size_isSet) {
        obj.insert(QString("BatchSize"), ::OpenAPI::toJsonValue(m_batch_size));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_maximum_batching_window_in_seconds_isSet) {
        obj.insert(QString("MaximumBatchingWindowInSeconds"), ::OpenAPI::toJsonValue(m_maximum_batching_window_in_seconds));
    }
    if (m_server_root_ca_certificate_isSet) {
        obj.insert(QString("ServerRootCaCertificate"), ::OpenAPI::toJsonValue(m_server_root_ca_certificate));
    }
    if (m_vpc.isSet()) {
        obj.insert(QString("Vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    return obj;
}

qint32 OAIUpdatePipeSourceSelfManagedKafkaParameters::getBatchSize() const {
    return m_batch_size;
}
void OAIUpdatePipeSourceSelfManagedKafkaParameters::setBatchSize(const qint32 &batch_size) {
    m_batch_size = batch_size;
    m_batch_size_isSet = true;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_batch_size_Set() const{
    return m_batch_size_isSet;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_batch_size_Valid() const{
    return m_batch_size_isValid;
}

OAIPipeSourceSelfManagedKafkaParameters_Credentials OAIUpdatePipeSourceSelfManagedKafkaParameters::getCredentials() const {
    return m_credentials;
}
void OAIUpdatePipeSourceSelfManagedKafkaParameters::setCredentials(const OAIPipeSourceSelfManagedKafkaParameters_Credentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_credentials_Valid() const{
    return m_credentials_isValid;
}

qint32 OAIUpdatePipeSourceSelfManagedKafkaParameters::getMaximumBatchingWindowInSeconds() const {
    return m_maximum_batching_window_in_seconds;
}
void OAIUpdatePipeSourceSelfManagedKafkaParameters::setMaximumBatchingWindowInSeconds(const qint32 &maximum_batching_window_in_seconds) {
    m_maximum_batching_window_in_seconds = maximum_batching_window_in_seconds;
    m_maximum_batching_window_in_seconds_isSet = true;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_maximum_batching_window_in_seconds_Set() const{
    return m_maximum_batching_window_in_seconds_isSet;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_maximum_batching_window_in_seconds_Valid() const{
    return m_maximum_batching_window_in_seconds_isValid;
}

QString OAIUpdatePipeSourceSelfManagedKafkaParameters::getServerRootCaCertificate() const {
    return m_server_root_ca_certificate;
}
void OAIUpdatePipeSourceSelfManagedKafkaParameters::setServerRootCaCertificate(const QString &server_root_ca_certificate) {
    m_server_root_ca_certificate = server_root_ca_certificate;
    m_server_root_ca_certificate_isSet = true;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_server_root_ca_certificate_Set() const{
    return m_server_root_ca_certificate_isSet;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_server_root_ca_certificate_Valid() const{
    return m_server_root_ca_certificate_isValid;
}

OAIPipeSourceSelfManagedKafkaParameters_Vpc OAIUpdatePipeSourceSelfManagedKafkaParameters::getVpc() const {
    return m_vpc;
}
void OAIUpdatePipeSourceSelfManagedKafkaParameters::setVpc(const OAIPipeSourceSelfManagedKafkaParameters_Vpc &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::is_vpc_Valid() const{
    return m_vpc_isValid;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_batching_window_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_root_ca_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePipeSourceSelfManagedKafkaParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
