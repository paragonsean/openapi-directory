/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcsContainerOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcsContainerOverride::OAIEcsContainerOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcsContainerOverride::OAIEcsContainerOverride() {
    this->initializeModel();
}

OAIEcsContainerOverride::~OAIEcsContainerOverride() {}

void OAIEcsContainerOverride::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_environment_files_isSet = false;
    m_environment_files_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_memory_reservation_isSet = false;
    m_memory_reservation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_requirements_isSet = false;
    m_resource_requirements_isValid = false;
}

void OAIEcsContainerOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcsContainerOverride::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("Command")]);
    m_command_isSet = !json[QString("Command")].isNull() && m_command_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("Cpu")]);
    m_cpu_isSet = !json[QString("Cpu")].isNull() && m_cpu_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_environment_files_isValid = ::OpenAPI::fromJsonValue(m_environment_files, json[QString("EnvironmentFiles")]);
    m_environment_files_isSet = !json[QString("EnvironmentFiles")].isNull() && m_environment_files_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("Memory")]);
    m_memory_isSet = !json[QString("Memory")].isNull() && m_memory_isValid;

    m_memory_reservation_isValid = ::OpenAPI::fromJsonValue(m_memory_reservation, json[QString("MemoryReservation")]);
    m_memory_reservation_isSet = !json[QString("MemoryReservation")].isNull() && m_memory_reservation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_resource_requirements_isValid = ::OpenAPI::fromJsonValue(m_resource_requirements, json[QString("ResourceRequirements")]);
    m_resource_requirements_isSet = !json[QString("ResourceRequirements")].isNull() && m_resource_requirements_isValid;
}

QString OAIEcsContainerOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcsContainerOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_command.isSet()) {
        obj.insert(QString("Command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("Cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_environment_files.isSet()) {
        obj.insert(QString("EnvironmentFiles"), ::OpenAPI::toJsonValue(m_environment_files));
    }
    if (m_memory_isSet) {
        obj.insert(QString("Memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_memory_reservation_isSet) {
        obj.insert(QString("MemoryReservation"), ::OpenAPI::toJsonValue(m_memory_reservation));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_requirements.isSet()) {
        obj.insert(QString("ResourceRequirements"), ::OpenAPI::toJsonValue(m_resource_requirements));
    }
    return obj;
}

QList OAIEcsContainerOverride::getCommand() const {
    return m_command;
}
void OAIEcsContainerOverride::setCommand(const QList &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIEcsContainerOverride::is_command_Set() const{
    return m_command_isSet;
}

bool OAIEcsContainerOverride::is_command_Valid() const{
    return m_command_isValid;
}

qint32 OAIEcsContainerOverride::getCpu() const {
    return m_cpu;
}
void OAIEcsContainerOverride::setCpu(const qint32 &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIEcsContainerOverride::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIEcsContainerOverride::is_cpu_Valid() const{
    return m_cpu_isValid;
}

QList OAIEcsContainerOverride::getEnvironment() const {
    return m_environment;
}
void OAIEcsContainerOverride::setEnvironment(const QList &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIEcsContainerOverride::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIEcsContainerOverride::is_environment_Valid() const{
    return m_environment_isValid;
}

QList OAIEcsContainerOverride::getEnvironmentFiles() const {
    return m_environment_files;
}
void OAIEcsContainerOverride::setEnvironmentFiles(const QList &environment_files) {
    m_environment_files = environment_files;
    m_environment_files_isSet = true;
}

bool OAIEcsContainerOverride::is_environment_files_Set() const{
    return m_environment_files_isSet;
}

bool OAIEcsContainerOverride::is_environment_files_Valid() const{
    return m_environment_files_isValid;
}

qint32 OAIEcsContainerOverride::getMemory() const {
    return m_memory;
}
void OAIEcsContainerOverride::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIEcsContainerOverride::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIEcsContainerOverride::is_memory_Valid() const{
    return m_memory_isValid;
}

qint32 OAIEcsContainerOverride::getMemoryReservation() const {
    return m_memory_reservation;
}
void OAIEcsContainerOverride::setMemoryReservation(const qint32 &memory_reservation) {
    m_memory_reservation = memory_reservation;
    m_memory_reservation_isSet = true;
}

bool OAIEcsContainerOverride::is_memory_reservation_Set() const{
    return m_memory_reservation_isSet;
}

bool OAIEcsContainerOverride::is_memory_reservation_Valid() const{
    return m_memory_reservation_isValid;
}

QString OAIEcsContainerOverride::getName() const {
    return m_name;
}
void OAIEcsContainerOverride::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEcsContainerOverride::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEcsContainerOverride::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIEcsContainerOverride::getResourceRequirements() const {
    return m_resource_requirements;
}
void OAIEcsContainerOverride::setResourceRequirements(const QList &resource_requirements) {
    m_resource_requirements = resource_requirements;
    m_resource_requirements_isSet = true;
}

bool OAIEcsContainerOverride::is_resource_requirements_Set() const{
    return m_resource_requirements_isSet;
}

bool OAIEcsContainerOverride::is_resource_requirements_Valid() const{
    return m_resource_requirements_isValid;
}

bool OAIEcsContainerOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_files.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_reservation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcsContainerOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
