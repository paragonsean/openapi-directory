/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePipeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePipeResponse::OAIDescribePipeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePipeResponse::OAIDescribePipeResponse() {
    this->initializeModel();
}

OAIDescribePipeResponse::~OAIDescribePipeResponse() {}

void OAIDescribePipeResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_current_state_isSet = false;
    m_current_state_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_enrichment_isSet = false;
    m_enrichment_isValid = false;

    m_enrichment_parameters_isSet = false;
    m_enrichment_parameters_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_parameters_isSet = false;
    m_source_parameters_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_target_parameters_isSet = false;
    m_target_parameters_isValid = false;
}

void OAIDescribePipeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePipeResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_current_state_isValid = ::OpenAPI::fromJsonValue(m_current_state, json[QString("CurrentState")]);
    m_current_state_isSet = !json[QString("CurrentState")].isNull() && m_current_state_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("DesiredState")]);
    m_desired_state_isSet = !json[QString("DesiredState")].isNull() && m_desired_state_isValid;

    m_enrichment_isValid = ::OpenAPI::fromJsonValue(m_enrichment, json[QString("Enrichment")]);
    m_enrichment_isSet = !json[QString("Enrichment")].isNull() && m_enrichment_isValid;

    m_enrichment_parameters_isValid = ::OpenAPI::fromJsonValue(m_enrichment_parameters, json[QString("EnrichmentParameters")]);
    m_enrichment_parameters_isSet = !json[QString("EnrichmentParameters")].isNull() && m_enrichment_parameters_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_source_parameters_isValid = ::OpenAPI::fromJsonValue(m_source_parameters, json[QString("SourceParameters")]);
    m_source_parameters_isSet = !json[QString("SourceParameters")].isNull() && m_source_parameters_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("StateReason")]);
    m_state_reason_isSet = !json[QString("StateReason")].isNull() && m_state_reason_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_target_parameters_isValid = ::OpenAPI::fromJsonValue(m_target_parameters, json[QString("TargetParameters")]);
    m_target_parameters_isSet = !json[QString("TargetParameters")].isNull() && m_target_parameters_isValid;
}

QString OAIDescribePipeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePipeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_current_state.isSet()) {
        obj.insert(QString("CurrentState"), ::OpenAPI::toJsonValue(m_current_state));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_desired_state.isSet()) {
        obj.insert(QString("DesiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_enrichment_isSet) {
        obj.insert(QString("Enrichment"), ::OpenAPI::toJsonValue(m_enrichment));
    }
    if (m_enrichment_parameters.isSet()) {
        obj.insert(QString("EnrichmentParameters"), ::OpenAPI::toJsonValue(m_enrichment_parameters));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_parameters.isSet()) {
        obj.insert(QString("SourceParameters"), ::OpenAPI::toJsonValue(m_source_parameters));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("StateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_target_isSet) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_target_parameters.isSet()) {
        obj.insert(QString("TargetParameters"), ::OpenAPI::toJsonValue(m_target_parameters));
    }
    return obj;
}

QString OAIDescribePipeResponse::getArn() const {
    return m_arn;
}
void OAIDescribePipeResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribePipeResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribePipeResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIDescribePipeResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribePipeResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribePipeResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribePipeResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIPipeState OAIDescribePipeResponse::getCurrentState() const {
    return m_current_state;
}
void OAIDescribePipeResponse::setCurrentState(const OAIPipeState &current_state) {
    m_current_state = current_state;
    m_current_state_isSet = true;
}

bool OAIDescribePipeResponse::is_current_state_Set() const{
    return m_current_state_isSet;
}

bool OAIDescribePipeResponse::is_current_state_Valid() const{
    return m_current_state_isValid;
}

QString OAIDescribePipeResponse::getDescription() const {
    return m_description;
}
void OAIDescribePipeResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribePipeResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribePipeResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIRequestedPipeStateDescribeResponse OAIDescribePipeResponse::getDesiredState() const {
    return m_desired_state;
}
void OAIDescribePipeResponse::setDesiredState(const OAIRequestedPipeStateDescribeResponse &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAIDescribePipeResponse::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAIDescribePipeResponse::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

QString OAIDescribePipeResponse::getEnrichment() const {
    return m_enrichment;
}
void OAIDescribePipeResponse::setEnrichment(const QString &enrichment) {
    m_enrichment = enrichment;
    m_enrichment_isSet = true;
}

bool OAIDescribePipeResponse::is_enrichment_Set() const{
    return m_enrichment_isSet;
}

bool OAIDescribePipeResponse::is_enrichment_Valid() const{
    return m_enrichment_isValid;
}

OAIDescribePipeResponse_EnrichmentParameters OAIDescribePipeResponse::getEnrichmentParameters() const {
    return m_enrichment_parameters;
}
void OAIDescribePipeResponse::setEnrichmentParameters(const OAIDescribePipeResponse_EnrichmentParameters &enrichment_parameters) {
    m_enrichment_parameters = enrichment_parameters;
    m_enrichment_parameters_isSet = true;
}

bool OAIDescribePipeResponse::is_enrichment_parameters_Set() const{
    return m_enrichment_parameters_isSet;
}

bool OAIDescribePipeResponse::is_enrichment_parameters_Valid() const{
    return m_enrichment_parameters_isValid;
}

QDateTime OAIDescribePipeResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribePipeResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribePipeResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribePipeResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIDescribePipeResponse::getName() const {
    return m_name;
}
void OAIDescribePipeResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribePipeResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribePipeResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribePipeResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribePipeResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribePipeResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribePipeResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIDescribePipeResponse::getSource() const {
    return m_source;
}
void OAIDescribePipeResponse::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDescribePipeResponse::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDescribePipeResponse::is_source_Valid() const{
    return m_source_isValid;
}

OAIDescribePipeResponse_SourceParameters OAIDescribePipeResponse::getSourceParameters() const {
    return m_source_parameters;
}
void OAIDescribePipeResponse::setSourceParameters(const OAIDescribePipeResponse_SourceParameters &source_parameters) {
    m_source_parameters = source_parameters;
    m_source_parameters_isSet = true;
}

bool OAIDescribePipeResponse::is_source_parameters_Set() const{
    return m_source_parameters_isSet;
}

bool OAIDescribePipeResponse::is_source_parameters_Valid() const{
    return m_source_parameters_isValid;
}

QString OAIDescribePipeResponse::getStateReason() const {
    return m_state_reason;
}
void OAIDescribePipeResponse::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAIDescribePipeResponse::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAIDescribePipeResponse::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

QMap OAIDescribePipeResponse::getTags() const {
    return m_tags;
}
void OAIDescribePipeResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribePipeResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribePipeResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDescribePipeResponse::getTarget() const {
    return m_target;
}
void OAIDescribePipeResponse::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIDescribePipeResponse::is_target_Set() const{
    return m_target_isSet;
}

bool OAIDescribePipeResponse::is_target_Valid() const{
    return m_target_isValid;
}

OAIDescribePipeResponse_TargetParameters OAIDescribePipeResponse::getTargetParameters() const {
    return m_target_parameters;
}
void OAIDescribePipeResponse::setTargetParameters(const OAIDescribePipeResponse_TargetParameters &target_parameters) {
    m_target_parameters = target_parameters;
    m_target_parameters_isSet = true;
}

bool OAIDescribePipeResponse::is_target_parameters_Set() const{
    return m_target_parameters_isSet;
}

bool OAIDescribePipeResponse::is_target_parameters_Valid() const{
    return m_target_parameters_isValid;
}

bool OAIDescribePipeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrichment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrichment_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePipeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
