/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPipeSourceKinesisStreamParameters.h
 *
 * The parameters for using a Kinesis stream as a source.
 */

#ifndef OAIPipeSourceKinesisStreamParameters_H
#define OAIPipeSourceKinesisStreamParameters_H

#include <QJsonObject>

#include "OAIKinesisStreamStartPosition.h"
#include "OAIOnPartialBatchItemFailureStreams.h"
#include "OAIPipeSourceDynamoDBStreamParameters_DeadLetterConfig.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPipeSourceDynamoDBStreamParameters_DeadLetterConfig;

class OAIPipeSourceKinesisStreamParameters : public OAIObject {
public:
    OAIPipeSourceKinesisStreamParameters();
    OAIPipeSourceKinesisStreamParameters(QString json);
    ~OAIPipeSourceKinesisStreamParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBatchSize() const;
    void setBatchSize(const qint32 &batch_size);
    bool is_batch_size_Set() const;
    bool is_batch_size_Valid() const;

    OAIPipeSourceDynamoDBStreamParameters_DeadLetterConfig getDeadLetterConfig() const;
    void setDeadLetterConfig(const OAIPipeSourceDynamoDBStreamParameters_DeadLetterConfig &dead_letter_config);
    bool is_dead_letter_config_Set() const;
    bool is_dead_letter_config_Valid() const;

    qint32 getMaximumBatchingWindowInSeconds() const;
    void setMaximumBatchingWindowInSeconds(const qint32 &maximum_batching_window_in_seconds);
    bool is_maximum_batching_window_in_seconds_Set() const;
    bool is_maximum_batching_window_in_seconds_Valid() const;

    qint32 getMaximumRecordAgeInSeconds() const;
    void setMaximumRecordAgeInSeconds(const qint32 &maximum_record_age_in_seconds);
    bool is_maximum_record_age_in_seconds_Set() const;
    bool is_maximum_record_age_in_seconds_Valid() const;

    qint32 getMaximumRetryAttempts() const;
    void setMaximumRetryAttempts(const qint32 &maximum_retry_attempts);
    bool is_maximum_retry_attempts_Set() const;
    bool is_maximum_retry_attempts_Valid() const;

    OAIOnPartialBatchItemFailureStreams getOnPartialBatchItemFailure() const;
    void setOnPartialBatchItemFailure(const OAIOnPartialBatchItemFailureStreams &on_partial_batch_item_failure);
    bool is_on_partial_batch_item_failure_Set() const;
    bool is_on_partial_batch_item_failure_Valid() const;

    qint32 getParallelizationFactor() const;
    void setParallelizationFactor(const qint32 &parallelization_factor);
    bool is_parallelization_factor_Set() const;
    bool is_parallelization_factor_Valid() const;

    OAIKinesisStreamStartPosition getStartingPosition() const;
    void setStartingPosition(const OAIKinesisStreamStartPosition &starting_position);
    bool is_starting_position_Set() const;
    bool is_starting_position_Valid() const;

    QDateTime getStartingPositionTimestamp() const;
    void setStartingPositionTimestamp(const QDateTime &starting_position_timestamp);
    bool is_starting_position_timestamp_Set() const;
    bool is_starting_position_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_batch_size;
    bool m_batch_size_isSet;
    bool m_batch_size_isValid;

    OAIPipeSourceDynamoDBStreamParameters_DeadLetterConfig m_dead_letter_config;
    bool m_dead_letter_config_isSet;
    bool m_dead_letter_config_isValid;

    qint32 m_maximum_batching_window_in_seconds;
    bool m_maximum_batching_window_in_seconds_isSet;
    bool m_maximum_batching_window_in_seconds_isValid;

    qint32 m_maximum_record_age_in_seconds;
    bool m_maximum_record_age_in_seconds_isSet;
    bool m_maximum_record_age_in_seconds_isValid;

    qint32 m_maximum_retry_attempts;
    bool m_maximum_retry_attempts_isSet;
    bool m_maximum_retry_attempts_isValid;

    OAIOnPartialBatchItemFailureStreams m_on_partial_batch_item_failure;
    bool m_on_partial_batch_item_failure_isSet;
    bool m_on_partial_batch_item_failure_isValid;

    qint32 m_parallelization_factor;
    bool m_parallelization_factor_isSet;
    bool m_parallelization_factor_isValid;

    OAIKinesisStreamStartPosition m_starting_position;
    bool m_starting_position_isSet;
    bool m_starting_position_isValid;

    QDateTime m_starting_position_timestamp;
    bool m_starting_position_timestamp_isSet;
    bool m_starting_position_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPipeSourceKinesisStreamParameters)

#endif // OAIPipeSourceKinesisStreamParameters_H
