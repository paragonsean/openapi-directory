/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlacementStrategyType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlacementStrategyType::OAIPlacementStrategyType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlacementStrategyType::OAIPlacementStrategyType() {
    this->initializeModel();
}

OAIPlacementStrategyType::~OAIPlacementStrategyType() {}

void OAIPlacementStrategyType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlacementStrategyType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlacementStrategyType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("random", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlacementStrategyType::RANDOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("spread", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlacementStrategyType::SPREAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("binpack", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlacementStrategyType::BINPACK;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlacementStrategyType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlacementStrategyType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlacementStrategyType::RANDOM:
            val = "random";
            break;
        case eOAIPlacementStrategyType::SPREAD:
            val = "spread";
            break;
        case eOAIPlacementStrategyType::BINPACK:
            val = "binpack";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlacementStrategyType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlacementStrategyType::eOAIPlacementStrategyType OAIPlacementStrategyType::getValue() const {
    return m_value;
}

void OAIPlacementStrategyType::setValue(const OAIPlacementStrategyType::eOAIPlacementStrategyType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlacementStrategyType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlacementStrategyType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
