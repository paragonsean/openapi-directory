/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEcsContainerOverride.h
 *
 * The overrides that are sent to a container. An empty container override can be passed in. An example of an empty container override is &lt;code&gt;{\&quot;containerOverrides\&quot;: [ ] }&lt;/code&gt;. If a non-empty container override is specified, the &lt;code&gt;name&lt;/code&gt; parameter must be included.
 */

#ifndef OAIEcsContainerOverride_H
#define OAIEcsContainerOverride_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEcsContainerOverride : public OAIObject {
public:
    OAIEcsContainerOverride();
    OAIEcsContainerOverride(QString json);
    ~OAIEcsContainerOverride() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCommand() const;
    void setCommand(const QList &command);
    bool is_command_Set() const;
    bool is_command_Valid() const;

    qint32 getCpu() const;
    void setCpu(const qint32 &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    QList getEnvironment() const;
    void setEnvironment(const QList &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    QList getEnvironmentFiles() const;
    void setEnvironmentFiles(const QList &environment_files);
    bool is_environment_files_Set() const;
    bool is_environment_files_Valid() const;

    qint32 getMemory() const;
    void setMemory(const qint32 &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    qint32 getMemoryReservation() const;
    void setMemoryReservation(const qint32 &memory_reservation);
    bool is_memory_reservation_Set() const;
    bool is_memory_reservation_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getResourceRequirements() const;
    void setResourceRequirements(const QList &resource_requirements);
    bool is_resource_requirements_Set() const;
    bool is_resource_requirements_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_command;
    bool m_command_isSet;
    bool m_command_isValid;

    qint32 m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    QList m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    QList m_environment_files;
    bool m_environment_files_isSet;
    bool m_environment_files_isValid;

    qint32 m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    qint32 m_memory_reservation;
    bool m_memory_reservation_isSet;
    bool m_memory_reservation_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_resource_requirements;
    bool m_resource_requirements_isSet;
    bool m_resource_requirements_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEcsContainerOverride)

#endif // OAIEcsContainerOverride_H
