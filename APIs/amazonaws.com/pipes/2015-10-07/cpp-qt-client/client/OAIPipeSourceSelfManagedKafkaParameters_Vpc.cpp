/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeSourceSelfManagedKafkaParameters_Vpc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeSourceSelfManagedKafkaParameters_Vpc::OAIPipeSourceSelfManagedKafkaParameters_Vpc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeSourceSelfManagedKafkaParameters_Vpc::OAIPipeSourceSelfManagedKafkaParameters_Vpc() {
    this->initializeModel();
}

OAIPipeSourceSelfManagedKafkaParameters_Vpc::~OAIPipeSourceSelfManagedKafkaParameters_Vpc() {}

void OAIPipeSourceSelfManagedKafkaParameters_Vpc::initializeModel() {

    m_security_group_isSet = false;
    m_security_group_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;
}

void OAIPipeSourceSelfManagedKafkaParameters_Vpc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeSourceSelfManagedKafkaParameters_Vpc::fromJsonObject(QJsonObject json) {

    m_security_group_isValid = ::OpenAPI::fromJsonValue(m_security_group, json[QString("SecurityGroup")]);
    m_security_group_isSet = !json[QString("SecurityGroup")].isNull() && m_security_group_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("Subnets")]);
    m_subnets_isSet = !json[QString("Subnets")].isNull() && m_subnets_isValid;
}

QString OAIPipeSourceSelfManagedKafkaParameters_Vpc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeSourceSelfManagedKafkaParameters_Vpc::asJsonObject() const {
    QJsonObject obj;
    if (m_security_group.isSet()) {
        obj.insert(QString("SecurityGroup"), ::OpenAPI::toJsonValue(m_security_group));
    }
    if (m_subnets.isSet()) {
        obj.insert(QString("Subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    return obj;
}

QList OAIPipeSourceSelfManagedKafkaParameters_Vpc::getSecurityGroup() const {
    return m_security_group;
}
void OAIPipeSourceSelfManagedKafkaParameters_Vpc::setSecurityGroup(const QList &security_group) {
    m_security_group = security_group;
    m_security_group_isSet = true;
}

bool OAIPipeSourceSelfManagedKafkaParameters_Vpc::is_security_group_Set() const{
    return m_security_group_isSet;
}

bool OAIPipeSourceSelfManagedKafkaParameters_Vpc::is_security_group_Valid() const{
    return m_security_group_isValid;
}

QList OAIPipeSourceSelfManagedKafkaParameters_Vpc::getSubnets() const {
    return m_subnets;
}
void OAIPipeSourceSelfManagedKafkaParameters_Vpc::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIPipeSourceSelfManagedKafkaParameters_Vpc::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIPipeSourceSelfManagedKafkaParameters_Vpc::is_subnets_Valid() const{
    return m_subnets_isValid;
}

bool OAIPipeSourceSelfManagedKafkaParameters_Vpc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_security_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeSourceSelfManagedKafkaParameters_Vpc::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
