/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdatePipe_request_SourceParameters_SelfManagedKafkaParameters.h
 *
 * 
 */

#ifndef OAIUpdatePipe_request_SourceParameters_SelfManagedKafkaParameters_H
#define OAIUpdatePipe_request_SourceParameters_SelfManagedKafkaParameters_H

#include <QJsonObject>

#include "OAIPipeSourceSelfManagedKafkaParameters_Credentials.h"
#include "OAIPipeSourceSelfManagedKafkaParameters_Vpc.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPipeSourceSelfManagedKafkaParameters_Credentials;
class OAIPipeSourceSelfManagedKafkaParameters_Vpc;

class OAIUpdatePipe_request_SourceParameters_SelfManagedKafkaParameters : public OAIObject {
public:
    OAIUpdatePipe_request_SourceParameters_SelfManagedKafkaParameters();
    OAIUpdatePipe_request_SourceParameters_SelfManagedKafkaParameters(QString json);
    ~OAIUpdatePipe_request_SourceParameters_SelfManagedKafkaParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBatchSize() const;
    void setBatchSize(const qint32 &batch_size);
    bool is_batch_size_Set() const;
    bool is_batch_size_Valid() const;

    OAIPipeSourceSelfManagedKafkaParameters_Credentials getCredentials() const;
    void setCredentials(const OAIPipeSourceSelfManagedKafkaParameters_Credentials &credentials);
    bool is_credentials_Set() const;
    bool is_credentials_Valid() const;

    qint32 getMaximumBatchingWindowInSeconds() const;
    void setMaximumBatchingWindowInSeconds(const qint32 &maximum_batching_window_in_seconds);
    bool is_maximum_batching_window_in_seconds_Set() const;
    bool is_maximum_batching_window_in_seconds_Valid() const;

    QString getServerRootCaCertificate() const;
    void setServerRootCaCertificate(const QString &server_root_ca_certificate);
    bool is_server_root_ca_certificate_Set() const;
    bool is_server_root_ca_certificate_Valid() const;

    OAIPipeSourceSelfManagedKafkaParameters_Vpc getVpc() const;
    void setVpc(const OAIPipeSourceSelfManagedKafkaParameters_Vpc &vpc);
    bool is_vpc_Set() const;
    bool is_vpc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_batch_size;
    bool m_batch_size_isSet;
    bool m_batch_size_isValid;

    OAIPipeSourceSelfManagedKafkaParameters_Credentials m_credentials;
    bool m_credentials_isSet;
    bool m_credentials_isValid;

    qint32 m_maximum_batching_window_in_seconds;
    bool m_maximum_batching_window_in_seconds_isSet;
    bool m_maximum_batching_window_in_seconds_isValid;

    QString m_server_root_ca_certificate;
    bool m_server_root_ca_certificate_isSet;
    bool m_server_root_ca_certificate_isValid;

    OAIPipeSourceSelfManagedKafkaParameters_Vpc m_vpc;
    bool m_vpc_isSet;
    bool m_vpc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdatePipe_request_SourceParameters_SelfManagedKafkaParameters)

#endif // OAIUpdatePipe_request_SourceParameters_SelfManagedKafkaParameters_H
