/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPipeTargetEcsTaskParameters.h
 *
 * The parameters for using an Amazon ECS task as a target.
 */

#ifndef OAIPipeTargetEcsTaskParameters_H
#define OAIPipeTargetEcsTaskParameters_H

#include <QJsonObject>

#include "OAILaunchType.h"
#include "OAIPipeTargetEcsTaskParameters_NetworkConfiguration.h"
#include "OAIPipeTargetEcsTaskParameters_Overrides.h"
#include "OAIPropagateTags.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPipeTargetEcsTaskParameters_NetworkConfiguration;
class OAIPipeTargetEcsTaskParameters_Overrides;

class OAIPipeTargetEcsTaskParameters : public OAIObject {
public:
    OAIPipeTargetEcsTaskParameters();
    OAIPipeTargetEcsTaskParameters(QString json);
    ~OAIPipeTargetEcsTaskParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCapacityProviderStrategy() const;
    void setCapacityProviderStrategy(const QList &capacity_provider_strategy);
    bool is_capacity_provider_strategy_Set() const;
    bool is_capacity_provider_strategy_Valid() const;

    bool getEnableEcsManagedTags() const;
    void setEnableEcsManagedTags(const bool &enable_ecs_managed_tags);
    bool is_enable_ecs_managed_tags_Set() const;
    bool is_enable_ecs_managed_tags_Valid() const;

    bool getEnableExecuteCommand() const;
    void setEnableExecuteCommand(const bool &enable_execute_command);
    bool is_enable_execute_command_Set() const;
    bool is_enable_execute_command_Valid() const;

    QString getGroup() const;
    void setGroup(const QString &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    OAILaunchType getLaunchType() const;
    void setLaunchType(const OAILaunchType &launch_type);
    bool is_launch_type_Set() const;
    bool is_launch_type_Valid() const;

    OAIPipeTargetEcsTaskParameters_NetworkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAIPipeTargetEcsTaskParameters_NetworkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    OAIPipeTargetEcsTaskParameters_Overrides getOverrides() const;
    void setOverrides(const OAIPipeTargetEcsTaskParameters_Overrides &overrides);
    bool is_overrides_Set() const;
    bool is_overrides_Valid() const;

    QList getPlacementConstraints() const;
    void setPlacementConstraints(const QList &placement_constraints);
    bool is_placement_constraints_Set() const;
    bool is_placement_constraints_Valid() const;

    QList getPlacementStrategy() const;
    void setPlacementStrategy(const QList &placement_strategy);
    bool is_placement_strategy_Set() const;
    bool is_placement_strategy_Valid() const;

    QString getPlatformVersion() const;
    void setPlatformVersion(const QString &platform_version);
    bool is_platform_version_Set() const;
    bool is_platform_version_Valid() const;

    OAIPropagateTags getPropagateTags() const;
    void setPropagateTags(const OAIPropagateTags &propagate_tags);
    bool is_propagate_tags_Set() const;
    bool is_propagate_tags_Valid() const;

    QString getReferenceId() const;
    void setReferenceId(const QString &reference_id);
    bool is_reference_id_Set() const;
    bool is_reference_id_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    qint32 getTaskCount() const;
    void setTaskCount(const qint32 &task_count);
    bool is_task_count_Set() const;
    bool is_task_count_Valid() const;

    QString getTaskDefinitionArn() const;
    void setTaskDefinitionArn(const QString &task_definition_arn);
    bool is_task_definition_arn_Set() const;
    bool is_task_definition_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_capacity_provider_strategy;
    bool m_capacity_provider_strategy_isSet;
    bool m_capacity_provider_strategy_isValid;

    bool m_enable_ecs_managed_tags;
    bool m_enable_ecs_managed_tags_isSet;
    bool m_enable_ecs_managed_tags_isValid;

    bool m_enable_execute_command;
    bool m_enable_execute_command_isSet;
    bool m_enable_execute_command_isValid;

    QString m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    OAILaunchType m_launch_type;
    bool m_launch_type_isSet;
    bool m_launch_type_isValid;

    OAIPipeTargetEcsTaskParameters_NetworkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    OAIPipeTargetEcsTaskParameters_Overrides m_overrides;
    bool m_overrides_isSet;
    bool m_overrides_isValid;

    QList m_placement_constraints;
    bool m_placement_constraints_isSet;
    bool m_placement_constraints_isValid;

    QList m_placement_strategy;
    bool m_placement_strategy_isSet;
    bool m_placement_strategy_isValid;

    QString m_platform_version;
    bool m_platform_version_isSet;
    bool m_platform_version_isValid;

    OAIPropagateTags m_propagate_tags;
    bool m_propagate_tags_isSet;
    bool m_propagate_tags_isValid;

    QString m_reference_id;
    bool m_reference_id_isSet;
    bool m_reference_id_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    qint32 m_task_count;
    bool m_task_count_isSet;
    bool m_task_count_isValid;

    QString m_task_definition_arn;
    bool m_task_definition_arn_isSet;
    bool m_task_definition_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPipeTargetEcsTaskParameters)

#endif // OAIPipeTargetEcsTaskParameters_H
