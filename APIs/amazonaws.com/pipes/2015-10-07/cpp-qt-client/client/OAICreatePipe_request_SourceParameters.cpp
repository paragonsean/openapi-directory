/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePipe_request_SourceParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePipe_request_SourceParameters::OAICreatePipe_request_SourceParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePipe_request_SourceParameters::OAICreatePipe_request_SourceParameters() {
    this->initializeModel();
}

OAICreatePipe_request_SourceParameters::~OAICreatePipe_request_SourceParameters() {}

void OAICreatePipe_request_SourceParameters::initializeModel() {

    m_active_mq_broker_parameters_isSet = false;
    m_active_mq_broker_parameters_isValid = false;

    m_dynamo_db_stream_parameters_isSet = false;
    m_dynamo_db_stream_parameters_isValid = false;

    m_filter_criteria_isSet = false;
    m_filter_criteria_isValid = false;

    m_kinesis_stream_parameters_isSet = false;
    m_kinesis_stream_parameters_isValid = false;

    m_managed_streaming_kafka_parameters_isSet = false;
    m_managed_streaming_kafka_parameters_isValid = false;

    m_rabbit_mq_broker_parameters_isSet = false;
    m_rabbit_mq_broker_parameters_isValid = false;

    m_self_managed_kafka_parameters_isSet = false;
    m_self_managed_kafka_parameters_isValid = false;

    m_sqs_queue_parameters_isSet = false;
    m_sqs_queue_parameters_isValid = false;
}

void OAICreatePipe_request_SourceParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePipe_request_SourceParameters::fromJsonObject(QJsonObject json) {

    m_active_mq_broker_parameters_isValid = ::OpenAPI::fromJsonValue(m_active_mq_broker_parameters, json[QString("ActiveMQBrokerParameters")]);
    m_active_mq_broker_parameters_isSet = !json[QString("ActiveMQBrokerParameters")].isNull() && m_active_mq_broker_parameters_isValid;

    m_dynamo_db_stream_parameters_isValid = ::OpenAPI::fromJsonValue(m_dynamo_db_stream_parameters, json[QString("DynamoDBStreamParameters")]);
    m_dynamo_db_stream_parameters_isSet = !json[QString("DynamoDBStreamParameters")].isNull() && m_dynamo_db_stream_parameters_isValid;

    m_filter_criteria_isValid = ::OpenAPI::fromJsonValue(m_filter_criteria, json[QString("FilterCriteria")]);
    m_filter_criteria_isSet = !json[QString("FilterCriteria")].isNull() && m_filter_criteria_isValid;

    m_kinesis_stream_parameters_isValid = ::OpenAPI::fromJsonValue(m_kinesis_stream_parameters, json[QString("KinesisStreamParameters")]);
    m_kinesis_stream_parameters_isSet = !json[QString("KinesisStreamParameters")].isNull() && m_kinesis_stream_parameters_isValid;

    m_managed_streaming_kafka_parameters_isValid = ::OpenAPI::fromJsonValue(m_managed_streaming_kafka_parameters, json[QString("ManagedStreamingKafkaParameters")]);
    m_managed_streaming_kafka_parameters_isSet = !json[QString("ManagedStreamingKafkaParameters")].isNull() && m_managed_streaming_kafka_parameters_isValid;

    m_rabbit_mq_broker_parameters_isValid = ::OpenAPI::fromJsonValue(m_rabbit_mq_broker_parameters, json[QString("RabbitMQBrokerParameters")]);
    m_rabbit_mq_broker_parameters_isSet = !json[QString("RabbitMQBrokerParameters")].isNull() && m_rabbit_mq_broker_parameters_isValid;

    m_self_managed_kafka_parameters_isValid = ::OpenAPI::fromJsonValue(m_self_managed_kafka_parameters, json[QString("SelfManagedKafkaParameters")]);
    m_self_managed_kafka_parameters_isSet = !json[QString("SelfManagedKafkaParameters")].isNull() && m_self_managed_kafka_parameters_isValid;

    m_sqs_queue_parameters_isValid = ::OpenAPI::fromJsonValue(m_sqs_queue_parameters, json[QString("SqsQueueParameters")]);
    m_sqs_queue_parameters_isSet = !json[QString("SqsQueueParameters")].isNull() && m_sqs_queue_parameters_isValid;
}

QString OAICreatePipe_request_SourceParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePipe_request_SourceParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_active_mq_broker_parameters.isSet()) {
        obj.insert(QString("ActiveMQBrokerParameters"), ::OpenAPI::toJsonValue(m_active_mq_broker_parameters));
    }
    if (m_dynamo_db_stream_parameters.isSet()) {
        obj.insert(QString("DynamoDBStreamParameters"), ::OpenAPI::toJsonValue(m_dynamo_db_stream_parameters));
    }
    if (m_filter_criteria.isSet()) {
        obj.insert(QString("FilterCriteria"), ::OpenAPI::toJsonValue(m_filter_criteria));
    }
    if (m_kinesis_stream_parameters.isSet()) {
        obj.insert(QString("KinesisStreamParameters"), ::OpenAPI::toJsonValue(m_kinesis_stream_parameters));
    }
    if (m_managed_streaming_kafka_parameters.isSet()) {
        obj.insert(QString("ManagedStreamingKafkaParameters"), ::OpenAPI::toJsonValue(m_managed_streaming_kafka_parameters));
    }
    if (m_rabbit_mq_broker_parameters.isSet()) {
        obj.insert(QString("RabbitMQBrokerParameters"), ::OpenAPI::toJsonValue(m_rabbit_mq_broker_parameters));
    }
    if (m_self_managed_kafka_parameters.isSet()) {
        obj.insert(QString("SelfManagedKafkaParameters"), ::OpenAPI::toJsonValue(m_self_managed_kafka_parameters));
    }
    if (m_sqs_queue_parameters.isSet()) {
        obj.insert(QString("SqsQueueParameters"), ::OpenAPI::toJsonValue(m_sqs_queue_parameters));
    }
    return obj;
}

OAICreatePipe_request_SourceParameters_ActiveMQBrokerParameters OAICreatePipe_request_SourceParameters::getActiveMqBrokerParameters() const {
    return m_active_mq_broker_parameters;
}
void OAICreatePipe_request_SourceParameters::setActiveMqBrokerParameters(const OAICreatePipe_request_SourceParameters_ActiveMQBrokerParameters &active_mq_broker_parameters) {
    m_active_mq_broker_parameters = active_mq_broker_parameters;
    m_active_mq_broker_parameters_isSet = true;
}

bool OAICreatePipe_request_SourceParameters::is_active_mq_broker_parameters_Set() const{
    return m_active_mq_broker_parameters_isSet;
}

bool OAICreatePipe_request_SourceParameters::is_active_mq_broker_parameters_Valid() const{
    return m_active_mq_broker_parameters_isValid;
}

OAICreatePipe_request_SourceParameters_DynamoDBStreamParameters OAICreatePipe_request_SourceParameters::getDynamoDbStreamParameters() const {
    return m_dynamo_db_stream_parameters;
}
void OAICreatePipe_request_SourceParameters::setDynamoDbStreamParameters(const OAICreatePipe_request_SourceParameters_DynamoDBStreamParameters &dynamo_db_stream_parameters) {
    m_dynamo_db_stream_parameters = dynamo_db_stream_parameters;
    m_dynamo_db_stream_parameters_isSet = true;
}

bool OAICreatePipe_request_SourceParameters::is_dynamo_db_stream_parameters_Set() const{
    return m_dynamo_db_stream_parameters_isSet;
}

bool OAICreatePipe_request_SourceParameters::is_dynamo_db_stream_parameters_Valid() const{
    return m_dynamo_db_stream_parameters_isValid;
}

OAIUpdatePipe_request_SourceParameters_FilterCriteria OAICreatePipe_request_SourceParameters::getFilterCriteria() const {
    return m_filter_criteria;
}
void OAICreatePipe_request_SourceParameters::setFilterCriteria(const OAIUpdatePipe_request_SourceParameters_FilterCriteria &filter_criteria) {
    m_filter_criteria = filter_criteria;
    m_filter_criteria_isSet = true;
}

bool OAICreatePipe_request_SourceParameters::is_filter_criteria_Set() const{
    return m_filter_criteria_isSet;
}

bool OAICreatePipe_request_SourceParameters::is_filter_criteria_Valid() const{
    return m_filter_criteria_isValid;
}

OAICreatePipe_request_SourceParameters_KinesisStreamParameters OAICreatePipe_request_SourceParameters::getKinesisStreamParameters() const {
    return m_kinesis_stream_parameters;
}
void OAICreatePipe_request_SourceParameters::setKinesisStreamParameters(const OAICreatePipe_request_SourceParameters_KinesisStreamParameters &kinesis_stream_parameters) {
    m_kinesis_stream_parameters = kinesis_stream_parameters;
    m_kinesis_stream_parameters_isSet = true;
}

bool OAICreatePipe_request_SourceParameters::is_kinesis_stream_parameters_Set() const{
    return m_kinesis_stream_parameters_isSet;
}

bool OAICreatePipe_request_SourceParameters::is_kinesis_stream_parameters_Valid() const{
    return m_kinesis_stream_parameters_isValid;
}

OAICreatePipe_request_SourceParameters_ManagedStreamingKafkaParameters OAICreatePipe_request_SourceParameters::getManagedStreamingKafkaParameters() const {
    return m_managed_streaming_kafka_parameters;
}
void OAICreatePipe_request_SourceParameters::setManagedStreamingKafkaParameters(const OAICreatePipe_request_SourceParameters_ManagedStreamingKafkaParameters &managed_streaming_kafka_parameters) {
    m_managed_streaming_kafka_parameters = managed_streaming_kafka_parameters;
    m_managed_streaming_kafka_parameters_isSet = true;
}

bool OAICreatePipe_request_SourceParameters::is_managed_streaming_kafka_parameters_Set() const{
    return m_managed_streaming_kafka_parameters_isSet;
}

bool OAICreatePipe_request_SourceParameters::is_managed_streaming_kafka_parameters_Valid() const{
    return m_managed_streaming_kafka_parameters_isValid;
}

OAICreatePipe_request_SourceParameters_RabbitMQBrokerParameters OAICreatePipe_request_SourceParameters::getRabbitMqBrokerParameters() const {
    return m_rabbit_mq_broker_parameters;
}
void OAICreatePipe_request_SourceParameters::setRabbitMqBrokerParameters(const OAICreatePipe_request_SourceParameters_RabbitMQBrokerParameters &rabbit_mq_broker_parameters) {
    m_rabbit_mq_broker_parameters = rabbit_mq_broker_parameters;
    m_rabbit_mq_broker_parameters_isSet = true;
}

bool OAICreatePipe_request_SourceParameters::is_rabbit_mq_broker_parameters_Set() const{
    return m_rabbit_mq_broker_parameters_isSet;
}

bool OAICreatePipe_request_SourceParameters::is_rabbit_mq_broker_parameters_Valid() const{
    return m_rabbit_mq_broker_parameters_isValid;
}

OAICreatePipe_request_SourceParameters_SelfManagedKafkaParameters OAICreatePipe_request_SourceParameters::getSelfManagedKafkaParameters() const {
    return m_self_managed_kafka_parameters;
}
void OAICreatePipe_request_SourceParameters::setSelfManagedKafkaParameters(const OAICreatePipe_request_SourceParameters_SelfManagedKafkaParameters &self_managed_kafka_parameters) {
    m_self_managed_kafka_parameters = self_managed_kafka_parameters;
    m_self_managed_kafka_parameters_isSet = true;
}

bool OAICreatePipe_request_SourceParameters::is_self_managed_kafka_parameters_Set() const{
    return m_self_managed_kafka_parameters_isSet;
}

bool OAICreatePipe_request_SourceParameters::is_self_managed_kafka_parameters_Valid() const{
    return m_self_managed_kafka_parameters_isValid;
}

OAICreatePipe_request_SourceParameters_SqsQueueParameters OAICreatePipe_request_SourceParameters::getSqsQueueParameters() const {
    return m_sqs_queue_parameters;
}
void OAICreatePipe_request_SourceParameters::setSqsQueueParameters(const OAICreatePipe_request_SourceParameters_SqsQueueParameters &sqs_queue_parameters) {
    m_sqs_queue_parameters = sqs_queue_parameters;
    m_sqs_queue_parameters_isSet = true;
}

bool OAICreatePipe_request_SourceParameters::is_sqs_queue_parameters_Set() const{
    return m_sqs_queue_parameters_isSet;
}

bool OAICreatePipe_request_SourceParameters::is_sqs_queue_parameters_Valid() const{
    return m_sqs_queue_parameters_isValid;
}

bool OAICreatePipe_request_SourceParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_mq_broker_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamo_db_stream_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_stream_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_streaming_kafka_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rabbit_mq_broker_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_managed_kafka_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_queue_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePipe_request_SourceParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
