/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeTargetRedshiftDataParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeTargetRedshiftDataParameters::OAIPipeTargetRedshiftDataParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeTargetRedshiftDataParameters::OAIPipeTargetRedshiftDataParameters() {
    this->initializeModel();
}

OAIPipeTargetRedshiftDataParameters::~OAIPipeTargetRedshiftDataParameters() {}

void OAIPipeTargetRedshiftDataParameters::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_db_user_isSet = false;
    m_db_user_isValid = false;

    m_secret_manager_arn_isSet = false;
    m_secret_manager_arn_isValid = false;

    m_sqls_isSet = false;
    m_sqls_isValid = false;

    m_statement_name_isSet = false;
    m_statement_name_isValid = false;

    m_with_event_isSet = false;
    m_with_event_isValid = false;
}

void OAIPipeTargetRedshiftDataParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeTargetRedshiftDataParameters::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_db_user_isValid = ::OpenAPI::fromJsonValue(m_db_user, json[QString("DbUser")]);
    m_db_user_isSet = !json[QString("DbUser")].isNull() && m_db_user_isValid;

    m_secret_manager_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_manager_arn, json[QString("SecretManagerArn")]);
    m_secret_manager_arn_isSet = !json[QString("SecretManagerArn")].isNull() && m_secret_manager_arn_isValid;

    m_sqls_isValid = ::OpenAPI::fromJsonValue(m_sqls, json[QString("Sqls")]);
    m_sqls_isSet = !json[QString("Sqls")].isNull() && m_sqls_isValid;

    m_statement_name_isValid = ::OpenAPI::fromJsonValue(m_statement_name, json[QString("StatementName")]);
    m_statement_name_isSet = !json[QString("StatementName")].isNull() && m_statement_name_isValid;

    m_with_event_isValid = ::OpenAPI::fromJsonValue(m_with_event, json[QString("WithEvent")]);
    m_with_event_isSet = !json[QString("WithEvent")].isNull() && m_with_event_isValid;
}

QString OAIPipeTargetRedshiftDataParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeTargetRedshiftDataParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_db_user_isSet) {
        obj.insert(QString("DbUser"), ::OpenAPI::toJsonValue(m_db_user));
    }
    if (m_secret_manager_arn_isSet) {
        obj.insert(QString("SecretManagerArn"), ::OpenAPI::toJsonValue(m_secret_manager_arn));
    }
    if (m_sqls.isSet()) {
        obj.insert(QString("Sqls"), ::OpenAPI::toJsonValue(m_sqls));
    }
    if (m_statement_name_isSet) {
        obj.insert(QString("StatementName"), ::OpenAPI::toJsonValue(m_statement_name));
    }
    if (m_with_event_isSet) {
        obj.insert(QString("WithEvent"), ::OpenAPI::toJsonValue(m_with_event));
    }
    return obj;
}

QString OAIPipeTargetRedshiftDataParameters::getDatabase() const {
    return m_database;
}
void OAIPipeTargetRedshiftDataParameters::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIPipeTargetRedshiftDataParameters::is_database_Set() const{
    return m_database_isSet;
}

bool OAIPipeTargetRedshiftDataParameters::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIPipeTargetRedshiftDataParameters::getDbUser() const {
    return m_db_user;
}
void OAIPipeTargetRedshiftDataParameters::setDbUser(const QString &db_user) {
    m_db_user = db_user;
    m_db_user_isSet = true;
}

bool OAIPipeTargetRedshiftDataParameters::is_db_user_Set() const{
    return m_db_user_isSet;
}

bool OAIPipeTargetRedshiftDataParameters::is_db_user_Valid() const{
    return m_db_user_isValid;
}

QString OAIPipeTargetRedshiftDataParameters::getSecretManagerArn() const {
    return m_secret_manager_arn;
}
void OAIPipeTargetRedshiftDataParameters::setSecretManagerArn(const QString &secret_manager_arn) {
    m_secret_manager_arn = secret_manager_arn;
    m_secret_manager_arn_isSet = true;
}

bool OAIPipeTargetRedshiftDataParameters::is_secret_manager_arn_Set() const{
    return m_secret_manager_arn_isSet;
}

bool OAIPipeTargetRedshiftDataParameters::is_secret_manager_arn_Valid() const{
    return m_secret_manager_arn_isValid;
}

QList OAIPipeTargetRedshiftDataParameters::getSqls() const {
    return m_sqls;
}
void OAIPipeTargetRedshiftDataParameters::setSqls(const QList &sqls) {
    m_sqls = sqls;
    m_sqls_isSet = true;
}

bool OAIPipeTargetRedshiftDataParameters::is_sqls_Set() const{
    return m_sqls_isSet;
}

bool OAIPipeTargetRedshiftDataParameters::is_sqls_Valid() const{
    return m_sqls_isValid;
}

QString OAIPipeTargetRedshiftDataParameters::getStatementName() const {
    return m_statement_name;
}
void OAIPipeTargetRedshiftDataParameters::setStatementName(const QString &statement_name) {
    m_statement_name = statement_name;
    m_statement_name_isSet = true;
}

bool OAIPipeTargetRedshiftDataParameters::is_statement_name_Set() const{
    return m_statement_name_isSet;
}

bool OAIPipeTargetRedshiftDataParameters::is_statement_name_Valid() const{
    return m_statement_name_isValid;
}

bool OAIPipeTargetRedshiftDataParameters::getWithEvent() const {
    return m_with_event;
}
void OAIPipeTargetRedshiftDataParameters::setWithEvent(const bool &with_event) {
    m_with_event = with_event;
    m_with_event_isSet = true;
}

bool OAIPipeTargetRedshiftDataParameters::is_with_event_Set() const{
    return m_with_event_isSet;
}

bool OAIPipeTargetRedshiftDataParameters::is_with_event_Valid() const{
    return m_with_event_isValid;
}

bool OAIPipeTargetRedshiftDataParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_manager_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_event_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeTargetRedshiftDataParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_isValid && m_sqls_isValid && true;
}

} // namespace OpenAPI
