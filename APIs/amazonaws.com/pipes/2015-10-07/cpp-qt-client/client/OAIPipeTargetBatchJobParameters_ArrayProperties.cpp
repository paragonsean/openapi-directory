/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeTargetBatchJobParameters_ArrayProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeTargetBatchJobParameters_ArrayProperties::OAIPipeTargetBatchJobParameters_ArrayProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeTargetBatchJobParameters_ArrayProperties::OAIPipeTargetBatchJobParameters_ArrayProperties() {
    this->initializeModel();
}

OAIPipeTargetBatchJobParameters_ArrayProperties::~OAIPipeTargetBatchJobParameters_ArrayProperties() {}

void OAIPipeTargetBatchJobParameters_ArrayProperties::initializeModel() {

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIPipeTargetBatchJobParameters_ArrayProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeTargetBatchJobParameters_ArrayProperties::fromJsonObject(QJsonObject json) {

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;
}

QString OAIPipeTargetBatchJobParameters_ArrayProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeTargetBatchJobParameters_ArrayProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

qint32 OAIPipeTargetBatchJobParameters_ArrayProperties::getSize() const {
    return m_size;
}
void OAIPipeTargetBatchJobParameters_ArrayProperties::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPipeTargetBatchJobParameters_ArrayProperties::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPipeTargetBatchJobParameters_ArrayProperties::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIPipeTargetBatchJobParameters_ArrayProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeTargetBatchJobParameters_ArrayProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
