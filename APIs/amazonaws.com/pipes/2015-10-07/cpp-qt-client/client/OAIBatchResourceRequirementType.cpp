/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchResourceRequirementType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchResourceRequirementType::OAIBatchResourceRequirementType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchResourceRequirementType::OAIBatchResourceRequirementType() {
    this->initializeModel();
}

OAIBatchResourceRequirementType::~OAIBatchResourceRequirementType() {}

void OAIBatchResourceRequirementType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBatchResourceRequirementType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBatchResourceRequirementType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("GPU", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchResourceRequirementType::GPU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEMORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchResourceRequirementType::MEMORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VCPU", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchResourceRequirementType::VCPU;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBatchResourceRequirementType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBatchResourceRequirementType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBatchResourceRequirementType::GPU:
            val = "GPU";
            break;
        case eOAIBatchResourceRequirementType::MEMORY:
            val = "MEMORY";
            break;
        case eOAIBatchResourceRequirementType::VCPU:
            val = "VCPU";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBatchResourceRequirementType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBatchResourceRequirementType::eOAIBatchResourceRequirementType OAIBatchResourceRequirementType::getValue() const {
    return m_value;
}

void OAIBatchResourceRequirementType::setValue(const OAIBatchResourceRequirementType::eOAIBatchResourceRequirementType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBatchResourceRequirementType::isSet() const {
    
    return m_value_isSet;
}

bool OAIBatchResourceRequirementType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
