/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdatePipe_request_TargetParameters_HttpParameters.h
 *
 * 
 */

#ifndef OAIUpdatePipe_request_TargetParameters_HttpParameters_H
#define OAIUpdatePipe_request_TargetParameters_HttpParameters_H

#include <QJsonObject>

#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdatePipe_request_TargetParameters_HttpParameters : public OAIObject {
public:
    OAIUpdatePipe_request_TargetParameters_HttpParameters();
    OAIUpdatePipe_request_TargetParameters_HttpParameters(QString json);
    ~OAIUpdatePipe_request_TargetParameters_HttpParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap getHeaderParameters() const;
    void setHeaderParameters(const QMap &header_parameters);
    bool is_header_parameters_Set() const;
    bool is_header_parameters_Valid() const;

    QList getPathParameterValues() const;
    void setPathParameterValues(const QList &path_parameter_values);
    bool is_path_parameter_values_Set() const;
    bool is_path_parameter_values_Valid() const;

    QMap getQueryStringParameters() const;
    void setQueryStringParameters(const QMap &query_string_parameters);
    bool is_query_string_parameters_Set() const;
    bool is_query_string_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap m_header_parameters;
    bool m_header_parameters_isSet;
    bool m_header_parameters_isValid;

    QList m_path_parameter_values;
    bool m_path_parameter_values_isSet;
    bool m_path_parameter_values_isValid;

    QMap m_query_string_parameters;
    bool m_query_string_parameters_isSet;
    bool m_query_string_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdatePipe_request_TargetParameters_HttpParameters)

#endif // OAIUpdatePipe_request_TargetParameters_HttpParameters_H
