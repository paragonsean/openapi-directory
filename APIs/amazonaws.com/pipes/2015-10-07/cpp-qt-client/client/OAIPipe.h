/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPipe.h
 *
 * An object that represents a pipe. Amazon EventBridgePipes connect event sources to targets and reduces the need for specialized knowledge and integration code.
 */

#ifndef OAIPipe_H
#define OAIPipe_H

#include <QJsonObject>

#include "OAIPipeState.h"
#include "OAIRequestedPipeState.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPipe : public OAIObject {
public:
    OAIPipe();
    OAIPipe(QString json);
    ~OAIPipe() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    OAIPipeState getCurrentState() const;
    void setCurrentState(const OAIPipeState &current_state);
    bool is_current_state_Set() const;
    bool is_current_state_Valid() const;

    OAIRequestedPipeState getDesiredState() const;
    void setDesiredState(const OAIRequestedPipeState &desired_state);
    bool is_desired_state_Set() const;
    bool is_desired_state_Valid() const;

    QString getEnrichment() const;
    void setEnrichment(const QString &enrichment);
    bool is_enrichment_Set() const;
    bool is_enrichment_Valid() const;

    QDateTime getLastModifiedTime() const;
    void setLastModifiedTime(const QDateTime &last_modified_time);
    bool is_last_modified_time_Set() const;
    bool is_last_modified_time_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getStateReason() const;
    void setStateReason(const QString &state_reason);
    bool is_state_reason_Set() const;
    bool is_state_reason_Valid() const;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    OAIPipeState m_current_state;
    bool m_current_state_isSet;
    bool m_current_state_isValid;

    OAIRequestedPipeState m_desired_state;
    bool m_desired_state_isSet;
    bool m_desired_state_isValid;

    QString m_enrichment;
    bool m_enrichment_isSet;
    bool m_enrichment_isValid;

    QDateTime m_last_modified_time;
    bool m_last_modified_time_isSet;
    bool m_last_modified_time_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_state_reason;
    bool m_state_reason_isSet;
    bool m_state_reason_isValid;

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPipe)

#endif // OAIPipe_H
