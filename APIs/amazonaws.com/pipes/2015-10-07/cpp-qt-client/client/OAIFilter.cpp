/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter::OAIFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter::OAIFilter() {
    this->initializeModel();
}

OAIFilter::~OAIFilter() {}

void OAIFilter::initializeModel() {

    m_pattern_isSet = false;
    m_pattern_isValid = false;
}

void OAIFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter::fromJsonObject(QJsonObject json) {

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("Pattern")]);
    m_pattern_isSet = !json[QString("Pattern")].isNull() && m_pattern_isValid;
}

QString OAIFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_pattern_isSet) {
        obj.insert(QString("Pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    return obj;
}

QString OAIFilter::getPattern() const {
    return m_pattern;
}
void OAIFilter::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIFilter::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIFilter::is_pattern_Valid() const{
    return m_pattern_isValid;
}

bool OAIFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
