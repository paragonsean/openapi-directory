/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeSourceDynamoDBStreamParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeSourceDynamoDBStreamParameters::OAIPipeSourceDynamoDBStreamParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeSourceDynamoDBStreamParameters::OAIPipeSourceDynamoDBStreamParameters() {
    this->initializeModel();
}

OAIPipeSourceDynamoDBStreamParameters::~OAIPipeSourceDynamoDBStreamParameters() {}

void OAIPipeSourceDynamoDBStreamParameters::initializeModel() {

    m_batch_size_isSet = false;
    m_batch_size_isValid = false;

    m_dead_letter_config_isSet = false;
    m_dead_letter_config_isValid = false;

    m_maximum_batching_window_in_seconds_isSet = false;
    m_maximum_batching_window_in_seconds_isValid = false;

    m_maximum_record_age_in_seconds_isSet = false;
    m_maximum_record_age_in_seconds_isValid = false;

    m_maximum_retry_attempts_isSet = false;
    m_maximum_retry_attempts_isValid = false;

    m_on_partial_batch_item_failure_isSet = false;
    m_on_partial_batch_item_failure_isValid = false;

    m_parallelization_factor_isSet = false;
    m_parallelization_factor_isValid = false;

    m_starting_position_isSet = false;
    m_starting_position_isValid = false;
}

void OAIPipeSourceDynamoDBStreamParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeSourceDynamoDBStreamParameters::fromJsonObject(QJsonObject json) {

    m_batch_size_isValid = ::OpenAPI::fromJsonValue(m_batch_size, json[QString("BatchSize")]);
    m_batch_size_isSet = !json[QString("BatchSize")].isNull() && m_batch_size_isValid;

    m_dead_letter_config_isValid = ::OpenAPI::fromJsonValue(m_dead_letter_config, json[QString("DeadLetterConfig")]);
    m_dead_letter_config_isSet = !json[QString("DeadLetterConfig")].isNull() && m_dead_letter_config_isValid;

    m_maximum_batching_window_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_maximum_batching_window_in_seconds, json[QString("MaximumBatchingWindowInSeconds")]);
    m_maximum_batching_window_in_seconds_isSet = !json[QString("MaximumBatchingWindowInSeconds")].isNull() && m_maximum_batching_window_in_seconds_isValid;

    m_maximum_record_age_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_maximum_record_age_in_seconds, json[QString("MaximumRecordAgeInSeconds")]);
    m_maximum_record_age_in_seconds_isSet = !json[QString("MaximumRecordAgeInSeconds")].isNull() && m_maximum_record_age_in_seconds_isValid;

    m_maximum_retry_attempts_isValid = ::OpenAPI::fromJsonValue(m_maximum_retry_attempts, json[QString("MaximumRetryAttempts")]);
    m_maximum_retry_attempts_isSet = !json[QString("MaximumRetryAttempts")].isNull() && m_maximum_retry_attempts_isValid;

    m_on_partial_batch_item_failure_isValid = ::OpenAPI::fromJsonValue(m_on_partial_batch_item_failure, json[QString("OnPartialBatchItemFailure")]);
    m_on_partial_batch_item_failure_isSet = !json[QString("OnPartialBatchItemFailure")].isNull() && m_on_partial_batch_item_failure_isValid;

    m_parallelization_factor_isValid = ::OpenAPI::fromJsonValue(m_parallelization_factor, json[QString("ParallelizationFactor")]);
    m_parallelization_factor_isSet = !json[QString("ParallelizationFactor")].isNull() && m_parallelization_factor_isValid;

    m_starting_position_isValid = ::OpenAPI::fromJsonValue(m_starting_position, json[QString("StartingPosition")]);
    m_starting_position_isSet = !json[QString("StartingPosition")].isNull() && m_starting_position_isValid;
}

QString OAIPipeSourceDynamoDBStreamParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeSourceDynamoDBStreamParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_size_isSet) {
        obj.insert(QString("BatchSize"), ::OpenAPI::toJsonValue(m_batch_size));
    }
    if (m_dead_letter_config.isSet()) {
        obj.insert(QString("DeadLetterConfig"), ::OpenAPI::toJsonValue(m_dead_letter_config));
    }
    if (m_maximum_batching_window_in_seconds_isSet) {
        obj.insert(QString("MaximumBatchingWindowInSeconds"), ::OpenAPI::toJsonValue(m_maximum_batching_window_in_seconds));
    }
    if (m_maximum_record_age_in_seconds_isSet) {
        obj.insert(QString("MaximumRecordAgeInSeconds"), ::OpenAPI::toJsonValue(m_maximum_record_age_in_seconds));
    }
    if (m_maximum_retry_attempts_isSet) {
        obj.insert(QString("MaximumRetryAttempts"), ::OpenAPI::toJsonValue(m_maximum_retry_attempts));
    }
    if (m_on_partial_batch_item_failure.isSet()) {
        obj.insert(QString("OnPartialBatchItemFailure"), ::OpenAPI::toJsonValue(m_on_partial_batch_item_failure));
    }
    if (m_parallelization_factor_isSet) {
        obj.insert(QString("ParallelizationFactor"), ::OpenAPI::toJsonValue(m_parallelization_factor));
    }
    if (m_starting_position.isSet()) {
        obj.insert(QString("StartingPosition"), ::OpenAPI::toJsonValue(m_starting_position));
    }
    return obj;
}

qint32 OAIPipeSourceDynamoDBStreamParameters::getBatchSize() const {
    return m_batch_size;
}
void OAIPipeSourceDynamoDBStreamParameters::setBatchSize(const qint32 &batch_size) {
    m_batch_size = batch_size;
    m_batch_size_isSet = true;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_batch_size_Set() const{
    return m_batch_size_isSet;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_batch_size_Valid() const{
    return m_batch_size_isValid;
}

OAIPipeSourceDynamoDBStreamParameters_DeadLetterConfig OAIPipeSourceDynamoDBStreamParameters::getDeadLetterConfig() const {
    return m_dead_letter_config;
}
void OAIPipeSourceDynamoDBStreamParameters::setDeadLetterConfig(const OAIPipeSourceDynamoDBStreamParameters_DeadLetterConfig &dead_letter_config) {
    m_dead_letter_config = dead_letter_config;
    m_dead_letter_config_isSet = true;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_dead_letter_config_Set() const{
    return m_dead_letter_config_isSet;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_dead_letter_config_Valid() const{
    return m_dead_letter_config_isValid;
}

qint32 OAIPipeSourceDynamoDBStreamParameters::getMaximumBatchingWindowInSeconds() const {
    return m_maximum_batching_window_in_seconds;
}
void OAIPipeSourceDynamoDBStreamParameters::setMaximumBatchingWindowInSeconds(const qint32 &maximum_batching_window_in_seconds) {
    m_maximum_batching_window_in_seconds = maximum_batching_window_in_seconds;
    m_maximum_batching_window_in_seconds_isSet = true;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_maximum_batching_window_in_seconds_Set() const{
    return m_maximum_batching_window_in_seconds_isSet;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_maximum_batching_window_in_seconds_Valid() const{
    return m_maximum_batching_window_in_seconds_isValid;
}

qint32 OAIPipeSourceDynamoDBStreamParameters::getMaximumRecordAgeInSeconds() const {
    return m_maximum_record_age_in_seconds;
}
void OAIPipeSourceDynamoDBStreamParameters::setMaximumRecordAgeInSeconds(const qint32 &maximum_record_age_in_seconds) {
    m_maximum_record_age_in_seconds = maximum_record_age_in_seconds;
    m_maximum_record_age_in_seconds_isSet = true;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_maximum_record_age_in_seconds_Set() const{
    return m_maximum_record_age_in_seconds_isSet;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_maximum_record_age_in_seconds_Valid() const{
    return m_maximum_record_age_in_seconds_isValid;
}

qint32 OAIPipeSourceDynamoDBStreamParameters::getMaximumRetryAttempts() const {
    return m_maximum_retry_attempts;
}
void OAIPipeSourceDynamoDBStreamParameters::setMaximumRetryAttempts(const qint32 &maximum_retry_attempts) {
    m_maximum_retry_attempts = maximum_retry_attempts;
    m_maximum_retry_attempts_isSet = true;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_maximum_retry_attempts_Set() const{
    return m_maximum_retry_attempts_isSet;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_maximum_retry_attempts_Valid() const{
    return m_maximum_retry_attempts_isValid;
}

OAIOnPartialBatchItemFailureStreams OAIPipeSourceDynamoDBStreamParameters::getOnPartialBatchItemFailure() const {
    return m_on_partial_batch_item_failure;
}
void OAIPipeSourceDynamoDBStreamParameters::setOnPartialBatchItemFailure(const OAIOnPartialBatchItemFailureStreams &on_partial_batch_item_failure) {
    m_on_partial_batch_item_failure = on_partial_batch_item_failure;
    m_on_partial_batch_item_failure_isSet = true;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_on_partial_batch_item_failure_Set() const{
    return m_on_partial_batch_item_failure_isSet;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_on_partial_batch_item_failure_Valid() const{
    return m_on_partial_batch_item_failure_isValid;
}

qint32 OAIPipeSourceDynamoDBStreamParameters::getParallelizationFactor() const {
    return m_parallelization_factor;
}
void OAIPipeSourceDynamoDBStreamParameters::setParallelizationFactor(const qint32 &parallelization_factor) {
    m_parallelization_factor = parallelization_factor;
    m_parallelization_factor_isSet = true;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_parallelization_factor_Set() const{
    return m_parallelization_factor_isSet;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_parallelization_factor_Valid() const{
    return m_parallelization_factor_isValid;
}

OAIDynamoDBStreamStartPosition OAIPipeSourceDynamoDBStreamParameters::getStartingPosition() const {
    return m_starting_position;
}
void OAIPipeSourceDynamoDBStreamParameters::setStartingPosition(const OAIDynamoDBStreamStartPosition &starting_position) {
    m_starting_position = starting_position;
    m_starting_position_isSet = true;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_starting_position_Set() const{
    return m_starting_position_isSet;
}

bool OAIPipeSourceDynamoDBStreamParameters::is_starting_position_Valid() const{
    return m_starting_position_isValid;
}

bool OAIPipeSourceDynamoDBStreamParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dead_letter_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_batching_window_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_record_age_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_retry_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_partial_batch_item_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelization_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeSourceDynamoDBStreamParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_starting_position_isValid && true;
}

} // namespace OpenAPI
