/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcsInferenceAcceleratorOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcsInferenceAcceleratorOverride::OAIEcsInferenceAcceleratorOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcsInferenceAcceleratorOverride::OAIEcsInferenceAcceleratorOverride() {
    this->initializeModel();
}

OAIEcsInferenceAcceleratorOverride::~OAIEcsInferenceAcceleratorOverride() {}

void OAIEcsInferenceAcceleratorOverride::initializeModel() {

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;
}

void OAIEcsInferenceAcceleratorOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcsInferenceAcceleratorOverride::fromJsonObject(QJsonObject json) {

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;
}

QString OAIEcsInferenceAcceleratorOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcsInferenceAcceleratorOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    return obj;
}

QString OAIEcsInferenceAcceleratorOverride::getDeviceName() const {
    return m_device_name;
}
void OAIEcsInferenceAcceleratorOverride::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIEcsInferenceAcceleratorOverride::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIEcsInferenceAcceleratorOverride::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIEcsInferenceAcceleratorOverride::getDeviceType() const {
    return m_device_type;
}
void OAIEcsInferenceAcceleratorOverride::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIEcsInferenceAcceleratorOverride::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIEcsInferenceAcceleratorOverride::is_device_type_Valid() const{
    return m_device_type_isValid;
}

bool OAIEcsInferenceAcceleratorOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcsInferenceAcceleratorOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
