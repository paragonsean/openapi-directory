/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePipe_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePipe_request::OAIUpdatePipe_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePipe_request::OAIUpdatePipe_request() {
    this->initializeModel();
}

OAIUpdatePipe_request::~OAIUpdatePipe_request() {}

void OAIUpdatePipe_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_enrichment_isSet = false;
    m_enrichment_isValid = false;

    m_enrichment_parameters_isSet = false;
    m_enrichment_parameters_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_source_parameters_isSet = false;
    m_source_parameters_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_target_parameters_isSet = false;
    m_target_parameters_isValid = false;
}

void OAIUpdatePipe_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePipe_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("DesiredState")]);
    m_desired_state_isSet = !json[QString("DesiredState")].isNull() && m_desired_state_isValid;

    m_enrichment_isValid = ::OpenAPI::fromJsonValue(m_enrichment, json[QString("Enrichment")]);
    m_enrichment_isSet = !json[QString("Enrichment")].isNull() && m_enrichment_isValid;

    m_enrichment_parameters_isValid = ::OpenAPI::fromJsonValue(m_enrichment_parameters, json[QString("EnrichmentParameters")]);
    m_enrichment_parameters_isSet = !json[QString("EnrichmentParameters")].isNull() && m_enrichment_parameters_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_source_parameters_isValid = ::OpenAPI::fromJsonValue(m_source_parameters, json[QString("SourceParameters")]);
    m_source_parameters_isSet = !json[QString("SourceParameters")].isNull() && m_source_parameters_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_target_parameters_isValid = ::OpenAPI::fromJsonValue(m_target_parameters, json[QString("TargetParameters")]);
    m_target_parameters_isSet = !json[QString("TargetParameters")].isNull() && m_target_parameters_isValid;
}

QString OAIUpdatePipe_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePipe_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_desired_state_isSet) {
        obj.insert(QString("DesiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_enrichment_isSet) {
        obj.insert(QString("Enrichment"), ::OpenAPI::toJsonValue(m_enrichment));
    }
    if (m_enrichment_parameters.isSet()) {
        obj.insert(QString("EnrichmentParameters"), ::OpenAPI::toJsonValue(m_enrichment_parameters));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_source_parameters.isSet()) {
        obj.insert(QString("SourceParameters"), ::OpenAPI::toJsonValue(m_source_parameters));
    }
    if (m_target_isSet) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_target_parameters.isSet()) {
        obj.insert(QString("TargetParameters"), ::OpenAPI::toJsonValue(m_target_parameters));
    }
    return obj;
}

QString OAIUpdatePipe_request::getDescription() const {
    return m_description;
}
void OAIUpdatePipe_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdatePipe_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdatePipe_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdatePipe_request::getDesiredState() const {
    return m_desired_state;
}
void OAIUpdatePipe_request::setDesiredState(const QString &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAIUpdatePipe_request::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAIUpdatePipe_request::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

QString OAIUpdatePipe_request::getEnrichment() const {
    return m_enrichment;
}
void OAIUpdatePipe_request::setEnrichment(const QString &enrichment) {
    m_enrichment = enrichment;
    m_enrichment_isSet = true;
}

bool OAIUpdatePipe_request::is_enrichment_Set() const{
    return m_enrichment_isSet;
}

bool OAIUpdatePipe_request::is_enrichment_Valid() const{
    return m_enrichment_isValid;
}

OAIUpdatePipe_request_EnrichmentParameters OAIUpdatePipe_request::getEnrichmentParameters() const {
    return m_enrichment_parameters;
}
void OAIUpdatePipe_request::setEnrichmentParameters(const OAIUpdatePipe_request_EnrichmentParameters &enrichment_parameters) {
    m_enrichment_parameters = enrichment_parameters;
    m_enrichment_parameters_isSet = true;
}

bool OAIUpdatePipe_request::is_enrichment_parameters_Set() const{
    return m_enrichment_parameters_isSet;
}

bool OAIUpdatePipe_request::is_enrichment_parameters_Valid() const{
    return m_enrichment_parameters_isValid;
}

QString OAIUpdatePipe_request::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdatePipe_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdatePipe_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdatePipe_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIUpdatePipe_request_SourceParameters OAIUpdatePipe_request::getSourceParameters() const {
    return m_source_parameters;
}
void OAIUpdatePipe_request::setSourceParameters(const OAIUpdatePipe_request_SourceParameters &source_parameters) {
    m_source_parameters = source_parameters;
    m_source_parameters_isSet = true;
}

bool OAIUpdatePipe_request::is_source_parameters_Set() const{
    return m_source_parameters_isSet;
}

bool OAIUpdatePipe_request::is_source_parameters_Valid() const{
    return m_source_parameters_isValid;
}

QString OAIUpdatePipe_request::getTarget() const {
    return m_target;
}
void OAIUpdatePipe_request::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIUpdatePipe_request::is_target_Set() const{
    return m_target_isSet;
}

bool OAIUpdatePipe_request::is_target_Valid() const{
    return m_target_isValid;
}

OAIUpdatePipe_request_TargetParameters OAIUpdatePipe_request::getTargetParameters() const {
    return m_target_parameters;
}
void OAIUpdatePipe_request::setTargetParameters(const OAIUpdatePipe_request_TargetParameters &target_parameters) {
    m_target_parameters = target_parameters;
    m_target_parameters_isSet = true;
}

bool OAIUpdatePipe_request::is_target_parameters_Set() const{
    return m_target_parameters_isSet;
}

bool OAIUpdatePipe_request::is_target_parameters_Valid() const{
    return m_target_parameters_isValid;
}

bool OAIUpdatePipe_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrichment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrichment_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePipe_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_arn_isValid && true;
}

} // namespace OpenAPI
