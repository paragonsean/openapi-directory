/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEcsTaskOverride.h
 *
 * The overrides that are associated with a task.
 */

#ifndef OAIEcsTaskOverride_H
#define OAIEcsTaskOverride_H

#include <QJsonObject>

#include "OAIEcsTaskOverride_EphemeralStorage.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEcsTaskOverride_EphemeralStorage;

class OAIEcsTaskOverride : public OAIObject {
public:
    OAIEcsTaskOverride();
    OAIEcsTaskOverride(QString json);
    ~OAIEcsTaskOverride() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getContainerOverrides() const;
    void setContainerOverrides(const QList &container_overrides);
    bool is_container_overrides_Set() const;
    bool is_container_overrides_Valid() const;

    QString getCpu() const;
    void setCpu(const QString &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    OAIEcsTaskOverride_EphemeralStorage getEphemeralStorage() const;
    void setEphemeralStorage(const OAIEcsTaskOverride_EphemeralStorage &ephemeral_storage);
    bool is_ephemeral_storage_Set() const;
    bool is_ephemeral_storage_Valid() const;

    QString getExecutionRoleArn() const;
    void setExecutionRoleArn(const QString &execution_role_arn);
    bool is_execution_role_arn_Set() const;
    bool is_execution_role_arn_Valid() const;

    QList getInferenceAcceleratorOverrides() const;
    void setInferenceAcceleratorOverrides(const QList &inference_accelerator_overrides);
    bool is_inference_accelerator_overrides_Set() const;
    bool is_inference_accelerator_overrides_Valid() const;

    QString getMemory() const;
    void setMemory(const QString &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    QString getTaskRoleArn() const;
    void setTaskRoleArn(const QString &task_role_arn);
    bool is_task_role_arn_Set() const;
    bool is_task_role_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_container_overrides;
    bool m_container_overrides_isSet;
    bool m_container_overrides_isValid;

    QString m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    OAIEcsTaskOverride_EphemeralStorage m_ephemeral_storage;
    bool m_ephemeral_storage_isSet;
    bool m_ephemeral_storage_isValid;

    QString m_execution_role_arn;
    bool m_execution_role_arn_isSet;
    bool m_execution_role_arn_isValid;

    QList m_inference_accelerator_overrides;
    bool m_inference_accelerator_overrides_isSet;
    bool m_inference_accelerator_overrides_isValid;

    QString m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    QString m_task_role_arn;
    bool m_task_role_arn_isSet;
    bool m_task_role_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEcsTaskOverride)

#endif // OAIEcsTaskOverride_H
