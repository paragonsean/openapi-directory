/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPipesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPipesResponse::OAIListPipesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPipesResponse::OAIListPipesResponse() {
    this->initializeModel();
}

OAIListPipesResponse::~OAIListPipesResponse() {}

void OAIListPipesResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_pipes_isSet = false;
    m_pipes_isValid = false;
}

void OAIListPipesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPipesResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_pipes_isValid = ::OpenAPI::fromJsonValue(m_pipes, json[QString("Pipes")]);
    m_pipes_isSet = !json[QString("Pipes")].isNull() && m_pipes_isValid;
}

QString OAIListPipesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPipesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_pipes.isSet()) {
        obj.insert(QString("Pipes"), ::OpenAPI::toJsonValue(m_pipes));
    }
    return obj;
}

QString OAIListPipesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListPipesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPipesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPipesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListPipesResponse::getPipes() const {
    return m_pipes;
}
void OAIListPipesResponse::setPipes(const QList &pipes) {
    m_pipes = pipes;
    m_pipes_isSet = true;
}

bool OAIListPipesResponse::is_pipes_Set() const{
    return m_pipes_isSet;
}

bool OAIListPipesResponse::is_pipes_Valid() const{
    return m_pipes_isValid;
}

bool OAIListPipesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPipesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
