/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeEnrichmentHttpParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeEnrichmentHttpParameters::OAIPipeEnrichmentHttpParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeEnrichmentHttpParameters::OAIPipeEnrichmentHttpParameters() {
    this->initializeModel();
}

OAIPipeEnrichmentHttpParameters::~OAIPipeEnrichmentHttpParameters() {}

void OAIPipeEnrichmentHttpParameters::initializeModel() {

    m_header_parameters_isSet = false;
    m_header_parameters_isValid = false;

    m_path_parameter_values_isSet = false;
    m_path_parameter_values_isValid = false;

    m_query_string_parameters_isSet = false;
    m_query_string_parameters_isValid = false;
}

void OAIPipeEnrichmentHttpParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeEnrichmentHttpParameters::fromJsonObject(QJsonObject json) {

    m_header_parameters_isValid = ::OpenAPI::fromJsonValue(m_header_parameters, json[QString("HeaderParameters")]);
    m_header_parameters_isSet = !json[QString("HeaderParameters")].isNull() && m_header_parameters_isValid;

    m_path_parameter_values_isValid = ::OpenAPI::fromJsonValue(m_path_parameter_values, json[QString("PathParameterValues")]);
    m_path_parameter_values_isSet = !json[QString("PathParameterValues")].isNull() && m_path_parameter_values_isValid;

    m_query_string_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_string_parameters, json[QString("QueryStringParameters")]);
    m_query_string_parameters_isSet = !json[QString("QueryStringParameters")].isNull() && m_query_string_parameters_isValid;
}

QString OAIPipeEnrichmentHttpParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeEnrichmentHttpParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_header_parameters.isSet()) {
        obj.insert(QString("HeaderParameters"), ::OpenAPI::toJsonValue(m_header_parameters));
    }
    if (m_path_parameter_values.isSet()) {
        obj.insert(QString("PathParameterValues"), ::OpenAPI::toJsonValue(m_path_parameter_values));
    }
    if (m_query_string_parameters.isSet()) {
        obj.insert(QString("QueryStringParameters"), ::OpenAPI::toJsonValue(m_query_string_parameters));
    }
    return obj;
}

QMap OAIPipeEnrichmentHttpParameters::getHeaderParameters() const {
    return m_header_parameters;
}
void OAIPipeEnrichmentHttpParameters::setHeaderParameters(const QMap &header_parameters) {
    m_header_parameters = header_parameters;
    m_header_parameters_isSet = true;
}

bool OAIPipeEnrichmentHttpParameters::is_header_parameters_Set() const{
    return m_header_parameters_isSet;
}

bool OAIPipeEnrichmentHttpParameters::is_header_parameters_Valid() const{
    return m_header_parameters_isValid;
}

QList OAIPipeEnrichmentHttpParameters::getPathParameterValues() const {
    return m_path_parameter_values;
}
void OAIPipeEnrichmentHttpParameters::setPathParameterValues(const QList &path_parameter_values) {
    m_path_parameter_values = path_parameter_values;
    m_path_parameter_values_isSet = true;
}

bool OAIPipeEnrichmentHttpParameters::is_path_parameter_values_Set() const{
    return m_path_parameter_values_isSet;
}

bool OAIPipeEnrichmentHttpParameters::is_path_parameter_values_Valid() const{
    return m_path_parameter_values_isValid;
}

QMap OAIPipeEnrichmentHttpParameters::getQueryStringParameters() const {
    return m_query_string_parameters;
}
void OAIPipeEnrichmentHttpParameters::setQueryStringParameters(const QMap &query_string_parameters) {
    m_query_string_parameters = query_string_parameters;
    m_query_string_parameters_isSet = true;
}

bool OAIPipeEnrichmentHttpParameters::is_query_string_parameters_Set() const{
    return m_query_string_parameters_isSet;
}

bool OAIPipeEnrichmentHttpParameters::is_query_string_parameters_Valid() const{
    return m_query_string_parameters_isValid;
}

bool OAIPipeEnrichmentHttpParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_parameter_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeEnrichmentHttpParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
