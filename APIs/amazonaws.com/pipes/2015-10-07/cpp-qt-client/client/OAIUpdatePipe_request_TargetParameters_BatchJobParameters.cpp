/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePipe_request_TargetParameters_BatchJobParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePipe_request_TargetParameters_BatchJobParameters::OAIUpdatePipe_request_TargetParameters_BatchJobParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePipe_request_TargetParameters_BatchJobParameters::OAIUpdatePipe_request_TargetParameters_BatchJobParameters() {
    this->initializeModel();
}

OAIUpdatePipe_request_TargetParameters_BatchJobParameters::~OAIUpdatePipe_request_TargetParameters_BatchJobParameters() {}

void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::initializeModel() {

    m_array_properties_isSet = false;
    m_array_properties_isValid = false;

    m_container_overrides_isSet = false;
    m_container_overrides_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_job_definition_isSet = false;
    m_job_definition_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_retry_strategy_isSet = false;
    m_retry_strategy_isValid = false;
}

void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::fromJsonObject(QJsonObject json) {

    m_array_properties_isValid = ::OpenAPI::fromJsonValue(m_array_properties, json[QString("ArrayProperties")]);
    m_array_properties_isSet = !json[QString("ArrayProperties")].isNull() && m_array_properties_isValid;

    m_container_overrides_isValid = ::OpenAPI::fromJsonValue(m_container_overrides, json[QString("ContainerOverrides")]);
    m_container_overrides_isSet = !json[QString("ContainerOverrides")].isNull() && m_container_overrides_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("DependsOn")]);
    m_depends_on_isSet = !json[QString("DependsOn")].isNull() && m_depends_on_isValid;

    m_job_definition_isValid = ::OpenAPI::fromJsonValue(m_job_definition, json[QString("JobDefinition")]);
    m_job_definition_isSet = !json[QString("JobDefinition")].isNull() && m_job_definition_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_retry_strategy_isValid = ::OpenAPI::fromJsonValue(m_retry_strategy, json[QString("RetryStrategy")]);
    m_retry_strategy_isSet = !json[QString("RetryStrategy")].isNull() && m_retry_strategy_isValid;
}

QString OAIUpdatePipe_request_TargetParameters_BatchJobParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePipe_request_TargetParameters_BatchJobParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_array_properties.isSet()) {
        obj.insert(QString("ArrayProperties"), ::OpenAPI::toJsonValue(m_array_properties));
    }
    if (m_container_overrides.isSet()) {
        obj.insert(QString("ContainerOverrides"), ::OpenAPI::toJsonValue(m_container_overrides));
    }
    if (m_depends_on.isSet()) {
        obj.insert(QString("DependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_job_definition_isSet) {
        obj.insert(QString("JobDefinition"), ::OpenAPI::toJsonValue(m_job_definition));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_retry_strategy.isSet()) {
        obj.insert(QString("RetryStrategy"), ::OpenAPI::toJsonValue(m_retry_strategy));
    }
    return obj;
}

OAIPipeTargetBatchJobParameters_ArrayProperties OAIUpdatePipe_request_TargetParameters_BatchJobParameters::getArrayProperties() const {
    return m_array_properties;
}
void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::setArrayProperties(const OAIPipeTargetBatchJobParameters_ArrayProperties &array_properties) {
    m_array_properties = array_properties;
    m_array_properties_isSet = true;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_array_properties_Set() const{
    return m_array_properties_isSet;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_array_properties_Valid() const{
    return m_array_properties_isValid;
}

OAIPipeTargetBatchJobParameters_ContainerOverrides OAIUpdatePipe_request_TargetParameters_BatchJobParameters::getContainerOverrides() const {
    return m_container_overrides;
}
void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::setContainerOverrides(const OAIPipeTargetBatchJobParameters_ContainerOverrides &container_overrides) {
    m_container_overrides = container_overrides;
    m_container_overrides_isSet = true;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_container_overrides_Set() const{
    return m_container_overrides_isSet;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_container_overrides_Valid() const{
    return m_container_overrides_isValid;
}

QList OAIUpdatePipe_request_TargetParameters_BatchJobParameters::getDependsOn() const {
    return m_depends_on;
}
void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::setDependsOn(const QList &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

QString OAIUpdatePipe_request_TargetParameters_BatchJobParameters::getJobDefinition() const {
    return m_job_definition;
}
void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::setJobDefinition(const QString &job_definition) {
    m_job_definition = job_definition;
    m_job_definition_isSet = true;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_job_definition_Set() const{
    return m_job_definition_isSet;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_job_definition_Valid() const{
    return m_job_definition_isValid;
}

QString OAIUpdatePipe_request_TargetParameters_BatchJobParameters::getJobName() const {
    return m_job_name;
}
void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QMap OAIUpdatePipe_request_TargetParameters_BatchJobParameters::getParameters() const {
    return m_parameters;
}
void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIPipeTargetBatchJobParameters_RetryStrategy OAIUpdatePipe_request_TargetParameters_BatchJobParameters::getRetryStrategy() const {
    return m_retry_strategy;
}
void OAIUpdatePipe_request_TargetParameters_BatchJobParameters::setRetryStrategy(const OAIPipeTargetBatchJobParameters_RetryStrategy &retry_strategy) {
    m_retry_strategy = retry_strategy;
    m_retry_strategy_isSet = true;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_retry_strategy_Set() const{
    return m_retry_strategy_isSet;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::is_retry_strategy_Valid() const{
    return m_retry_strategy_isValid;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePipe_request_TargetParameters_BatchJobParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_definition_isValid && m_job_name_isValid && true;
}

} // namespace OpenAPI
