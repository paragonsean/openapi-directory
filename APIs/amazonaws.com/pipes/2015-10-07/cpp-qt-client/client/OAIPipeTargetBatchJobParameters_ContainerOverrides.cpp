/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeTargetBatchJobParameters_ContainerOverrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeTargetBatchJobParameters_ContainerOverrides::OAIPipeTargetBatchJobParameters_ContainerOverrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeTargetBatchJobParameters_ContainerOverrides::OAIPipeTargetBatchJobParameters_ContainerOverrides() {
    this->initializeModel();
}

OAIPipeTargetBatchJobParameters_ContainerOverrides::~OAIPipeTargetBatchJobParameters_ContainerOverrides() {}

void OAIPipeTargetBatchJobParameters_ContainerOverrides::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_resource_requirements_isSet = false;
    m_resource_requirements_isValid = false;
}

void OAIPipeTargetBatchJobParameters_ContainerOverrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeTargetBatchJobParameters_ContainerOverrides::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("Command")]);
    m_command_isSet = !json[QString("Command")].isNull() && m_command_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_resource_requirements_isValid = ::OpenAPI::fromJsonValue(m_resource_requirements, json[QString("ResourceRequirements")]);
    m_resource_requirements_isSet = !json[QString("ResourceRequirements")].isNull() && m_resource_requirements_isValid;
}

QString OAIPipeTargetBatchJobParameters_ContainerOverrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeTargetBatchJobParameters_ContainerOverrides::asJsonObject() const {
    QJsonObject obj;
    if (m_command.isSet()) {
        obj.insert(QString("Command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_resource_requirements.isSet()) {
        obj.insert(QString("ResourceRequirements"), ::OpenAPI::toJsonValue(m_resource_requirements));
    }
    return obj;
}

QList OAIPipeTargetBatchJobParameters_ContainerOverrides::getCommand() const {
    return m_command;
}
void OAIPipeTargetBatchJobParameters_ContainerOverrides::setCommand(const QList &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::is_command_Set() const{
    return m_command_isSet;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::is_command_Valid() const{
    return m_command_isValid;
}

QList OAIPipeTargetBatchJobParameters_ContainerOverrides::getEnvironment() const {
    return m_environment;
}
void OAIPipeTargetBatchJobParameters_ContainerOverrides::setEnvironment(const QList &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIPipeTargetBatchJobParameters_ContainerOverrides::getInstanceType() const {
    return m_instance_type;
}
void OAIPipeTargetBatchJobParameters_ContainerOverrides::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QList OAIPipeTargetBatchJobParameters_ContainerOverrides::getResourceRequirements() const {
    return m_resource_requirements;
}
void OAIPipeTargetBatchJobParameters_ContainerOverrides::setResourceRequirements(const QList &resource_requirements) {
    m_resource_requirements = resource_requirements;
    m_resource_requirements_isSet = true;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::is_resource_requirements_Set() const{
    return m_resource_requirements_isSet;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::is_resource_requirements_Valid() const{
    return m_resource_requirements_isValid;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeTargetBatchJobParameters_ContainerOverrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
