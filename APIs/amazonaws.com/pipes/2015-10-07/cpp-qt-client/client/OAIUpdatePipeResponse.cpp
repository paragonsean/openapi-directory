/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePipeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePipeResponse::OAIUpdatePipeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePipeResponse::OAIUpdatePipeResponse() {
    this->initializeModel();
}

OAIUpdatePipeResponse::~OAIUpdatePipeResponse() {}

void OAIUpdatePipeResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_current_state_isSet = false;
    m_current_state_isValid = false;

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUpdatePipeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePipeResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_current_state_isValid = ::OpenAPI::fromJsonValue(m_current_state, json[QString("CurrentState")]);
    m_current_state_isSet = !json[QString("CurrentState")].isNull() && m_current_state_isValid;

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("DesiredState")]);
    m_desired_state_isSet = !json[QString("DesiredState")].isNull() && m_desired_state_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIUpdatePipeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePipeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_current_state.isSet()) {
        obj.insert(QString("CurrentState"), ::OpenAPI::toJsonValue(m_current_state));
    }
    if (m_desired_state.isSet()) {
        obj.insert(QString("DesiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIUpdatePipeResponse::getArn() const {
    return m_arn;
}
void OAIUpdatePipeResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdatePipeResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdatePipeResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIUpdatePipeResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIUpdatePipeResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIUpdatePipeResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIUpdatePipeResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIPipeState OAIUpdatePipeResponse::getCurrentState() const {
    return m_current_state;
}
void OAIUpdatePipeResponse::setCurrentState(const OAIPipeState &current_state) {
    m_current_state = current_state;
    m_current_state_isSet = true;
}

bool OAIUpdatePipeResponse::is_current_state_Set() const{
    return m_current_state_isSet;
}

bool OAIUpdatePipeResponse::is_current_state_Valid() const{
    return m_current_state_isValid;
}

OAIRequestedPipeState OAIUpdatePipeResponse::getDesiredState() const {
    return m_desired_state;
}
void OAIUpdatePipeResponse::setDesiredState(const OAIRequestedPipeState &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAIUpdatePipeResponse::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAIUpdatePipeResponse::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

QDateTime OAIUpdatePipeResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIUpdatePipeResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIUpdatePipeResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIUpdatePipeResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIUpdatePipeResponse::getName() const {
    return m_name;
}
void OAIUpdatePipeResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdatePipeResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdatePipeResponse::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUpdatePipeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePipeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
