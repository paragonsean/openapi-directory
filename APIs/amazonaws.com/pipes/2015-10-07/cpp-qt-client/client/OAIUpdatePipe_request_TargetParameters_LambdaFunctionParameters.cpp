/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters() {
    this->initializeModel();
}

OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::~OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters() {}

void OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::initializeModel() {

    m_invocation_type_isSet = false;
    m_invocation_type_isValid = false;
}

void OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::fromJsonObject(QJsonObject json) {

    m_invocation_type_isValid = ::OpenAPI::fromJsonValue(m_invocation_type, json[QString("InvocationType")]);
    m_invocation_type_isSet = !json[QString("InvocationType")].isNull() && m_invocation_type_isValid;
}

QString OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_invocation_type.isSet()) {
        obj.insert(QString("InvocationType"), ::OpenAPI::toJsonValue(m_invocation_type));
    }
    return obj;
}

OAIPipeTargetInvocationType OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::getInvocationType() const {
    return m_invocation_type;
}
void OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::setInvocationType(const OAIPipeTargetInvocationType &invocation_type) {
    m_invocation_type = invocation_type;
    m_invocation_type_isSet = true;
}

bool OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::is_invocation_type_Set() const{
    return m_invocation_type_isSet;
}

bool OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::is_invocation_type_Valid() const{
    return m_invocation_type_isValid;
}

bool OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invocation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
