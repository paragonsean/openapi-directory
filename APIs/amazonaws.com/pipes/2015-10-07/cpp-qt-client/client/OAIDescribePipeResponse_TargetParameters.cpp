/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePipeResponse_TargetParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePipeResponse_TargetParameters::OAIDescribePipeResponse_TargetParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePipeResponse_TargetParameters::OAIDescribePipeResponse_TargetParameters() {
    this->initializeModel();
}

OAIDescribePipeResponse_TargetParameters::~OAIDescribePipeResponse_TargetParameters() {}

void OAIDescribePipeResponse_TargetParameters::initializeModel() {

    m_batch_job_parameters_isSet = false;
    m_batch_job_parameters_isValid = false;

    m_cloud_watch_logs_parameters_isSet = false;
    m_cloud_watch_logs_parameters_isValid = false;

    m_ecs_task_parameters_isSet = false;
    m_ecs_task_parameters_isValid = false;

    m_event_bridge_event_bus_parameters_isSet = false;
    m_event_bridge_event_bus_parameters_isValid = false;

    m_http_parameters_isSet = false;
    m_http_parameters_isValid = false;

    m_input_template_isSet = false;
    m_input_template_isValid = false;

    m_kinesis_stream_parameters_isSet = false;
    m_kinesis_stream_parameters_isValid = false;

    m_lambda_function_parameters_isSet = false;
    m_lambda_function_parameters_isValid = false;

    m_redshift_data_parameters_isSet = false;
    m_redshift_data_parameters_isValid = false;

    m_sage_maker_pipeline_parameters_isSet = false;
    m_sage_maker_pipeline_parameters_isValid = false;

    m_sqs_queue_parameters_isSet = false;
    m_sqs_queue_parameters_isValid = false;

    m_step_function_state_machine_parameters_isSet = false;
    m_step_function_state_machine_parameters_isValid = false;
}

void OAIDescribePipeResponse_TargetParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePipeResponse_TargetParameters::fromJsonObject(QJsonObject json) {

    m_batch_job_parameters_isValid = ::OpenAPI::fromJsonValue(m_batch_job_parameters, json[QString("BatchJobParameters")]);
    m_batch_job_parameters_isSet = !json[QString("BatchJobParameters")].isNull() && m_batch_job_parameters_isValid;

    m_cloud_watch_logs_parameters_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs_parameters, json[QString("CloudWatchLogsParameters")]);
    m_cloud_watch_logs_parameters_isSet = !json[QString("CloudWatchLogsParameters")].isNull() && m_cloud_watch_logs_parameters_isValid;

    m_ecs_task_parameters_isValid = ::OpenAPI::fromJsonValue(m_ecs_task_parameters, json[QString("EcsTaskParameters")]);
    m_ecs_task_parameters_isSet = !json[QString("EcsTaskParameters")].isNull() && m_ecs_task_parameters_isValid;

    m_event_bridge_event_bus_parameters_isValid = ::OpenAPI::fromJsonValue(m_event_bridge_event_bus_parameters, json[QString("EventBridgeEventBusParameters")]);
    m_event_bridge_event_bus_parameters_isSet = !json[QString("EventBridgeEventBusParameters")].isNull() && m_event_bridge_event_bus_parameters_isValid;

    m_http_parameters_isValid = ::OpenAPI::fromJsonValue(m_http_parameters, json[QString("HttpParameters")]);
    m_http_parameters_isSet = !json[QString("HttpParameters")].isNull() && m_http_parameters_isValid;

    m_input_template_isValid = ::OpenAPI::fromJsonValue(m_input_template, json[QString("InputTemplate")]);
    m_input_template_isSet = !json[QString("InputTemplate")].isNull() && m_input_template_isValid;

    m_kinesis_stream_parameters_isValid = ::OpenAPI::fromJsonValue(m_kinesis_stream_parameters, json[QString("KinesisStreamParameters")]);
    m_kinesis_stream_parameters_isSet = !json[QString("KinesisStreamParameters")].isNull() && m_kinesis_stream_parameters_isValid;

    m_lambda_function_parameters_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_parameters, json[QString("LambdaFunctionParameters")]);
    m_lambda_function_parameters_isSet = !json[QString("LambdaFunctionParameters")].isNull() && m_lambda_function_parameters_isValid;

    m_redshift_data_parameters_isValid = ::OpenAPI::fromJsonValue(m_redshift_data_parameters, json[QString("RedshiftDataParameters")]);
    m_redshift_data_parameters_isSet = !json[QString("RedshiftDataParameters")].isNull() && m_redshift_data_parameters_isValid;

    m_sage_maker_pipeline_parameters_isValid = ::OpenAPI::fromJsonValue(m_sage_maker_pipeline_parameters, json[QString("SageMakerPipelineParameters")]);
    m_sage_maker_pipeline_parameters_isSet = !json[QString("SageMakerPipelineParameters")].isNull() && m_sage_maker_pipeline_parameters_isValid;

    m_sqs_queue_parameters_isValid = ::OpenAPI::fromJsonValue(m_sqs_queue_parameters, json[QString("SqsQueueParameters")]);
    m_sqs_queue_parameters_isSet = !json[QString("SqsQueueParameters")].isNull() && m_sqs_queue_parameters_isValid;

    m_step_function_state_machine_parameters_isValid = ::OpenAPI::fromJsonValue(m_step_function_state_machine_parameters, json[QString("StepFunctionStateMachineParameters")]);
    m_step_function_state_machine_parameters_isSet = !json[QString("StepFunctionStateMachineParameters")].isNull() && m_step_function_state_machine_parameters_isValid;
}

QString OAIDescribePipeResponse_TargetParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePipeResponse_TargetParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_job_parameters.isSet()) {
        obj.insert(QString("BatchJobParameters"), ::OpenAPI::toJsonValue(m_batch_job_parameters));
    }
    if (m_cloud_watch_logs_parameters.isSet()) {
        obj.insert(QString("CloudWatchLogsParameters"), ::OpenAPI::toJsonValue(m_cloud_watch_logs_parameters));
    }
    if (m_ecs_task_parameters.isSet()) {
        obj.insert(QString("EcsTaskParameters"), ::OpenAPI::toJsonValue(m_ecs_task_parameters));
    }
    if (m_event_bridge_event_bus_parameters.isSet()) {
        obj.insert(QString("EventBridgeEventBusParameters"), ::OpenAPI::toJsonValue(m_event_bridge_event_bus_parameters));
    }
    if (m_http_parameters.isSet()) {
        obj.insert(QString("HttpParameters"), ::OpenAPI::toJsonValue(m_http_parameters));
    }
    if (m_input_template_isSet) {
        obj.insert(QString("InputTemplate"), ::OpenAPI::toJsonValue(m_input_template));
    }
    if (m_kinesis_stream_parameters.isSet()) {
        obj.insert(QString("KinesisStreamParameters"), ::OpenAPI::toJsonValue(m_kinesis_stream_parameters));
    }
    if (m_lambda_function_parameters.isSet()) {
        obj.insert(QString("LambdaFunctionParameters"), ::OpenAPI::toJsonValue(m_lambda_function_parameters));
    }
    if (m_redshift_data_parameters.isSet()) {
        obj.insert(QString("RedshiftDataParameters"), ::OpenAPI::toJsonValue(m_redshift_data_parameters));
    }
    if (m_sage_maker_pipeline_parameters.isSet()) {
        obj.insert(QString("SageMakerPipelineParameters"), ::OpenAPI::toJsonValue(m_sage_maker_pipeline_parameters));
    }
    if (m_sqs_queue_parameters.isSet()) {
        obj.insert(QString("SqsQueueParameters"), ::OpenAPI::toJsonValue(m_sqs_queue_parameters));
    }
    if (m_step_function_state_machine_parameters.isSet()) {
        obj.insert(QString("StepFunctionStateMachineParameters"), ::OpenAPI::toJsonValue(m_step_function_state_machine_parameters));
    }
    return obj;
}

OAIUpdatePipe_request_TargetParameters_BatchJobParameters OAIDescribePipeResponse_TargetParameters::getBatchJobParameters() const {
    return m_batch_job_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setBatchJobParameters(const OAIUpdatePipe_request_TargetParameters_BatchJobParameters &batch_job_parameters) {
    m_batch_job_parameters = batch_job_parameters;
    m_batch_job_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_batch_job_parameters_Set() const{
    return m_batch_job_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_batch_job_parameters_Valid() const{
    return m_batch_job_parameters_isValid;
}

OAIUpdatePipe_request_TargetParameters_CloudWatchLogsParameters OAIDescribePipeResponse_TargetParameters::getCloudWatchLogsParameters() const {
    return m_cloud_watch_logs_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setCloudWatchLogsParameters(const OAIUpdatePipe_request_TargetParameters_CloudWatchLogsParameters &cloud_watch_logs_parameters) {
    m_cloud_watch_logs_parameters = cloud_watch_logs_parameters;
    m_cloud_watch_logs_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_cloud_watch_logs_parameters_Set() const{
    return m_cloud_watch_logs_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_cloud_watch_logs_parameters_Valid() const{
    return m_cloud_watch_logs_parameters_isValid;
}

OAIUpdatePipe_request_TargetParameters_EcsTaskParameters OAIDescribePipeResponse_TargetParameters::getEcsTaskParameters() const {
    return m_ecs_task_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setEcsTaskParameters(const OAIUpdatePipe_request_TargetParameters_EcsTaskParameters &ecs_task_parameters) {
    m_ecs_task_parameters = ecs_task_parameters;
    m_ecs_task_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_ecs_task_parameters_Set() const{
    return m_ecs_task_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_ecs_task_parameters_Valid() const{
    return m_ecs_task_parameters_isValid;
}

OAIUpdatePipe_request_TargetParameters_EventBridgeEventBusParameters OAIDescribePipeResponse_TargetParameters::getEventBridgeEventBusParameters() const {
    return m_event_bridge_event_bus_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setEventBridgeEventBusParameters(const OAIUpdatePipe_request_TargetParameters_EventBridgeEventBusParameters &event_bridge_event_bus_parameters) {
    m_event_bridge_event_bus_parameters = event_bridge_event_bus_parameters;
    m_event_bridge_event_bus_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_event_bridge_event_bus_parameters_Set() const{
    return m_event_bridge_event_bus_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_event_bridge_event_bus_parameters_Valid() const{
    return m_event_bridge_event_bus_parameters_isValid;
}

OAIUpdatePipe_request_TargetParameters_HttpParameters OAIDescribePipeResponse_TargetParameters::getHttpParameters() const {
    return m_http_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setHttpParameters(const OAIUpdatePipe_request_TargetParameters_HttpParameters &http_parameters) {
    m_http_parameters = http_parameters;
    m_http_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_http_parameters_Set() const{
    return m_http_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_http_parameters_Valid() const{
    return m_http_parameters_isValid;
}

QString OAIDescribePipeResponse_TargetParameters::getInputTemplate() const {
    return m_input_template;
}
void OAIDescribePipeResponse_TargetParameters::setInputTemplate(const QString &input_template) {
    m_input_template = input_template;
    m_input_template_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_input_template_Set() const{
    return m_input_template_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_input_template_Valid() const{
    return m_input_template_isValid;
}

OAIUpdatePipe_request_TargetParameters_KinesisStreamParameters OAIDescribePipeResponse_TargetParameters::getKinesisStreamParameters() const {
    return m_kinesis_stream_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setKinesisStreamParameters(const OAIUpdatePipe_request_TargetParameters_KinesisStreamParameters &kinesis_stream_parameters) {
    m_kinesis_stream_parameters = kinesis_stream_parameters;
    m_kinesis_stream_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_kinesis_stream_parameters_Set() const{
    return m_kinesis_stream_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_kinesis_stream_parameters_Valid() const{
    return m_kinesis_stream_parameters_isValid;
}

OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters OAIDescribePipeResponse_TargetParameters::getLambdaFunctionParameters() const {
    return m_lambda_function_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setLambdaFunctionParameters(const OAIUpdatePipe_request_TargetParameters_LambdaFunctionParameters &lambda_function_parameters) {
    m_lambda_function_parameters = lambda_function_parameters;
    m_lambda_function_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_lambda_function_parameters_Set() const{
    return m_lambda_function_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_lambda_function_parameters_Valid() const{
    return m_lambda_function_parameters_isValid;
}

OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters OAIDescribePipeResponse_TargetParameters::getRedshiftDataParameters() const {
    return m_redshift_data_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setRedshiftDataParameters(const OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters &redshift_data_parameters) {
    m_redshift_data_parameters = redshift_data_parameters;
    m_redshift_data_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_redshift_data_parameters_Set() const{
    return m_redshift_data_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_redshift_data_parameters_Valid() const{
    return m_redshift_data_parameters_isValid;
}

OAIUpdatePipe_request_TargetParameters_SageMakerPipelineParameters OAIDescribePipeResponse_TargetParameters::getSageMakerPipelineParameters() const {
    return m_sage_maker_pipeline_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setSageMakerPipelineParameters(const OAIUpdatePipe_request_TargetParameters_SageMakerPipelineParameters &sage_maker_pipeline_parameters) {
    m_sage_maker_pipeline_parameters = sage_maker_pipeline_parameters;
    m_sage_maker_pipeline_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_sage_maker_pipeline_parameters_Set() const{
    return m_sage_maker_pipeline_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_sage_maker_pipeline_parameters_Valid() const{
    return m_sage_maker_pipeline_parameters_isValid;
}

OAIUpdatePipe_request_TargetParameters_SqsQueueParameters OAIDescribePipeResponse_TargetParameters::getSqsQueueParameters() const {
    return m_sqs_queue_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setSqsQueueParameters(const OAIUpdatePipe_request_TargetParameters_SqsQueueParameters &sqs_queue_parameters) {
    m_sqs_queue_parameters = sqs_queue_parameters;
    m_sqs_queue_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_sqs_queue_parameters_Set() const{
    return m_sqs_queue_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_sqs_queue_parameters_Valid() const{
    return m_sqs_queue_parameters_isValid;
}

OAIUpdatePipe_request_TargetParameters_StepFunctionStateMachineParameters OAIDescribePipeResponse_TargetParameters::getStepFunctionStateMachineParameters() const {
    return m_step_function_state_machine_parameters;
}
void OAIDescribePipeResponse_TargetParameters::setStepFunctionStateMachineParameters(const OAIUpdatePipe_request_TargetParameters_StepFunctionStateMachineParameters &step_function_state_machine_parameters) {
    m_step_function_state_machine_parameters = step_function_state_machine_parameters;
    m_step_function_state_machine_parameters_isSet = true;
}

bool OAIDescribePipeResponse_TargetParameters::is_step_function_state_machine_parameters_Set() const{
    return m_step_function_state_machine_parameters_isSet;
}

bool OAIDescribePipeResponse_TargetParameters::is_step_function_state_machine_parameters_Valid() const{
    return m_step_function_state_machine_parameters_isValid;
}

bool OAIDescribePipeResponse_TargetParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_job_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logs_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecs_task_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bridge_event_bus_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_stream_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_data_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sage_maker_pipeline_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_queue_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_function_state_machine_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePipeResponse_TargetParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
