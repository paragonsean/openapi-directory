/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelfManagedKafkaAccessConfigurationCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelfManagedKafkaAccessConfigurationCredentials::OAISelfManagedKafkaAccessConfigurationCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelfManagedKafkaAccessConfigurationCredentials::OAISelfManagedKafkaAccessConfigurationCredentials() {
    this->initializeModel();
}

OAISelfManagedKafkaAccessConfigurationCredentials::~OAISelfManagedKafkaAccessConfigurationCredentials() {}

void OAISelfManagedKafkaAccessConfigurationCredentials::initializeModel() {

    m_basic_auth_isSet = false;
    m_basic_auth_isValid = false;

    m_client_certificate_tls_auth_isSet = false;
    m_client_certificate_tls_auth_isValid = false;

    m_sasl_scram256_auth_isSet = false;
    m_sasl_scram256_auth_isValid = false;

    m_sasl_scram512_auth_isSet = false;
    m_sasl_scram512_auth_isValid = false;
}

void OAISelfManagedKafkaAccessConfigurationCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelfManagedKafkaAccessConfigurationCredentials::fromJsonObject(QJsonObject json) {

    m_basic_auth_isValid = ::OpenAPI::fromJsonValue(m_basic_auth, json[QString("BasicAuth")]);
    m_basic_auth_isSet = !json[QString("BasicAuth")].isNull() && m_basic_auth_isValid;

    m_client_certificate_tls_auth_isValid = ::OpenAPI::fromJsonValue(m_client_certificate_tls_auth, json[QString("ClientCertificateTlsAuth")]);
    m_client_certificate_tls_auth_isSet = !json[QString("ClientCertificateTlsAuth")].isNull() && m_client_certificate_tls_auth_isValid;

    m_sasl_scram256_auth_isValid = ::OpenAPI::fromJsonValue(m_sasl_scram256_auth, json[QString("SaslScram256Auth")]);
    m_sasl_scram256_auth_isSet = !json[QString("SaslScram256Auth")].isNull() && m_sasl_scram256_auth_isValid;

    m_sasl_scram512_auth_isValid = ::OpenAPI::fromJsonValue(m_sasl_scram512_auth, json[QString("SaslScram512Auth")]);
    m_sasl_scram512_auth_isSet = !json[QString("SaslScram512Auth")].isNull() && m_sasl_scram512_auth_isValid;
}

QString OAISelfManagedKafkaAccessConfigurationCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelfManagedKafkaAccessConfigurationCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_basic_auth_isSet) {
        obj.insert(QString("BasicAuth"), ::OpenAPI::toJsonValue(m_basic_auth));
    }
    if (m_client_certificate_tls_auth_isSet) {
        obj.insert(QString("ClientCertificateTlsAuth"), ::OpenAPI::toJsonValue(m_client_certificate_tls_auth));
    }
    if (m_sasl_scram256_auth_isSet) {
        obj.insert(QString("SaslScram256Auth"), ::OpenAPI::toJsonValue(m_sasl_scram256_auth));
    }
    if (m_sasl_scram512_auth_isSet) {
        obj.insert(QString("SaslScram512Auth"), ::OpenAPI::toJsonValue(m_sasl_scram512_auth));
    }
    return obj;
}

QString OAISelfManagedKafkaAccessConfigurationCredentials::getBasicAuth() const {
    return m_basic_auth;
}
void OAISelfManagedKafkaAccessConfigurationCredentials::setBasicAuth(const QString &basic_auth) {
    m_basic_auth = basic_auth;
    m_basic_auth_isSet = true;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::is_basic_auth_Set() const{
    return m_basic_auth_isSet;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::is_basic_auth_Valid() const{
    return m_basic_auth_isValid;
}

QString OAISelfManagedKafkaAccessConfigurationCredentials::getClientCertificateTlsAuth() const {
    return m_client_certificate_tls_auth;
}
void OAISelfManagedKafkaAccessConfigurationCredentials::setClientCertificateTlsAuth(const QString &client_certificate_tls_auth) {
    m_client_certificate_tls_auth = client_certificate_tls_auth;
    m_client_certificate_tls_auth_isSet = true;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::is_client_certificate_tls_auth_Set() const{
    return m_client_certificate_tls_auth_isSet;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::is_client_certificate_tls_auth_Valid() const{
    return m_client_certificate_tls_auth_isValid;
}

QString OAISelfManagedKafkaAccessConfigurationCredentials::getSaslScram256Auth() const {
    return m_sasl_scram256_auth;
}
void OAISelfManagedKafkaAccessConfigurationCredentials::setSaslScram256Auth(const QString &sasl_scram256_auth) {
    m_sasl_scram256_auth = sasl_scram256_auth;
    m_sasl_scram256_auth_isSet = true;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::is_sasl_scram256_auth_Set() const{
    return m_sasl_scram256_auth_isSet;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::is_sasl_scram256_auth_Valid() const{
    return m_sasl_scram256_auth_isValid;
}

QString OAISelfManagedKafkaAccessConfigurationCredentials::getSaslScram512Auth() const {
    return m_sasl_scram512_auth;
}
void OAISelfManagedKafkaAccessConfigurationCredentials::setSaslScram512Auth(const QString &sasl_scram512_auth) {
    m_sasl_scram512_auth = sasl_scram512_auth;
    m_sasl_scram512_auth_isSet = true;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::is_sasl_scram512_auth_Set() const{
    return m_sasl_scram512_auth_isSet;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::is_sasl_scram512_auth_Valid() const{
    return m_sasl_scram512_auth_isValid;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basic_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_tls_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sasl_scram256_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sasl_scram512_auth_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelfManagedKafkaAccessConfigurationCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
