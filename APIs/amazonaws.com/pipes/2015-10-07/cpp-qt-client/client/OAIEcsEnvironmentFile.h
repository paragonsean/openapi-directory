/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEcsEnvironmentFile.h
 *
 * &lt;p&gt;A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a &lt;code&gt;.env&lt;/code&gt; file extension. Each line in an environment file should contain an environment variable in &lt;code&gt;VARIABLE&#x3D;VALUE&lt;/code&gt; format. Lines beginning with &lt;code&gt;#&lt;/code&gt; are treated as comments and are ignored. For more information about the environment variable file syntax, see &lt;a href&#x3D;\&quot;https://docs.docker.com/compose/env-file/\&quot;&gt;Declare default environment variables in file&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If there are environment variables specified using the &lt;code&gt;environment&lt;/code&gt; parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they&#39;re processed from the top down. We recommend that you use unique variable names. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html\&quot;&gt;Specifying environment variables&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This parameter is only supported for tasks hosted on Fargate using the following platform versions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Linux platform version &lt;code&gt;1.4.0&lt;/code&gt; or later.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Windows platform version &lt;code&gt;1.0.0&lt;/code&gt; or later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIEcsEnvironmentFile_H
#define OAIEcsEnvironmentFile_H

#include <QJsonObject>

#include "OAIEcsEnvironmentFileType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEcsEnvironmentFile : public OAIObject {
public:
    OAIEcsEnvironmentFile();
    OAIEcsEnvironmentFile(QString json);
    ~OAIEcsEnvironmentFile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEcsEnvironmentFileType getType() const;
    void setType(const OAIEcsEnvironmentFileType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEcsEnvironmentFileType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEcsEnvironmentFile)

#endif // OAIEcsEnvironmentFile_H
