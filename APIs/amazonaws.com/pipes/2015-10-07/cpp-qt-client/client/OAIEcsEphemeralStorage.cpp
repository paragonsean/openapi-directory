/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcsEphemeralStorage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcsEphemeralStorage::OAIEcsEphemeralStorage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcsEphemeralStorage::OAIEcsEphemeralStorage() {
    this->initializeModel();
}

OAIEcsEphemeralStorage::~OAIEcsEphemeralStorage() {}

void OAIEcsEphemeralStorage::initializeModel() {

    m_size_in_gi_b_isSet = false;
    m_size_in_gi_b_isValid = false;
}

void OAIEcsEphemeralStorage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcsEphemeralStorage::fromJsonObject(QJsonObject json) {

    m_size_in_gi_b_isValid = ::OpenAPI::fromJsonValue(m_size_in_gi_b, json[QString("sizeInGiB")]);
    m_size_in_gi_b_isSet = !json[QString("sizeInGiB")].isNull() && m_size_in_gi_b_isValid;
}

QString OAIEcsEphemeralStorage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcsEphemeralStorage::asJsonObject() const {
    QJsonObject obj;
    if (m_size_in_gi_b_isSet) {
        obj.insert(QString("sizeInGiB"), ::OpenAPI::toJsonValue(m_size_in_gi_b));
    }
    return obj;
}

qint32 OAIEcsEphemeralStorage::getSizeInGiB() const {
    return m_size_in_gi_b;
}
void OAIEcsEphemeralStorage::setSizeInGiB(const qint32 &size_in_gi_b) {
    m_size_in_gi_b = size_in_gi_b;
    m_size_in_gi_b_isSet = true;
}

bool OAIEcsEphemeralStorage::is_size_in_gi_b_Set() const{
    return m_size_in_gi_b_isSet;
}

bool OAIEcsEphemeralStorage::is_size_in_gi_b_Valid() const{
    return m_size_in_gi_b_isValid;
}

bool OAIEcsEphemeralStorage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_size_in_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcsEphemeralStorage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_size_in_gi_b_isValid && true;
}

} // namespace OpenAPI
