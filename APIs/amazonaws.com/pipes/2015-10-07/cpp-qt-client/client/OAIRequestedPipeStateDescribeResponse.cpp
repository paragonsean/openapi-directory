/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestedPipeStateDescribeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestedPipeStateDescribeResponse::OAIRequestedPipeStateDescribeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestedPipeStateDescribeResponse::OAIRequestedPipeStateDescribeResponse() {
    this->initializeModel();
}

OAIRequestedPipeStateDescribeResponse::~OAIRequestedPipeStateDescribeResponse() {}

void OAIRequestedPipeStateDescribeResponse::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRequestedPipeStateDescribeResponse::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRequestedPipeStateDescribeResponse::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRequestedPipeStateDescribeResponse::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRequestedPipeStateDescribeResponse::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRequestedPipeStateDescribeResponse::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRequestedPipeStateDescribeResponse::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRequestedPipeStateDescribeResponse::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRequestedPipeStateDescribeResponse::RUNNING:
            val = "RUNNING";
            break;
        case eOAIRequestedPipeStateDescribeResponse::STOPPED:
            val = "STOPPED";
            break;
        case eOAIRequestedPipeStateDescribeResponse::DELETED:
            val = "DELETED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRequestedPipeStateDescribeResponse::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRequestedPipeStateDescribeResponse::eOAIRequestedPipeStateDescribeResponse OAIRequestedPipeStateDescribeResponse::getValue() const {
    return m_value;
}

void OAIRequestedPipeStateDescribeResponse::setValue(const OAIRequestedPipeStateDescribeResponse::eOAIRequestedPipeStateDescribeResponse& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRequestedPipeStateDescribeResponse::isSet() const {
    
    return m_value_isSet;
}

bool OAIRequestedPipeStateDescribeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
