/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeTargetEventBridgeEventBusParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeTargetEventBridgeEventBusParameters::OAIPipeTargetEventBridgeEventBusParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeTargetEventBridgeEventBusParameters::OAIPipeTargetEventBridgeEventBusParameters() {
    this->initializeModel();
}

OAIPipeTargetEventBridgeEventBusParameters::~OAIPipeTargetEventBridgeEventBusParameters() {}

void OAIPipeTargetEventBridgeEventBusParameters::initializeModel() {

    m_detail_type_isSet = false;
    m_detail_type_isValid = false;

    m_endpoint_id_isSet = false;
    m_endpoint_id_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIPipeTargetEventBridgeEventBusParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeTargetEventBridgeEventBusParameters::fromJsonObject(QJsonObject json) {

    m_detail_type_isValid = ::OpenAPI::fromJsonValue(m_detail_type, json[QString("DetailType")]);
    m_detail_type_isSet = !json[QString("DetailType")].isNull() && m_detail_type_isValid;

    m_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_endpoint_id, json[QString("EndpointId")]);
    m_endpoint_id_isSet = !json[QString("EndpointId")].isNull() && m_endpoint_id_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;
}

QString OAIPipeTargetEventBridgeEventBusParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeTargetEventBridgeEventBusParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_type_isSet) {
        obj.insert(QString("DetailType"), ::OpenAPI::toJsonValue(m_detail_type));
    }
    if (m_endpoint_id_isSet) {
        obj.insert(QString("EndpointId"), ::OpenAPI::toJsonValue(m_endpoint_id));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_time_isSet) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAIPipeTargetEventBridgeEventBusParameters::getDetailType() const {
    return m_detail_type;
}
void OAIPipeTargetEventBridgeEventBusParameters::setDetailType(const QString &detail_type) {
    m_detail_type = detail_type;
    m_detail_type_isSet = true;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_detail_type_Set() const{
    return m_detail_type_isSet;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_detail_type_Valid() const{
    return m_detail_type_isValid;
}

QString OAIPipeTargetEventBridgeEventBusParameters::getEndpointId() const {
    return m_endpoint_id;
}
void OAIPipeTargetEventBridgeEventBusParameters::setEndpointId(const QString &endpoint_id) {
    m_endpoint_id = endpoint_id;
    m_endpoint_id_isSet = true;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_endpoint_id_Set() const{
    return m_endpoint_id_isSet;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_endpoint_id_Valid() const{
    return m_endpoint_id_isValid;
}

QList OAIPipeTargetEventBridgeEventBusParameters::getResources() const {
    return m_resources;
}
void OAIPipeTargetEventBridgeEventBusParameters::setResources(const QList &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIPipeTargetEventBridgeEventBusParameters::getSource() const {
    return m_source;
}
void OAIPipeTargetEventBridgeEventBusParameters::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPipeTargetEventBridgeEventBusParameters::getTime() const {
    return m_time;
}
void OAIPipeTargetEventBridgeEventBusParameters::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_time_Set() const{
    return m_time_isSet;
}

bool OAIPipeTargetEventBridgeEventBusParameters::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIPipeTargetEventBridgeEventBusParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeTargetEventBridgeEventBusParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
