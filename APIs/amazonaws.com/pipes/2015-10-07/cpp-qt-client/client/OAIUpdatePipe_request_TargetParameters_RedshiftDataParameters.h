/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters.h
 *
 * 
 */

#ifndef OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters_H
#define OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters : public OAIObject {
public:
    OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters();
    OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters(QString json);
    ~OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDatabase() const;
    void setDatabase(const QString &database);
    bool is_database_Set() const;
    bool is_database_Valid() const;

    QString getDbUser() const;
    void setDbUser(const QString &db_user);
    bool is_db_user_Set() const;
    bool is_db_user_Valid() const;

    QString getSecretManagerArn() const;
    void setSecretManagerArn(const QString &secret_manager_arn);
    bool is_secret_manager_arn_Set() const;
    bool is_secret_manager_arn_Valid() const;

    QList getSqls() const;
    void setSqls(const QList &sqls);
    bool is_sqls_Set() const;
    bool is_sqls_Valid() const;

    QString getStatementName() const;
    void setStatementName(const QString &statement_name);
    bool is_statement_name_Set() const;
    bool is_statement_name_Valid() const;

    bool getWithEvent() const;
    void setWithEvent(const bool &with_event);
    bool is_with_event_Set() const;
    bool is_with_event_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_database;
    bool m_database_isSet;
    bool m_database_isValid;

    QString m_db_user;
    bool m_db_user_isSet;
    bool m_db_user_isValid;

    QString m_secret_manager_arn;
    bool m_secret_manager_arn_isSet;
    bool m_secret_manager_arn_isValid;

    QList m_sqls;
    bool m_sqls_isSet;
    bool m_sqls_isValid;

    QString m_statement_name;
    bool m_statement_name_isSet;
    bool m_statement_name_isValid;

    bool m_with_event;
    bool m_with_event_isSet;
    bool m_with_event_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters)

#endif // OAIUpdatePipe_request_TargetParameters_RedshiftDataParameters_H
