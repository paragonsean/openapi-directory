/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEcsEphemeralStorage.h
 *
 * &lt;p&gt;The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html\&quot;&gt;Fargate task storage&lt;/a&gt; in the &lt;i&gt;Amazon ECS User Guide for Fargate&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only supported for tasks hosted on Fargate using Linux platform version &lt;code&gt;1.4.0&lt;/code&gt; or later. This parameter is not supported for Windows containers on Fargate.&lt;/p&gt; &lt;/note&gt;
 */

#ifndef OAIEcsEphemeralStorage_H
#define OAIEcsEphemeralStorage_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEcsEphemeralStorage : public OAIObject {
public:
    OAIEcsEphemeralStorage();
    OAIEcsEphemeralStorage(QString json);
    ~OAIEcsEphemeralStorage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getSizeInGiB() const;
    void setSizeInGiB(const qint32 &size_in_gi_b);
    bool is_size_in_gi_b_Set() const;
    bool is_size_in_gi_b_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_size_in_gi_b;
    bool m_size_in_gi_b_isSet;
    bool m_size_in_gi_b_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEcsEphemeralStorage)

#endif // OAIEcsEphemeralStorage_H
