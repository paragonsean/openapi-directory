/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeSourceManagedStreamingKafkaParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeSourceManagedStreamingKafkaParameters::OAIPipeSourceManagedStreamingKafkaParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeSourceManagedStreamingKafkaParameters::OAIPipeSourceManagedStreamingKafkaParameters() {
    this->initializeModel();
}

OAIPipeSourceManagedStreamingKafkaParameters::~OAIPipeSourceManagedStreamingKafkaParameters() {}

void OAIPipeSourceManagedStreamingKafkaParameters::initializeModel() {

    m_batch_size_isSet = false;
    m_batch_size_isValid = false;

    m_consumer_group_id_isSet = false;
    m_consumer_group_id_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_maximum_batching_window_in_seconds_isSet = false;
    m_maximum_batching_window_in_seconds_isValid = false;

    m_starting_position_isSet = false;
    m_starting_position_isValid = false;

    m_topic_name_isSet = false;
    m_topic_name_isValid = false;
}

void OAIPipeSourceManagedStreamingKafkaParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeSourceManagedStreamingKafkaParameters::fromJsonObject(QJsonObject json) {

    m_batch_size_isValid = ::OpenAPI::fromJsonValue(m_batch_size, json[QString("BatchSize")]);
    m_batch_size_isSet = !json[QString("BatchSize")].isNull() && m_batch_size_isValid;

    m_consumer_group_id_isValid = ::OpenAPI::fromJsonValue(m_consumer_group_id, json[QString("ConsumerGroupID")]);
    m_consumer_group_id_isSet = !json[QString("ConsumerGroupID")].isNull() && m_consumer_group_id_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;

    m_maximum_batching_window_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_maximum_batching_window_in_seconds, json[QString("MaximumBatchingWindowInSeconds")]);
    m_maximum_batching_window_in_seconds_isSet = !json[QString("MaximumBatchingWindowInSeconds")].isNull() && m_maximum_batching_window_in_seconds_isValid;

    m_starting_position_isValid = ::OpenAPI::fromJsonValue(m_starting_position, json[QString("StartingPosition")]);
    m_starting_position_isSet = !json[QString("StartingPosition")].isNull() && m_starting_position_isValid;

    m_topic_name_isValid = ::OpenAPI::fromJsonValue(m_topic_name, json[QString("TopicName")]);
    m_topic_name_isSet = !json[QString("TopicName")].isNull() && m_topic_name_isValid;
}

QString OAIPipeSourceManagedStreamingKafkaParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeSourceManagedStreamingKafkaParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_size_isSet) {
        obj.insert(QString("BatchSize"), ::OpenAPI::toJsonValue(m_batch_size));
    }
    if (m_consumer_group_id_isSet) {
        obj.insert(QString("ConsumerGroupID"), ::OpenAPI::toJsonValue(m_consumer_group_id));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_maximum_batching_window_in_seconds_isSet) {
        obj.insert(QString("MaximumBatchingWindowInSeconds"), ::OpenAPI::toJsonValue(m_maximum_batching_window_in_seconds));
    }
    if (m_starting_position.isSet()) {
        obj.insert(QString("StartingPosition"), ::OpenAPI::toJsonValue(m_starting_position));
    }
    if (m_topic_name_isSet) {
        obj.insert(QString("TopicName"), ::OpenAPI::toJsonValue(m_topic_name));
    }
    return obj;
}

qint32 OAIPipeSourceManagedStreamingKafkaParameters::getBatchSize() const {
    return m_batch_size;
}
void OAIPipeSourceManagedStreamingKafkaParameters::setBatchSize(const qint32 &batch_size) {
    m_batch_size = batch_size;
    m_batch_size_isSet = true;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_batch_size_Set() const{
    return m_batch_size_isSet;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_batch_size_Valid() const{
    return m_batch_size_isValid;
}

QString OAIPipeSourceManagedStreamingKafkaParameters::getConsumerGroupId() const {
    return m_consumer_group_id;
}
void OAIPipeSourceManagedStreamingKafkaParameters::setConsumerGroupId(const QString &consumer_group_id) {
    m_consumer_group_id = consumer_group_id;
    m_consumer_group_id_isSet = true;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_consumer_group_id_Set() const{
    return m_consumer_group_id_isSet;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_consumer_group_id_Valid() const{
    return m_consumer_group_id_isValid;
}

OAIPipeSourceManagedStreamingKafkaParameters_Credentials OAIPipeSourceManagedStreamingKafkaParameters::getCredentials() const {
    return m_credentials;
}
void OAIPipeSourceManagedStreamingKafkaParameters::setCredentials(const OAIPipeSourceManagedStreamingKafkaParameters_Credentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_credentials_Valid() const{
    return m_credentials_isValid;
}

qint32 OAIPipeSourceManagedStreamingKafkaParameters::getMaximumBatchingWindowInSeconds() const {
    return m_maximum_batching_window_in_seconds;
}
void OAIPipeSourceManagedStreamingKafkaParameters::setMaximumBatchingWindowInSeconds(const qint32 &maximum_batching_window_in_seconds) {
    m_maximum_batching_window_in_seconds = maximum_batching_window_in_seconds;
    m_maximum_batching_window_in_seconds_isSet = true;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_maximum_batching_window_in_seconds_Set() const{
    return m_maximum_batching_window_in_seconds_isSet;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_maximum_batching_window_in_seconds_Valid() const{
    return m_maximum_batching_window_in_seconds_isValid;
}

OAIMSKStartPosition OAIPipeSourceManagedStreamingKafkaParameters::getStartingPosition() const {
    return m_starting_position;
}
void OAIPipeSourceManagedStreamingKafkaParameters::setStartingPosition(const OAIMSKStartPosition &starting_position) {
    m_starting_position = starting_position;
    m_starting_position_isSet = true;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_starting_position_Set() const{
    return m_starting_position_isSet;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_starting_position_Valid() const{
    return m_starting_position_isValid;
}

QString OAIPipeSourceManagedStreamingKafkaParameters::getTopicName() const {
    return m_topic_name;
}
void OAIPipeSourceManagedStreamingKafkaParameters::setTopicName(const QString &topic_name) {
    m_topic_name = topic_name;
    m_topic_name_isSet = true;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_topic_name_Set() const{
    return m_topic_name_isSet;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::is_topic_name_Valid() const{
    return m_topic_name_isValid;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_batching_window_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeSourceManagedStreamingKafkaParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_topic_name_isValid && true;
}

} // namespace OpenAPI
