/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePipeResponse_EnrichmentParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePipeResponse_EnrichmentParameters::OAIDescribePipeResponse_EnrichmentParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePipeResponse_EnrichmentParameters::OAIDescribePipeResponse_EnrichmentParameters() {
    this->initializeModel();
}

OAIDescribePipeResponse_EnrichmentParameters::~OAIDescribePipeResponse_EnrichmentParameters() {}

void OAIDescribePipeResponse_EnrichmentParameters::initializeModel() {

    m_http_parameters_isSet = false;
    m_http_parameters_isValid = false;

    m_input_template_isSet = false;
    m_input_template_isValid = false;
}

void OAIDescribePipeResponse_EnrichmentParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePipeResponse_EnrichmentParameters::fromJsonObject(QJsonObject json) {

    m_http_parameters_isValid = ::OpenAPI::fromJsonValue(m_http_parameters, json[QString("HttpParameters")]);
    m_http_parameters_isSet = !json[QString("HttpParameters")].isNull() && m_http_parameters_isValid;

    m_input_template_isValid = ::OpenAPI::fromJsonValue(m_input_template, json[QString("InputTemplate")]);
    m_input_template_isSet = !json[QString("InputTemplate")].isNull() && m_input_template_isValid;
}

QString OAIDescribePipeResponse_EnrichmentParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePipeResponse_EnrichmentParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_http_parameters.isSet()) {
        obj.insert(QString("HttpParameters"), ::OpenAPI::toJsonValue(m_http_parameters));
    }
    if (m_input_template_isSet) {
        obj.insert(QString("InputTemplate"), ::OpenAPI::toJsonValue(m_input_template));
    }
    return obj;
}

OAIUpdatePipe_request_EnrichmentParameters_HttpParameters OAIDescribePipeResponse_EnrichmentParameters::getHttpParameters() const {
    return m_http_parameters;
}
void OAIDescribePipeResponse_EnrichmentParameters::setHttpParameters(const OAIUpdatePipe_request_EnrichmentParameters_HttpParameters &http_parameters) {
    m_http_parameters = http_parameters;
    m_http_parameters_isSet = true;
}

bool OAIDescribePipeResponse_EnrichmentParameters::is_http_parameters_Set() const{
    return m_http_parameters_isSet;
}

bool OAIDescribePipeResponse_EnrichmentParameters::is_http_parameters_Valid() const{
    return m_http_parameters_isValid;
}

QString OAIDescribePipeResponse_EnrichmentParameters::getInputTemplate() const {
    return m_input_template;
}
void OAIDescribePipeResponse_EnrichmentParameters::setInputTemplate(const QString &input_template) {
    m_input_template = input_template;
    m_input_template_isSet = true;
}

bool OAIDescribePipeResponse_EnrichmentParameters::is_input_template_Set() const{
    return m_input_template_isSet;
}

bool OAIDescribePipeResponse_EnrichmentParameters::is_input_template_Valid() const{
    return m_input_template_isValid;
}

bool OAIDescribePipeResponse_EnrichmentParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePipeResponse_EnrichmentParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
