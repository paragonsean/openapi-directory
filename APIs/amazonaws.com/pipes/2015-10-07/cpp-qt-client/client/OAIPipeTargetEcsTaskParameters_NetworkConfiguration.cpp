/**
 * Amazon EventBridge Pipes
 * Amazon EventBridge Pipes connects event sources to targets. Pipes reduces the need for specialized knowledge and integration code when developing event driven architectures. This helps ensures consistency across your companyâ€™s applications. With Pipes, the target can be any available EventBridge target. To set up a pipe, you select the event source, add optional event filtering, define optional enrichment, and select the target for the event data. 
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeTargetEcsTaskParameters_NetworkConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeTargetEcsTaskParameters_NetworkConfiguration::OAIPipeTargetEcsTaskParameters_NetworkConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeTargetEcsTaskParameters_NetworkConfiguration::OAIPipeTargetEcsTaskParameters_NetworkConfiguration() {
    this->initializeModel();
}

OAIPipeTargetEcsTaskParameters_NetworkConfiguration::~OAIPipeTargetEcsTaskParameters_NetworkConfiguration() {}

void OAIPipeTargetEcsTaskParameters_NetworkConfiguration::initializeModel() {

    m_awsvpc_configuration_isSet = false;
    m_awsvpc_configuration_isValid = false;
}

void OAIPipeTargetEcsTaskParameters_NetworkConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeTargetEcsTaskParameters_NetworkConfiguration::fromJsonObject(QJsonObject json) {

    m_awsvpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_awsvpc_configuration, json[QString("awsvpcConfiguration")]);
    m_awsvpc_configuration_isSet = !json[QString("awsvpcConfiguration")].isNull() && m_awsvpc_configuration_isValid;
}

QString OAIPipeTargetEcsTaskParameters_NetworkConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeTargetEcsTaskParameters_NetworkConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_awsvpc_configuration.isSet()) {
        obj.insert(QString("awsvpcConfiguration"), ::OpenAPI::toJsonValue(m_awsvpc_configuration));
    }
    return obj;
}

OAINetworkConfiguration_awsvpcConfiguration OAIPipeTargetEcsTaskParameters_NetworkConfiguration::getAwsvpcConfiguration() const {
    return m_awsvpc_configuration;
}
void OAIPipeTargetEcsTaskParameters_NetworkConfiguration::setAwsvpcConfiguration(const OAINetworkConfiguration_awsvpcConfiguration &awsvpc_configuration) {
    m_awsvpc_configuration = awsvpc_configuration;
    m_awsvpc_configuration_isSet = true;
}

bool OAIPipeTargetEcsTaskParameters_NetworkConfiguration::is_awsvpc_configuration_Set() const{
    return m_awsvpc_configuration_isSet;
}

bool OAIPipeTargetEcsTaskParameters_NetworkConfiguration::is_awsvpc_configuration_Valid() const{
    return m_awsvpc_configuration_isValid;
}

bool OAIPipeTargetEcsTaskParameters_NetworkConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_awsvpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeTargetEcsTaskParameters_NetworkConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
