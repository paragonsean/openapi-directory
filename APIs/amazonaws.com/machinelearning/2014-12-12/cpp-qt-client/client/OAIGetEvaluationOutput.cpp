/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEvaluationOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEvaluationOutput::OAIGetEvaluationOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEvaluationOutput::OAIGetEvaluationOutput() {
    this->initializeModel();
}

OAIGetEvaluationOutput::~OAIGetEvaluationOutput() {}

void OAIGetEvaluationOutput::initializeModel() {

    m_evaluation_id_isSet = false;
    m_evaluation_id_isValid = false;

    m_ml_model_id_isSet = false;
    m_ml_model_id_isValid = false;

    m_evaluation_data_source_id_isSet = false;
    m_evaluation_data_source_id_isValid = false;

    m_input_data_location_s3_isSet = false;
    m_input_data_location_s3_isValid = false;

    m_created_by_iam_user_isSet = false;
    m_created_by_iam_user_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_performance_metrics_isSet = false;
    m_performance_metrics_isValid = false;

    m_log_uri_isSet = false;
    m_log_uri_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_compute_time_isSet = false;
    m_compute_time_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;
}

void OAIGetEvaluationOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEvaluationOutput::fromJsonObject(QJsonObject json) {

    m_evaluation_id_isValid = ::OpenAPI::fromJsonValue(m_evaluation_id, json[QString("EvaluationId")]);
    m_evaluation_id_isSet = !json[QString("EvaluationId")].isNull() && m_evaluation_id_isValid;

    m_ml_model_id_isValid = ::OpenAPI::fromJsonValue(m_ml_model_id, json[QString("MLModelId")]);
    m_ml_model_id_isSet = !json[QString("MLModelId")].isNull() && m_ml_model_id_isValid;

    m_evaluation_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_evaluation_data_source_id, json[QString("EvaluationDataSourceId")]);
    m_evaluation_data_source_id_isSet = !json[QString("EvaluationDataSourceId")].isNull() && m_evaluation_data_source_id_isValid;

    m_input_data_location_s3_isValid = ::OpenAPI::fromJsonValue(m_input_data_location_s3, json[QString("InputDataLocationS3")]);
    m_input_data_location_s3_isSet = !json[QString("InputDataLocationS3")].isNull() && m_input_data_location_s3_isValid;

    m_created_by_iam_user_isValid = ::OpenAPI::fromJsonValue(m_created_by_iam_user, json[QString("CreatedByIamUser")]);
    m_created_by_iam_user_isSet = !json[QString("CreatedByIamUser")].isNull() && m_created_by_iam_user_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_performance_metrics_isValid = ::OpenAPI::fromJsonValue(m_performance_metrics, json[QString("PerformanceMetrics")]);
    m_performance_metrics_isSet = !json[QString("PerformanceMetrics")].isNull() && m_performance_metrics_isValid;

    m_log_uri_isValid = ::OpenAPI::fromJsonValue(m_log_uri, json[QString("LogUri")]);
    m_log_uri_isSet = !json[QString("LogUri")].isNull() && m_log_uri_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_compute_time_isValid = ::OpenAPI::fromJsonValue(m_compute_time, json[QString("ComputeTime")]);
    m_compute_time_isSet = !json[QString("ComputeTime")].isNull() && m_compute_time_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("FinishedAt")]);
    m_finished_at_isSet = !json[QString("FinishedAt")].isNull() && m_finished_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("StartedAt")]);
    m_started_at_isSet = !json[QString("StartedAt")].isNull() && m_started_at_isValid;
}

QString OAIGetEvaluationOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEvaluationOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_id_isSet) {
        obj.insert(QString("EvaluationId"), ::OpenAPI::toJsonValue(m_evaluation_id));
    }
    if (m_ml_model_id_isSet) {
        obj.insert(QString("MLModelId"), ::OpenAPI::toJsonValue(m_ml_model_id));
    }
    if (m_evaluation_data_source_id_isSet) {
        obj.insert(QString("EvaluationDataSourceId"), ::OpenAPI::toJsonValue(m_evaluation_data_source_id));
    }
    if (m_input_data_location_s3_isSet) {
        obj.insert(QString("InputDataLocationS3"), ::OpenAPI::toJsonValue(m_input_data_location_s3));
    }
    if (m_created_by_iam_user_isSet) {
        obj.insert(QString("CreatedByIamUser"), ::OpenAPI::toJsonValue(m_created_by_iam_user));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_performance_metrics.isSet()) {
        obj.insert(QString("PerformanceMetrics"), ::OpenAPI::toJsonValue(m_performance_metrics));
    }
    if (m_log_uri_isSet) {
        obj.insert(QString("LogUri"), ::OpenAPI::toJsonValue(m_log_uri));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_compute_time_isSet) {
        obj.insert(QString("ComputeTime"), ::OpenAPI::toJsonValue(m_compute_time));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("FinishedAt"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("StartedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    return obj;
}

QString OAIGetEvaluationOutput::getEvaluationId() const {
    return m_evaluation_id;
}
void OAIGetEvaluationOutput::setEvaluationId(const QString &evaluation_id) {
    m_evaluation_id = evaluation_id;
    m_evaluation_id_isSet = true;
}

bool OAIGetEvaluationOutput::is_evaluation_id_Set() const{
    return m_evaluation_id_isSet;
}

bool OAIGetEvaluationOutput::is_evaluation_id_Valid() const{
    return m_evaluation_id_isValid;
}

QString OAIGetEvaluationOutput::getMlModelId() const {
    return m_ml_model_id;
}
void OAIGetEvaluationOutput::setMlModelId(const QString &ml_model_id) {
    m_ml_model_id = ml_model_id;
    m_ml_model_id_isSet = true;
}

bool OAIGetEvaluationOutput::is_ml_model_id_Set() const{
    return m_ml_model_id_isSet;
}

bool OAIGetEvaluationOutput::is_ml_model_id_Valid() const{
    return m_ml_model_id_isValid;
}

QString OAIGetEvaluationOutput::getEvaluationDataSourceId() const {
    return m_evaluation_data_source_id;
}
void OAIGetEvaluationOutput::setEvaluationDataSourceId(const QString &evaluation_data_source_id) {
    m_evaluation_data_source_id = evaluation_data_source_id;
    m_evaluation_data_source_id_isSet = true;
}

bool OAIGetEvaluationOutput::is_evaluation_data_source_id_Set() const{
    return m_evaluation_data_source_id_isSet;
}

bool OAIGetEvaluationOutput::is_evaluation_data_source_id_Valid() const{
    return m_evaluation_data_source_id_isValid;
}

QString OAIGetEvaluationOutput::getInputDataLocationS3() const {
    return m_input_data_location_s3;
}
void OAIGetEvaluationOutput::setInputDataLocationS3(const QString &input_data_location_s3) {
    m_input_data_location_s3 = input_data_location_s3;
    m_input_data_location_s3_isSet = true;
}

bool OAIGetEvaluationOutput::is_input_data_location_s3_Set() const{
    return m_input_data_location_s3_isSet;
}

bool OAIGetEvaluationOutput::is_input_data_location_s3_Valid() const{
    return m_input_data_location_s3_isValid;
}

QString OAIGetEvaluationOutput::getCreatedByIamUser() const {
    return m_created_by_iam_user;
}
void OAIGetEvaluationOutput::setCreatedByIamUser(const QString &created_by_iam_user) {
    m_created_by_iam_user = created_by_iam_user;
    m_created_by_iam_user_isSet = true;
}

bool OAIGetEvaluationOutput::is_created_by_iam_user_Set() const{
    return m_created_by_iam_user_isSet;
}

bool OAIGetEvaluationOutput::is_created_by_iam_user_Valid() const{
    return m_created_by_iam_user_isValid;
}

QDateTime OAIGetEvaluationOutput::getCreatedAt() const {
    return m_created_at;
}
void OAIGetEvaluationOutput::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetEvaluationOutput::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetEvaluationOutput::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIGetEvaluationOutput::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetEvaluationOutput::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetEvaluationOutput::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetEvaluationOutput::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIGetEvaluationOutput::getName() const {
    return m_name;
}
void OAIGetEvaluationOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetEvaluationOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetEvaluationOutput::is_name_Valid() const{
    return m_name_isValid;
}

OAIEntityStatus OAIGetEvaluationOutput::getStatus() const {
    return m_status;
}
void OAIGetEvaluationOutput::setStatus(const OAIEntityStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetEvaluationOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetEvaluationOutput::is_status_Valid() const{
    return m_status_isValid;
}

OAIGetEvaluationOutput_PerformanceMetrics OAIGetEvaluationOutput::getPerformanceMetrics() const {
    return m_performance_metrics;
}
void OAIGetEvaluationOutput::setPerformanceMetrics(const OAIGetEvaluationOutput_PerformanceMetrics &performance_metrics) {
    m_performance_metrics = performance_metrics;
    m_performance_metrics_isSet = true;
}

bool OAIGetEvaluationOutput::is_performance_metrics_Set() const{
    return m_performance_metrics_isSet;
}

bool OAIGetEvaluationOutput::is_performance_metrics_Valid() const{
    return m_performance_metrics_isValid;
}

QString OAIGetEvaluationOutput::getLogUri() const {
    return m_log_uri;
}
void OAIGetEvaluationOutput::setLogUri(const QString &log_uri) {
    m_log_uri = log_uri;
    m_log_uri_isSet = true;
}

bool OAIGetEvaluationOutput::is_log_uri_Set() const{
    return m_log_uri_isSet;
}

bool OAIGetEvaluationOutput::is_log_uri_Valid() const{
    return m_log_uri_isValid;
}

QString OAIGetEvaluationOutput::getMessage() const {
    return m_message;
}
void OAIGetEvaluationOutput::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetEvaluationOutput::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetEvaluationOutput::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIGetEvaluationOutput::getComputeTime() const {
    return m_compute_time;
}
void OAIGetEvaluationOutput::setComputeTime(const qint32 &compute_time) {
    m_compute_time = compute_time;
    m_compute_time_isSet = true;
}

bool OAIGetEvaluationOutput::is_compute_time_Set() const{
    return m_compute_time_isSet;
}

bool OAIGetEvaluationOutput::is_compute_time_Valid() const{
    return m_compute_time_isValid;
}

QDateTime OAIGetEvaluationOutput::getFinishedAt() const {
    return m_finished_at;
}
void OAIGetEvaluationOutput::setFinishedAt(const QDateTime &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIGetEvaluationOutput::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIGetEvaluationOutput::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QDateTime OAIGetEvaluationOutput::getStartedAt() const {
    return m_started_at;
}
void OAIGetEvaluationOutput::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIGetEvaluationOutput::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIGetEvaluationOutput::is_started_at_Valid() const{
    return m_started_at_isValid;
}

bool OAIGetEvaluationOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ml_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_location_s3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_iam_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEvaluationOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
