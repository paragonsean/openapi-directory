/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMLModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMLModel::OAIMLModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMLModel::OAIMLModel() {
    this->initializeModel();
}

OAIMLModel::~OAIMLModel() {}

void OAIMLModel::initializeModel() {

    m_ml_model_id_isSet = false;
    m_ml_model_id_isValid = false;

    m_training_data_source_id_isSet = false;
    m_training_data_source_id_isValid = false;

    m_created_by_iam_user_isSet = false;
    m_created_by_iam_user_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_endpoint_info_isSet = false;
    m_endpoint_info_isValid = false;

    m_training_parameters_isSet = false;
    m_training_parameters_isValid = false;

    m_input_data_location_s3_isSet = false;
    m_input_data_location_s3_isValid = false;

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_ml_model_type_isSet = false;
    m_ml_model_type_isValid = false;

    m_score_threshold_isSet = false;
    m_score_threshold_isValid = false;

    m_score_threshold_last_updated_at_isSet = false;
    m_score_threshold_last_updated_at_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_compute_time_isSet = false;
    m_compute_time_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;
}

void OAIMLModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMLModel::fromJsonObject(QJsonObject json) {

    m_ml_model_id_isValid = ::OpenAPI::fromJsonValue(m_ml_model_id, json[QString("MLModelId")]);
    m_ml_model_id_isSet = !json[QString("MLModelId")].isNull() && m_ml_model_id_isValid;

    m_training_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_training_data_source_id, json[QString("TrainingDataSourceId")]);
    m_training_data_source_id_isSet = !json[QString("TrainingDataSourceId")].isNull() && m_training_data_source_id_isValid;

    m_created_by_iam_user_isValid = ::OpenAPI::fromJsonValue(m_created_by_iam_user, json[QString("CreatedByIamUser")]);
    m_created_by_iam_user_isSet = !json[QString("CreatedByIamUser")].isNull() && m_created_by_iam_user_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("SizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("SizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_endpoint_info_isValid = ::OpenAPI::fromJsonValue(m_endpoint_info, json[QString("EndpointInfo")]);
    m_endpoint_info_isSet = !json[QString("EndpointInfo")].isNull() && m_endpoint_info_isValid;

    m_training_parameters_isValid = ::OpenAPI::fromJsonValue(m_training_parameters, json[QString("TrainingParameters")]);
    m_training_parameters_isSet = !json[QString("TrainingParameters")].isNull() && m_training_parameters_isValid;

    m_input_data_location_s3_isValid = ::OpenAPI::fromJsonValue(m_input_data_location_s3, json[QString("InputDataLocationS3")]);
    m_input_data_location_s3_isSet = !json[QString("InputDataLocationS3")].isNull() && m_input_data_location_s3_isValid;

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("Algorithm")]);
    m_algorithm_isSet = !json[QString("Algorithm")].isNull() && m_algorithm_isValid;

    m_ml_model_type_isValid = ::OpenAPI::fromJsonValue(m_ml_model_type, json[QString("MLModelType")]);
    m_ml_model_type_isSet = !json[QString("MLModelType")].isNull() && m_ml_model_type_isValid;

    m_score_threshold_isValid = ::OpenAPI::fromJsonValue(m_score_threshold, json[QString("ScoreThreshold")]);
    m_score_threshold_isSet = !json[QString("ScoreThreshold")].isNull() && m_score_threshold_isValid;

    m_score_threshold_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_score_threshold_last_updated_at, json[QString("ScoreThresholdLastUpdatedAt")]);
    m_score_threshold_last_updated_at_isSet = !json[QString("ScoreThresholdLastUpdatedAt")].isNull() && m_score_threshold_last_updated_at_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_compute_time_isValid = ::OpenAPI::fromJsonValue(m_compute_time, json[QString("ComputeTime")]);
    m_compute_time_isSet = !json[QString("ComputeTime")].isNull() && m_compute_time_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("FinishedAt")]);
    m_finished_at_isSet = !json[QString("FinishedAt")].isNull() && m_finished_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("StartedAt")]);
    m_started_at_isSet = !json[QString("StartedAt")].isNull() && m_started_at_isValid;
}

QString OAIMLModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMLModel::asJsonObject() const {
    QJsonObject obj;
    if (m_ml_model_id_isSet) {
        obj.insert(QString("MLModelId"), ::OpenAPI::toJsonValue(m_ml_model_id));
    }
    if (m_training_data_source_id_isSet) {
        obj.insert(QString("TrainingDataSourceId"), ::OpenAPI::toJsonValue(m_training_data_source_id));
    }
    if (m_created_by_iam_user_isSet) {
        obj.insert(QString("CreatedByIamUser"), ::OpenAPI::toJsonValue(m_created_by_iam_user));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("SizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_endpoint_info.isSet()) {
        obj.insert(QString("EndpointInfo"), ::OpenAPI::toJsonValue(m_endpoint_info));
    }
    if (m_training_parameters.isSet()) {
        obj.insert(QString("TrainingParameters"), ::OpenAPI::toJsonValue(m_training_parameters));
    }
    if (m_input_data_location_s3_isSet) {
        obj.insert(QString("InputDataLocationS3"), ::OpenAPI::toJsonValue(m_input_data_location_s3));
    }
    if (m_algorithm.isSet()) {
        obj.insert(QString("Algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_ml_model_type.isSet()) {
        obj.insert(QString("MLModelType"), ::OpenAPI::toJsonValue(m_ml_model_type));
    }
    if (m_score_threshold_isSet) {
        obj.insert(QString("ScoreThreshold"), ::OpenAPI::toJsonValue(m_score_threshold));
    }
    if (m_score_threshold_last_updated_at_isSet) {
        obj.insert(QString("ScoreThresholdLastUpdatedAt"), ::OpenAPI::toJsonValue(m_score_threshold_last_updated_at));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_compute_time_isSet) {
        obj.insert(QString("ComputeTime"), ::OpenAPI::toJsonValue(m_compute_time));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("FinishedAt"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("StartedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    return obj;
}

QString OAIMLModel::getMlModelId() const {
    return m_ml_model_id;
}
void OAIMLModel::setMlModelId(const QString &ml_model_id) {
    m_ml_model_id = ml_model_id;
    m_ml_model_id_isSet = true;
}

bool OAIMLModel::is_ml_model_id_Set() const{
    return m_ml_model_id_isSet;
}

bool OAIMLModel::is_ml_model_id_Valid() const{
    return m_ml_model_id_isValid;
}

QString OAIMLModel::getTrainingDataSourceId() const {
    return m_training_data_source_id;
}
void OAIMLModel::setTrainingDataSourceId(const QString &training_data_source_id) {
    m_training_data_source_id = training_data_source_id;
    m_training_data_source_id_isSet = true;
}

bool OAIMLModel::is_training_data_source_id_Set() const{
    return m_training_data_source_id_isSet;
}

bool OAIMLModel::is_training_data_source_id_Valid() const{
    return m_training_data_source_id_isValid;
}

QString OAIMLModel::getCreatedByIamUser() const {
    return m_created_by_iam_user;
}
void OAIMLModel::setCreatedByIamUser(const QString &created_by_iam_user) {
    m_created_by_iam_user = created_by_iam_user;
    m_created_by_iam_user_isSet = true;
}

bool OAIMLModel::is_created_by_iam_user_Set() const{
    return m_created_by_iam_user_isSet;
}

bool OAIMLModel::is_created_by_iam_user_Valid() const{
    return m_created_by_iam_user_isValid;
}

QDateTime OAIMLModel::getCreatedAt() const {
    return m_created_at;
}
void OAIMLModel::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMLModel::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMLModel::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIMLModel::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIMLModel::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIMLModel::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIMLModel::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIMLModel::getName() const {
    return m_name;
}
void OAIMLModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMLModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMLModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIEntityStatus OAIMLModel::getStatus() const {
    return m_status;
}
void OAIMLModel::setStatus(const OAIEntityStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMLModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMLModel::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIMLModel::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIMLModel::setSizeInBytes(const qint32 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIMLModel::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIMLModel::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

OAIMLModel_EndpointInfo OAIMLModel::getEndpointInfo() const {
    return m_endpoint_info;
}
void OAIMLModel::setEndpointInfo(const OAIMLModel_EndpointInfo &endpoint_info) {
    m_endpoint_info = endpoint_info;
    m_endpoint_info_isSet = true;
}

bool OAIMLModel::is_endpoint_info_Set() const{
    return m_endpoint_info_isSet;
}

bool OAIMLModel::is_endpoint_info_Valid() const{
    return m_endpoint_info_isValid;
}

QMap OAIMLModel::getTrainingParameters() const {
    return m_training_parameters;
}
void OAIMLModel::setTrainingParameters(const QMap &training_parameters) {
    m_training_parameters = training_parameters;
    m_training_parameters_isSet = true;
}

bool OAIMLModel::is_training_parameters_Set() const{
    return m_training_parameters_isSet;
}

bool OAIMLModel::is_training_parameters_Valid() const{
    return m_training_parameters_isValid;
}

QString OAIMLModel::getInputDataLocationS3() const {
    return m_input_data_location_s3;
}
void OAIMLModel::setInputDataLocationS3(const QString &input_data_location_s3) {
    m_input_data_location_s3 = input_data_location_s3;
    m_input_data_location_s3_isSet = true;
}

bool OAIMLModel::is_input_data_location_s3_Set() const{
    return m_input_data_location_s3_isSet;
}

bool OAIMLModel::is_input_data_location_s3_Valid() const{
    return m_input_data_location_s3_isValid;
}

OAIAlgorithm OAIMLModel::getAlgorithm() const {
    return m_algorithm;
}
void OAIMLModel::setAlgorithm(const OAIAlgorithm &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIMLModel::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIMLModel::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

OAIMLModelType OAIMLModel::getMlModelType() const {
    return m_ml_model_type;
}
void OAIMLModel::setMlModelType(const OAIMLModelType &ml_model_type) {
    m_ml_model_type = ml_model_type;
    m_ml_model_type_isSet = true;
}

bool OAIMLModel::is_ml_model_type_Set() const{
    return m_ml_model_type_isSet;
}

bool OAIMLModel::is_ml_model_type_Valid() const{
    return m_ml_model_type_isValid;
}

float OAIMLModel::getScoreThreshold() const {
    return m_score_threshold;
}
void OAIMLModel::setScoreThreshold(const float &score_threshold) {
    m_score_threshold = score_threshold;
    m_score_threshold_isSet = true;
}

bool OAIMLModel::is_score_threshold_Set() const{
    return m_score_threshold_isSet;
}

bool OAIMLModel::is_score_threshold_Valid() const{
    return m_score_threshold_isValid;
}

QDateTime OAIMLModel::getScoreThresholdLastUpdatedAt() const {
    return m_score_threshold_last_updated_at;
}
void OAIMLModel::setScoreThresholdLastUpdatedAt(const QDateTime &score_threshold_last_updated_at) {
    m_score_threshold_last_updated_at = score_threshold_last_updated_at;
    m_score_threshold_last_updated_at_isSet = true;
}

bool OAIMLModel::is_score_threshold_last_updated_at_Set() const{
    return m_score_threshold_last_updated_at_isSet;
}

bool OAIMLModel::is_score_threshold_last_updated_at_Valid() const{
    return m_score_threshold_last_updated_at_isValid;
}

QString OAIMLModel::getMessage() const {
    return m_message;
}
void OAIMLModel::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMLModel::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMLModel::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIMLModel::getComputeTime() const {
    return m_compute_time;
}
void OAIMLModel::setComputeTime(const qint32 &compute_time) {
    m_compute_time = compute_time;
    m_compute_time_isSet = true;
}

bool OAIMLModel::is_compute_time_Set() const{
    return m_compute_time_isSet;
}

bool OAIMLModel::is_compute_time_Valid() const{
    return m_compute_time_isValid;
}

QDateTime OAIMLModel::getFinishedAt() const {
    return m_finished_at;
}
void OAIMLModel::setFinishedAt(const QDateTime &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIMLModel::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIMLModel::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QDateTime OAIMLModel::getStartedAt() const {
    return m_started_at;
}
void OAIMLModel::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIMLModel::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIMLModel::is_started_at_Valid() const{
    return m_started_at_isValid;
}

bool OAIMLModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ml_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_iam_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_location_s3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ml_model_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_threshold_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMLModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
