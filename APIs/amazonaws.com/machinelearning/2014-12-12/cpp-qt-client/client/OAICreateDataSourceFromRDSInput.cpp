/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSourceFromRDSInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSourceFromRDSInput::OAICreateDataSourceFromRDSInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSourceFromRDSInput::OAICreateDataSourceFromRDSInput() {
    this->initializeModel();
}

OAICreateDataSourceFromRDSInput::~OAICreateDataSourceFromRDSInput() {}

void OAICreateDataSourceFromRDSInput::initializeModel() {

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_data_source_name_isSet = false;
    m_data_source_name_isValid = false;

    m_rds_data_isSet = false;
    m_rds_data_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_compute_statistics_isSet = false;
    m_compute_statistics_isValid = false;
}

void OAICreateDataSourceFromRDSInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSourceFromRDSInput::fromJsonObject(QJsonObject json) {

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;

    m_data_source_name_isValid = ::OpenAPI::fromJsonValue(m_data_source_name, json[QString("DataSourceName")]);
    m_data_source_name_isSet = !json[QString("DataSourceName")].isNull() && m_data_source_name_isValid;

    m_rds_data_isValid = ::OpenAPI::fromJsonValue(m_rds_data, json[QString("RDSData")]);
    m_rds_data_isSet = !json[QString("RDSData")].isNull() && m_rds_data_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_compute_statistics_isValid = ::OpenAPI::fromJsonValue(m_compute_statistics, json[QString("ComputeStatistics")]);
    m_compute_statistics_isSet = !json[QString("ComputeStatistics")].isNull() && m_compute_statistics_isValid;
}

QString OAICreateDataSourceFromRDSInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSourceFromRDSInput::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_data_source_name_isSet) {
        obj.insert(QString("DataSourceName"), ::OpenAPI::toJsonValue(m_data_source_name));
    }
    if (m_rds_data.isSet()) {
        obj.insert(QString("RDSData"), ::OpenAPI::toJsonValue(m_rds_data));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_compute_statistics_isSet) {
        obj.insert(QString("ComputeStatistics"), ::OpenAPI::toJsonValue(m_compute_statistics));
    }
    return obj;
}

QString OAICreateDataSourceFromRDSInput::getDataSourceId() const {
    return m_data_source_id;
}
void OAICreateDataSourceFromRDSInput::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAICreateDataSourceFromRDSInput::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAICreateDataSourceFromRDSInput::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAICreateDataSourceFromRDSInput::getDataSourceName() const {
    return m_data_source_name;
}
void OAICreateDataSourceFromRDSInput::setDataSourceName(const QString &data_source_name) {
    m_data_source_name = data_source_name;
    m_data_source_name_isSet = true;
}

bool OAICreateDataSourceFromRDSInput::is_data_source_name_Set() const{
    return m_data_source_name_isSet;
}

bool OAICreateDataSourceFromRDSInput::is_data_source_name_Valid() const{
    return m_data_source_name_isValid;
}

OAICreateDataSourceFromRDSInput_RDSData OAICreateDataSourceFromRDSInput::getRdsData() const {
    return m_rds_data;
}
void OAICreateDataSourceFromRDSInput::setRdsData(const OAICreateDataSourceFromRDSInput_RDSData &rds_data) {
    m_rds_data = rds_data;
    m_rds_data_isSet = true;
}

bool OAICreateDataSourceFromRDSInput::is_rds_data_Set() const{
    return m_rds_data_isSet;
}

bool OAICreateDataSourceFromRDSInput::is_rds_data_Valid() const{
    return m_rds_data_isValid;
}

QString OAICreateDataSourceFromRDSInput::getRoleArn() const {
    return m_role_arn;
}
void OAICreateDataSourceFromRDSInput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateDataSourceFromRDSInput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateDataSourceFromRDSInput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAICreateDataSourceFromRDSInput::getComputeStatistics() const {
    return m_compute_statistics;
}
void OAICreateDataSourceFromRDSInput::setComputeStatistics(const bool &compute_statistics) {
    m_compute_statistics = compute_statistics;
    m_compute_statistics_isSet = true;
}

bool OAICreateDataSourceFromRDSInput::is_compute_statistics_Set() const{
    return m_compute_statistics_isSet;
}

bool OAICreateDataSourceFromRDSInput::is_compute_statistics_Valid() const{
    return m_compute_statistics_isValid;
}

bool OAICreateDataSourceFromRDSInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rds_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_statistics_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSourceFromRDSInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_id_isValid && m_rds_data_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
