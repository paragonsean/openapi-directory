/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRDSDataSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRDSDataSpec::OAIRDSDataSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRDSDataSpec::OAIRDSDataSpec() {
    this->initializeModel();
}

OAIRDSDataSpec::~OAIRDSDataSpec() {}

void OAIRDSDataSpec::initializeModel() {

    m_database_information_isSet = false;
    m_database_information_isValid = false;

    m_select_sql_query_isSet = false;
    m_select_sql_query_isValid = false;

    m_database_credentials_isSet = false;
    m_database_credentials_isValid = false;

    m_s3_staging_location_isSet = false;
    m_s3_staging_location_isValid = false;

    m_data_rearrangement_isSet = false;
    m_data_rearrangement_isValid = false;

    m_data_schema_isSet = false;
    m_data_schema_isValid = false;

    m_data_schema_uri_isSet = false;
    m_data_schema_uri_isValid = false;

    m_resource_role_isSet = false;
    m_resource_role_isValid = false;

    m_service_role_isSet = false;
    m_service_role_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;
}

void OAIRDSDataSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRDSDataSpec::fromJsonObject(QJsonObject json) {

    m_database_information_isValid = ::OpenAPI::fromJsonValue(m_database_information, json[QString("DatabaseInformation")]);
    m_database_information_isSet = !json[QString("DatabaseInformation")].isNull() && m_database_information_isValid;

    m_select_sql_query_isValid = ::OpenAPI::fromJsonValue(m_select_sql_query, json[QString("SelectSqlQuery")]);
    m_select_sql_query_isSet = !json[QString("SelectSqlQuery")].isNull() && m_select_sql_query_isValid;

    m_database_credentials_isValid = ::OpenAPI::fromJsonValue(m_database_credentials, json[QString("DatabaseCredentials")]);
    m_database_credentials_isSet = !json[QString("DatabaseCredentials")].isNull() && m_database_credentials_isValid;

    m_s3_staging_location_isValid = ::OpenAPI::fromJsonValue(m_s3_staging_location, json[QString("S3StagingLocation")]);
    m_s3_staging_location_isSet = !json[QString("S3StagingLocation")].isNull() && m_s3_staging_location_isValid;

    m_data_rearrangement_isValid = ::OpenAPI::fromJsonValue(m_data_rearrangement, json[QString("DataRearrangement")]);
    m_data_rearrangement_isSet = !json[QString("DataRearrangement")].isNull() && m_data_rearrangement_isValid;

    m_data_schema_isValid = ::OpenAPI::fromJsonValue(m_data_schema, json[QString("DataSchema")]);
    m_data_schema_isSet = !json[QString("DataSchema")].isNull() && m_data_schema_isValid;

    m_data_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_data_schema_uri, json[QString("DataSchemaUri")]);
    m_data_schema_uri_isSet = !json[QString("DataSchemaUri")].isNull() && m_data_schema_uri_isValid;

    m_resource_role_isValid = ::OpenAPI::fromJsonValue(m_resource_role, json[QString("ResourceRole")]);
    m_resource_role_isSet = !json[QString("ResourceRole")].isNull() && m_resource_role_isValid;

    m_service_role_isValid = ::OpenAPI::fromJsonValue(m_service_role, json[QString("ServiceRole")]);
    m_service_role_isSet = !json[QString("ServiceRole")].isNull() && m_service_role_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;
}

QString OAIRDSDataSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRDSDataSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_database_information.isSet()) {
        obj.insert(QString("DatabaseInformation"), ::OpenAPI::toJsonValue(m_database_information));
    }
    if (m_select_sql_query_isSet) {
        obj.insert(QString("SelectSqlQuery"), ::OpenAPI::toJsonValue(m_select_sql_query));
    }
    if (m_database_credentials.isSet()) {
        obj.insert(QString("DatabaseCredentials"), ::OpenAPI::toJsonValue(m_database_credentials));
    }
    if (m_s3_staging_location_isSet) {
        obj.insert(QString("S3StagingLocation"), ::OpenAPI::toJsonValue(m_s3_staging_location));
    }
    if (m_data_rearrangement_isSet) {
        obj.insert(QString("DataRearrangement"), ::OpenAPI::toJsonValue(m_data_rearrangement));
    }
    if (m_data_schema_isSet) {
        obj.insert(QString("DataSchema"), ::OpenAPI::toJsonValue(m_data_schema));
    }
    if (m_data_schema_uri_isSet) {
        obj.insert(QString("DataSchemaUri"), ::OpenAPI::toJsonValue(m_data_schema_uri));
    }
    if (m_resource_role_isSet) {
        obj.insert(QString("ResourceRole"), ::OpenAPI::toJsonValue(m_resource_role));
    }
    if (m_service_role_isSet) {
        obj.insert(QString("ServiceRole"), ::OpenAPI::toJsonValue(m_service_role));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    return obj;
}

OAIRDSDataSpec_DatabaseInformation OAIRDSDataSpec::getDatabaseInformation() const {
    return m_database_information;
}
void OAIRDSDataSpec::setDatabaseInformation(const OAIRDSDataSpec_DatabaseInformation &database_information) {
    m_database_information = database_information;
    m_database_information_isSet = true;
}

bool OAIRDSDataSpec::is_database_information_Set() const{
    return m_database_information_isSet;
}

bool OAIRDSDataSpec::is_database_information_Valid() const{
    return m_database_information_isValid;
}

QString OAIRDSDataSpec::getSelectSqlQuery() const {
    return m_select_sql_query;
}
void OAIRDSDataSpec::setSelectSqlQuery(const QString &select_sql_query) {
    m_select_sql_query = select_sql_query;
    m_select_sql_query_isSet = true;
}

bool OAIRDSDataSpec::is_select_sql_query_Set() const{
    return m_select_sql_query_isSet;
}

bool OAIRDSDataSpec::is_select_sql_query_Valid() const{
    return m_select_sql_query_isValid;
}

OAIRDSDataSpec_DatabaseCredentials OAIRDSDataSpec::getDatabaseCredentials() const {
    return m_database_credentials;
}
void OAIRDSDataSpec::setDatabaseCredentials(const OAIRDSDataSpec_DatabaseCredentials &database_credentials) {
    m_database_credentials = database_credentials;
    m_database_credentials_isSet = true;
}

bool OAIRDSDataSpec::is_database_credentials_Set() const{
    return m_database_credentials_isSet;
}

bool OAIRDSDataSpec::is_database_credentials_Valid() const{
    return m_database_credentials_isValid;
}

QString OAIRDSDataSpec::getS3StagingLocation() const {
    return m_s3_staging_location;
}
void OAIRDSDataSpec::setS3StagingLocation(const QString &s3_staging_location) {
    m_s3_staging_location = s3_staging_location;
    m_s3_staging_location_isSet = true;
}

bool OAIRDSDataSpec::is_s3_staging_location_Set() const{
    return m_s3_staging_location_isSet;
}

bool OAIRDSDataSpec::is_s3_staging_location_Valid() const{
    return m_s3_staging_location_isValid;
}

QString OAIRDSDataSpec::getDataRearrangement() const {
    return m_data_rearrangement;
}
void OAIRDSDataSpec::setDataRearrangement(const QString &data_rearrangement) {
    m_data_rearrangement = data_rearrangement;
    m_data_rearrangement_isSet = true;
}

bool OAIRDSDataSpec::is_data_rearrangement_Set() const{
    return m_data_rearrangement_isSet;
}

bool OAIRDSDataSpec::is_data_rearrangement_Valid() const{
    return m_data_rearrangement_isValid;
}

QString OAIRDSDataSpec::getDataSchema() const {
    return m_data_schema;
}
void OAIRDSDataSpec::setDataSchema(const QString &data_schema) {
    m_data_schema = data_schema;
    m_data_schema_isSet = true;
}

bool OAIRDSDataSpec::is_data_schema_Set() const{
    return m_data_schema_isSet;
}

bool OAIRDSDataSpec::is_data_schema_Valid() const{
    return m_data_schema_isValid;
}

QString OAIRDSDataSpec::getDataSchemaUri() const {
    return m_data_schema_uri;
}
void OAIRDSDataSpec::setDataSchemaUri(const QString &data_schema_uri) {
    m_data_schema_uri = data_schema_uri;
    m_data_schema_uri_isSet = true;
}

bool OAIRDSDataSpec::is_data_schema_uri_Set() const{
    return m_data_schema_uri_isSet;
}

bool OAIRDSDataSpec::is_data_schema_uri_Valid() const{
    return m_data_schema_uri_isValid;
}

QString OAIRDSDataSpec::getResourceRole() const {
    return m_resource_role;
}
void OAIRDSDataSpec::setResourceRole(const QString &resource_role) {
    m_resource_role = resource_role;
    m_resource_role_isSet = true;
}

bool OAIRDSDataSpec::is_resource_role_Set() const{
    return m_resource_role_isSet;
}

bool OAIRDSDataSpec::is_resource_role_Valid() const{
    return m_resource_role_isValid;
}

QString OAIRDSDataSpec::getServiceRole() const {
    return m_service_role;
}
void OAIRDSDataSpec::setServiceRole(const QString &service_role) {
    m_service_role = service_role;
    m_service_role_isSet = true;
}

bool OAIRDSDataSpec::is_service_role_Set() const{
    return m_service_role_isSet;
}

bool OAIRDSDataSpec::is_service_role_Valid() const{
    return m_service_role_isValid;
}

QString OAIRDSDataSpec::getSubnetId() const {
    return m_subnet_id;
}
void OAIRDSDataSpec::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIRDSDataSpec::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIRDSDataSpec::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QList OAIRDSDataSpec::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIRDSDataSpec::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIRDSDataSpec::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIRDSDataSpec::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

bool OAIRDSDataSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_sql_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_staging_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_rearrangement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRDSDataSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_information_isValid && m_select_sql_query_isValid && m_database_credentials_isValid && m_s3_staging_location_isValid && m_resource_role_isValid && m_service_role_isValid && m_subnet_id_isValid && m_security_group_ids_isValid && true;
}

} // namespace OpenAPI
