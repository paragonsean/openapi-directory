/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMLModelInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMLModelInput::OAICreateMLModelInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMLModelInput::OAICreateMLModelInput() {
    this->initializeModel();
}

OAICreateMLModelInput::~OAICreateMLModelInput() {}

void OAICreateMLModelInput::initializeModel() {

    m_ml_model_id_isSet = false;
    m_ml_model_id_isValid = false;

    m_ml_model_name_isSet = false;
    m_ml_model_name_isValid = false;

    m_ml_model_type_isSet = false;
    m_ml_model_type_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_training_data_source_id_isSet = false;
    m_training_data_source_id_isValid = false;

    m_recipe_isSet = false;
    m_recipe_isValid = false;

    m_recipe_uri_isSet = false;
    m_recipe_uri_isValid = false;
}

void OAICreateMLModelInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMLModelInput::fromJsonObject(QJsonObject json) {

    m_ml_model_id_isValid = ::OpenAPI::fromJsonValue(m_ml_model_id, json[QString("MLModelId")]);
    m_ml_model_id_isSet = !json[QString("MLModelId")].isNull() && m_ml_model_id_isValid;

    m_ml_model_name_isValid = ::OpenAPI::fromJsonValue(m_ml_model_name, json[QString("MLModelName")]);
    m_ml_model_name_isSet = !json[QString("MLModelName")].isNull() && m_ml_model_name_isValid;

    m_ml_model_type_isValid = ::OpenAPI::fromJsonValue(m_ml_model_type, json[QString("MLModelType")]);
    m_ml_model_type_isSet = !json[QString("MLModelType")].isNull() && m_ml_model_type_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_training_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_training_data_source_id, json[QString("TrainingDataSourceId")]);
    m_training_data_source_id_isSet = !json[QString("TrainingDataSourceId")].isNull() && m_training_data_source_id_isValid;

    m_recipe_isValid = ::OpenAPI::fromJsonValue(m_recipe, json[QString("Recipe")]);
    m_recipe_isSet = !json[QString("Recipe")].isNull() && m_recipe_isValid;

    m_recipe_uri_isValid = ::OpenAPI::fromJsonValue(m_recipe_uri, json[QString("RecipeUri")]);
    m_recipe_uri_isSet = !json[QString("RecipeUri")].isNull() && m_recipe_uri_isValid;
}

QString OAICreateMLModelInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMLModelInput::asJsonObject() const {
    QJsonObject obj;
    if (m_ml_model_id_isSet) {
        obj.insert(QString("MLModelId"), ::OpenAPI::toJsonValue(m_ml_model_id));
    }
    if (m_ml_model_name_isSet) {
        obj.insert(QString("MLModelName"), ::OpenAPI::toJsonValue(m_ml_model_name));
    }
    if (m_ml_model_type.isSet()) {
        obj.insert(QString("MLModelType"), ::OpenAPI::toJsonValue(m_ml_model_type));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_training_data_source_id_isSet) {
        obj.insert(QString("TrainingDataSourceId"), ::OpenAPI::toJsonValue(m_training_data_source_id));
    }
    if (m_recipe_isSet) {
        obj.insert(QString("Recipe"), ::OpenAPI::toJsonValue(m_recipe));
    }
    if (m_recipe_uri_isSet) {
        obj.insert(QString("RecipeUri"), ::OpenAPI::toJsonValue(m_recipe_uri));
    }
    return obj;
}

QString OAICreateMLModelInput::getMlModelId() const {
    return m_ml_model_id;
}
void OAICreateMLModelInput::setMlModelId(const QString &ml_model_id) {
    m_ml_model_id = ml_model_id;
    m_ml_model_id_isSet = true;
}

bool OAICreateMLModelInput::is_ml_model_id_Set() const{
    return m_ml_model_id_isSet;
}

bool OAICreateMLModelInput::is_ml_model_id_Valid() const{
    return m_ml_model_id_isValid;
}

QString OAICreateMLModelInput::getMlModelName() const {
    return m_ml_model_name;
}
void OAICreateMLModelInput::setMlModelName(const QString &ml_model_name) {
    m_ml_model_name = ml_model_name;
    m_ml_model_name_isSet = true;
}

bool OAICreateMLModelInput::is_ml_model_name_Set() const{
    return m_ml_model_name_isSet;
}

bool OAICreateMLModelInput::is_ml_model_name_Valid() const{
    return m_ml_model_name_isValid;
}

OAIMLModelType OAICreateMLModelInput::getMlModelType() const {
    return m_ml_model_type;
}
void OAICreateMLModelInput::setMlModelType(const OAIMLModelType &ml_model_type) {
    m_ml_model_type = ml_model_type;
    m_ml_model_type_isSet = true;
}

bool OAICreateMLModelInput::is_ml_model_type_Set() const{
    return m_ml_model_type_isSet;
}

bool OAICreateMLModelInput::is_ml_model_type_Valid() const{
    return m_ml_model_type_isValid;
}

QMap OAICreateMLModelInput::getParameters() const {
    return m_parameters;
}
void OAICreateMLModelInput::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateMLModelInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateMLModelInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAICreateMLModelInput::getTrainingDataSourceId() const {
    return m_training_data_source_id;
}
void OAICreateMLModelInput::setTrainingDataSourceId(const QString &training_data_source_id) {
    m_training_data_source_id = training_data_source_id;
    m_training_data_source_id_isSet = true;
}

bool OAICreateMLModelInput::is_training_data_source_id_Set() const{
    return m_training_data_source_id_isSet;
}

bool OAICreateMLModelInput::is_training_data_source_id_Valid() const{
    return m_training_data_source_id_isValid;
}

QString OAICreateMLModelInput::getRecipe() const {
    return m_recipe;
}
void OAICreateMLModelInput::setRecipe(const QString &recipe) {
    m_recipe = recipe;
    m_recipe_isSet = true;
}

bool OAICreateMLModelInput::is_recipe_Set() const{
    return m_recipe_isSet;
}

bool OAICreateMLModelInput::is_recipe_Valid() const{
    return m_recipe_isValid;
}

QString OAICreateMLModelInput::getRecipeUri() const {
    return m_recipe_uri;
}
void OAICreateMLModelInput::setRecipeUri(const QString &recipe_uri) {
    m_recipe_uri = recipe_uri;
    m_recipe_uri_isSet = true;
}

bool OAICreateMLModelInput::is_recipe_uri_Set() const{
    return m_recipe_uri_isSet;
}

bool OAICreateMLModelInput::is_recipe_uri_Valid() const{
    return m_recipe_uri_isValid;
}

bool OAICreateMLModelInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ml_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ml_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ml_model_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMLModelInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ml_model_id_isValid && m_ml_model_type_isValid && m_training_data_source_id_isValid && true;
}

} // namespace OpenAPI
