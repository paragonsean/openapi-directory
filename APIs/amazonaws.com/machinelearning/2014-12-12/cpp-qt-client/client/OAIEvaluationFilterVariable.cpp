/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationFilterVariable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationFilterVariable::OAIEvaluationFilterVariable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationFilterVariable::OAIEvaluationFilterVariable() {
    this->initializeModel();
}

OAIEvaluationFilterVariable::~OAIEvaluationFilterVariable() {}

void OAIEvaluationFilterVariable::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEvaluationFilterVariable::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEvaluationFilterVariable::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CreatedAt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEvaluationFilterVariable::CREATEDAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LastUpdatedAt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEvaluationFilterVariable::LASTUPDATEDAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Status", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEvaluationFilterVariable::STATUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Name", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEvaluationFilterVariable::NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IAMUser", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEvaluationFilterVariable::IAMUSER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MLModelId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEvaluationFilterVariable::MLMODELID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DataSourceId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEvaluationFilterVariable::DATASOURCEID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DataURI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEvaluationFilterVariable::DATAURI;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEvaluationFilterVariable::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEvaluationFilterVariable::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEvaluationFilterVariable::CREATEDAT:
            val = "CreatedAt";
            break;
        case eOAIEvaluationFilterVariable::LASTUPDATEDAT:
            val = "LastUpdatedAt";
            break;
        case eOAIEvaluationFilterVariable::STATUS:
            val = "Status";
            break;
        case eOAIEvaluationFilterVariable::NAME:
            val = "Name";
            break;
        case eOAIEvaluationFilterVariable::IAMUSER:
            val = "IAMUser";
            break;
        case eOAIEvaluationFilterVariable::MLMODELID:
            val = "MLModelId";
            break;
        case eOAIEvaluationFilterVariable::DATASOURCEID:
            val = "DataSourceId";
            break;
        case eOAIEvaluationFilterVariable::DATAURI:
            val = "DataURI";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEvaluationFilterVariable::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEvaluationFilterVariable::eOAIEvaluationFilterVariable OAIEvaluationFilterVariable::getValue() const {
    return m_value;
}

void OAIEvaluationFilterVariable::setValue(const OAIEvaluationFilterVariable::eOAIEvaluationFilterVariable& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEvaluationFilterVariable::isSet() const {
    
    return m_value_isSet;
}

bool OAIEvaluationFilterVariable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
