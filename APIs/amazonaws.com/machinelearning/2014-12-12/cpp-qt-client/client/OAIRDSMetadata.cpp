/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRDSMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRDSMetadata::OAIRDSMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRDSMetadata::OAIRDSMetadata() {
    this->initializeModel();
}

OAIRDSMetadata::~OAIRDSMetadata() {}

void OAIRDSMetadata::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_database_user_name_isSet = false;
    m_database_user_name_isValid = false;

    m_select_sql_query_isSet = false;
    m_select_sql_query_isValid = false;

    m_resource_role_isSet = false;
    m_resource_role_isValid = false;

    m_service_role_isSet = false;
    m_service_role_isValid = false;

    m_data_pipeline_id_isSet = false;
    m_data_pipeline_id_isValid = false;
}

void OAIRDSMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRDSMetadata::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_database_user_name_isValid = ::OpenAPI::fromJsonValue(m_database_user_name, json[QString("DatabaseUserName")]);
    m_database_user_name_isSet = !json[QString("DatabaseUserName")].isNull() && m_database_user_name_isValid;

    m_select_sql_query_isValid = ::OpenAPI::fromJsonValue(m_select_sql_query, json[QString("SelectSqlQuery")]);
    m_select_sql_query_isSet = !json[QString("SelectSqlQuery")].isNull() && m_select_sql_query_isValid;

    m_resource_role_isValid = ::OpenAPI::fromJsonValue(m_resource_role, json[QString("ResourceRole")]);
    m_resource_role_isSet = !json[QString("ResourceRole")].isNull() && m_resource_role_isValid;

    m_service_role_isValid = ::OpenAPI::fromJsonValue(m_service_role, json[QString("ServiceRole")]);
    m_service_role_isSet = !json[QString("ServiceRole")].isNull() && m_service_role_isValid;

    m_data_pipeline_id_isValid = ::OpenAPI::fromJsonValue(m_data_pipeline_id, json[QString("DataPipelineId")]);
    m_data_pipeline_id_isSet = !json[QString("DataPipelineId")].isNull() && m_data_pipeline_id_isValid;
}

QString OAIRDSMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRDSMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_database.isSet()) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_database_user_name_isSet) {
        obj.insert(QString("DatabaseUserName"), ::OpenAPI::toJsonValue(m_database_user_name));
    }
    if (m_select_sql_query_isSet) {
        obj.insert(QString("SelectSqlQuery"), ::OpenAPI::toJsonValue(m_select_sql_query));
    }
    if (m_resource_role_isSet) {
        obj.insert(QString("ResourceRole"), ::OpenAPI::toJsonValue(m_resource_role));
    }
    if (m_service_role_isSet) {
        obj.insert(QString("ServiceRole"), ::OpenAPI::toJsonValue(m_service_role));
    }
    if (m_data_pipeline_id_isSet) {
        obj.insert(QString("DataPipelineId"), ::OpenAPI::toJsonValue(m_data_pipeline_id));
    }
    return obj;
}

OAIRDSMetadata_Database OAIRDSMetadata::getDatabase() const {
    return m_database;
}
void OAIRDSMetadata::setDatabase(const OAIRDSMetadata_Database &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIRDSMetadata::is_database_Set() const{
    return m_database_isSet;
}

bool OAIRDSMetadata::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIRDSMetadata::getDatabaseUserName() const {
    return m_database_user_name;
}
void OAIRDSMetadata::setDatabaseUserName(const QString &database_user_name) {
    m_database_user_name = database_user_name;
    m_database_user_name_isSet = true;
}

bool OAIRDSMetadata::is_database_user_name_Set() const{
    return m_database_user_name_isSet;
}

bool OAIRDSMetadata::is_database_user_name_Valid() const{
    return m_database_user_name_isValid;
}

QString OAIRDSMetadata::getSelectSqlQuery() const {
    return m_select_sql_query;
}
void OAIRDSMetadata::setSelectSqlQuery(const QString &select_sql_query) {
    m_select_sql_query = select_sql_query;
    m_select_sql_query_isSet = true;
}

bool OAIRDSMetadata::is_select_sql_query_Set() const{
    return m_select_sql_query_isSet;
}

bool OAIRDSMetadata::is_select_sql_query_Valid() const{
    return m_select_sql_query_isValid;
}

QString OAIRDSMetadata::getResourceRole() const {
    return m_resource_role;
}
void OAIRDSMetadata::setResourceRole(const QString &resource_role) {
    m_resource_role = resource_role;
    m_resource_role_isSet = true;
}

bool OAIRDSMetadata::is_resource_role_Set() const{
    return m_resource_role_isSet;
}

bool OAIRDSMetadata::is_resource_role_Valid() const{
    return m_resource_role_isValid;
}

QString OAIRDSMetadata::getServiceRole() const {
    return m_service_role;
}
void OAIRDSMetadata::setServiceRole(const QString &service_role) {
    m_service_role = service_role;
    m_service_role_isSet = true;
}

bool OAIRDSMetadata::is_service_role_Set() const{
    return m_service_role_isSet;
}

bool OAIRDSMetadata::is_service_role_Valid() const{
    return m_service_role_isValid;
}

QString OAIRDSMetadata::getDataPipelineId() const {
    return m_data_pipeline_id;
}
void OAIRDSMetadata::setDataPipelineId(const QString &data_pipeline_id) {
    m_data_pipeline_id = data_pipeline_id;
    m_data_pipeline_id_isSet = true;
}

bool OAIRDSMetadata::is_data_pipeline_id_Set() const{
    return m_data_pipeline_id_isSet;
}

bool OAIRDSMetadata::is_data_pipeline_id_Valid() const{
    return m_data_pipeline_id_isValid;
}

bool OAIRDSMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_sql_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRDSMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
