/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftMetadata::OAIRedshiftMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftMetadata::OAIRedshiftMetadata() {
    this->initializeModel();
}

OAIRedshiftMetadata::~OAIRedshiftMetadata() {}

void OAIRedshiftMetadata::initializeModel() {

    m_redshift_database_isSet = false;
    m_redshift_database_isValid = false;

    m_database_user_name_isSet = false;
    m_database_user_name_isValid = false;

    m_select_sql_query_isSet = false;
    m_select_sql_query_isValid = false;
}

void OAIRedshiftMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftMetadata::fromJsonObject(QJsonObject json) {

    m_redshift_database_isValid = ::OpenAPI::fromJsonValue(m_redshift_database, json[QString("RedshiftDatabase")]);
    m_redshift_database_isSet = !json[QString("RedshiftDatabase")].isNull() && m_redshift_database_isValid;

    m_database_user_name_isValid = ::OpenAPI::fromJsonValue(m_database_user_name, json[QString("DatabaseUserName")]);
    m_database_user_name_isSet = !json[QString("DatabaseUserName")].isNull() && m_database_user_name_isValid;

    m_select_sql_query_isValid = ::OpenAPI::fromJsonValue(m_select_sql_query, json[QString("SelectSqlQuery")]);
    m_select_sql_query_isSet = !json[QString("SelectSqlQuery")].isNull() && m_select_sql_query_isValid;
}

QString OAIRedshiftMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_redshift_database.isSet()) {
        obj.insert(QString("RedshiftDatabase"), ::OpenAPI::toJsonValue(m_redshift_database));
    }
    if (m_database_user_name_isSet) {
        obj.insert(QString("DatabaseUserName"), ::OpenAPI::toJsonValue(m_database_user_name));
    }
    if (m_select_sql_query_isSet) {
        obj.insert(QString("SelectSqlQuery"), ::OpenAPI::toJsonValue(m_select_sql_query));
    }
    return obj;
}

OAIRedshiftDatabase OAIRedshiftMetadata::getRedshiftDatabase() const {
    return m_redshift_database;
}
void OAIRedshiftMetadata::setRedshiftDatabase(const OAIRedshiftDatabase &redshift_database) {
    m_redshift_database = redshift_database;
    m_redshift_database_isSet = true;
}

bool OAIRedshiftMetadata::is_redshift_database_Set() const{
    return m_redshift_database_isSet;
}

bool OAIRedshiftMetadata::is_redshift_database_Valid() const{
    return m_redshift_database_isValid;
}

QString OAIRedshiftMetadata::getDatabaseUserName() const {
    return m_database_user_name;
}
void OAIRedshiftMetadata::setDatabaseUserName(const QString &database_user_name) {
    m_database_user_name = database_user_name;
    m_database_user_name_isSet = true;
}

bool OAIRedshiftMetadata::is_database_user_name_Set() const{
    return m_database_user_name_isSet;
}

bool OAIRedshiftMetadata::is_database_user_name_Valid() const{
    return m_database_user_name_isValid;
}

QString OAIRedshiftMetadata::getSelectSqlQuery() const {
    return m_select_sql_query;
}
void OAIRedshiftMetadata::setSelectSqlQuery(const QString &select_sql_query) {
    m_select_sql_query = select_sql_query;
    m_select_sql_query_isSet = true;
}

bool OAIRedshiftMetadata::is_select_sql_query_Set() const{
    return m_select_sql_query_isSet;
}

bool OAIRedshiftMetadata::is_select_sql_query_Valid() const{
    return m_select_sql_query_isValid;
}

bool OAIRedshiftMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_redshift_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_sql_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
