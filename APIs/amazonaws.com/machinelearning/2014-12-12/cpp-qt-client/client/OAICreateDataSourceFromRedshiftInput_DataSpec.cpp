/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSourceFromRedshiftInput_DataSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSourceFromRedshiftInput_DataSpec::OAICreateDataSourceFromRedshiftInput_DataSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSourceFromRedshiftInput_DataSpec::OAICreateDataSourceFromRedshiftInput_DataSpec() {
    this->initializeModel();
}

OAICreateDataSourceFromRedshiftInput_DataSpec::~OAICreateDataSourceFromRedshiftInput_DataSpec() {}

void OAICreateDataSourceFromRedshiftInput_DataSpec::initializeModel() {

    m_database_information_isSet = false;
    m_database_information_isValid = false;

    m_select_sql_query_isSet = false;
    m_select_sql_query_isValid = false;

    m_database_credentials_isSet = false;
    m_database_credentials_isValid = false;

    m_s3_staging_location_isSet = false;
    m_s3_staging_location_isValid = false;

    m_data_rearrangement_isSet = false;
    m_data_rearrangement_isValid = false;

    m_data_schema_isSet = false;
    m_data_schema_isValid = false;

    m_data_schema_uri_isSet = false;
    m_data_schema_uri_isValid = false;
}

void OAICreateDataSourceFromRedshiftInput_DataSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSourceFromRedshiftInput_DataSpec::fromJsonObject(QJsonObject json) {

    m_database_information_isValid = ::OpenAPI::fromJsonValue(m_database_information, json[QString("DatabaseInformation")]);
    m_database_information_isSet = !json[QString("DatabaseInformation")].isNull() && m_database_information_isValid;

    m_select_sql_query_isValid = ::OpenAPI::fromJsonValue(m_select_sql_query, json[QString("SelectSqlQuery")]);
    m_select_sql_query_isSet = !json[QString("SelectSqlQuery")].isNull() && m_select_sql_query_isValid;

    m_database_credentials_isValid = ::OpenAPI::fromJsonValue(m_database_credentials, json[QString("DatabaseCredentials")]);
    m_database_credentials_isSet = !json[QString("DatabaseCredentials")].isNull() && m_database_credentials_isValid;

    m_s3_staging_location_isValid = ::OpenAPI::fromJsonValue(m_s3_staging_location, json[QString("S3StagingLocation")]);
    m_s3_staging_location_isSet = !json[QString("S3StagingLocation")].isNull() && m_s3_staging_location_isValid;

    m_data_rearrangement_isValid = ::OpenAPI::fromJsonValue(m_data_rearrangement, json[QString("DataRearrangement")]);
    m_data_rearrangement_isSet = !json[QString("DataRearrangement")].isNull() && m_data_rearrangement_isValid;

    m_data_schema_isValid = ::OpenAPI::fromJsonValue(m_data_schema, json[QString("DataSchema")]);
    m_data_schema_isSet = !json[QString("DataSchema")].isNull() && m_data_schema_isValid;

    m_data_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_data_schema_uri, json[QString("DataSchemaUri")]);
    m_data_schema_uri_isSet = !json[QString("DataSchemaUri")].isNull() && m_data_schema_uri_isValid;
}

QString OAICreateDataSourceFromRedshiftInput_DataSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSourceFromRedshiftInput_DataSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_database_information.isSet()) {
        obj.insert(QString("DatabaseInformation"), ::OpenAPI::toJsonValue(m_database_information));
    }
    if (m_select_sql_query_isSet) {
        obj.insert(QString("SelectSqlQuery"), ::OpenAPI::toJsonValue(m_select_sql_query));
    }
    if (m_database_credentials.isSet()) {
        obj.insert(QString("DatabaseCredentials"), ::OpenAPI::toJsonValue(m_database_credentials));
    }
    if (m_s3_staging_location_isSet) {
        obj.insert(QString("S3StagingLocation"), ::OpenAPI::toJsonValue(m_s3_staging_location));
    }
    if (m_data_rearrangement_isSet) {
        obj.insert(QString("DataRearrangement"), ::OpenAPI::toJsonValue(m_data_rearrangement));
    }
    if (m_data_schema_isSet) {
        obj.insert(QString("DataSchema"), ::OpenAPI::toJsonValue(m_data_schema));
    }
    if (m_data_schema_uri_isSet) {
        obj.insert(QString("DataSchemaUri"), ::OpenAPI::toJsonValue(m_data_schema_uri));
    }
    return obj;
}

OAIRedshiftDataSpec_DatabaseInformation OAICreateDataSourceFromRedshiftInput_DataSpec::getDatabaseInformation() const {
    return m_database_information;
}
void OAICreateDataSourceFromRedshiftInput_DataSpec::setDatabaseInformation(const OAIRedshiftDataSpec_DatabaseInformation &database_information) {
    m_database_information = database_information;
    m_database_information_isSet = true;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_database_information_Set() const{
    return m_database_information_isSet;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_database_information_Valid() const{
    return m_database_information_isValid;
}

QString OAICreateDataSourceFromRedshiftInput_DataSpec::getSelectSqlQuery() const {
    return m_select_sql_query;
}
void OAICreateDataSourceFromRedshiftInput_DataSpec::setSelectSqlQuery(const QString &select_sql_query) {
    m_select_sql_query = select_sql_query;
    m_select_sql_query_isSet = true;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_select_sql_query_Set() const{
    return m_select_sql_query_isSet;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_select_sql_query_Valid() const{
    return m_select_sql_query_isValid;
}

OAIRedshiftDataSpec_DatabaseCredentials OAICreateDataSourceFromRedshiftInput_DataSpec::getDatabaseCredentials() const {
    return m_database_credentials;
}
void OAICreateDataSourceFromRedshiftInput_DataSpec::setDatabaseCredentials(const OAIRedshiftDataSpec_DatabaseCredentials &database_credentials) {
    m_database_credentials = database_credentials;
    m_database_credentials_isSet = true;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_database_credentials_Set() const{
    return m_database_credentials_isSet;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_database_credentials_Valid() const{
    return m_database_credentials_isValid;
}

QString OAICreateDataSourceFromRedshiftInput_DataSpec::getS3StagingLocation() const {
    return m_s3_staging_location;
}
void OAICreateDataSourceFromRedshiftInput_DataSpec::setS3StagingLocation(const QString &s3_staging_location) {
    m_s3_staging_location = s3_staging_location;
    m_s3_staging_location_isSet = true;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_s3_staging_location_Set() const{
    return m_s3_staging_location_isSet;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_s3_staging_location_Valid() const{
    return m_s3_staging_location_isValid;
}

QString OAICreateDataSourceFromRedshiftInput_DataSpec::getDataRearrangement() const {
    return m_data_rearrangement;
}
void OAICreateDataSourceFromRedshiftInput_DataSpec::setDataRearrangement(const QString &data_rearrangement) {
    m_data_rearrangement = data_rearrangement;
    m_data_rearrangement_isSet = true;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_data_rearrangement_Set() const{
    return m_data_rearrangement_isSet;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_data_rearrangement_Valid() const{
    return m_data_rearrangement_isValid;
}

QString OAICreateDataSourceFromRedshiftInput_DataSpec::getDataSchema() const {
    return m_data_schema;
}
void OAICreateDataSourceFromRedshiftInput_DataSpec::setDataSchema(const QString &data_schema) {
    m_data_schema = data_schema;
    m_data_schema_isSet = true;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_data_schema_Set() const{
    return m_data_schema_isSet;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_data_schema_Valid() const{
    return m_data_schema_isValid;
}

QString OAICreateDataSourceFromRedshiftInput_DataSpec::getDataSchemaUri() const {
    return m_data_schema_uri;
}
void OAICreateDataSourceFromRedshiftInput_DataSpec::setDataSchemaUri(const QString &data_schema_uri) {
    m_data_schema_uri = data_schema_uri;
    m_data_schema_uri_isSet = true;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_data_schema_uri_Set() const{
    return m_data_schema_uri_isSet;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::is_data_schema_uri_Valid() const{
    return m_data_schema_uri_isValid;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_sql_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_staging_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_rearrangement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSourceFromRedshiftInput_DataSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_information_isValid && m_select_sql_query_isValid && m_database_credentials_isValid && m_s3_staging_location_isValid && true;
}

} // namespace OpenAPI
