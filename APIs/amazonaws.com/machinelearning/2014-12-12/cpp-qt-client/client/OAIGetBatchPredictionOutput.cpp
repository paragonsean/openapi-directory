/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBatchPredictionOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBatchPredictionOutput::OAIGetBatchPredictionOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBatchPredictionOutput::OAIGetBatchPredictionOutput() {
    this->initializeModel();
}

OAIGetBatchPredictionOutput::~OAIGetBatchPredictionOutput() {}

void OAIGetBatchPredictionOutput::initializeModel() {

    m_batch_prediction_id_isSet = false;
    m_batch_prediction_id_isValid = false;

    m_ml_model_id_isSet = false;
    m_ml_model_id_isValid = false;

    m_batch_prediction_data_source_id_isSet = false;
    m_batch_prediction_data_source_id_isValid = false;

    m_input_data_location_s3_isSet = false;
    m_input_data_location_s3_isValid = false;

    m_created_by_iam_user_isSet = false;
    m_created_by_iam_user_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_output_uri_isSet = false;
    m_output_uri_isValid = false;

    m_log_uri_isSet = false;
    m_log_uri_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_compute_time_isSet = false;
    m_compute_time_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_total_record_count_isSet = false;
    m_total_record_count_isValid = false;

    m_invalid_record_count_isSet = false;
    m_invalid_record_count_isValid = false;
}

void OAIGetBatchPredictionOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBatchPredictionOutput::fromJsonObject(QJsonObject json) {

    m_batch_prediction_id_isValid = ::OpenAPI::fromJsonValue(m_batch_prediction_id, json[QString("BatchPredictionId")]);
    m_batch_prediction_id_isSet = !json[QString("BatchPredictionId")].isNull() && m_batch_prediction_id_isValid;

    m_ml_model_id_isValid = ::OpenAPI::fromJsonValue(m_ml_model_id, json[QString("MLModelId")]);
    m_ml_model_id_isSet = !json[QString("MLModelId")].isNull() && m_ml_model_id_isValid;

    m_batch_prediction_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_batch_prediction_data_source_id, json[QString("BatchPredictionDataSourceId")]);
    m_batch_prediction_data_source_id_isSet = !json[QString("BatchPredictionDataSourceId")].isNull() && m_batch_prediction_data_source_id_isValid;

    m_input_data_location_s3_isValid = ::OpenAPI::fromJsonValue(m_input_data_location_s3, json[QString("InputDataLocationS3")]);
    m_input_data_location_s3_isSet = !json[QString("InputDataLocationS3")].isNull() && m_input_data_location_s3_isValid;

    m_created_by_iam_user_isValid = ::OpenAPI::fromJsonValue(m_created_by_iam_user, json[QString("CreatedByIamUser")]);
    m_created_by_iam_user_isSet = !json[QString("CreatedByIamUser")].isNull() && m_created_by_iam_user_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_output_uri_isValid = ::OpenAPI::fromJsonValue(m_output_uri, json[QString("OutputUri")]);
    m_output_uri_isSet = !json[QString("OutputUri")].isNull() && m_output_uri_isValid;

    m_log_uri_isValid = ::OpenAPI::fromJsonValue(m_log_uri, json[QString("LogUri")]);
    m_log_uri_isSet = !json[QString("LogUri")].isNull() && m_log_uri_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_compute_time_isValid = ::OpenAPI::fromJsonValue(m_compute_time, json[QString("ComputeTime")]);
    m_compute_time_isSet = !json[QString("ComputeTime")].isNull() && m_compute_time_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("FinishedAt")]);
    m_finished_at_isSet = !json[QString("FinishedAt")].isNull() && m_finished_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("StartedAt")]);
    m_started_at_isSet = !json[QString("StartedAt")].isNull() && m_started_at_isValid;

    m_total_record_count_isValid = ::OpenAPI::fromJsonValue(m_total_record_count, json[QString("TotalRecordCount")]);
    m_total_record_count_isSet = !json[QString("TotalRecordCount")].isNull() && m_total_record_count_isValid;

    m_invalid_record_count_isValid = ::OpenAPI::fromJsonValue(m_invalid_record_count, json[QString("InvalidRecordCount")]);
    m_invalid_record_count_isSet = !json[QString("InvalidRecordCount")].isNull() && m_invalid_record_count_isValid;
}

QString OAIGetBatchPredictionOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBatchPredictionOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_prediction_id_isSet) {
        obj.insert(QString("BatchPredictionId"), ::OpenAPI::toJsonValue(m_batch_prediction_id));
    }
    if (m_ml_model_id_isSet) {
        obj.insert(QString("MLModelId"), ::OpenAPI::toJsonValue(m_ml_model_id));
    }
    if (m_batch_prediction_data_source_id_isSet) {
        obj.insert(QString("BatchPredictionDataSourceId"), ::OpenAPI::toJsonValue(m_batch_prediction_data_source_id));
    }
    if (m_input_data_location_s3_isSet) {
        obj.insert(QString("InputDataLocationS3"), ::OpenAPI::toJsonValue(m_input_data_location_s3));
    }
    if (m_created_by_iam_user_isSet) {
        obj.insert(QString("CreatedByIamUser"), ::OpenAPI::toJsonValue(m_created_by_iam_user));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_output_uri_isSet) {
        obj.insert(QString("OutputUri"), ::OpenAPI::toJsonValue(m_output_uri));
    }
    if (m_log_uri_isSet) {
        obj.insert(QString("LogUri"), ::OpenAPI::toJsonValue(m_log_uri));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_compute_time_isSet) {
        obj.insert(QString("ComputeTime"), ::OpenAPI::toJsonValue(m_compute_time));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("FinishedAt"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("StartedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_total_record_count_isSet) {
        obj.insert(QString("TotalRecordCount"), ::OpenAPI::toJsonValue(m_total_record_count));
    }
    if (m_invalid_record_count_isSet) {
        obj.insert(QString("InvalidRecordCount"), ::OpenAPI::toJsonValue(m_invalid_record_count));
    }
    return obj;
}

QString OAIGetBatchPredictionOutput::getBatchPredictionId() const {
    return m_batch_prediction_id;
}
void OAIGetBatchPredictionOutput::setBatchPredictionId(const QString &batch_prediction_id) {
    m_batch_prediction_id = batch_prediction_id;
    m_batch_prediction_id_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_batch_prediction_id_Set() const{
    return m_batch_prediction_id_isSet;
}

bool OAIGetBatchPredictionOutput::is_batch_prediction_id_Valid() const{
    return m_batch_prediction_id_isValid;
}

QString OAIGetBatchPredictionOutput::getMlModelId() const {
    return m_ml_model_id;
}
void OAIGetBatchPredictionOutput::setMlModelId(const QString &ml_model_id) {
    m_ml_model_id = ml_model_id;
    m_ml_model_id_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_ml_model_id_Set() const{
    return m_ml_model_id_isSet;
}

bool OAIGetBatchPredictionOutput::is_ml_model_id_Valid() const{
    return m_ml_model_id_isValid;
}

QString OAIGetBatchPredictionOutput::getBatchPredictionDataSourceId() const {
    return m_batch_prediction_data_source_id;
}
void OAIGetBatchPredictionOutput::setBatchPredictionDataSourceId(const QString &batch_prediction_data_source_id) {
    m_batch_prediction_data_source_id = batch_prediction_data_source_id;
    m_batch_prediction_data_source_id_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_batch_prediction_data_source_id_Set() const{
    return m_batch_prediction_data_source_id_isSet;
}

bool OAIGetBatchPredictionOutput::is_batch_prediction_data_source_id_Valid() const{
    return m_batch_prediction_data_source_id_isValid;
}

QString OAIGetBatchPredictionOutput::getInputDataLocationS3() const {
    return m_input_data_location_s3;
}
void OAIGetBatchPredictionOutput::setInputDataLocationS3(const QString &input_data_location_s3) {
    m_input_data_location_s3 = input_data_location_s3;
    m_input_data_location_s3_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_input_data_location_s3_Set() const{
    return m_input_data_location_s3_isSet;
}

bool OAIGetBatchPredictionOutput::is_input_data_location_s3_Valid() const{
    return m_input_data_location_s3_isValid;
}

QString OAIGetBatchPredictionOutput::getCreatedByIamUser() const {
    return m_created_by_iam_user;
}
void OAIGetBatchPredictionOutput::setCreatedByIamUser(const QString &created_by_iam_user) {
    m_created_by_iam_user = created_by_iam_user;
    m_created_by_iam_user_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_created_by_iam_user_Set() const{
    return m_created_by_iam_user_isSet;
}

bool OAIGetBatchPredictionOutput::is_created_by_iam_user_Valid() const{
    return m_created_by_iam_user_isValid;
}

QDateTime OAIGetBatchPredictionOutput::getCreatedAt() const {
    return m_created_at;
}
void OAIGetBatchPredictionOutput::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetBatchPredictionOutput::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIGetBatchPredictionOutput::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetBatchPredictionOutput::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetBatchPredictionOutput::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIGetBatchPredictionOutput::getName() const {
    return m_name;
}
void OAIGetBatchPredictionOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetBatchPredictionOutput::is_name_Valid() const{
    return m_name_isValid;
}

OAIEntityStatus OAIGetBatchPredictionOutput::getStatus() const {
    return m_status;
}
void OAIGetBatchPredictionOutput::setStatus(const OAIEntityStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetBatchPredictionOutput::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetBatchPredictionOutput::getOutputUri() const {
    return m_output_uri;
}
void OAIGetBatchPredictionOutput::setOutputUri(const QString &output_uri) {
    m_output_uri = output_uri;
    m_output_uri_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_output_uri_Set() const{
    return m_output_uri_isSet;
}

bool OAIGetBatchPredictionOutput::is_output_uri_Valid() const{
    return m_output_uri_isValid;
}

QString OAIGetBatchPredictionOutput::getLogUri() const {
    return m_log_uri;
}
void OAIGetBatchPredictionOutput::setLogUri(const QString &log_uri) {
    m_log_uri = log_uri;
    m_log_uri_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_log_uri_Set() const{
    return m_log_uri_isSet;
}

bool OAIGetBatchPredictionOutput::is_log_uri_Valid() const{
    return m_log_uri_isValid;
}

QString OAIGetBatchPredictionOutput::getMessage() const {
    return m_message;
}
void OAIGetBatchPredictionOutput::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetBatchPredictionOutput::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIGetBatchPredictionOutput::getComputeTime() const {
    return m_compute_time;
}
void OAIGetBatchPredictionOutput::setComputeTime(const qint32 &compute_time) {
    m_compute_time = compute_time;
    m_compute_time_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_compute_time_Set() const{
    return m_compute_time_isSet;
}

bool OAIGetBatchPredictionOutput::is_compute_time_Valid() const{
    return m_compute_time_isValid;
}

QDateTime OAIGetBatchPredictionOutput::getFinishedAt() const {
    return m_finished_at;
}
void OAIGetBatchPredictionOutput::setFinishedAt(const QDateTime &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIGetBatchPredictionOutput::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QDateTime OAIGetBatchPredictionOutput::getStartedAt() const {
    return m_started_at;
}
void OAIGetBatchPredictionOutput::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIGetBatchPredictionOutput::is_started_at_Valid() const{
    return m_started_at_isValid;
}

qint32 OAIGetBatchPredictionOutput::getTotalRecordCount() const {
    return m_total_record_count;
}
void OAIGetBatchPredictionOutput::setTotalRecordCount(const qint32 &total_record_count) {
    m_total_record_count = total_record_count;
    m_total_record_count_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_total_record_count_Set() const{
    return m_total_record_count_isSet;
}

bool OAIGetBatchPredictionOutput::is_total_record_count_Valid() const{
    return m_total_record_count_isValid;
}

qint32 OAIGetBatchPredictionOutput::getInvalidRecordCount() const {
    return m_invalid_record_count;
}
void OAIGetBatchPredictionOutput::setInvalidRecordCount(const qint32 &invalid_record_count) {
    m_invalid_record_count = invalid_record_count;
    m_invalid_record_count_isSet = true;
}

bool OAIGetBatchPredictionOutput::is_invalid_record_count_Set() const{
    return m_invalid_record_count_isSet;
}

bool OAIGetBatchPredictionOutput::is_invalid_record_count_Valid() const{
    return m_invalid_record_count_isValid;
}

bool OAIGetBatchPredictionOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_prediction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ml_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_prediction_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_location_s3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_iam_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBatchPredictionOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
