/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3DataSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3DataSpec::OAIS3DataSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3DataSpec::OAIS3DataSpec() {
    this->initializeModel();
}

OAIS3DataSpec::~OAIS3DataSpec() {}

void OAIS3DataSpec::initializeModel() {

    m_data_location_s3_isSet = false;
    m_data_location_s3_isValid = false;

    m_data_rearrangement_isSet = false;
    m_data_rearrangement_isValid = false;

    m_data_schema_isSet = false;
    m_data_schema_isValid = false;

    m_data_schema_location_s3_isSet = false;
    m_data_schema_location_s3_isValid = false;
}

void OAIS3DataSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3DataSpec::fromJsonObject(QJsonObject json) {

    m_data_location_s3_isValid = ::OpenAPI::fromJsonValue(m_data_location_s3, json[QString("DataLocationS3")]);
    m_data_location_s3_isSet = !json[QString("DataLocationS3")].isNull() && m_data_location_s3_isValid;

    m_data_rearrangement_isValid = ::OpenAPI::fromJsonValue(m_data_rearrangement, json[QString("DataRearrangement")]);
    m_data_rearrangement_isSet = !json[QString("DataRearrangement")].isNull() && m_data_rearrangement_isValid;

    m_data_schema_isValid = ::OpenAPI::fromJsonValue(m_data_schema, json[QString("DataSchema")]);
    m_data_schema_isSet = !json[QString("DataSchema")].isNull() && m_data_schema_isValid;

    m_data_schema_location_s3_isValid = ::OpenAPI::fromJsonValue(m_data_schema_location_s3, json[QString("DataSchemaLocationS3")]);
    m_data_schema_location_s3_isSet = !json[QString("DataSchemaLocationS3")].isNull() && m_data_schema_location_s3_isValid;
}

QString OAIS3DataSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3DataSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_data_location_s3_isSet) {
        obj.insert(QString("DataLocationS3"), ::OpenAPI::toJsonValue(m_data_location_s3));
    }
    if (m_data_rearrangement_isSet) {
        obj.insert(QString("DataRearrangement"), ::OpenAPI::toJsonValue(m_data_rearrangement));
    }
    if (m_data_schema_isSet) {
        obj.insert(QString("DataSchema"), ::OpenAPI::toJsonValue(m_data_schema));
    }
    if (m_data_schema_location_s3_isSet) {
        obj.insert(QString("DataSchemaLocationS3"), ::OpenAPI::toJsonValue(m_data_schema_location_s3));
    }
    return obj;
}

QString OAIS3DataSpec::getDataLocationS3() const {
    return m_data_location_s3;
}
void OAIS3DataSpec::setDataLocationS3(const QString &data_location_s3) {
    m_data_location_s3 = data_location_s3;
    m_data_location_s3_isSet = true;
}

bool OAIS3DataSpec::is_data_location_s3_Set() const{
    return m_data_location_s3_isSet;
}

bool OAIS3DataSpec::is_data_location_s3_Valid() const{
    return m_data_location_s3_isValid;
}

QString OAIS3DataSpec::getDataRearrangement() const {
    return m_data_rearrangement;
}
void OAIS3DataSpec::setDataRearrangement(const QString &data_rearrangement) {
    m_data_rearrangement = data_rearrangement;
    m_data_rearrangement_isSet = true;
}

bool OAIS3DataSpec::is_data_rearrangement_Set() const{
    return m_data_rearrangement_isSet;
}

bool OAIS3DataSpec::is_data_rearrangement_Valid() const{
    return m_data_rearrangement_isValid;
}

QString OAIS3DataSpec::getDataSchema() const {
    return m_data_schema;
}
void OAIS3DataSpec::setDataSchema(const QString &data_schema) {
    m_data_schema = data_schema;
    m_data_schema_isSet = true;
}

bool OAIS3DataSpec::is_data_schema_Set() const{
    return m_data_schema_isSet;
}

bool OAIS3DataSpec::is_data_schema_Valid() const{
    return m_data_schema_isValid;
}

QString OAIS3DataSpec::getDataSchemaLocationS3() const {
    return m_data_schema_location_s3;
}
void OAIS3DataSpec::setDataSchemaLocationS3(const QString &data_schema_location_s3) {
    m_data_schema_location_s3 = data_schema_location_s3;
    m_data_schema_location_s3_isSet = true;
}

bool OAIS3DataSpec::is_data_schema_location_s3_Set() const{
    return m_data_schema_location_s3_isSet;
}

bool OAIS3DataSpec::is_data_schema_location_s3_Valid() const{
    return m_data_schema_location_s3_isValid;
}

bool OAIS3DataSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_location_s3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_rearrangement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_schema_location_s3_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3DataSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_location_s3_isValid && true;
}

} // namespace OpenAPI
