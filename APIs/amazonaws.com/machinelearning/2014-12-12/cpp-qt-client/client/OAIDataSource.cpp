/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSource::OAIDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSource::OAIDataSource() {
    this->initializeModel();
}

OAIDataSource::~OAIDataSource() {}

void OAIDataSource::initializeModel() {

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_data_location_s3_isSet = false;
    m_data_location_s3_isValid = false;

    m_data_rearrangement_isSet = false;
    m_data_rearrangement_isValid = false;

    m_created_by_iam_user_isSet = false;
    m_created_by_iam_user_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_data_size_in_bytes_isSet = false;
    m_data_size_in_bytes_isValid = false;

    m_number_of_files_isSet = false;
    m_number_of_files_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_redshift_metadata_isSet = false;
    m_redshift_metadata_isValid = false;

    m_rds_metadata_isSet = false;
    m_rds_metadata_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_compute_statistics_isSet = false;
    m_compute_statistics_isValid = false;

    m_compute_time_isSet = false;
    m_compute_time_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;
}

void OAIDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSource::fromJsonObject(QJsonObject json) {

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;

    m_data_location_s3_isValid = ::OpenAPI::fromJsonValue(m_data_location_s3, json[QString("DataLocationS3")]);
    m_data_location_s3_isSet = !json[QString("DataLocationS3")].isNull() && m_data_location_s3_isValid;

    m_data_rearrangement_isValid = ::OpenAPI::fromJsonValue(m_data_rearrangement, json[QString("DataRearrangement")]);
    m_data_rearrangement_isSet = !json[QString("DataRearrangement")].isNull() && m_data_rearrangement_isValid;

    m_created_by_iam_user_isValid = ::OpenAPI::fromJsonValue(m_created_by_iam_user, json[QString("CreatedByIamUser")]);
    m_created_by_iam_user_isSet = !json[QString("CreatedByIamUser")].isNull() && m_created_by_iam_user_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_data_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_data_size_in_bytes, json[QString("DataSizeInBytes")]);
    m_data_size_in_bytes_isSet = !json[QString("DataSizeInBytes")].isNull() && m_data_size_in_bytes_isValid;

    m_number_of_files_isValid = ::OpenAPI::fromJsonValue(m_number_of_files, json[QString("NumberOfFiles")]);
    m_number_of_files_isSet = !json[QString("NumberOfFiles")].isNull() && m_number_of_files_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_redshift_metadata_isValid = ::OpenAPI::fromJsonValue(m_redshift_metadata, json[QString("RedshiftMetadata")]);
    m_redshift_metadata_isSet = !json[QString("RedshiftMetadata")].isNull() && m_redshift_metadata_isValid;

    m_rds_metadata_isValid = ::OpenAPI::fromJsonValue(m_rds_metadata, json[QString("RDSMetadata")]);
    m_rds_metadata_isSet = !json[QString("RDSMetadata")].isNull() && m_rds_metadata_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_compute_statistics_isValid = ::OpenAPI::fromJsonValue(m_compute_statistics, json[QString("ComputeStatistics")]);
    m_compute_statistics_isSet = !json[QString("ComputeStatistics")].isNull() && m_compute_statistics_isValid;

    m_compute_time_isValid = ::OpenAPI::fromJsonValue(m_compute_time, json[QString("ComputeTime")]);
    m_compute_time_isSet = !json[QString("ComputeTime")].isNull() && m_compute_time_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("FinishedAt")]);
    m_finished_at_isSet = !json[QString("FinishedAt")].isNull() && m_finished_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("StartedAt")]);
    m_started_at_isSet = !json[QString("StartedAt")].isNull() && m_started_at_isValid;
}

QString OAIDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_data_location_s3_isSet) {
        obj.insert(QString("DataLocationS3"), ::OpenAPI::toJsonValue(m_data_location_s3));
    }
    if (m_data_rearrangement_isSet) {
        obj.insert(QString("DataRearrangement"), ::OpenAPI::toJsonValue(m_data_rearrangement));
    }
    if (m_created_by_iam_user_isSet) {
        obj.insert(QString("CreatedByIamUser"), ::OpenAPI::toJsonValue(m_created_by_iam_user));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_data_size_in_bytes_isSet) {
        obj.insert(QString("DataSizeInBytes"), ::OpenAPI::toJsonValue(m_data_size_in_bytes));
    }
    if (m_number_of_files_isSet) {
        obj.insert(QString("NumberOfFiles"), ::OpenAPI::toJsonValue(m_number_of_files));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_redshift_metadata.isSet()) {
        obj.insert(QString("RedshiftMetadata"), ::OpenAPI::toJsonValue(m_redshift_metadata));
    }
    if (m_rds_metadata.isSet()) {
        obj.insert(QString("RDSMetadata"), ::OpenAPI::toJsonValue(m_rds_metadata));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_compute_statistics_isSet) {
        obj.insert(QString("ComputeStatistics"), ::OpenAPI::toJsonValue(m_compute_statistics));
    }
    if (m_compute_time_isSet) {
        obj.insert(QString("ComputeTime"), ::OpenAPI::toJsonValue(m_compute_time));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("FinishedAt"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("StartedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    return obj;
}

QString OAIDataSource::getDataSourceId() const {
    return m_data_source_id;
}
void OAIDataSource::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIDataSource::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIDataSource::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAIDataSource::getDataLocationS3() const {
    return m_data_location_s3;
}
void OAIDataSource::setDataLocationS3(const QString &data_location_s3) {
    m_data_location_s3 = data_location_s3;
    m_data_location_s3_isSet = true;
}

bool OAIDataSource::is_data_location_s3_Set() const{
    return m_data_location_s3_isSet;
}

bool OAIDataSource::is_data_location_s3_Valid() const{
    return m_data_location_s3_isValid;
}

QString OAIDataSource::getDataRearrangement() const {
    return m_data_rearrangement;
}
void OAIDataSource::setDataRearrangement(const QString &data_rearrangement) {
    m_data_rearrangement = data_rearrangement;
    m_data_rearrangement_isSet = true;
}

bool OAIDataSource::is_data_rearrangement_Set() const{
    return m_data_rearrangement_isSet;
}

bool OAIDataSource::is_data_rearrangement_Valid() const{
    return m_data_rearrangement_isValid;
}

QString OAIDataSource::getCreatedByIamUser() const {
    return m_created_by_iam_user;
}
void OAIDataSource::setCreatedByIamUser(const QString &created_by_iam_user) {
    m_created_by_iam_user = created_by_iam_user;
    m_created_by_iam_user_isSet = true;
}

bool OAIDataSource::is_created_by_iam_user_Set() const{
    return m_created_by_iam_user_isSet;
}

bool OAIDataSource::is_created_by_iam_user_Valid() const{
    return m_created_by_iam_user_isValid;
}

QDateTime OAIDataSource::getCreatedAt() const {
    return m_created_at;
}
void OAIDataSource::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDataSource::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDataSource::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDataSource::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIDataSource::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIDataSource::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIDataSource::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

qint32 OAIDataSource::getDataSizeInBytes() const {
    return m_data_size_in_bytes;
}
void OAIDataSource::setDataSizeInBytes(const qint32 &data_size_in_bytes) {
    m_data_size_in_bytes = data_size_in_bytes;
    m_data_size_in_bytes_isSet = true;
}

bool OAIDataSource::is_data_size_in_bytes_Set() const{
    return m_data_size_in_bytes_isSet;
}

bool OAIDataSource::is_data_size_in_bytes_Valid() const{
    return m_data_size_in_bytes_isValid;
}

qint32 OAIDataSource::getNumberOfFiles() const {
    return m_number_of_files;
}
void OAIDataSource::setNumberOfFiles(const qint32 &number_of_files) {
    m_number_of_files = number_of_files;
    m_number_of_files_isSet = true;
}

bool OAIDataSource::is_number_of_files_Set() const{
    return m_number_of_files_isSet;
}

bool OAIDataSource::is_number_of_files_Valid() const{
    return m_number_of_files_isValid;
}

QString OAIDataSource::getName() const {
    return m_name;
}
void OAIDataSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSource::is_name_Valid() const{
    return m_name_isValid;
}

OAIEntityStatus OAIDataSource::getStatus() const {
    return m_status;
}
void OAIDataSource::setStatus(const OAIEntityStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataSource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataSource::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDataSource::getMessage() const {
    return m_message;
}
void OAIDataSource::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDataSource::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDataSource::is_message_Valid() const{
    return m_message_isValid;
}

OAIRedshiftMetadata OAIDataSource::getRedshiftMetadata() const {
    return m_redshift_metadata;
}
void OAIDataSource::setRedshiftMetadata(const OAIRedshiftMetadata &redshift_metadata) {
    m_redshift_metadata = redshift_metadata;
    m_redshift_metadata_isSet = true;
}

bool OAIDataSource::is_redshift_metadata_Set() const{
    return m_redshift_metadata_isSet;
}

bool OAIDataSource::is_redshift_metadata_Valid() const{
    return m_redshift_metadata_isValid;
}

OAIRDSMetadata OAIDataSource::getRdsMetadata() const {
    return m_rds_metadata;
}
void OAIDataSource::setRdsMetadata(const OAIRDSMetadata &rds_metadata) {
    m_rds_metadata = rds_metadata;
    m_rds_metadata_isSet = true;
}

bool OAIDataSource::is_rds_metadata_Set() const{
    return m_rds_metadata_isSet;
}

bool OAIDataSource::is_rds_metadata_Valid() const{
    return m_rds_metadata_isValid;
}

QString OAIDataSource::getRoleArn() const {
    return m_role_arn;
}
void OAIDataSource::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDataSource::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDataSource::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIDataSource::getComputeStatistics() const {
    return m_compute_statistics;
}
void OAIDataSource::setComputeStatistics(const bool &compute_statistics) {
    m_compute_statistics = compute_statistics;
    m_compute_statistics_isSet = true;
}

bool OAIDataSource::is_compute_statistics_Set() const{
    return m_compute_statistics_isSet;
}

bool OAIDataSource::is_compute_statistics_Valid() const{
    return m_compute_statistics_isValid;
}

qint32 OAIDataSource::getComputeTime() const {
    return m_compute_time;
}
void OAIDataSource::setComputeTime(const qint32 &compute_time) {
    m_compute_time = compute_time;
    m_compute_time_isSet = true;
}

bool OAIDataSource::is_compute_time_Set() const{
    return m_compute_time_isSet;
}

bool OAIDataSource::is_compute_time_Valid() const{
    return m_compute_time_isValid;
}

QDateTime OAIDataSource::getFinishedAt() const {
    return m_finished_at;
}
void OAIDataSource::setFinishedAt(const QDateTime &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIDataSource::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIDataSource::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QDateTime OAIDataSource::getStartedAt() const {
    return m_started_at;
}
void OAIDataSource::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIDataSource::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIDataSource::is_started_at_Valid() const{
    return m_started_at_isValid;
}

bool OAIDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_location_s3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_rearrangement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_iam_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rds_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_statistics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
