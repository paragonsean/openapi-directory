/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteDataSourceOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteDataSourceOutput::OAIDeleteDataSourceOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteDataSourceOutput::OAIDeleteDataSourceOutput() {
    this->initializeModel();
}

OAIDeleteDataSourceOutput::~OAIDeleteDataSourceOutput() {}

void OAIDeleteDataSourceOutput::initializeModel() {

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;
}

void OAIDeleteDataSourceOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteDataSourceOutput::fromJsonObject(QJsonObject json) {

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;
}

QString OAIDeleteDataSourceOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteDataSourceOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    return obj;
}

QString OAIDeleteDataSourceOutput::getDataSourceId() const {
    return m_data_source_id;
}
void OAIDeleteDataSourceOutput::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIDeleteDataSourceOutput::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIDeleteDataSourceOutput::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

bool OAIDeleteDataSourceOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteDataSourceOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
