/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo() {
    this->initializeModel();
}

OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::~OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo() {}

void OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::initializeModel() {

    m_peak_requests_per_second_isSet = false;
    m_peak_requests_per_second_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_endpoint_status_isSet = false;
    m_endpoint_status_isValid = false;
}

void OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::fromJsonObject(QJsonObject json) {

    m_peak_requests_per_second_isValid = ::OpenAPI::fromJsonValue(m_peak_requests_per_second, json[QString("PeakRequestsPerSecond")]);
    m_peak_requests_per_second_isSet = !json[QString("PeakRequestsPerSecond")].isNull() && m_peak_requests_per_second_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("EndpointUrl")]);
    m_endpoint_url_isSet = !json[QString("EndpointUrl")].isNull() && m_endpoint_url_isValid;

    m_endpoint_status_isValid = ::OpenAPI::fromJsonValue(m_endpoint_status, json[QString("EndpointStatus")]);
    m_endpoint_status_isSet = !json[QString("EndpointStatus")].isNull() && m_endpoint_status_isValid;
}

QString OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_peak_requests_per_second_isSet) {
        obj.insert(QString("PeakRequestsPerSecond"), ::OpenAPI::toJsonValue(m_peak_requests_per_second));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("EndpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_endpoint_status.isSet()) {
        obj.insert(QString("EndpointStatus"), ::OpenAPI::toJsonValue(m_endpoint_status));
    }
    return obj;
}

qint32 OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::getPeakRequestsPerSecond() const {
    return m_peak_requests_per_second;
}
void OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::setPeakRequestsPerSecond(const qint32 &peak_requests_per_second) {
    m_peak_requests_per_second = peak_requests_per_second;
    m_peak_requests_per_second_isSet = true;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::is_peak_requests_per_second_Set() const{
    return m_peak_requests_per_second_isSet;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::is_peak_requests_per_second_Valid() const{
    return m_peak_requests_per_second_isValid;
}

QDateTime OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::getCreatedAt() const {
    return m_created_at;
}
void OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

OAIRealtimeEndpointStatus OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::getEndpointStatus() const {
    return m_endpoint_status;
}
void OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::setEndpointStatus(const OAIRealtimeEndpointStatus &endpoint_status) {
    m_endpoint_status = endpoint_status;
    m_endpoint_status_isSet = true;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::is_endpoint_status_Set() const{
    return m_endpoint_status_isSet;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::is_endpoint_status_Valid() const{
    return m_endpoint_status_isValid;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_peak_requests_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRealtimeEndpointOutput_RealtimeEndpointInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
