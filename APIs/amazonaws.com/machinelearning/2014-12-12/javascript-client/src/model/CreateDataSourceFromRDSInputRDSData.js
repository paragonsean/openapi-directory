/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RDSDataSpec from './RDSDataSpec';
import RDSDataSpecDatabaseCredentials from './RDSDataSpecDatabaseCredentials';
import RDSDataSpecDatabaseInformation from './RDSDataSpecDatabaseInformation';

/**
 * The CreateDataSourceFromRDSInputRDSData model module.
 * @module model/CreateDataSourceFromRDSInputRDSData
 * @version 2014-12-12
 */
class CreateDataSourceFromRDSInputRDSData {
    /**
     * Constructs a new <code>CreateDataSourceFromRDSInputRDSData</code>.
     * @alias module:model/CreateDataSourceFromRDSInputRDSData
     * @implements module:model/RDSDataSpec
     * @param databaseInformation {module:model/RDSDataSpecDatabaseInformation} 
     * @param selectSqlQuery {String} 
     * @param databaseCredentials {module:model/RDSDataSpecDatabaseCredentials} 
     * @param s3StagingLocation {String} 
     * @param resourceRole {String} 
     * @param serviceRole {String} 
     * @param subnetId {String} 
     * @param securityGroupIds {Array} 
     */
    constructor(databaseInformation, selectSqlQuery, databaseCredentials, s3StagingLocation, resourceRole, serviceRole, subnetId, securityGroupIds) { 
        RDSDataSpec.initialize(this, databaseInformation, selectSqlQuery, databaseCredentials, s3StagingLocation, resourceRole, serviceRole, subnetId, securityGroupIds);
        CreateDataSourceFromRDSInputRDSData.initialize(this, databaseInformation, selectSqlQuery, databaseCredentials, s3StagingLocation, resourceRole, serviceRole, subnetId, securityGroupIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseInformation, selectSqlQuery, databaseCredentials, s3StagingLocation, resourceRole, serviceRole, subnetId, securityGroupIds) { 
        obj['DatabaseInformation'] = databaseInformation;
        obj['SelectSqlQuery'] = selectSqlQuery;
        obj['DatabaseCredentials'] = databaseCredentials;
        obj['S3StagingLocation'] = s3StagingLocation;
        obj['ResourceRole'] = resourceRole;
        obj['ServiceRole'] = serviceRole;
        obj['SubnetId'] = subnetId;
        obj['SecurityGroupIds'] = securityGroupIds;
    }

    /**
     * Constructs a <code>CreateDataSourceFromRDSInputRDSData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDataSourceFromRDSInputRDSData} obj Optional instance to populate.
     * @return {module:model/CreateDataSourceFromRDSInputRDSData} The populated <code>CreateDataSourceFromRDSInputRDSData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDataSourceFromRDSInputRDSData();
            RDSDataSpec.constructFromObject(data, obj);

            if (data.hasOwnProperty('DatabaseInformation')) {
                obj['DatabaseInformation'] = RDSDataSpecDatabaseInformation.constructFromObject(data['DatabaseInformation']);
            }
            if (data.hasOwnProperty('SelectSqlQuery')) {
                obj['SelectSqlQuery'] = ApiClient.convertToType(data['SelectSqlQuery'], 'String');
            }
            if (data.hasOwnProperty('DatabaseCredentials')) {
                obj['DatabaseCredentials'] = RDSDataSpecDatabaseCredentials.constructFromObject(data['DatabaseCredentials']);
            }
            if (data.hasOwnProperty('S3StagingLocation')) {
                obj['S3StagingLocation'] = ApiClient.convertToType(data['S3StagingLocation'], 'String');
            }
            if (data.hasOwnProperty('DataRearrangement')) {
                obj['DataRearrangement'] = ApiClient.convertToType(data['DataRearrangement'], 'String');
            }
            if (data.hasOwnProperty('DataSchema')) {
                obj['DataSchema'] = ApiClient.convertToType(data['DataSchema'], 'String');
            }
            if (data.hasOwnProperty('DataSchemaUri')) {
                obj['DataSchemaUri'] = ApiClient.convertToType(data['DataSchemaUri'], 'String');
            }
            if (data.hasOwnProperty('ResourceRole')) {
                obj['ResourceRole'] = ApiClient.convertToType(data['ResourceRole'], 'String');
            }
            if (data.hasOwnProperty('ServiceRole')) {
                obj['ServiceRole'] = ApiClient.convertToType(data['ServiceRole'], 'String');
            }
            if (data.hasOwnProperty('SubnetId')) {
                obj['SubnetId'] = ApiClient.convertToType(data['SubnetId'], 'String');
            }
            if (data.hasOwnProperty('SecurityGroupIds')) {
                obj['SecurityGroupIds'] = ApiClient.convertToType(data['SecurityGroupIds'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDataSourceFromRDSInputRDSData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDataSourceFromRDSInputRDSData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateDataSourceFromRDSInputRDSData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DatabaseInformation`
        if (data['DatabaseInformation']) { // data not null
          RDSDataSpecDatabaseInformation.validateJSON(data['DatabaseInformation']);
        }
        // validate the optional field `SelectSqlQuery`
        if (data['SelectSqlQuery']) { // data not null
          String.validateJSON(data['SelectSqlQuery']);
        }
        // validate the optional field `DatabaseCredentials`
        if (data['DatabaseCredentials']) { // data not null
          RDSDataSpecDatabaseCredentials.validateJSON(data['DatabaseCredentials']);
        }
        // validate the optional field `S3StagingLocation`
        if (data['S3StagingLocation']) { // data not null
          String.validateJSON(data['S3StagingLocation']);
        }
        // validate the optional field `DataRearrangement`
        if (data['DataRearrangement']) { // data not null
          String.validateJSON(data['DataRearrangement']);
        }
        // validate the optional field `DataSchema`
        if (data['DataSchema']) { // data not null
          String.validateJSON(data['DataSchema']);
        }
        // validate the optional field `DataSchemaUri`
        if (data['DataSchemaUri']) { // data not null
          String.validateJSON(data['DataSchemaUri']);
        }
        // validate the optional field `ResourceRole`
        if (data['ResourceRole']) { // data not null
          String.validateJSON(data['ResourceRole']);
        }
        // validate the optional field `ServiceRole`
        if (data['ServiceRole']) { // data not null
          String.validateJSON(data['ServiceRole']);
        }
        // validate the optional field `SubnetId`
        if (data['SubnetId']) { // data not null
          String.validateJSON(data['SubnetId']);
        }
        // validate the optional field `SecurityGroupIds`
        if (data['SecurityGroupIds']) { // data not null
          Array.validateJSON(data['SecurityGroupIds']);
        }

        return true;
    }


}

CreateDataSourceFromRDSInputRDSData.RequiredProperties = ["DatabaseInformation", "SelectSqlQuery", "DatabaseCredentials", "S3StagingLocation", "ResourceRole", "ServiceRole", "SubnetId", "SecurityGroupIds"];

/**
 * @member {module:model/RDSDataSpecDatabaseInformation} DatabaseInformation
 */
CreateDataSourceFromRDSInputRDSData.prototype['DatabaseInformation'] = undefined;

/**
 * @member {String} SelectSqlQuery
 */
CreateDataSourceFromRDSInputRDSData.prototype['SelectSqlQuery'] = undefined;

/**
 * @member {module:model/RDSDataSpecDatabaseCredentials} DatabaseCredentials
 */
CreateDataSourceFromRDSInputRDSData.prototype['DatabaseCredentials'] = undefined;

/**
 * @member {String} S3StagingLocation
 */
CreateDataSourceFromRDSInputRDSData.prototype['S3StagingLocation'] = undefined;

/**
 * @member {String} DataRearrangement
 */
CreateDataSourceFromRDSInputRDSData.prototype['DataRearrangement'] = undefined;

/**
 * @member {String} DataSchema
 */
CreateDataSourceFromRDSInputRDSData.prototype['DataSchema'] = undefined;

/**
 * @member {String} DataSchemaUri
 */
CreateDataSourceFromRDSInputRDSData.prototype['DataSchemaUri'] = undefined;

/**
 * @member {String} ResourceRole
 */
CreateDataSourceFromRDSInputRDSData.prototype['ResourceRole'] = undefined;

/**
 * @member {String} ServiceRole
 */
CreateDataSourceFromRDSInputRDSData.prototype['ServiceRole'] = undefined;

/**
 * @member {String} SubnetId
 */
CreateDataSourceFromRDSInputRDSData.prototype['SubnetId'] = undefined;

/**
 * @member {Array} SecurityGroupIds
 */
CreateDataSourceFromRDSInputRDSData.prototype['SecurityGroupIds'] = undefined;


// Implement RDSDataSpec interface:
/**
 * @member {module:model/RDSDataSpecDatabaseInformation} DatabaseInformation
 */
RDSDataSpec.prototype['DatabaseInformation'] = undefined;
/**
 * @member {String} SelectSqlQuery
 */
RDSDataSpec.prototype['SelectSqlQuery'] = undefined;
/**
 * @member {module:model/RDSDataSpecDatabaseCredentials} DatabaseCredentials
 */
RDSDataSpec.prototype['DatabaseCredentials'] = undefined;
/**
 * @member {String} S3StagingLocation
 */
RDSDataSpec.prototype['S3StagingLocation'] = undefined;
/**
 * @member {String} DataRearrangement
 */
RDSDataSpec.prototype['DataRearrangement'] = undefined;
/**
 * @member {String} DataSchema
 */
RDSDataSpec.prototype['DataSchema'] = undefined;
/**
 * @member {String} DataSchemaUri
 */
RDSDataSpec.prototype['DataSchemaUri'] = undefined;
/**
 * @member {String} ResourceRole
 */
RDSDataSpec.prototype['ResourceRole'] = undefined;
/**
 * @member {String} ServiceRole
 */
RDSDataSpec.prototype['ServiceRole'] = undefined;
/**
 * @member {String} SubnetId
 */
RDSDataSpec.prototype['SubnetId'] = undefined;
/**
 * @member {Array} SecurityGroupIds
 */
RDSDataSpec.prototype['SecurityGroupIds'] = undefined;




export default CreateDataSourceFromRDSInputRDSData;

