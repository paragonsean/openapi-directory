/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RedshiftDatabaseCredentials model module.
 * @module model/RedshiftDatabaseCredentials
 * @version 2014-12-12
 */
class RedshiftDatabaseCredentials {
    /**
     * Constructs a new <code>RedshiftDatabaseCredentials</code>.
     * Describes the database credentials for connecting to a database on an Amazon Redshift cluster.
     * @alias module:model/RedshiftDatabaseCredentials
     * @param username {String} A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the <code>RedshiftSelectSqlQuery</code> query. The username should be valid for an Amazon Redshift <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">USER</a>.
     * @param password {String} A password to be used by Amazon ML to connect to a database on an Amazon Redshift cluster. The password should have sufficient permissions to execute a <code>RedshiftSelectSqlQuery</code> query. The password should be valid for an Amazon Redshift <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">USER</a>.
     */
    constructor(username, password) { 
        
        RedshiftDatabaseCredentials.initialize(this, username, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, username, password) { 
        obj['Username'] = username;
        obj['Password'] = password;
    }

    /**
     * Constructs a <code>RedshiftDatabaseCredentials</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedshiftDatabaseCredentials} obj Optional instance to populate.
     * @return {module:model/RedshiftDatabaseCredentials} The populated <code>RedshiftDatabaseCredentials</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedshiftDatabaseCredentials();

            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
            if (data.hasOwnProperty('Password')) {
                obj['Password'] = ApiClient.convertToType(data['Password'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedshiftDatabaseCredentials</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedshiftDatabaseCredentials</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RedshiftDatabaseCredentials.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Username'] && !(typeof data['Username'] === 'string' || data['Username'] instanceof String)) {
            throw new Error("Expected the field `Username` to be a primitive type in the JSON string but got " + data['Username']);
        }
        // ensure the json data is a string
        if (data['Password'] && !(typeof data['Password'] === 'string' || data['Password'] instanceof String)) {
            throw new Error("Expected the field `Password` to be a primitive type in the JSON string but got " + data['Password']);
        }

        return true;
    }


}

RedshiftDatabaseCredentials.RequiredProperties = ["Username", "Password"];

/**
 * A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the <code>RedshiftSelectSqlQuery</code> query. The username should be valid for an Amazon Redshift <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">USER</a>.
 * @member {String} Username
 */
RedshiftDatabaseCredentials.prototype['Username'] = undefined;

/**
 * A password to be used by Amazon ML to connect to a database on an Amazon Redshift cluster. The password should have sufficient permissions to execute a <code>RedshiftSelectSqlQuery</code> query. The password should be valid for an Amazon Redshift <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">USER</a>.
 * @member {String} Password
 */
RedshiftDatabaseCredentials.prototype['Password'] = undefined;






export default RedshiftDatabaseCredentials;

