/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The S3DataSpec model module.
 * @module model/S3DataSpec
 * @version 2014-12-12
 */
class S3DataSpec {
    /**
     * Constructs a new <code>S3DataSpec</code>.
     *  Describes the data specification of a &lt;code&gt;DataSource&lt;/code&gt;.
     * @alias module:model/S3DataSpec
     * @param dataLocationS3 {String} 
     */
    constructor(dataLocationS3) { 
        
        S3DataSpec.initialize(this, dataLocationS3);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataLocationS3) { 
        obj['DataLocationS3'] = dataLocationS3;
    }

    /**
     * Constructs a <code>S3DataSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/S3DataSpec} obj Optional instance to populate.
     * @return {module:model/S3DataSpec} The populated <code>S3DataSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new S3DataSpec();

            if (data.hasOwnProperty('DataLocationS3')) {
                obj['DataLocationS3'] = ApiClient.convertToType(data['DataLocationS3'], 'String');
            }
            if (data.hasOwnProperty('DataRearrangement')) {
                obj['DataRearrangement'] = ApiClient.convertToType(data['DataRearrangement'], 'String');
            }
            if (data.hasOwnProperty('DataSchema')) {
                obj['DataSchema'] = ApiClient.convertToType(data['DataSchema'], 'String');
            }
            if (data.hasOwnProperty('DataSchemaLocationS3')) {
                obj['DataSchemaLocationS3'] = ApiClient.convertToType(data['DataSchemaLocationS3'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>S3DataSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>S3DataSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of S3DataSpec.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DataLocationS3`
        if (data['DataLocationS3']) { // data not null
          String.validateJSON(data['DataLocationS3']);
        }
        // validate the optional field `DataRearrangement`
        if (data['DataRearrangement']) { // data not null
          String.validateJSON(data['DataRearrangement']);
        }
        // validate the optional field `DataSchema`
        if (data['DataSchema']) { // data not null
          String.validateJSON(data['DataSchema']);
        }
        // validate the optional field `DataSchemaLocationS3`
        if (data['DataSchemaLocationS3']) { // data not null
          String.validateJSON(data['DataSchemaLocationS3']);
        }

        return true;
    }


}

S3DataSpec.RequiredProperties = ["DataLocationS3"];

/**
 * @member {String} DataLocationS3
 */
S3DataSpec.prototype['DataLocationS3'] = undefined;

/**
 * @member {String} DataRearrangement
 */
S3DataSpec.prototype['DataRearrangement'] = undefined;

/**
 * @member {String} DataSchema
 */
S3DataSpec.prototype['DataSchema'] = undefined;

/**
 * @member {String} DataSchemaLocationS3
 */
S3DataSpec.prototype['DataSchemaLocationS3'] = undefined;






export default S3DataSpec;

