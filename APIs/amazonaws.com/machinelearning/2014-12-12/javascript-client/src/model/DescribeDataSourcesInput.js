/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceFilterVariable from './DataSourceFilterVariable';
import SortOrder from './SortOrder';

/**
 * The DescribeDataSourcesInput model module.
 * @module model/DescribeDataSourcesInput
 * @version 2014-12-12
 */
class DescribeDataSourcesInput {
    /**
     * Constructs a new <code>DescribeDataSourcesInput</code>.
     * @alias module:model/DescribeDataSourcesInput
     */
    constructor() { 
        
        DescribeDataSourcesInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeDataSourcesInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeDataSourcesInput} obj Optional instance to populate.
     * @return {module:model/DescribeDataSourcesInput} The populated <code>DescribeDataSourcesInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeDataSourcesInput();

            if (data.hasOwnProperty('FilterVariable')) {
                obj['FilterVariable'] = ApiClient.convertToType(data['FilterVariable'], DataSourceFilterVariable);
            }
            if (data.hasOwnProperty('EQ')) {
                obj['EQ'] = ApiClient.convertToType(data['EQ'], 'String');
            }
            if (data.hasOwnProperty('GT')) {
                obj['GT'] = ApiClient.convertToType(data['GT'], 'String');
            }
            if (data.hasOwnProperty('LT')) {
                obj['LT'] = ApiClient.convertToType(data['LT'], 'String');
            }
            if (data.hasOwnProperty('GE')) {
                obj['GE'] = ApiClient.convertToType(data['GE'], 'String');
            }
            if (data.hasOwnProperty('LE')) {
                obj['LE'] = ApiClient.convertToType(data['LE'], 'String');
            }
            if (data.hasOwnProperty('NE')) {
                obj['NE'] = ApiClient.convertToType(data['NE'], 'String');
            }
            if (data.hasOwnProperty('Prefix')) {
                obj['Prefix'] = ApiClient.convertToType(data['Prefix'], 'String');
            }
            if (data.hasOwnProperty('SortOrder')) {
                obj['SortOrder'] = ApiClient.convertToType(data['SortOrder'], SortOrder);
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
            if (data.hasOwnProperty('Limit')) {
                obj['Limit'] = ApiClient.convertToType(data['Limit'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeDataSourcesInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeDataSourcesInput</code>.
     */
    static validateJSON(data) {
        // validate the optional field `FilterVariable`
        if (data['FilterVariable']) { // data not null
          DataSourceFilterVariable.validateJSON(data['FilterVariable']);
        }
        // validate the optional field `EQ`
        if (data['EQ']) { // data not null
          String.validateJSON(data['EQ']);
        }
        // validate the optional field `GT`
        if (data['GT']) { // data not null
          String.validateJSON(data['GT']);
        }
        // validate the optional field `LT`
        if (data['LT']) { // data not null
          String.validateJSON(data['LT']);
        }
        // validate the optional field `GE`
        if (data['GE']) { // data not null
          String.validateJSON(data['GE']);
        }
        // validate the optional field `LE`
        if (data['LE']) { // data not null
          String.validateJSON(data['LE']);
        }
        // validate the optional field `NE`
        if (data['NE']) { // data not null
          String.validateJSON(data['NE']);
        }
        // validate the optional field `Prefix`
        if (data['Prefix']) { // data not null
          String.validateJSON(data['Prefix']);
        }
        // validate the optional field `SortOrder`
        if (data['SortOrder']) { // data not null
          SortOrder.validateJSON(data['SortOrder']);
        }
        // validate the optional field `NextToken`
        if (data['NextToken']) { // data not null
          String.validateJSON(data['NextToken']);
        }
        // validate the optional field `Limit`
        if (data['Limit']) { // data not null
          Number.validateJSON(data['Limit']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataSourceFilterVariable} FilterVariable
 */
DescribeDataSourcesInput.prototype['FilterVariable'] = undefined;

/**
 * @member {String} EQ
 */
DescribeDataSourcesInput.prototype['EQ'] = undefined;

/**
 * @member {String} GT
 */
DescribeDataSourcesInput.prototype['GT'] = undefined;

/**
 * @member {String} LT
 */
DescribeDataSourcesInput.prototype['LT'] = undefined;

/**
 * @member {String} GE
 */
DescribeDataSourcesInput.prototype['GE'] = undefined;

/**
 * @member {String} LE
 */
DescribeDataSourcesInput.prototype['LE'] = undefined;

/**
 * @member {String} NE
 */
DescribeDataSourcesInput.prototype['NE'] = undefined;

/**
 * @member {String} Prefix
 */
DescribeDataSourcesInput.prototype['Prefix'] = undefined;

/**
 * @member {module:model/SortOrder} SortOrder
 */
DescribeDataSourcesInput.prototype['SortOrder'] = undefined;

/**
 * @member {String} NextToken
 */
DescribeDataSourcesInput.prototype['NextToken'] = undefined;

/**
 * @member {Number} Limit
 */
DescribeDataSourcesInput.prototype['Limit'] = undefined;






export default DescribeDataSourcesInput;

