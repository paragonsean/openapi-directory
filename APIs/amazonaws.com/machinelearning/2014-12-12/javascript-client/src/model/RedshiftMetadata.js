/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RedshiftDatabase from './RedshiftDatabase';

/**
 * The RedshiftMetadata model module.
 * @module model/RedshiftMetadata
 * @version 2014-12-12
 */
class RedshiftMetadata {
    /**
     * Constructs a new <code>RedshiftMetadata</code>.
     * Describes the &lt;code&gt;DataSource&lt;/code&gt; details specific to Amazon Redshift.
     * @alias module:model/RedshiftMetadata
     */
    constructor() { 
        
        RedshiftMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RedshiftMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedshiftMetadata} obj Optional instance to populate.
     * @return {module:model/RedshiftMetadata} The populated <code>RedshiftMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedshiftMetadata();

            if (data.hasOwnProperty('RedshiftDatabase')) {
                obj['RedshiftDatabase'] = RedshiftDatabase.constructFromObject(data['RedshiftDatabase']);
            }
            if (data.hasOwnProperty('DatabaseUserName')) {
                obj['DatabaseUserName'] = ApiClient.convertToType(data['DatabaseUserName'], 'String');
            }
            if (data.hasOwnProperty('SelectSqlQuery')) {
                obj['SelectSqlQuery'] = ApiClient.convertToType(data['SelectSqlQuery'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedshiftMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedshiftMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `RedshiftDatabase`
        if (data['RedshiftDatabase']) { // data not null
          RedshiftDatabase.validateJSON(data['RedshiftDatabase']);
        }
        // ensure the json data is a string
        if (data['DatabaseUserName'] && !(typeof data['DatabaseUserName'] === 'string' || data['DatabaseUserName'] instanceof String)) {
            throw new Error("Expected the field `DatabaseUserName` to be a primitive type in the JSON string but got " + data['DatabaseUserName']);
        }
        // validate the optional field `SelectSqlQuery`
        if (data['SelectSqlQuery']) { // data not null
          String.validateJSON(data['SelectSqlQuery']);
        }

        return true;
    }


}



/**
 * @member {module:model/RedshiftDatabase} RedshiftDatabase
 */
RedshiftMetadata.prototype['RedshiftDatabase'] = undefined;

/**
 * A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the <code>RedshiftSelectSqlQuery</code> query. The username should be valid for an Amazon Redshift <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">USER</a>.
 * @member {String} DatabaseUserName
 */
RedshiftMetadata.prototype['DatabaseUserName'] = undefined;

/**
 * @member {String} SelectSqlQuery
 */
RedshiftMetadata.prototype['SelectSqlQuery'] = undefined;






export default RedshiftMetadata;

