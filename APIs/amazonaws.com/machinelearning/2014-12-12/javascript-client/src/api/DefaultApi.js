/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTagsInput from '../model/AddTagsInput';
import AddTagsOutput from '../model/AddTagsOutput';
import CreateBatchPredictionInput from '../model/CreateBatchPredictionInput';
import CreateBatchPredictionOutput from '../model/CreateBatchPredictionOutput';
import CreateDataSourceFromRDSInput from '../model/CreateDataSourceFromRDSInput';
import CreateDataSourceFromRDSOutput from '../model/CreateDataSourceFromRDSOutput';
import CreateDataSourceFromRedshiftInput from '../model/CreateDataSourceFromRedshiftInput';
import CreateDataSourceFromRedshiftOutput from '../model/CreateDataSourceFromRedshiftOutput';
import CreateDataSourceFromS3Input from '../model/CreateDataSourceFromS3Input';
import CreateDataSourceFromS3Output from '../model/CreateDataSourceFromS3Output';
import CreateEvaluationInput from '../model/CreateEvaluationInput';
import CreateEvaluationOutput from '../model/CreateEvaluationOutput';
import CreateMLModelInput from '../model/CreateMLModelInput';
import CreateMLModelOutput from '../model/CreateMLModelOutput';
import CreateRealtimeEndpointInput from '../model/CreateRealtimeEndpointInput';
import CreateRealtimeEndpointOutput from '../model/CreateRealtimeEndpointOutput';
import DeleteBatchPredictionInput from '../model/DeleteBatchPredictionInput';
import DeleteBatchPredictionOutput from '../model/DeleteBatchPredictionOutput';
import DeleteDataSourceInput from '../model/DeleteDataSourceInput';
import DeleteDataSourceOutput from '../model/DeleteDataSourceOutput';
import DeleteEvaluationInput from '../model/DeleteEvaluationInput';
import DeleteEvaluationOutput from '../model/DeleteEvaluationOutput';
import DeleteMLModelInput from '../model/DeleteMLModelInput';
import DeleteMLModelOutput from '../model/DeleteMLModelOutput';
import DeleteRealtimeEndpointInput from '../model/DeleteRealtimeEndpointInput';
import DeleteRealtimeEndpointOutput from '../model/DeleteRealtimeEndpointOutput';
import DeleteTagsInput from '../model/DeleteTagsInput';
import DeleteTagsOutput from '../model/DeleteTagsOutput';
import DescribeBatchPredictionsInput from '../model/DescribeBatchPredictionsInput';
import DescribeBatchPredictionsOutput from '../model/DescribeBatchPredictionsOutput';
import DescribeDataSourcesInput from '../model/DescribeDataSourcesInput';
import DescribeDataSourcesOutput from '../model/DescribeDataSourcesOutput';
import DescribeEvaluationsInput from '../model/DescribeEvaluationsInput';
import DescribeEvaluationsOutput from '../model/DescribeEvaluationsOutput';
import DescribeMLModelsInput from '../model/DescribeMLModelsInput';
import DescribeMLModelsOutput from '../model/DescribeMLModelsOutput';
import DescribeTagsInput from '../model/DescribeTagsInput';
import DescribeTagsOutput from '../model/DescribeTagsOutput';
import GetBatchPredictionInput from '../model/GetBatchPredictionInput';
import GetBatchPredictionOutput from '../model/GetBatchPredictionOutput';
import GetDataSourceInput from '../model/GetDataSourceInput';
import GetDataSourceOutput from '../model/GetDataSourceOutput';
import GetEvaluationInput from '../model/GetEvaluationInput';
import GetEvaluationOutput from '../model/GetEvaluationOutput';
import GetMLModelInput from '../model/GetMLModelInput';
import GetMLModelOutput from '../model/GetMLModelOutput';
import PredictInput from '../model/PredictInput';
import PredictOutput from '../model/PredictOutput';
import UpdateBatchPredictionInput from '../model/UpdateBatchPredictionInput';
import UpdateBatchPredictionOutput from '../model/UpdateBatchPredictionOutput';
import UpdateDataSourceInput from '../model/UpdateDataSourceInput';
import UpdateDataSourceOutput from '../model/UpdateDataSourceOutput';
import UpdateEvaluationInput from '../model/UpdateEvaluationInput';
import UpdateEvaluationOutput from '../model/UpdateEvaluationOutput';
import UpdateMLModelInput from '../model/UpdateMLModelInput';
import UpdateMLModelOutput from '../model/UpdateMLModelOutput';

/**
* Default service.
* @module api/DefaultApi
* @version 2014-12-12
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTags operation.
     * @callback module:api/DefaultApi~addTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddTagsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds one or more tags to an object, up to a limit of 10. Each tag consists of a key and an optional value. If you add a tag using a key that is already associated with the ML object, <code>AddTags</code> updates the tag's value.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddTagsInput} addTagsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddTagsOutput}
     */
    addTags(xAmzTarget, addTagsInput, opts, callback) {
      opts = opts || {};
      let postBody = addTagsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addTags");
      }
      // verify the required parameter 'addTagsInput' is set
      if (addTagsInput === undefined || addTagsInput === null) {
        throw new Error("Missing the required parameter 'addTagsInput' when calling addTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddTagsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.AddTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBatchPrediction operation.
     * @callback module:api/DefaultApi~createBatchPredictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBatchPredictionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Generates predictions for a group of observations. The observations to process exist in one or more data files referenced by a <code>DataSource</code>. This operation creates a new <code>BatchPrediction</code>, and uses an <code>MLModel</code> and the data files referenced by the <code>DataSource</code> as information sources. </p> <p> <code>CreateBatchPrediction</code> is an asynchronous operation. In response to <code>CreateBatchPrediction</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>BatchPrediction</code> status to <code>PENDING</code>. After the <code>BatchPrediction</code> completes, Amazon ML sets the status to <code>COMPLETED</code>. </p> <p>You can poll for status updates by using the <a>GetBatchPrediction</a> operation and checking the <code>Status</code> parameter of the result. After the <code>COMPLETED</code> status appears, the results are available in the location specified by the <code>OutputUri</code> parameter.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateBatchPredictionInput} createBatchPredictionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBatchPredictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBatchPredictionOutput}
     */
    createBatchPrediction(xAmzTarget, createBatchPredictionInput, opts, callback) {
      opts = opts || {};
      let postBody = createBatchPredictionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createBatchPrediction");
      }
      // verify the required parameter 'createBatchPredictionInput' is set
      if (createBatchPredictionInput === undefined || createBatchPredictionInput === null) {
        throw new Error("Missing the required parameter 'createBatchPredictionInput' when calling createBatchPrediction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBatchPredictionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.CreateBatchPrediction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataSourceFromRDS operation.
     * @callback module:api/DefaultApi~createDataSourceFromRDSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDataSourceFromRDSOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a <code>DataSource</code> object from an <a href=\"http://aws.amazon.com/rds/\"> Amazon Relational Database Service</a> (Amazon RDS). A <code>DataSource</code> references data that can be used to perform <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations.</p> <p> <code>CreateDataSourceFromRDS</code> is an asynchronous operation. In response to <code>CreateDataSourceFromRDS</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>DataSource</code> status to <code>PENDING</code>. After the <code>DataSource</code> is created and ready for use, Amazon ML sets the <code>Status</code> parameter to <code>COMPLETED</code>. <code>DataSource</code> in the <code>COMPLETED</code> or <code>PENDING</code> state can be used only to perform <code>&gt;CreateMLModel</code>&gt;, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML cannot accept the input source, it sets the <code>Status</code> parameter to <code>FAILED</code> and includes an error message in the <code>Message</code> attribute of the <code>GetDataSource</code> operation response. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDataSourceFromRDSInput} createDataSourceFromRDSInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataSourceFromRDSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDataSourceFromRDSOutput}
     */
    createDataSourceFromRDS(xAmzTarget, createDataSourceFromRDSInput, opts, callback) {
      opts = opts || {};
      let postBody = createDataSourceFromRDSInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDataSourceFromRDS");
      }
      // verify the required parameter 'createDataSourceFromRDSInput' is set
      if (createDataSourceFromRDSInput === undefined || createDataSourceFromRDSInput === null) {
        throw new Error("Missing the required parameter 'createDataSourceFromRDSInput' when calling createDataSourceFromRDS");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDataSourceFromRDSOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.CreateDataSourceFromRDS', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataSourceFromRedshift operation.
     * @callback module:api/DefaultApi~createDataSourceFromRedshiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDataSourceFromRedshiftOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a <code>DataSource</code> from a database hosted on an Amazon Redshift cluster. A <code>DataSource</code> references data that can be used to perform either <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations.</p> <p> <code>CreateDataSourceFromRedshift</code> is an asynchronous operation. In response to <code>CreateDataSourceFromRedshift</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>DataSource</code> status to <code>PENDING</code>. After the <code>DataSource</code> is created and ready for use, Amazon ML sets the <code>Status</code> parameter to <code>COMPLETED</code>. <code>DataSource</code> in <code>COMPLETED</code> or <code>PENDING</code> states can be used to perform only <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML can't accept the input source, it sets the <code>Status</code> parameter to <code>FAILED</code> and includes an error message in the <code>Message</code> attribute of the <code>GetDataSource</code> operation response. </p> <p>The observations should be contained in the database hosted on an Amazon Redshift cluster and should be specified by a <code>SelectSqlQuery</code> query. Amazon ML executes an <code>Unload</code> command in Amazon Redshift to transfer the result set of the <code>SelectSqlQuery</code> query to <code>S3StagingLocation</code>.</p> <p>After the <code>DataSource</code> has been created, it's ready for use in evaluations and batch predictions. If you plan to use the <code>DataSource</code> to train an <code>MLModel</code>, the <code>DataSource</code> also requires a recipe. A recipe describes how each input variable will be used in training an <code>MLModel</code>. Will the variable be included or excluded from training? Will the variable be manipulated; for example, will it be combined with another variable or will it be split apart into word combinations? The recipe provides answers to these questions.</p> <p>You can't change an existing datasource, but you can copy and modify the settings from an existing Amazon Redshift datasource to create a new datasource. To do so, call <code>GetDataSource</code> for an existing datasource and copy the values to a <code>CreateDataSource</code> call. Change the settings that you want to change and make sure that all required fields have the appropriate values.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDataSourceFromRedshiftInput} createDataSourceFromRedshiftInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataSourceFromRedshiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDataSourceFromRedshiftOutput}
     */
    createDataSourceFromRedshift(xAmzTarget, createDataSourceFromRedshiftInput, opts, callback) {
      opts = opts || {};
      let postBody = createDataSourceFromRedshiftInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDataSourceFromRedshift");
      }
      // verify the required parameter 'createDataSourceFromRedshiftInput' is set
      if (createDataSourceFromRedshiftInput === undefined || createDataSourceFromRedshiftInput === null) {
        throw new Error("Missing the required parameter 'createDataSourceFromRedshiftInput' when calling createDataSourceFromRedshift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDataSourceFromRedshiftOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.CreateDataSourceFromRedshift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataSourceFromS3 operation.
     * @callback module:api/DefaultApi~createDataSourceFromS3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDataSourceFromS3Output} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a <code>DataSource</code> object. A <code>DataSource</code> references data that can be used to perform <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations.</p> <p> <code>CreateDataSourceFromS3</code> is an asynchronous operation. In response to <code>CreateDataSourceFromS3</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>DataSource</code> status to <code>PENDING</code>. After the <code>DataSource</code> has been created and is ready for use, Amazon ML sets the <code>Status</code> parameter to <code>COMPLETED</code>. <code>DataSource</code> in the <code>COMPLETED</code> or <code>PENDING</code> state can be used to perform only <code>CreateMLModel</code>, <code>CreateEvaluation</code> or <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML can't accept the input source, it sets the <code>Status</code> parameter to <code>FAILED</code> and includes an error message in the <code>Message</code> attribute of the <code>GetDataSource</code> operation response. </p> <p>The observation data used in a <code>DataSource</code> should be ready to use; that is, it should have a consistent structure, and missing data values should be kept to a minimum. The observation data must reside in one or more .csv files in an Amazon Simple Storage Service (Amazon S3) location, along with a schema that describes the data items by name and type. The same schema must be used for all of the data files referenced by the <code>DataSource</code>. </p> <p>After the <code>DataSource</code> has been created, it's ready to use in evaluations and batch predictions. If you plan to use the <code>DataSource</code> to train an <code>MLModel</code>, the <code>DataSource</code> also needs a recipe. A recipe describes how each input variable will be used in training an <code>MLModel</code>. Will the variable be included or excluded from training? Will the variable be manipulated; for example, will it be combined with another variable or will it be split apart into word combinations? The recipe provides answers to these questions.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDataSourceFromS3Input} createDataSourceFromS3Input 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataSourceFromS3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDataSourceFromS3Output}
     */
    createDataSourceFromS3(xAmzTarget, createDataSourceFromS3Input, opts, callback) {
      opts = opts || {};
      let postBody = createDataSourceFromS3Input;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDataSourceFromS3");
      }
      // verify the required parameter 'createDataSourceFromS3Input' is set
      if (createDataSourceFromS3Input === undefined || createDataSourceFromS3Input === null) {
        throw new Error("Missing the required parameter 'createDataSourceFromS3Input' when calling createDataSourceFromS3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDataSourceFromS3Output;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.CreateDataSourceFromS3', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEvaluation operation.
     * @callback module:api/DefaultApi~createEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEvaluationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new <code>Evaluation</code> of an <code>MLModel</code>. An <code>MLModel</code> is evaluated on a set of observations associated to a <code>DataSource</code>. Like a <code>DataSource</code> for an <code>MLModel</code>, the <code>DataSource</code> for an <code>Evaluation</code> contains values for the <code>Target Variable</code>. The <code>Evaluation</code> compares the predicted result for each observation to the actual outcome and provides a summary so that you know how effective the <code>MLModel</code> functions on the test data. Evaluation generates a relevant performance metric, such as BinaryAUC, RegressionRMSE or MulticlassAvgFScore based on the corresponding <code>MLModelType</code>: <code>BINARY</code>, <code>REGRESSION</code> or <code>MULTICLASS</code>. </p> <p> <code>CreateEvaluation</code> is an asynchronous operation. In response to <code>CreateEvaluation</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the evaluation status to <code>PENDING</code>. After the <code>Evaluation</code> is created and ready for use, Amazon ML sets the status to <code>COMPLETED</code>. </p> <p>You can use the <code>GetEvaluation</code> operation to check progress of the evaluation during the creation operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateEvaluationInput} createEvaluationInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEvaluationOutput}
     */
    createEvaluation(xAmzTarget, createEvaluationInput, opts, callback) {
      opts = opts || {};
      let postBody = createEvaluationInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createEvaluation");
      }
      // verify the required parameter 'createEvaluationInput' is set
      if (createEvaluationInput === undefined || createEvaluationInput === null) {
        throw new Error("Missing the required parameter 'createEvaluationInput' when calling createEvaluation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEvaluationOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.CreateEvaluation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMLModel operation.
     * @callback module:api/DefaultApi~createMLModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMLModelOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new <code>MLModel</code> using the <code>DataSource</code> and the recipe as information sources. </p> <p>An <code>MLModel</code> is nearly immutable. Users can update only the <code>MLModelName</code> and the <code>ScoreThreshold</code> in an <code>MLModel</code> without creating a new <code>MLModel</code>. </p> <p> <code>CreateMLModel</code> is an asynchronous operation. In response to <code>CreateMLModel</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>MLModel</code> status to <code>PENDING</code>. After the <code>MLModel</code> has been created and ready is for use, Amazon ML sets the status to <code>COMPLETED</code>. </p> <p>You can use the <code>GetMLModel</code> operation to check the progress of the <code>MLModel</code> during the creation operation.</p> <p> <code>CreateMLModel</code> requires a <code>DataSource</code> with computed statistics, which can be created by setting <code>ComputeStatistics</code> to <code>true</code> in <code>CreateDataSourceFromRDS</code>, <code>CreateDataSourceFromS3</code>, or <code>CreateDataSourceFromRedshift</code> operations. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateMLModelInput} createMLModelInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMLModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMLModelOutput}
     */
    createMLModel(xAmzTarget, createMLModelInput, opts, callback) {
      opts = opts || {};
      let postBody = createMLModelInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createMLModel");
      }
      // verify the required parameter 'createMLModelInput' is set
      if (createMLModelInput === undefined || createMLModelInput === null) {
        throw new Error("Missing the required parameter 'createMLModelInput' when calling createMLModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMLModelOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.CreateMLModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRealtimeEndpoint operation.
     * @callback module:api/DefaultApi~createRealtimeEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRealtimeEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a real-time endpoint for the <code>MLModel</code>. The endpoint contains the URI of the <code>MLModel</code>; that is, the location to send real-time prediction requests for the specified <code>MLModel</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateRealtimeEndpointInput} createRealtimeEndpointInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRealtimeEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRealtimeEndpointOutput}
     */
    createRealtimeEndpoint(xAmzTarget, createRealtimeEndpointInput, opts, callback) {
      opts = opts || {};
      let postBody = createRealtimeEndpointInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createRealtimeEndpoint");
      }
      // verify the required parameter 'createRealtimeEndpointInput' is set
      if (createRealtimeEndpointInput === undefined || createRealtimeEndpointInput === null) {
        throw new Error("Missing the required parameter 'createRealtimeEndpointInput' when calling createRealtimeEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRealtimeEndpointOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.CreateRealtimeEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBatchPrediction operation.
     * @callback module:api/DefaultApi~deleteBatchPredictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBatchPredictionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns the DELETED status to a <code>BatchPrediction</code>, rendering it unusable.</p> <p>After using the <code>DeleteBatchPrediction</code> operation, you can use the <a>GetBatchPrediction</a> operation to verify that the status of the <code>BatchPrediction</code> changed to DELETED.</p> <p> <b>Caution:</b> The result of the <code>DeleteBatchPrediction</code> operation is irreversible.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteBatchPredictionInput} deleteBatchPredictionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBatchPredictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBatchPredictionOutput}
     */
    deleteBatchPrediction(xAmzTarget, deleteBatchPredictionInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteBatchPredictionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteBatchPrediction");
      }
      // verify the required parameter 'deleteBatchPredictionInput' is set
      if (deleteBatchPredictionInput === undefined || deleteBatchPredictionInput === null) {
        throw new Error("Missing the required parameter 'deleteBatchPredictionInput' when calling deleteBatchPrediction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteBatchPredictionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DeleteBatchPrediction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataSource operation.
     * @callback module:api/DefaultApi~deleteDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDataSourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns the DELETED status to a <code>DataSource</code>, rendering it unusable.</p> <p>After using the <code>DeleteDataSource</code> operation, you can use the <a>GetDataSource</a> operation to verify that the status of the <code>DataSource</code> changed to DELETED.</p> <p> <b>Caution:</b> The results of the <code>DeleteDataSource</code> operation are irreversible.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDataSourceInput} deleteDataSourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDataSourceOutput}
     */
    deleteDataSource(xAmzTarget, deleteDataSourceInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteDataSourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDataSource");
      }
      // verify the required parameter 'deleteDataSourceInput' is set
      if (deleteDataSourceInput === undefined || deleteDataSourceInput === null) {
        throw new Error("Missing the required parameter 'deleteDataSourceInput' when calling deleteDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteDataSourceOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DeleteDataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEvaluation operation.
     * @callback module:api/DefaultApi~deleteEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteEvaluationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns the <code>DELETED</code> status to an <code>Evaluation</code>, rendering it unusable.</p> <p>After invoking the <code>DeleteEvaluation</code> operation, you can use the <code>GetEvaluation</code> operation to verify that the status of the <code>Evaluation</code> changed to <code>DELETED</code>.</p> <p> <b>Caution:</b> The results of the <code>DeleteEvaluation</code> operation are irreversible.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteEvaluationInput} deleteEvaluationInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteEvaluationOutput}
     */
    deleteEvaluation(xAmzTarget, deleteEvaluationInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteEvaluationInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteEvaluation");
      }
      // verify the required parameter 'deleteEvaluationInput' is set
      if (deleteEvaluationInput === undefined || deleteEvaluationInput === null) {
        throw new Error("Missing the required parameter 'deleteEvaluationInput' when calling deleteEvaluation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteEvaluationOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DeleteEvaluation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMLModel operation.
     * @callback module:api/DefaultApi~deleteMLModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteMLModelOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns the <code>DELETED</code> status to an <code>MLModel</code>, rendering it unusable.</p> <p>After using the <code>DeleteMLModel</code> operation, you can use the <code>GetMLModel</code> operation to verify that the status of the <code>MLModel</code> changed to DELETED.</p> <p> <b>Caution:</b> The result of the <code>DeleteMLModel</code> operation is irreversible.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteMLModelInput} deleteMLModelInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMLModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteMLModelOutput}
     */
    deleteMLModel(xAmzTarget, deleteMLModelInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteMLModelInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteMLModel");
      }
      // verify the required parameter 'deleteMLModelInput' is set
      if (deleteMLModelInput === undefined || deleteMLModelInput === null) {
        throw new Error("Missing the required parameter 'deleteMLModelInput' when calling deleteMLModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteMLModelOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DeleteMLModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRealtimeEndpoint operation.
     * @callback module:api/DefaultApi~deleteRealtimeEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRealtimeEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a real time endpoint of an <code>MLModel</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRealtimeEndpointInput} deleteRealtimeEndpointInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRealtimeEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRealtimeEndpointOutput}
     */
    deleteRealtimeEndpoint(xAmzTarget, deleteRealtimeEndpointInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteRealtimeEndpointInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRealtimeEndpoint");
      }
      // verify the required parameter 'deleteRealtimeEndpointInput' is set
      if (deleteRealtimeEndpointInput === undefined || deleteRealtimeEndpointInput === null) {
        throw new Error("Missing the required parameter 'deleteRealtimeEndpointInput' when calling deleteRealtimeEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRealtimeEndpointOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DeleteRealtimeEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTags operation.
     * @callback module:api/DefaultApi~deleteTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteTagsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified tags associated with an ML object. After this operation is complete, you can't recover deleted tags.</p> <p>If you specify a tag that doesn't exist, Amazon ML ignores it.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTagsInput} deleteTagsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteTagsOutput}
     */
    deleteTags(xAmzTarget, deleteTagsInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteTagsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTags");
      }
      // verify the required parameter 'deleteTagsInput' is set
      if (deleteTagsInput === undefined || deleteTagsInput === null) {
        throw new Error("Missing the required parameter 'deleteTagsInput' when calling deleteTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteTagsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DeleteTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBatchPredictions operation.
     * @callback module:api/DefaultApi~describeBatchPredictionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBatchPredictionsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of <code>BatchPrediction</code> operations that match the search criteria in the request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeBatchPredictionsInput} describeBatchPredictionsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [limit] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeBatchPredictionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBatchPredictionsOutput}
     */
    describeBatchPredictions(xAmzTarget, describeBatchPredictionsInput, opts, callback) {
      opts = opts || {};
      let postBody = describeBatchPredictionsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeBatchPredictions");
      }
      // verify the required parameter 'describeBatchPredictionsInput' is set
      if (describeBatchPredictionsInput === undefined || describeBatchPredictionsInput === null) {
        throw new Error("Missing the required parameter 'describeBatchPredictionsInput' when calling describeBatchPredictions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Limit': opts['limit'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeBatchPredictionsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DescribeBatchPredictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDataSources operation.
     * @callback module:api/DefaultApi~describeDataSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataSourcesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of <code>DataSource</code> that match the search criteria in the request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDataSourcesInput} describeDataSourcesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [limit] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeDataSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataSourcesOutput}
     */
    describeDataSources(xAmzTarget, describeDataSourcesInput, opts, callback) {
      opts = opts || {};
      let postBody = describeDataSourcesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDataSources");
      }
      // verify the required parameter 'describeDataSourcesInput' is set
      if (describeDataSourcesInput === undefined || describeDataSourcesInput === null) {
        throw new Error("Missing the required parameter 'describeDataSourcesInput' when calling describeDataSources");
      }

      let pathParams = {
      };
      let queryParams = {
        'Limit': opts['limit'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDataSourcesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DescribeDataSources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEvaluations operation.
     * @callback module:api/DefaultApi~describeEvaluationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEvaluationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of <code>DescribeEvaluations</code> that match the search criteria in the request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEvaluationsInput} describeEvaluationsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [limit] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeEvaluationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEvaluationsOutput}
     */
    describeEvaluations(xAmzTarget, describeEvaluationsInput, opts, callback) {
      opts = opts || {};
      let postBody = describeEvaluationsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEvaluations");
      }
      // verify the required parameter 'describeEvaluationsInput' is set
      if (describeEvaluationsInput === undefined || describeEvaluationsInput === null) {
        throw new Error("Missing the required parameter 'describeEvaluationsInput' when calling describeEvaluations");
      }

      let pathParams = {
      };
      let queryParams = {
        'Limit': opts['limit'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEvaluationsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DescribeEvaluations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeMLModels operation.
     * @callback module:api/DefaultApi~describeMLModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeMLModelsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of <code>MLModel</code> that match the search criteria in the request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeMLModelsInput} describeMLModelsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [limit] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeMLModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeMLModelsOutput}
     */
    describeMLModels(xAmzTarget, describeMLModelsInput, opts, callback) {
      opts = opts || {};
      let postBody = describeMLModelsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeMLModels");
      }
      // verify the required parameter 'describeMLModelsInput' is set
      if (describeMLModelsInput === undefined || describeMLModelsInput === null) {
        throw new Error("Missing the required parameter 'describeMLModelsInput' when calling describeMLModels");
      }

      let pathParams = {
      };
      let queryParams = {
        'Limit': opts['limit'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeMLModelsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DescribeMLModels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTags operation.
     * @callback module:api/DefaultApi~describeTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTagsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes one or more of the tags for your Amazon ML object.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTagsInput} describeTagsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTagsOutput}
     */
    describeTags(xAmzTarget, describeTagsInput, opts, callback) {
      opts = opts || {};
      let postBody = describeTagsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTags");
      }
      // verify the required parameter 'describeTagsInput' is set
      if (describeTagsInput === undefined || describeTagsInput === null) {
        throw new Error("Missing the required parameter 'describeTagsInput' when calling describeTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTagsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.DescribeTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchPrediction operation.
     * @callback module:api/DefaultApi~getBatchPredictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBatchPredictionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a <code>BatchPrediction</code> that includes detailed metadata, status, and data file information for a <code>Batch Prediction</code> request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetBatchPredictionInput} getBatchPredictionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBatchPredictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBatchPredictionOutput}
     */
    getBatchPrediction(xAmzTarget, getBatchPredictionInput, opts, callback) {
      opts = opts || {};
      let postBody = getBatchPredictionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getBatchPrediction");
      }
      // verify the required parameter 'getBatchPredictionInput' is set
      if (getBatchPredictionInput === undefined || getBatchPredictionInput === null) {
        throw new Error("Missing the required parameter 'getBatchPredictionInput' when calling getBatchPrediction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBatchPredictionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.GetBatchPrediction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSource operation.
     * @callback module:api/DefaultApi~getDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataSourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a <code>DataSource</code> that includes metadata and data file information, as well as the current status of the <code>DataSource</code>.</p> <p> <code>GetDataSource</code> provides results in normal or verbose format. The verbose format adds the schema description and the list of files pointed to by the DataSource to the normal format.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetDataSourceInput} getDataSourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataSourceOutput}
     */
    getDataSource(xAmzTarget, getDataSourceInput, opts, callback) {
      opts = opts || {};
      let postBody = getDataSourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getDataSource");
      }
      // verify the required parameter 'getDataSourceInput' is set
      if (getDataSourceInput === undefined || getDataSourceInput === null) {
        throw new Error("Missing the required parameter 'getDataSourceInput' when calling getDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.GetDataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvaluation operation.
     * @callback module:api/DefaultApi~getEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEvaluationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an <code>Evaluation</code> that includes metadata as well as the current status of the <code>Evaluation</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetEvaluationInput} getEvaluationInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEvaluationOutput}
     */
    getEvaluation(xAmzTarget, getEvaluationInput, opts, callback) {
      opts = opts || {};
      let postBody = getEvaluationInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getEvaluation");
      }
      // verify the required parameter 'getEvaluationInput' is set
      if (getEvaluationInput === undefined || getEvaluationInput === null) {
        throw new Error("Missing the required parameter 'getEvaluationInput' when calling getEvaluation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEvaluationOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.GetEvaluation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMLModel operation.
     * @callback module:api/DefaultApi~getMLModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMLModelOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns an <code>MLModel</code> that includes detailed metadata, data source information, and the current status of the <code>MLModel</code>.</p> <p> <code>GetMLModel</code> provides results in normal or verbose format. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetMLModelInput} getMLModelInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMLModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMLModelOutput}
     */
    getMLModel(xAmzTarget, getMLModelInput, opts, callback) {
      opts = opts || {};
      let postBody = getMLModelInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getMLModel");
      }
      // verify the required parameter 'getMLModelInput' is set
      if (getMLModelInput === undefined || getMLModelInput === null) {
        throw new Error("Missing the required parameter 'getMLModelInput' when calling getMLModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMLModelOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.GetMLModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predict operation.
     * @callback module:api/DefaultApi~predictCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Generates a prediction for the observation using the specified <code>ML Model</code>.</p> <p> <b>Note:</b> Not all response parameters will be populated. Whether a response parameter is populated depends on the type of model requested.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PredictInput} predictInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~predictCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictOutput}
     */
    predict(xAmzTarget, predictInput, opts, callback) {
      opts = opts || {};
      let postBody = predictInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling predict");
      }
      // verify the required parameter 'predictInput' is set
      if (predictInput === undefined || predictInput === null) {
        throw new Error("Missing the required parameter 'predictInput' when calling predict");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PredictOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.Predict', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBatchPrediction operation.
     * @callback module:api/DefaultApi~updateBatchPredictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBatchPredictionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the <code>BatchPredictionName</code> of a <code>BatchPrediction</code>.</p> <p>You can use the <code>GetBatchPrediction</code> operation to view the contents of the updated data element.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateBatchPredictionInput} updateBatchPredictionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBatchPredictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBatchPredictionOutput}
     */
    updateBatchPrediction(xAmzTarget, updateBatchPredictionInput, opts, callback) {
      opts = opts || {};
      let postBody = updateBatchPredictionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateBatchPrediction");
      }
      // verify the required parameter 'updateBatchPredictionInput' is set
      if (updateBatchPredictionInput === undefined || updateBatchPredictionInput === null) {
        throw new Error("Missing the required parameter 'updateBatchPredictionInput' when calling updateBatchPrediction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBatchPredictionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.UpdateBatchPrediction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataSource operation.
     * @callback module:api/DefaultApi~updateDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDataSourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the <code>DataSourceName</code> of a <code>DataSource</code>.</p> <p>You can use the <code>GetDataSource</code> operation to view the contents of the updated data element.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDataSourceInput} updateDataSourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDataSourceOutput}
     */
    updateDataSource(xAmzTarget, updateDataSourceInput, opts, callback) {
      opts = opts || {};
      let postBody = updateDataSourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDataSource");
      }
      // verify the required parameter 'updateDataSourceInput' is set
      if (updateDataSourceInput === undefined || updateDataSourceInput === null) {
        throw new Error("Missing the required parameter 'updateDataSourceInput' when calling updateDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDataSourceOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.UpdateDataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEvaluation operation.
     * @callback module:api/DefaultApi~updateEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEvaluationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the <code>EvaluationName</code> of an <code>Evaluation</code>.</p> <p>You can use the <code>GetEvaluation</code> operation to view the contents of the updated data element.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateEvaluationInput} updateEvaluationInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEvaluationOutput}
     */
    updateEvaluation(xAmzTarget, updateEvaluationInput, opts, callback) {
      opts = opts || {};
      let postBody = updateEvaluationInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateEvaluation");
      }
      // verify the required parameter 'updateEvaluationInput' is set
      if (updateEvaluationInput === undefined || updateEvaluationInput === null) {
        throw new Error("Missing the required parameter 'updateEvaluationInput' when calling updateEvaluation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEvaluationOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.UpdateEvaluation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMLModel operation.
     * @callback module:api/DefaultApi~updateMLModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMLModelOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the <code>MLModelName</code> and the <code>ScoreThreshold</code> of an <code>MLModel</code>.</p> <p>You can use the <code>GetMLModel</code> operation to view the contents of the updated data element.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateMLModelInput} updateMLModelInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMLModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMLModelOutput}
     */
    updateMLModel(xAmzTarget, updateMLModelInput, opts, callback) {
      opts = opts || {};
      let postBody = updateMLModelInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateMLModel");
      }
      // verify the required parameter 'updateMLModelInput' is set
      if (updateMLModelInput === undefined || updateMLModelInput === null) {
        throw new Error("Missing the required parameter 'updateMLModelInput' when calling updateMLModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMLModelOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonML_20141212.UpdateMLModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
