/**
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonMachineLearning);
  }
}(this, function(expect, AmazonMachineLearning) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonMachineLearning.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addTags', function() {
      it('should call addTags successfully', function(done) {
        //uncomment below and update the code to test addTags
        //instance.addTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBatchPrediction', function() {
      it('should call createBatchPrediction successfully', function(done) {
        //uncomment below and update the code to test createBatchPrediction
        //instance.createBatchPrediction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataSourceFromRDS', function() {
      it('should call createDataSourceFromRDS successfully', function(done) {
        //uncomment below and update the code to test createDataSourceFromRDS
        //instance.createDataSourceFromRDS(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataSourceFromRedshift', function() {
      it('should call createDataSourceFromRedshift successfully', function(done) {
        //uncomment below and update the code to test createDataSourceFromRedshift
        //instance.createDataSourceFromRedshift(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataSourceFromS3', function() {
      it('should call createDataSourceFromS3 successfully', function(done) {
        //uncomment below and update the code to test createDataSourceFromS3
        //instance.createDataSourceFromS3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEvaluation', function() {
      it('should call createEvaluation successfully', function(done) {
        //uncomment below and update the code to test createEvaluation
        //instance.createEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMLModel', function() {
      it('should call createMLModel successfully', function(done) {
        //uncomment below and update the code to test createMLModel
        //instance.createMLModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRealtimeEndpoint', function() {
      it('should call createRealtimeEndpoint successfully', function(done) {
        //uncomment below and update the code to test createRealtimeEndpoint
        //instance.createRealtimeEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBatchPrediction', function() {
      it('should call deleteBatchPrediction successfully', function(done) {
        //uncomment below and update the code to test deleteBatchPrediction
        //instance.deleteBatchPrediction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataSource', function() {
      it('should call deleteDataSource successfully', function(done) {
        //uncomment below and update the code to test deleteDataSource
        //instance.deleteDataSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEvaluation', function() {
      it('should call deleteEvaluation successfully', function(done) {
        //uncomment below and update the code to test deleteEvaluation
        //instance.deleteEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMLModel', function() {
      it('should call deleteMLModel successfully', function(done) {
        //uncomment below and update the code to test deleteMLModel
        //instance.deleteMLModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRealtimeEndpoint', function() {
      it('should call deleteRealtimeEndpoint successfully', function(done) {
        //uncomment below and update the code to test deleteRealtimeEndpoint
        //instance.deleteRealtimeEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTags', function() {
      it('should call deleteTags successfully', function(done) {
        //uncomment below and update the code to test deleteTags
        //instance.deleteTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBatchPredictions', function() {
      it('should call describeBatchPredictions successfully', function(done) {
        //uncomment below and update the code to test describeBatchPredictions
        //instance.describeBatchPredictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDataSources', function() {
      it('should call describeDataSources successfully', function(done) {
        //uncomment below and update the code to test describeDataSources
        //instance.describeDataSources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEvaluations', function() {
      it('should call describeEvaluations successfully', function(done) {
        //uncomment below and update the code to test describeEvaluations
        //instance.describeEvaluations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMLModels', function() {
      it('should call describeMLModels successfully', function(done) {
        //uncomment below and update the code to test describeMLModels
        //instance.describeMLModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTags', function() {
      it('should call describeTags successfully', function(done) {
        //uncomment below and update the code to test describeTags
        //instance.describeTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBatchPrediction', function() {
      it('should call getBatchPrediction successfully', function(done) {
        //uncomment below and update the code to test getBatchPrediction
        //instance.getBatchPrediction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataSource', function() {
      it('should call getDataSource successfully', function(done) {
        //uncomment below and update the code to test getDataSource
        //instance.getDataSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEvaluation', function() {
      it('should call getEvaluation successfully', function(done) {
        //uncomment below and update the code to test getEvaluation
        //instance.getEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMLModel', function() {
      it('should call getMLModel successfully', function(done) {
        //uncomment below and update the code to test getMLModel
        //instance.getMLModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predict', function() {
      it('should call predict successfully', function(done) {
        //uncomment below and update the code to test predict
        //instance.predict(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBatchPrediction', function() {
      it('should call updateBatchPrediction successfully', function(done) {
        //uncomment below and update the code to test updateBatchPrediction
        //instance.updateBatchPrediction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDataSource', function() {
      it('should call updateDataSource successfully', function(done) {
        //uncomment below and update the code to test updateDataSource
        //instance.updateDataSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEvaluation', function() {
      it('should call updateEvaluation successfully', function(done) {
        //uncomment below and update the code to test updateEvaluation
        //instance.updateEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMLModel', function() {
      it('should call updateMLModel successfully', function(done) {
        //uncomment below and update the code to test updateMLModel
        //instance.updateMLModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
