# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDataSourceInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_id: str=None, verbose: bool=None):
        """GetDataSourceInput - a model defined in OpenAPI

        :param data_source_id: The data_source_id of this GetDataSourceInput.
        :param verbose: The verbose of this GetDataSourceInput.
        """
        self.openapi_types = {
            'data_source_id': str,
            'verbose': bool
        }

        self.attribute_map = {
            'data_source_id': 'DataSourceId',
            'verbose': 'Verbose'
        }

        self._data_source_id = data_source_id
        self._verbose = verbose

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDataSourceInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDataSourceInput of this GetDataSourceInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_id(self):
        """Gets the data_source_id of this GetDataSourceInput.


        :return: The data_source_id of this GetDataSourceInput.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this GetDataSourceInput.


        :param data_source_id: The data_source_id of this GetDataSourceInput.
        :type data_source_id: str
        """
        if data_source_id is None:
            raise ValueError("Invalid value for `data_source_id`, must not be `None`")

        self._data_source_id = data_source_id

    @property
    def verbose(self):
        """Gets the verbose of this GetDataSourceInput.


        :return: The verbose of this GetDataSourceInput.
        :rtype: bool
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose):
        """Sets the verbose of this GetDataSourceInput.


        :param verbose: The verbose of this GetDataSourceInput.
        :type verbose: bool
        """

        self._verbose = verbose
