# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateEvaluationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_id: str=None, evaluation_name: str=None):
        """UpdateEvaluationInput - a model defined in OpenAPI

        :param evaluation_id: The evaluation_id of this UpdateEvaluationInput.
        :param evaluation_name: The evaluation_name of this UpdateEvaluationInput.
        """
        self.openapi_types = {
            'evaluation_id': str,
            'evaluation_name': str
        }

        self.attribute_map = {
            'evaluation_id': 'EvaluationId',
            'evaluation_name': 'EvaluationName'
        }

        self._evaluation_id = evaluation_id
        self._evaluation_name = evaluation_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateEvaluationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateEvaluationInput of this UpdateEvaluationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_id(self):
        """Gets the evaluation_id of this UpdateEvaluationInput.


        :return: The evaluation_id of this UpdateEvaluationInput.
        :rtype: str
        """
        return self._evaluation_id

    @evaluation_id.setter
    def evaluation_id(self, evaluation_id):
        """Sets the evaluation_id of this UpdateEvaluationInput.


        :param evaluation_id: The evaluation_id of this UpdateEvaluationInput.
        :type evaluation_id: str
        """
        if evaluation_id is None:
            raise ValueError("Invalid value for `evaluation_id`, must not be `None`")

        self._evaluation_id = evaluation_id

    @property
    def evaluation_name(self):
        """Gets the evaluation_name of this UpdateEvaluationInput.


        :return: The evaluation_name of this UpdateEvaluationInput.
        :rtype: str
        """
        return self._evaluation_name

    @evaluation_name.setter
    def evaluation_name(self, evaluation_name):
        """Sets the evaluation_name of this UpdateEvaluationInput.


        :param evaluation_name: The evaluation_name of this UpdateEvaluationInput.
        :type evaluation_name: str
        """
        if evaluation_name is None:
            raise ValueError("Invalid value for `evaluation_name`, must not be `None`")

        self._evaluation_name = evaluation_name
