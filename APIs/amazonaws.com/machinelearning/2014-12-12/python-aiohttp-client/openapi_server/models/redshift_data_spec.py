# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.redshift_data_spec_database_credentials import RedshiftDataSpecDatabaseCredentials
from openapi_server.models.redshift_data_spec_database_information import RedshiftDataSpecDatabaseInformation
from openapi_server import util


class RedshiftDataSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_information: RedshiftDataSpecDatabaseInformation=None, select_sql_query: str=None, database_credentials: RedshiftDataSpecDatabaseCredentials=None, s3_staging_location: str=None, data_rearrangement: str=None, data_schema: str=None, data_schema_uri: str=None):
        """RedshiftDataSpec - a model defined in OpenAPI

        :param database_information: The database_information of this RedshiftDataSpec.
        :param select_sql_query: The select_sql_query of this RedshiftDataSpec.
        :param database_credentials: The database_credentials of this RedshiftDataSpec.
        :param s3_staging_location: The s3_staging_location of this RedshiftDataSpec.
        :param data_rearrangement: The data_rearrangement of this RedshiftDataSpec.
        :param data_schema: The data_schema of this RedshiftDataSpec.
        :param data_schema_uri: The data_schema_uri of this RedshiftDataSpec.
        """
        self.openapi_types = {
            'database_information': RedshiftDataSpecDatabaseInformation,
            'select_sql_query': str,
            'database_credentials': RedshiftDataSpecDatabaseCredentials,
            's3_staging_location': str,
            'data_rearrangement': str,
            'data_schema': str,
            'data_schema_uri': str
        }

        self.attribute_map = {
            'database_information': 'DatabaseInformation',
            'select_sql_query': 'SelectSqlQuery',
            'database_credentials': 'DatabaseCredentials',
            's3_staging_location': 'S3StagingLocation',
            'data_rearrangement': 'DataRearrangement',
            'data_schema': 'DataSchema',
            'data_schema_uri': 'DataSchemaUri'
        }

        self._database_information = database_information
        self._select_sql_query = select_sql_query
        self._database_credentials = database_credentials
        self._s3_staging_location = s3_staging_location
        self._data_rearrangement = data_rearrangement
        self._data_schema = data_schema
        self._data_schema_uri = data_schema_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedshiftDataSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedshiftDataSpec of this RedshiftDataSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_information(self):
        """Gets the database_information of this RedshiftDataSpec.


        :return: The database_information of this RedshiftDataSpec.
        :rtype: RedshiftDataSpecDatabaseInformation
        """
        return self._database_information

    @database_information.setter
    def database_information(self, database_information):
        """Sets the database_information of this RedshiftDataSpec.


        :param database_information: The database_information of this RedshiftDataSpec.
        :type database_information: RedshiftDataSpecDatabaseInformation
        """
        if database_information is None:
            raise ValueError("Invalid value for `database_information`, must not be `None`")

        self._database_information = database_information

    @property
    def select_sql_query(self):
        """Gets the select_sql_query of this RedshiftDataSpec.


        :return: The select_sql_query of this RedshiftDataSpec.
        :rtype: str
        """
        return self._select_sql_query

    @select_sql_query.setter
    def select_sql_query(self, select_sql_query):
        """Sets the select_sql_query of this RedshiftDataSpec.


        :param select_sql_query: The select_sql_query of this RedshiftDataSpec.
        :type select_sql_query: str
        """
        if select_sql_query is None:
            raise ValueError("Invalid value for `select_sql_query`, must not be `None`")

        self._select_sql_query = select_sql_query

    @property
    def database_credentials(self):
        """Gets the database_credentials of this RedshiftDataSpec.


        :return: The database_credentials of this RedshiftDataSpec.
        :rtype: RedshiftDataSpecDatabaseCredentials
        """
        return self._database_credentials

    @database_credentials.setter
    def database_credentials(self, database_credentials):
        """Sets the database_credentials of this RedshiftDataSpec.


        :param database_credentials: The database_credentials of this RedshiftDataSpec.
        :type database_credentials: RedshiftDataSpecDatabaseCredentials
        """
        if database_credentials is None:
            raise ValueError("Invalid value for `database_credentials`, must not be `None`")

        self._database_credentials = database_credentials

    @property
    def s3_staging_location(self):
        """Gets the s3_staging_location of this RedshiftDataSpec.


        :return: The s3_staging_location of this RedshiftDataSpec.
        :rtype: str
        """
        return self._s3_staging_location

    @s3_staging_location.setter
    def s3_staging_location(self, s3_staging_location):
        """Sets the s3_staging_location of this RedshiftDataSpec.


        :param s3_staging_location: The s3_staging_location of this RedshiftDataSpec.
        :type s3_staging_location: str
        """
        if s3_staging_location is None:
            raise ValueError("Invalid value for `s3_staging_location`, must not be `None`")

        self._s3_staging_location = s3_staging_location

    @property
    def data_rearrangement(self):
        """Gets the data_rearrangement of this RedshiftDataSpec.


        :return: The data_rearrangement of this RedshiftDataSpec.
        :rtype: str
        """
        return self._data_rearrangement

    @data_rearrangement.setter
    def data_rearrangement(self, data_rearrangement):
        """Sets the data_rearrangement of this RedshiftDataSpec.


        :param data_rearrangement: The data_rearrangement of this RedshiftDataSpec.
        :type data_rearrangement: str
        """

        self._data_rearrangement = data_rearrangement

    @property
    def data_schema(self):
        """Gets the data_schema of this RedshiftDataSpec.


        :return: The data_schema of this RedshiftDataSpec.
        :rtype: str
        """
        return self._data_schema

    @data_schema.setter
    def data_schema(self, data_schema):
        """Sets the data_schema of this RedshiftDataSpec.


        :param data_schema: The data_schema of this RedshiftDataSpec.
        :type data_schema: str
        """

        self._data_schema = data_schema

    @property
    def data_schema_uri(self):
        """Gets the data_schema_uri of this RedshiftDataSpec.


        :return: The data_schema_uri of this RedshiftDataSpec.
        :rtype: str
        """
        return self._data_schema_uri

    @data_schema_uri.setter
    def data_schema_uri(self, data_schema_uri):
        """Sets the data_schema_uri of this RedshiftDataSpec.


        :param data_schema_uri: The data_schema_uri of this RedshiftDataSpec.
        :type data_schema_uri: str
        """

        self._data_schema_uri = data_schema_uri
