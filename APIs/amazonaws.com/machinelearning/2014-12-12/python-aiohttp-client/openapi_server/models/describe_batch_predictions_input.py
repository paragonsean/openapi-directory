# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_prediction_filter_variable import BatchPredictionFilterVariable
from openapi_server.models.sort_order import SortOrder
from openapi_server import util


class DescribeBatchPredictionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_variable: BatchPredictionFilterVariable=None, eq: str=None, gt: str=None, lt: str=None, ge: str=None, le: str=None, ne: str=None, prefix: str=None, sort_order: SortOrder=None, next_token: str=None, limit: int=None):
        """DescribeBatchPredictionsInput - a model defined in OpenAPI

        :param filter_variable: The filter_variable of this DescribeBatchPredictionsInput.
        :param eq: The eq of this DescribeBatchPredictionsInput.
        :param gt: The gt of this DescribeBatchPredictionsInput.
        :param lt: The lt of this DescribeBatchPredictionsInput.
        :param ge: The ge of this DescribeBatchPredictionsInput.
        :param le: The le of this DescribeBatchPredictionsInput.
        :param ne: The ne of this DescribeBatchPredictionsInput.
        :param prefix: The prefix of this DescribeBatchPredictionsInput.
        :param sort_order: The sort_order of this DescribeBatchPredictionsInput.
        :param next_token: The next_token of this DescribeBatchPredictionsInput.
        :param limit: The limit of this DescribeBatchPredictionsInput.
        """
        self.openapi_types = {
            'filter_variable': BatchPredictionFilterVariable,
            'eq': str,
            'gt': str,
            'lt': str,
            'ge': str,
            'le': str,
            'ne': str,
            'prefix': str,
            'sort_order': SortOrder,
            'next_token': str,
            'limit': int
        }

        self.attribute_map = {
            'filter_variable': 'FilterVariable',
            'eq': 'EQ',
            'gt': 'GT',
            'lt': 'LT',
            'ge': 'GE',
            'le': 'LE',
            'ne': 'NE',
            'prefix': 'Prefix',
            'sort_order': 'SortOrder',
            'next_token': 'NextToken',
            'limit': 'Limit'
        }

        self._filter_variable = filter_variable
        self._eq = eq
        self._gt = gt
        self._lt = lt
        self._ge = ge
        self._le = le
        self._ne = ne
        self._prefix = prefix
        self._sort_order = sort_order
        self._next_token = next_token
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeBatchPredictionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeBatchPredictionsInput of this DescribeBatchPredictionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_variable(self):
        """Gets the filter_variable of this DescribeBatchPredictionsInput.


        :return: The filter_variable of this DescribeBatchPredictionsInput.
        :rtype: BatchPredictionFilterVariable
        """
        return self._filter_variable

    @filter_variable.setter
    def filter_variable(self, filter_variable):
        """Sets the filter_variable of this DescribeBatchPredictionsInput.


        :param filter_variable: The filter_variable of this DescribeBatchPredictionsInput.
        :type filter_variable: BatchPredictionFilterVariable
        """

        self._filter_variable = filter_variable

    @property
    def eq(self):
        """Gets the eq of this DescribeBatchPredictionsInput.


        :return: The eq of this DescribeBatchPredictionsInput.
        :rtype: str
        """
        return self._eq

    @eq.setter
    def eq(self, eq):
        """Sets the eq of this DescribeBatchPredictionsInput.


        :param eq: The eq of this DescribeBatchPredictionsInput.
        :type eq: str
        """

        self._eq = eq

    @property
    def gt(self):
        """Gets the gt of this DescribeBatchPredictionsInput.


        :return: The gt of this DescribeBatchPredictionsInput.
        :rtype: str
        """
        return self._gt

    @gt.setter
    def gt(self, gt):
        """Sets the gt of this DescribeBatchPredictionsInput.


        :param gt: The gt of this DescribeBatchPredictionsInput.
        :type gt: str
        """

        self._gt = gt

    @property
    def lt(self):
        """Gets the lt of this DescribeBatchPredictionsInput.


        :return: The lt of this DescribeBatchPredictionsInput.
        :rtype: str
        """
        return self._lt

    @lt.setter
    def lt(self, lt):
        """Sets the lt of this DescribeBatchPredictionsInput.


        :param lt: The lt of this DescribeBatchPredictionsInput.
        :type lt: str
        """

        self._lt = lt

    @property
    def ge(self):
        """Gets the ge of this DescribeBatchPredictionsInput.


        :return: The ge of this DescribeBatchPredictionsInput.
        :rtype: str
        """
        return self._ge

    @ge.setter
    def ge(self, ge):
        """Sets the ge of this DescribeBatchPredictionsInput.


        :param ge: The ge of this DescribeBatchPredictionsInput.
        :type ge: str
        """

        self._ge = ge

    @property
    def le(self):
        """Gets the le of this DescribeBatchPredictionsInput.


        :return: The le of this DescribeBatchPredictionsInput.
        :rtype: str
        """
        return self._le

    @le.setter
    def le(self, le):
        """Sets the le of this DescribeBatchPredictionsInput.


        :param le: The le of this DescribeBatchPredictionsInput.
        :type le: str
        """

        self._le = le

    @property
    def ne(self):
        """Gets the ne of this DescribeBatchPredictionsInput.


        :return: The ne of this DescribeBatchPredictionsInput.
        :rtype: str
        """
        return self._ne

    @ne.setter
    def ne(self, ne):
        """Sets the ne of this DescribeBatchPredictionsInput.


        :param ne: The ne of this DescribeBatchPredictionsInput.
        :type ne: str
        """

        self._ne = ne

    @property
    def prefix(self):
        """Gets the prefix of this DescribeBatchPredictionsInput.


        :return: The prefix of this DescribeBatchPredictionsInput.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this DescribeBatchPredictionsInput.


        :param prefix: The prefix of this DescribeBatchPredictionsInput.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def sort_order(self):
        """Gets the sort_order of this DescribeBatchPredictionsInput.


        :return: The sort_order of this DescribeBatchPredictionsInput.
        :rtype: SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this DescribeBatchPredictionsInput.


        :param sort_order: The sort_order of this DescribeBatchPredictionsInput.
        :type sort_order: SortOrder
        """

        self._sort_order = sort_order

    @property
    def next_token(self):
        """Gets the next_token of this DescribeBatchPredictionsInput.


        :return: The next_token of this DescribeBatchPredictionsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeBatchPredictionsInput.


        :param next_token: The next_token of this DescribeBatchPredictionsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def limit(self):
        """Gets the limit of this DescribeBatchPredictionsInput.


        :return: The limit of this DescribeBatchPredictionsInput.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DescribeBatchPredictionsInput.


        :param limit: The limit of this DescribeBatchPredictionsInput.
        :type limit: int
        """

        self._limit = limit
