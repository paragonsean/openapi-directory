# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_status import EntityStatus
from openapi_server import util


class BatchPrediction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_prediction_id: str=None, ml_model_id: str=None, batch_prediction_data_source_id: str=None, input_data_location_s3: str=None, created_by_iam_user: str=None, created_at: datetime=None, last_updated_at: datetime=None, name: str=None, status: EntityStatus=None, output_uri: str=None, message: str=None, compute_time: int=None, finished_at: datetime=None, started_at: datetime=None, total_record_count: int=None, invalid_record_count: int=None):
        """BatchPrediction - a model defined in OpenAPI

        :param batch_prediction_id: The batch_prediction_id of this BatchPrediction.
        :param ml_model_id: The ml_model_id of this BatchPrediction.
        :param batch_prediction_data_source_id: The batch_prediction_data_source_id of this BatchPrediction.
        :param input_data_location_s3: The input_data_location_s3 of this BatchPrediction.
        :param created_by_iam_user: The created_by_iam_user of this BatchPrediction.
        :param created_at: The created_at of this BatchPrediction.
        :param last_updated_at: The last_updated_at of this BatchPrediction.
        :param name: The name of this BatchPrediction.
        :param status: The status of this BatchPrediction.
        :param output_uri: The output_uri of this BatchPrediction.
        :param message: The message of this BatchPrediction.
        :param compute_time: The compute_time of this BatchPrediction.
        :param finished_at: The finished_at of this BatchPrediction.
        :param started_at: The started_at of this BatchPrediction.
        :param total_record_count: The total_record_count of this BatchPrediction.
        :param invalid_record_count: The invalid_record_count of this BatchPrediction.
        """
        self.openapi_types = {
            'batch_prediction_id': str,
            'ml_model_id': str,
            'batch_prediction_data_source_id': str,
            'input_data_location_s3': str,
            'created_by_iam_user': str,
            'created_at': datetime,
            'last_updated_at': datetime,
            'name': str,
            'status': EntityStatus,
            'output_uri': str,
            'message': str,
            'compute_time': int,
            'finished_at': datetime,
            'started_at': datetime,
            'total_record_count': int,
            'invalid_record_count': int
        }

        self.attribute_map = {
            'batch_prediction_id': 'BatchPredictionId',
            'ml_model_id': 'MLModelId',
            'batch_prediction_data_source_id': 'BatchPredictionDataSourceId',
            'input_data_location_s3': 'InputDataLocationS3',
            'created_by_iam_user': 'CreatedByIamUser',
            'created_at': 'CreatedAt',
            'last_updated_at': 'LastUpdatedAt',
            'name': 'Name',
            'status': 'Status',
            'output_uri': 'OutputUri',
            'message': 'Message',
            'compute_time': 'ComputeTime',
            'finished_at': 'FinishedAt',
            'started_at': 'StartedAt',
            'total_record_count': 'TotalRecordCount',
            'invalid_record_count': 'InvalidRecordCount'
        }

        self._batch_prediction_id = batch_prediction_id
        self._ml_model_id = ml_model_id
        self._batch_prediction_data_source_id = batch_prediction_data_source_id
        self._input_data_location_s3 = input_data_location_s3
        self._created_by_iam_user = created_by_iam_user
        self._created_at = created_at
        self._last_updated_at = last_updated_at
        self._name = name
        self._status = status
        self._output_uri = output_uri
        self._message = message
        self._compute_time = compute_time
        self._finished_at = finished_at
        self._started_at = started_at
        self._total_record_count = total_record_count
        self._invalid_record_count = invalid_record_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPrediction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPrediction of this BatchPrediction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_prediction_id(self):
        """Gets the batch_prediction_id of this BatchPrediction.


        :return: The batch_prediction_id of this BatchPrediction.
        :rtype: str
        """
        return self._batch_prediction_id

    @batch_prediction_id.setter
    def batch_prediction_id(self, batch_prediction_id):
        """Sets the batch_prediction_id of this BatchPrediction.


        :param batch_prediction_id: The batch_prediction_id of this BatchPrediction.
        :type batch_prediction_id: str
        """

        self._batch_prediction_id = batch_prediction_id

    @property
    def ml_model_id(self):
        """Gets the ml_model_id of this BatchPrediction.


        :return: The ml_model_id of this BatchPrediction.
        :rtype: str
        """
        return self._ml_model_id

    @ml_model_id.setter
    def ml_model_id(self, ml_model_id):
        """Sets the ml_model_id of this BatchPrediction.


        :param ml_model_id: The ml_model_id of this BatchPrediction.
        :type ml_model_id: str
        """

        self._ml_model_id = ml_model_id

    @property
    def batch_prediction_data_source_id(self):
        """Gets the batch_prediction_data_source_id of this BatchPrediction.


        :return: The batch_prediction_data_source_id of this BatchPrediction.
        :rtype: str
        """
        return self._batch_prediction_data_source_id

    @batch_prediction_data_source_id.setter
    def batch_prediction_data_source_id(self, batch_prediction_data_source_id):
        """Sets the batch_prediction_data_source_id of this BatchPrediction.


        :param batch_prediction_data_source_id: The batch_prediction_data_source_id of this BatchPrediction.
        :type batch_prediction_data_source_id: str
        """

        self._batch_prediction_data_source_id = batch_prediction_data_source_id

    @property
    def input_data_location_s3(self):
        """Gets the input_data_location_s3 of this BatchPrediction.


        :return: The input_data_location_s3 of this BatchPrediction.
        :rtype: str
        """
        return self._input_data_location_s3

    @input_data_location_s3.setter
    def input_data_location_s3(self, input_data_location_s3):
        """Sets the input_data_location_s3 of this BatchPrediction.


        :param input_data_location_s3: The input_data_location_s3 of this BatchPrediction.
        :type input_data_location_s3: str
        """

        self._input_data_location_s3 = input_data_location_s3

    @property
    def created_by_iam_user(self):
        """Gets the created_by_iam_user of this BatchPrediction.


        :return: The created_by_iam_user of this BatchPrediction.
        :rtype: str
        """
        return self._created_by_iam_user

    @created_by_iam_user.setter
    def created_by_iam_user(self, created_by_iam_user):
        """Sets the created_by_iam_user of this BatchPrediction.


        :param created_by_iam_user: The created_by_iam_user of this BatchPrediction.
        :type created_by_iam_user: str
        """

        self._created_by_iam_user = created_by_iam_user

    @property
    def created_at(self):
        """Gets the created_at of this BatchPrediction.


        :return: The created_at of this BatchPrediction.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BatchPrediction.


        :param created_at: The created_at of this BatchPrediction.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this BatchPrediction.


        :return: The last_updated_at of this BatchPrediction.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this BatchPrediction.


        :param last_updated_at: The last_updated_at of this BatchPrediction.
        :type last_updated_at: datetime
        """

        self._last_updated_at = last_updated_at

    @property
    def name(self):
        """Gets the name of this BatchPrediction.


        :return: The name of this BatchPrediction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BatchPrediction.


        :param name: The name of this BatchPrediction.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this BatchPrediction.


        :return: The status of this BatchPrediction.
        :rtype: EntityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchPrediction.


        :param status: The status of this BatchPrediction.
        :type status: EntityStatus
        """

        self._status = status

    @property
    def output_uri(self):
        """Gets the output_uri of this BatchPrediction.


        :return: The output_uri of this BatchPrediction.
        :rtype: str
        """
        return self._output_uri

    @output_uri.setter
    def output_uri(self, output_uri):
        """Sets the output_uri of this BatchPrediction.


        :param output_uri: The output_uri of this BatchPrediction.
        :type output_uri: str
        """

        self._output_uri = output_uri

    @property
    def message(self):
        """Gets the message of this BatchPrediction.


        :return: The message of this BatchPrediction.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BatchPrediction.


        :param message: The message of this BatchPrediction.
        :type message: str
        """

        self._message = message

    @property
    def compute_time(self):
        """Gets the compute_time of this BatchPrediction.

        Long integer type that is a 64-bit signed number.

        :return: The compute_time of this BatchPrediction.
        :rtype: int
        """
        return self._compute_time

    @compute_time.setter
    def compute_time(self, compute_time):
        """Sets the compute_time of this BatchPrediction.

        Long integer type that is a 64-bit signed number.

        :param compute_time: The compute_time of this BatchPrediction.
        :type compute_time: int
        """

        self._compute_time = compute_time

    @property
    def finished_at(self):
        """Gets the finished_at of this BatchPrediction.

        A timestamp represented in epoch time.

        :return: The finished_at of this BatchPrediction.
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this BatchPrediction.

        A timestamp represented in epoch time.

        :param finished_at: The finished_at of this BatchPrediction.
        :type finished_at: datetime
        """

        self._finished_at = finished_at

    @property
    def started_at(self):
        """Gets the started_at of this BatchPrediction.

        A timestamp represented in epoch time.

        :return: The started_at of this BatchPrediction.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this BatchPrediction.

        A timestamp represented in epoch time.

        :param started_at: The started_at of this BatchPrediction.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def total_record_count(self):
        """Gets the total_record_count of this BatchPrediction.

        Long integer type that is a 64-bit signed number.

        :return: The total_record_count of this BatchPrediction.
        :rtype: int
        """
        return self._total_record_count

    @total_record_count.setter
    def total_record_count(self, total_record_count):
        """Sets the total_record_count of this BatchPrediction.

        Long integer type that is a 64-bit signed number.

        :param total_record_count: The total_record_count of this BatchPrediction.
        :type total_record_count: int
        """

        self._total_record_count = total_record_count

    @property
    def invalid_record_count(self):
        """Gets the invalid_record_count of this BatchPrediction.

        Long integer type that is a 64-bit signed number.

        :return: The invalid_record_count of this BatchPrediction.
        :rtype: int
        """
        return self._invalid_record_count

    @invalid_record_count.setter
    def invalid_record_count(self, invalid_record_count):
        """Sets the invalid_record_count of this BatchPrediction.

        Long integer type that is a 64-bit signed number.

        :param invalid_record_count: The invalid_record_count of this BatchPrediction.
        :type invalid_record_count: int
        """

        self._invalid_record_count = invalid_record_count
