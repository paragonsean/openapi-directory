# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RDSDataSpecDatabaseCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, password: str=None):
        """RDSDataSpecDatabaseCredentials - a model defined in OpenAPI

        :param username: The username of this RDSDataSpecDatabaseCredentials.
        :param password: The password of this RDSDataSpecDatabaseCredentials.
        """
        self.openapi_types = {
            'username': str,
            'password': str
        }

        self.attribute_map = {
            'username': 'Username',
            'password': 'Password'
        }

        self._username = username
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RDSDataSpecDatabaseCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RDSDataSpec_DatabaseCredentials of this RDSDataSpecDatabaseCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this RDSDataSpecDatabaseCredentials.

        The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.

        :return: The username of this RDSDataSpecDatabaseCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RDSDataSpecDatabaseCredentials.

        The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.

        :param username: The username of this RDSDataSpecDatabaseCredentials.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 128:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `128`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")

        self._username = username

    @property
    def password(self):
        """Gets the password of this RDSDataSpecDatabaseCredentials.

        The password to be used by Amazon ML to connect to a database on an RDS DB instance. The password should have sufficient permissions to execute the <code>RDSSelectQuery</code> query.

        :return: The password of this RDSDataSpecDatabaseCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RDSDataSpecDatabaseCredentials.

        The password to be used by Amazon ML to connect to a database on an RDS DB instance. The password should have sufficient permissions to execute the <code>RDSSelectQuery</code> query.

        :param password: The password of this RDSDataSpecDatabaseCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) > 128:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `128`")
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")

        self._password = password
