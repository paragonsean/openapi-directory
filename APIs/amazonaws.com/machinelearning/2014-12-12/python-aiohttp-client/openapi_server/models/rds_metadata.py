# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rds_metadata_database import RDSMetadataDatabase
from openapi_server import util


class RDSMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database: RDSMetadataDatabase=None, database_user_name: str=None, select_sql_query: str=None, resource_role: str=None, service_role: str=None, data_pipeline_id: str=None):
        """RDSMetadata - a model defined in OpenAPI

        :param database: The database of this RDSMetadata.
        :param database_user_name: The database_user_name of this RDSMetadata.
        :param select_sql_query: The select_sql_query of this RDSMetadata.
        :param resource_role: The resource_role of this RDSMetadata.
        :param service_role: The service_role of this RDSMetadata.
        :param data_pipeline_id: The data_pipeline_id of this RDSMetadata.
        """
        self.openapi_types = {
            'database': RDSMetadataDatabase,
            'database_user_name': str,
            'select_sql_query': str,
            'resource_role': str,
            'service_role': str,
            'data_pipeline_id': str
        }

        self.attribute_map = {
            'database': 'Database',
            'database_user_name': 'DatabaseUserName',
            'select_sql_query': 'SelectSqlQuery',
            'resource_role': 'ResourceRole',
            'service_role': 'ServiceRole',
            'data_pipeline_id': 'DataPipelineId'
        }

        self._database = database
        self._database_user_name = database_user_name
        self._select_sql_query = select_sql_query
        self._resource_role = resource_role
        self._service_role = service_role
        self._data_pipeline_id = data_pipeline_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RDSMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RDSMetadata of this RDSMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database(self):
        """Gets the database of this RDSMetadata.


        :return: The database of this RDSMetadata.
        :rtype: RDSMetadataDatabase
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this RDSMetadata.


        :param database: The database of this RDSMetadata.
        :type database: RDSMetadataDatabase
        """

        self._database = database

    @property
    def database_user_name(self):
        """Gets the database_user_name of this RDSMetadata.

        The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.

        :return: The database_user_name of this RDSMetadata.
        :rtype: str
        """
        return self._database_user_name

    @database_user_name.setter
    def database_user_name(self, database_user_name):
        """Sets the database_user_name of this RDSMetadata.

        The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.

        :param database_user_name: The database_user_name of this RDSMetadata.
        :type database_user_name: str
        """
        if database_user_name is not None and len(database_user_name) > 128:
            raise ValueError("Invalid value for `database_user_name`, length must be less than or equal to `128`")
        if database_user_name is not None and len(database_user_name) < 1:
            raise ValueError("Invalid value for `database_user_name`, length must be greater than or equal to `1`")

        self._database_user_name = database_user_name

    @property
    def select_sql_query(self):
        """Gets the select_sql_query of this RDSMetadata.


        :return: The select_sql_query of this RDSMetadata.
        :rtype: str
        """
        return self._select_sql_query

    @select_sql_query.setter
    def select_sql_query(self, select_sql_query):
        """Sets the select_sql_query of this RDSMetadata.


        :param select_sql_query: The select_sql_query of this RDSMetadata.
        :type select_sql_query: str
        """

        self._select_sql_query = select_sql_query

    @property
    def resource_role(self):
        """Gets the resource_role of this RDSMetadata.


        :return: The resource_role of this RDSMetadata.
        :rtype: str
        """
        return self._resource_role

    @resource_role.setter
    def resource_role(self, resource_role):
        """Sets the resource_role of this RDSMetadata.


        :param resource_role: The resource_role of this RDSMetadata.
        :type resource_role: str
        """

        self._resource_role = resource_role

    @property
    def service_role(self):
        """Gets the service_role of this RDSMetadata.


        :return: The service_role of this RDSMetadata.
        :rtype: str
        """
        return self._service_role

    @service_role.setter
    def service_role(self, service_role):
        """Sets the service_role of this RDSMetadata.


        :param service_role: The service_role of this RDSMetadata.
        :type service_role: str
        """

        self._service_role = service_role

    @property
    def data_pipeline_id(self):
        """Gets the data_pipeline_id of this RDSMetadata.


        :return: The data_pipeline_id of this RDSMetadata.
        :rtype: str
        """
        return self._data_pipeline_id

    @data_pipeline_id.setter
    def data_pipeline_id(self, data_pipeline_id):
        """Sets the data_pipeline_id of this RDSMetadata.


        :param data_pipeline_id: The data_pipeline_id of this RDSMetadata.
        :type data_pipeline_id: str
        """

        self._data_pipeline_id = data_pipeline_id
