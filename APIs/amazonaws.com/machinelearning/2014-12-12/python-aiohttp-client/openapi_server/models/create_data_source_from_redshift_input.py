# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_data_source_from_redshift_input_data_spec import CreateDataSourceFromRedshiftInputDataSpec
from openapi_server import util


class CreateDataSourceFromRedshiftInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_id: str=None, data_source_name: str=None, data_spec: CreateDataSourceFromRedshiftInputDataSpec=None, role_arn: str=None, compute_statistics: bool=None):
        """CreateDataSourceFromRedshiftInput - a model defined in OpenAPI

        :param data_source_id: The data_source_id of this CreateDataSourceFromRedshiftInput.
        :param data_source_name: The data_source_name of this CreateDataSourceFromRedshiftInput.
        :param data_spec: The data_spec of this CreateDataSourceFromRedshiftInput.
        :param role_arn: The role_arn of this CreateDataSourceFromRedshiftInput.
        :param compute_statistics: The compute_statistics of this CreateDataSourceFromRedshiftInput.
        """
        self.openapi_types = {
            'data_source_id': str,
            'data_source_name': str,
            'data_spec': CreateDataSourceFromRedshiftInputDataSpec,
            'role_arn': str,
            'compute_statistics': bool
        }

        self.attribute_map = {
            'data_source_id': 'DataSourceId',
            'data_source_name': 'DataSourceName',
            'data_spec': 'DataSpec',
            'role_arn': 'RoleARN',
            'compute_statistics': 'ComputeStatistics'
        }

        self._data_source_id = data_source_id
        self._data_source_name = data_source_name
        self._data_spec = data_spec
        self._role_arn = role_arn
        self._compute_statistics = compute_statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataSourceFromRedshiftInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataSourceFromRedshiftInput of this CreateDataSourceFromRedshiftInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_id(self):
        """Gets the data_source_id of this CreateDataSourceFromRedshiftInput.


        :return: The data_source_id of this CreateDataSourceFromRedshiftInput.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this CreateDataSourceFromRedshiftInput.


        :param data_source_id: The data_source_id of this CreateDataSourceFromRedshiftInput.
        :type data_source_id: str
        """
        if data_source_id is None:
            raise ValueError("Invalid value for `data_source_id`, must not be `None`")

        self._data_source_id = data_source_id

    @property
    def data_source_name(self):
        """Gets the data_source_name of this CreateDataSourceFromRedshiftInput.


        :return: The data_source_name of this CreateDataSourceFromRedshiftInput.
        :rtype: str
        """
        return self._data_source_name

    @data_source_name.setter
    def data_source_name(self, data_source_name):
        """Sets the data_source_name of this CreateDataSourceFromRedshiftInput.


        :param data_source_name: The data_source_name of this CreateDataSourceFromRedshiftInput.
        :type data_source_name: str
        """

        self._data_source_name = data_source_name

    @property
    def data_spec(self):
        """Gets the data_spec of this CreateDataSourceFromRedshiftInput.


        :return: The data_spec of this CreateDataSourceFromRedshiftInput.
        :rtype: CreateDataSourceFromRedshiftInputDataSpec
        """
        return self._data_spec

    @data_spec.setter
    def data_spec(self, data_spec):
        """Sets the data_spec of this CreateDataSourceFromRedshiftInput.


        :param data_spec: The data_spec of this CreateDataSourceFromRedshiftInput.
        :type data_spec: CreateDataSourceFromRedshiftInputDataSpec
        """
        if data_spec is None:
            raise ValueError("Invalid value for `data_spec`, must not be `None`")

        self._data_spec = data_spec

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateDataSourceFromRedshiftInput.


        :return: The role_arn of this CreateDataSourceFromRedshiftInput.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateDataSourceFromRedshiftInput.


        :param role_arn: The role_arn of this CreateDataSourceFromRedshiftInput.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def compute_statistics(self):
        """Gets the compute_statistics of this CreateDataSourceFromRedshiftInput.


        :return: The compute_statistics of this CreateDataSourceFromRedshiftInput.
        :rtype: bool
        """
        return self._compute_statistics

    @compute_statistics.setter
    def compute_statistics(self, compute_statistics):
        """Sets the compute_statistics of this CreateDataSourceFromRedshiftInput.


        :param compute_statistics: The compute_statistics of this CreateDataSourceFromRedshiftInput.
        :type compute_statistics: bool
        """

        self._compute_statistics = compute_statistics
