# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PredictInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ml_model_id: str=None, record: Dict[str, str]=None, predict_endpoint: str=None):
        """PredictInput - a model defined in OpenAPI

        :param ml_model_id: The ml_model_id of this PredictInput.
        :param record: The record of this PredictInput.
        :param predict_endpoint: The predict_endpoint of this PredictInput.
        """
        self.openapi_types = {
            'ml_model_id': str,
            'record': Dict[str, str],
            'predict_endpoint': str
        }

        self.attribute_map = {
            'ml_model_id': 'MLModelId',
            'record': 'Record',
            'predict_endpoint': 'PredictEndpoint'
        }

        self._ml_model_id = ml_model_id
        self._record = record
        self._predict_endpoint = predict_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PredictInput of this PredictInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ml_model_id(self):
        """Gets the ml_model_id of this PredictInput.


        :return: The ml_model_id of this PredictInput.
        :rtype: str
        """
        return self._ml_model_id

    @ml_model_id.setter
    def ml_model_id(self, ml_model_id):
        """Sets the ml_model_id of this PredictInput.


        :param ml_model_id: The ml_model_id of this PredictInput.
        :type ml_model_id: str
        """
        if ml_model_id is None:
            raise ValueError("Invalid value for `ml_model_id`, must not be `None`")

        self._ml_model_id = ml_model_id

    @property
    def record(self):
        """Gets the record of this PredictInput.

        A map of variable name-value pairs that represent an observation.

        :return: The record of this PredictInput.
        :rtype: Dict[str, str]
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this PredictInput.

        A map of variable name-value pairs that represent an observation.

        :param record: The record of this PredictInput.
        :type record: Dict[str, str]
        """
        if record is None:
            raise ValueError("Invalid value for `record`, must not be `None`")

        self._record = record

    @property
    def predict_endpoint(self):
        """Gets the predict_endpoint of this PredictInput.


        :return: The predict_endpoint of this PredictInput.
        :rtype: str
        """
        return self._predict_endpoint

    @predict_endpoint.setter
    def predict_endpoint(self, predict_endpoint):
        """Sets the predict_endpoint of this PredictInput.


        :param predict_endpoint: The predict_endpoint of this PredictInput.
        :type predict_endpoint: str
        """
        if predict_endpoint is None:
            raise ValueError("Invalid value for `predict_endpoint`, must not be `None`")
        if predict_endpoint is not None and len(predict_endpoint) > 2048:
            raise ValueError("Invalid value for `predict_endpoint`, length must be less than or equal to `2048`")
        if predict_endpoint is not None and not re.search(r'https:\/\/[a-zA-Z0-9-.]*\.amazon(aws)?\.com[\/]?', predict_endpoint):
            raise ValueError("Invalid value for `predict_endpoint`, must be a follow pattern or equal to `/https:\/\/[a-zA-Z0-9-.]*\.amazon(aws)?\.com[\/]?/`")

        self._predict_endpoint = predict_endpoint
