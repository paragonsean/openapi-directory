# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RedshiftDataSpecDatabaseInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_name: str=None, cluster_identifier: str=None):
        """RedshiftDataSpecDatabaseInformation - a model defined in OpenAPI

        :param database_name: The database_name of this RedshiftDataSpecDatabaseInformation.
        :param cluster_identifier: The cluster_identifier of this RedshiftDataSpecDatabaseInformation.
        """
        self.openapi_types = {
            'database_name': str,
            'cluster_identifier': str
        }

        self.attribute_map = {
            'database_name': 'DatabaseName',
            'cluster_identifier': 'ClusterIdentifier'
        }

        self._database_name = database_name
        self._cluster_identifier = cluster_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedshiftDataSpecDatabaseInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedshiftDataSpec_DatabaseInformation of this RedshiftDataSpecDatabaseInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_name(self):
        """Gets the database_name of this RedshiftDataSpecDatabaseInformation.

        The name of a database hosted on an Amazon Redshift cluster.

        :return: The database_name of this RedshiftDataSpecDatabaseInformation.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this RedshiftDataSpecDatabaseInformation.

        The name of a database hosted on an Amazon Redshift cluster.

        :param database_name: The database_name of this RedshiftDataSpecDatabaseInformation.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")
        if database_name is not None and len(database_name) > 64:
            raise ValueError("Invalid value for `database_name`, length must be less than or equal to `64`")
        if database_name is not None and len(database_name) < 1:
            raise ValueError("Invalid value for `database_name`, length must be greater than or equal to `1`")
        if database_name is not None and not re.search(r'[a-z0-9]+', database_name):
            raise ValueError("Invalid value for `database_name`, must be a follow pattern or equal to `/[a-z0-9]+/`")

        self._database_name = database_name

    @property
    def cluster_identifier(self):
        """Gets the cluster_identifier of this RedshiftDataSpecDatabaseInformation.

        The ID of an Amazon Redshift cluster.

        :return: The cluster_identifier of this RedshiftDataSpecDatabaseInformation.
        :rtype: str
        """
        return self._cluster_identifier

    @cluster_identifier.setter
    def cluster_identifier(self, cluster_identifier):
        """Sets the cluster_identifier of this RedshiftDataSpecDatabaseInformation.

        The ID of an Amazon Redshift cluster.

        :param cluster_identifier: The cluster_identifier of this RedshiftDataSpecDatabaseInformation.
        :type cluster_identifier: str
        """
        if cluster_identifier is None:
            raise ValueError("Invalid value for `cluster_identifier`, must not be `None`")
        if cluster_identifier is not None and len(cluster_identifier) > 63:
            raise ValueError("Invalid value for `cluster_identifier`, length must be less than or equal to `63`")
        if cluster_identifier is not None and len(cluster_identifier) < 1:
            raise ValueError("Invalid value for `cluster_identifier`, length must be greater than or equal to `1`")
        if cluster_identifier is not None and not re.search(r'[a-z0-9-]+', cluster_identifier):
            raise ValueError("Invalid value for `cluster_identifier`, must be a follow pattern or equal to `/[a-z0-9-]+/`")

        self._cluster_identifier = cluster_identifier
