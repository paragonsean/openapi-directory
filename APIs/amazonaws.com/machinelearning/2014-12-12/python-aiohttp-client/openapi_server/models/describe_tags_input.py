# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.taggable_resource_type import TaggableResourceType
from openapi_server import util


class DescribeTagsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id: str=None, resource_type: TaggableResourceType=None):
        """DescribeTagsInput - a model defined in OpenAPI

        :param resource_id: The resource_id of this DescribeTagsInput.
        :param resource_type: The resource_type of this DescribeTagsInput.
        """
        self.openapi_types = {
            'resource_id': str,
            'resource_type': TaggableResourceType
        }

        self.attribute_map = {
            'resource_id': 'ResourceId',
            'resource_type': 'ResourceType'
        }

        self._resource_id = resource_id
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeTagsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeTagsInput of this DescribeTagsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self):
        """Gets the resource_id of this DescribeTagsInput.


        :return: The resource_id of this DescribeTagsInput.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this DescribeTagsInput.


        :param resource_id: The resource_id of this DescribeTagsInput.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this DescribeTagsInput.


        :return: The resource_type of this DescribeTagsInput.
        :rtype: TaggableResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DescribeTagsInput.


        :param resource_type: The resource_type of this DescribeTagsInput.
        :type resource_type: TaggableResourceType
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type
