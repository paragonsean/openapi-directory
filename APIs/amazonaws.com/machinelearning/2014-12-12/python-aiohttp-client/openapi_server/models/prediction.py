# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Prediction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, predicted_label: str=None, predicted_value: float=None, predicted_scores: Dict[str, float]=None, details: Dict[str, str]=None):
        """Prediction - a model defined in OpenAPI

        :param predicted_label: The predicted_label of this Prediction.
        :param predicted_value: The predicted_value of this Prediction.
        :param predicted_scores: The predicted_scores of this Prediction.
        :param details: The details of this Prediction.
        """
        self.openapi_types = {
            'predicted_label': str,
            'predicted_value': float,
            'predicted_scores': Dict[str, float],
            'details': Dict[str, str]
        }

        self.attribute_map = {
            'predicted_label': 'predictedLabel',
            'predicted_value': 'predictedValue',
            'predicted_scores': 'predictedScores',
            'details': 'details'
        }

        self._predicted_label = predicted_label
        self._predicted_value = predicted_value
        self._predicted_scores = predicted_scores
        self._details = details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Prediction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prediction of this Prediction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def predicted_label(self):
        """Gets the predicted_label of this Prediction.


        :return: The predicted_label of this Prediction.
        :rtype: str
        """
        return self._predicted_label

    @predicted_label.setter
    def predicted_label(self, predicted_label):
        """Sets the predicted_label of this Prediction.


        :param predicted_label: The predicted_label of this Prediction.
        :type predicted_label: str
        """

        self._predicted_label = predicted_label

    @property
    def predicted_value(self):
        """Gets the predicted_value of this Prediction.


        :return: The predicted_value of this Prediction.
        :rtype: float
        """
        return self._predicted_value

    @predicted_value.setter
    def predicted_value(self, predicted_value):
        """Sets the predicted_value of this Prediction.


        :param predicted_value: The predicted_value of this Prediction.
        :type predicted_value: float
        """

        self._predicted_value = predicted_value

    @property
    def predicted_scores(self):
        """Gets the predicted_scores of this Prediction.

        Provides the raw classification score corresponding to each label.

        :return: The predicted_scores of this Prediction.
        :rtype: Dict[str, float]
        """
        return self._predicted_scores

    @predicted_scores.setter
    def predicted_scores(self, predicted_scores):
        """Sets the predicted_scores of this Prediction.

        Provides the raw classification score corresponding to each label.

        :param predicted_scores: The predicted_scores of this Prediction.
        :type predicted_scores: Dict[str, float]
        """

        self._predicted_scores = predicted_scores

    @property
    def details(self):
        """Gets the details of this Prediction.

        Provides any additional details regarding the prediction.

        :return: The details of this Prediction.
        :rtype: Dict[str, str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Prediction.

        Provides any additional details regarding the prediction.

        :param details: The details of this Prediction.
        :type details: Dict[str, str]
        """

        self._details = details
