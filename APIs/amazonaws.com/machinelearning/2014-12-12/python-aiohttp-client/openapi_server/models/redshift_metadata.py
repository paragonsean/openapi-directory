# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.redshift_database import RedshiftDatabase
from openapi_server import util


class RedshiftMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, redshift_database: RedshiftDatabase=None, database_user_name: str=None, select_sql_query: str=None):
        """RedshiftMetadata - a model defined in OpenAPI

        :param redshift_database: The redshift_database of this RedshiftMetadata.
        :param database_user_name: The database_user_name of this RedshiftMetadata.
        :param select_sql_query: The select_sql_query of this RedshiftMetadata.
        """
        self.openapi_types = {
            'redshift_database': RedshiftDatabase,
            'database_user_name': str,
            'select_sql_query': str
        }

        self.attribute_map = {
            'redshift_database': 'RedshiftDatabase',
            'database_user_name': 'DatabaseUserName',
            'select_sql_query': 'SelectSqlQuery'
        }

        self._redshift_database = redshift_database
        self._database_user_name = database_user_name
        self._select_sql_query = select_sql_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedshiftMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedshiftMetadata of this RedshiftMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def redshift_database(self):
        """Gets the redshift_database of this RedshiftMetadata.


        :return: The redshift_database of this RedshiftMetadata.
        :rtype: RedshiftDatabase
        """
        return self._redshift_database

    @redshift_database.setter
    def redshift_database(self, redshift_database):
        """Sets the redshift_database of this RedshiftMetadata.


        :param redshift_database: The redshift_database of this RedshiftMetadata.
        :type redshift_database: RedshiftDatabase
        """

        self._redshift_database = redshift_database

    @property
    def database_user_name(self):
        """Gets the database_user_name of this RedshiftMetadata.

        A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the <code>RedshiftSelectSqlQuery</code> query. The username should be valid for an Amazon Redshift <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">USER</a>.

        :return: The database_user_name of this RedshiftMetadata.
        :rtype: str
        """
        return self._database_user_name

    @database_user_name.setter
    def database_user_name(self, database_user_name):
        """Sets the database_user_name of this RedshiftMetadata.

        A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the <code>RedshiftSelectSqlQuery</code> query. The username should be valid for an Amazon Redshift <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">USER</a>.

        :param database_user_name: The database_user_name of this RedshiftMetadata.
        :type database_user_name: str
        """
        if database_user_name is not None and len(database_user_name) > 128:
            raise ValueError("Invalid value for `database_user_name`, length must be less than or equal to `128`")
        if database_user_name is not None and len(database_user_name) < 1:
            raise ValueError("Invalid value for `database_user_name`, length must be greater than or equal to `1`")

        self._database_user_name = database_user_name

    @property
    def select_sql_query(self):
        """Gets the select_sql_query of this RedshiftMetadata.


        :return: The select_sql_query of this RedshiftMetadata.
        :rtype: str
        """
        return self._select_sql_query

    @select_sql_query.setter
    def select_sql_query(self, select_sql_query):
        """Sets the select_sql_query of this RedshiftMetadata.


        :param select_sql_query: The select_sql_query of this RedshiftMetadata.
        :type select_sql_query: str
        """

        self._select_sql_query = select_sql_query
