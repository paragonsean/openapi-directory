/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddTagsInput;
import org.openapitools.client.model.AddTagsOutput;
import org.openapitools.client.model.CreateBatchPredictionInput;
import org.openapitools.client.model.CreateBatchPredictionOutput;
import org.openapitools.client.model.CreateDataSourceFromRDSInput;
import org.openapitools.client.model.CreateDataSourceFromRDSOutput;
import org.openapitools.client.model.CreateDataSourceFromRedshiftInput;
import org.openapitools.client.model.CreateDataSourceFromRedshiftOutput;
import org.openapitools.client.model.CreateDataSourceFromS3Input;
import org.openapitools.client.model.CreateDataSourceFromS3Output;
import org.openapitools.client.model.CreateEvaluationInput;
import org.openapitools.client.model.CreateEvaluationOutput;
import org.openapitools.client.model.CreateMLModelInput;
import org.openapitools.client.model.CreateMLModelOutput;
import org.openapitools.client.model.CreateRealtimeEndpointInput;
import org.openapitools.client.model.CreateRealtimeEndpointOutput;
import org.openapitools.client.model.DeleteBatchPredictionInput;
import org.openapitools.client.model.DeleteBatchPredictionOutput;
import org.openapitools.client.model.DeleteDataSourceInput;
import org.openapitools.client.model.DeleteDataSourceOutput;
import org.openapitools.client.model.DeleteEvaluationInput;
import org.openapitools.client.model.DeleteEvaluationOutput;
import org.openapitools.client.model.DeleteMLModelInput;
import org.openapitools.client.model.DeleteMLModelOutput;
import org.openapitools.client.model.DeleteRealtimeEndpointInput;
import org.openapitools.client.model.DeleteRealtimeEndpointOutput;
import org.openapitools.client.model.DeleteTagsInput;
import org.openapitools.client.model.DeleteTagsOutput;
import org.openapitools.client.model.DescribeBatchPredictionsInput;
import org.openapitools.client.model.DescribeBatchPredictionsOutput;
import org.openapitools.client.model.DescribeDataSourcesInput;
import org.openapitools.client.model.DescribeDataSourcesOutput;
import org.openapitools.client.model.DescribeEvaluationsInput;
import org.openapitools.client.model.DescribeEvaluationsOutput;
import org.openapitools.client.model.DescribeMLModelsInput;
import org.openapitools.client.model.DescribeMLModelsOutput;
import org.openapitools.client.model.DescribeTagsInput;
import org.openapitools.client.model.DescribeTagsOutput;
import org.openapitools.client.model.GetBatchPredictionInput;
import org.openapitools.client.model.GetBatchPredictionOutput;
import org.openapitools.client.model.GetDataSourceInput;
import org.openapitools.client.model.GetDataSourceOutput;
import org.openapitools.client.model.GetEvaluationInput;
import org.openapitools.client.model.GetEvaluationOutput;
import org.openapitools.client.model.GetMLModelInput;
import org.openapitools.client.model.GetMLModelOutput;
import org.openapitools.client.model.PredictInput;
import org.openapitools.client.model.PredictOutput;
import org.openapitools.client.model.UpdateBatchPredictionInput;
import org.openapitools.client.model.UpdateBatchPredictionOutput;
import org.openapitools.client.model.UpdateDataSourceInput;
import org.openapitools.client.model.UpdateDataSourceOutput;
import org.openapitools.client.model.UpdateEvaluationInput;
import org.openapitools.client.model.UpdateEvaluationOutput;
import org.openapitools.client.model.UpdateMLModelInput;
import org.openapitools.client.model.UpdateMLModelOutput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds one or more tags to an object, up to a limit of 10. Each tag consists of a key and an optional value. If you add a tag using a key that is already associated with the ML object, &lt;code&gt;AddTags&lt;/code&gt; updates the tag&#39;s value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTagsTest() throws ApiException {
        String xAmzTarget = null;
        AddTagsInput addTagsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddTagsOutput response = api.addTags(xAmzTarget, addTagsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Generates predictions for a group of observations. The observations to process exist in one or more data files referenced by a &lt;code&gt;DataSource&lt;/code&gt;. This operation creates a new &lt;code&gt;BatchPrediction&lt;/code&gt;, and uses an &lt;code&gt;MLModel&lt;/code&gt; and the data files referenced by the &lt;code&gt;DataSource&lt;/code&gt; as information sources. &lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateBatchPrediction&lt;/code&gt; is an asynchronous operation. In response to &lt;code&gt;CreateBatchPrediction&lt;/code&gt;, Amazon Machine Learning (Amazon ML) immediately returns and sets the &lt;code&gt;BatchPrediction&lt;/code&gt; status to &lt;code&gt;PENDING&lt;/code&gt;. After the &lt;code&gt;BatchPrediction&lt;/code&gt; completes, Amazon ML sets the status to &lt;code&gt;COMPLETED&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;You can poll for status updates by using the &lt;a&gt;GetBatchPrediction&lt;/a&gt; operation and checking the &lt;code&gt;Status&lt;/code&gt; parameter of the result. After the &lt;code&gt;COMPLETED&lt;/code&gt; status appears, the results are available in the location specified by the &lt;code&gt;OutputUri&lt;/code&gt; parameter.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchPredictionTest() throws ApiException {
        String xAmzTarget = null;
        CreateBatchPredictionInput createBatchPredictionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBatchPredictionOutput response = api.createBatchPrediction(xAmzTarget, createBatchPredictionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a &lt;code&gt;DataSource&lt;/code&gt; object from an &lt;a href&#x3D;\&quot;http://aws.amazon.com/rds/\&quot;&gt; Amazon Relational Database Service&lt;/a&gt; (Amazon RDS). A &lt;code&gt;DataSource&lt;/code&gt; references data that can be used to perform &lt;code&gt;CreateMLModel&lt;/code&gt;, &lt;code&gt;CreateEvaluation&lt;/code&gt;, or &lt;code&gt;CreateBatchPrediction&lt;/code&gt; operations.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateDataSourceFromRDS&lt;/code&gt; is an asynchronous operation. In response to &lt;code&gt;CreateDataSourceFromRDS&lt;/code&gt;, Amazon Machine Learning (Amazon ML) immediately returns and sets the &lt;code&gt;DataSource&lt;/code&gt; status to &lt;code&gt;PENDING&lt;/code&gt;. After the &lt;code&gt;DataSource&lt;/code&gt; is created and ready for use, Amazon ML sets the &lt;code&gt;Status&lt;/code&gt; parameter to &lt;code&gt;COMPLETED&lt;/code&gt;. &lt;code&gt;DataSource&lt;/code&gt; in the &lt;code&gt;COMPLETED&lt;/code&gt; or &lt;code&gt;PENDING&lt;/code&gt; state can be used only to perform &lt;code&gt;&amp;gt;CreateMLModel&lt;/code&gt;&amp;gt;, &lt;code&gt;CreateEvaluation&lt;/code&gt;, or &lt;code&gt;CreateBatchPrediction&lt;/code&gt; operations. &lt;/p&gt; &lt;p&gt; If Amazon ML cannot accept the input source, it sets the &lt;code&gt;Status&lt;/code&gt; parameter to &lt;code&gt;FAILED&lt;/code&gt; and includes an error message in the &lt;code&gt;Message&lt;/code&gt; attribute of the &lt;code&gt;GetDataSource&lt;/code&gt; operation response. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataSourceFromRDSTest() throws ApiException {
        String xAmzTarget = null;
        CreateDataSourceFromRDSInput createDataSourceFromRDSInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataSourceFromRDSOutput response = api.createDataSourceFromRDS(xAmzTarget, createDataSourceFromRDSInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a &lt;code&gt;DataSource&lt;/code&gt; from a database hosted on an Amazon Redshift cluster. A &lt;code&gt;DataSource&lt;/code&gt; references data that can be used to perform either &lt;code&gt;CreateMLModel&lt;/code&gt;, &lt;code&gt;CreateEvaluation&lt;/code&gt;, or &lt;code&gt;CreateBatchPrediction&lt;/code&gt; operations.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateDataSourceFromRedshift&lt;/code&gt; is an asynchronous operation. In response to &lt;code&gt;CreateDataSourceFromRedshift&lt;/code&gt;, Amazon Machine Learning (Amazon ML) immediately returns and sets the &lt;code&gt;DataSource&lt;/code&gt; status to &lt;code&gt;PENDING&lt;/code&gt;. After the &lt;code&gt;DataSource&lt;/code&gt; is created and ready for use, Amazon ML sets the &lt;code&gt;Status&lt;/code&gt; parameter to &lt;code&gt;COMPLETED&lt;/code&gt;. &lt;code&gt;DataSource&lt;/code&gt; in &lt;code&gt;COMPLETED&lt;/code&gt; or &lt;code&gt;PENDING&lt;/code&gt; states can be used to perform only &lt;code&gt;CreateMLModel&lt;/code&gt;, &lt;code&gt;CreateEvaluation&lt;/code&gt;, or &lt;code&gt;CreateBatchPrediction&lt;/code&gt; operations. &lt;/p&gt; &lt;p&gt; If Amazon ML can&#39;t accept the input source, it sets the &lt;code&gt;Status&lt;/code&gt; parameter to &lt;code&gt;FAILED&lt;/code&gt; and includes an error message in the &lt;code&gt;Message&lt;/code&gt; attribute of the &lt;code&gt;GetDataSource&lt;/code&gt; operation response. &lt;/p&gt; &lt;p&gt;The observations should be contained in the database hosted on an Amazon Redshift cluster and should be specified by a &lt;code&gt;SelectSqlQuery&lt;/code&gt; query. Amazon ML executes an &lt;code&gt;Unload&lt;/code&gt; command in Amazon Redshift to transfer the result set of the &lt;code&gt;SelectSqlQuery&lt;/code&gt; query to &lt;code&gt;S3StagingLocation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After the &lt;code&gt;DataSource&lt;/code&gt; has been created, it&#39;s ready for use in evaluations and batch predictions. If you plan to use the &lt;code&gt;DataSource&lt;/code&gt; to train an &lt;code&gt;MLModel&lt;/code&gt;, the &lt;code&gt;DataSource&lt;/code&gt; also requires a recipe. A recipe describes how each input variable will be used in training an &lt;code&gt;MLModel&lt;/code&gt;. Will the variable be included or excluded from training? Will the variable be manipulated; for example, will it be combined with another variable or will it be split apart into word combinations? The recipe provides answers to these questions.&lt;/p&gt; &lt;p&gt;You can&#39;t change an existing datasource, but you can copy and modify the settings from an existing Amazon Redshift datasource to create a new datasource. To do so, call &lt;code&gt;GetDataSource&lt;/code&gt; for an existing datasource and copy the values to a &lt;code&gt;CreateDataSource&lt;/code&gt; call. Change the settings that you want to change and make sure that all required fields have the appropriate values.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataSourceFromRedshiftTest() throws ApiException {
        String xAmzTarget = null;
        CreateDataSourceFromRedshiftInput createDataSourceFromRedshiftInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataSourceFromRedshiftOutput response = api.createDataSourceFromRedshift(xAmzTarget, createDataSourceFromRedshiftInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a &lt;code&gt;DataSource&lt;/code&gt; object. A &lt;code&gt;DataSource&lt;/code&gt; references data that can be used to perform &lt;code&gt;CreateMLModel&lt;/code&gt;, &lt;code&gt;CreateEvaluation&lt;/code&gt;, or &lt;code&gt;CreateBatchPrediction&lt;/code&gt; operations.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateDataSourceFromS3&lt;/code&gt; is an asynchronous operation. In response to &lt;code&gt;CreateDataSourceFromS3&lt;/code&gt;, Amazon Machine Learning (Amazon ML) immediately returns and sets the &lt;code&gt;DataSource&lt;/code&gt; status to &lt;code&gt;PENDING&lt;/code&gt;. After the &lt;code&gt;DataSource&lt;/code&gt; has been created and is ready for use, Amazon ML sets the &lt;code&gt;Status&lt;/code&gt; parameter to &lt;code&gt;COMPLETED&lt;/code&gt;. &lt;code&gt;DataSource&lt;/code&gt; in the &lt;code&gt;COMPLETED&lt;/code&gt; or &lt;code&gt;PENDING&lt;/code&gt; state can be used to perform only &lt;code&gt;CreateMLModel&lt;/code&gt;, &lt;code&gt;CreateEvaluation&lt;/code&gt; or &lt;code&gt;CreateBatchPrediction&lt;/code&gt; operations. &lt;/p&gt; &lt;p&gt; If Amazon ML can&#39;t accept the input source, it sets the &lt;code&gt;Status&lt;/code&gt; parameter to &lt;code&gt;FAILED&lt;/code&gt; and includes an error message in the &lt;code&gt;Message&lt;/code&gt; attribute of the &lt;code&gt;GetDataSource&lt;/code&gt; operation response. &lt;/p&gt; &lt;p&gt;The observation data used in a &lt;code&gt;DataSource&lt;/code&gt; should be ready to use; that is, it should have a consistent structure, and missing data values should be kept to a minimum. The observation data must reside in one or more .csv files in an Amazon Simple Storage Service (Amazon S3) location, along with a schema that describes the data items by name and type. The same schema must be used for all of the data files referenced by the &lt;code&gt;DataSource&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;After the &lt;code&gt;DataSource&lt;/code&gt; has been created, it&#39;s ready to use in evaluations and batch predictions. If you plan to use the &lt;code&gt;DataSource&lt;/code&gt; to train an &lt;code&gt;MLModel&lt;/code&gt;, the &lt;code&gt;DataSource&lt;/code&gt; also needs a recipe. A recipe describes how each input variable will be used in training an &lt;code&gt;MLModel&lt;/code&gt;. Will the variable be included or excluded from training? Will the variable be manipulated; for example, will it be combined with another variable or will it be split apart into word combinations? The recipe provides answers to these questions.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataSourceFromS3Test() throws ApiException {
        String xAmzTarget = null;
        CreateDataSourceFromS3Input createDataSourceFromS3Input = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataSourceFromS3Output response = api.createDataSourceFromS3(xAmzTarget, createDataSourceFromS3Input, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new &lt;code&gt;Evaluation&lt;/code&gt; of an &lt;code&gt;MLModel&lt;/code&gt;. An &lt;code&gt;MLModel&lt;/code&gt; is evaluated on a set of observations associated to a &lt;code&gt;DataSource&lt;/code&gt;. Like a &lt;code&gt;DataSource&lt;/code&gt; for an &lt;code&gt;MLModel&lt;/code&gt;, the &lt;code&gt;DataSource&lt;/code&gt; for an &lt;code&gt;Evaluation&lt;/code&gt; contains values for the &lt;code&gt;Target Variable&lt;/code&gt;. The &lt;code&gt;Evaluation&lt;/code&gt; compares the predicted result for each observation to the actual outcome and provides a summary so that you know how effective the &lt;code&gt;MLModel&lt;/code&gt; functions on the test data. Evaluation generates a relevant performance metric, such as BinaryAUC, RegressionRMSE or MulticlassAvgFScore based on the corresponding &lt;code&gt;MLModelType&lt;/code&gt;: &lt;code&gt;BINARY&lt;/code&gt;, &lt;code&gt;REGRESSION&lt;/code&gt; or &lt;code&gt;MULTICLASS&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateEvaluation&lt;/code&gt; is an asynchronous operation. In response to &lt;code&gt;CreateEvaluation&lt;/code&gt;, Amazon Machine Learning (Amazon ML) immediately returns and sets the evaluation status to &lt;code&gt;PENDING&lt;/code&gt;. After the &lt;code&gt;Evaluation&lt;/code&gt; is created and ready for use, Amazon ML sets the status to &lt;code&gt;COMPLETED&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetEvaluation&lt;/code&gt; operation to check progress of the evaluation during the creation operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEvaluationTest() throws ApiException {
        String xAmzTarget = null;
        CreateEvaluationInput createEvaluationInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEvaluationOutput response = api.createEvaluation(xAmzTarget, createEvaluationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new &lt;code&gt;MLModel&lt;/code&gt; using the &lt;code&gt;DataSource&lt;/code&gt; and the recipe as information sources. &lt;/p&gt; &lt;p&gt;An &lt;code&gt;MLModel&lt;/code&gt; is nearly immutable. Users can update only the &lt;code&gt;MLModelName&lt;/code&gt; and the &lt;code&gt;ScoreThreshold&lt;/code&gt; in an &lt;code&gt;MLModel&lt;/code&gt; without creating a new &lt;code&gt;MLModel&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateMLModel&lt;/code&gt; is an asynchronous operation. In response to &lt;code&gt;CreateMLModel&lt;/code&gt;, Amazon Machine Learning (Amazon ML) immediately returns and sets the &lt;code&gt;MLModel&lt;/code&gt; status to &lt;code&gt;PENDING&lt;/code&gt;. After the &lt;code&gt;MLModel&lt;/code&gt; has been created and ready is for use, Amazon ML sets the status to &lt;code&gt;COMPLETED&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetMLModel&lt;/code&gt; operation to check the progress of the &lt;code&gt;MLModel&lt;/code&gt; during the creation operation.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateMLModel&lt;/code&gt; requires a &lt;code&gt;DataSource&lt;/code&gt; with computed statistics, which can be created by setting &lt;code&gt;ComputeStatistics&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;CreateDataSourceFromRDS&lt;/code&gt;, &lt;code&gt;CreateDataSourceFromS3&lt;/code&gt;, or &lt;code&gt;CreateDataSourceFromRedshift&lt;/code&gt; operations. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMLModelTest() throws ApiException {
        String xAmzTarget = null;
        CreateMLModelInput createMLModelInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMLModelOutput response = api.createMLModel(xAmzTarget, createMLModelInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a real-time endpoint for the &lt;code&gt;MLModel&lt;/code&gt;. The endpoint contains the URI of the &lt;code&gt;MLModel&lt;/code&gt;; that is, the location to send real-time prediction requests for the specified &lt;code&gt;MLModel&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRealtimeEndpointTest() throws ApiException {
        String xAmzTarget = null;
        CreateRealtimeEndpointInput createRealtimeEndpointInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRealtimeEndpointOutput response = api.createRealtimeEndpoint(xAmzTarget, createRealtimeEndpointInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns the DELETED status to a &lt;code&gt;BatchPrediction&lt;/code&gt;, rendering it unusable.&lt;/p&gt; &lt;p&gt;After using the &lt;code&gt;DeleteBatchPrediction&lt;/code&gt; operation, you can use the &lt;a&gt;GetBatchPrediction&lt;/a&gt; operation to verify that the status of the &lt;code&gt;BatchPrediction&lt;/code&gt; changed to DELETED.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Caution:&lt;/b&gt; The result of the &lt;code&gt;DeleteBatchPrediction&lt;/code&gt; operation is irreversible.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBatchPredictionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteBatchPredictionInput deleteBatchPredictionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBatchPredictionOutput response = api.deleteBatchPrediction(xAmzTarget, deleteBatchPredictionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns the DELETED status to a &lt;code&gt;DataSource&lt;/code&gt;, rendering it unusable.&lt;/p&gt; &lt;p&gt;After using the &lt;code&gt;DeleteDataSource&lt;/code&gt; operation, you can use the &lt;a&gt;GetDataSource&lt;/a&gt; operation to verify that the status of the &lt;code&gt;DataSource&lt;/code&gt; changed to DELETED.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Caution:&lt;/b&gt; The results of the &lt;code&gt;DeleteDataSource&lt;/code&gt; operation are irreversible.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataSourceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDataSourceInput deleteDataSourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDataSourceOutput response = api.deleteDataSource(xAmzTarget, deleteDataSourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns the &lt;code&gt;DELETED&lt;/code&gt; status to an &lt;code&gt;Evaluation&lt;/code&gt;, rendering it unusable.&lt;/p&gt; &lt;p&gt;After invoking the &lt;code&gt;DeleteEvaluation&lt;/code&gt; operation, you can use the &lt;code&gt;GetEvaluation&lt;/code&gt; operation to verify that the status of the &lt;code&gt;Evaluation&lt;/code&gt; changed to &lt;code&gt;DELETED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Caution:&lt;/b&gt; The results of the &lt;code&gt;DeleteEvaluation&lt;/code&gt; operation are irreversible.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEvaluationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEvaluationInput deleteEvaluationInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEvaluationOutput response = api.deleteEvaluation(xAmzTarget, deleteEvaluationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns the &lt;code&gt;DELETED&lt;/code&gt; status to an &lt;code&gt;MLModel&lt;/code&gt;, rendering it unusable.&lt;/p&gt; &lt;p&gt;After using the &lt;code&gt;DeleteMLModel&lt;/code&gt; operation, you can use the &lt;code&gt;GetMLModel&lt;/code&gt; operation to verify that the status of the &lt;code&gt;MLModel&lt;/code&gt; changed to DELETED.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Caution:&lt;/b&gt; The result of the &lt;code&gt;DeleteMLModel&lt;/code&gt; operation is irreversible.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMLModelTest() throws ApiException {
        String xAmzTarget = null;
        DeleteMLModelInput deleteMLModelInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteMLModelOutput response = api.deleteMLModel(xAmzTarget, deleteMLModelInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a real time endpoint of an &lt;code&gt;MLModel&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRealtimeEndpointTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRealtimeEndpointInput deleteRealtimeEndpointInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRealtimeEndpointOutput response = api.deleteRealtimeEndpoint(xAmzTarget, deleteRealtimeEndpointInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified tags associated with an ML object. After this operation is complete, you can&#39;t recover deleted tags.&lt;/p&gt; &lt;p&gt;If you specify a tag that doesn&#39;t exist, Amazon ML ignores it.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagsTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTagsInput deleteTagsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTagsOutput response = api.deleteTags(xAmzTarget, deleteTagsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;BatchPrediction&lt;/code&gt; operations that match the search criteria in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBatchPredictionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeBatchPredictionsInput describeBatchPredictionsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String limit = null;
        String nextToken = null;
        DescribeBatchPredictionsOutput response = api.describeBatchPredictions(xAmzTarget, describeBatchPredictionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;DataSource&lt;/code&gt; that match the search criteria in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDataSourcesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDataSourcesInput describeDataSourcesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String limit = null;
        String nextToken = null;
        DescribeDataSourcesOutput response = api.describeDataSources(xAmzTarget, describeDataSourcesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;DescribeEvaluations&lt;/code&gt; that match the search criteria in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEvaluationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEvaluationsInput describeEvaluationsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String limit = null;
        String nextToken = null;
        DescribeEvaluationsOutput response = api.describeEvaluations(xAmzTarget, describeEvaluationsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;MLModel&lt;/code&gt; that match the search criteria in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMLModelsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeMLModelsInput describeMLModelsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String limit = null;
        String nextToken = null;
        DescribeMLModelsOutput response = api.describeMLModels(xAmzTarget, describeMLModelsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Describes one or more of the tags for your Amazon ML object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTagsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTagsInput describeTagsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTagsOutput response = api.describeTags(xAmzTarget, describeTagsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a &lt;code&gt;BatchPrediction&lt;/code&gt; that includes detailed metadata, status, and data file information for a &lt;code&gt;Batch Prediction&lt;/code&gt; request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchPredictionTest() throws ApiException {
        String xAmzTarget = null;
        GetBatchPredictionInput getBatchPredictionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBatchPredictionOutput response = api.getBatchPrediction(xAmzTarget, getBatchPredictionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a &lt;code&gt;DataSource&lt;/code&gt; that includes metadata and data file information, as well as the current status of the &lt;code&gt;DataSource&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetDataSource&lt;/code&gt; provides results in normal or verbose format. The verbose format adds the schema description and the list of files pointed to by the DataSource to the normal format.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSourceTest() throws ApiException {
        String xAmzTarget = null;
        GetDataSourceInput getDataSourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataSourceOutput response = api.getDataSource(xAmzTarget, getDataSourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns an &lt;code&gt;Evaluation&lt;/code&gt; that includes metadata as well as the current status of the &lt;code&gt;Evaluation&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvaluationTest() throws ApiException {
        String xAmzTarget = null;
        GetEvaluationInput getEvaluationInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEvaluationOutput response = api.getEvaluation(xAmzTarget, getEvaluationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns an &lt;code&gt;MLModel&lt;/code&gt; that includes detailed metadata, data source information, and the current status of the &lt;code&gt;MLModel&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetMLModel&lt;/code&gt; provides results in normal or verbose format. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMLModelTest() throws ApiException {
        String xAmzTarget = null;
        GetMLModelInput getMLModelInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMLModelOutput response = api.getMLModel(xAmzTarget, getMLModelInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Generates a prediction for the observation using the specified &lt;code&gt;ML Model&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; Not all response parameters will be populated. Whether a response parameter is populated depends on the type of model requested.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void predictTest() throws ApiException {
        String xAmzTarget = null;
        PredictInput predictInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PredictOutput response = api.predict(xAmzTarget, predictInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the &lt;code&gt;BatchPredictionName&lt;/code&gt; of a &lt;code&gt;BatchPrediction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetBatchPrediction&lt;/code&gt; operation to view the contents of the updated data element.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBatchPredictionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateBatchPredictionInput updateBatchPredictionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBatchPredictionOutput response = api.updateBatchPrediction(xAmzTarget, updateBatchPredictionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the &lt;code&gt;DataSourceName&lt;/code&gt; of a &lt;code&gt;DataSource&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetDataSource&lt;/code&gt; operation to view the contents of the updated data element.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataSourceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDataSourceInput updateDataSourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDataSourceOutput response = api.updateDataSource(xAmzTarget, updateDataSourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the &lt;code&gt;EvaluationName&lt;/code&gt; of an &lt;code&gt;Evaluation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetEvaluation&lt;/code&gt; operation to view the contents of the updated data element.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEvaluationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateEvaluationInput updateEvaluationInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEvaluationOutput response = api.updateEvaluation(xAmzTarget, updateEvaluationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the &lt;code&gt;MLModelName&lt;/code&gt; and the &lt;code&gt;ScoreThreshold&lt;/code&gt; of an &lt;code&gt;MLModel&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetMLModel&lt;/code&gt; operation to view the contents of the updated data element.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMLModelTest() throws ApiException {
        String xAmzTarget = null;
        UpdateMLModelInput updateMLModelInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMLModelOutput response = api.updateMLModel(xAmzTarget, updateMLModelInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
