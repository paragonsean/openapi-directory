/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBatchPredictionInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:53.196548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBatchPredictionInput {
  public static final String SERIALIZED_NAME_BATCH_PREDICTION_ID = "BatchPredictionId";
  @SerializedName(SERIALIZED_NAME_BATCH_PREDICTION_ID)
  private String batchPredictionId;

  public static final String SERIALIZED_NAME_BATCH_PREDICTION_NAME = "BatchPredictionName";
  @SerializedName(SERIALIZED_NAME_BATCH_PREDICTION_NAME)
  private String batchPredictionName;

  public static final String SERIALIZED_NAME_ML_MODEL_ID = "MLModelId";
  @SerializedName(SERIALIZED_NAME_ML_MODEL_ID)
  private String mlModelId;

  public static final String SERIALIZED_NAME_BATCH_PREDICTION_DATA_SOURCE_ID = "BatchPredictionDataSourceId";
  @SerializedName(SERIALIZED_NAME_BATCH_PREDICTION_DATA_SOURCE_ID)
  private String batchPredictionDataSourceId;

  public static final String SERIALIZED_NAME_OUTPUT_URI = "OutputUri";
  @SerializedName(SERIALIZED_NAME_OUTPUT_URI)
  private String outputUri;

  public CreateBatchPredictionInput() {
  }

  public CreateBatchPredictionInput batchPredictionId(String batchPredictionId) {
    this.batchPredictionId = batchPredictionId;
    return this;
  }

  /**
   * Get batchPredictionId
   * @return batchPredictionId
   */
  @javax.annotation.Nonnull
  public String getBatchPredictionId() {
    return batchPredictionId;
  }

  public void setBatchPredictionId(String batchPredictionId) {
    this.batchPredictionId = batchPredictionId;
  }


  public CreateBatchPredictionInput batchPredictionName(String batchPredictionName) {
    this.batchPredictionName = batchPredictionName;
    return this;
  }

  /**
   * Get batchPredictionName
   * @return batchPredictionName
   */
  @javax.annotation.Nullable
  public String getBatchPredictionName() {
    return batchPredictionName;
  }

  public void setBatchPredictionName(String batchPredictionName) {
    this.batchPredictionName = batchPredictionName;
  }


  public CreateBatchPredictionInput mlModelId(String mlModelId) {
    this.mlModelId = mlModelId;
    return this;
  }

  /**
   * Get mlModelId
   * @return mlModelId
   */
  @javax.annotation.Nonnull
  public String getMlModelId() {
    return mlModelId;
  }

  public void setMlModelId(String mlModelId) {
    this.mlModelId = mlModelId;
  }


  public CreateBatchPredictionInput batchPredictionDataSourceId(String batchPredictionDataSourceId) {
    this.batchPredictionDataSourceId = batchPredictionDataSourceId;
    return this;
  }

  /**
   * Get batchPredictionDataSourceId
   * @return batchPredictionDataSourceId
   */
  @javax.annotation.Nonnull
  public String getBatchPredictionDataSourceId() {
    return batchPredictionDataSourceId;
  }

  public void setBatchPredictionDataSourceId(String batchPredictionDataSourceId) {
    this.batchPredictionDataSourceId = batchPredictionDataSourceId;
  }


  public CreateBatchPredictionInput outputUri(String outputUri) {
    this.outputUri = outputUri;
    return this;
  }

  /**
   * Get outputUri
   * @return outputUri
   */
  @javax.annotation.Nonnull
  public String getOutputUri() {
    return outputUri;
  }

  public void setOutputUri(String outputUri) {
    this.outputUri = outputUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBatchPredictionInput createBatchPredictionInput = (CreateBatchPredictionInput) o;
    return Objects.equals(this.batchPredictionId, createBatchPredictionInput.batchPredictionId) &&
        Objects.equals(this.batchPredictionName, createBatchPredictionInput.batchPredictionName) &&
        Objects.equals(this.mlModelId, createBatchPredictionInput.mlModelId) &&
        Objects.equals(this.batchPredictionDataSourceId, createBatchPredictionInput.batchPredictionDataSourceId) &&
        Objects.equals(this.outputUri, createBatchPredictionInput.outputUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchPredictionId, batchPredictionName, mlModelId, batchPredictionDataSourceId, outputUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBatchPredictionInput {\n");
    sb.append("    batchPredictionId: ").append(toIndentedString(batchPredictionId)).append("\n");
    sb.append("    batchPredictionName: ").append(toIndentedString(batchPredictionName)).append("\n");
    sb.append("    mlModelId: ").append(toIndentedString(mlModelId)).append("\n");
    sb.append("    batchPredictionDataSourceId: ").append(toIndentedString(batchPredictionDataSourceId)).append("\n");
    sb.append("    outputUri: ").append(toIndentedString(outputUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BatchPredictionId");
    openapiFields.add("BatchPredictionName");
    openapiFields.add("MLModelId");
    openapiFields.add("BatchPredictionDataSourceId");
    openapiFields.add("OutputUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BatchPredictionId");
    openapiRequiredFields.add("MLModelId");
    openapiRequiredFields.add("BatchPredictionDataSourceId");
    openapiRequiredFields.add("OutputUri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBatchPredictionInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBatchPredictionInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBatchPredictionInput is not found in the empty JSON string", CreateBatchPredictionInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBatchPredictionInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBatchPredictionInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateBatchPredictionInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `BatchPredictionId`
      String.validateJsonElement(jsonObj.get("BatchPredictionId"));
      // validate the optional field `BatchPredictionName`
      if (jsonObj.get("BatchPredictionName") != null && !jsonObj.get("BatchPredictionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BatchPredictionName"));
      }
      // validate the required field `MLModelId`
      String.validateJsonElement(jsonObj.get("MLModelId"));
      // validate the required field `BatchPredictionDataSourceId`
      String.validateJsonElement(jsonObj.get("BatchPredictionDataSourceId"));
      // validate the required field `OutputUri`
      String.validateJsonElement(jsonObj.get("OutputUri"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBatchPredictionInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBatchPredictionInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBatchPredictionInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBatchPredictionInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBatchPredictionInput>() {
           @Override
           public void write(JsonWriter out, CreateBatchPredictionInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBatchPredictionInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBatchPredictionInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBatchPredictionInput
   * @throws IOException if the JSON string is invalid with respect to CreateBatchPredictionInput
   */
  public static CreateBatchPredictionInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBatchPredictionInput.class);
  }

  /**
   * Convert an instance of CreateBatchPredictionInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

