/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RDSMetadataDatabase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The datasource details that are specific to Amazon RDS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:53.196548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RDSMetadata {
  public static final String SERIALIZED_NAME_DATABASE = "Database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private RDSMetadataDatabase database;

  public static final String SERIALIZED_NAME_DATABASE_USER_NAME = "DatabaseUserName";
  @SerializedName(SERIALIZED_NAME_DATABASE_USER_NAME)
  private String databaseUserName;

  public static final String SERIALIZED_NAME_SELECT_SQL_QUERY = "SelectSqlQuery";
  @SerializedName(SERIALIZED_NAME_SELECT_SQL_QUERY)
  private String selectSqlQuery;

  public static final String SERIALIZED_NAME_RESOURCE_ROLE = "ResourceRole";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ROLE)
  private String resourceRole;

  public static final String SERIALIZED_NAME_SERVICE_ROLE = "ServiceRole";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE)
  private String serviceRole;

  public static final String SERIALIZED_NAME_DATA_PIPELINE_ID = "DataPipelineId";
  @SerializedName(SERIALIZED_NAME_DATA_PIPELINE_ID)
  private String dataPipelineId;

  public RDSMetadata() {
  }

  public RDSMetadata database(RDSMetadataDatabase database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nullable
  public RDSMetadataDatabase getDatabase() {
    return database;
  }

  public void setDatabase(RDSMetadataDatabase database) {
    this.database = database;
  }


  public RDSMetadata databaseUserName(String databaseUserName) {
    this.databaseUserName = databaseUserName;
    return this;
  }

  /**
   * The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an &lt;code&gt;RDSSelectSqlQuery&lt;/code&gt; query.
   * @return databaseUserName
   */
  @javax.annotation.Nullable
  public String getDatabaseUserName() {
    return databaseUserName;
  }

  public void setDatabaseUserName(String databaseUserName) {
    this.databaseUserName = databaseUserName;
  }


  public RDSMetadata selectSqlQuery(String selectSqlQuery) {
    this.selectSqlQuery = selectSqlQuery;
    return this;
  }

  /**
   * Get selectSqlQuery
   * @return selectSqlQuery
   */
  @javax.annotation.Nullable
  public String getSelectSqlQuery() {
    return selectSqlQuery;
  }

  public void setSelectSqlQuery(String selectSqlQuery) {
    this.selectSqlQuery = selectSqlQuery;
  }


  public RDSMetadata resourceRole(String resourceRole) {
    this.resourceRole = resourceRole;
    return this;
  }

  /**
   * Get resourceRole
   * @return resourceRole
   */
  @javax.annotation.Nullable
  public String getResourceRole() {
    return resourceRole;
  }

  public void setResourceRole(String resourceRole) {
    this.resourceRole = resourceRole;
  }


  public RDSMetadata serviceRole(String serviceRole) {
    this.serviceRole = serviceRole;
    return this;
  }

  /**
   * Get serviceRole
   * @return serviceRole
   */
  @javax.annotation.Nullable
  public String getServiceRole() {
    return serviceRole;
  }

  public void setServiceRole(String serviceRole) {
    this.serviceRole = serviceRole;
  }


  public RDSMetadata dataPipelineId(String dataPipelineId) {
    this.dataPipelineId = dataPipelineId;
    return this;
  }

  /**
   * Get dataPipelineId
   * @return dataPipelineId
   */
  @javax.annotation.Nullable
  public String getDataPipelineId() {
    return dataPipelineId;
  }

  public void setDataPipelineId(String dataPipelineId) {
    this.dataPipelineId = dataPipelineId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RDSMetadata rdSMetadata = (RDSMetadata) o;
    return Objects.equals(this.database, rdSMetadata.database) &&
        Objects.equals(this.databaseUserName, rdSMetadata.databaseUserName) &&
        Objects.equals(this.selectSqlQuery, rdSMetadata.selectSqlQuery) &&
        Objects.equals(this.resourceRole, rdSMetadata.resourceRole) &&
        Objects.equals(this.serviceRole, rdSMetadata.serviceRole) &&
        Objects.equals(this.dataPipelineId, rdSMetadata.dataPipelineId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(database, databaseUserName, selectSqlQuery, resourceRole, serviceRole, dataPipelineId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RDSMetadata {\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    databaseUserName: ").append(toIndentedString(databaseUserName)).append("\n");
    sb.append("    selectSqlQuery: ").append(toIndentedString(selectSqlQuery)).append("\n");
    sb.append("    resourceRole: ").append(toIndentedString(resourceRole)).append("\n");
    sb.append("    serviceRole: ").append(toIndentedString(serviceRole)).append("\n");
    sb.append("    dataPipelineId: ").append(toIndentedString(dataPipelineId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Database");
    openapiFields.add("DatabaseUserName");
    openapiFields.add("SelectSqlQuery");
    openapiFields.add("ResourceRole");
    openapiFields.add("ServiceRole");
    openapiFields.add("DataPipelineId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RDSMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RDSMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RDSMetadata is not found in the empty JSON string", RDSMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RDSMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RDSMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Database`
      if (jsonObj.get("Database") != null && !jsonObj.get("Database").isJsonNull()) {
        RDSMetadataDatabase.validateJsonElement(jsonObj.get("Database"));
      }
      if ((jsonObj.get("DatabaseUserName") != null && !jsonObj.get("DatabaseUserName").isJsonNull()) && !jsonObj.get("DatabaseUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DatabaseUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DatabaseUserName").toString()));
      }
      // validate the optional field `SelectSqlQuery`
      if (jsonObj.get("SelectSqlQuery") != null && !jsonObj.get("SelectSqlQuery").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SelectSqlQuery"));
      }
      // validate the optional field `ResourceRole`
      if (jsonObj.get("ResourceRole") != null && !jsonObj.get("ResourceRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceRole"));
      }
      // validate the optional field `ServiceRole`
      if (jsonObj.get("ServiceRole") != null && !jsonObj.get("ServiceRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceRole"));
      }
      // validate the optional field `DataPipelineId`
      if (jsonObj.get("DataPipelineId") != null && !jsonObj.get("DataPipelineId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataPipelineId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RDSMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RDSMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RDSMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RDSMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<RDSMetadata>() {
           @Override
           public void write(JsonWriter out, RDSMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RDSMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RDSMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RDSMetadata
   * @throws IOException if the JSON string is invalid with respect to RDSMetadata
   */
  public static RDSMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RDSMetadata.class);
  }

  /**
   * Convert an instance of RDSMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

