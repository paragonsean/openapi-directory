/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDataSourceFromS3InputDataSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:53.196548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDataSourceFromS3InputDataSpec {
  public static final String SERIALIZED_NAME_DATA_LOCATION_S3 = "DataLocationS3";
  @SerializedName(SERIALIZED_NAME_DATA_LOCATION_S3)
  private String dataLocationS3;

  public static final String SERIALIZED_NAME_DATA_REARRANGEMENT = "DataRearrangement";
  @SerializedName(SERIALIZED_NAME_DATA_REARRANGEMENT)
  private String dataRearrangement;

  public static final String SERIALIZED_NAME_DATA_SCHEMA = "DataSchema";
  @SerializedName(SERIALIZED_NAME_DATA_SCHEMA)
  private String dataSchema;

  public static final String SERIALIZED_NAME_DATA_SCHEMA_LOCATION_S3 = "DataSchemaLocationS3";
  @SerializedName(SERIALIZED_NAME_DATA_SCHEMA_LOCATION_S3)
  private String dataSchemaLocationS3;

  public CreateDataSourceFromS3InputDataSpec() {
  }

  public CreateDataSourceFromS3InputDataSpec dataLocationS3(String dataLocationS3) {
    this.dataLocationS3 = dataLocationS3;
    return this;
  }

  /**
   * Get dataLocationS3
   * @return dataLocationS3
   */
  @javax.annotation.Nonnull
  public String getDataLocationS3() {
    return dataLocationS3;
  }

  public void setDataLocationS3(String dataLocationS3) {
    this.dataLocationS3 = dataLocationS3;
  }


  public CreateDataSourceFromS3InputDataSpec dataRearrangement(String dataRearrangement) {
    this.dataRearrangement = dataRearrangement;
    return this;
  }

  /**
   * Get dataRearrangement
   * @return dataRearrangement
   */
  @javax.annotation.Nullable
  public String getDataRearrangement() {
    return dataRearrangement;
  }

  public void setDataRearrangement(String dataRearrangement) {
    this.dataRearrangement = dataRearrangement;
  }


  public CreateDataSourceFromS3InputDataSpec dataSchema(String dataSchema) {
    this.dataSchema = dataSchema;
    return this;
  }

  /**
   * Get dataSchema
   * @return dataSchema
   */
  @javax.annotation.Nullable
  public String getDataSchema() {
    return dataSchema;
  }

  public void setDataSchema(String dataSchema) {
    this.dataSchema = dataSchema;
  }


  public CreateDataSourceFromS3InputDataSpec dataSchemaLocationS3(String dataSchemaLocationS3) {
    this.dataSchemaLocationS3 = dataSchemaLocationS3;
    return this;
  }

  /**
   * Get dataSchemaLocationS3
   * @return dataSchemaLocationS3
   */
  @javax.annotation.Nullable
  public String getDataSchemaLocationS3() {
    return dataSchemaLocationS3;
  }

  public void setDataSchemaLocationS3(String dataSchemaLocationS3) {
    this.dataSchemaLocationS3 = dataSchemaLocationS3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDataSourceFromS3InputDataSpec createDataSourceFromS3InputDataSpec = (CreateDataSourceFromS3InputDataSpec) o;
    return Objects.equals(this.dataLocationS3, createDataSourceFromS3InputDataSpec.dataLocationS3) &&
        Objects.equals(this.dataRearrangement, createDataSourceFromS3InputDataSpec.dataRearrangement) &&
        Objects.equals(this.dataSchema, createDataSourceFromS3InputDataSpec.dataSchema) &&
        Objects.equals(this.dataSchemaLocationS3, createDataSourceFromS3InputDataSpec.dataSchemaLocationS3);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataLocationS3, dataRearrangement, dataSchema, dataSchemaLocationS3);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDataSourceFromS3InputDataSpec {\n");
    sb.append("    dataLocationS3: ").append(toIndentedString(dataLocationS3)).append("\n");
    sb.append("    dataRearrangement: ").append(toIndentedString(dataRearrangement)).append("\n");
    sb.append("    dataSchema: ").append(toIndentedString(dataSchema)).append("\n");
    sb.append("    dataSchemaLocationS3: ").append(toIndentedString(dataSchemaLocationS3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataLocationS3");
    openapiFields.add("DataRearrangement");
    openapiFields.add("DataSchema");
    openapiFields.add("DataSchemaLocationS3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DataLocationS3");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDataSourceFromS3InputDataSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDataSourceFromS3InputDataSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDataSourceFromS3InputDataSpec is not found in the empty JSON string", CreateDataSourceFromS3InputDataSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDataSourceFromS3InputDataSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDataSourceFromS3InputDataSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDataSourceFromS3InputDataSpec.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DataLocationS3`
      String.validateJsonElement(jsonObj.get("DataLocationS3"));
      // validate the optional field `DataRearrangement`
      if (jsonObj.get("DataRearrangement") != null && !jsonObj.get("DataRearrangement").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataRearrangement"));
      }
      // validate the optional field `DataSchema`
      if (jsonObj.get("DataSchema") != null && !jsonObj.get("DataSchema").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataSchema"));
      }
      // validate the optional field `DataSchemaLocationS3`
      if (jsonObj.get("DataSchemaLocationS3") != null && !jsonObj.get("DataSchemaLocationS3").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataSchemaLocationS3"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDataSourceFromS3InputDataSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDataSourceFromS3InputDataSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDataSourceFromS3InputDataSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDataSourceFromS3InputDataSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDataSourceFromS3InputDataSpec>() {
           @Override
           public void write(JsonWriter out, CreateDataSourceFromS3InputDataSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDataSourceFromS3InputDataSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDataSourceFromS3InputDataSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDataSourceFromS3InputDataSpec
   * @throws IOException if the JSON string is invalid with respect to CreateDataSourceFromS3InputDataSpec
   */
  public static CreateDataSourceFromS3InputDataSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDataSourceFromS3InputDataSpec.class);
  }

  /**
   * Convert an instance of CreateDataSourceFromS3InputDataSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

