/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EntityStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt; Represents the output of a &lt;code&gt;GetBatchPrediction&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt; The content consists of the detailed metadata, the status, and the data file information of a &lt;code&gt;Batch Prediction&lt;/code&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:53.196548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchPrediction {
  public static final String SERIALIZED_NAME_BATCH_PREDICTION_ID = "BatchPredictionId";
  @SerializedName(SERIALIZED_NAME_BATCH_PREDICTION_ID)
  private String batchPredictionId;

  public static final String SERIALIZED_NAME_ML_MODEL_ID = "MLModelId";
  @SerializedName(SERIALIZED_NAME_ML_MODEL_ID)
  private String mlModelId;

  public static final String SERIALIZED_NAME_BATCH_PREDICTION_DATA_SOURCE_ID = "BatchPredictionDataSourceId";
  @SerializedName(SERIALIZED_NAME_BATCH_PREDICTION_DATA_SOURCE_ID)
  private String batchPredictionDataSourceId;

  public static final String SERIALIZED_NAME_INPUT_DATA_LOCATION_S3 = "InputDataLocationS3";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA_LOCATION_S3)
  private String inputDataLocationS3;

  public static final String SERIALIZED_NAME_CREATED_BY_IAM_USER = "CreatedByIamUser";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_IAM_USER)
  private String createdByIamUser;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntityStatus status;

  public static final String SERIALIZED_NAME_OUTPUT_URI = "OutputUri";
  @SerializedName(SERIALIZED_NAME_OUTPUT_URI)
  private String outputUri;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_COMPUTE_TIME = "ComputeTime";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TIME)
  private Integer computeTime;

  public static final String SERIALIZED_NAME_FINISHED_AT = "FinishedAt";
  @SerializedName(SERIALIZED_NAME_FINISHED_AT)
  private OffsetDateTime finishedAt;

  public static final String SERIALIZED_NAME_STARTED_AT = "StartedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_TOTAL_RECORD_COUNT = "TotalRecordCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECORD_COUNT)
  private Integer totalRecordCount;

  public static final String SERIALIZED_NAME_INVALID_RECORD_COUNT = "InvalidRecordCount";
  @SerializedName(SERIALIZED_NAME_INVALID_RECORD_COUNT)
  private Integer invalidRecordCount;

  public BatchPrediction() {
  }

  public BatchPrediction batchPredictionId(String batchPredictionId) {
    this.batchPredictionId = batchPredictionId;
    return this;
  }

  /**
   * Get batchPredictionId
   * @return batchPredictionId
   */
  @javax.annotation.Nullable
  public String getBatchPredictionId() {
    return batchPredictionId;
  }

  public void setBatchPredictionId(String batchPredictionId) {
    this.batchPredictionId = batchPredictionId;
  }


  public BatchPrediction mlModelId(String mlModelId) {
    this.mlModelId = mlModelId;
    return this;
  }

  /**
   * Get mlModelId
   * @return mlModelId
   */
  @javax.annotation.Nullable
  public String getMlModelId() {
    return mlModelId;
  }

  public void setMlModelId(String mlModelId) {
    this.mlModelId = mlModelId;
  }


  public BatchPrediction batchPredictionDataSourceId(String batchPredictionDataSourceId) {
    this.batchPredictionDataSourceId = batchPredictionDataSourceId;
    return this;
  }

  /**
   * Get batchPredictionDataSourceId
   * @return batchPredictionDataSourceId
   */
  @javax.annotation.Nullable
  public String getBatchPredictionDataSourceId() {
    return batchPredictionDataSourceId;
  }

  public void setBatchPredictionDataSourceId(String batchPredictionDataSourceId) {
    this.batchPredictionDataSourceId = batchPredictionDataSourceId;
  }


  public BatchPrediction inputDataLocationS3(String inputDataLocationS3) {
    this.inputDataLocationS3 = inputDataLocationS3;
    return this;
  }

  /**
   * Get inputDataLocationS3
   * @return inputDataLocationS3
   */
  @javax.annotation.Nullable
  public String getInputDataLocationS3() {
    return inputDataLocationS3;
  }

  public void setInputDataLocationS3(String inputDataLocationS3) {
    this.inputDataLocationS3 = inputDataLocationS3;
  }


  public BatchPrediction createdByIamUser(String createdByIamUser) {
    this.createdByIamUser = createdByIamUser;
    return this;
  }

  /**
   * Get createdByIamUser
   * @return createdByIamUser
   */
  @javax.annotation.Nullable
  public String getCreatedByIamUser() {
    return createdByIamUser;
  }

  public void setCreatedByIamUser(String createdByIamUser) {
    this.createdByIamUser = createdByIamUser;
  }


  public BatchPrediction createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public BatchPrediction lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public BatchPrediction name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BatchPrediction status(EntityStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntityStatus getStatus() {
    return status;
  }

  public void setStatus(EntityStatus status) {
    this.status = status;
  }


  public BatchPrediction outputUri(String outputUri) {
    this.outputUri = outputUri;
    return this;
  }

  /**
   * Get outputUri
   * @return outputUri
   */
  @javax.annotation.Nullable
  public String getOutputUri() {
    return outputUri;
  }

  public void setOutputUri(String outputUri) {
    this.outputUri = outputUri;
  }


  public BatchPrediction message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public BatchPrediction computeTime(Integer computeTime) {
    this.computeTime = computeTime;
    return this;
  }

  /**
   * Long integer type that is a 64-bit signed number.
   * @return computeTime
   */
  @javax.annotation.Nullable
  public Integer getComputeTime() {
    return computeTime;
  }

  public void setComputeTime(Integer computeTime) {
    this.computeTime = computeTime;
  }


  public BatchPrediction finishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

  /**
   * A timestamp represented in epoch time.
   * @return finishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }

  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }


  public BatchPrediction startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * A timestamp represented in epoch time.
   * @return startedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public BatchPrediction totalRecordCount(Integer totalRecordCount) {
    this.totalRecordCount = totalRecordCount;
    return this;
  }

  /**
   * Long integer type that is a 64-bit signed number.
   * @return totalRecordCount
   */
  @javax.annotation.Nullable
  public Integer getTotalRecordCount() {
    return totalRecordCount;
  }

  public void setTotalRecordCount(Integer totalRecordCount) {
    this.totalRecordCount = totalRecordCount;
  }


  public BatchPrediction invalidRecordCount(Integer invalidRecordCount) {
    this.invalidRecordCount = invalidRecordCount;
    return this;
  }

  /**
   * Long integer type that is a 64-bit signed number.
   * @return invalidRecordCount
   */
  @javax.annotation.Nullable
  public Integer getInvalidRecordCount() {
    return invalidRecordCount;
  }

  public void setInvalidRecordCount(Integer invalidRecordCount) {
    this.invalidRecordCount = invalidRecordCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchPrediction batchPrediction = (BatchPrediction) o;
    return Objects.equals(this.batchPredictionId, batchPrediction.batchPredictionId) &&
        Objects.equals(this.mlModelId, batchPrediction.mlModelId) &&
        Objects.equals(this.batchPredictionDataSourceId, batchPrediction.batchPredictionDataSourceId) &&
        Objects.equals(this.inputDataLocationS3, batchPrediction.inputDataLocationS3) &&
        Objects.equals(this.createdByIamUser, batchPrediction.createdByIamUser) &&
        Objects.equals(this.createdAt, batchPrediction.createdAt) &&
        Objects.equals(this.lastUpdatedAt, batchPrediction.lastUpdatedAt) &&
        Objects.equals(this.name, batchPrediction.name) &&
        Objects.equals(this.status, batchPrediction.status) &&
        Objects.equals(this.outputUri, batchPrediction.outputUri) &&
        Objects.equals(this.message, batchPrediction.message) &&
        Objects.equals(this.computeTime, batchPrediction.computeTime) &&
        Objects.equals(this.finishedAt, batchPrediction.finishedAt) &&
        Objects.equals(this.startedAt, batchPrediction.startedAt) &&
        Objects.equals(this.totalRecordCount, batchPrediction.totalRecordCount) &&
        Objects.equals(this.invalidRecordCount, batchPrediction.invalidRecordCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchPredictionId, mlModelId, batchPredictionDataSourceId, inputDataLocationS3, createdByIamUser, createdAt, lastUpdatedAt, name, status, outputUri, message, computeTime, finishedAt, startedAt, totalRecordCount, invalidRecordCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchPrediction {\n");
    sb.append("    batchPredictionId: ").append(toIndentedString(batchPredictionId)).append("\n");
    sb.append("    mlModelId: ").append(toIndentedString(mlModelId)).append("\n");
    sb.append("    batchPredictionDataSourceId: ").append(toIndentedString(batchPredictionDataSourceId)).append("\n");
    sb.append("    inputDataLocationS3: ").append(toIndentedString(inputDataLocationS3)).append("\n");
    sb.append("    createdByIamUser: ").append(toIndentedString(createdByIamUser)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    outputUri: ").append(toIndentedString(outputUri)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    computeTime: ").append(toIndentedString(computeTime)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    totalRecordCount: ").append(toIndentedString(totalRecordCount)).append("\n");
    sb.append("    invalidRecordCount: ").append(toIndentedString(invalidRecordCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BatchPredictionId");
    openapiFields.add("MLModelId");
    openapiFields.add("BatchPredictionDataSourceId");
    openapiFields.add("InputDataLocationS3");
    openapiFields.add("CreatedByIamUser");
    openapiFields.add("CreatedAt");
    openapiFields.add("LastUpdatedAt");
    openapiFields.add("Name");
    openapiFields.add("Status");
    openapiFields.add("OutputUri");
    openapiFields.add("Message");
    openapiFields.add("ComputeTime");
    openapiFields.add("FinishedAt");
    openapiFields.add("StartedAt");
    openapiFields.add("TotalRecordCount");
    openapiFields.add("InvalidRecordCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchPrediction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchPrediction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchPrediction is not found in the empty JSON string", BatchPrediction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchPrediction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchPrediction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BatchPredictionId`
      if (jsonObj.get("BatchPredictionId") != null && !jsonObj.get("BatchPredictionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BatchPredictionId"));
      }
      // validate the optional field `MLModelId`
      if (jsonObj.get("MLModelId") != null && !jsonObj.get("MLModelId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MLModelId"));
      }
      // validate the optional field `BatchPredictionDataSourceId`
      if (jsonObj.get("BatchPredictionDataSourceId") != null && !jsonObj.get("BatchPredictionDataSourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BatchPredictionDataSourceId"));
      }
      // validate the optional field `InputDataLocationS3`
      if (jsonObj.get("InputDataLocationS3") != null && !jsonObj.get("InputDataLocationS3").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputDataLocationS3"));
      }
      // validate the optional field `CreatedByIamUser`
      if (jsonObj.get("CreatedByIamUser") != null && !jsonObj.get("CreatedByIamUser").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatedByIamUser"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `LastUpdatedAt`
      if (jsonObj.get("LastUpdatedAt") != null && !jsonObj.get("LastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        EntityStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `OutputUri`
      if (jsonObj.get("OutputUri") != null && !jsonObj.get("OutputUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputUri"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchPrediction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchPrediction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchPrediction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchPrediction.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchPrediction>() {
           @Override
           public void write(JsonWriter out, BatchPrediction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchPrediction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchPrediction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchPrediction
   * @throws IOException if the JSON string is invalid with respect to BatchPrediction
   */
  public static BatchPrediction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchPrediction.class);
  }

  /**
   * Convert an instance of BatchPrediction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

