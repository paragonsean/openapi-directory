/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataSourceFilterVariable;
import org.openapitools.client.model.SortOrder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDataSourcesInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:53.196548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDataSourcesInput {
  public static final String SERIALIZED_NAME_FILTER_VARIABLE = "FilterVariable";
  @SerializedName(SERIALIZED_NAME_FILTER_VARIABLE)
  private DataSourceFilterVariable filterVariable;

  public static final String SERIALIZED_NAME_E_Q = "EQ";
  @SerializedName(SERIALIZED_NAME_E_Q)
  private String EQ;

  public static final String SERIALIZED_NAME_G_T = "GT";
  @SerializedName(SERIALIZED_NAME_G_T)
  private String GT;

  public static final String SERIALIZED_NAME_L_T = "LT";
  @SerializedName(SERIALIZED_NAME_L_T)
  private String LT;

  public static final String SERIALIZED_NAME_G_E = "GE";
  @SerializedName(SERIALIZED_NAME_G_E)
  private String GE;

  public static final String SERIALIZED_NAME_L_E = "LE";
  @SerializedName(SERIALIZED_NAME_L_E)
  private String LE;

  public static final String SERIALIZED_NAME_N_E = "NE";
  @SerializedName(SERIALIZED_NAME_N_E)
  private String NE;

  public static final String SERIALIZED_NAME_PREFIX = "Prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_SORT_ORDER = "SortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private SortOrder sortOrder;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public DescribeDataSourcesInput() {
  }

  public DescribeDataSourcesInput filterVariable(DataSourceFilterVariable filterVariable) {
    this.filterVariable = filterVariable;
    return this;
  }

  /**
   * Get filterVariable
   * @return filterVariable
   */
  @javax.annotation.Nullable
  public DataSourceFilterVariable getFilterVariable() {
    return filterVariable;
  }

  public void setFilterVariable(DataSourceFilterVariable filterVariable) {
    this.filterVariable = filterVariable;
  }


  public DescribeDataSourcesInput EQ(String EQ) {
    this.EQ = EQ;
    return this;
  }

  /**
   * Get EQ
   * @return EQ
   */
  @javax.annotation.Nullable
  public String getEQ() {
    return EQ;
  }

  public void setEQ(String EQ) {
    this.EQ = EQ;
  }


  public DescribeDataSourcesInput GT(String GT) {
    this.GT = GT;
    return this;
  }

  /**
   * Get GT
   * @return GT
   */
  @javax.annotation.Nullable
  public String getGT() {
    return GT;
  }

  public void setGT(String GT) {
    this.GT = GT;
  }


  public DescribeDataSourcesInput LT(String LT) {
    this.LT = LT;
    return this;
  }

  /**
   * Get LT
   * @return LT
   */
  @javax.annotation.Nullable
  public String getLT() {
    return LT;
  }

  public void setLT(String LT) {
    this.LT = LT;
  }


  public DescribeDataSourcesInput GE(String GE) {
    this.GE = GE;
    return this;
  }

  /**
   * Get GE
   * @return GE
   */
  @javax.annotation.Nullable
  public String getGE() {
    return GE;
  }

  public void setGE(String GE) {
    this.GE = GE;
  }


  public DescribeDataSourcesInput LE(String LE) {
    this.LE = LE;
    return this;
  }

  /**
   * Get LE
   * @return LE
   */
  @javax.annotation.Nullable
  public String getLE() {
    return LE;
  }

  public void setLE(String LE) {
    this.LE = LE;
  }


  public DescribeDataSourcesInput NE(String NE) {
    this.NE = NE;
    return this;
  }

  /**
   * Get NE
   * @return NE
   */
  @javax.annotation.Nullable
  public String getNE() {
    return NE;
  }

  public void setNE(String NE) {
    this.NE = NE;
  }


  public DescribeDataSourcesInput prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public DescribeDataSourcesInput sortOrder(SortOrder sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public SortOrder getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrder sortOrder) {
    this.sortOrder = sortOrder;
  }


  public DescribeDataSourcesInput nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public DescribeDataSourcesInput limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDataSourcesInput describeDataSourcesInput = (DescribeDataSourcesInput) o;
    return Objects.equals(this.filterVariable, describeDataSourcesInput.filterVariable) &&
        Objects.equals(this.EQ, describeDataSourcesInput.EQ) &&
        Objects.equals(this.GT, describeDataSourcesInput.GT) &&
        Objects.equals(this.LT, describeDataSourcesInput.LT) &&
        Objects.equals(this.GE, describeDataSourcesInput.GE) &&
        Objects.equals(this.LE, describeDataSourcesInput.LE) &&
        Objects.equals(this.NE, describeDataSourcesInput.NE) &&
        Objects.equals(this.prefix, describeDataSourcesInput.prefix) &&
        Objects.equals(this.sortOrder, describeDataSourcesInput.sortOrder) &&
        Objects.equals(this.nextToken, describeDataSourcesInput.nextToken) &&
        Objects.equals(this.limit, describeDataSourcesInput.limit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterVariable, EQ, GT, LT, GE, LE, NE, prefix, sortOrder, nextToken, limit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDataSourcesInput {\n");
    sb.append("    filterVariable: ").append(toIndentedString(filterVariable)).append("\n");
    sb.append("    EQ: ").append(toIndentedString(EQ)).append("\n");
    sb.append("    GT: ").append(toIndentedString(GT)).append("\n");
    sb.append("    LT: ").append(toIndentedString(LT)).append("\n");
    sb.append("    GE: ").append(toIndentedString(GE)).append("\n");
    sb.append("    LE: ").append(toIndentedString(LE)).append("\n");
    sb.append("    NE: ").append(toIndentedString(NE)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FilterVariable");
    openapiFields.add("EQ");
    openapiFields.add("GT");
    openapiFields.add("LT");
    openapiFields.add("GE");
    openapiFields.add("LE");
    openapiFields.add("NE");
    openapiFields.add("Prefix");
    openapiFields.add("SortOrder");
    openapiFields.add("NextToken");
    openapiFields.add("Limit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDataSourcesInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDataSourcesInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDataSourcesInput is not found in the empty JSON string", DescribeDataSourcesInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDataSourcesInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDataSourcesInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FilterVariable`
      if (jsonObj.get("FilterVariable") != null && !jsonObj.get("FilterVariable").isJsonNull()) {
        DataSourceFilterVariable.validateJsonElement(jsonObj.get("FilterVariable"));
      }
      // validate the optional field `EQ`
      if (jsonObj.get("EQ") != null && !jsonObj.get("EQ").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EQ"));
      }
      // validate the optional field `GT`
      if (jsonObj.get("GT") != null && !jsonObj.get("GT").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GT"));
      }
      // validate the optional field `LT`
      if (jsonObj.get("LT") != null && !jsonObj.get("LT").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LT"));
      }
      // validate the optional field `GE`
      if (jsonObj.get("GE") != null && !jsonObj.get("GE").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GE"));
      }
      // validate the optional field `LE`
      if (jsonObj.get("LE") != null && !jsonObj.get("LE").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LE"));
      }
      // validate the optional field `NE`
      if (jsonObj.get("NE") != null && !jsonObj.get("NE").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NE"));
      }
      // validate the optional field `Prefix`
      if (jsonObj.get("Prefix") != null && !jsonObj.get("Prefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Prefix"));
      }
      // validate the optional field `SortOrder`
      if (jsonObj.get("SortOrder") != null && !jsonObj.get("SortOrder").isJsonNull()) {
        SortOrder.validateJsonElement(jsonObj.get("SortOrder"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `Limit`
      if (jsonObj.get("Limit") != null && !jsonObj.get("Limit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Limit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDataSourcesInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDataSourcesInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDataSourcesInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDataSourcesInput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDataSourcesInput>() {
           @Override
           public void write(JsonWriter out, DescribeDataSourcesInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDataSourcesInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDataSourcesInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDataSourcesInput
   * @throws IOException if the JSON string is invalid with respect to DescribeDataSourcesInput
   */
  public static DescribeDataSourcesInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDataSourcesInput.class);
  }

  /**
   * Convert an instance of DescribeDataSourcesInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

