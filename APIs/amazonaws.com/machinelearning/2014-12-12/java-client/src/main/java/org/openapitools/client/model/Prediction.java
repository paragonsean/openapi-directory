/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The output from a &lt;code&gt;Predict&lt;/code&gt; operation: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Details&lt;/code&gt; - Contains the following attributes: &lt;code&gt;DetailsAttributes.PREDICTIVE_MODEL_TYPE - REGRESSION | BINARY | MULTICLASS&lt;/code&gt; &lt;code&gt;DetailsAttributes.ALGORITHM - SGD&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PredictedLabel&lt;/code&gt; - Present for either a &lt;code&gt;BINARY&lt;/code&gt; or &lt;code&gt;MULTICLASS&lt;/code&gt; &lt;code&gt;MLModel&lt;/code&gt; request. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PredictedScores&lt;/code&gt; - Contains the raw classification score corresponding to each label. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PredictedValue&lt;/code&gt; - Present for a &lt;code&gt;REGRESSION&lt;/code&gt; &lt;code&gt;MLModel&lt;/code&gt; request. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:53.196548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Prediction {
  public static final String SERIALIZED_NAME_PREDICTED_LABEL = "predictedLabel";
  @SerializedName(SERIALIZED_NAME_PREDICTED_LABEL)
  private String predictedLabel;

  public static final String SERIALIZED_NAME_PREDICTED_VALUE = "predictedValue";
  @SerializedName(SERIALIZED_NAME_PREDICTED_VALUE)
  private Float predictedValue;

  public static final String SERIALIZED_NAME_PREDICTED_SCORES = "predictedScores";
  @SerializedName(SERIALIZED_NAME_PREDICTED_SCORES)
  private Map<String, Float> predictedScores = new HashMap<>();

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Map<String, String> details = new HashMap<>();

  public Prediction() {
  }

  public Prediction predictedLabel(String predictedLabel) {
    this.predictedLabel = predictedLabel;
    return this;
  }

  /**
   * Get predictedLabel
   * @return predictedLabel
   */
  @javax.annotation.Nullable
  public String getPredictedLabel() {
    return predictedLabel;
  }

  public void setPredictedLabel(String predictedLabel) {
    this.predictedLabel = predictedLabel;
  }


  public Prediction predictedValue(Float predictedValue) {
    this.predictedValue = predictedValue;
    return this;
  }

  /**
   * Get predictedValue
   * @return predictedValue
   */
  @javax.annotation.Nullable
  public Float getPredictedValue() {
    return predictedValue;
  }

  public void setPredictedValue(Float predictedValue) {
    this.predictedValue = predictedValue;
  }


  public Prediction predictedScores(Map<String, Float> predictedScores) {
    this.predictedScores = predictedScores;
    return this;
  }

  public Prediction putPredictedScoresItem(String key, Float predictedScoresItem) {
    if (this.predictedScores == null) {
      this.predictedScores = new HashMap<>();
    }
    this.predictedScores.put(key, predictedScoresItem);
    return this;
  }

  /**
   * Provides the raw classification score corresponding to each label.
   * @return predictedScores
   */
  @javax.annotation.Nullable
  public Map<String, Float> getPredictedScores() {
    return predictedScores;
  }

  public void setPredictedScores(Map<String, Float> predictedScores) {
    this.predictedScores = predictedScores;
  }


  public Prediction details(Map<String, String> details) {
    this.details = details;
    return this;
  }

  public Prediction putDetailsItem(String key, String detailsItem) {
    if (this.details == null) {
      this.details = new HashMap<>();
    }
    this.details.put(key, detailsItem);
    return this;
  }

  /**
   * Provides any additional details regarding the prediction.
   * @return details
   */
  @javax.annotation.Nullable
  public Map<String, String> getDetails() {
    return details;
  }

  public void setDetails(Map<String, String> details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Prediction prediction = (Prediction) o;
    return Objects.equals(this.predictedLabel, prediction.predictedLabel) &&
        Objects.equals(this.predictedValue, prediction.predictedValue) &&
        Objects.equals(this.predictedScores, prediction.predictedScores) &&
        Objects.equals(this.details, prediction.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(predictedLabel, predictedValue, predictedScores, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Prediction {\n");
    sb.append("    predictedLabel: ").append(toIndentedString(predictedLabel)).append("\n");
    sb.append("    predictedValue: ").append(toIndentedString(predictedValue)).append("\n");
    sb.append("    predictedScores: ").append(toIndentedString(predictedScores)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("predictedLabel");
    openapiFields.add("predictedValue");
    openapiFields.add("predictedScores");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Prediction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Prediction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Prediction is not found in the empty JSON string", Prediction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Prediction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Prediction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `predictedLabel`
      if (jsonObj.get("predictedLabel") != null && !jsonObj.get("predictedLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("predictedLabel"));
      }
      // validate the optional field `predictedValue`
      if (jsonObj.get("predictedValue") != null && !jsonObj.get("predictedValue").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("predictedValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Prediction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Prediction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Prediction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Prediction.class));

       return (TypeAdapter<T>) new TypeAdapter<Prediction>() {
           @Override
           public void write(JsonWriter out, Prediction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Prediction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Prediction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Prediction
   * @throws IOException if the JSON string is invalid with respect to Prediction
   */
  public static Prediction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Prediction.class);
  }

  /**
   * Convert an instance of Prediction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

