/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RedshiftDataSpecDatabaseCredentials;
import org.openapitools.client.model.RedshiftDataSpecDatabaseInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the data specification of an Amazon Redshift &lt;code&gt;DataSource&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:53.196548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RedshiftDataSpec {
  public static final String SERIALIZED_NAME_DATABASE_INFORMATION = "DatabaseInformation";
  @SerializedName(SERIALIZED_NAME_DATABASE_INFORMATION)
  private RedshiftDataSpecDatabaseInformation databaseInformation;

  public static final String SERIALIZED_NAME_SELECT_SQL_QUERY = "SelectSqlQuery";
  @SerializedName(SERIALIZED_NAME_SELECT_SQL_QUERY)
  private String selectSqlQuery;

  public static final String SERIALIZED_NAME_DATABASE_CREDENTIALS = "DatabaseCredentials";
  @SerializedName(SERIALIZED_NAME_DATABASE_CREDENTIALS)
  private RedshiftDataSpecDatabaseCredentials databaseCredentials;

  public static final String SERIALIZED_NAME_S3_STAGING_LOCATION = "S3StagingLocation";
  @SerializedName(SERIALIZED_NAME_S3_STAGING_LOCATION)
  private String s3StagingLocation;

  public static final String SERIALIZED_NAME_DATA_REARRANGEMENT = "DataRearrangement";
  @SerializedName(SERIALIZED_NAME_DATA_REARRANGEMENT)
  private String dataRearrangement;

  public static final String SERIALIZED_NAME_DATA_SCHEMA = "DataSchema";
  @SerializedName(SERIALIZED_NAME_DATA_SCHEMA)
  private String dataSchema;

  public static final String SERIALIZED_NAME_DATA_SCHEMA_URI = "DataSchemaUri";
  @SerializedName(SERIALIZED_NAME_DATA_SCHEMA_URI)
  private String dataSchemaUri;

  public RedshiftDataSpec() {
  }

  public RedshiftDataSpec databaseInformation(RedshiftDataSpecDatabaseInformation databaseInformation) {
    this.databaseInformation = databaseInformation;
    return this;
  }

  /**
   * Get databaseInformation
   * @return databaseInformation
   */
  @javax.annotation.Nonnull
  public RedshiftDataSpecDatabaseInformation getDatabaseInformation() {
    return databaseInformation;
  }

  public void setDatabaseInformation(RedshiftDataSpecDatabaseInformation databaseInformation) {
    this.databaseInformation = databaseInformation;
  }


  public RedshiftDataSpec selectSqlQuery(String selectSqlQuery) {
    this.selectSqlQuery = selectSqlQuery;
    return this;
  }

  /**
   * Get selectSqlQuery
   * @return selectSqlQuery
   */
  @javax.annotation.Nonnull
  public String getSelectSqlQuery() {
    return selectSqlQuery;
  }

  public void setSelectSqlQuery(String selectSqlQuery) {
    this.selectSqlQuery = selectSqlQuery;
  }


  public RedshiftDataSpec databaseCredentials(RedshiftDataSpecDatabaseCredentials databaseCredentials) {
    this.databaseCredentials = databaseCredentials;
    return this;
  }

  /**
   * Get databaseCredentials
   * @return databaseCredentials
   */
  @javax.annotation.Nonnull
  public RedshiftDataSpecDatabaseCredentials getDatabaseCredentials() {
    return databaseCredentials;
  }

  public void setDatabaseCredentials(RedshiftDataSpecDatabaseCredentials databaseCredentials) {
    this.databaseCredentials = databaseCredentials;
  }


  public RedshiftDataSpec s3StagingLocation(String s3StagingLocation) {
    this.s3StagingLocation = s3StagingLocation;
    return this;
  }

  /**
   * Get s3StagingLocation
   * @return s3StagingLocation
   */
  @javax.annotation.Nonnull
  public String getS3StagingLocation() {
    return s3StagingLocation;
  }

  public void setS3StagingLocation(String s3StagingLocation) {
    this.s3StagingLocation = s3StagingLocation;
  }


  public RedshiftDataSpec dataRearrangement(String dataRearrangement) {
    this.dataRearrangement = dataRearrangement;
    return this;
  }

  /**
   * Get dataRearrangement
   * @return dataRearrangement
   */
  @javax.annotation.Nullable
  public String getDataRearrangement() {
    return dataRearrangement;
  }

  public void setDataRearrangement(String dataRearrangement) {
    this.dataRearrangement = dataRearrangement;
  }


  public RedshiftDataSpec dataSchema(String dataSchema) {
    this.dataSchema = dataSchema;
    return this;
  }

  /**
   * Get dataSchema
   * @return dataSchema
   */
  @javax.annotation.Nullable
  public String getDataSchema() {
    return dataSchema;
  }

  public void setDataSchema(String dataSchema) {
    this.dataSchema = dataSchema;
  }


  public RedshiftDataSpec dataSchemaUri(String dataSchemaUri) {
    this.dataSchemaUri = dataSchemaUri;
    return this;
  }

  /**
   * Get dataSchemaUri
   * @return dataSchemaUri
   */
  @javax.annotation.Nullable
  public String getDataSchemaUri() {
    return dataSchemaUri;
  }

  public void setDataSchemaUri(String dataSchemaUri) {
    this.dataSchemaUri = dataSchemaUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedshiftDataSpec redshiftDataSpec = (RedshiftDataSpec) o;
    return Objects.equals(this.databaseInformation, redshiftDataSpec.databaseInformation) &&
        Objects.equals(this.selectSqlQuery, redshiftDataSpec.selectSqlQuery) &&
        Objects.equals(this.databaseCredentials, redshiftDataSpec.databaseCredentials) &&
        Objects.equals(this.s3StagingLocation, redshiftDataSpec.s3StagingLocation) &&
        Objects.equals(this.dataRearrangement, redshiftDataSpec.dataRearrangement) &&
        Objects.equals(this.dataSchema, redshiftDataSpec.dataSchema) &&
        Objects.equals(this.dataSchemaUri, redshiftDataSpec.dataSchemaUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseInformation, selectSqlQuery, databaseCredentials, s3StagingLocation, dataRearrangement, dataSchema, dataSchemaUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedshiftDataSpec {\n");
    sb.append("    databaseInformation: ").append(toIndentedString(databaseInformation)).append("\n");
    sb.append("    selectSqlQuery: ").append(toIndentedString(selectSqlQuery)).append("\n");
    sb.append("    databaseCredentials: ").append(toIndentedString(databaseCredentials)).append("\n");
    sb.append("    s3StagingLocation: ").append(toIndentedString(s3StagingLocation)).append("\n");
    sb.append("    dataRearrangement: ").append(toIndentedString(dataRearrangement)).append("\n");
    sb.append("    dataSchema: ").append(toIndentedString(dataSchema)).append("\n");
    sb.append("    dataSchemaUri: ").append(toIndentedString(dataSchemaUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DatabaseInformation");
    openapiFields.add("SelectSqlQuery");
    openapiFields.add("DatabaseCredentials");
    openapiFields.add("S3StagingLocation");
    openapiFields.add("DataRearrangement");
    openapiFields.add("DataSchema");
    openapiFields.add("DataSchemaUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DatabaseInformation");
    openapiRequiredFields.add("SelectSqlQuery");
    openapiRequiredFields.add("DatabaseCredentials");
    openapiRequiredFields.add("S3StagingLocation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RedshiftDataSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedshiftDataSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedshiftDataSpec is not found in the empty JSON string", RedshiftDataSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedshiftDataSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedshiftDataSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RedshiftDataSpec.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DatabaseInformation`
      RedshiftDataSpecDatabaseInformation.validateJsonElement(jsonObj.get("DatabaseInformation"));
      // validate the required field `SelectSqlQuery`
      String.validateJsonElement(jsonObj.get("SelectSqlQuery"));
      // validate the required field `DatabaseCredentials`
      RedshiftDataSpecDatabaseCredentials.validateJsonElement(jsonObj.get("DatabaseCredentials"));
      // validate the required field `S3StagingLocation`
      String.validateJsonElement(jsonObj.get("S3StagingLocation"));
      // validate the optional field `DataRearrangement`
      if (jsonObj.get("DataRearrangement") != null && !jsonObj.get("DataRearrangement").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataRearrangement"));
      }
      // validate the optional field `DataSchema`
      if (jsonObj.get("DataSchema") != null && !jsonObj.get("DataSchema").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataSchema"));
      }
      // validate the optional field `DataSchemaUri`
      if (jsonObj.get("DataSchemaUri") != null && !jsonObj.get("DataSchemaUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataSchemaUri"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedshiftDataSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedshiftDataSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedshiftDataSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedshiftDataSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<RedshiftDataSpec>() {
           @Override
           public void write(JsonWriter out, RedshiftDataSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedshiftDataSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RedshiftDataSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RedshiftDataSpec
   * @throws IOException if the JSON string is invalid with respect to RedshiftDataSpec
   */
  public static RedshiftDataSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedshiftDataSpec.class);
  }

  /**
   * Convert an instance of RedshiftDataSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

