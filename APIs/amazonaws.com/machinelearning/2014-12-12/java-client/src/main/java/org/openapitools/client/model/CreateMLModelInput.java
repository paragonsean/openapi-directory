/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.MLModelType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMLModelInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:53.196548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMLModelInput {
  public static final String SERIALIZED_NAME_ML_MODEL_ID = "MLModelId";
  @SerializedName(SERIALIZED_NAME_ML_MODEL_ID)
  private String mlModelId;

  public static final String SERIALIZED_NAME_ML_MODEL_NAME = "MLModelName";
  @SerializedName(SERIALIZED_NAME_ML_MODEL_NAME)
  private String mlModelName;

  public static final String SERIALIZED_NAME_ML_MODEL_TYPE = "MLModelType";
  @SerializedName(SERIALIZED_NAME_ML_MODEL_TYPE)
  private MLModelType mlModelType;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_TRAINING_DATA_SOURCE_ID = "TrainingDataSourceId";
  @SerializedName(SERIALIZED_NAME_TRAINING_DATA_SOURCE_ID)
  private String trainingDataSourceId;

  public static final String SERIALIZED_NAME_RECIPE = "Recipe";
  @SerializedName(SERIALIZED_NAME_RECIPE)
  private String recipe;

  public static final String SERIALIZED_NAME_RECIPE_URI = "RecipeUri";
  @SerializedName(SERIALIZED_NAME_RECIPE_URI)
  private String recipeUri;

  public CreateMLModelInput() {
  }

  public CreateMLModelInput mlModelId(String mlModelId) {
    this.mlModelId = mlModelId;
    return this;
  }

  /**
   * Get mlModelId
   * @return mlModelId
   */
  @javax.annotation.Nonnull
  public String getMlModelId() {
    return mlModelId;
  }

  public void setMlModelId(String mlModelId) {
    this.mlModelId = mlModelId;
  }


  public CreateMLModelInput mlModelName(String mlModelName) {
    this.mlModelName = mlModelName;
    return this;
  }

  /**
   * Get mlModelName
   * @return mlModelName
   */
  @javax.annotation.Nullable
  public String getMlModelName() {
    return mlModelName;
  }

  public void setMlModelName(String mlModelName) {
    this.mlModelName = mlModelName;
  }


  public CreateMLModelInput mlModelType(MLModelType mlModelType) {
    this.mlModelType = mlModelType;
    return this;
  }

  /**
   * Get mlModelType
   * @return mlModelType
   */
  @javax.annotation.Nonnull
  public MLModelType getMlModelType() {
    return mlModelType;
  }

  public void setMlModelType(MLModelType mlModelType) {
    this.mlModelType = mlModelType;
  }


  public CreateMLModelInput parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public CreateMLModelInput trainingDataSourceId(String trainingDataSourceId) {
    this.trainingDataSourceId = trainingDataSourceId;
    return this;
  }

  /**
   * Get trainingDataSourceId
   * @return trainingDataSourceId
   */
  @javax.annotation.Nonnull
  public String getTrainingDataSourceId() {
    return trainingDataSourceId;
  }

  public void setTrainingDataSourceId(String trainingDataSourceId) {
    this.trainingDataSourceId = trainingDataSourceId;
  }


  public CreateMLModelInput recipe(String recipe) {
    this.recipe = recipe;
    return this;
  }

  /**
   * Get recipe
   * @return recipe
   */
  @javax.annotation.Nullable
  public String getRecipe() {
    return recipe;
  }

  public void setRecipe(String recipe) {
    this.recipe = recipe;
  }


  public CreateMLModelInput recipeUri(String recipeUri) {
    this.recipeUri = recipeUri;
    return this;
  }

  /**
   * Get recipeUri
   * @return recipeUri
   */
  @javax.annotation.Nullable
  public String getRecipeUri() {
    return recipeUri;
  }

  public void setRecipeUri(String recipeUri) {
    this.recipeUri = recipeUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMLModelInput createMLModelInput = (CreateMLModelInput) o;
    return Objects.equals(this.mlModelId, createMLModelInput.mlModelId) &&
        Objects.equals(this.mlModelName, createMLModelInput.mlModelName) &&
        Objects.equals(this.mlModelType, createMLModelInput.mlModelType) &&
        Objects.equals(this.parameters, createMLModelInput.parameters) &&
        Objects.equals(this.trainingDataSourceId, createMLModelInput.trainingDataSourceId) &&
        Objects.equals(this.recipe, createMLModelInput.recipe) &&
        Objects.equals(this.recipeUri, createMLModelInput.recipeUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mlModelId, mlModelName, mlModelType, parameters, trainingDataSourceId, recipe, recipeUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMLModelInput {\n");
    sb.append("    mlModelId: ").append(toIndentedString(mlModelId)).append("\n");
    sb.append("    mlModelName: ").append(toIndentedString(mlModelName)).append("\n");
    sb.append("    mlModelType: ").append(toIndentedString(mlModelType)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    trainingDataSourceId: ").append(toIndentedString(trainingDataSourceId)).append("\n");
    sb.append("    recipe: ").append(toIndentedString(recipe)).append("\n");
    sb.append("    recipeUri: ").append(toIndentedString(recipeUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MLModelId");
    openapiFields.add("MLModelName");
    openapiFields.add("MLModelType");
    openapiFields.add("Parameters");
    openapiFields.add("TrainingDataSourceId");
    openapiFields.add("Recipe");
    openapiFields.add("RecipeUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MLModelId");
    openapiRequiredFields.add("MLModelType");
    openapiRequiredFields.add("TrainingDataSourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMLModelInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMLModelInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMLModelInput is not found in the empty JSON string", CreateMLModelInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMLModelInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMLModelInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMLModelInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `MLModelId`
      String.validateJsonElement(jsonObj.get("MLModelId"));
      // validate the optional field `MLModelName`
      if (jsonObj.get("MLModelName") != null && !jsonObj.get("MLModelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MLModelName"));
      }
      // validate the required field `MLModelType`
      MLModelType.validateJsonElement(jsonObj.get("MLModelType"));
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the required field `TrainingDataSourceId`
      String.validateJsonElement(jsonObj.get("TrainingDataSourceId"));
      // validate the optional field `Recipe`
      if (jsonObj.get("Recipe") != null && !jsonObj.get("Recipe").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Recipe"));
      }
      // validate the optional field `RecipeUri`
      if (jsonObj.get("RecipeUri") != null && !jsonObj.get("RecipeUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecipeUri"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMLModelInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMLModelInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMLModelInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMLModelInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMLModelInput>() {
           @Override
           public void write(JsonWriter out, CreateMLModelInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMLModelInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMLModelInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMLModelInput
   * @throws IOException if the JSON string is invalid with respect to CreateMLModelInput
   */
  public static CreateMLModelInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMLModelInput.class);
  }

  /**
   * Convert an instance of CreateMLModelInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

