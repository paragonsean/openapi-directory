/*
 * Amazon Machine Learning
 * Definition of the public APIs exposed by Amazon Machine Learning
 *
 * The version of the OpenAPI document: 2014-12-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EntityStatus;
import org.openapitools.client.model.RDSMetadata;
import org.openapitools.client.model.RedshiftMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt; Represents the output of the &lt;code&gt;GetDataSource&lt;/code&gt; operation. &lt;/p&gt; &lt;p&gt; The content consists of the detailed metadata and data file information and the current status of the &lt;code&gt;DataSource&lt;/code&gt;. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:53.196548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSource {
  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "DataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private String dataSourceId;

  public static final String SERIALIZED_NAME_DATA_LOCATION_S3 = "DataLocationS3";
  @SerializedName(SERIALIZED_NAME_DATA_LOCATION_S3)
  private String dataLocationS3;

  public static final String SERIALIZED_NAME_DATA_REARRANGEMENT = "DataRearrangement";
  @SerializedName(SERIALIZED_NAME_DATA_REARRANGEMENT)
  private String dataRearrangement;

  public static final String SERIALIZED_NAME_CREATED_BY_IAM_USER = "CreatedByIamUser";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_IAM_USER)
  private String createdByIamUser;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_DATA_SIZE_IN_BYTES = "DataSizeInBytes";
  @SerializedName(SERIALIZED_NAME_DATA_SIZE_IN_BYTES)
  private Integer dataSizeInBytes;

  public static final String SERIALIZED_NAME_NUMBER_OF_FILES = "NumberOfFiles";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_FILES)
  private Integer numberOfFiles;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntityStatus status;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_REDSHIFT_METADATA = "RedshiftMetadata";
  @SerializedName(SERIALIZED_NAME_REDSHIFT_METADATA)
  private RedshiftMetadata redshiftMetadata;

  public static final String SERIALIZED_NAME_RD_S_METADATA = "RDSMetadata";
  @SerializedName(SERIALIZED_NAME_RD_S_METADATA)
  private RDSMetadata rdSMetadata;

  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_COMPUTE_STATISTICS = "ComputeStatistics";
  @SerializedName(SERIALIZED_NAME_COMPUTE_STATISTICS)
  private Boolean computeStatistics;

  public static final String SERIALIZED_NAME_COMPUTE_TIME = "ComputeTime";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TIME)
  private Integer computeTime;

  public static final String SERIALIZED_NAME_FINISHED_AT = "FinishedAt";
  @SerializedName(SERIALIZED_NAME_FINISHED_AT)
  private OffsetDateTime finishedAt;

  public static final String SERIALIZED_NAME_STARTED_AT = "StartedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public DataSource() {
  }

  public DataSource dataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * Get dataSourceId
   * @return dataSourceId
   */
  @javax.annotation.Nullable
  public String getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public DataSource dataLocationS3(String dataLocationS3) {
    this.dataLocationS3 = dataLocationS3;
    return this;
  }

  /**
   * Get dataLocationS3
   * @return dataLocationS3
   */
  @javax.annotation.Nullable
  public String getDataLocationS3() {
    return dataLocationS3;
  }

  public void setDataLocationS3(String dataLocationS3) {
    this.dataLocationS3 = dataLocationS3;
  }


  public DataSource dataRearrangement(String dataRearrangement) {
    this.dataRearrangement = dataRearrangement;
    return this;
  }

  /**
   * Get dataRearrangement
   * @return dataRearrangement
   */
  @javax.annotation.Nullable
  public String getDataRearrangement() {
    return dataRearrangement;
  }

  public void setDataRearrangement(String dataRearrangement) {
    this.dataRearrangement = dataRearrangement;
  }


  public DataSource createdByIamUser(String createdByIamUser) {
    this.createdByIamUser = createdByIamUser;
    return this;
  }

  /**
   * Get createdByIamUser
   * @return createdByIamUser
   */
  @javax.annotation.Nullable
  public String getCreatedByIamUser() {
    return createdByIamUser;
  }

  public void setCreatedByIamUser(String createdByIamUser) {
    this.createdByIamUser = createdByIamUser;
  }


  public DataSource createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DataSource lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public DataSource dataSizeInBytes(Integer dataSizeInBytes) {
    this.dataSizeInBytes = dataSizeInBytes;
    return this;
  }

  /**
   * Get dataSizeInBytes
   * @return dataSizeInBytes
   */
  @javax.annotation.Nullable
  public Integer getDataSizeInBytes() {
    return dataSizeInBytes;
  }

  public void setDataSizeInBytes(Integer dataSizeInBytes) {
    this.dataSizeInBytes = dataSizeInBytes;
  }


  public DataSource numberOfFiles(Integer numberOfFiles) {
    this.numberOfFiles = numberOfFiles;
    return this;
  }

  /**
   * Get numberOfFiles
   * @return numberOfFiles
   */
  @javax.annotation.Nullable
  public Integer getNumberOfFiles() {
    return numberOfFiles;
  }

  public void setNumberOfFiles(Integer numberOfFiles) {
    this.numberOfFiles = numberOfFiles;
  }


  public DataSource name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DataSource status(EntityStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntityStatus getStatus() {
    return status;
  }

  public void setStatus(EntityStatus status) {
    this.status = status;
  }


  public DataSource message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DataSource redshiftMetadata(RedshiftMetadata redshiftMetadata) {
    this.redshiftMetadata = redshiftMetadata;
    return this;
  }

  /**
   * Get redshiftMetadata
   * @return redshiftMetadata
   */
  @javax.annotation.Nullable
  public RedshiftMetadata getRedshiftMetadata() {
    return redshiftMetadata;
  }

  public void setRedshiftMetadata(RedshiftMetadata redshiftMetadata) {
    this.redshiftMetadata = redshiftMetadata;
  }


  public DataSource rdSMetadata(RDSMetadata rdSMetadata) {
    this.rdSMetadata = rdSMetadata;
    return this;
  }

  /**
   * Get rdSMetadata
   * @return rdSMetadata
   */
  @javax.annotation.Nullable
  public RDSMetadata getRdSMetadata() {
    return rdSMetadata;
  }

  public void setRdSMetadata(RDSMetadata rdSMetadata) {
    this.rdSMetadata = rdSMetadata;
  }


  public DataSource roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of an &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts\&quot;&gt;AWS IAM Role&lt;/a&gt;, such as the following: arn:aws:iam::account:role/rolename. 
   * @return roleARN
   */
  @javax.annotation.Nullable
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public DataSource computeStatistics(Boolean computeStatistics) {
    this.computeStatistics = computeStatistics;
    return this;
  }

  /**
   * Get computeStatistics
   * @return computeStatistics
   */
  @javax.annotation.Nullable
  public Boolean getComputeStatistics() {
    return computeStatistics;
  }

  public void setComputeStatistics(Boolean computeStatistics) {
    this.computeStatistics = computeStatistics;
  }


  public DataSource computeTime(Integer computeTime) {
    this.computeTime = computeTime;
    return this;
  }

  /**
   * Long integer type that is a 64-bit signed number.
   * @return computeTime
   */
  @javax.annotation.Nullable
  public Integer getComputeTime() {
    return computeTime;
  }

  public void setComputeTime(Integer computeTime) {
    this.computeTime = computeTime;
  }


  public DataSource finishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

  /**
   * A timestamp represented in epoch time.
   * @return finishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }

  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }


  public DataSource startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * A timestamp represented in epoch time.
   * @return startedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSource dataSource = (DataSource) o;
    return Objects.equals(this.dataSourceId, dataSource.dataSourceId) &&
        Objects.equals(this.dataLocationS3, dataSource.dataLocationS3) &&
        Objects.equals(this.dataRearrangement, dataSource.dataRearrangement) &&
        Objects.equals(this.createdByIamUser, dataSource.createdByIamUser) &&
        Objects.equals(this.createdAt, dataSource.createdAt) &&
        Objects.equals(this.lastUpdatedAt, dataSource.lastUpdatedAt) &&
        Objects.equals(this.dataSizeInBytes, dataSource.dataSizeInBytes) &&
        Objects.equals(this.numberOfFiles, dataSource.numberOfFiles) &&
        Objects.equals(this.name, dataSource.name) &&
        Objects.equals(this.status, dataSource.status) &&
        Objects.equals(this.message, dataSource.message) &&
        Objects.equals(this.redshiftMetadata, dataSource.redshiftMetadata) &&
        Objects.equals(this.rdSMetadata, dataSource.rdSMetadata) &&
        Objects.equals(this.roleARN, dataSource.roleARN) &&
        Objects.equals(this.computeStatistics, dataSource.computeStatistics) &&
        Objects.equals(this.computeTime, dataSource.computeTime) &&
        Objects.equals(this.finishedAt, dataSource.finishedAt) &&
        Objects.equals(this.startedAt, dataSource.startedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceId, dataLocationS3, dataRearrangement, createdByIamUser, createdAt, lastUpdatedAt, dataSizeInBytes, numberOfFiles, name, status, message, redshiftMetadata, rdSMetadata, roleARN, computeStatistics, computeTime, finishedAt, startedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSource {\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    dataLocationS3: ").append(toIndentedString(dataLocationS3)).append("\n");
    sb.append("    dataRearrangement: ").append(toIndentedString(dataRearrangement)).append("\n");
    sb.append("    createdByIamUser: ").append(toIndentedString(createdByIamUser)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    dataSizeInBytes: ").append(toIndentedString(dataSizeInBytes)).append("\n");
    sb.append("    numberOfFiles: ").append(toIndentedString(numberOfFiles)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    redshiftMetadata: ").append(toIndentedString(redshiftMetadata)).append("\n");
    sb.append("    rdSMetadata: ").append(toIndentedString(rdSMetadata)).append("\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    computeStatistics: ").append(toIndentedString(computeStatistics)).append("\n");
    sb.append("    computeTime: ").append(toIndentedString(computeTime)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataSourceId");
    openapiFields.add("DataLocationS3");
    openapiFields.add("DataRearrangement");
    openapiFields.add("CreatedByIamUser");
    openapiFields.add("CreatedAt");
    openapiFields.add("LastUpdatedAt");
    openapiFields.add("DataSizeInBytes");
    openapiFields.add("NumberOfFiles");
    openapiFields.add("Name");
    openapiFields.add("Status");
    openapiFields.add("Message");
    openapiFields.add("RedshiftMetadata");
    openapiFields.add("RDSMetadata");
    openapiFields.add("RoleARN");
    openapiFields.add("ComputeStatistics");
    openapiFields.add("ComputeTime");
    openapiFields.add("FinishedAt");
    openapiFields.add("StartedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSource is not found in the empty JSON string", DataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DataSourceId`
      if (jsonObj.get("DataSourceId") != null && !jsonObj.get("DataSourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataSourceId"));
      }
      // validate the optional field `DataLocationS3`
      if (jsonObj.get("DataLocationS3") != null && !jsonObj.get("DataLocationS3").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataLocationS3"));
      }
      // validate the optional field `DataRearrangement`
      if (jsonObj.get("DataRearrangement") != null && !jsonObj.get("DataRearrangement").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataRearrangement"));
      }
      // validate the optional field `CreatedByIamUser`
      if (jsonObj.get("CreatedByIamUser") != null && !jsonObj.get("CreatedByIamUser").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatedByIamUser"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `LastUpdatedAt`
      if (jsonObj.get("LastUpdatedAt") != null && !jsonObj.get("LastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
      }
      // validate the optional field `DataSizeInBytes`
      if (jsonObj.get("DataSizeInBytes") != null && !jsonObj.get("DataSizeInBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DataSizeInBytes"));
      }
      // validate the optional field `NumberOfFiles`
      if (jsonObj.get("NumberOfFiles") != null && !jsonObj.get("NumberOfFiles").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfFiles"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        EntityStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
      // validate the optional field `RedshiftMetadata`
      if (jsonObj.get("RedshiftMetadata") != null && !jsonObj.get("RedshiftMetadata").isJsonNull()) {
        RedshiftMetadata.validateJsonElement(jsonObj.get("RedshiftMetadata"));
      }
      // validate the optional field `RDSMetadata`
      if (jsonObj.get("RDSMetadata") != null && !jsonObj.get("RDSMetadata").isJsonNull()) {
        RDSMetadata.validateJsonElement(jsonObj.get("RDSMetadata"));
      }
      if ((jsonObj.get("RoleARN") != null && !jsonObj.get("RoleARN").isJsonNull()) && !jsonObj.get("RoleARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleARN").toString()));
      }
      // validate the optional field `ComputeStatistics`
      if (jsonObj.get("ComputeStatistics") != null && !jsonObj.get("ComputeStatistics").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ComputeStatistics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSource>() {
           @Override
           public void write(JsonWriter out, DataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSource
   * @throws IOException if the JSON string is invalid with respect to DataSource
   */
  public static DataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSource.class);
  }

  /**
   * Convert an instance of DataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

