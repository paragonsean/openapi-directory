# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutMetadataFlagRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_value: str=None):
        """PutMetadataFlagRequestBody - a model defined in OpenAPI

        :param new_value: The new_value of this PutMetadataFlagRequestBody.
        """
        self.openapi_types = {
            'new_value': str
        }

        self.attribute_map = {
            'new_value': 'newValue'
        }

        self._new_value = new_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutMetadataFlagRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutMetadataFlagRequest_body of this PutMetadataFlagRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_value(self):
        """Gets the new_value of this PutMetadataFlagRequestBody.


        :return: The new_value of this PutMetadataFlagRequestBody.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this PutMetadataFlagRequestBody.


        :param new_value: The new_value of this PutMetadataFlagRequestBody.
        :type new_value: str
        """
        if new_value is None:
            raise ValueError("Invalid value for `new_value`, must not be `None`")

        self._new_value = new_value
