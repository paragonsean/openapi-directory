# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_data_configuration_predicate import ComponentDataConfigurationPredicate
from openapi_server import util


class ComponentDataConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model: str=None, sort: List=None, predicate: ComponentDataConfigurationPredicate=None, identifiers: List=None):
        """ComponentDataConfiguration - a model defined in OpenAPI

        :param model: The model of this ComponentDataConfiguration.
        :param sort: The sort of this ComponentDataConfiguration.
        :param predicate: The predicate of this ComponentDataConfiguration.
        :param identifiers: The identifiers of this ComponentDataConfiguration.
        """
        self.openapi_types = {
            'model': str,
            'sort': List,
            'predicate': ComponentDataConfigurationPredicate,
            'identifiers': List
        }

        self.attribute_map = {
            'model': 'model',
            'sort': 'sort',
            'predicate': 'predicate',
            'identifiers': 'identifiers'
        }

        self._model = model
        self._sort = sort
        self._predicate = predicate
        self._identifiers = identifiers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentDataConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentDataConfiguration of this ComponentDataConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self):
        """Gets the model of this ComponentDataConfiguration.


        :return: The model of this ComponentDataConfiguration.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ComponentDataConfiguration.


        :param model: The model of this ComponentDataConfiguration.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def sort(self):
        """Gets the sort of this ComponentDataConfiguration.


        :return: The sort of this ComponentDataConfiguration.
        :rtype: List
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ComponentDataConfiguration.


        :param sort: The sort of this ComponentDataConfiguration.
        :type sort: List
        """

        self._sort = sort

    @property
    def predicate(self):
        """Gets the predicate of this ComponentDataConfiguration.


        :return: The predicate of this ComponentDataConfiguration.
        :rtype: ComponentDataConfigurationPredicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """Sets the predicate of this ComponentDataConfiguration.


        :param predicate: The predicate of this ComponentDataConfiguration.
        :type predicate: ComponentDataConfigurationPredicate
        """

        self._predicate = predicate

    @property
    def identifiers(self):
        """Gets the identifiers of this ComponentDataConfiguration.


        :return: The identifiers of this ComponentDataConfiguration.
        :rtype: List
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this ComponentDataConfiguration.


        :param identifiers: The identifiers of this ComponentDataConfiguration.
        :type identifiers: List
        """

        self._identifiers = identifiers
