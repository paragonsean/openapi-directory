# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.codegen_job_generic_data_source_type import CodegenJobGenericDataSourceType
from openapi_server import util


class CodegenJobGenericDataSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_type: CodegenJobGenericDataSourceType=None, models: Dict=None, enums: Dict=None, non_models: Dict=None):
        """CodegenJobGenericDataSchema - a model defined in OpenAPI

        :param data_source_type: The data_source_type of this CodegenJobGenericDataSchema.
        :param models: The models of this CodegenJobGenericDataSchema.
        :param enums: The enums of this CodegenJobGenericDataSchema.
        :param non_models: The non_models of this CodegenJobGenericDataSchema.
        """
        self.openapi_types = {
            'data_source_type': CodegenJobGenericDataSourceType,
            'models': Dict,
            'enums': Dict,
            'non_models': Dict
        }

        self.attribute_map = {
            'data_source_type': 'dataSourceType',
            'models': 'models',
            'enums': 'enums',
            'non_models': 'nonModels'
        }

        self._data_source_type = data_source_type
        self._models = models
        self._enums = enums
        self._non_models = non_models

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodegenJobGenericDataSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodegenJobGenericDataSchema of this CodegenJobGenericDataSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_type(self):
        """Gets the data_source_type of this CodegenJobGenericDataSchema.


        :return: The data_source_type of this CodegenJobGenericDataSchema.
        :rtype: CodegenJobGenericDataSourceType
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """Sets the data_source_type of this CodegenJobGenericDataSchema.


        :param data_source_type: The data_source_type of this CodegenJobGenericDataSchema.
        :type data_source_type: CodegenJobGenericDataSourceType
        """
        if data_source_type is None:
            raise ValueError("Invalid value for `data_source_type`, must not be `None`")

        self._data_source_type = data_source_type

    @property
    def models(self):
        """Gets the models of this CodegenJobGenericDataSchema.


        :return: The models of this CodegenJobGenericDataSchema.
        :rtype: Dict
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this CodegenJobGenericDataSchema.


        :param models: The models of this CodegenJobGenericDataSchema.
        :type models: Dict
        """
        if models is None:
            raise ValueError("Invalid value for `models`, must not be `None`")

        self._models = models

    @property
    def enums(self):
        """Gets the enums of this CodegenJobGenericDataSchema.


        :return: The enums of this CodegenJobGenericDataSchema.
        :rtype: Dict
        """
        return self._enums

    @enums.setter
    def enums(self, enums):
        """Sets the enums of this CodegenJobGenericDataSchema.


        :param enums: The enums of this CodegenJobGenericDataSchema.
        :type enums: Dict
        """
        if enums is None:
            raise ValueError("Invalid value for `enums`, must not be `None`")

        self._enums = enums

    @property
    def non_models(self):
        """Gets the non_models of this CodegenJobGenericDataSchema.


        :return: The non_models of this CodegenJobGenericDataSchema.
        :rtype: Dict
        """
        return self._non_models

    @non_models.setter
    def non_models(self, non_models):
        """Sets the non_models of this CodegenJobGenericDataSchema.


        :param non_models: The non_models of this CodegenJobGenericDataSchema.
        :type non_models: Dict
        """
        if non_models is None:
            raise ValueError("Invalid value for `non_models`, must not be `None`")

        self._non_models = non_models
