# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mutation_action_set_state_parameter_set import MutationActionSetStateParameterSet
from openapi_server import util


class MutationActionSetStateParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_name: str=None, _property: str=None, set: MutationActionSetStateParameterSet=None):
        """MutationActionSetStateParameter - a model defined in OpenAPI

        :param component_name: The component_name of this MutationActionSetStateParameter.
        :param _property: The _property of this MutationActionSetStateParameter.
        :param set: The set of this MutationActionSetStateParameter.
        """
        self.openapi_types = {
            'component_name': str,
            '_property': str,
            'set': MutationActionSetStateParameterSet
        }

        self.attribute_map = {
            'component_name': 'componentName',
            '_property': 'property',
            'set': 'set'
        }

        self._component_name = component_name
        self.__property = _property
        self._set = set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MutationActionSetStateParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MutationActionSetStateParameter of this MutationActionSetStateParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_name(self):
        """Gets the component_name of this MutationActionSetStateParameter.


        :return: The component_name of this MutationActionSetStateParameter.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this MutationActionSetStateParameter.


        :param component_name: The component_name of this MutationActionSetStateParameter.
        :type component_name: str
        """
        if component_name is None:
            raise ValueError("Invalid value for `component_name`, must not be `None`")

        self._component_name = component_name

    @property
    def _property(self):
        """Gets the _property of this MutationActionSetStateParameter.


        :return: The _property of this MutationActionSetStateParameter.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this MutationActionSetStateParameter.


        :param _property: The _property of this MutationActionSetStateParameter.
        :type _property: str
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")

        self.__property = _property

    @property
    def set(self):
        """Gets the set of this MutationActionSetStateParameter.


        :return: The set of this MutationActionSetStateParameter.
        :rtype: MutationActionSetStateParameterSet
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this MutationActionSetStateParameter.


        :param set: The set of this MutationActionSetStateParameter.
        :type set: MutationActionSetStateParameterSet
        """
        if set is None:
            raise ValueError("Invalid value for `set`, must not be `None`")

        self._set = set
