# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_parameters_anchor import ActionParametersAnchor
from openapi_server.models.action_parameters_global import ActionParametersGlobal
from openapi_server.models.action_parameters_id import ActionParametersId
from openapi_server.models.action_parameters_state import ActionParametersState
from openapi_server.models.action_parameters_target import ActionParametersTarget
from openapi_server.models.action_parameters_type import ActionParametersType
from openapi_server.models.action_parameters_url import ActionParametersUrl
from openapi_server import util


class ActionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ActionParametersType=None, url: ActionParametersUrl=None, anchor: ActionParametersAnchor=None, target: ActionParametersTarget=None, _global: ActionParametersGlobal=None, model: str=None, id: ActionParametersId=None, fields: Dict=None, state: ActionParametersState=None):
        """ActionParameters - a model defined in OpenAPI

        :param type: The type of this ActionParameters.
        :param url: The url of this ActionParameters.
        :param anchor: The anchor of this ActionParameters.
        :param target: The target of this ActionParameters.
        :param _global: The _global of this ActionParameters.
        :param model: The model of this ActionParameters.
        :param id: The id of this ActionParameters.
        :param fields: The fields of this ActionParameters.
        :param state: The state of this ActionParameters.
        """
        self.openapi_types = {
            'type': ActionParametersType,
            'url': ActionParametersUrl,
            'anchor': ActionParametersAnchor,
            'target': ActionParametersTarget,
            '_global': ActionParametersGlobal,
            'model': str,
            'id': ActionParametersId,
            'fields': Dict,
            'state': ActionParametersState
        }

        self.attribute_map = {
            'type': 'type',
            'url': 'url',
            'anchor': 'anchor',
            'target': 'target',
            '_global': 'global',
            'model': 'model',
            'id': 'id',
            'fields': 'fields',
            'state': 'state'
        }

        self._type = type
        self._url = url
        self._anchor = anchor
        self._target = target
        self.__global = _global
        self._model = model
        self._id = id
        self._fields = fields
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionParameters of this ActionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ActionParameters.


        :return: The type of this ActionParameters.
        :rtype: ActionParametersType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActionParameters.


        :param type: The type of this ActionParameters.
        :type type: ActionParametersType
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this ActionParameters.


        :return: The url of this ActionParameters.
        :rtype: ActionParametersUrl
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ActionParameters.


        :param url: The url of this ActionParameters.
        :type url: ActionParametersUrl
        """

        self._url = url

    @property
    def anchor(self):
        """Gets the anchor of this ActionParameters.


        :return: The anchor of this ActionParameters.
        :rtype: ActionParametersAnchor
        """
        return self._anchor

    @anchor.setter
    def anchor(self, anchor):
        """Sets the anchor of this ActionParameters.


        :param anchor: The anchor of this ActionParameters.
        :type anchor: ActionParametersAnchor
        """

        self._anchor = anchor

    @property
    def target(self):
        """Gets the target of this ActionParameters.


        :return: The target of this ActionParameters.
        :rtype: ActionParametersTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ActionParameters.


        :param target: The target of this ActionParameters.
        :type target: ActionParametersTarget
        """

        self._target = target

    @property
    def _global(self):
        """Gets the _global of this ActionParameters.


        :return: The _global of this ActionParameters.
        :rtype: ActionParametersGlobal
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this ActionParameters.


        :param _global: The _global of this ActionParameters.
        :type _global: ActionParametersGlobal
        """

        self.__global = _global

    @property
    def model(self):
        """Gets the model of this ActionParameters.


        :return: The model of this ActionParameters.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ActionParameters.


        :param model: The model of this ActionParameters.
        :type model: str
        """

        self._model = model

    @property
    def id(self):
        """Gets the id of this ActionParameters.


        :return: The id of this ActionParameters.
        :rtype: ActionParametersId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionParameters.


        :param id: The id of this ActionParameters.
        :type id: ActionParametersId
        """

        self._id = id

    @property
    def fields(self):
        """Gets the fields of this ActionParameters.


        :return: The fields of this ActionParameters.
        :rtype: Dict
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ActionParameters.


        :param fields: The fields of this ActionParameters.
        :type fields: Dict
        """

        self._fields = fields

    @property
    def state(self):
        """Gets the state of this ActionParameters.


        :return: The state of this ActionParameters.
        :rtype: ActionParametersState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ActionParameters.


        :param state: The state of this ActionParameters.
        :type state: ActionParametersState
        """

        self._state = state
