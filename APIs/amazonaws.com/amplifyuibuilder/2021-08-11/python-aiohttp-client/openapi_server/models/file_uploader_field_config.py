# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_access_level import StorageAccessLevel
from openapi_server import util


class FileUploaderFieldConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_level: StorageAccessLevel=None, accepted_file_types: List=None, show_thumbnails: bool=None, is_resumable: bool=None, max_file_count: int=None, max_size: int=None):
        """FileUploaderFieldConfig - a model defined in OpenAPI

        :param access_level: The access_level of this FileUploaderFieldConfig.
        :param accepted_file_types: The accepted_file_types of this FileUploaderFieldConfig.
        :param show_thumbnails: The show_thumbnails of this FileUploaderFieldConfig.
        :param is_resumable: The is_resumable of this FileUploaderFieldConfig.
        :param max_file_count: The max_file_count of this FileUploaderFieldConfig.
        :param max_size: The max_size of this FileUploaderFieldConfig.
        """
        self.openapi_types = {
            'access_level': StorageAccessLevel,
            'accepted_file_types': List,
            'show_thumbnails': bool,
            'is_resumable': bool,
            'max_file_count': int,
            'max_size': int
        }

        self.attribute_map = {
            'access_level': 'accessLevel',
            'accepted_file_types': 'acceptedFileTypes',
            'show_thumbnails': 'showThumbnails',
            'is_resumable': 'isResumable',
            'max_file_count': 'maxFileCount',
            'max_size': 'maxSize'
        }

        self._access_level = access_level
        self._accepted_file_types = accepted_file_types
        self._show_thumbnails = show_thumbnails
        self._is_resumable = is_resumable
        self._max_file_count = max_file_count
        self._max_size = max_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileUploaderFieldConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileUploaderFieldConfig of this FileUploaderFieldConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_level(self):
        """Gets the access_level of this FileUploaderFieldConfig.


        :return: The access_level of this FileUploaderFieldConfig.
        :rtype: StorageAccessLevel
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this FileUploaderFieldConfig.


        :param access_level: The access_level of this FileUploaderFieldConfig.
        :type access_level: StorageAccessLevel
        """
        if access_level is None:
            raise ValueError("Invalid value for `access_level`, must not be `None`")

        self._access_level = access_level

    @property
    def accepted_file_types(self):
        """Gets the accepted_file_types of this FileUploaderFieldConfig.


        :return: The accepted_file_types of this FileUploaderFieldConfig.
        :rtype: List
        """
        return self._accepted_file_types

    @accepted_file_types.setter
    def accepted_file_types(self, accepted_file_types):
        """Sets the accepted_file_types of this FileUploaderFieldConfig.


        :param accepted_file_types: The accepted_file_types of this FileUploaderFieldConfig.
        :type accepted_file_types: List
        """
        if accepted_file_types is None:
            raise ValueError("Invalid value for `accepted_file_types`, must not be `None`")

        self._accepted_file_types = accepted_file_types

    @property
    def show_thumbnails(self):
        """Gets the show_thumbnails of this FileUploaderFieldConfig.


        :return: The show_thumbnails of this FileUploaderFieldConfig.
        :rtype: bool
        """
        return self._show_thumbnails

    @show_thumbnails.setter
    def show_thumbnails(self, show_thumbnails):
        """Sets the show_thumbnails of this FileUploaderFieldConfig.


        :param show_thumbnails: The show_thumbnails of this FileUploaderFieldConfig.
        :type show_thumbnails: bool
        """

        self._show_thumbnails = show_thumbnails

    @property
    def is_resumable(self):
        """Gets the is_resumable of this FileUploaderFieldConfig.


        :return: The is_resumable of this FileUploaderFieldConfig.
        :rtype: bool
        """
        return self._is_resumable

    @is_resumable.setter
    def is_resumable(self, is_resumable):
        """Sets the is_resumable of this FileUploaderFieldConfig.


        :param is_resumable: The is_resumable of this FileUploaderFieldConfig.
        :type is_resumable: bool
        """

        self._is_resumable = is_resumable

    @property
    def max_file_count(self):
        """Gets the max_file_count of this FileUploaderFieldConfig.


        :return: The max_file_count of this FileUploaderFieldConfig.
        :rtype: int
        """
        return self._max_file_count

    @max_file_count.setter
    def max_file_count(self, max_file_count):
        """Sets the max_file_count of this FileUploaderFieldConfig.


        :param max_file_count: The max_file_count of this FileUploaderFieldConfig.
        :type max_file_count: int
        """

        self._max_file_count = max_file_count

    @property
    def max_size(self):
        """Gets the max_size of this FileUploaderFieldConfig.


        :return: The max_size of this FileUploaderFieldConfig.
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this FileUploaderFieldConfig.


        :param max_size: The max_size of this FileUploaderFieldConfig.
        :type max_size: int
        """

        self._max_size = max_size
