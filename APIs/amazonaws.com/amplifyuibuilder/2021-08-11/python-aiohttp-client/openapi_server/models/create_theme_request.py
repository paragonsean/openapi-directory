# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_theme_request_theme_to_create import CreateThemeRequestThemeToCreate
from openapi_server import util


class CreateThemeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, theme_to_create: CreateThemeRequestThemeToCreate=None):
        """CreateThemeRequest - a model defined in OpenAPI

        :param theme_to_create: The theme_to_create of this CreateThemeRequest.
        """
        self.openapi_types = {
            'theme_to_create': CreateThemeRequestThemeToCreate
        }

        self.attribute_map = {
            'theme_to_create': 'themeToCreate'
        }

        self._theme_to_create = theme_to_create

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateThemeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTheme_request of this CreateThemeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def theme_to_create(self):
        """Gets the theme_to_create of this CreateThemeRequest.


        :return: The theme_to_create of this CreateThemeRequest.
        :rtype: CreateThemeRequestThemeToCreate
        """
        return self._theme_to_create

    @theme_to_create.setter
    def theme_to_create(self, theme_to_create):
        """Sets the theme_to_create of this CreateThemeRequest.


        :param theme_to_create: The theme_to_create of this CreateThemeRequest.
        :type theme_to_create: CreateThemeRequestThemeToCreate
        """
        if theme_to_create is None:
            raise ValueError("Invalid value for `theme_to_create`, must not be `None`")

        self._theme_to_create = theme_to_create
