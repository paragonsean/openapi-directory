# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_condition_property_else import ComponentConditionPropertyElse
from openapi_server.models.component_condition_property_then import ComponentConditionPropertyThen
from openapi_server import util


class ComponentPropertyCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _property: str=None, _field: str=None, operator: str=None, operand: str=None, then: ComponentConditionPropertyThen=None, _else: ComponentConditionPropertyElse=None, operand_type: str=None):
        """ComponentPropertyCondition - a model defined in OpenAPI

        :param _property: The _property of this ComponentPropertyCondition.
        :param _field: The _field of this ComponentPropertyCondition.
        :param operator: The operator of this ComponentPropertyCondition.
        :param operand: The operand of this ComponentPropertyCondition.
        :param then: The then of this ComponentPropertyCondition.
        :param _else: The _else of this ComponentPropertyCondition.
        :param operand_type: The operand_type of this ComponentPropertyCondition.
        """
        self.openapi_types = {
            '_property': str,
            '_field': str,
            'operator': str,
            'operand': str,
            'then': ComponentConditionPropertyThen,
            '_else': ComponentConditionPropertyElse,
            'operand_type': str
        }

        self.attribute_map = {
            '_property': 'property',
            '_field': 'field',
            'operator': 'operator',
            'operand': 'operand',
            'then': 'then',
            '_else': 'else',
            'operand_type': 'operandType'
        }

        self.__property = _property
        self.__field = _field
        self._operator = operator
        self._operand = operand
        self._then = then
        self.__else = _else
        self._operand_type = operand_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentPropertyCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentProperty_condition of this ComponentPropertyCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _property(self):
        """Gets the _property of this ComponentPropertyCondition.


        :return: The _property of this ComponentPropertyCondition.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this ComponentPropertyCondition.


        :param _property: The _property of this ComponentPropertyCondition.
        :type _property: str
        """

        self.__property = _property

    @property
    def _field(self):
        """Gets the _field of this ComponentPropertyCondition.


        :return: The _field of this ComponentPropertyCondition.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this ComponentPropertyCondition.


        :param _field: The _field of this ComponentPropertyCondition.
        :type _field: str
        """

        self.__field = _field

    @property
    def operator(self):
        """Gets the operator of this ComponentPropertyCondition.


        :return: The operator of this ComponentPropertyCondition.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this ComponentPropertyCondition.


        :param operator: The operator of this ComponentPropertyCondition.
        :type operator: str
        """

        self._operator = operator

    @property
    def operand(self):
        """Gets the operand of this ComponentPropertyCondition.


        :return: The operand of this ComponentPropertyCondition.
        :rtype: str
        """
        return self._operand

    @operand.setter
    def operand(self, operand):
        """Sets the operand of this ComponentPropertyCondition.


        :param operand: The operand of this ComponentPropertyCondition.
        :type operand: str
        """

        self._operand = operand

    @property
    def then(self):
        """Gets the then of this ComponentPropertyCondition.


        :return: The then of this ComponentPropertyCondition.
        :rtype: ComponentConditionPropertyThen
        """
        return self._then

    @then.setter
    def then(self, then):
        """Sets the then of this ComponentPropertyCondition.


        :param then: The then of this ComponentPropertyCondition.
        :type then: ComponentConditionPropertyThen
        """

        self._then = then

    @property
    def _else(self):
        """Gets the _else of this ComponentPropertyCondition.


        :return: The _else of this ComponentPropertyCondition.
        :rtype: ComponentConditionPropertyElse
        """
        return self.__else

    @_else.setter
    def _else(self, _else):
        """Sets the _else of this ComponentPropertyCondition.


        :param _else: The _else of this ComponentPropertyCondition.
        :type _else: ComponentConditionPropertyElse
        """

        self.__else = _else

    @property
    def operand_type(self):
        """Gets the operand_type of this ComponentPropertyCondition.


        :return: The operand_type of this ComponentPropertyCondition.
        :rtype: str
        """
        return self._operand_type

    @operand_type.setter
    def operand_type(self, operand_type):
        """Sets the operand_type of this ComponentPropertyCondition.


        :param operand_type: The operand_type of this ComponentPropertyCondition.
        :type operand_type: str
        """

        self._operand_type = operand_type
