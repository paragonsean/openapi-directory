# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_property_binding_properties import ComponentPropertyBindingProperties
from openapi_server.models.component_property_collection_binding_properties import ComponentPropertyCollectionBindingProperties
from openapi_server.models.component_property_condition import ComponentPropertyCondition
from openapi_server import util


class ActionParametersId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: str=None, binding_properties: ComponentPropertyBindingProperties=None, collection_binding_properties: ComponentPropertyCollectionBindingProperties=None, default_value: str=None, model: str=None, bindings: Dict=None, event: str=None, user_attribute: str=None, concat: List=None, condition: ComponentPropertyCondition=None, configured: bool=None, type: str=None, imported_value: str=None, component_name: str=None, _property: str=None):
        """ActionParametersId - a model defined in OpenAPI

        :param value: The value of this ActionParametersId.
        :param binding_properties: The binding_properties of this ActionParametersId.
        :param collection_binding_properties: The collection_binding_properties of this ActionParametersId.
        :param default_value: The default_value of this ActionParametersId.
        :param model: The model of this ActionParametersId.
        :param bindings: The bindings of this ActionParametersId.
        :param event: The event of this ActionParametersId.
        :param user_attribute: The user_attribute of this ActionParametersId.
        :param concat: The concat of this ActionParametersId.
        :param condition: The condition of this ActionParametersId.
        :param configured: The configured of this ActionParametersId.
        :param type: The type of this ActionParametersId.
        :param imported_value: The imported_value of this ActionParametersId.
        :param component_name: The component_name of this ActionParametersId.
        :param _property: The _property of this ActionParametersId.
        """
        self.openapi_types = {
            'value': str,
            'binding_properties': ComponentPropertyBindingProperties,
            'collection_binding_properties': ComponentPropertyCollectionBindingProperties,
            'default_value': str,
            'model': str,
            'bindings': Dict,
            'event': str,
            'user_attribute': str,
            'concat': List,
            'condition': ComponentPropertyCondition,
            'configured': bool,
            'type': str,
            'imported_value': str,
            'component_name': str,
            '_property': str
        }

        self.attribute_map = {
            'value': 'value',
            'binding_properties': 'bindingProperties',
            'collection_binding_properties': 'collectionBindingProperties',
            'default_value': 'defaultValue',
            'model': 'model',
            'bindings': 'bindings',
            'event': 'event',
            'user_attribute': 'userAttribute',
            'concat': 'concat',
            'condition': 'condition',
            'configured': 'configured',
            'type': 'type',
            'imported_value': 'importedValue',
            'component_name': 'componentName',
            '_property': 'property'
        }

        self._value = value
        self._binding_properties = binding_properties
        self._collection_binding_properties = collection_binding_properties
        self._default_value = default_value
        self._model = model
        self._bindings = bindings
        self._event = event
        self._user_attribute = user_attribute
        self._concat = concat
        self._condition = condition
        self._configured = configured
        self._type = type
        self._imported_value = imported_value
        self._component_name = component_name
        self.__property = _property

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionParametersId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionParameters_id of this ActionParametersId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this ActionParametersId.


        :return: The value of this ActionParametersId.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ActionParametersId.


        :param value: The value of this ActionParametersId.
        :type value: str
        """

        self._value = value

    @property
    def binding_properties(self):
        """Gets the binding_properties of this ActionParametersId.


        :return: The binding_properties of this ActionParametersId.
        :rtype: ComponentPropertyBindingProperties
        """
        return self._binding_properties

    @binding_properties.setter
    def binding_properties(self, binding_properties):
        """Sets the binding_properties of this ActionParametersId.


        :param binding_properties: The binding_properties of this ActionParametersId.
        :type binding_properties: ComponentPropertyBindingProperties
        """

        self._binding_properties = binding_properties

    @property
    def collection_binding_properties(self):
        """Gets the collection_binding_properties of this ActionParametersId.


        :return: The collection_binding_properties of this ActionParametersId.
        :rtype: ComponentPropertyCollectionBindingProperties
        """
        return self._collection_binding_properties

    @collection_binding_properties.setter
    def collection_binding_properties(self, collection_binding_properties):
        """Sets the collection_binding_properties of this ActionParametersId.


        :param collection_binding_properties: The collection_binding_properties of this ActionParametersId.
        :type collection_binding_properties: ComponentPropertyCollectionBindingProperties
        """

        self._collection_binding_properties = collection_binding_properties

    @property
    def default_value(self):
        """Gets the default_value of this ActionParametersId.


        :return: The default_value of this ActionParametersId.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ActionParametersId.


        :param default_value: The default_value of this ActionParametersId.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def model(self):
        """Gets the model of this ActionParametersId.


        :return: The model of this ActionParametersId.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ActionParametersId.


        :param model: The model of this ActionParametersId.
        :type model: str
        """

        self._model = model

    @property
    def bindings(self):
        """Gets the bindings of this ActionParametersId.


        :return: The bindings of this ActionParametersId.
        :rtype: Dict
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this ActionParametersId.


        :param bindings: The bindings of this ActionParametersId.
        :type bindings: Dict
        """

        self._bindings = bindings

    @property
    def event(self):
        """Gets the event of this ActionParametersId.


        :return: The event of this ActionParametersId.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ActionParametersId.


        :param event: The event of this ActionParametersId.
        :type event: str
        """

        self._event = event

    @property
    def user_attribute(self):
        """Gets the user_attribute of this ActionParametersId.


        :return: The user_attribute of this ActionParametersId.
        :rtype: str
        """
        return self._user_attribute

    @user_attribute.setter
    def user_attribute(self, user_attribute):
        """Sets the user_attribute of this ActionParametersId.


        :param user_attribute: The user_attribute of this ActionParametersId.
        :type user_attribute: str
        """

        self._user_attribute = user_attribute

    @property
    def concat(self):
        """Gets the concat of this ActionParametersId.


        :return: The concat of this ActionParametersId.
        :rtype: List
        """
        return self._concat

    @concat.setter
    def concat(self, concat):
        """Sets the concat of this ActionParametersId.


        :param concat: The concat of this ActionParametersId.
        :type concat: List
        """

        self._concat = concat

    @property
    def condition(self):
        """Gets the condition of this ActionParametersId.


        :return: The condition of this ActionParametersId.
        :rtype: ComponentPropertyCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ActionParametersId.


        :param condition: The condition of this ActionParametersId.
        :type condition: ComponentPropertyCondition
        """

        self._condition = condition

    @property
    def configured(self):
        """Gets the configured of this ActionParametersId.


        :return: The configured of this ActionParametersId.
        :rtype: bool
        """
        return self._configured

    @configured.setter
    def configured(self, configured):
        """Sets the configured of this ActionParametersId.


        :param configured: The configured of this ActionParametersId.
        :type configured: bool
        """

        self._configured = configured

    @property
    def type(self):
        """Gets the type of this ActionParametersId.


        :return: The type of this ActionParametersId.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActionParametersId.


        :param type: The type of this ActionParametersId.
        :type type: str
        """

        self._type = type

    @property
    def imported_value(self):
        """Gets the imported_value of this ActionParametersId.


        :return: The imported_value of this ActionParametersId.
        :rtype: str
        """
        return self._imported_value

    @imported_value.setter
    def imported_value(self, imported_value):
        """Sets the imported_value of this ActionParametersId.


        :param imported_value: The imported_value of this ActionParametersId.
        :type imported_value: str
        """

        self._imported_value = imported_value

    @property
    def component_name(self):
        """Gets the component_name of this ActionParametersId.


        :return: The component_name of this ActionParametersId.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this ActionParametersId.


        :param component_name: The component_name of this ActionParametersId.
        :type component_name: str
        """

        self._component_name = component_name

    @property
    def _property(self):
        """Gets the _property of this ActionParametersId.


        :return: The _property of this ActionParametersId.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this ActionParametersId.


        :param _property: The _property of this ActionParametersId.
        :type _property: str
        """

        self.__property = _property
