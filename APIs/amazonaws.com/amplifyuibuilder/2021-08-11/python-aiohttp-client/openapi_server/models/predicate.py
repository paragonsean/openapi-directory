# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Predicate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _or: List=None, _and: List=None, _field: str=None, operator: str=None, operand: str=None, operand_type: str=None):
        """Predicate - a model defined in OpenAPI

        :param _or: The _or of this Predicate.
        :param _and: The _and of this Predicate.
        :param _field: The _field of this Predicate.
        :param operator: The operator of this Predicate.
        :param operand: The operand of this Predicate.
        :param operand_type: The operand_type of this Predicate.
        """
        self.openapi_types = {
            '_or': List,
            '_and': List,
            '_field': str,
            'operator': str,
            'operand': str,
            'operand_type': str
        }

        self.attribute_map = {
            '_or': 'or',
            '_and': 'and',
            '_field': 'field',
            'operator': 'operator',
            'operand': 'operand',
            'operand_type': 'operandType'
        }

        self.__or = _or
        self.__and = _and
        self.__field = _field
        self._operator = operator
        self._operand = operand
        self._operand_type = operand_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Predicate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Predicate of this Predicate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _or(self):
        """Gets the _or of this Predicate.


        :return: The _or of this Predicate.
        :rtype: List
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this Predicate.


        :param _or: The _or of this Predicate.
        :type _or: List
        """

        self.__or = _or

    @property
    def _and(self):
        """Gets the _and of this Predicate.


        :return: The _and of this Predicate.
        :rtype: List
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this Predicate.


        :param _and: The _and of this Predicate.
        :type _and: List
        """

        self.__and = _and

    @property
    def _field(self):
        """Gets the _field of this Predicate.


        :return: The _field of this Predicate.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this Predicate.


        :param _field: The _field of this Predicate.
        :type _field: str
        """

        self.__field = _field

    @property
    def operator(self):
        """Gets the operator of this Predicate.


        :return: The operator of this Predicate.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Predicate.


        :param operator: The operator of this Predicate.
        :type operator: str
        """

        self._operator = operator

    @property
    def operand(self):
        """Gets the operand of this Predicate.


        :return: The operand of this Predicate.
        :rtype: str
        """
        return self._operand

    @operand.setter
    def operand(self, operand):
        """Sets the operand of this Predicate.


        :param operand: The operand of this Predicate.
        :type operand: str
        """

        self._operand = operand

    @property
    def operand_type(self):
        """Gets the operand_type of this Predicate.


        :return: The operand_type of this Predicate.
        :rtype: str
        """
        return self._operand_type

    @operand_type.setter
    def operand_type(self, operand_type):
        """Sets the operand_type of this Predicate.


        :param operand_type: The operand_type of this Predicate.
        :type operand_type: str
        """

        self._operand_type = operand_type
