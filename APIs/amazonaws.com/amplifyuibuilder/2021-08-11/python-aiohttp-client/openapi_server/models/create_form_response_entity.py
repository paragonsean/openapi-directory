# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_form_request_form_to_create_data_type import CreateFormRequestFormToCreateDataType
from openapi_server.models.form_action_type import FormActionType
from openapi_server.models.form_cta import FormCta
from openapi_server.models.form_style import FormStyle
from openapi_server.models.label_decorator import LabelDecorator
from openapi_server import util


class CreateFormResponseEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, environment_name: str=None, id: str=None, name: str=None, form_action_type: FormActionType=None, style: FormStyle=None, data_type: CreateFormRequestFormToCreateDataType=None, fields: Dict=None, sectional_elements: Dict=None, schema_version: str=None, tags: Dict=None, cta: FormCta=None, label_decorator: LabelDecorator=None):
        """CreateFormResponseEntity - a model defined in OpenAPI

        :param app_id: The app_id of this CreateFormResponseEntity.
        :param environment_name: The environment_name of this CreateFormResponseEntity.
        :param id: The id of this CreateFormResponseEntity.
        :param name: The name of this CreateFormResponseEntity.
        :param form_action_type: The form_action_type of this CreateFormResponseEntity.
        :param style: The style of this CreateFormResponseEntity.
        :param data_type: The data_type of this CreateFormResponseEntity.
        :param fields: The fields of this CreateFormResponseEntity.
        :param sectional_elements: The sectional_elements of this CreateFormResponseEntity.
        :param schema_version: The schema_version of this CreateFormResponseEntity.
        :param tags: The tags of this CreateFormResponseEntity.
        :param cta: The cta of this CreateFormResponseEntity.
        :param label_decorator: The label_decorator of this CreateFormResponseEntity.
        """
        self.openapi_types = {
            'app_id': str,
            'environment_name': str,
            'id': str,
            'name': str,
            'form_action_type': FormActionType,
            'style': FormStyle,
            'data_type': CreateFormRequestFormToCreateDataType,
            'fields': Dict,
            'sectional_elements': Dict,
            'schema_version': str,
            'tags': Dict,
            'cta': FormCta,
            'label_decorator': LabelDecorator
        }

        self.attribute_map = {
            'app_id': 'appId',
            'environment_name': 'environmentName',
            'id': 'id',
            'name': 'name',
            'form_action_type': 'formActionType',
            'style': 'style',
            'data_type': 'dataType',
            'fields': 'fields',
            'sectional_elements': 'sectionalElements',
            'schema_version': 'schemaVersion',
            'tags': 'tags',
            'cta': 'cta',
            'label_decorator': 'labelDecorator'
        }

        self._app_id = app_id
        self._environment_name = environment_name
        self._id = id
        self._name = name
        self._form_action_type = form_action_type
        self._style = style
        self._data_type = data_type
        self._fields = fields
        self._sectional_elements = sectional_elements
        self._schema_version = schema_version
        self._tags = tags
        self._cta = cta
        self._label_decorator = label_decorator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFormResponseEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFormResponse_entity of this CreateFormResponseEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this CreateFormResponseEntity.


        :return: The app_id of this CreateFormResponseEntity.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CreateFormResponseEntity.


        :param app_id: The app_id of this CreateFormResponseEntity.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def environment_name(self):
        """Gets the environment_name of this CreateFormResponseEntity.


        :return: The environment_name of this CreateFormResponseEntity.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this CreateFormResponseEntity.


        :param environment_name: The environment_name of this CreateFormResponseEntity.
        :type environment_name: str
        """
        if environment_name is None:
            raise ValueError("Invalid value for `environment_name`, must not be `None`")

        self._environment_name = environment_name

    @property
    def id(self):
        """Gets the id of this CreateFormResponseEntity.


        :return: The id of this CreateFormResponseEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateFormResponseEntity.


        :param id: The id of this CreateFormResponseEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this CreateFormResponseEntity.


        :return: The name of this CreateFormResponseEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFormResponseEntity.


        :param name: The name of this CreateFormResponseEntity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def form_action_type(self):
        """Gets the form_action_type of this CreateFormResponseEntity.


        :return: The form_action_type of this CreateFormResponseEntity.
        :rtype: FormActionType
        """
        return self._form_action_type

    @form_action_type.setter
    def form_action_type(self, form_action_type):
        """Sets the form_action_type of this CreateFormResponseEntity.


        :param form_action_type: The form_action_type of this CreateFormResponseEntity.
        :type form_action_type: FormActionType
        """
        if form_action_type is None:
            raise ValueError("Invalid value for `form_action_type`, must not be `None`")

        self._form_action_type = form_action_type

    @property
    def style(self):
        """Gets the style of this CreateFormResponseEntity.


        :return: The style of this CreateFormResponseEntity.
        :rtype: FormStyle
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this CreateFormResponseEntity.


        :param style: The style of this CreateFormResponseEntity.
        :type style: FormStyle
        """
        if style is None:
            raise ValueError("Invalid value for `style`, must not be `None`")

        self._style = style

    @property
    def data_type(self):
        """Gets the data_type of this CreateFormResponseEntity.


        :return: The data_type of this CreateFormResponseEntity.
        :rtype: CreateFormRequestFormToCreateDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CreateFormResponseEntity.


        :param data_type: The data_type of this CreateFormResponseEntity.
        :type data_type: CreateFormRequestFormToCreateDataType
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")

        self._data_type = data_type

    @property
    def fields(self):
        """Gets the fields of this CreateFormResponseEntity.


        :return: The fields of this CreateFormResponseEntity.
        :rtype: Dict
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this CreateFormResponseEntity.


        :param fields: The fields of this CreateFormResponseEntity.
        :type fields: Dict
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def sectional_elements(self):
        """Gets the sectional_elements of this CreateFormResponseEntity.


        :return: The sectional_elements of this CreateFormResponseEntity.
        :rtype: Dict
        """
        return self._sectional_elements

    @sectional_elements.setter
    def sectional_elements(self, sectional_elements):
        """Sets the sectional_elements of this CreateFormResponseEntity.


        :param sectional_elements: The sectional_elements of this CreateFormResponseEntity.
        :type sectional_elements: Dict
        """
        if sectional_elements is None:
            raise ValueError("Invalid value for `sectional_elements`, must not be `None`")

        self._sectional_elements = sectional_elements

    @property
    def schema_version(self):
        """Gets the schema_version of this CreateFormResponseEntity.


        :return: The schema_version of this CreateFormResponseEntity.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this CreateFormResponseEntity.


        :param schema_version: The schema_version of this CreateFormResponseEntity.
        :type schema_version: str
        """
        if schema_version is None:
            raise ValueError("Invalid value for `schema_version`, must not be `None`")

        self._schema_version = schema_version

    @property
    def tags(self):
        """Gets the tags of this CreateFormResponseEntity.


        :return: The tags of this CreateFormResponseEntity.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFormResponseEntity.


        :param tags: The tags of this CreateFormResponseEntity.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def cta(self):
        """Gets the cta of this CreateFormResponseEntity.


        :return: The cta of this CreateFormResponseEntity.
        :rtype: FormCta
        """
        return self._cta

    @cta.setter
    def cta(self, cta):
        """Sets the cta of this CreateFormResponseEntity.


        :param cta: The cta of this CreateFormResponseEntity.
        :type cta: FormCta
        """

        self._cta = cta

    @property
    def label_decorator(self):
        """Gets the label_decorator of this CreateFormResponseEntity.


        :return: The label_decorator of this CreateFormResponseEntity.
        :rtype: LabelDecorator
        """
        return self._label_decorator

    @label_decorator.setter
    def label_decorator(self, label_decorator):
        """Sets the label_decorator of this CreateFormResponseEntity.


        :param label_decorator: The label_decorator of this CreateFormResponseEntity.
        :type label_decorator: LabelDecorator
        """

        self._label_decorator = label_decorator
