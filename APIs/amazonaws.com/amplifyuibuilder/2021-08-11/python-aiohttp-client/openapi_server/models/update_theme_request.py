# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_theme_request_updated_theme import UpdateThemeRequestUpdatedTheme
from openapi_server import util


class UpdateThemeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, updated_theme: UpdateThemeRequestUpdatedTheme=None):
        """UpdateThemeRequest - a model defined in OpenAPI

        :param updated_theme: The updated_theme of this UpdateThemeRequest.
        """
        self.openapi_types = {
            'updated_theme': UpdateThemeRequestUpdatedTheme
        }

        self.attribute_map = {
            'updated_theme': 'updatedTheme'
        }

        self._updated_theme = updated_theme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateThemeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTheme_request of this UpdateThemeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def updated_theme(self):
        """Gets the updated_theme of this UpdateThemeRequest.


        :return: The updated_theme of this UpdateThemeRequest.
        :rtype: UpdateThemeRequestUpdatedTheme
        """
        return self._updated_theme

    @updated_theme.setter
    def updated_theme(self, updated_theme):
        """Sets the updated_theme of this UpdateThemeRequest.


        :param updated_theme: The updated_theme of this UpdateThemeRequest.
        :type updated_theme: UpdateThemeRequestUpdatedTheme
        """
        if updated_theme is None:
            raise ValueError("Invalid value for `updated_theme`, must not be `None`")

        self._updated_theme = updated_theme
