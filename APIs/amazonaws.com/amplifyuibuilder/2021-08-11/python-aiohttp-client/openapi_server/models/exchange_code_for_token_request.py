# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exchange_code_for_token_request_request import ExchangeCodeForTokenRequestRequest
from openapi_server import util


class ExchangeCodeForTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request: ExchangeCodeForTokenRequestRequest=None):
        """ExchangeCodeForTokenRequest - a model defined in OpenAPI

        :param request: The request of this ExchangeCodeForTokenRequest.
        """
        self.openapi_types = {
            'request': ExchangeCodeForTokenRequestRequest
        }

        self.attribute_map = {
            'request': 'request'
        }

        self._request = request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExchangeCodeForTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExchangeCodeForToken_request of this ExchangeCodeForTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request(self):
        """Gets the request of this ExchangeCodeForTokenRequest.


        :return: The request of this ExchangeCodeForTokenRequest.
        :rtype: ExchangeCodeForTokenRequestRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this ExchangeCodeForTokenRequest.


        :param request: The request of this ExchangeCodeForTokenRequest.
        :type request: ExchangeCodeForTokenRequestRequest
        """
        if request is None:
            raise ValueError("Invalid value for `request`, must not be `None`")

        self._request = request
