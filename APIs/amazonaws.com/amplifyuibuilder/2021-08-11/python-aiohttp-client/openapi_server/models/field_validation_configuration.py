# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldValidationConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, str_values: List=None, num_values: List=None, validation_message: str=None):
        """FieldValidationConfiguration - a model defined in OpenAPI

        :param type: The type of this FieldValidationConfiguration.
        :param str_values: The str_values of this FieldValidationConfiguration.
        :param num_values: The num_values of this FieldValidationConfiguration.
        :param validation_message: The validation_message of this FieldValidationConfiguration.
        """
        self.openapi_types = {
            'type': str,
            'str_values': List,
            'num_values': List,
            'validation_message': str
        }

        self.attribute_map = {
            'type': 'type',
            'str_values': 'strValues',
            'num_values': 'numValues',
            'validation_message': 'validationMessage'
        }

        self._type = type
        self._str_values = str_values
        self._num_values = num_values
        self._validation_message = validation_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldValidationConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldValidationConfiguration of this FieldValidationConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this FieldValidationConfiguration.


        :return: The type of this FieldValidationConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldValidationConfiguration.


        :param type: The type of this FieldValidationConfiguration.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def str_values(self):
        """Gets the str_values of this FieldValidationConfiguration.


        :return: The str_values of this FieldValidationConfiguration.
        :rtype: List
        """
        return self._str_values

    @str_values.setter
    def str_values(self, str_values):
        """Sets the str_values of this FieldValidationConfiguration.


        :param str_values: The str_values of this FieldValidationConfiguration.
        :type str_values: List
        """

        self._str_values = str_values

    @property
    def num_values(self):
        """Gets the num_values of this FieldValidationConfiguration.


        :return: The num_values of this FieldValidationConfiguration.
        :rtype: List
        """
        return self._num_values

    @num_values.setter
    def num_values(self, num_values):
        """Sets the num_values of this FieldValidationConfiguration.


        :param num_values: The num_values of this FieldValidationConfiguration.
        :type num_values: List
        """

        self._num_values = num_values

    @property
    def validation_message(self):
        """Gets the validation_message of this FieldValidationConfiguration.


        :return: The validation_message of this FieldValidationConfiguration.
        :rtype: str
        """
        return self._validation_message

    @validation_message.setter
    def validation_message(self, validation_message):
        """Sets the validation_message of this FieldValidationConfiguration.


        :param validation_message: The validation_message of this FieldValidationConfiguration.
        :type validation_message: str
        """

        self._validation_message = validation_message
