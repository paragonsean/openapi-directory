# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.generic_data_relationship_type import GenericDataRelationshipType
from openapi_server import util


class CodegenGenericDataRelationshipType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: GenericDataRelationshipType=None, related_model_name: str=None, related_model_fields: List=None, can_unlink_associated_model: bool=None, related_join_field_name: str=None, related_join_table_name: str=None, belongs_to_field_on_related_model: str=None, associated_fields: List=None, is_has_many_index: bool=None):
        """CodegenGenericDataRelationshipType - a model defined in OpenAPI

        :param type: The type of this CodegenGenericDataRelationshipType.
        :param related_model_name: The related_model_name of this CodegenGenericDataRelationshipType.
        :param related_model_fields: The related_model_fields of this CodegenGenericDataRelationshipType.
        :param can_unlink_associated_model: The can_unlink_associated_model of this CodegenGenericDataRelationshipType.
        :param related_join_field_name: The related_join_field_name of this CodegenGenericDataRelationshipType.
        :param related_join_table_name: The related_join_table_name of this CodegenGenericDataRelationshipType.
        :param belongs_to_field_on_related_model: The belongs_to_field_on_related_model of this CodegenGenericDataRelationshipType.
        :param associated_fields: The associated_fields of this CodegenGenericDataRelationshipType.
        :param is_has_many_index: The is_has_many_index of this CodegenGenericDataRelationshipType.
        """
        self.openapi_types = {
            'type': GenericDataRelationshipType,
            'related_model_name': str,
            'related_model_fields': List,
            'can_unlink_associated_model': bool,
            'related_join_field_name': str,
            'related_join_table_name': str,
            'belongs_to_field_on_related_model': str,
            'associated_fields': List,
            'is_has_many_index': bool
        }

        self.attribute_map = {
            'type': 'type',
            'related_model_name': 'relatedModelName',
            'related_model_fields': 'relatedModelFields',
            'can_unlink_associated_model': 'canUnlinkAssociatedModel',
            'related_join_field_name': 'relatedJoinFieldName',
            'related_join_table_name': 'relatedJoinTableName',
            'belongs_to_field_on_related_model': 'belongsToFieldOnRelatedModel',
            'associated_fields': 'associatedFields',
            'is_has_many_index': 'isHasManyIndex'
        }

        self._type = type
        self._related_model_name = related_model_name
        self._related_model_fields = related_model_fields
        self._can_unlink_associated_model = can_unlink_associated_model
        self._related_join_field_name = related_join_field_name
        self._related_join_table_name = related_join_table_name
        self._belongs_to_field_on_related_model = belongs_to_field_on_related_model
        self._associated_fields = associated_fields
        self._is_has_many_index = is_has_many_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodegenGenericDataRelationshipType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodegenGenericDataRelationshipType of this CodegenGenericDataRelationshipType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this CodegenGenericDataRelationshipType.


        :return: The type of this CodegenGenericDataRelationshipType.
        :rtype: GenericDataRelationshipType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodegenGenericDataRelationshipType.


        :param type: The type of this CodegenGenericDataRelationshipType.
        :type type: GenericDataRelationshipType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def related_model_name(self):
        """Gets the related_model_name of this CodegenGenericDataRelationshipType.


        :return: The related_model_name of this CodegenGenericDataRelationshipType.
        :rtype: str
        """
        return self._related_model_name

    @related_model_name.setter
    def related_model_name(self, related_model_name):
        """Sets the related_model_name of this CodegenGenericDataRelationshipType.


        :param related_model_name: The related_model_name of this CodegenGenericDataRelationshipType.
        :type related_model_name: str
        """
        if related_model_name is None:
            raise ValueError("Invalid value for `related_model_name`, must not be `None`")

        self._related_model_name = related_model_name

    @property
    def related_model_fields(self):
        """Gets the related_model_fields of this CodegenGenericDataRelationshipType.


        :return: The related_model_fields of this CodegenGenericDataRelationshipType.
        :rtype: List
        """
        return self._related_model_fields

    @related_model_fields.setter
    def related_model_fields(self, related_model_fields):
        """Sets the related_model_fields of this CodegenGenericDataRelationshipType.


        :param related_model_fields: The related_model_fields of this CodegenGenericDataRelationshipType.
        :type related_model_fields: List
        """

        self._related_model_fields = related_model_fields

    @property
    def can_unlink_associated_model(self):
        """Gets the can_unlink_associated_model of this CodegenGenericDataRelationshipType.


        :return: The can_unlink_associated_model of this CodegenGenericDataRelationshipType.
        :rtype: bool
        """
        return self._can_unlink_associated_model

    @can_unlink_associated_model.setter
    def can_unlink_associated_model(self, can_unlink_associated_model):
        """Sets the can_unlink_associated_model of this CodegenGenericDataRelationshipType.


        :param can_unlink_associated_model: The can_unlink_associated_model of this CodegenGenericDataRelationshipType.
        :type can_unlink_associated_model: bool
        """

        self._can_unlink_associated_model = can_unlink_associated_model

    @property
    def related_join_field_name(self):
        """Gets the related_join_field_name of this CodegenGenericDataRelationshipType.


        :return: The related_join_field_name of this CodegenGenericDataRelationshipType.
        :rtype: str
        """
        return self._related_join_field_name

    @related_join_field_name.setter
    def related_join_field_name(self, related_join_field_name):
        """Sets the related_join_field_name of this CodegenGenericDataRelationshipType.


        :param related_join_field_name: The related_join_field_name of this CodegenGenericDataRelationshipType.
        :type related_join_field_name: str
        """

        self._related_join_field_name = related_join_field_name

    @property
    def related_join_table_name(self):
        """Gets the related_join_table_name of this CodegenGenericDataRelationshipType.


        :return: The related_join_table_name of this CodegenGenericDataRelationshipType.
        :rtype: str
        """
        return self._related_join_table_name

    @related_join_table_name.setter
    def related_join_table_name(self, related_join_table_name):
        """Sets the related_join_table_name of this CodegenGenericDataRelationshipType.


        :param related_join_table_name: The related_join_table_name of this CodegenGenericDataRelationshipType.
        :type related_join_table_name: str
        """

        self._related_join_table_name = related_join_table_name

    @property
    def belongs_to_field_on_related_model(self):
        """Gets the belongs_to_field_on_related_model of this CodegenGenericDataRelationshipType.


        :return: The belongs_to_field_on_related_model of this CodegenGenericDataRelationshipType.
        :rtype: str
        """
        return self._belongs_to_field_on_related_model

    @belongs_to_field_on_related_model.setter
    def belongs_to_field_on_related_model(self, belongs_to_field_on_related_model):
        """Sets the belongs_to_field_on_related_model of this CodegenGenericDataRelationshipType.


        :param belongs_to_field_on_related_model: The belongs_to_field_on_related_model of this CodegenGenericDataRelationshipType.
        :type belongs_to_field_on_related_model: str
        """

        self._belongs_to_field_on_related_model = belongs_to_field_on_related_model

    @property
    def associated_fields(self):
        """Gets the associated_fields of this CodegenGenericDataRelationshipType.


        :return: The associated_fields of this CodegenGenericDataRelationshipType.
        :rtype: List
        """
        return self._associated_fields

    @associated_fields.setter
    def associated_fields(self, associated_fields):
        """Sets the associated_fields of this CodegenGenericDataRelationshipType.


        :param associated_fields: The associated_fields of this CodegenGenericDataRelationshipType.
        :type associated_fields: List
        """

        self._associated_fields = associated_fields

    @property
    def is_has_many_index(self):
        """Gets the is_has_many_index of this CodegenGenericDataRelationshipType.


        :return: The is_has_many_index of this CodegenGenericDataRelationshipType.
        :rtype: bool
        """
        return self._is_has_many_index

    @is_has_many_index.setter
    def is_has_many_index(self, is_has_many_index):
        """Sets the is_has_many_index of this CodegenGenericDataRelationshipType.


        :param is_has_many_index: The is_has_many_index of this CodegenGenericDataRelationshipType.
        :type is_has_many_index: bool
        """

        self._is_has_many_index = is_has_many_index
