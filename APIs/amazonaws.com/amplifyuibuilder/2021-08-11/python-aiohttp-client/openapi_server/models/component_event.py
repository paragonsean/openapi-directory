# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_event_parameters import ComponentEventParameters
from openapi_server import util


class ComponentEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, parameters: ComponentEventParameters=None, binding_event: str=None):
        """ComponentEvent - a model defined in OpenAPI

        :param action: The action of this ComponentEvent.
        :param parameters: The parameters of this ComponentEvent.
        :param binding_event: The binding_event of this ComponentEvent.
        """
        self.openapi_types = {
            'action': str,
            'parameters': ComponentEventParameters,
            'binding_event': str
        }

        self.attribute_map = {
            'action': 'action',
            'parameters': 'parameters',
            'binding_event': 'bindingEvent'
        }

        self._action = action
        self._parameters = parameters
        self._binding_event = binding_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentEvent of this ComponentEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ComponentEvent.


        :return: The action of this ComponentEvent.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ComponentEvent.


        :param action: The action of this ComponentEvent.
        :type action: str
        """

        self._action = action

    @property
    def parameters(self):
        """Gets the parameters of this ComponentEvent.


        :return: The parameters of this ComponentEvent.
        :rtype: ComponentEventParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ComponentEvent.


        :param parameters: The parameters of this ComponentEvent.
        :type parameters: ComponentEventParameters
        """

        self._parameters = parameters

    @property
    def binding_event(self):
        """Gets the binding_event of this ComponentEvent.


        :return: The binding_event of this ComponentEvent.
        :rtype: str
        """
        return self._binding_event

    @binding_event.setter
    def binding_event(self, binding_event):
        """Sets the binding_event of this ComponentEvent.


        :param binding_event: The binding_event of this ComponentEvent.
        :type binding_event: str
        """

        self._binding_event = binding_event
