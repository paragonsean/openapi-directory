# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.codegen_generic_data_field_data_type import CodegenGenericDataFieldDataType
from openapi_server.models.codegen_generic_data_field_relationship import CodegenGenericDataFieldRelationship
from openapi_server import util


class CodegenGenericDataField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: CodegenGenericDataFieldDataType=None, data_type_value: str=None, required: bool=None, read_only: bool=None, is_array: bool=None, relationship: CodegenGenericDataFieldRelationship=None):
        """CodegenGenericDataField - a model defined in OpenAPI

        :param data_type: The data_type of this CodegenGenericDataField.
        :param data_type_value: The data_type_value of this CodegenGenericDataField.
        :param required: The required of this CodegenGenericDataField.
        :param read_only: The read_only of this CodegenGenericDataField.
        :param is_array: The is_array of this CodegenGenericDataField.
        :param relationship: The relationship of this CodegenGenericDataField.
        """
        self.openapi_types = {
            'data_type': CodegenGenericDataFieldDataType,
            'data_type_value': str,
            'required': bool,
            'read_only': bool,
            'is_array': bool,
            'relationship': CodegenGenericDataFieldRelationship
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'data_type_value': 'dataTypeValue',
            'required': 'required',
            'read_only': 'readOnly',
            'is_array': 'isArray',
            'relationship': 'relationship'
        }

        self._data_type = data_type
        self._data_type_value = data_type_value
        self._required = required
        self._read_only = read_only
        self._is_array = is_array
        self._relationship = relationship

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodegenGenericDataField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodegenGenericDataField of this CodegenGenericDataField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this CodegenGenericDataField.


        :return: The data_type of this CodegenGenericDataField.
        :rtype: CodegenGenericDataFieldDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CodegenGenericDataField.


        :param data_type: The data_type of this CodegenGenericDataField.
        :type data_type: CodegenGenericDataFieldDataType
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")

        self._data_type = data_type

    @property
    def data_type_value(self):
        """Gets the data_type_value of this CodegenGenericDataField.


        :return: The data_type_value of this CodegenGenericDataField.
        :rtype: str
        """
        return self._data_type_value

    @data_type_value.setter
    def data_type_value(self, data_type_value):
        """Sets the data_type_value of this CodegenGenericDataField.


        :param data_type_value: The data_type_value of this CodegenGenericDataField.
        :type data_type_value: str
        """
        if data_type_value is None:
            raise ValueError("Invalid value for `data_type_value`, must not be `None`")

        self._data_type_value = data_type_value

    @property
    def required(self):
        """Gets the required of this CodegenGenericDataField.


        :return: The required of this CodegenGenericDataField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CodegenGenericDataField.


        :param required: The required of this CodegenGenericDataField.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def read_only(self):
        """Gets the read_only of this CodegenGenericDataField.


        :return: The read_only of this CodegenGenericDataField.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this CodegenGenericDataField.


        :param read_only: The read_only of this CodegenGenericDataField.
        :type read_only: bool
        """
        if read_only is None:
            raise ValueError("Invalid value for `read_only`, must not be `None`")

        self._read_only = read_only

    @property
    def is_array(self):
        """Gets the is_array of this CodegenGenericDataField.


        :return: The is_array of this CodegenGenericDataField.
        :rtype: bool
        """
        return self._is_array

    @is_array.setter
    def is_array(self, is_array):
        """Sets the is_array of this CodegenGenericDataField.


        :param is_array: The is_array of this CodegenGenericDataField.
        :type is_array: bool
        """
        if is_array is None:
            raise ValueError("Invalid value for `is_array`, must not be `None`")

        self._is_array = is_array

    @property
    def relationship(self):
        """Gets the relationship of this CodegenGenericDataField.


        :return: The relationship of this CodegenGenericDataField.
        :rtype: CodegenGenericDataFieldRelationship
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this CodegenGenericDataField.


        :param relationship: The relationship of this CodegenGenericDataField.
        :type relationship: CodegenGenericDataFieldRelationship
        """

        self._relationship = relationship
