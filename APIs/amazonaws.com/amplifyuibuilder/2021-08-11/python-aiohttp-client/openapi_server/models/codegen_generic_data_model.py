# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodegenGenericDataModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: Dict=None, is_join_table: bool=None, primary_keys: List=None):
        """CodegenGenericDataModel - a model defined in OpenAPI

        :param fields: The fields of this CodegenGenericDataModel.
        :param is_join_table: The is_join_table of this CodegenGenericDataModel.
        :param primary_keys: The primary_keys of this CodegenGenericDataModel.
        """
        self.openapi_types = {
            'fields': Dict,
            'is_join_table': bool,
            'primary_keys': List
        }

        self.attribute_map = {
            'fields': 'fields',
            'is_join_table': 'isJoinTable',
            'primary_keys': 'primaryKeys'
        }

        self._fields = fields
        self._is_join_table = is_join_table
        self._primary_keys = primary_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodegenGenericDataModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodegenGenericDataModel of this CodegenGenericDataModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this CodegenGenericDataModel.


        :return: The fields of this CodegenGenericDataModel.
        :rtype: Dict
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this CodegenGenericDataModel.


        :param fields: The fields of this CodegenGenericDataModel.
        :type fields: Dict
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def is_join_table(self):
        """Gets the is_join_table of this CodegenGenericDataModel.


        :return: The is_join_table of this CodegenGenericDataModel.
        :rtype: bool
        """
        return self._is_join_table

    @is_join_table.setter
    def is_join_table(self, is_join_table):
        """Sets the is_join_table of this CodegenGenericDataModel.


        :param is_join_table: The is_join_table of this CodegenGenericDataModel.
        :type is_join_table: bool
        """

        self._is_join_table = is_join_table

    @property
    def primary_keys(self):
        """Gets the primary_keys of this CodegenGenericDataModel.


        :return: The primary_keys of this CodegenGenericDataModel.
        :rtype: List
        """
        return self._primary_keys

    @primary_keys.setter
    def primary_keys(self, primary_keys):
        """Sets the primary_keys of this CodegenGenericDataModel.


        :param primary_keys: The primary_keys of this CodegenGenericDataModel.
        :type primary_keys: List
        """
        if primary_keys is None:
            raise ValueError("Invalid value for `primary_keys`, must not be `None`")

        self._primary_keys = primary_keys
