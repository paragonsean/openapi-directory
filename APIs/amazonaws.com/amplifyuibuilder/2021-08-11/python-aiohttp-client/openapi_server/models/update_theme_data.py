# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateThemeData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, values: List=None, overrides: List=None):
        """UpdateThemeData - a model defined in OpenAPI

        :param id: The id of this UpdateThemeData.
        :param name: The name of this UpdateThemeData.
        :param values: The values of this UpdateThemeData.
        :param overrides: The overrides of this UpdateThemeData.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'values': List,
            'overrides': List
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'values': 'values',
            'overrides': 'overrides'
        }

        self._id = id
        self._name = name
        self._values = values
        self._overrides = overrides

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateThemeData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateThemeData of this UpdateThemeData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpdateThemeData.


        :return: The id of this UpdateThemeData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateThemeData.


        :param id: The id of this UpdateThemeData.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UpdateThemeData.


        :return: The name of this UpdateThemeData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateThemeData.


        :param name: The name of this UpdateThemeData.
        :type name: str
        """

        self._name = name

    @property
    def values(self):
        """Gets the values of this UpdateThemeData.


        :return: The values of this UpdateThemeData.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this UpdateThemeData.


        :param values: The values of this UpdateThemeData.
        :type values: List
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values

    @property
    def overrides(self):
        """Gets the overrides of this UpdateThemeData.


        :return: The overrides of this UpdateThemeData.
        :rtype: List
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this UpdateThemeData.


        :param overrides: The overrides of this UpdateThemeData.
        :type overrides: List
        """

        self._overrides = overrides
