# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sectional_element_position import SectionalElementPosition
from openapi_server import util


class SectionalElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, position: SectionalElementPosition=None, text: str=None, level: int=None, orientation: str=None, excluded: bool=None):
        """SectionalElement - a model defined in OpenAPI

        :param type: The type of this SectionalElement.
        :param position: The position of this SectionalElement.
        :param text: The text of this SectionalElement.
        :param level: The level of this SectionalElement.
        :param orientation: The orientation of this SectionalElement.
        :param excluded: The excluded of this SectionalElement.
        """
        self.openapi_types = {
            'type': str,
            'position': SectionalElementPosition,
            'text': str,
            'level': int,
            'orientation': str,
            'excluded': bool
        }

        self.attribute_map = {
            'type': 'type',
            'position': 'position',
            'text': 'text',
            'level': 'level',
            'orientation': 'orientation',
            'excluded': 'excluded'
        }

        self._type = type
        self._position = position
        self._text = text
        self._level = level
        self._orientation = orientation
        self._excluded = excluded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SectionalElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SectionalElement of this SectionalElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this SectionalElement.


        :return: The type of this SectionalElement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SectionalElement.


        :param type: The type of this SectionalElement.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def position(self):
        """Gets the position of this SectionalElement.


        :return: The position of this SectionalElement.
        :rtype: SectionalElementPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SectionalElement.


        :param position: The position of this SectionalElement.
        :type position: SectionalElementPosition
        """

        self._position = position

    @property
    def text(self):
        """Gets the text of this SectionalElement.


        :return: The text of this SectionalElement.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SectionalElement.


        :param text: The text of this SectionalElement.
        :type text: str
        """

        self._text = text

    @property
    def level(self):
        """Gets the level of this SectionalElement.


        :return: The level of this SectionalElement.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SectionalElement.


        :param level: The level of this SectionalElement.
        :type level: int
        """

        self._level = level

    @property
    def orientation(self):
        """Gets the orientation of this SectionalElement.


        :return: The orientation of this SectionalElement.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this SectionalElement.


        :param orientation: The orientation of this SectionalElement.
        :type orientation: str
        """

        self._orientation = orientation

    @property
    def excluded(self):
        """Gets the excluded of this SectionalElement.


        :return: The excluded of this SectionalElement.
        :rtype: bool
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """Sets the excluded of this SectionalElement.


        :param excluded: The excluded of this SectionalElement.
        :type excluded: bool
        """

        self._excluded = excluded
