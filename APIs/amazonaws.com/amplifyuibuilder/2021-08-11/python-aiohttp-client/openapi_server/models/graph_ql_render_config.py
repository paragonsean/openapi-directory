# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GraphQLRenderConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, types_file_path: str=None, queries_file_path: str=None, mutations_file_path: str=None, subscriptions_file_path: str=None, fragments_file_path: str=None):
        """GraphQLRenderConfig - a model defined in OpenAPI

        :param types_file_path: The types_file_path of this GraphQLRenderConfig.
        :param queries_file_path: The queries_file_path of this GraphQLRenderConfig.
        :param mutations_file_path: The mutations_file_path of this GraphQLRenderConfig.
        :param subscriptions_file_path: The subscriptions_file_path of this GraphQLRenderConfig.
        :param fragments_file_path: The fragments_file_path of this GraphQLRenderConfig.
        """
        self.openapi_types = {
            'types_file_path': str,
            'queries_file_path': str,
            'mutations_file_path': str,
            'subscriptions_file_path': str,
            'fragments_file_path': str
        }

        self.attribute_map = {
            'types_file_path': 'typesFilePath',
            'queries_file_path': 'queriesFilePath',
            'mutations_file_path': 'mutationsFilePath',
            'subscriptions_file_path': 'subscriptionsFilePath',
            'fragments_file_path': 'fragmentsFilePath'
        }

        self._types_file_path = types_file_path
        self._queries_file_path = queries_file_path
        self._mutations_file_path = mutations_file_path
        self._subscriptions_file_path = subscriptions_file_path
        self._fragments_file_path = fragments_file_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GraphQLRenderConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GraphQLRenderConfig of this GraphQLRenderConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def types_file_path(self):
        """Gets the types_file_path of this GraphQLRenderConfig.


        :return: The types_file_path of this GraphQLRenderConfig.
        :rtype: str
        """
        return self._types_file_path

    @types_file_path.setter
    def types_file_path(self, types_file_path):
        """Sets the types_file_path of this GraphQLRenderConfig.


        :param types_file_path: The types_file_path of this GraphQLRenderConfig.
        :type types_file_path: str
        """
        if types_file_path is None:
            raise ValueError("Invalid value for `types_file_path`, must not be `None`")

        self._types_file_path = types_file_path

    @property
    def queries_file_path(self):
        """Gets the queries_file_path of this GraphQLRenderConfig.


        :return: The queries_file_path of this GraphQLRenderConfig.
        :rtype: str
        """
        return self._queries_file_path

    @queries_file_path.setter
    def queries_file_path(self, queries_file_path):
        """Sets the queries_file_path of this GraphQLRenderConfig.


        :param queries_file_path: The queries_file_path of this GraphQLRenderConfig.
        :type queries_file_path: str
        """
        if queries_file_path is None:
            raise ValueError("Invalid value for `queries_file_path`, must not be `None`")

        self._queries_file_path = queries_file_path

    @property
    def mutations_file_path(self):
        """Gets the mutations_file_path of this GraphQLRenderConfig.


        :return: The mutations_file_path of this GraphQLRenderConfig.
        :rtype: str
        """
        return self._mutations_file_path

    @mutations_file_path.setter
    def mutations_file_path(self, mutations_file_path):
        """Sets the mutations_file_path of this GraphQLRenderConfig.


        :param mutations_file_path: The mutations_file_path of this GraphQLRenderConfig.
        :type mutations_file_path: str
        """
        if mutations_file_path is None:
            raise ValueError("Invalid value for `mutations_file_path`, must not be `None`")

        self._mutations_file_path = mutations_file_path

    @property
    def subscriptions_file_path(self):
        """Gets the subscriptions_file_path of this GraphQLRenderConfig.


        :return: The subscriptions_file_path of this GraphQLRenderConfig.
        :rtype: str
        """
        return self._subscriptions_file_path

    @subscriptions_file_path.setter
    def subscriptions_file_path(self, subscriptions_file_path):
        """Sets the subscriptions_file_path of this GraphQLRenderConfig.


        :param subscriptions_file_path: The subscriptions_file_path of this GraphQLRenderConfig.
        :type subscriptions_file_path: str
        """
        if subscriptions_file_path is None:
            raise ValueError("Invalid value for `subscriptions_file_path`, must not be `None`")

        self._subscriptions_file_path = subscriptions_file_path

    @property
    def fragments_file_path(self):
        """Gets the fragments_file_path of this GraphQLRenderConfig.


        :return: The fragments_file_path of this GraphQLRenderConfig.
        :rtype: str
        """
        return self._fragments_file_path

    @fragments_file_path.setter
    def fragments_file_path(self, fragments_file_path):
        """Sets the fragments_file_path of this GraphQLRenderConfig.


        :param fragments_file_path: The fragments_file_path of this GraphQLRenderConfig.
        :type fragments_file_path: str
        """
        if fragments_file_path is None:
            raise ValueError("Invalid value for `fragments_file_path`, must not be `None`")

        self._fragments_file_path = fragments_file_path
