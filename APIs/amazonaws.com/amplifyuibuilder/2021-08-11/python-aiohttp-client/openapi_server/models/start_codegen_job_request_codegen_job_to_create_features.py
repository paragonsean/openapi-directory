# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartCodegenJobRequestCodegenJobToCreateFeatures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_relationship_supported: bool=None, is_non_model_supported: bool=None):
        """StartCodegenJobRequestCodegenJobToCreateFeatures - a model defined in OpenAPI

        :param is_relationship_supported: The is_relationship_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.
        :param is_non_model_supported: The is_non_model_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.
        """
        self.openapi_types = {
            'is_relationship_supported': bool,
            'is_non_model_supported': bool
        }

        self.attribute_map = {
            'is_relationship_supported': 'isRelationshipSupported',
            'is_non_model_supported': 'isNonModelSupported'
        }

        self._is_relationship_supported = is_relationship_supported
        self._is_non_model_supported = is_non_model_supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartCodegenJobRequestCodegenJobToCreateFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartCodegenJob_request_codegenJobToCreate_features of this StartCodegenJobRequestCodegenJobToCreateFeatures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_relationship_supported(self):
        """Gets the is_relationship_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.


        :return: The is_relationship_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.
        :rtype: bool
        """
        return self._is_relationship_supported

    @is_relationship_supported.setter
    def is_relationship_supported(self, is_relationship_supported):
        """Sets the is_relationship_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.


        :param is_relationship_supported: The is_relationship_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.
        :type is_relationship_supported: bool
        """

        self._is_relationship_supported = is_relationship_supported

    @property
    def is_non_model_supported(self):
        """Gets the is_non_model_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.


        :return: The is_non_model_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.
        :rtype: bool
        """
        return self._is_non_model_supported

    @is_non_model_supported.setter
    def is_non_model_supported(self, is_non_model_supported):
        """Sets the is_non_model_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.


        :param is_non_model_supported: The is_non_model_supported of this StartCodegenJobRequestCodegenJobToCreateFeatures.
        :type is_non_model_supported: bool
        """

        self._is_non_model_supported = is_non_model_supported
