# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.codegen_feature_flags import CodegenFeatureFlags
from openapi_server.models.codegen_job_asset import CodegenJobAsset
from openapi_server.models.codegen_job_generic_data_schema import CodegenJobGenericDataSchema
from openapi_server.models.codegen_job_render_config import CodegenJobRenderConfig
from openapi_server.models.codegen_job_status import CodegenJobStatus
from openapi_server import util


class CodegenJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, app_id: str=None, environment_name: str=None, render_config: CodegenJobRenderConfig=None, generic_data_schema: CodegenJobGenericDataSchema=None, auto_generate_forms: bool=None, features: CodegenFeatureFlags=None, status: CodegenJobStatus=None, status_message: str=None, asset: CodegenJobAsset=None, tags: Dict=None, created_at: datetime=None, modified_at: datetime=None):
        """CodegenJob - a model defined in OpenAPI

        :param id: The id of this CodegenJob.
        :param app_id: The app_id of this CodegenJob.
        :param environment_name: The environment_name of this CodegenJob.
        :param render_config: The render_config of this CodegenJob.
        :param generic_data_schema: The generic_data_schema of this CodegenJob.
        :param auto_generate_forms: The auto_generate_forms of this CodegenJob.
        :param features: The features of this CodegenJob.
        :param status: The status of this CodegenJob.
        :param status_message: The status_message of this CodegenJob.
        :param asset: The asset of this CodegenJob.
        :param tags: The tags of this CodegenJob.
        :param created_at: The created_at of this CodegenJob.
        :param modified_at: The modified_at of this CodegenJob.
        """
        self.openapi_types = {
            'id': str,
            'app_id': str,
            'environment_name': str,
            'render_config': CodegenJobRenderConfig,
            'generic_data_schema': CodegenJobGenericDataSchema,
            'auto_generate_forms': bool,
            'features': CodegenFeatureFlags,
            'status': CodegenJobStatus,
            'status_message': str,
            'asset': CodegenJobAsset,
            'tags': Dict,
            'created_at': datetime,
            'modified_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'app_id': 'appId',
            'environment_name': 'environmentName',
            'render_config': 'renderConfig',
            'generic_data_schema': 'genericDataSchema',
            'auto_generate_forms': 'autoGenerateForms',
            'features': 'features',
            'status': 'status',
            'status_message': 'statusMessage',
            'asset': 'asset',
            'tags': 'tags',
            'created_at': 'createdAt',
            'modified_at': 'modifiedAt'
        }

        self._id = id
        self._app_id = app_id
        self._environment_name = environment_name
        self._render_config = render_config
        self._generic_data_schema = generic_data_schema
        self._auto_generate_forms = auto_generate_forms
        self._features = features
        self._status = status
        self._status_message = status_message
        self._asset = asset
        self._tags = tags
        self._created_at = created_at
        self._modified_at = modified_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodegenJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodegenJob of this CodegenJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CodegenJob.


        :return: The id of this CodegenJob.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodegenJob.


        :param id: The id of this CodegenJob.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def app_id(self):
        """Gets the app_id of this CodegenJob.


        :return: The app_id of this CodegenJob.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CodegenJob.


        :param app_id: The app_id of this CodegenJob.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def environment_name(self):
        """Gets the environment_name of this CodegenJob.


        :return: The environment_name of this CodegenJob.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this CodegenJob.


        :param environment_name: The environment_name of this CodegenJob.
        :type environment_name: str
        """
        if environment_name is None:
            raise ValueError("Invalid value for `environment_name`, must not be `None`")

        self._environment_name = environment_name

    @property
    def render_config(self):
        """Gets the render_config of this CodegenJob.


        :return: The render_config of this CodegenJob.
        :rtype: CodegenJobRenderConfig
        """
        return self._render_config

    @render_config.setter
    def render_config(self, render_config):
        """Sets the render_config of this CodegenJob.


        :param render_config: The render_config of this CodegenJob.
        :type render_config: CodegenJobRenderConfig
        """

        self._render_config = render_config

    @property
    def generic_data_schema(self):
        """Gets the generic_data_schema of this CodegenJob.


        :return: The generic_data_schema of this CodegenJob.
        :rtype: CodegenJobGenericDataSchema
        """
        return self._generic_data_schema

    @generic_data_schema.setter
    def generic_data_schema(self, generic_data_schema):
        """Sets the generic_data_schema of this CodegenJob.


        :param generic_data_schema: The generic_data_schema of this CodegenJob.
        :type generic_data_schema: CodegenJobGenericDataSchema
        """

        self._generic_data_schema = generic_data_schema

    @property
    def auto_generate_forms(self):
        """Gets the auto_generate_forms of this CodegenJob.


        :return: The auto_generate_forms of this CodegenJob.
        :rtype: bool
        """
        return self._auto_generate_forms

    @auto_generate_forms.setter
    def auto_generate_forms(self, auto_generate_forms):
        """Sets the auto_generate_forms of this CodegenJob.


        :param auto_generate_forms: The auto_generate_forms of this CodegenJob.
        :type auto_generate_forms: bool
        """

        self._auto_generate_forms = auto_generate_forms

    @property
    def features(self):
        """Gets the features of this CodegenJob.


        :return: The features of this CodegenJob.
        :rtype: CodegenFeatureFlags
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this CodegenJob.


        :param features: The features of this CodegenJob.
        :type features: CodegenFeatureFlags
        """

        self._features = features

    @property
    def status(self):
        """Gets the status of this CodegenJob.


        :return: The status of this CodegenJob.
        :rtype: CodegenJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodegenJob.


        :param status: The status of this CodegenJob.
        :type status: CodegenJobStatus
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this CodegenJob.


        :return: The status_message of this CodegenJob.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this CodegenJob.


        :param status_message: The status_message of this CodegenJob.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def asset(self):
        """Gets the asset of this CodegenJob.


        :return: The asset of this CodegenJob.
        :rtype: CodegenJobAsset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this CodegenJob.


        :param asset: The asset of this CodegenJob.
        :type asset: CodegenJobAsset
        """

        self._asset = asset

    @property
    def tags(self):
        """Gets the tags of this CodegenJob.


        :return: The tags of this CodegenJob.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CodegenJob.


        :param tags: The tags of this CodegenJob.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def created_at(self):
        """Gets the created_at of this CodegenJob.


        :return: The created_at of this CodegenJob.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CodegenJob.


        :param created_at: The created_at of this CodegenJob.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this CodegenJob.


        :return: The modified_at of this CodegenJob.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this CodegenJob.


        :param modified_at: The modified_at of this CodegenJob.
        :type modified_at: datetime
        """

        self._modified_at = modified_at
