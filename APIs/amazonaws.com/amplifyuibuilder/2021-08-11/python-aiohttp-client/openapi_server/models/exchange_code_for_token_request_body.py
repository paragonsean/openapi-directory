# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExchangeCodeForTokenRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, redirect_uri: str=None, client_id: str=None):
        """ExchangeCodeForTokenRequestBody - a model defined in OpenAPI

        :param code: The code of this ExchangeCodeForTokenRequestBody.
        :param redirect_uri: The redirect_uri of this ExchangeCodeForTokenRequestBody.
        :param client_id: The client_id of this ExchangeCodeForTokenRequestBody.
        """
        self.openapi_types = {
            'code': str,
            'redirect_uri': str,
            'client_id': str
        }

        self.attribute_map = {
            'code': 'code',
            'redirect_uri': 'redirectUri',
            'client_id': 'clientId'
        }

        self._code = code
        self._redirect_uri = redirect_uri
        self._client_id = client_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExchangeCodeForTokenRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExchangeCodeForTokenRequestBody of this ExchangeCodeForTokenRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ExchangeCodeForTokenRequestBody.


        :return: The code of this ExchangeCodeForTokenRequestBody.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ExchangeCodeForTokenRequestBody.


        :param code: The code of this ExchangeCodeForTokenRequestBody.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this ExchangeCodeForTokenRequestBody.


        :return: The redirect_uri of this ExchangeCodeForTokenRequestBody.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this ExchangeCodeForTokenRequestBody.


        :param redirect_uri: The redirect_uri of this ExchangeCodeForTokenRequestBody.
        :type redirect_uri: str
        """
        if redirect_uri is None:
            raise ValueError("Invalid value for `redirect_uri`, must not be `None`")

        self._redirect_uri = redirect_uri

    @property
    def client_id(self):
        """Gets the client_id of this ExchangeCodeForTokenRequestBody.


        :return: The client_id of this ExchangeCodeForTokenRequestBody.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ExchangeCodeForTokenRequestBody.


        :param client_id: The client_id of this ExchangeCodeForTokenRequestBody.
        :type client_id: str
        """

        self._client_id = client_id
