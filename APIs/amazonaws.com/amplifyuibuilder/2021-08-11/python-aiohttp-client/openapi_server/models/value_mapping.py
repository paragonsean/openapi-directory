# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value_mapping_display_value import ValueMappingDisplayValue
from openapi_server.models.value_mapping_value import ValueMappingValue
from openapi_server import util


class ValueMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_value: ValueMappingDisplayValue=None, value: ValueMappingValue=None):
        """ValueMapping - a model defined in OpenAPI

        :param display_value: The display_value of this ValueMapping.
        :param value: The value of this ValueMapping.
        """
        self.openapi_types = {
            'display_value': ValueMappingDisplayValue,
            'value': ValueMappingValue
        }

        self.attribute_map = {
            'display_value': 'displayValue',
            'value': 'value'
        }

        self._display_value = display_value
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueMapping of this ValueMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_value(self):
        """Gets the display_value of this ValueMapping.


        :return: The display_value of this ValueMapping.
        :rtype: ValueMappingDisplayValue
        """
        return self._display_value

    @display_value.setter
    def display_value(self, display_value):
        """Sets the display_value of this ValueMapping.


        :param display_value: The display_value of this ValueMapping.
        :type display_value: ValueMappingDisplayValue
        """

        self._display_value = display_value

    @property
    def value(self):
        """Gets the value of this ValueMapping.


        :return: The value of this ValueMapping.
        :rtype: ValueMappingValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ValueMapping.


        :param value: The value of this ValueMapping.
        :type value: ValueMappingValue
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
