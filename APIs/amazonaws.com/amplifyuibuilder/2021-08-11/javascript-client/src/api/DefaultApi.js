/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateComponentRequest from '../model/CreateComponentRequest';
import CreateComponentResponse from '../model/CreateComponentResponse';
import CreateFormRequest from '../model/CreateFormRequest';
import CreateFormResponse from '../model/CreateFormResponse';
import CreateThemeRequest from '../model/CreateThemeRequest';
import CreateThemeResponse from '../model/CreateThemeResponse';
import ExchangeCodeForTokenRequest from '../model/ExchangeCodeForTokenRequest';
import ExchangeCodeForTokenResponse from '../model/ExchangeCodeForTokenResponse';
import ExportComponentsResponse from '../model/ExportComponentsResponse';
import ExportFormsResponse from '../model/ExportFormsResponse';
import ExportThemesResponse from '../model/ExportThemesResponse';
import GetCodegenJobResponse from '../model/GetCodegenJobResponse';
import GetComponentResponse from '../model/GetComponentResponse';
import GetFormResponse from '../model/GetFormResponse';
import GetMetadataResponse from '../model/GetMetadataResponse';
import GetThemeResponse from '../model/GetThemeResponse';
import ListCodegenJobsResponse from '../model/ListCodegenJobsResponse';
import ListComponentsResponse from '../model/ListComponentsResponse';
import ListFormsResponse from '../model/ListFormsResponse';
import ListThemesResponse from '../model/ListThemesResponse';
import PutMetadataFlagRequest from '../model/PutMetadataFlagRequest';
import RefreshTokenRequest from '../model/RefreshTokenRequest';
import RefreshTokenResponse from '../model/RefreshTokenResponse';
import StartCodegenJobRequest from '../model/StartCodegenJobRequest';
import StartCodegenJobResponse from '../model/StartCodegenJobResponse';
import UpdateComponentRequest from '../model/UpdateComponentRequest';
import UpdateComponentResponse from '../model/UpdateComponentResponse';
import UpdateFormRequest from '../model/UpdateFormRequest';
import UpdateFormResponse from '../model/UpdateFormResponse';
import UpdateThemeRequest from '../model/UpdateThemeRequest';
import UpdateThemeResponse from '../model/UpdateThemeResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-08-11
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createComponent operation.
     * @callback module:api/DefaultApi~createComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new component for an Amplify app.
     * @param {String} appId The unique ID of the Amplify app to associate with the component.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {module:model/CreateComponentRequest} createComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] The unique client token.
     * @param {module:api/DefaultApi~createComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateComponentResponse}
     */
    createComponent(appId, environmentName, createComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createComponentRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createComponent");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling createComponent");
      }
      // verify the required parameter 'createComponentRequest' is set
      if (createComponentRequest === undefined || createComponentRequest === null) {
        throw new Error("Missing the required parameter 'createComponentRequest' when calling createComponent");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateComponentResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/components', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createForm operation.
     * @callback module:api/DefaultApi~createFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new form for an Amplify app.
     * @param {String} appId The unique ID of the Amplify app to associate with the form.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {module:model/CreateFormRequest} createFormRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] The unique client token.
     * @param {module:api/DefaultApi~createFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFormResponse}
     */
    createForm(appId, environmentName, createFormRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFormRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createForm");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling createForm");
      }
      // verify the required parameter 'createFormRequest' is set
      if (createFormRequest === undefined || createFormRequest === null) {
        throw new Error("Missing the required parameter 'createFormRequest' when calling createForm");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFormResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/forms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTheme operation.
     * @callback module:api/DefaultApi~createThemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateThemeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a theme to apply to the components in an Amplify app.
     * @param {String} appId The unique ID of the Amplify app associated with the theme.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {module:model/CreateThemeRequest} createThemeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] The unique client token.
     * @param {module:api/DefaultApi~createThemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateThemeResponse}
     */
    createTheme(appId, environmentName, createThemeRequest, opts, callback) {
      opts = opts || {};
      let postBody = createThemeRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createTheme");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling createTheme");
      }
      // verify the required parameter 'createThemeRequest' is set
      if (createThemeRequest === undefined || createThemeRequest === null) {
        throw new Error("Missing the required parameter 'createThemeRequest' when calling createTheme");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateThemeResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/themes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComponent operation.
     * @callback module:api/DefaultApi~deleteComponentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a component from an Amplify app.
     * @param {String} appId The unique ID of the Amplify app associated with the component to delete.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {String} id The unique ID of the component to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteComponentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComponent(appId, environmentName, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteComponent");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling deleteComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteComponent");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/components/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteForm operation.
     * @callback module:api/DefaultApi~deleteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a form from an Amplify app.
     * @param {String} appId The unique ID of the Amplify app associated with the form to delete.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {String} id The unique ID of the form to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteForm(appId, environmentName, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteForm");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling deleteForm");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteForm");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/forms/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTheme operation.
     * @callback module:api/DefaultApi~deleteThemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a theme from an Amplify app.
     * @param {String} appId The unique ID of the Amplify app associated with the theme to delete.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {String} id The unique ID of the theme to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteThemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTheme(appId, environmentName, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteTheme");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling deleteTheme");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTheme");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/themes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exchangeCodeForToken operation.
     * @callback module:api/DefaultApi~exchangeCodeForTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExchangeCodeForTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchanges an access code for a token.
     * @param {module:model/String} provider The third-party provider for the token. The only valid value is <code>figma</code>.
     * @param {module:model/ExchangeCodeForTokenRequest} exchangeCodeForTokenRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~exchangeCodeForTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExchangeCodeForTokenResponse}
     */
    exchangeCodeForToken(provider, exchangeCodeForTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = exchangeCodeForTokenRequest;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling exchangeCodeForToken");
      }
      // verify the required parameter 'exchangeCodeForTokenRequest' is set
      if (exchangeCodeForTokenRequest === undefined || exchangeCodeForTokenRequest === null) {
        throw new Error("Missing the required parameter 'exchangeCodeForTokenRequest' when calling exchangeCodeForToken");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExchangeCodeForTokenResponse;
      return this.apiClient.callApi(
        '/tokens/{provider}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportComponents operation.
     * @callback module:api/DefaultApi~exportComponentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportComponentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports component configurations to code that is ready to integrate into an Amplify app.
     * @param {String} appId The unique ID of the Amplify app to export components to.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token to request the next page of results.
     * @param {module:api/DefaultApi~exportComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportComponentsResponse}
     */
    exportComponents(appId, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling exportComponents");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling exportComponents");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportComponentsResponse;
      return this.apiClient.callApi(
        '/export/app/{appId}/environment/{environmentName}/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportForms operation.
     * @callback module:api/DefaultApi~exportFormsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportFormsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports form configurations to code that is ready to integrate into an Amplify app.
     * @param {String} appId The unique ID of the Amplify app to export forms to.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token to request the next page of results.
     * @param {module:api/DefaultApi~exportFormsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportFormsResponse}
     */
    exportForms(appId, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling exportForms");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling exportForms");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportFormsResponse;
      return this.apiClient.callApi(
        '/export/app/{appId}/environment/{environmentName}/forms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportThemes operation.
     * @callback module:api/DefaultApi~exportThemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportThemesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports theme configurations to code that is ready to integrate into an Amplify app.
     * @param {String} appId The unique ID of the Amplify app to export the themes to.
     * @param {String} environmentName The name of the backend environment that is part of the Amplify app.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token to request the next page of results.
     * @param {module:api/DefaultApi~exportThemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportThemesResponse}
     */
    exportThemes(appId, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling exportThemes");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling exportThemes");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportThemesResponse;
      return this.apiClient.callApi(
        '/export/app/{appId}/environment/{environmentName}/themes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCodegenJob operation.
     * @callback module:api/DefaultApi~getCodegenJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCodegenJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an existing code generation job.
     * @param {String} appId The unique ID of the Amplify app associated with the code generation job.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app associated with the code generation job.
     * @param {String} id The unique ID of the code generation job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCodegenJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCodegenJobResponse}
     */
    getCodegenJob(appId, environmentName, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCodegenJob");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling getCodegenJob");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCodegenJob");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCodegenJobResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/codegen-jobs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComponent operation.
     * @callback module:api/DefaultApi~getComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an existing component for an Amplify app.
     * @param {String} appId The unique ID of the Amplify app.
     * @param {String} environmentName The name of the backend environment that is part of the Amplify app.
     * @param {String} id The unique ID of the component.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetComponentResponse}
     */
    getComponent(appId, environmentName, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getComponent");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling getComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComponent");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetComponentResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/components/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getForm operation.
     * @callback module:api/DefaultApi~getFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an existing form for an Amplify app.
     * @param {String} appId The unique ID of the Amplify app.
     * @param {String} environmentName The name of the backend environment that is part of the Amplify app.
     * @param {String} id The unique ID of the form.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFormResponse}
     */
    getForm(appId, environmentName, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getForm");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling getForm");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getForm");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFormResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/forms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetadata operation.
     * @callback module:api/DefaultApi~getMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns existing metadata for an Amplify app.
     * @param {String} appId The unique ID of the Amplify app.
     * @param {String} environmentName The name of the backend environment that is part of the Amplify app.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMetadataResponse}
     */
    getMetadata(appId, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getMetadata");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling getMetadata");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMetadataResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTheme operation.
     * @callback module:api/DefaultApi~getThemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetThemeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an existing theme for an Amplify app.
     * @param {String} appId The unique ID of the Amplify app.
     * @param {String} environmentName The name of the backend environment that is part of the Amplify app.
     * @param {String} id The unique ID for the theme.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getThemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetThemeResponse}
     */
    getTheme(appId, environmentName, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getTheme");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling getTheme");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTheme");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetThemeResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/themes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCodegenJobs operation.
     * @callback module:api/DefaultApi~listCodegenJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCodegenJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of code generation jobs for a specified Amplify app and backend environment.
     * @param {String} appId The unique ID for the Amplify app.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token to request the next page of results.
     * @param {Number} [maxResults] The maximum number of jobs to retrieve.
     * @param {module:api/DefaultApi~listCodegenJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCodegenJobsResponse}
     */
    listCodegenJobs(appId, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listCodegenJobs");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling listCodegenJobs");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCodegenJobsResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/codegen-jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listComponents operation.
     * @callback module:api/DefaultApi~listComponentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListComponentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of components for a specified Amplify app and backend environment.
     * @param {String} appId The unique ID for the Amplify app.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token to request the next page of results.
     * @param {Number} [maxResults] The maximum number of components to retrieve.
     * @param {module:api/DefaultApi~listComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListComponentsResponse}
     */
    listComponents(appId, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listComponents");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling listComponents");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListComponentsResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listForms operation.
     * @callback module:api/DefaultApi~listFormsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFormsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of forms for a specified Amplify app and backend environment.
     * @param {String} appId The unique ID for the Amplify app.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token to request the next page of results.
     * @param {Number} [maxResults] The maximum number of forms to retrieve.
     * @param {module:api/DefaultApi~listFormsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFormsResponse}
     */
    listForms(appId, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listForms");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling listForms");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFormsResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/forms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listThemes operation.
     * @callback module:api/DefaultApi~listThemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListThemesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of themes for a specified Amplify app and backend environment.
     * @param {String} appId The unique ID for the Amplify app.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token to request the next page of results.
     * @param {Number} [maxResults] The maximum number of theme results to return in the response.
     * @param {module:api/DefaultApi~listThemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListThemesResponse}
     */
    listThemes(appId, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listThemes");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling listThemes");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListThemesResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/themes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putMetadataFlag operation.
     * @callback module:api/DefaultApi~putMetadataFlagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stores the metadata information about a feature on a form.
     * @param {String} appId The unique ID for the Amplify app.
     * @param {String} environmentName The name of the backend environment that is part of the Amplify app.
     * @param {String} featureName The name of the feature associated with the metadata.
     * @param {module:model/PutMetadataFlagRequest} putMetadataFlagRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putMetadataFlagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putMetadataFlag(appId, environmentName, featureName, putMetadataFlagRequest, opts, callback) {
      opts = opts || {};
      let postBody = putMetadataFlagRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putMetadataFlag");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling putMetadataFlag");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling putMetadataFlag");
      }
      // verify the required parameter 'putMetadataFlagRequest' is set
      if (putMetadataFlagRequest === undefined || putMetadataFlagRequest === null) {
        throw new Error("Missing the required parameter 'putMetadataFlagRequest' when calling putMetadataFlag");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'featureName': featureName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/metadata/features/{featureName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback module:api/DefaultApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes a previously issued access token that might have expired.
     * @param {module:model/String} provider The third-party provider for the token. The only valid value is <code>figma</code>.
     * @param {module:model/RefreshTokenRequest} refreshTokenRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefreshTokenResponse}
     */
    refreshToken(provider, refreshTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = refreshTokenRequest;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling refreshToken");
      }
      // verify the required parameter 'refreshTokenRequest' is set
      if (refreshTokenRequest === undefined || refreshTokenRequest === null) {
        throw new Error("Missing the required parameter 'refreshTokenRequest' when calling refreshToken");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefreshTokenResponse;
      return this.apiClient.callApi(
        '/tokens/{provider}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startCodegenJob operation.
     * @callback module:api/DefaultApi~startCodegenJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartCodegenJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a code generation job for a specified Amplify app and backend environment.
     * @param {String} appId The unique ID for the Amplify app.
     * @param {String} environmentName The name of the backend environment that is a part of the Amplify app.
     * @param {module:model/StartCodegenJobRequest} startCodegenJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] The idempotency token used to ensure that the code generation job request completes only once.
     * @param {module:api/DefaultApi~startCodegenJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartCodegenJobResponse}
     */
    startCodegenJob(appId, environmentName, startCodegenJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startCodegenJobRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling startCodegenJob");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling startCodegenJob");
      }
      // verify the required parameter 'startCodegenJobRequest' is set
      if (startCodegenJobRequest === undefined || startCodegenJobRequest === null) {
        throw new Error("Missing the required parameter 'startCodegenJobRequest' when calling startCodegenJob");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartCodegenJobResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/codegen-jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComponent operation.
     * @callback module:api/DefaultApi~updateComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing component.
     * @param {String} appId The unique ID for the Amplify app.
     * @param {String} environmentName The name of the backend environment that is part of the Amplify app.
     * @param {String} id The unique ID for the component.
     * @param {module:model/UpdateComponentRequest} updateComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] The unique client token.
     * @param {module:api/DefaultApi~updateComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateComponentResponse}
     */
    updateComponent(appId, environmentName, id, updateComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateComponentRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateComponent");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling updateComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateComponent");
      }
      // verify the required parameter 'updateComponentRequest' is set
      if (updateComponentRequest === undefined || updateComponentRequest === null) {
        throw new Error("Missing the required parameter 'updateComponentRequest' when calling updateComponent");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateComponentResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/components/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateForm operation.
     * @callback module:api/DefaultApi~updateFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing form.
     * @param {String} appId The unique ID for the Amplify app.
     * @param {String} environmentName The name of the backend environment that is part of the Amplify app.
     * @param {String} id The unique ID for the form.
     * @param {module:model/UpdateFormRequest} updateFormRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] The unique client token.
     * @param {module:api/DefaultApi~updateFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFormResponse}
     */
    updateForm(appId, environmentName, id, updateFormRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFormRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateForm");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling updateForm");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateForm");
      }
      // verify the required parameter 'updateFormRequest' is set
      if (updateFormRequest === undefined || updateFormRequest === null) {
        throw new Error("Missing the required parameter 'updateFormRequest' when calling updateForm");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFormResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/forms/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTheme operation.
     * @callback module:api/DefaultApi~updateThemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateThemeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing theme.
     * @param {String} appId The unique ID for the Amplify app.
     * @param {String} environmentName The name of the backend environment that is part of the Amplify app.
     * @param {String} id The unique ID for the theme.
     * @param {module:model/UpdateThemeRequest} updateThemeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] The unique client token.
     * @param {module:api/DefaultApi~updateThemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateThemeResponse}
     */
    updateTheme(appId, environmentName, id, updateThemeRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateThemeRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateTheme");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling updateTheme");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTheme");
      }
      // verify the required parameter 'updateThemeRequest' is set
      if (updateThemeRequest === undefined || updateThemeRequest === null) {
        throw new Error("Missing the required parameter 'updateThemeRequest' when calling updateTheme");
      }

      let pathParams = {
        'appId': appId,
        'environmentName': environmentName,
        'id': id
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateThemeResponse;
      return this.apiClient.callApi(
        '/app/{appId}/environment/{environmentName}/themes/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
