/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FormButtonsPosition from './FormButtonsPosition';
import FormCTA from './FormCTA';
import FormCTACancel from './FormCTACancel';
import FormCTAClear from './FormCTAClear';
import FormCTASubmit from './FormCTASubmit';

/**
 * The FormCta model module.
 * @module model/FormCta
 * @version 2021-08-11
 */
class FormCta {
    /**
     * Constructs a new <code>FormCta</code>.
     * @alias module:model/FormCta
     * @implements module:model/FormCTA
     */
    constructor() { 
        FormCTA.initialize(this);
        FormCta.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FormCta</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormCta} obj Optional instance to populate.
     * @return {module:model/FormCta} The populated <code>FormCta</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormCta();
            FormCTA.constructFromObject(data, obj);

            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], FormButtonsPosition);
            }
            if (data.hasOwnProperty('clear')) {
                obj['clear'] = FormCTAClear.constructFromObject(data['clear']);
            }
            if (data.hasOwnProperty('cancel')) {
                obj['cancel'] = FormCTACancel.constructFromObject(data['cancel']);
            }
            if (data.hasOwnProperty('submit')) {
                obj['submit'] = FormCTASubmit.constructFromObject(data['submit']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormCta</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormCta</code>.
     */
    static validateJSON(data) {
        // validate the optional field `position`
        if (data['position']) { // data not null
          FormButtonsPosition.validateJSON(data['position']);
        }
        // validate the optional field `clear`
        if (data['clear']) { // data not null
          FormCTAClear.validateJSON(data['clear']);
        }
        // validate the optional field `cancel`
        if (data['cancel']) { // data not null
          FormCTACancel.validateJSON(data['cancel']);
        }
        // validate the optional field `submit`
        if (data['submit']) { // data not null
          FormCTASubmit.validateJSON(data['submit']);
        }

        return true;
    }


}



/**
 * @member {module:model/FormButtonsPosition} position
 */
FormCta.prototype['position'] = undefined;

/**
 * @member {module:model/FormCTAClear} clear
 */
FormCta.prototype['clear'] = undefined;

/**
 * @member {module:model/FormCTACancel} cancel
 */
FormCta.prototype['cancel'] = undefined;

/**
 * @member {module:model/FormCTASubmit} submit
 */
FormCta.prototype['submit'] = undefined;


// Implement FormCTA interface:
/**
 * @member {module:model/FormButtonsPosition} position
 */
FormCTA.prototype['position'] = undefined;
/**
 * @member {module:model/FormCTAClear} clear
 */
FormCTA.prototype['clear'] = undefined;
/**
 * @member {module:model/FormCTACancel} cancel
 */
FormCTA.prototype['cancel'] = undefined;
/**
 * @member {module:model/FormCTASubmit} submit
 */
FormCTA.prototype['submit'] = undefined;




export default FormCta;

