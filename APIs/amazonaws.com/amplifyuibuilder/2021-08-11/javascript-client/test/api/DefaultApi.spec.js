/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsAmplifyUiBuilder);
  }
}(this, function(expect, AwsAmplifyUiBuilder) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsAmplifyUiBuilder.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createComponent', function() {
      it('should call createComponent successfully', function(done) {
        //uncomment below and update the code to test createComponent
        //instance.createComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createForm', function() {
      it('should call createForm successfully', function(done) {
        //uncomment below and update the code to test createForm
        //instance.createForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTheme', function() {
      it('should call createTheme successfully', function(done) {
        //uncomment below and update the code to test createTheme
        //instance.createTheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteComponent', function() {
      it('should call deleteComponent successfully', function(done) {
        //uncomment below and update the code to test deleteComponent
        //instance.deleteComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteForm', function() {
      it('should call deleteForm successfully', function(done) {
        //uncomment below and update the code to test deleteForm
        //instance.deleteForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTheme', function() {
      it('should call deleteTheme successfully', function(done) {
        //uncomment below and update the code to test deleteTheme
        //instance.deleteTheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exchangeCodeForToken', function() {
      it('should call exchangeCodeForToken successfully', function(done) {
        //uncomment below and update the code to test exchangeCodeForToken
        //instance.exchangeCodeForToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportComponents', function() {
      it('should call exportComponents successfully', function(done) {
        //uncomment below and update the code to test exportComponents
        //instance.exportComponents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportForms', function() {
      it('should call exportForms successfully', function(done) {
        //uncomment below and update the code to test exportForms
        //instance.exportForms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportThemes', function() {
      it('should call exportThemes successfully', function(done) {
        //uncomment below and update the code to test exportThemes
        //instance.exportThemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCodegenJob', function() {
      it('should call getCodegenJob successfully', function(done) {
        //uncomment below and update the code to test getCodegenJob
        //instance.getCodegenJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getComponent', function() {
      it('should call getComponent successfully', function(done) {
        //uncomment below and update the code to test getComponent
        //instance.getComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getForm', function() {
      it('should call getForm successfully', function(done) {
        //uncomment below and update the code to test getForm
        //instance.getForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMetadata', function() {
      it('should call getMetadata successfully', function(done) {
        //uncomment below and update the code to test getMetadata
        //instance.getMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTheme', function() {
      it('should call getTheme successfully', function(done) {
        //uncomment below and update the code to test getTheme
        //instance.getTheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCodegenJobs', function() {
      it('should call listCodegenJobs successfully', function(done) {
        //uncomment below and update the code to test listCodegenJobs
        //instance.listCodegenJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listComponents', function() {
      it('should call listComponents successfully', function(done) {
        //uncomment below and update the code to test listComponents
        //instance.listComponents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listForms', function() {
      it('should call listForms successfully', function(done) {
        //uncomment below and update the code to test listForms
        //instance.listForms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listThemes', function() {
      it('should call listThemes successfully', function(done) {
        //uncomment below and update the code to test listThemes
        //instance.listThemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putMetadataFlag', function() {
      it('should call putMetadataFlag successfully', function(done) {
        //uncomment below and update the code to test putMetadataFlag
        //instance.putMetadataFlag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshToken', function() {
      it('should call refreshToken successfully', function(done) {
        //uncomment below and update the code to test refreshToken
        //instance.refreshToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startCodegenJob', function() {
      it('should call startCodegenJob successfully', function(done) {
        //uncomment below and update the code to test startCodegenJob
        //instance.startCodegenJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateComponent', function() {
      it('should call updateComponent successfully', function(done) {
        //uncomment below and update the code to test updateComponent
        //instance.updateComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateForm', function() {
      it('should call updateForm successfully', function(done) {
        //uncomment below and update the code to test updateForm
        //instance.updateForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTheme', function() {
      it('should call updateTheme successfully', function(done) {
        //uncomment below and update the code to test updateTheme
        //instance.updateTheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
