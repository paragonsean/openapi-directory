/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsAmplifyUiBuilder);
  }
}(this, function(expect, AwsAmplifyUiBuilder) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsAmplifyUiBuilder.Component();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Component', function() {
    it('should create an instance of Component', function() {
      // uncomment below and update the code to test Component
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be.a(AwsAmplifyUiBuilder.Component);
    });

    it('should have the property appId (base name: "appId")', function() {
      // uncomment below and update the code to test the property appId
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property environmentName (base name: "environmentName")', function() {
      // uncomment below and update the code to test the property environmentName
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property sourceId (base name: "sourceId")', function() {
      // uncomment below and update the code to test the property sourceId
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property componentType (base name: "componentType")', function() {
      // uncomment below and update the code to test the property componentType
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property properties (base name: "properties")', function() {
      // uncomment below and update the code to test the property properties
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property children (base name: "children")', function() {
      // uncomment below and update the code to test the property children
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property variants (base name: "variants")', function() {
      // uncomment below and update the code to test the property variants
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property overrides (base name: "overrides")', function() {
      // uncomment below and update the code to test the property overrides
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property bindingProperties (base name: "bindingProperties")', function() {
      // uncomment below and update the code to test the property bindingProperties
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property collectionProperties (base name: "collectionProperties")', function() {
      // uncomment below and update the code to test the property collectionProperties
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property modifiedAt (base name: "modifiedAt")', function() {
      // uncomment below and update the code to test the property modifiedAt
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property events (base name: "events")', function() {
      // uncomment below and update the code to test the property events
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

    it('should have the property schemaVersion (base name: "schemaVersion")', function() {
      // uncomment below and update the code to test the property schemaVersion
      //var instance = new AwsAmplifyUiBuilder.Component();
      //expect(instance).to.be();
    });

  });

}));
