/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsAmplifyUiBuilder);
  }
}(this, function(expect, AwsAmplifyUiBuilder) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ActionParametersTarget', function() {
    it('should create an instance of ActionParametersTarget', function() {
      // uncomment below and update the code to test ActionParametersTarget
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be.a(AwsAmplifyUiBuilder.ActionParametersTarget);
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property bindingProperties (base name: "bindingProperties")', function() {
      // uncomment below and update the code to test the property bindingProperties
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property collectionBindingProperties (base name: "collectionBindingProperties")', function() {
      // uncomment below and update the code to test the property collectionBindingProperties
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property defaultValue (base name: "defaultValue")', function() {
      // uncomment below and update the code to test the property defaultValue
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "model")', function() {
      // uncomment below and update the code to test the property model
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property bindings (base name: "bindings")', function() {
      // uncomment below and update the code to test the property bindings
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property event (base name: "event")', function() {
      // uncomment below and update the code to test the property event
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property userAttribute (base name: "userAttribute")', function() {
      // uncomment below and update the code to test the property userAttribute
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property concat (base name: "concat")', function() {
      // uncomment below and update the code to test the property concat
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property condition (base name: "condition")', function() {
      // uncomment below and update the code to test the property condition
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property configured (base name: "configured")', function() {
      // uncomment below and update the code to test the property configured
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property importedValue (base name: "importedValue")', function() {
      // uncomment below and update the code to test the property importedValue
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property componentName (base name: "componentName")', function() {
      // uncomment below and update the code to test the property componentName
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

    it('should have the property property (base name: "property")', function() {
      // uncomment below and update the code to test the property property
      //var instance = new AwsAmplifyUiBuilder.ActionParametersTarget();
      //expect(instance).to.be();
    });

  });

}));
