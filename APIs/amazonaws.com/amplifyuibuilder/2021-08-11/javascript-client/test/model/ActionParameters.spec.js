/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsAmplifyUiBuilder);
  }
}(this, function(expect, AwsAmplifyUiBuilder) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsAmplifyUiBuilder.ActionParameters();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ActionParameters', function() {
    it('should create an instance of ActionParameters', function() {
      // uncomment below and update the code to test ActionParameters
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be.a(AwsAmplifyUiBuilder.ActionParameters);
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be();
    });

    it('should have the property anchor (base name: "anchor")', function() {
      // uncomment below and update the code to test the property anchor
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be();
    });

    it('should have the property target (base name: "target")', function() {
      // uncomment below and update the code to test the property target
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be();
    });

    it('should have the property global (base name: "global")', function() {
      // uncomment below and update the code to test the property global
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "model")', function() {
      // uncomment below and update the code to test the property model
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be();
    });

    it('should have the property fields (base name: "fields")', function() {
      // uncomment below and update the code to test the property fields
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AwsAmplifyUiBuilder.ActionParameters();
      //expect(instance).to.be();
    });

  });

}));
