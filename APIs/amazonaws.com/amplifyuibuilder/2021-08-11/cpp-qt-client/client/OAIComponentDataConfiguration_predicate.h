/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComponentDataConfiguration_predicate.h
 *
 * 
 */

#ifndef OAIComponentDataConfiguration_predicate_H
#define OAIComponentDataConfiguration_predicate_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIComponentDataConfiguration_predicate : public OAIObject {
public:
    OAIComponentDataConfiguration_predicate();
    OAIComponentDataConfiguration_predicate(QString json);
    ~OAIComponentDataConfiguration_predicate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getROr() const;
    void setROr(const QList &r_or);
    bool is_r_or_Set() const;
    bool is_r_or_Valid() const;

    QList getRAnd() const;
    void setRAnd(const QList &r_and);
    bool is_r_and_Set() const;
    bool is_r_and_Valid() const;

    QString getField() const;
    void setField(const QString &field);
    bool is_field_Set() const;
    bool is_field_Valid() const;

    QString getROperator() const;
    void setROperator(const QString &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    QString getOperand() const;
    void setOperand(const QString &operand);
    bool is_operand_Set() const;
    bool is_operand_Valid() const;

    QString getOperandType() const;
    void setOperandType(const QString &operand_type);
    bool is_operand_type_Set() const;
    bool is_operand_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_r_or;
    bool m_r_or_isSet;
    bool m_r_or_isValid;

    QList m_r_and;
    bool m_r_and_isSet;
    bool m_r_and_isValid;

    QString m_field;
    bool m_field_isSet;
    bool m_field_isValid;

    QString m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    QString m_operand;
    bool m_operand_isSet;
    bool m_operand_isValid;

    QString m_operand_type;
    bool m_operand_type_isSet;
    bool m_operand_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComponentDataConfiguration_predicate)

#endif // OAIComponentDataConfiguration_predicate_H
