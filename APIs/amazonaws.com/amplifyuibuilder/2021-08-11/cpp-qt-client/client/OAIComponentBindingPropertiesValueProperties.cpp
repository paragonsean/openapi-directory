/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentBindingPropertiesValueProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentBindingPropertiesValueProperties::OAIComponentBindingPropertiesValueProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentBindingPropertiesValueProperties::OAIComponentBindingPropertiesValueProperties() {
    this->initializeModel();
}

OAIComponentBindingPropertiesValueProperties::~OAIComponentBindingPropertiesValueProperties() {}

void OAIComponentBindingPropertiesValueProperties::initializeModel() {

    m_model_isSet = false;
    m_model_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_predicates_isSet = false;
    m_predicates_isValid = false;

    m_user_attribute_isSet = false;
    m_user_attribute_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_slot_name_isSet = false;
    m_slot_name_isValid = false;
}

void OAIComponentBindingPropertiesValueProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentBindingPropertiesValueProperties::fromJsonObject(QJsonObject json) {

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_predicates_isValid = ::OpenAPI::fromJsonValue(m_predicates, json[QString("predicates")]);
    m_predicates_isSet = !json[QString("predicates")].isNull() && m_predicates_isValid;

    m_user_attribute_isValid = ::OpenAPI::fromJsonValue(m_user_attribute, json[QString("userAttribute")]);
    m_user_attribute_isSet = !json[QString("userAttribute")].isNull() && m_user_attribute_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_slot_name_isValid = ::OpenAPI::fromJsonValue(m_slot_name, json[QString("slotName")]);
    m_slot_name_isSet = !json[QString("slotName")].isNull() && m_slot_name_isValid;
}

QString OAIComponentBindingPropertiesValueProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentBindingPropertiesValueProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_predicates.isSet()) {
        obj.insert(QString("predicates"), ::OpenAPI::toJsonValue(m_predicates));
    }
    if (m_user_attribute_isSet) {
        obj.insert(QString("userAttribute"), ::OpenAPI::toJsonValue(m_user_attribute));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_slot_name_isSet) {
        obj.insert(QString("slotName"), ::OpenAPI::toJsonValue(m_slot_name));
    }
    return obj;
}

QString OAIComponentBindingPropertiesValueProperties::getModel() const {
    return m_model;
}
void OAIComponentBindingPropertiesValueProperties::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIComponentBindingPropertiesValueProperties::is_model_Set() const{
    return m_model_isSet;
}

bool OAIComponentBindingPropertiesValueProperties::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIComponentBindingPropertiesValueProperties::getField() const {
    return m_field;
}
void OAIComponentBindingPropertiesValueProperties::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIComponentBindingPropertiesValueProperties::is_field_Set() const{
    return m_field_isSet;
}

bool OAIComponentBindingPropertiesValueProperties::is_field_Valid() const{
    return m_field_isValid;
}

QList OAIComponentBindingPropertiesValueProperties::getPredicates() const {
    return m_predicates;
}
void OAIComponentBindingPropertiesValueProperties::setPredicates(const QList &predicates) {
    m_predicates = predicates;
    m_predicates_isSet = true;
}

bool OAIComponentBindingPropertiesValueProperties::is_predicates_Set() const{
    return m_predicates_isSet;
}

bool OAIComponentBindingPropertiesValueProperties::is_predicates_Valid() const{
    return m_predicates_isValid;
}

QString OAIComponentBindingPropertiesValueProperties::getUserAttribute() const {
    return m_user_attribute;
}
void OAIComponentBindingPropertiesValueProperties::setUserAttribute(const QString &user_attribute) {
    m_user_attribute = user_attribute;
    m_user_attribute_isSet = true;
}

bool OAIComponentBindingPropertiesValueProperties::is_user_attribute_Set() const{
    return m_user_attribute_isSet;
}

bool OAIComponentBindingPropertiesValueProperties::is_user_attribute_Valid() const{
    return m_user_attribute_isValid;
}

QString OAIComponentBindingPropertiesValueProperties::getBucket() const {
    return m_bucket;
}
void OAIComponentBindingPropertiesValueProperties::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIComponentBindingPropertiesValueProperties::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIComponentBindingPropertiesValueProperties::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIComponentBindingPropertiesValueProperties::getKey() const {
    return m_key;
}
void OAIComponentBindingPropertiesValueProperties::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIComponentBindingPropertiesValueProperties::is_key_Set() const{
    return m_key_isSet;
}

bool OAIComponentBindingPropertiesValueProperties::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIComponentBindingPropertiesValueProperties::getDefaultValue() const {
    return m_default_value;
}
void OAIComponentBindingPropertiesValueProperties::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIComponentBindingPropertiesValueProperties::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIComponentBindingPropertiesValueProperties::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIComponentBindingPropertiesValueProperties::getSlotName() const {
    return m_slot_name;
}
void OAIComponentBindingPropertiesValueProperties::setSlotName(const QString &slot_name) {
    m_slot_name = slot_name;
    m_slot_name_isSet = true;
}

bool OAIComponentBindingPropertiesValueProperties::is_slot_name_Set() const{
    return m_slot_name_isSet;
}

bool OAIComponentBindingPropertiesValueProperties::is_slot_name_Valid() const{
    return m_slot_name_isValid;
}

bool OAIComponentBindingPropertiesValueProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentBindingPropertiesValueProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
