/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActionParameters::OAIActionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActionParameters::OAIActionParameters() {
    this->initializeModel();
}

OAIActionParameters::~OAIActionParameters() {}

void OAIActionParameters::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_anchor_isSet = false;
    m_anchor_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_global_isSet = false;
    m_global_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIActionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActionParameters::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_anchor_isValid = ::OpenAPI::fromJsonValue(m_anchor, json[QString("anchor")]);
    m_anchor_isSet = !json[QString("anchor")].isNull() && m_anchor_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_global_isValid = ::OpenAPI::fromJsonValue(m_global, json[QString("global")]);
    m_global_isSet = !json[QString("global")].isNull() && m_global_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIActionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url.isSet()) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_anchor.isSet()) {
        obj.insert(QString("anchor"), ::OpenAPI::toJsonValue(m_anchor));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_global.isSet()) {
        obj.insert(QString("global"), ::OpenAPI::toJsonValue(m_global));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_id.isSet()) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_fields.isSet()) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIActionParameters_type OAIActionParameters::getType() const {
    return m_type;
}
void OAIActionParameters::setType(const OAIActionParameters_type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActionParameters::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActionParameters::is_type_Valid() const{
    return m_type_isValid;
}

OAIActionParameters_url OAIActionParameters::getUrl() const {
    return m_url;
}
void OAIActionParameters::setUrl(const OAIActionParameters_url &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIActionParameters::is_url_Set() const{
    return m_url_isSet;
}

bool OAIActionParameters::is_url_Valid() const{
    return m_url_isValid;
}

OAIActionParameters_anchor OAIActionParameters::getAnchor() const {
    return m_anchor;
}
void OAIActionParameters::setAnchor(const OAIActionParameters_anchor &anchor) {
    m_anchor = anchor;
    m_anchor_isSet = true;
}

bool OAIActionParameters::is_anchor_Set() const{
    return m_anchor_isSet;
}

bool OAIActionParameters::is_anchor_Valid() const{
    return m_anchor_isValid;
}

OAIActionParameters_target OAIActionParameters::getTarget() const {
    return m_target;
}
void OAIActionParameters::setTarget(const OAIActionParameters_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIActionParameters::is_target_Set() const{
    return m_target_isSet;
}

bool OAIActionParameters::is_target_Valid() const{
    return m_target_isValid;
}

OAIActionParameters_global OAIActionParameters::getGlobal() const {
    return m_global;
}
void OAIActionParameters::setGlobal(const OAIActionParameters_global &global) {
    m_global = global;
    m_global_isSet = true;
}

bool OAIActionParameters::is_global_Set() const{
    return m_global_isSet;
}

bool OAIActionParameters::is_global_Valid() const{
    return m_global_isValid;
}

QString OAIActionParameters::getModel() const {
    return m_model;
}
void OAIActionParameters::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIActionParameters::is_model_Set() const{
    return m_model_isSet;
}

bool OAIActionParameters::is_model_Valid() const{
    return m_model_isValid;
}

OAIActionParameters_id OAIActionParameters::getId() const {
    return m_id;
}
void OAIActionParameters::setId(const OAIActionParameters_id &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActionParameters::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActionParameters::is_id_Valid() const{
    return m_id_isValid;
}

QMap OAIActionParameters::getFields() const {
    return m_fields;
}
void OAIActionParameters::setFields(const QMap &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIActionParameters::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIActionParameters::is_fields_Valid() const{
    return m_fields_isValid;
}

OAIActionParameters_state OAIActionParameters::getState() const {
    return m_state;
}
void OAIActionParameters::setState(const OAIActionParameters_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIActionParameters::is_state_Set() const{
    return m_state_isSet;
}

bool OAIActionParameters::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIActionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anchor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
