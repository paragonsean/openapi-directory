/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentChild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentChild::OAIComponentChild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentChild::OAIComponentChild() {
    this->initializeModel();
}

OAIComponentChild::~OAIComponentChild() {}

void OAIComponentChild::initializeModel() {

    m_component_type_isSet = false;
    m_component_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;
}

void OAIComponentChild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentChild::fromJsonObject(QJsonObject json) {

    m_component_type_isValid = ::OpenAPI::fromJsonValue(m_component_type, json[QString("componentType")]);
    m_component_type_isSet = !json[QString("componentType")].isNull() && m_component_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;
}

QString OAIComponentChild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentChild::asJsonObject() const {
    QJsonObject obj;
    if (m_component_type_isSet) {
        obj.insert(QString("componentType"), ::OpenAPI::toJsonValue(m_component_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_children.isSet()) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    return obj;
}

QString OAIComponentChild::getComponentType() const {
    return m_component_type;
}
void OAIComponentChild::setComponentType(const QString &component_type) {
    m_component_type = component_type;
    m_component_type_isSet = true;
}

bool OAIComponentChild::is_component_type_Set() const{
    return m_component_type_isSet;
}

bool OAIComponentChild::is_component_type_Valid() const{
    return m_component_type_isValid;
}

QString OAIComponentChild::getName() const {
    return m_name;
}
void OAIComponentChild::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComponentChild::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComponentChild::is_name_Valid() const{
    return m_name_isValid;
}

QJsonValue OAIComponentChild::getProperties() const {
    return m_properties;
}
void OAIComponentChild::setProperties(const QJsonValue &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIComponentChild::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIComponentChild::is_properties_Valid() const{
    return m_properties_isValid;
}

QList OAIComponentChild::getChildren() const {
    return m_children;
}
void OAIComponentChild::setChildren(const QList &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIComponentChild::is_children_Set() const{
    return m_children_isSet;
}

bool OAIComponentChild::is_children_Valid() const{
    return m_children_isValid;
}

QMap OAIComponentChild::getEvents() const {
    return m_events;
}
void OAIComponentChild::setEvents(const QMap &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIComponentChild::is_events_Set() const{
    return m_events_isSet;
}

bool OAIComponentChild::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIComponentChild::getSourceId() const {
    return m_source_id;
}
void OAIComponentChild::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIComponentChild::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIComponentChild::is_source_id_Valid() const{
    return m_source_id_isValid;
}

bool OAIComponentChild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentChild::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_component_type_isValid && m_name_isValid && m_properties_isValid && true;
}

} // namespace OpenAPI
