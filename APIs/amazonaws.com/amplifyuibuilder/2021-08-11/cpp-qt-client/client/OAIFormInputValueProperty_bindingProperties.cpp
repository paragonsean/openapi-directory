/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormInputValueProperty_bindingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormInputValueProperty_bindingProperties::OAIFormInputValueProperty_bindingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormInputValueProperty_bindingProperties::OAIFormInputValueProperty_bindingProperties() {
    this->initializeModel();
}

OAIFormInputValueProperty_bindingProperties::~OAIFormInputValueProperty_bindingProperties() {}

void OAIFormInputValueProperty_bindingProperties::initializeModel() {

    m_property_isSet = false;
    m_property_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;
}

void OAIFormInputValueProperty_bindingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormInputValueProperty_bindingProperties::fromJsonObject(QJsonObject json) {

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;
}

QString OAIFormInputValueProperty_bindingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormInputValueProperty_bindingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    return obj;
}

QString OAIFormInputValueProperty_bindingProperties::getProperty() const {
    return m_property;
}
void OAIFormInputValueProperty_bindingProperties::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIFormInputValueProperty_bindingProperties::is_property_Set() const{
    return m_property_isSet;
}

bool OAIFormInputValueProperty_bindingProperties::is_property_Valid() const{
    return m_property_isValid;
}

QString OAIFormInputValueProperty_bindingProperties::getField() const {
    return m_field;
}
void OAIFormInputValueProperty_bindingProperties::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIFormInputValueProperty_bindingProperties::is_field_Set() const{
    return m_field_isSet;
}

bool OAIFormInputValueProperty_bindingProperties::is_field_Valid() const{
    return m_field_isValid;
}

bool OAIFormInputValueProperty_bindingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormInputValueProperty_bindingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_property_isValid && true;
}

} // namespace OpenAPI
