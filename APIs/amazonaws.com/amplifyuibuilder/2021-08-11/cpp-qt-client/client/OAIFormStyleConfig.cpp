/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormStyleConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormStyleConfig::OAIFormStyleConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormStyleConfig::OAIFormStyleConfig() {
    this->initializeModel();
}

OAIFormStyleConfig::~OAIFormStyleConfig() {}

void OAIFormStyleConfig::initializeModel() {

    m_token_reference_isSet = false;
    m_token_reference_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFormStyleConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormStyleConfig::fromJsonObject(QJsonObject json) {

    m_token_reference_isValid = ::OpenAPI::fromJsonValue(m_token_reference, json[QString("tokenReference")]);
    m_token_reference_isSet = !json[QString("tokenReference")].isNull() && m_token_reference_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFormStyleConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormStyleConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_token_reference_isSet) {
        obj.insert(QString("tokenReference"), ::OpenAPI::toJsonValue(m_token_reference));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIFormStyleConfig::getTokenReference() const {
    return m_token_reference;
}
void OAIFormStyleConfig::setTokenReference(const QString &token_reference) {
    m_token_reference = token_reference;
    m_token_reference_isSet = true;
}

bool OAIFormStyleConfig::is_token_reference_Set() const{
    return m_token_reference_isSet;
}

bool OAIFormStyleConfig::is_token_reference_Valid() const{
    return m_token_reference_isValid;
}

QString OAIFormStyleConfig::getValue() const {
    return m_value;
}
void OAIFormStyleConfig::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFormStyleConfig::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFormStyleConfig::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFormStyleConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormStyleConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
