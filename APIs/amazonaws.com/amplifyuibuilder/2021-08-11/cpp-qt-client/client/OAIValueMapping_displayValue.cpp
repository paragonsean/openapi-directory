/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValueMapping_displayValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValueMapping_displayValue::OAIValueMapping_displayValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValueMapping_displayValue::OAIValueMapping_displayValue() {
    this->initializeModel();
}

OAIValueMapping_displayValue::~OAIValueMapping_displayValue() {}

void OAIValueMapping_displayValue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_binding_properties_isSet = false;
    m_binding_properties_isValid = false;

    m_concat_isSet = false;
    m_concat_isValid = false;
}

void OAIValueMapping_displayValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValueMapping_displayValue::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_binding_properties_isValid = ::OpenAPI::fromJsonValue(m_binding_properties, json[QString("bindingProperties")]);
    m_binding_properties_isSet = !json[QString("bindingProperties")].isNull() && m_binding_properties_isValid;

    m_concat_isValid = ::OpenAPI::fromJsonValue(m_concat, json[QString("concat")]);
    m_concat_isSet = !json[QString("concat")].isNull() && m_concat_isValid;
}

QString OAIValueMapping_displayValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValueMapping_displayValue::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_binding_properties.isSet()) {
        obj.insert(QString("bindingProperties"), ::OpenAPI::toJsonValue(m_binding_properties));
    }
    if (m_concat.isSet()) {
        obj.insert(QString("concat"), ::OpenAPI::toJsonValue(m_concat));
    }
    return obj;
}

QString OAIValueMapping_displayValue::getValue() const {
    return m_value;
}
void OAIValueMapping_displayValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIValueMapping_displayValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIValueMapping_displayValue::is_value_Valid() const{
    return m_value_isValid;
}

OAIFormInputValueProperty_bindingProperties OAIValueMapping_displayValue::getBindingProperties() const {
    return m_binding_properties;
}
void OAIValueMapping_displayValue::setBindingProperties(const OAIFormInputValueProperty_bindingProperties &binding_properties) {
    m_binding_properties = binding_properties;
    m_binding_properties_isSet = true;
}

bool OAIValueMapping_displayValue::is_binding_properties_Set() const{
    return m_binding_properties_isSet;
}

bool OAIValueMapping_displayValue::is_binding_properties_Valid() const{
    return m_binding_properties_isValid;
}

QList OAIValueMapping_displayValue::getConcat() const {
    return m_concat;
}
void OAIValueMapping_displayValue::setConcat(const QList &concat) {
    m_concat = concat;
    m_concat_isSet = true;
}

bool OAIValueMapping_displayValue::is_concat_Set() const{
    return m_concat_isSet;
}

bool OAIValueMapping_displayValue::is_concat_Valid() const{
    return m_concat_isValid;
}

bool OAIValueMapping_displayValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binding_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_concat.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValueMapping_displayValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
