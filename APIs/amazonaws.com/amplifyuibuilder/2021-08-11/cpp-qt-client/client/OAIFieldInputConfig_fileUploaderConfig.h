/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFieldInputConfig_fileUploaderConfig.h
 *
 * 
 */

#ifndef OAIFieldInputConfig_fileUploaderConfig_H
#define OAIFieldInputConfig_fileUploaderConfig_H

#include <QJsonObject>

#include "OAIStorageAccessLevel.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFieldInputConfig_fileUploaderConfig : public OAIObject {
public:
    OAIFieldInputConfig_fileUploaderConfig();
    OAIFieldInputConfig_fileUploaderConfig(QString json);
    ~OAIFieldInputConfig_fileUploaderConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIStorageAccessLevel getAccessLevel() const;
    void setAccessLevel(const OAIStorageAccessLevel &access_level);
    bool is_access_level_Set() const;
    bool is_access_level_Valid() const;

    QList getAcceptedFileTypes() const;
    void setAcceptedFileTypes(const QList &accepted_file_types);
    bool is_accepted_file_types_Set() const;
    bool is_accepted_file_types_Valid() const;

    bool getShowThumbnails() const;
    void setShowThumbnails(const bool &show_thumbnails);
    bool is_show_thumbnails_Set() const;
    bool is_show_thumbnails_Valid() const;

    bool getIsResumable() const;
    void setIsResumable(const bool &is_resumable);
    bool is_is_resumable_Set() const;
    bool is_is_resumable_Valid() const;

    qint32 getMaxFileCount() const;
    void setMaxFileCount(const qint32 &max_file_count);
    bool is_max_file_count_Set() const;
    bool is_max_file_count_Valid() const;

    qint32 getMaxSize() const;
    void setMaxSize(const qint32 &max_size);
    bool is_max_size_Set() const;
    bool is_max_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIStorageAccessLevel m_access_level;
    bool m_access_level_isSet;
    bool m_access_level_isValid;

    QList m_accepted_file_types;
    bool m_accepted_file_types_isSet;
    bool m_accepted_file_types_isValid;

    bool m_show_thumbnails;
    bool m_show_thumbnails_isSet;
    bool m_show_thumbnails_isValid;

    bool m_is_resumable;
    bool m_is_resumable_isSet;
    bool m_is_resumable_isValid;

    qint32 m_max_file_count;
    bool m_max_file_count_isSet;
    bool m_max_file_count_isValid;

    qint32 m_max_size;
    bool m_max_size_isSet;
    bool m_max_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFieldInputConfig_fileUploaderConfig)

#endif // OAIFieldInputConfig_fileUploaderConfig_H
