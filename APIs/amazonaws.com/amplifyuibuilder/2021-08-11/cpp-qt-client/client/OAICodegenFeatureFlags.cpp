/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodegenFeatureFlags.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodegenFeatureFlags::OAICodegenFeatureFlags(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodegenFeatureFlags::OAICodegenFeatureFlags() {
    this->initializeModel();
}

OAICodegenFeatureFlags::~OAICodegenFeatureFlags() {}

void OAICodegenFeatureFlags::initializeModel() {

    m_is_relationship_supported_isSet = false;
    m_is_relationship_supported_isValid = false;

    m_is_non_model_supported_isSet = false;
    m_is_non_model_supported_isValid = false;
}

void OAICodegenFeatureFlags::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodegenFeatureFlags::fromJsonObject(QJsonObject json) {

    m_is_relationship_supported_isValid = ::OpenAPI::fromJsonValue(m_is_relationship_supported, json[QString("isRelationshipSupported")]);
    m_is_relationship_supported_isSet = !json[QString("isRelationshipSupported")].isNull() && m_is_relationship_supported_isValid;

    m_is_non_model_supported_isValid = ::OpenAPI::fromJsonValue(m_is_non_model_supported, json[QString("isNonModelSupported")]);
    m_is_non_model_supported_isSet = !json[QString("isNonModelSupported")].isNull() && m_is_non_model_supported_isValid;
}

QString OAICodegenFeatureFlags::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodegenFeatureFlags::asJsonObject() const {
    QJsonObject obj;
    if (m_is_relationship_supported_isSet) {
        obj.insert(QString("isRelationshipSupported"), ::OpenAPI::toJsonValue(m_is_relationship_supported));
    }
    if (m_is_non_model_supported_isSet) {
        obj.insert(QString("isNonModelSupported"), ::OpenAPI::toJsonValue(m_is_non_model_supported));
    }
    return obj;
}

bool OAICodegenFeatureFlags::getIsRelationshipSupported() const {
    return m_is_relationship_supported;
}
void OAICodegenFeatureFlags::setIsRelationshipSupported(const bool &is_relationship_supported) {
    m_is_relationship_supported = is_relationship_supported;
    m_is_relationship_supported_isSet = true;
}

bool OAICodegenFeatureFlags::is_is_relationship_supported_Set() const{
    return m_is_relationship_supported_isSet;
}

bool OAICodegenFeatureFlags::is_is_relationship_supported_Valid() const{
    return m_is_relationship_supported_isValid;
}

bool OAICodegenFeatureFlags::getIsNonModelSupported() const {
    return m_is_non_model_supported;
}
void OAICodegenFeatureFlags::setIsNonModelSupported(const bool &is_non_model_supported) {
    m_is_non_model_supported = is_non_model_supported;
    m_is_non_model_supported_isSet = true;
}

bool OAICodegenFeatureFlags::is_is_non_model_supported_Set() const{
    return m_is_non_model_supported_isSet;
}

bool OAICodegenFeatureFlags::is_is_non_model_supported_Valid() const{
    return m_is_non_model_supported_isValid;
}

bool OAICodegenFeatureFlags::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_relationship_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_non_model_supported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodegenFeatureFlags::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
