/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForm_style.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForm_style::OAIForm_style(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForm_style::OAIForm_style() {
    this->initializeModel();
}

OAIForm_style::~OAIForm_style() {}

void OAIForm_style::initializeModel() {

    m_horizontal_gap_isSet = false;
    m_horizontal_gap_isValid = false;

    m_vertical_gap_isSet = false;
    m_vertical_gap_isValid = false;

    m_outer_padding_isSet = false;
    m_outer_padding_isValid = false;
}

void OAIForm_style::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForm_style::fromJsonObject(QJsonObject json) {

    m_horizontal_gap_isValid = ::OpenAPI::fromJsonValue(m_horizontal_gap, json[QString("horizontalGap")]);
    m_horizontal_gap_isSet = !json[QString("horizontalGap")].isNull() && m_horizontal_gap_isValid;

    m_vertical_gap_isValid = ::OpenAPI::fromJsonValue(m_vertical_gap, json[QString("verticalGap")]);
    m_vertical_gap_isSet = !json[QString("verticalGap")].isNull() && m_vertical_gap_isValid;

    m_outer_padding_isValid = ::OpenAPI::fromJsonValue(m_outer_padding, json[QString("outerPadding")]);
    m_outer_padding_isSet = !json[QString("outerPadding")].isNull() && m_outer_padding_isValid;
}

QString OAIForm_style::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForm_style::asJsonObject() const {
    QJsonObject obj;
    if (m_horizontal_gap.isSet()) {
        obj.insert(QString("horizontalGap"), ::OpenAPI::toJsonValue(m_horizontal_gap));
    }
    if (m_vertical_gap.isSet()) {
        obj.insert(QString("verticalGap"), ::OpenAPI::toJsonValue(m_vertical_gap));
    }
    if (m_outer_padding.isSet()) {
        obj.insert(QString("outerPadding"), ::OpenAPI::toJsonValue(m_outer_padding));
    }
    return obj;
}

OAIFormStyle_horizontalGap OAIForm_style::getHorizontalGap() const {
    return m_horizontal_gap;
}
void OAIForm_style::setHorizontalGap(const OAIFormStyle_horizontalGap &horizontal_gap) {
    m_horizontal_gap = horizontal_gap;
    m_horizontal_gap_isSet = true;
}

bool OAIForm_style::is_horizontal_gap_Set() const{
    return m_horizontal_gap_isSet;
}

bool OAIForm_style::is_horizontal_gap_Valid() const{
    return m_horizontal_gap_isValid;
}

OAIFormStyle_verticalGap OAIForm_style::getVerticalGap() const {
    return m_vertical_gap;
}
void OAIForm_style::setVerticalGap(const OAIFormStyle_verticalGap &vertical_gap) {
    m_vertical_gap = vertical_gap;
    m_vertical_gap_isSet = true;
}

bool OAIForm_style::is_vertical_gap_Set() const{
    return m_vertical_gap_isSet;
}

bool OAIForm_style::is_vertical_gap_Valid() const{
    return m_vertical_gap_isValid;
}

OAIFormStyle_outerPadding OAIForm_style::getOuterPadding() const {
    return m_outer_padding;
}
void OAIForm_style::setOuterPadding(const OAIFormStyle_outerPadding &outer_padding) {
    m_outer_padding = outer_padding;
    m_outer_padding_isSet = true;
}

bool OAIForm_style::is_outer_padding_Set() const{
    return m_outer_padding_isSet;
}

bool OAIForm_style::is_outer_padding_Valid() const{
    return m_outer_padding_isValid;
}

bool OAIForm_style::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_horizontal_gap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_gap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_padding.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForm_style::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
