/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateThemeRequest_updatedTheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateThemeRequest_updatedTheme::OAIUpdateThemeRequest_updatedTheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateThemeRequest_updatedTheme::OAIUpdateThemeRequest_updatedTheme() {
    this->initializeModel();
}

OAIUpdateThemeRequest_updatedTheme::~OAIUpdateThemeRequest_updatedTheme() {}

void OAIUpdateThemeRequest_updatedTheme::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;
}

void OAIUpdateThemeRequest_updatedTheme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateThemeRequest_updatedTheme::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;
}

QString OAIUpdateThemeRequest_updatedTheme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateThemeRequest_updatedTheme::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    return obj;
}

QString OAIUpdateThemeRequest_updatedTheme::getId() const {
    return m_id;
}
void OAIUpdateThemeRequest_updatedTheme::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateThemeRequest_updatedTheme::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateThemeRequest_updatedTheme::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateThemeRequest_updatedTheme::getName() const {
    return m_name;
}
void OAIUpdateThemeRequest_updatedTheme::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateThemeRequest_updatedTheme::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateThemeRequest_updatedTheme::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIUpdateThemeRequest_updatedTheme::getValues() const {
    return m_values;
}
void OAIUpdateThemeRequest_updatedTheme::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIUpdateThemeRequest_updatedTheme::is_values_Set() const{
    return m_values_isSet;
}

bool OAIUpdateThemeRequest_updatedTheme::is_values_Valid() const{
    return m_values_isValid;
}

QList OAIUpdateThemeRequest_updatedTheme::getOverrides() const {
    return m_overrides;
}
void OAIUpdateThemeRequest_updatedTheme::setOverrides(const QList &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIUpdateThemeRequest_updatedTheme::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIUpdateThemeRequest_updatedTheme::is_overrides_Valid() const{
    return m_overrides_isValid;
}

bool OAIUpdateThemeRequest_updatedTheme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateThemeRequest_updatedTheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_values_isValid && true;
}

} // namespace OpenAPI
