/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodegenGenericDataModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodegenGenericDataModel::OAICodegenGenericDataModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodegenGenericDataModel::OAICodegenGenericDataModel() {
    this->initializeModel();
}

OAICodegenGenericDataModel::~OAICodegenGenericDataModel() {}

void OAICodegenGenericDataModel::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_is_join_table_isSet = false;
    m_is_join_table_isValid = false;

    m_primary_keys_isSet = false;
    m_primary_keys_isValid = false;
}

void OAICodegenGenericDataModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodegenGenericDataModel::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_is_join_table_isValid = ::OpenAPI::fromJsonValue(m_is_join_table, json[QString("isJoinTable")]);
    m_is_join_table_isSet = !json[QString("isJoinTable")].isNull() && m_is_join_table_isValid;

    m_primary_keys_isValid = ::OpenAPI::fromJsonValue(m_primary_keys, json[QString("primaryKeys")]);
    m_primary_keys_isSet = !json[QString("primaryKeys")].isNull() && m_primary_keys_isValid;
}

QString OAICodegenGenericDataModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodegenGenericDataModel::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.isSet()) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_is_join_table_isSet) {
        obj.insert(QString("isJoinTable"), ::OpenAPI::toJsonValue(m_is_join_table));
    }
    if (m_primary_keys.isSet()) {
        obj.insert(QString("primaryKeys"), ::OpenAPI::toJsonValue(m_primary_keys));
    }
    return obj;
}

QMap OAICodegenGenericDataModel::getFields() const {
    return m_fields;
}
void OAICodegenGenericDataModel::setFields(const QMap &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAICodegenGenericDataModel::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAICodegenGenericDataModel::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAICodegenGenericDataModel::getIsJoinTable() const {
    return m_is_join_table;
}
void OAICodegenGenericDataModel::setIsJoinTable(const bool &is_join_table) {
    m_is_join_table = is_join_table;
    m_is_join_table_isSet = true;
}

bool OAICodegenGenericDataModel::is_is_join_table_Set() const{
    return m_is_join_table_isSet;
}

bool OAICodegenGenericDataModel::is_is_join_table_Valid() const{
    return m_is_join_table_isValid;
}

QList OAICodegenGenericDataModel::getPrimaryKeys() const {
    return m_primary_keys;
}
void OAICodegenGenericDataModel::setPrimaryKeys(const QList &primary_keys) {
    m_primary_keys = primary_keys;
    m_primary_keys_isSet = true;
}

bool OAICodegenGenericDataModel::is_primary_keys_Set() const{
    return m_primary_keys_isSet;
}

bool OAICodegenGenericDataModel::is_primary_keys_Valid() const{
    return m_primary_keys_isValid;
}

bool OAICodegenGenericDataModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_join_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodegenGenericDataModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fields_isValid && m_primary_keys_isValid && true;
}

} // namespace OpenAPI
