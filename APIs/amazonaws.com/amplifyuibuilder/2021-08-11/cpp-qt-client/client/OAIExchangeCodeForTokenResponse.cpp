/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExchangeCodeForTokenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExchangeCodeForTokenResponse::OAIExchangeCodeForTokenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExchangeCodeForTokenResponse::OAIExchangeCodeForTokenResponse() {
    this->initializeModel();
}

OAIExchangeCodeForTokenResponse::~OAIExchangeCodeForTokenResponse() {}

void OAIExchangeCodeForTokenResponse::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;
}

void OAIExchangeCodeForTokenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExchangeCodeForTokenResponse::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;
}

QString OAIExchangeCodeForTokenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExchangeCodeForTokenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    return obj;
}

QString OAIExchangeCodeForTokenResponse::getAccessToken() const {
    return m_access_token;
}
void OAIExchangeCodeForTokenResponse::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIExchangeCodeForTokenResponse::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIExchangeCodeForTokenResponse::is_access_token_Valid() const{
    return m_access_token_isValid;
}

qint32 OAIExchangeCodeForTokenResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAIExchangeCodeForTokenResponse::setExpiresIn(const qint32 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIExchangeCodeForTokenResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIExchangeCodeForTokenResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIExchangeCodeForTokenResponse::getRefreshToken() const {
    return m_refresh_token;
}
void OAIExchangeCodeForTokenResponse::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIExchangeCodeForTokenResponse::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIExchangeCodeForTokenResponse::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAIExchangeCodeForTokenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExchangeCodeForTokenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_isValid && m_expires_in_isValid && m_refresh_token_isValid && true;
}

} // namespace OpenAPI
