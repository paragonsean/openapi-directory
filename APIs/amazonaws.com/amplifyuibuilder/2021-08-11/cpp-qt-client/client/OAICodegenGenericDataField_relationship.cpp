/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodegenGenericDataField_relationship.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodegenGenericDataField_relationship::OAICodegenGenericDataField_relationship(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodegenGenericDataField_relationship::OAICodegenGenericDataField_relationship() {
    this->initializeModel();
}

OAICodegenGenericDataField_relationship::~OAICodegenGenericDataField_relationship() {}

void OAICodegenGenericDataField_relationship::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_related_model_name_isSet = false;
    m_related_model_name_isValid = false;

    m_related_model_fields_isSet = false;
    m_related_model_fields_isValid = false;

    m_can_unlink_associated_model_isSet = false;
    m_can_unlink_associated_model_isValid = false;

    m_related_join_field_name_isSet = false;
    m_related_join_field_name_isValid = false;

    m_related_join_table_name_isSet = false;
    m_related_join_table_name_isValid = false;

    m_belongs_to_field_on_related_model_isSet = false;
    m_belongs_to_field_on_related_model_isValid = false;

    m_associated_fields_isSet = false;
    m_associated_fields_isValid = false;

    m_is_has_many_index_isSet = false;
    m_is_has_many_index_isValid = false;
}

void OAICodegenGenericDataField_relationship::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodegenGenericDataField_relationship::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_related_model_name_isValid = ::OpenAPI::fromJsonValue(m_related_model_name, json[QString("relatedModelName")]);
    m_related_model_name_isSet = !json[QString("relatedModelName")].isNull() && m_related_model_name_isValid;

    m_related_model_fields_isValid = ::OpenAPI::fromJsonValue(m_related_model_fields, json[QString("relatedModelFields")]);
    m_related_model_fields_isSet = !json[QString("relatedModelFields")].isNull() && m_related_model_fields_isValid;

    m_can_unlink_associated_model_isValid = ::OpenAPI::fromJsonValue(m_can_unlink_associated_model, json[QString("canUnlinkAssociatedModel")]);
    m_can_unlink_associated_model_isSet = !json[QString("canUnlinkAssociatedModel")].isNull() && m_can_unlink_associated_model_isValid;

    m_related_join_field_name_isValid = ::OpenAPI::fromJsonValue(m_related_join_field_name, json[QString("relatedJoinFieldName")]);
    m_related_join_field_name_isSet = !json[QString("relatedJoinFieldName")].isNull() && m_related_join_field_name_isValid;

    m_related_join_table_name_isValid = ::OpenAPI::fromJsonValue(m_related_join_table_name, json[QString("relatedJoinTableName")]);
    m_related_join_table_name_isSet = !json[QString("relatedJoinTableName")].isNull() && m_related_join_table_name_isValid;

    m_belongs_to_field_on_related_model_isValid = ::OpenAPI::fromJsonValue(m_belongs_to_field_on_related_model, json[QString("belongsToFieldOnRelatedModel")]);
    m_belongs_to_field_on_related_model_isSet = !json[QString("belongsToFieldOnRelatedModel")].isNull() && m_belongs_to_field_on_related_model_isValid;

    m_associated_fields_isValid = ::OpenAPI::fromJsonValue(m_associated_fields, json[QString("associatedFields")]);
    m_associated_fields_isSet = !json[QString("associatedFields")].isNull() && m_associated_fields_isValid;

    m_is_has_many_index_isValid = ::OpenAPI::fromJsonValue(m_is_has_many_index, json[QString("isHasManyIndex")]);
    m_is_has_many_index_isSet = !json[QString("isHasManyIndex")].isNull() && m_is_has_many_index_isValid;
}

QString OAICodegenGenericDataField_relationship::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodegenGenericDataField_relationship::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_related_model_name_isSet) {
        obj.insert(QString("relatedModelName"), ::OpenAPI::toJsonValue(m_related_model_name));
    }
    if (m_related_model_fields.isSet()) {
        obj.insert(QString("relatedModelFields"), ::OpenAPI::toJsonValue(m_related_model_fields));
    }
    if (m_can_unlink_associated_model_isSet) {
        obj.insert(QString("canUnlinkAssociatedModel"), ::OpenAPI::toJsonValue(m_can_unlink_associated_model));
    }
    if (m_related_join_field_name_isSet) {
        obj.insert(QString("relatedJoinFieldName"), ::OpenAPI::toJsonValue(m_related_join_field_name));
    }
    if (m_related_join_table_name_isSet) {
        obj.insert(QString("relatedJoinTableName"), ::OpenAPI::toJsonValue(m_related_join_table_name));
    }
    if (m_belongs_to_field_on_related_model_isSet) {
        obj.insert(QString("belongsToFieldOnRelatedModel"), ::OpenAPI::toJsonValue(m_belongs_to_field_on_related_model));
    }
    if (m_associated_fields.isSet()) {
        obj.insert(QString("associatedFields"), ::OpenAPI::toJsonValue(m_associated_fields));
    }
    if (m_is_has_many_index_isSet) {
        obj.insert(QString("isHasManyIndex"), ::OpenAPI::toJsonValue(m_is_has_many_index));
    }
    return obj;
}

OAIGenericDataRelationshipType OAICodegenGenericDataField_relationship::getType() const {
    return m_type;
}
void OAICodegenGenericDataField_relationship::setType(const OAIGenericDataRelationshipType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICodegenGenericDataField_relationship::is_type_Set() const{
    return m_type_isSet;
}

bool OAICodegenGenericDataField_relationship::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICodegenGenericDataField_relationship::getRelatedModelName() const {
    return m_related_model_name;
}
void OAICodegenGenericDataField_relationship::setRelatedModelName(const QString &related_model_name) {
    m_related_model_name = related_model_name;
    m_related_model_name_isSet = true;
}

bool OAICodegenGenericDataField_relationship::is_related_model_name_Set() const{
    return m_related_model_name_isSet;
}

bool OAICodegenGenericDataField_relationship::is_related_model_name_Valid() const{
    return m_related_model_name_isValid;
}

QList OAICodegenGenericDataField_relationship::getRelatedModelFields() const {
    return m_related_model_fields;
}
void OAICodegenGenericDataField_relationship::setRelatedModelFields(const QList &related_model_fields) {
    m_related_model_fields = related_model_fields;
    m_related_model_fields_isSet = true;
}

bool OAICodegenGenericDataField_relationship::is_related_model_fields_Set() const{
    return m_related_model_fields_isSet;
}

bool OAICodegenGenericDataField_relationship::is_related_model_fields_Valid() const{
    return m_related_model_fields_isValid;
}

bool OAICodegenGenericDataField_relationship::getCanUnlinkAssociatedModel() const {
    return m_can_unlink_associated_model;
}
void OAICodegenGenericDataField_relationship::setCanUnlinkAssociatedModel(const bool &can_unlink_associated_model) {
    m_can_unlink_associated_model = can_unlink_associated_model;
    m_can_unlink_associated_model_isSet = true;
}

bool OAICodegenGenericDataField_relationship::is_can_unlink_associated_model_Set() const{
    return m_can_unlink_associated_model_isSet;
}

bool OAICodegenGenericDataField_relationship::is_can_unlink_associated_model_Valid() const{
    return m_can_unlink_associated_model_isValid;
}

QString OAICodegenGenericDataField_relationship::getRelatedJoinFieldName() const {
    return m_related_join_field_name;
}
void OAICodegenGenericDataField_relationship::setRelatedJoinFieldName(const QString &related_join_field_name) {
    m_related_join_field_name = related_join_field_name;
    m_related_join_field_name_isSet = true;
}

bool OAICodegenGenericDataField_relationship::is_related_join_field_name_Set() const{
    return m_related_join_field_name_isSet;
}

bool OAICodegenGenericDataField_relationship::is_related_join_field_name_Valid() const{
    return m_related_join_field_name_isValid;
}

QString OAICodegenGenericDataField_relationship::getRelatedJoinTableName() const {
    return m_related_join_table_name;
}
void OAICodegenGenericDataField_relationship::setRelatedJoinTableName(const QString &related_join_table_name) {
    m_related_join_table_name = related_join_table_name;
    m_related_join_table_name_isSet = true;
}

bool OAICodegenGenericDataField_relationship::is_related_join_table_name_Set() const{
    return m_related_join_table_name_isSet;
}

bool OAICodegenGenericDataField_relationship::is_related_join_table_name_Valid() const{
    return m_related_join_table_name_isValid;
}

QString OAICodegenGenericDataField_relationship::getBelongsToFieldOnRelatedModel() const {
    return m_belongs_to_field_on_related_model;
}
void OAICodegenGenericDataField_relationship::setBelongsToFieldOnRelatedModel(const QString &belongs_to_field_on_related_model) {
    m_belongs_to_field_on_related_model = belongs_to_field_on_related_model;
    m_belongs_to_field_on_related_model_isSet = true;
}

bool OAICodegenGenericDataField_relationship::is_belongs_to_field_on_related_model_Set() const{
    return m_belongs_to_field_on_related_model_isSet;
}

bool OAICodegenGenericDataField_relationship::is_belongs_to_field_on_related_model_Valid() const{
    return m_belongs_to_field_on_related_model_isValid;
}

QList OAICodegenGenericDataField_relationship::getAssociatedFields() const {
    return m_associated_fields;
}
void OAICodegenGenericDataField_relationship::setAssociatedFields(const QList &associated_fields) {
    m_associated_fields = associated_fields;
    m_associated_fields_isSet = true;
}

bool OAICodegenGenericDataField_relationship::is_associated_fields_Set() const{
    return m_associated_fields_isSet;
}

bool OAICodegenGenericDataField_relationship::is_associated_fields_Valid() const{
    return m_associated_fields_isValid;
}

bool OAICodegenGenericDataField_relationship::getIsHasManyIndex() const {
    return m_is_has_many_index;
}
void OAICodegenGenericDataField_relationship::setIsHasManyIndex(const bool &is_has_many_index) {
    m_is_has_many_index = is_has_many_index;
    m_is_has_many_index_isSet = true;
}

bool OAICodegenGenericDataField_relationship::is_is_has_many_index_Set() const{
    return m_is_has_many_index_isSet;
}

bool OAICodegenGenericDataField_relationship::is_is_has_many_index_Valid() const{
    return m_is_has_many_index_isValid;
}

bool OAICodegenGenericDataField_relationship::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_model_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_unlink_associated_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_join_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_join_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_belongs_to_field_on_related_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_has_many_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodegenGenericDataField_relationship::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_related_model_name_isValid && true;
}

} // namespace OpenAPI
