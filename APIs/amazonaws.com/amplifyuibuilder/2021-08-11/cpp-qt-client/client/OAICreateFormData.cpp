/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFormData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFormData::OAICreateFormData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFormData::OAICreateFormData() {
    this->initializeModel();
}

OAICreateFormData::~OAICreateFormData() {}

void OAICreateFormData::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_form_action_type_isSet = false;
    m_form_action_type_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_sectional_elements_isSet = false;
    m_sectional_elements_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_cta_isSet = false;
    m_cta_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_label_decorator_isSet = false;
    m_label_decorator_isValid = false;
}

void OAICreateFormData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFormData::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_form_action_type_isValid = ::OpenAPI::fromJsonValue(m_form_action_type, json[QString("formActionType")]);
    m_form_action_type_isSet = !json[QString("formActionType")].isNull() && m_form_action_type_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_sectional_elements_isValid = ::OpenAPI::fromJsonValue(m_sectional_elements, json[QString("sectionalElements")]);
    m_sectional_elements_isSet = !json[QString("sectionalElements")].isNull() && m_sectional_elements_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;

    m_cta_isValid = ::OpenAPI::fromJsonValue(m_cta, json[QString("cta")]);
    m_cta_isSet = !json[QString("cta")].isNull() && m_cta_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_label_decorator_isValid = ::OpenAPI::fromJsonValue(m_label_decorator, json[QString("labelDecorator")]);
    m_label_decorator_isSet = !json[QString("labelDecorator")].isNull() && m_label_decorator_isValid;
}

QString OAICreateFormData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFormData::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_data_type.isSet()) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_form_action_type.isSet()) {
        obj.insert(QString("formActionType"), ::OpenAPI::toJsonValue(m_form_action_type));
    }
    if (m_fields.isSet()) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_style.isSet()) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_sectional_elements.isSet()) {
        obj.insert(QString("sectionalElements"), ::OpenAPI::toJsonValue(m_sectional_elements));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_cta.isSet()) {
        obj.insert(QString("cta"), ::OpenAPI::toJsonValue(m_cta));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_label_decorator.isSet()) {
        obj.insert(QString("labelDecorator"), ::OpenAPI::toJsonValue(m_label_decorator));
    }
    return obj;
}

QString OAICreateFormData::getName() const {
    return m_name;
}
void OAICreateFormData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFormData::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFormData::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateForm_request_formToCreate_dataType OAICreateFormData::getDataType() const {
    return m_data_type;
}
void OAICreateFormData::setDataType(const OAICreateForm_request_formToCreate_dataType &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAICreateFormData::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAICreateFormData::is_data_type_Valid() const{
    return m_data_type_isValid;
}

OAIFormActionType OAICreateFormData::getFormActionType() const {
    return m_form_action_type;
}
void OAICreateFormData::setFormActionType(const OAIFormActionType &form_action_type) {
    m_form_action_type = form_action_type;
    m_form_action_type_isSet = true;
}

bool OAICreateFormData::is_form_action_type_Set() const{
    return m_form_action_type_isSet;
}

bool OAICreateFormData::is_form_action_type_Valid() const{
    return m_form_action_type_isValid;
}

QMap OAICreateFormData::getFields() const {
    return m_fields;
}
void OAICreateFormData::setFields(const QMap &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAICreateFormData::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAICreateFormData::is_fields_Valid() const{
    return m_fields_isValid;
}

OAICreateForm_request_formToCreate_style OAICreateFormData::getStyle() const {
    return m_style;
}
void OAICreateFormData::setStyle(const OAICreateForm_request_formToCreate_style &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAICreateFormData::is_style_Set() const{
    return m_style_isSet;
}

bool OAICreateFormData::is_style_Valid() const{
    return m_style_isValid;
}

QMap OAICreateFormData::getSectionalElements() const {
    return m_sectional_elements;
}
void OAICreateFormData::setSectionalElements(const QMap &sectional_elements) {
    m_sectional_elements = sectional_elements;
    m_sectional_elements_isSet = true;
}

bool OAICreateFormData::is_sectional_elements_Set() const{
    return m_sectional_elements_isSet;
}

bool OAICreateFormData::is_sectional_elements_Valid() const{
    return m_sectional_elements_isValid;
}

QString OAICreateFormData::getSchemaVersion() const {
    return m_schema_version;
}
void OAICreateFormData::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAICreateFormData::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAICreateFormData::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

OAICreateForm_request_formToCreate_cta OAICreateFormData::getCta() const {
    return m_cta;
}
void OAICreateFormData::setCta(const OAICreateForm_request_formToCreate_cta &cta) {
    m_cta = cta;
    m_cta_isSet = true;
}

bool OAICreateFormData::is_cta_Set() const{
    return m_cta_isSet;
}

bool OAICreateFormData::is_cta_Valid() const{
    return m_cta_isValid;
}

QMap OAICreateFormData::getTags() const {
    return m_tags;
}
void OAICreateFormData::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFormData::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFormData::is_tags_Valid() const{
    return m_tags_isValid;
}

OAILabelDecorator OAICreateFormData::getLabelDecorator() const {
    return m_label_decorator;
}
void OAICreateFormData::setLabelDecorator(const OAILabelDecorator &label_decorator) {
    m_label_decorator = label_decorator;
    m_label_decorator_isSet = true;
}

bool OAICreateFormData::is_label_decorator_Set() const{
    return m_label_decorator_isSet;
}

bool OAICreateFormData::is_label_decorator_Valid() const{
    return m_label_decorator_isValid;
}

bool OAICreateFormData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sectional_elements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_decorator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFormData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_data_type_isValid && m_form_action_type_isValid && m_fields_isValid && m_style_isValid && m_sectional_elements_isValid && m_schema_version_isValid && true;
}

} // namespace OpenAPI
