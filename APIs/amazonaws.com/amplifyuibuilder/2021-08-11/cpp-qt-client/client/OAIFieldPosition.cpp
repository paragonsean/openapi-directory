/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldPosition::OAIFieldPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldPosition::OAIFieldPosition() {
    this->initializeModel();
}

OAIFieldPosition::~OAIFieldPosition() {}

void OAIFieldPosition::initializeModel() {

    m_fixed_isSet = false;
    m_fixed_isValid = false;

    m_right_of_isSet = false;
    m_right_of_isValid = false;

    m_below_isSet = false;
    m_below_isValid = false;
}

void OAIFieldPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldPosition::fromJsonObject(QJsonObject json) {

    m_fixed_isValid = ::OpenAPI::fromJsonValue(m_fixed, json[QString("fixed")]);
    m_fixed_isSet = !json[QString("fixed")].isNull() && m_fixed_isValid;

    m_right_of_isValid = ::OpenAPI::fromJsonValue(m_right_of, json[QString("rightOf")]);
    m_right_of_isSet = !json[QString("rightOf")].isNull() && m_right_of_isValid;

    m_below_isValid = ::OpenAPI::fromJsonValue(m_below, json[QString("below")]);
    m_below_isSet = !json[QString("below")].isNull() && m_below_isValid;
}

QString OAIFieldPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_fixed.isSet()) {
        obj.insert(QString("fixed"), ::OpenAPI::toJsonValue(m_fixed));
    }
    if (m_right_of_isSet) {
        obj.insert(QString("rightOf"), ::OpenAPI::toJsonValue(m_right_of));
    }
    if (m_below_isSet) {
        obj.insert(QString("below"), ::OpenAPI::toJsonValue(m_below));
    }
    return obj;
}

OAIFixedPosition OAIFieldPosition::getFixed() const {
    return m_fixed;
}
void OAIFieldPosition::setFixed(const OAIFixedPosition &fixed) {
    m_fixed = fixed;
    m_fixed_isSet = true;
}

bool OAIFieldPosition::is_fixed_Set() const{
    return m_fixed_isSet;
}

bool OAIFieldPosition::is_fixed_Valid() const{
    return m_fixed_isValid;
}

QString OAIFieldPosition::getRightOf() const {
    return m_right_of;
}
void OAIFieldPosition::setRightOf(const QString &right_of) {
    m_right_of = right_of;
    m_right_of_isSet = true;
}

bool OAIFieldPosition::is_right_of_Set() const{
    return m_right_of_isSet;
}

bool OAIFieldPosition::is_right_of_Valid() const{
    return m_right_of_isValid;
}

QString OAIFieldPosition::getBelow() const {
    return m_below;
}
void OAIFieldPosition::setBelow(const QString &below) {
    m_below = below;
    m_below_isSet = true;
}

bool OAIFieldPosition::is_below_Set() const{
    return m_below_isSet;
}

bool OAIFieldPosition::is_below_Valid() const{
    return m_below_isValid;
}

bool OAIFieldPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_below_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
