/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentDataConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentDataConfiguration::OAIComponentDataConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentDataConfiguration::OAIComponentDataConfiguration() {
    this->initializeModel();
}

OAIComponentDataConfiguration::~OAIComponentDataConfiguration() {}

void OAIComponentDataConfiguration::initializeModel() {

    m_model_isSet = false;
    m_model_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_predicate_isSet = false;
    m_predicate_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;
}

void OAIComponentDataConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentDataConfiguration::fromJsonObject(QJsonObject json) {

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_predicate_isValid = ::OpenAPI::fromJsonValue(m_predicate, json[QString("predicate")]);
    m_predicate_isSet = !json[QString("predicate")].isNull() && m_predicate_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;
}

QString OAIComponentDataConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentDataConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_predicate.isSet()) {
        obj.insert(QString("predicate"), ::OpenAPI::toJsonValue(m_predicate));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    return obj;
}

QString OAIComponentDataConfiguration::getModel() const {
    return m_model;
}
void OAIComponentDataConfiguration::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIComponentDataConfiguration::is_model_Set() const{
    return m_model_isSet;
}

bool OAIComponentDataConfiguration::is_model_Valid() const{
    return m_model_isValid;
}

QList OAIComponentDataConfiguration::getSort() const {
    return m_sort;
}
void OAIComponentDataConfiguration::setSort(const QList &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIComponentDataConfiguration::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIComponentDataConfiguration::is_sort_Valid() const{
    return m_sort_isValid;
}

OAIComponentDataConfiguration_predicate OAIComponentDataConfiguration::getPredicate() const {
    return m_predicate;
}
void OAIComponentDataConfiguration::setPredicate(const OAIComponentDataConfiguration_predicate &predicate) {
    m_predicate = predicate;
    m_predicate_isSet = true;
}

bool OAIComponentDataConfiguration::is_predicate_Set() const{
    return m_predicate_isSet;
}

bool OAIComponentDataConfiguration::is_predicate_Valid() const{
    return m_predicate_isValid;
}

QList OAIComponentDataConfiguration::getIdentifiers() const {
    return m_identifiers;
}
void OAIComponentDataConfiguration::setIdentifiers(const QList &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIComponentDataConfiguration::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIComponentDataConfiguration::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

bool OAIComponentDataConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentDataConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_isValid && true;
}

} // namespace OpenAPI
