/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComponentEvent_parameters.h
 *
 * 
 */

#ifndef OAIComponentEvent_parameters_H
#define OAIComponentEvent_parameters_H

#include <QJsonObject>

#include "OAIActionParameters_anchor.h"
#include "OAIActionParameters_global.h"
#include "OAIActionParameters_id.h"
#include "OAIActionParameters_state.h"
#include "OAIActionParameters_target.h"
#include "OAIActionParameters_type.h"
#include "OAIActionParameters_url.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIActionParameters_type;
class OAIActionParameters_url;
class OAIActionParameters_anchor;
class OAIActionParameters_target;
class OAIActionParameters_global;
class OAIActionParameters_id;
class OAIActionParameters_state;

class OAIComponentEvent_parameters : public OAIObject {
public:
    OAIComponentEvent_parameters();
    OAIComponentEvent_parameters(QString json);
    ~OAIComponentEvent_parameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIActionParameters_type getType() const;
    void setType(const OAIActionParameters_type &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIActionParameters_url getUrl() const;
    void setUrl(const OAIActionParameters_url &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    OAIActionParameters_anchor getAnchor() const;
    void setAnchor(const OAIActionParameters_anchor &anchor);
    bool is_anchor_Set() const;
    bool is_anchor_Valid() const;

    OAIActionParameters_target getTarget() const;
    void setTarget(const OAIActionParameters_target &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    OAIActionParameters_global getGlobal() const;
    void setGlobal(const OAIActionParameters_global &global);
    bool is_global_Set() const;
    bool is_global_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    OAIActionParameters_id getId() const;
    void setId(const OAIActionParameters_id &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QMap getFields() const;
    void setFields(const QMap &fields);
    bool is_fields_Set() const;
    bool is_fields_Valid() const;

    OAIActionParameters_state getState() const;
    void setState(const OAIActionParameters_state &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIActionParameters_type m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIActionParameters_url m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    OAIActionParameters_anchor m_anchor;
    bool m_anchor_isSet;
    bool m_anchor_isValid;

    OAIActionParameters_target m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    OAIActionParameters_global m_global;
    bool m_global_isSet;
    bool m_global_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    OAIActionParameters_id m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QMap m_fields;
    bool m_fields_isSet;
    bool m_fields_isValid;

    OAIActionParameters_state m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComponentEvent_parameters)

#endif // OAIComponentEvent_parameters_H
