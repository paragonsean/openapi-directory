/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodegenJobGenericDataSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodegenJobGenericDataSchema::OAICodegenJobGenericDataSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodegenJobGenericDataSchema::OAICodegenJobGenericDataSchema() {
    this->initializeModel();
}

OAICodegenJobGenericDataSchema::~OAICodegenJobGenericDataSchema() {}

void OAICodegenJobGenericDataSchema::initializeModel() {

    m_data_source_type_isSet = false;
    m_data_source_type_isValid = false;

    m_models_isSet = false;
    m_models_isValid = false;

    m_enums_isSet = false;
    m_enums_isValid = false;

    m_non_models_isSet = false;
    m_non_models_isValid = false;
}

void OAICodegenJobGenericDataSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodegenJobGenericDataSchema::fromJsonObject(QJsonObject json) {

    m_data_source_type_isValid = ::OpenAPI::fromJsonValue(m_data_source_type, json[QString("dataSourceType")]);
    m_data_source_type_isSet = !json[QString("dataSourceType")].isNull() && m_data_source_type_isValid;

    m_models_isValid = ::OpenAPI::fromJsonValue(m_models, json[QString("models")]);
    m_models_isSet = !json[QString("models")].isNull() && m_models_isValid;

    m_enums_isValid = ::OpenAPI::fromJsonValue(m_enums, json[QString("enums")]);
    m_enums_isSet = !json[QString("enums")].isNull() && m_enums_isValid;

    m_non_models_isValid = ::OpenAPI::fromJsonValue(m_non_models, json[QString("nonModels")]);
    m_non_models_isSet = !json[QString("nonModels")].isNull() && m_non_models_isValid;
}

QString OAICodegenJobGenericDataSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodegenJobGenericDataSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_type.isSet()) {
        obj.insert(QString("dataSourceType"), ::OpenAPI::toJsonValue(m_data_source_type));
    }
    if (m_models.isSet()) {
        obj.insert(QString("models"), ::OpenAPI::toJsonValue(m_models));
    }
    if (m_enums.isSet()) {
        obj.insert(QString("enums"), ::OpenAPI::toJsonValue(m_enums));
    }
    if (m_non_models.isSet()) {
        obj.insert(QString("nonModels"), ::OpenAPI::toJsonValue(m_non_models));
    }
    return obj;
}

OAICodegenJobGenericDataSourceType OAICodegenJobGenericDataSchema::getDataSourceType() const {
    return m_data_source_type;
}
void OAICodegenJobGenericDataSchema::setDataSourceType(const OAICodegenJobGenericDataSourceType &data_source_type) {
    m_data_source_type = data_source_type;
    m_data_source_type_isSet = true;
}

bool OAICodegenJobGenericDataSchema::is_data_source_type_Set() const{
    return m_data_source_type_isSet;
}

bool OAICodegenJobGenericDataSchema::is_data_source_type_Valid() const{
    return m_data_source_type_isValid;
}

QMap OAICodegenJobGenericDataSchema::getModels() const {
    return m_models;
}
void OAICodegenJobGenericDataSchema::setModels(const QMap &models) {
    m_models = models;
    m_models_isSet = true;
}

bool OAICodegenJobGenericDataSchema::is_models_Set() const{
    return m_models_isSet;
}

bool OAICodegenJobGenericDataSchema::is_models_Valid() const{
    return m_models_isValid;
}

QMap OAICodegenJobGenericDataSchema::getEnums() const {
    return m_enums;
}
void OAICodegenJobGenericDataSchema::setEnums(const QMap &enums) {
    m_enums = enums;
    m_enums_isSet = true;
}

bool OAICodegenJobGenericDataSchema::is_enums_Set() const{
    return m_enums_isSet;
}

bool OAICodegenJobGenericDataSchema::is_enums_Valid() const{
    return m_enums_isValid;
}

QMap OAICodegenJobGenericDataSchema::getNonModels() const {
    return m_non_models;
}
void OAICodegenJobGenericDataSchema::setNonModels(const QMap &non_models) {
    m_non_models = non_models;
    m_non_models_isSet = true;
}

bool OAICodegenJobGenericDataSchema::is_non_models_Set() const{
    return m_non_models_isSet;
}

bool OAICodegenJobGenericDataSchema::is_non_models_Valid() const{
    return m_non_models_isValid;
}

bool OAICodegenJobGenericDataSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_models.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enums.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_models.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodegenJobGenericDataSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_type_isValid && m_models_isValid && m_enums_isValid && m_non_models_isValid && true;
}

} // namespace OpenAPI
