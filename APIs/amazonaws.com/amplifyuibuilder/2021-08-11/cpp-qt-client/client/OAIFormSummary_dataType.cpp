/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormSummary_dataType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormSummary_dataType::OAIFormSummary_dataType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormSummary_dataType::OAIFormSummary_dataType() {
    this->initializeModel();
}

OAIFormSummary_dataType::~OAIFormSummary_dataType() {}

void OAIFormSummary_dataType::initializeModel() {

    m_data_source_type_isSet = false;
    m_data_source_type_isValid = false;

    m_data_type_name_isSet = false;
    m_data_type_name_isValid = false;
}

void OAIFormSummary_dataType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormSummary_dataType::fromJsonObject(QJsonObject json) {

    m_data_source_type_isValid = ::OpenAPI::fromJsonValue(m_data_source_type, json[QString("dataSourceType")]);
    m_data_source_type_isSet = !json[QString("dataSourceType")].isNull() && m_data_source_type_isValid;

    m_data_type_name_isValid = ::OpenAPI::fromJsonValue(m_data_type_name, json[QString("dataTypeName")]);
    m_data_type_name_isSet = !json[QString("dataTypeName")].isNull() && m_data_type_name_isValid;
}

QString OAIFormSummary_dataType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormSummary_dataType::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_type.isSet()) {
        obj.insert(QString("dataSourceType"), ::OpenAPI::toJsonValue(m_data_source_type));
    }
    if (m_data_type_name_isSet) {
        obj.insert(QString("dataTypeName"), ::OpenAPI::toJsonValue(m_data_type_name));
    }
    return obj;
}

OAIFormDataSourceType OAIFormSummary_dataType::getDataSourceType() const {
    return m_data_source_type;
}
void OAIFormSummary_dataType::setDataSourceType(const OAIFormDataSourceType &data_source_type) {
    m_data_source_type = data_source_type;
    m_data_source_type_isSet = true;
}

bool OAIFormSummary_dataType::is_data_source_type_Set() const{
    return m_data_source_type_isSet;
}

bool OAIFormSummary_dataType::is_data_source_type_Valid() const{
    return m_data_source_type_isValid;
}

QString OAIFormSummary_dataType::getDataTypeName() const {
    return m_data_type_name;
}
void OAIFormSummary_dataType::setDataTypeName(const QString &data_type_name) {
    m_data_type_name = data_type_name;
    m_data_type_name_isSet = true;
}

bool OAIFormSummary_dataType::is_data_type_name_Set() const{
    return m_data_type_name_isSet;
}

bool OAIFormSummary_dataType::is_data_type_name_Valid() const{
    return m_data_type_name_isValid;
}

bool OAIFormSummary_dataType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormSummary_dataType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_type_isValid && m_data_type_name_isValid && true;
}

} // namespace OpenAPI
