/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentProperty_condition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentProperty_condition::OAIComponentProperty_condition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentProperty_condition::OAIComponentProperty_condition() {
    this->initializeModel();
}

OAIComponentProperty_condition::~OAIComponentProperty_condition() {}

void OAIComponentProperty_condition::initializeModel() {

    m_property_isSet = false;
    m_property_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_operand_isSet = false;
    m_operand_isValid = false;

    m_then_isSet = false;
    m_then_isValid = false;

    m_r_else_isSet = false;
    m_r_else_isValid = false;

    m_operand_type_isSet = false;
    m_operand_type_isValid = false;
}

void OAIComponentProperty_condition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentProperty_condition::fromJsonObject(QJsonObject json) {

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_operand_isValid = ::OpenAPI::fromJsonValue(m_operand, json[QString("operand")]);
    m_operand_isSet = !json[QString("operand")].isNull() && m_operand_isValid;

    m_then_isValid = ::OpenAPI::fromJsonValue(m_then, json[QString("then")]);
    m_then_isSet = !json[QString("then")].isNull() && m_then_isValid;

    m_r_else_isValid = ::OpenAPI::fromJsonValue(m_r_else, json[QString("else")]);
    m_r_else_isSet = !json[QString("else")].isNull() && m_r_else_isValid;

    m_operand_type_isValid = ::OpenAPI::fromJsonValue(m_operand_type, json[QString("operandType")]);
    m_operand_type_isSet = !json[QString("operandType")].isNull() && m_operand_type_isValid;
}

QString OAIComponentProperty_condition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentProperty_condition::asJsonObject() const {
    QJsonObject obj;
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_operand_isSet) {
        obj.insert(QString("operand"), ::OpenAPI::toJsonValue(m_operand));
    }
    if (m_then.isSet()) {
        obj.insert(QString("then"), ::OpenAPI::toJsonValue(m_then));
    }
    if (m_r_else.isSet()) {
        obj.insert(QString("else"), ::OpenAPI::toJsonValue(m_r_else));
    }
    if (m_operand_type_isSet) {
        obj.insert(QString("operandType"), ::OpenAPI::toJsonValue(m_operand_type));
    }
    return obj;
}

QString OAIComponentProperty_condition::getProperty() const {
    return m_property;
}
void OAIComponentProperty_condition::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIComponentProperty_condition::is_property_Set() const{
    return m_property_isSet;
}

bool OAIComponentProperty_condition::is_property_Valid() const{
    return m_property_isValid;
}

QString OAIComponentProperty_condition::getField() const {
    return m_field;
}
void OAIComponentProperty_condition::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIComponentProperty_condition::is_field_Set() const{
    return m_field_isSet;
}

bool OAIComponentProperty_condition::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIComponentProperty_condition::getROperator() const {
    return m_r_operator;
}
void OAIComponentProperty_condition::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIComponentProperty_condition::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIComponentProperty_condition::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIComponentProperty_condition::getOperand() const {
    return m_operand;
}
void OAIComponentProperty_condition::setOperand(const QString &operand) {
    m_operand = operand;
    m_operand_isSet = true;
}

bool OAIComponentProperty_condition::is_operand_Set() const{
    return m_operand_isSet;
}

bool OAIComponentProperty_condition::is_operand_Valid() const{
    return m_operand_isValid;
}

OAIComponentConditionProperty_then OAIComponentProperty_condition::getThen() const {
    return m_then;
}
void OAIComponentProperty_condition::setThen(const OAIComponentConditionProperty_then &then) {
    m_then = then;
    m_then_isSet = true;
}

bool OAIComponentProperty_condition::is_then_Set() const{
    return m_then_isSet;
}

bool OAIComponentProperty_condition::is_then_Valid() const{
    return m_then_isValid;
}

OAIComponentConditionProperty_else OAIComponentProperty_condition::getRElse() const {
    return m_r_else;
}
void OAIComponentProperty_condition::setRElse(const OAIComponentConditionProperty_else &r_else) {
    m_r_else = r_else;
    m_r_else_isSet = true;
}

bool OAIComponentProperty_condition::is_r_else_Set() const{
    return m_r_else_isSet;
}

bool OAIComponentProperty_condition::is_r_else_Valid() const{
    return m_r_else_isValid;
}

QString OAIComponentProperty_condition::getOperandType() const {
    return m_operand_type;
}
void OAIComponentProperty_condition::setOperandType(const QString &operand_type) {
    m_operand_type = operand_type;
    m_operand_type_isSet = true;
}

bool OAIComponentProperty_condition::is_operand_type_Set() const{
    return m_operand_type_isSet;
}

bool OAIComponentProperty_condition::is_operand_type_Valid() const{
    return m_operand_type_isValid;
}

bool OAIComponentProperty_condition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_then.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_else.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operand_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentProperty_condition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
