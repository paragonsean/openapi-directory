/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateComponentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateComponentRequest::OAIUpdateComponentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateComponentRequest::OAIUpdateComponentRequest() {
    this->initializeModel();
}

OAIUpdateComponentRequest::~OAIUpdateComponentRequest() {}

void OAIUpdateComponentRequest::initializeModel() {

    m_updated_component_isSet = false;
    m_updated_component_isValid = false;
}

void OAIUpdateComponentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateComponentRequest::fromJsonObject(QJsonObject json) {

    m_updated_component_isValid = ::OpenAPI::fromJsonValue(m_updated_component, json[QString("updatedComponent")]);
    m_updated_component_isSet = !json[QString("updatedComponent")].isNull() && m_updated_component_isValid;
}

QString OAIUpdateComponentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateComponentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_updated_component.isSet()) {
        obj.insert(QString("updatedComponent"), ::OpenAPI::toJsonValue(m_updated_component));
    }
    return obj;
}

OAIUpdateComponentRequest_updatedComponent OAIUpdateComponentRequest::getUpdatedComponent() const {
    return m_updated_component;
}
void OAIUpdateComponentRequest::setUpdatedComponent(const OAIUpdateComponentRequest_updatedComponent &updated_component) {
    m_updated_component = updated_component;
    m_updated_component_isSet = true;
}

bool OAIUpdateComponentRequest::is_updated_component_Set() const{
    return m_updated_component_isSet;
}

bool OAIUpdateComponentRequest::is_updated_component_Valid() const{
    return m_updated_component_isValid;
}

bool OAIUpdateComponentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_updated_component.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateComponentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_updated_component_isValid && true;
}

} // namespace OpenAPI
