/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutMetadataFlagRequest_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutMetadataFlagRequest_body::OAIPutMetadataFlagRequest_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutMetadataFlagRequest_body::OAIPutMetadataFlagRequest_body() {
    this->initializeModel();
}

OAIPutMetadataFlagRequest_body::~OAIPutMetadataFlagRequest_body() {}

void OAIPutMetadataFlagRequest_body::initializeModel() {

    m_new_value_isSet = false;
    m_new_value_isValid = false;
}

void OAIPutMetadataFlagRequest_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutMetadataFlagRequest_body::fromJsonObject(QJsonObject json) {

    m_new_value_isValid = ::OpenAPI::fromJsonValue(m_new_value, json[QString("newValue")]);
    m_new_value_isSet = !json[QString("newValue")].isNull() && m_new_value_isValid;
}

QString OAIPutMetadataFlagRequest_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutMetadataFlagRequest_body::asJsonObject() const {
    QJsonObject obj;
    if (m_new_value_isSet) {
        obj.insert(QString("newValue"), ::OpenAPI::toJsonValue(m_new_value));
    }
    return obj;
}

QString OAIPutMetadataFlagRequest_body::getNewValue() const {
    return m_new_value;
}
void OAIPutMetadataFlagRequest_body::setNewValue(const QString &new_value) {
    m_new_value = new_value;
    m_new_value_isSet = true;
}

bool OAIPutMetadataFlagRequest_body::is_new_value_Set() const{
    return m_new_value_isSet;
}

bool OAIPutMetadataFlagRequest_body::is_new_value_Valid() const{
    return m_new_value_isValid;
}

bool OAIPutMetadataFlagRequest_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutMetadataFlagRequest_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_new_value_isValid && true;
}

} // namespace OpenAPI
