/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentBindingPropertiesValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentBindingPropertiesValue::OAIComponentBindingPropertiesValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentBindingPropertiesValue::OAIComponentBindingPropertiesValue() {
    this->initializeModel();
}

OAIComponentBindingPropertiesValue::~OAIComponentBindingPropertiesValue() {}

void OAIComponentBindingPropertiesValue::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_binding_properties_isSet = false;
    m_binding_properties_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;
}

void OAIComponentBindingPropertiesValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentBindingPropertiesValue::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_binding_properties_isValid = ::OpenAPI::fromJsonValue(m_binding_properties, json[QString("bindingProperties")]);
    m_binding_properties_isSet = !json[QString("bindingProperties")].isNull() && m_binding_properties_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;
}

QString OAIComponentBindingPropertiesValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentBindingPropertiesValue::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_binding_properties.isSet()) {
        obj.insert(QString("bindingProperties"), ::OpenAPI::toJsonValue(m_binding_properties));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    return obj;
}

QString OAIComponentBindingPropertiesValue::getType() const {
    return m_type;
}
void OAIComponentBindingPropertiesValue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIComponentBindingPropertiesValue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIComponentBindingPropertiesValue::is_type_Valid() const{
    return m_type_isValid;
}

OAIComponentBindingPropertiesValue_bindingProperties OAIComponentBindingPropertiesValue::getBindingProperties() const {
    return m_binding_properties;
}
void OAIComponentBindingPropertiesValue::setBindingProperties(const OAIComponentBindingPropertiesValue_bindingProperties &binding_properties) {
    m_binding_properties = binding_properties;
    m_binding_properties_isSet = true;
}

bool OAIComponentBindingPropertiesValue::is_binding_properties_Set() const{
    return m_binding_properties_isSet;
}

bool OAIComponentBindingPropertiesValue::is_binding_properties_Valid() const{
    return m_binding_properties_isValid;
}

QString OAIComponentBindingPropertiesValue::getDefaultValue() const {
    return m_default_value;
}
void OAIComponentBindingPropertiesValue::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIComponentBindingPropertiesValue::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIComponentBindingPropertiesValue::is_default_value_Valid() const{
    return m_default_value_isValid;
}

bool OAIComponentBindingPropertiesValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binding_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentBindingPropertiesValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
