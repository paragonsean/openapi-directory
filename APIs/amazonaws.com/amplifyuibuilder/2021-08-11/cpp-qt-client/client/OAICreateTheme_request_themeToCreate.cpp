/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTheme_request_themeToCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTheme_request_themeToCreate::OAICreateTheme_request_themeToCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTheme_request_themeToCreate::OAICreateTheme_request_themeToCreate() {
    this->initializeModel();
}

OAICreateTheme_request_themeToCreate::~OAICreateTheme_request_themeToCreate() {}

void OAICreateTheme_request_themeToCreate::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateTheme_request_themeToCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTheme_request_themeToCreate::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateTheme_request_themeToCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTheme_request_themeToCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateTheme_request_themeToCreate::getName() const {
    return m_name;
}
void OAICreateTheme_request_themeToCreate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateTheme_request_themeToCreate::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateTheme_request_themeToCreate::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICreateTheme_request_themeToCreate::getValues() const {
    return m_values;
}
void OAICreateTheme_request_themeToCreate::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICreateTheme_request_themeToCreate::is_values_Set() const{
    return m_values_isSet;
}

bool OAICreateTheme_request_themeToCreate::is_values_Valid() const{
    return m_values_isValid;
}

QList OAICreateTheme_request_themeToCreate::getOverrides() const {
    return m_overrides;
}
void OAICreateTheme_request_themeToCreate::setOverrides(const QList &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAICreateTheme_request_themeToCreate::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAICreateTheme_request_themeToCreate::is_overrides_Valid() const{
    return m_overrides_isValid;
}

QMap OAICreateTheme_request_themeToCreate::getTags() const {
    return m_tags;
}
void OAICreateTheme_request_themeToCreate::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTheme_request_themeToCreate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTheme_request_themeToCreate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateTheme_request_themeToCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTheme_request_themeToCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
