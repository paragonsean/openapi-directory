/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateComponentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateComponentRequest::OAICreateComponentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateComponentRequest::OAICreateComponentRequest() {
    this->initializeModel();
}

OAICreateComponentRequest::~OAICreateComponentRequest() {}

void OAICreateComponentRequest::initializeModel() {

    m_component_to_create_isSet = false;
    m_component_to_create_isValid = false;
}

void OAICreateComponentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateComponentRequest::fromJsonObject(QJsonObject json) {

    m_component_to_create_isValid = ::OpenAPI::fromJsonValue(m_component_to_create, json[QString("componentToCreate")]);
    m_component_to_create_isSet = !json[QString("componentToCreate")].isNull() && m_component_to_create_isValid;
}

QString OAICreateComponentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateComponentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_component_to_create.isSet()) {
        obj.insert(QString("componentToCreate"), ::OpenAPI::toJsonValue(m_component_to_create));
    }
    return obj;
}

OAICreateComponentRequest_componentToCreate OAICreateComponentRequest::getComponentToCreate() const {
    return m_component_to_create;
}
void OAICreateComponentRequest::setComponentToCreate(const OAICreateComponentRequest_componentToCreate &component_to_create) {
    m_component_to_create = component_to_create;
    m_component_to_create_isSet = true;
}

bool OAICreateComponentRequest::is_component_to_create_Set() const{
    return m_component_to_create_isSet;
}

bool OAICreateComponentRequest::is_component_to_create_Valid() const{
    return m_component_to_create_isValid;
}

bool OAICreateComponentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_to_create.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateComponentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_component_to_create_isValid && true;
}

} // namespace OpenAPI
