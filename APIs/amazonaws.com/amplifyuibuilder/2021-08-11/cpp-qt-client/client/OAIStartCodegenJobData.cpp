/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartCodegenJobData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartCodegenJobData::OAIStartCodegenJobData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartCodegenJobData::OAIStartCodegenJobData() {
    this->initializeModel();
}

OAIStartCodegenJobData::~OAIStartCodegenJobData() {}

void OAIStartCodegenJobData::initializeModel() {

    m_render_config_isSet = false;
    m_render_config_isValid = false;

    m_generic_data_schema_isSet = false;
    m_generic_data_schema_isValid = false;

    m_auto_generate_forms_isSet = false;
    m_auto_generate_forms_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartCodegenJobData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartCodegenJobData::fromJsonObject(QJsonObject json) {

    m_render_config_isValid = ::OpenAPI::fromJsonValue(m_render_config, json[QString("renderConfig")]);
    m_render_config_isSet = !json[QString("renderConfig")].isNull() && m_render_config_isValid;

    m_generic_data_schema_isValid = ::OpenAPI::fromJsonValue(m_generic_data_schema, json[QString("genericDataSchema")]);
    m_generic_data_schema_isSet = !json[QString("genericDataSchema")].isNull() && m_generic_data_schema_isValid;

    m_auto_generate_forms_isValid = ::OpenAPI::fromJsonValue(m_auto_generate_forms, json[QString("autoGenerateForms")]);
    m_auto_generate_forms_isSet = !json[QString("autoGenerateForms")].isNull() && m_auto_generate_forms_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIStartCodegenJobData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartCodegenJobData::asJsonObject() const {
    QJsonObject obj;
    if (m_render_config.isSet()) {
        obj.insert(QString("renderConfig"), ::OpenAPI::toJsonValue(m_render_config));
    }
    if (m_generic_data_schema.isSet()) {
        obj.insert(QString("genericDataSchema"), ::OpenAPI::toJsonValue(m_generic_data_schema));
    }
    if (m_auto_generate_forms_isSet) {
        obj.insert(QString("autoGenerateForms"), ::OpenAPI::toJsonValue(m_auto_generate_forms));
    }
    if (m_features.isSet()) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIStartCodegenJob_request_codegenJobToCreate_renderConfig OAIStartCodegenJobData::getRenderConfig() const {
    return m_render_config;
}
void OAIStartCodegenJobData::setRenderConfig(const OAIStartCodegenJob_request_codegenJobToCreate_renderConfig &render_config) {
    m_render_config = render_config;
    m_render_config_isSet = true;
}

bool OAIStartCodegenJobData::is_render_config_Set() const{
    return m_render_config_isSet;
}

bool OAIStartCodegenJobData::is_render_config_Valid() const{
    return m_render_config_isValid;
}

OAIStartCodegenJob_request_codegenJobToCreate_genericDataSchema OAIStartCodegenJobData::getGenericDataSchema() const {
    return m_generic_data_schema;
}
void OAIStartCodegenJobData::setGenericDataSchema(const OAIStartCodegenJob_request_codegenJobToCreate_genericDataSchema &generic_data_schema) {
    m_generic_data_schema = generic_data_schema;
    m_generic_data_schema_isSet = true;
}

bool OAIStartCodegenJobData::is_generic_data_schema_Set() const{
    return m_generic_data_schema_isSet;
}

bool OAIStartCodegenJobData::is_generic_data_schema_Valid() const{
    return m_generic_data_schema_isValid;
}

bool OAIStartCodegenJobData::getAutoGenerateForms() const {
    return m_auto_generate_forms;
}
void OAIStartCodegenJobData::setAutoGenerateForms(const bool &auto_generate_forms) {
    m_auto_generate_forms = auto_generate_forms;
    m_auto_generate_forms_isSet = true;
}

bool OAIStartCodegenJobData::is_auto_generate_forms_Set() const{
    return m_auto_generate_forms_isSet;
}

bool OAIStartCodegenJobData::is_auto_generate_forms_Valid() const{
    return m_auto_generate_forms_isValid;
}

OAIStartCodegenJob_request_codegenJobToCreate_features OAIStartCodegenJobData::getFeatures() const {
    return m_features;
}
void OAIStartCodegenJobData::setFeatures(const OAIStartCodegenJob_request_codegenJobToCreate_features &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIStartCodegenJobData::is_features_Set() const{
    return m_features_isSet;
}

bool OAIStartCodegenJobData::is_features_Valid() const{
    return m_features_isValid;
}

QMap OAIStartCodegenJobData::getTags() const {
    return m_tags;
}
void OAIStartCodegenJobData::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartCodegenJobData::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartCodegenJobData::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartCodegenJobData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_render_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_data_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_generate_forms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartCodegenJobData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_render_config_isValid && true;
}

} // namespace OpenAPI
