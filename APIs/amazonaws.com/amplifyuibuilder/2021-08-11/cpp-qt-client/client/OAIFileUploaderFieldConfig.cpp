/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileUploaderFieldConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileUploaderFieldConfig::OAIFileUploaderFieldConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileUploaderFieldConfig::OAIFileUploaderFieldConfig() {
    this->initializeModel();
}

OAIFileUploaderFieldConfig::~OAIFileUploaderFieldConfig() {}

void OAIFileUploaderFieldConfig::initializeModel() {

    m_access_level_isSet = false;
    m_access_level_isValid = false;

    m_accepted_file_types_isSet = false;
    m_accepted_file_types_isValid = false;

    m_show_thumbnails_isSet = false;
    m_show_thumbnails_isValid = false;

    m_is_resumable_isSet = false;
    m_is_resumable_isValid = false;

    m_max_file_count_isSet = false;
    m_max_file_count_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;
}

void OAIFileUploaderFieldConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileUploaderFieldConfig::fromJsonObject(QJsonObject json) {

    m_access_level_isValid = ::OpenAPI::fromJsonValue(m_access_level, json[QString("accessLevel")]);
    m_access_level_isSet = !json[QString("accessLevel")].isNull() && m_access_level_isValid;

    m_accepted_file_types_isValid = ::OpenAPI::fromJsonValue(m_accepted_file_types, json[QString("acceptedFileTypes")]);
    m_accepted_file_types_isSet = !json[QString("acceptedFileTypes")].isNull() && m_accepted_file_types_isValid;

    m_show_thumbnails_isValid = ::OpenAPI::fromJsonValue(m_show_thumbnails, json[QString("showThumbnails")]);
    m_show_thumbnails_isSet = !json[QString("showThumbnails")].isNull() && m_show_thumbnails_isValid;

    m_is_resumable_isValid = ::OpenAPI::fromJsonValue(m_is_resumable, json[QString("isResumable")]);
    m_is_resumable_isSet = !json[QString("isResumable")].isNull() && m_is_resumable_isValid;

    m_max_file_count_isValid = ::OpenAPI::fromJsonValue(m_max_file_count, json[QString("maxFileCount")]);
    m_max_file_count_isSet = !json[QString("maxFileCount")].isNull() && m_max_file_count_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("maxSize")]);
    m_max_size_isSet = !json[QString("maxSize")].isNull() && m_max_size_isValid;
}

QString OAIFileUploaderFieldConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileUploaderFieldConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_access_level.isSet()) {
        obj.insert(QString("accessLevel"), ::OpenAPI::toJsonValue(m_access_level));
    }
    if (m_accepted_file_types.isSet()) {
        obj.insert(QString("acceptedFileTypes"), ::OpenAPI::toJsonValue(m_accepted_file_types));
    }
    if (m_show_thumbnails_isSet) {
        obj.insert(QString("showThumbnails"), ::OpenAPI::toJsonValue(m_show_thumbnails));
    }
    if (m_is_resumable_isSet) {
        obj.insert(QString("isResumable"), ::OpenAPI::toJsonValue(m_is_resumable));
    }
    if (m_max_file_count_isSet) {
        obj.insert(QString("maxFileCount"), ::OpenAPI::toJsonValue(m_max_file_count));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("maxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    return obj;
}

OAIStorageAccessLevel OAIFileUploaderFieldConfig::getAccessLevel() const {
    return m_access_level;
}
void OAIFileUploaderFieldConfig::setAccessLevel(const OAIStorageAccessLevel &access_level) {
    m_access_level = access_level;
    m_access_level_isSet = true;
}

bool OAIFileUploaderFieldConfig::is_access_level_Set() const{
    return m_access_level_isSet;
}

bool OAIFileUploaderFieldConfig::is_access_level_Valid() const{
    return m_access_level_isValid;
}

QList OAIFileUploaderFieldConfig::getAcceptedFileTypes() const {
    return m_accepted_file_types;
}
void OAIFileUploaderFieldConfig::setAcceptedFileTypes(const QList &accepted_file_types) {
    m_accepted_file_types = accepted_file_types;
    m_accepted_file_types_isSet = true;
}

bool OAIFileUploaderFieldConfig::is_accepted_file_types_Set() const{
    return m_accepted_file_types_isSet;
}

bool OAIFileUploaderFieldConfig::is_accepted_file_types_Valid() const{
    return m_accepted_file_types_isValid;
}

bool OAIFileUploaderFieldConfig::getShowThumbnails() const {
    return m_show_thumbnails;
}
void OAIFileUploaderFieldConfig::setShowThumbnails(const bool &show_thumbnails) {
    m_show_thumbnails = show_thumbnails;
    m_show_thumbnails_isSet = true;
}

bool OAIFileUploaderFieldConfig::is_show_thumbnails_Set() const{
    return m_show_thumbnails_isSet;
}

bool OAIFileUploaderFieldConfig::is_show_thumbnails_Valid() const{
    return m_show_thumbnails_isValid;
}

bool OAIFileUploaderFieldConfig::getIsResumable() const {
    return m_is_resumable;
}
void OAIFileUploaderFieldConfig::setIsResumable(const bool &is_resumable) {
    m_is_resumable = is_resumable;
    m_is_resumable_isSet = true;
}

bool OAIFileUploaderFieldConfig::is_is_resumable_Set() const{
    return m_is_resumable_isSet;
}

bool OAIFileUploaderFieldConfig::is_is_resumable_Valid() const{
    return m_is_resumable_isValid;
}

qint32 OAIFileUploaderFieldConfig::getMaxFileCount() const {
    return m_max_file_count;
}
void OAIFileUploaderFieldConfig::setMaxFileCount(const qint32 &max_file_count) {
    m_max_file_count = max_file_count;
    m_max_file_count_isSet = true;
}

bool OAIFileUploaderFieldConfig::is_max_file_count_Set() const{
    return m_max_file_count_isSet;
}

bool OAIFileUploaderFieldConfig::is_max_file_count_Valid() const{
    return m_max_file_count_isValid;
}

qint32 OAIFileUploaderFieldConfig::getMaxSize() const {
    return m_max_size;
}
void OAIFileUploaderFieldConfig::setMaxSize(const qint32 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIFileUploaderFieldConfig::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIFileUploaderFieldConfig::is_max_size_Valid() const{
    return m_max_size_isValid;
}

bool OAIFileUploaderFieldConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepted_file_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_thumbnails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_resumable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_file_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileUploaderFieldConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_level_isValid && m_accepted_file_types_isValid && true;
}

} // namespace OpenAPI
