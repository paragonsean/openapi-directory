/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMutationActionSetStateParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMutationActionSetStateParameter::OAIMutationActionSetStateParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMutationActionSetStateParameter::OAIMutationActionSetStateParameter() {
    this->initializeModel();
}

OAIMutationActionSetStateParameter::~OAIMutationActionSetStateParameter() {}

void OAIMutationActionSetStateParameter::initializeModel() {

    m_component_name_isSet = false;
    m_component_name_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_r_set_isSet = false;
    m_r_set_isValid = false;
}

void OAIMutationActionSetStateParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMutationActionSetStateParameter::fromJsonObject(QJsonObject json) {

    m_component_name_isValid = ::OpenAPI::fromJsonValue(m_component_name, json[QString("componentName")]);
    m_component_name_isSet = !json[QString("componentName")].isNull() && m_component_name_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_r_set_isValid = ::OpenAPI::fromJsonValue(m_r_set, json[QString("set")]);
    m_r_set_isSet = !json[QString("set")].isNull() && m_r_set_isValid;
}

QString OAIMutationActionSetStateParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMutationActionSetStateParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_component_name_isSet) {
        obj.insert(QString("componentName"), ::OpenAPI::toJsonValue(m_component_name));
    }
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_r_set.isSet()) {
        obj.insert(QString("set"), ::OpenAPI::toJsonValue(m_r_set));
    }
    return obj;
}

QString OAIMutationActionSetStateParameter::getComponentName() const {
    return m_component_name;
}
void OAIMutationActionSetStateParameter::setComponentName(const QString &component_name) {
    m_component_name = component_name;
    m_component_name_isSet = true;
}

bool OAIMutationActionSetStateParameter::is_component_name_Set() const{
    return m_component_name_isSet;
}

bool OAIMutationActionSetStateParameter::is_component_name_Valid() const{
    return m_component_name_isValid;
}

QString OAIMutationActionSetStateParameter::getProperty() const {
    return m_property;
}
void OAIMutationActionSetStateParameter::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIMutationActionSetStateParameter::is_property_Set() const{
    return m_property_isSet;
}

bool OAIMutationActionSetStateParameter::is_property_Valid() const{
    return m_property_isValid;
}

OAIMutationActionSetStateParameter_set OAIMutationActionSetStateParameter::getRSet() const {
    return m_r_set;
}
void OAIMutationActionSetStateParameter::setRSet(const OAIMutationActionSetStateParameter_set &r_set) {
    m_r_set = r_set;
    m_r_set_isSet = true;
}

bool OAIMutationActionSetStateParameter::is_r_set_Set() const{
    return m_r_set_isSet;
}

bool OAIMutationActionSetStateParameter::is_r_set_Valid() const{
    return m_r_set_isValid;
}

bool OAIMutationActionSetStateParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_set.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMutationActionSetStateParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_component_name_isValid && m_property_isValid && m_r_set_isValid && true;
}

} // namespace OpenAPI
