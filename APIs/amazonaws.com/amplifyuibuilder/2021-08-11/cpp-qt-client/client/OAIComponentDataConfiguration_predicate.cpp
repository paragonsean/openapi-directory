/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentDataConfiguration_predicate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentDataConfiguration_predicate::OAIComponentDataConfiguration_predicate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentDataConfiguration_predicate::OAIComponentDataConfiguration_predicate() {
    this->initializeModel();
}

OAIComponentDataConfiguration_predicate::~OAIComponentDataConfiguration_predicate() {}

void OAIComponentDataConfiguration_predicate::initializeModel() {

    m_r_or_isSet = false;
    m_r_or_isValid = false;

    m_r_and_isSet = false;
    m_r_and_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_operand_isSet = false;
    m_operand_isValid = false;

    m_operand_type_isSet = false;
    m_operand_type_isValid = false;
}

void OAIComponentDataConfiguration_predicate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentDataConfiguration_predicate::fromJsonObject(QJsonObject json) {

    m_r_or_isValid = ::OpenAPI::fromJsonValue(m_r_or, json[QString("or")]);
    m_r_or_isSet = !json[QString("or")].isNull() && m_r_or_isValid;

    m_r_and_isValid = ::OpenAPI::fromJsonValue(m_r_and, json[QString("and")]);
    m_r_and_isSet = !json[QString("and")].isNull() && m_r_and_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_operand_isValid = ::OpenAPI::fromJsonValue(m_operand, json[QString("operand")]);
    m_operand_isSet = !json[QString("operand")].isNull() && m_operand_isValid;

    m_operand_type_isValid = ::OpenAPI::fromJsonValue(m_operand_type, json[QString("operandType")]);
    m_operand_type_isSet = !json[QString("operandType")].isNull() && m_operand_type_isValid;
}

QString OAIComponentDataConfiguration_predicate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentDataConfiguration_predicate::asJsonObject() const {
    QJsonObject obj;
    if (m_r_or.isSet()) {
        obj.insert(QString("or"), ::OpenAPI::toJsonValue(m_r_or));
    }
    if (m_r_and.isSet()) {
        obj.insert(QString("and"), ::OpenAPI::toJsonValue(m_r_and));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_operand_isSet) {
        obj.insert(QString("operand"), ::OpenAPI::toJsonValue(m_operand));
    }
    if (m_operand_type_isSet) {
        obj.insert(QString("operandType"), ::OpenAPI::toJsonValue(m_operand_type));
    }
    return obj;
}

QList OAIComponentDataConfiguration_predicate::getROr() const {
    return m_r_or;
}
void OAIComponentDataConfiguration_predicate::setROr(const QList &r_or) {
    m_r_or = r_or;
    m_r_or_isSet = true;
}

bool OAIComponentDataConfiguration_predicate::is_r_or_Set() const{
    return m_r_or_isSet;
}

bool OAIComponentDataConfiguration_predicate::is_r_or_Valid() const{
    return m_r_or_isValid;
}

QList OAIComponentDataConfiguration_predicate::getRAnd() const {
    return m_r_and;
}
void OAIComponentDataConfiguration_predicate::setRAnd(const QList &r_and) {
    m_r_and = r_and;
    m_r_and_isSet = true;
}

bool OAIComponentDataConfiguration_predicate::is_r_and_Set() const{
    return m_r_and_isSet;
}

bool OAIComponentDataConfiguration_predicate::is_r_and_Valid() const{
    return m_r_and_isValid;
}

QString OAIComponentDataConfiguration_predicate::getField() const {
    return m_field;
}
void OAIComponentDataConfiguration_predicate::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIComponentDataConfiguration_predicate::is_field_Set() const{
    return m_field_isSet;
}

bool OAIComponentDataConfiguration_predicate::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIComponentDataConfiguration_predicate::getROperator() const {
    return m_r_operator;
}
void OAIComponentDataConfiguration_predicate::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIComponentDataConfiguration_predicate::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIComponentDataConfiguration_predicate::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIComponentDataConfiguration_predicate::getOperand() const {
    return m_operand;
}
void OAIComponentDataConfiguration_predicate::setOperand(const QString &operand) {
    m_operand = operand;
    m_operand_isSet = true;
}

bool OAIComponentDataConfiguration_predicate::is_operand_Set() const{
    return m_operand_isSet;
}

bool OAIComponentDataConfiguration_predicate::is_operand_Valid() const{
    return m_operand_isValid;
}

QString OAIComponentDataConfiguration_predicate::getOperandType() const {
    return m_operand_type;
}
void OAIComponentDataConfiguration_predicate::setOperandType(const QString &operand_type) {
    m_operand_type = operand_type;
    m_operand_type_isSet = true;
}

bool OAIComponentDataConfiguration_predicate::is_operand_type_Set() const{
    return m_operand_type_isSet;
}

bool OAIComponentDataConfiguration_predicate::is_operand_type_Valid() const{
    return m_operand_type_isValid;
}

bool OAIComponentDataConfiguration_predicate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_or.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_and.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operand_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentDataConfiguration_predicate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
