/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReactStartCodegenJobData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReactStartCodegenJobData::OAIReactStartCodegenJobData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReactStartCodegenJobData::OAIReactStartCodegenJobData() {
    this->initializeModel();
}

OAIReactStartCodegenJobData::~OAIReactStartCodegenJobData() {}

void OAIReactStartCodegenJobData::initializeModel() {

    m_module_isSet = false;
    m_module_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_render_type_declarations_isSet = false;
    m_render_type_declarations_isValid = false;

    m_inline_source_map_isSet = false;
    m_inline_source_map_isValid = false;

    m_api_configuration_isSet = false;
    m_api_configuration_isValid = false;
}

void OAIReactStartCodegenJobData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReactStartCodegenJobData::fromJsonObject(QJsonObject json) {

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_render_type_declarations_isValid = ::OpenAPI::fromJsonValue(m_render_type_declarations, json[QString("renderTypeDeclarations")]);
    m_render_type_declarations_isSet = !json[QString("renderTypeDeclarations")].isNull() && m_render_type_declarations_isValid;

    m_inline_source_map_isValid = ::OpenAPI::fromJsonValue(m_inline_source_map, json[QString("inlineSourceMap")]);
    m_inline_source_map_isSet = !json[QString("inlineSourceMap")].isNull() && m_inline_source_map_isValid;

    m_api_configuration_isValid = ::OpenAPI::fromJsonValue(m_api_configuration, json[QString("apiConfiguration")]);
    m_api_configuration_isSet = !json[QString("apiConfiguration")].isNull() && m_api_configuration_isValid;
}

QString OAIReactStartCodegenJobData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReactStartCodegenJobData::asJsonObject() const {
    QJsonObject obj;
    if (m_module.isSet()) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_script.isSet()) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_render_type_declarations_isSet) {
        obj.insert(QString("renderTypeDeclarations"), ::OpenAPI::toJsonValue(m_render_type_declarations));
    }
    if (m_inline_source_map_isSet) {
        obj.insert(QString("inlineSourceMap"), ::OpenAPI::toJsonValue(m_inline_source_map));
    }
    if (m_api_configuration.isSet()) {
        obj.insert(QString("apiConfiguration"), ::OpenAPI::toJsonValue(m_api_configuration));
    }
    return obj;
}

OAIJSModule OAIReactStartCodegenJobData::getModule() const {
    return m_module;
}
void OAIReactStartCodegenJobData::setModule(const OAIJSModule &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIReactStartCodegenJobData::is_module_Set() const{
    return m_module_isSet;
}

bool OAIReactStartCodegenJobData::is_module_Valid() const{
    return m_module_isValid;
}

OAIJSTarget OAIReactStartCodegenJobData::getTarget() const {
    return m_target;
}
void OAIReactStartCodegenJobData::setTarget(const OAIJSTarget &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIReactStartCodegenJobData::is_target_Set() const{
    return m_target_isSet;
}

bool OAIReactStartCodegenJobData::is_target_Valid() const{
    return m_target_isValid;
}

OAIJSScript OAIReactStartCodegenJobData::getScript() const {
    return m_script;
}
void OAIReactStartCodegenJobData::setScript(const OAIJSScript &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIReactStartCodegenJobData::is_script_Set() const{
    return m_script_isSet;
}

bool OAIReactStartCodegenJobData::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIReactStartCodegenJobData::getRenderTypeDeclarations() const {
    return m_render_type_declarations;
}
void OAIReactStartCodegenJobData::setRenderTypeDeclarations(const bool &render_type_declarations) {
    m_render_type_declarations = render_type_declarations;
    m_render_type_declarations_isSet = true;
}

bool OAIReactStartCodegenJobData::is_render_type_declarations_Set() const{
    return m_render_type_declarations_isSet;
}

bool OAIReactStartCodegenJobData::is_render_type_declarations_Valid() const{
    return m_render_type_declarations_isValid;
}

bool OAIReactStartCodegenJobData::getInlineSourceMap() const {
    return m_inline_source_map;
}
void OAIReactStartCodegenJobData::setInlineSourceMap(const bool &inline_source_map) {
    m_inline_source_map = inline_source_map;
    m_inline_source_map_isSet = true;
}

bool OAIReactStartCodegenJobData::is_inline_source_map_Set() const{
    return m_inline_source_map_isSet;
}

bool OAIReactStartCodegenJobData::is_inline_source_map_Valid() const{
    return m_inline_source_map_isValid;
}

OAIReactStartCodegenJobData_apiConfiguration OAIReactStartCodegenJobData::getApiConfiguration() const {
    return m_api_configuration;
}
void OAIReactStartCodegenJobData::setApiConfiguration(const OAIReactStartCodegenJobData_apiConfiguration &api_configuration) {
    m_api_configuration = api_configuration;
    m_api_configuration_isSet = true;
}

bool OAIReactStartCodegenJobData::is_api_configuration_Set() const{
    return m_api_configuration_isSet;
}

bool OAIReactStartCodegenJobData::is_api_configuration_Valid() const{
    return m_api_configuration_isValid;
}

bool OAIReactStartCodegenJobData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_module.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_type_declarations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_source_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReactStartCodegenJobData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
