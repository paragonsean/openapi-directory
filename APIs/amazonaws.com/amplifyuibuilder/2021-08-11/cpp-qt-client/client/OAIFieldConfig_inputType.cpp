/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldConfig_inputType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldConfig_inputType::OAIFieldConfig_inputType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldConfig_inputType::OAIFieldConfig_inputType() {
    this->initializeModel();
}

OAIFieldConfig_inputType::~OAIFieldConfig_inputType() {}

void OAIFieldConfig_inputType::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_placeholder_isSet = false;
    m_placeholder_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_descriptive_text_isSet = false;
    m_descriptive_text_isValid = false;

    m_default_checked_isSet = false;
    m_default_checked_isValid = false;

    m_default_country_code_isSet = false;
    m_default_country_code_isValid = false;

    m_value_mappings_isSet = false;
    m_value_mappings_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_is_array_isSet = false;
    m_is_array_isValid = false;

    m_file_uploader_config_isSet = false;
    m_file_uploader_config_isValid = false;
}

void OAIFieldConfig_inputType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldConfig_inputType::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_placeholder_isValid = ::OpenAPI::fromJsonValue(m_placeholder, json[QString("placeholder")]);
    m_placeholder_isSet = !json[QString("placeholder")].isNull() && m_placeholder_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_descriptive_text_isValid = ::OpenAPI::fromJsonValue(m_descriptive_text, json[QString("descriptiveText")]);
    m_descriptive_text_isSet = !json[QString("descriptiveText")].isNull() && m_descriptive_text_isValid;

    m_default_checked_isValid = ::OpenAPI::fromJsonValue(m_default_checked, json[QString("defaultChecked")]);
    m_default_checked_isSet = !json[QString("defaultChecked")].isNull() && m_default_checked_isValid;

    m_default_country_code_isValid = ::OpenAPI::fromJsonValue(m_default_country_code, json[QString("defaultCountryCode")]);
    m_default_country_code_isSet = !json[QString("defaultCountryCode")].isNull() && m_default_country_code_isValid;

    m_value_mappings_isValid = ::OpenAPI::fromJsonValue(m_value_mappings, json[QString("valueMappings")]);
    m_value_mappings_isSet = !json[QString("valueMappings")].isNull() && m_value_mappings_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_is_array_isValid = ::OpenAPI::fromJsonValue(m_is_array, json[QString("isArray")]);
    m_is_array_isSet = !json[QString("isArray")].isNull() && m_is_array_isValid;

    m_file_uploader_config_isValid = ::OpenAPI::fromJsonValue(m_file_uploader_config, json[QString("fileUploaderConfig")]);
    m_file_uploader_config_isSet = !json[QString("fileUploaderConfig")].isNull() && m_file_uploader_config_isValid;
}

QString OAIFieldConfig_inputType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldConfig_inputType::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_placeholder_isSet) {
        obj.insert(QString("placeholder"), ::OpenAPI::toJsonValue(m_placeholder));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_descriptive_text_isSet) {
        obj.insert(QString("descriptiveText"), ::OpenAPI::toJsonValue(m_descriptive_text));
    }
    if (m_default_checked_isSet) {
        obj.insert(QString("defaultChecked"), ::OpenAPI::toJsonValue(m_default_checked));
    }
    if (m_default_country_code_isSet) {
        obj.insert(QString("defaultCountryCode"), ::OpenAPI::toJsonValue(m_default_country_code));
    }
    if (m_value_mappings.isSet()) {
        obj.insert(QString("valueMappings"), ::OpenAPI::toJsonValue(m_value_mappings));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_step_isSet) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_is_array_isSet) {
        obj.insert(QString("isArray"), ::OpenAPI::toJsonValue(m_is_array));
    }
    if (m_file_uploader_config.isSet()) {
        obj.insert(QString("fileUploaderConfig"), ::OpenAPI::toJsonValue(m_file_uploader_config));
    }
    return obj;
}

QString OAIFieldConfig_inputType::getType() const {
    return m_type;
}
void OAIFieldConfig_inputType::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFieldConfig_inputType::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFieldConfig_inputType::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFieldConfig_inputType::getRequired() const {
    return m_required;
}
void OAIFieldConfig_inputType::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIFieldConfig_inputType::is_required_Set() const{
    return m_required_isSet;
}

bool OAIFieldConfig_inputType::is_required_Valid() const{
    return m_required_isValid;
}

bool OAIFieldConfig_inputType::getReadOnly() const {
    return m_read_only;
}
void OAIFieldConfig_inputType::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIFieldConfig_inputType::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIFieldConfig_inputType::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAIFieldConfig_inputType::getPlaceholder() const {
    return m_placeholder;
}
void OAIFieldConfig_inputType::setPlaceholder(const QString &placeholder) {
    m_placeholder = placeholder;
    m_placeholder_isSet = true;
}

bool OAIFieldConfig_inputType::is_placeholder_Set() const{
    return m_placeholder_isSet;
}

bool OAIFieldConfig_inputType::is_placeholder_Valid() const{
    return m_placeholder_isValid;
}

QString OAIFieldConfig_inputType::getDefaultValue() const {
    return m_default_value;
}
void OAIFieldConfig_inputType::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIFieldConfig_inputType::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIFieldConfig_inputType::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIFieldConfig_inputType::getDescriptiveText() const {
    return m_descriptive_text;
}
void OAIFieldConfig_inputType::setDescriptiveText(const QString &descriptive_text) {
    m_descriptive_text = descriptive_text;
    m_descriptive_text_isSet = true;
}

bool OAIFieldConfig_inputType::is_descriptive_text_Set() const{
    return m_descriptive_text_isSet;
}

bool OAIFieldConfig_inputType::is_descriptive_text_Valid() const{
    return m_descriptive_text_isValid;
}

bool OAIFieldConfig_inputType::getDefaultChecked() const {
    return m_default_checked;
}
void OAIFieldConfig_inputType::setDefaultChecked(const bool &default_checked) {
    m_default_checked = default_checked;
    m_default_checked_isSet = true;
}

bool OAIFieldConfig_inputType::is_default_checked_Set() const{
    return m_default_checked_isSet;
}

bool OAIFieldConfig_inputType::is_default_checked_Valid() const{
    return m_default_checked_isValid;
}

QString OAIFieldConfig_inputType::getDefaultCountryCode() const {
    return m_default_country_code;
}
void OAIFieldConfig_inputType::setDefaultCountryCode(const QString &default_country_code) {
    m_default_country_code = default_country_code;
    m_default_country_code_isSet = true;
}

bool OAIFieldConfig_inputType::is_default_country_code_Set() const{
    return m_default_country_code_isSet;
}

bool OAIFieldConfig_inputType::is_default_country_code_Valid() const{
    return m_default_country_code_isValid;
}

OAIFieldInputConfig_valueMappings OAIFieldConfig_inputType::getValueMappings() const {
    return m_value_mappings;
}
void OAIFieldConfig_inputType::setValueMappings(const OAIFieldInputConfig_valueMappings &value_mappings) {
    m_value_mappings = value_mappings;
    m_value_mappings_isSet = true;
}

bool OAIFieldConfig_inputType::is_value_mappings_Set() const{
    return m_value_mappings_isSet;
}

bool OAIFieldConfig_inputType::is_value_mappings_Valid() const{
    return m_value_mappings_isValid;
}

QString OAIFieldConfig_inputType::getName() const {
    return m_name;
}
void OAIFieldConfig_inputType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFieldConfig_inputType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFieldConfig_inputType::is_name_Valid() const{
    return m_name_isValid;
}

float OAIFieldConfig_inputType::getMinValue() const {
    return m_min_value;
}
void OAIFieldConfig_inputType::setMinValue(const float &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIFieldConfig_inputType::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIFieldConfig_inputType::is_min_value_Valid() const{
    return m_min_value_isValid;
}

float OAIFieldConfig_inputType::getMaxValue() const {
    return m_max_value;
}
void OAIFieldConfig_inputType::setMaxValue(const float &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIFieldConfig_inputType::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIFieldConfig_inputType::is_max_value_Valid() const{
    return m_max_value_isValid;
}

float OAIFieldConfig_inputType::getStep() const {
    return m_step;
}
void OAIFieldConfig_inputType::setStep(const float &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIFieldConfig_inputType::is_step_Set() const{
    return m_step_isSet;
}

bool OAIFieldConfig_inputType::is_step_Valid() const{
    return m_step_isValid;
}

QString OAIFieldConfig_inputType::getValue() const {
    return m_value;
}
void OAIFieldConfig_inputType::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFieldConfig_inputType::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFieldConfig_inputType::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFieldConfig_inputType::getIsArray() const {
    return m_is_array;
}
void OAIFieldConfig_inputType::setIsArray(const bool &is_array) {
    m_is_array = is_array;
    m_is_array_isSet = true;
}

bool OAIFieldConfig_inputType::is_is_array_Set() const{
    return m_is_array_isSet;
}

bool OAIFieldConfig_inputType::is_is_array_Valid() const{
    return m_is_array_isValid;
}

OAIFieldInputConfig_fileUploaderConfig OAIFieldConfig_inputType::getFileUploaderConfig() const {
    return m_file_uploader_config;
}
void OAIFieldConfig_inputType::setFileUploaderConfig(const OAIFieldInputConfig_fileUploaderConfig &file_uploader_config) {
    m_file_uploader_config = file_uploader_config;
    m_file_uploader_config_isSet = true;
}

bool OAIFieldConfig_inputType::is_file_uploader_config_Set() const{
    return m_file_uploader_config_isSet;
}

bool OAIFieldConfig_inputType::is_file_uploader_config_Valid() const{
    return m_file_uploader_config_isValid;
}

bool OAIFieldConfig_inputType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placeholder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptive_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_checked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_array_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_uploader_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldConfig_inputType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
