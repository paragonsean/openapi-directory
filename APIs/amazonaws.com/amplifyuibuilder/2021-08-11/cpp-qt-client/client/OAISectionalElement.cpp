/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISectionalElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISectionalElement::OAISectionalElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISectionalElement::OAISectionalElement() {
    this->initializeModel();
}

OAISectionalElement::~OAISectionalElement() {}

void OAISectionalElement::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_excluded_isSet = false;
    m_excluded_isValid = false;
}

void OAISectionalElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISectionalElement::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_excluded_isValid = ::OpenAPI::fromJsonValue(m_excluded, json[QString("excluded")]);
    m_excluded_isSet = !json[QString("excluded")].isNull() && m_excluded_isValid;
}

QString OAISectionalElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISectionalElement::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_excluded_isSet) {
        obj.insert(QString("excluded"), ::OpenAPI::toJsonValue(m_excluded));
    }
    return obj;
}

QString OAISectionalElement::getType() const {
    return m_type;
}
void OAISectionalElement::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISectionalElement::is_type_Set() const{
    return m_type_isSet;
}

bool OAISectionalElement::is_type_Valid() const{
    return m_type_isValid;
}

OAISectionalElement_position OAISectionalElement::getPosition() const {
    return m_position;
}
void OAISectionalElement::setPosition(const OAISectionalElement_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAISectionalElement::is_position_Set() const{
    return m_position_isSet;
}

bool OAISectionalElement::is_position_Valid() const{
    return m_position_isValid;
}

QString OAISectionalElement::getText() const {
    return m_text;
}
void OAISectionalElement::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISectionalElement::is_text_Set() const{
    return m_text_isSet;
}

bool OAISectionalElement::is_text_Valid() const{
    return m_text_isValid;
}

qint32 OAISectionalElement::getLevel() const {
    return m_level;
}
void OAISectionalElement::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAISectionalElement::is_level_Set() const{
    return m_level_isSet;
}

bool OAISectionalElement::is_level_Valid() const{
    return m_level_isValid;
}

QString OAISectionalElement::getOrientation() const {
    return m_orientation;
}
void OAISectionalElement::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAISectionalElement::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAISectionalElement::is_orientation_Valid() const{
    return m_orientation_isValid;
}

bool OAISectionalElement::getExcluded() const {
    return m_excluded;
}
void OAISectionalElement::setExcluded(const bool &excluded) {
    m_excluded = excluded;
    m_excluded_isSet = true;
}

bool OAISectionalElement::is_excluded_Set() const{
    return m_excluded_isSet;
}

bool OAISectionalElement::is_excluded_Valid() const{
    return m_excluded_isValid;
}

bool OAISectionalElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISectionalElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
