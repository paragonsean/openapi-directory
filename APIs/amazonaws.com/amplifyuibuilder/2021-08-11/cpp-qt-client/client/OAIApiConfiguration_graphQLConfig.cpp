/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiConfiguration_graphQLConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiConfiguration_graphQLConfig::OAIApiConfiguration_graphQLConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiConfiguration_graphQLConfig::OAIApiConfiguration_graphQLConfig() {
    this->initializeModel();
}

OAIApiConfiguration_graphQLConfig::~OAIApiConfiguration_graphQLConfig() {}

void OAIApiConfiguration_graphQLConfig::initializeModel() {

    m_types_file_path_isSet = false;
    m_types_file_path_isValid = false;

    m_queries_file_path_isSet = false;
    m_queries_file_path_isValid = false;

    m_mutations_file_path_isSet = false;
    m_mutations_file_path_isValid = false;

    m_subscriptions_file_path_isSet = false;
    m_subscriptions_file_path_isValid = false;

    m_fragments_file_path_isSet = false;
    m_fragments_file_path_isValid = false;
}

void OAIApiConfiguration_graphQLConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiConfiguration_graphQLConfig::fromJsonObject(QJsonObject json) {

    m_types_file_path_isValid = ::OpenAPI::fromJsonValue(m_types_file_path, json[QString("typesFilePath")]);
    m_types_file_path_isSet = !json[QString("typesFilePath")].isNull() && m_types_file_path_isValid;

    m_queries_file_path_isValid = ::OpenAPI::fromJsonValue(m_queries_file_path, json[QString("queriesFilePath")]);
    m_queries_file_path_isSet = !json[QString("queriesFilePath")].isNull() && m_queries_file_path_isValid;

    m_mutations_file_path_isValid = ::OpenAPI::fromJsonValue(m_mutations_file_path, json[QString("mutationsFilePath")]);
    m_mutations_file_path_isSet = !json[QString("mutationsFilePath")].isNull() && m_mutations_file_path_isValid;

    m_subscriptions_file_path_isValid = ::OpenAPI::fromJsonValue(m_subscriptions_file_path, json[QString("subscriptionsFilePath")]);
    m_subscriptions_file_path_isSet = !json[QString("subscriptionsFilePath")].isNull() && m_subscriptions_file_path_isValid;

    m_fragments_file_path_isValid = ::OpenAPI::fromJsonValue(m_fragments_file_path, json[QString("fragmentsFilePath")]);
    m_fragments_file_path_isSet = !json[QString("fragmentsFilePath")].isNull() && m_fragments_file_path_isValid;
}

QString OAIApiConfiguration_graphQLConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiConfiguration_graphQLConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_types_file_path_isSet) {
        obj.insert(QString("typesFilePath"), ::OpenAPI::toJsonValue(m_types_file_path));
    }
    if (m_queries_file_path_isSet) {
        obj.insert(QString("queriesFilePath"), ::OpenAPI::toJsonValue(m_queries_file_path));
    }
    if (m_mutations_file_path_isSet) {
        obj.insert(QString("mutationsFilePath"), ::OpenAPI::toJsonValue(m_mutations_file_path));
    }
    if (m_subscriptions_file_path_isSet) {
        obj.insert(QString("subscriptionsFilePath"), ::OpenAPI::toJsonValue(m_subscriptions_file_path));
    }
    if (m_fragments_file_path_isSet) {
        obj.insert(QString("fragmentsFilePath"), ::OpenAPI::toJsonValue(m_fragments_file_path));
    }
    return obj;
}

QString OAIApiConfiguration_graphQLConfig::getTypesFilePath() const {
    return m_types_file_path;
}
void OAIApiConfiguration_graphQLConfig::setTypesFilePath(const QString &types_file_path) {
    m_types_file_path = types_file_path;
    m_types_file_path_isSet = true;
}

bool OAIApiConfiguration_graphQLConfig::is_types_file_path_Set() const{
    return m_types_file_path_isSet;
}

bool OAIApiConfiguration_graphQLConfig::is_types_file_path_Valid() const{
    return m_types_file_path_isValid;
}

QString OAIApiConfiguration_graphQLConfig::getQueriesFilePath() const {
    return m_queries_file_path;
}
void OAIApiConfiguration_graphQLConfig::setQueriesFilePath(const QString &queries_file_path) {
    m_queries_file_path = queries_file_path;
    m_queries_file_path_isSet = true;
}

bool OAIApiConfiguration_graphQLConfig::is_queries_file_path_Set() const{
    return m_queries_file_path_isSet;
}

bool OAIApiConfiguration_graphQLConfig::is_queries_file_path_Valid() const{
    return m_queries_file_path_isValid;
}

QString OAIApiConfiguration_graphQLConfig::getMutationsFilePath() const {
    return m_mutations_file_path;
}
void OAIApiConfiguration_graphQLConfig::setMutationsFilePath(const QString &mutations_file_path) {
    m_mutations_file_path = mutations_file_path;
    m_mutations_file_path_isSet = true;
}

bool OAIApiConfiguration_graphQLConfig::is_mutations_file_path_Set() const{
    return m_mutations_file_path_isSet;
}

bool OAIApiConfiguration_graphQLConfig::is_mutations_file_path_Valid() const{
    return m_mutations_file_path_isValid;
}

QString OAIApiConfiguration_graphQLConfig::getSubscriptionsFilePath() const {
    return m_subscriptions_file_path;
}
void OAIApiConfiguration_graphQLConfig::setSubscriptionsFilePath(const QString &subscriptions_file_path) {
    m_subscriptions_file_path = subscriptions_file_path;
    m_subscriptions_file_path_isSet = true;
}

bool OAIApiConfiguration_graphQLConfig::is_subscriptions_file_path_Set() const{
    return m_subscriptions_file_path_isSet;
}

bool OAIApiConfiguration_graphQLConfig::is_subscriptions_file_path_Valid() const{
    return m_subscriptions_file_path_isValid;
}

QString OAIApiConfiguration_graphQLConfig::getFragmentsFilePath() const {
    return m_fragments_file_path;
}
void OAIApiConfiguration_graphQLConfig::setFragmentsFilePath(const QString &fragments_file_path) {
    m_fragments_file_path = fragments_file_path;
    m_fragments_file_path_isSet = true;
}

bool OAIApiConfiguration_graphQLConfig::is_fragments_file_path_Set() const{
    return m_fragments_file_path_isSet;
}

bool OAIApiConfiguration_graphQLConfig::is_fragments_file_path_Valid() const{
    return m_fragments_file_path_isValid;
}

bool OAIApiConfiguration_graphQLConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_types_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutations_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragments_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiConfiguration_graphQLConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_types_file_path_isValid && m_queries_file_path_isValid && m_mutations_file_path_isValid && m_subscriptions_file_path_isValid && m_fragments_file_path_isValid && true;
}

} // namespace OpenAPI
