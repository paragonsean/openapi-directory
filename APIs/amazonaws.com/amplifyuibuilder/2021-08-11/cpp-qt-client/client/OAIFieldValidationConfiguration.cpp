/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldValidationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldValidationConfiguration::OAIFieldValidationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldValidationConfiguration::OAIFieldValidationConfiguration() {
    this->initializeModel();
}

OAIFieldValidationConfiguration::~OAIFieldValidationConfiguration() {}

void OAIFieldValidationConfiguration::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_str_values_isSet = false;
    m_str_values_isValid = false;

    m_num_values_isSet = false;
    m_num_values_isValid = false;

    m_validation_message_isSet = false;
    m_validation_message_isValid = false;
}

void OAIFieldValidationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldValidationConfiguration::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_str_values_isValid = ::OpenAPI::fromJsonValue(m_str_values, json[QString("strValues")]);
    m_str_values_isSet = !json[QString("strValues")].isNull() && m_str_values_isValid;

    m_num_values_isValid = ::OpenAPI::fromJsonValue(m_num_values, json[QString("numValues")]);
    m_num_values_isSet = !json[QString("numValues")].isNull() && m_num_values_isValid;

    m_validation_message_isValid = ::OpenAPI::fromJsonValue(m_validation_message, json[QString("validationMessage")]);
    m_validation_message_isSet = !json[QString("validationMessage")].isNull() && m_validation_message_isValid;
}

QString OAIFieldValidationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldValidationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_str_values.isSet()) {
        obj.insert(QString("strValues"), ::OpenAPI::toJsonValue(m_str_values));
    }
    if (m_num_values.isSet()) {
        obj.insert(QString("numValues"), ::OpenAPI::toJsonValue(m_num_values));
    }
    if (m_validation_message_isSet) {
        obj.insert(QString("validationMessage"), ::OpenAPI::toJsonValue(m_validation_message));
    }
    return obj;
}

QString OAIFieldValidationConfiguration::getType() const {
    return m_type;
}
void OAIFieldValidationConfiguration::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFieldValidationConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFieldValidationConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIFieldValidationConfiguration::getStrValues() const {
    return m_str_values;
}
void OAIFieldValidationConfiguration::setStrValues(const QList &str_values) {
    m_str_values = str_values;
    m_str_values_isSet = true;
}

bool OAIFieldValidationConfiguration::is_str_values_Set() const{
    return m_str_values_isSet;
}

bool OAIFieldValidationConfiguration::is_str_values_Valid() const{
    return m_str_values_isValid;
}

QList OAIFieldValidationConfiguration::getNumValues() const {
    return m_num_values;
}
void OAIFieldValidationConfiguration::setNumValues(const QList &num_values) {
    m_num_values = num_values;
    m_num_values_isSet = true;
}

bool OAIFieldValidationConfiguration::is_num_values_Set() const{
    return m_num_values_isSet;
}

bool OAIFieldValidationConfiguration::is_num_values_Valid() const{
    return m_num_values_isValid;
}

QString OAIFieldValidationConfiguration::getValidationMessage() const {
    return m_validation_message;
}
void OAIFieldValidationConfiguration::setValidationMessage(const QString &validation_message) {
    m_validation_message = validation_message;
    m_validation_message_isSet = true;
}

bool OAIFieldValidationConfiguration::is_validation_message_Set() const{
    return m_validation_message_isSet;
}

bool OAIFieldValidationConfiguration::is_validation_message_Valid() const{
    return m_validation_message_isValid;
}

bool OAIFieldValidationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_str_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldValidationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
