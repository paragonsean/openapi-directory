/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActionParameters_global.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActionParameters_global::OAIActionParameters_global(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActionParameters_global::OAIActionParameters_global() {
    this->initializeModel();
}

OAIActionParameters_global::~OAIActionParameters_global() {}

void OAIActionParameters_global::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_binding_properties_isSet = false;
    m_binding_properties_isValid = false;

    m_collection_binding_properties_isSet = false;
    m_collection_binding_properties_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_bindings_isSet = false;
    m_bindings_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_user_attribute_isSet = false;
    m_user_attribute_isValid = false;

    m_concat_isSet = false;
    m_concat_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_configured_isSet = false;
    m_configured_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_imported_value_isSet = false;
    m_imported_value_isValid = false;

    m_component_name_isSet = false;
    m_component_name_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;
}

void OAIActionParameters_global::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActionParameters_global::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_binding_properties_isValid = ::OpenAPI::fromJsonValue(m_binding_properties, json[QString("bindingProperties")]);
    m_binding_properties_isSet = !json[QString("bindingProperties")].isNull() && m_binding_properties_isValid;

    m_collection_binding_properties_isValid = ::OpenAPI::fromJsonValue(m_collection_binding_properties, json[QString("collectionBindingProperties")]);
    m_collection_binding_properties_isSet = !json[QString("collectionBindingProperties")].isNull() && m_collection_binding_properties_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_bindings_isValid = ::OpenAPI::fromJsonValue(m_bindings, json[QString("bindings")]);
    m_bindings_isSet = !json[QString("bindings")].isNull() && m_bindings_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_user_attribute_isValid = ::OpenAPI::fromJsonValue(m_user_attribute, json[QString("userAttribute")]);
    m_user_attribute_isSet = !json[QString("userAttribute")].isNull() && m_user_attribute_isValid;

    m_concat_isValid = ::OpenAPI::fromJsonValue(m_concat, json[QString("concat")]);
    m_concat_isSet = !json[QString("concat")].isNull() && m_concat_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_configured_isValid = ::OpenAPI::fromJsonValue(m_configured, json[QString("configured")]);
    m_configured_isSet = !json[QString("configured")].isNull() && m_configured_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_imported_value_isValid = ::OpenAPI::fromJsonValue(m_imported_value, json[QString("importedValue")]);
    m_imported_value_isSet = !json[QString("importedValue")].isNull() && m_imported_value_isValid;

    m_component_name_isValid = ::OpenAPI::fromJsonValue(m_component_name, json[QString("componentName")]);
    m_component_name_isSet = !json[QString("componentName")].isNull() && m_component_name_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;
}

QString OAIActionParameters_global::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActionParameters_global::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_binding_properties.isSet()) {
        obj.insert(QString("bindingProperties"), ::OpenAPI::toJsonValue(m_binding_properties));
    }
    if (m_collection_binding_properties.isSet()) {
        obj.insert(QString("collectionBindingProperties"), ::OpenAPI::toJsonValue(m_collection_binding_properties));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_bindings.isSet()) {
        obj.insert(QString("bindings"), ::OpenAPI::toJsonValue(m_bindings));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_user_attribute_isSet) {
        obj.insert(QString("userAttribute"), ::OpenAPI::toJsonValue(m_user_attribute));
    }
    if (m_concat.isSet()) {
        obj.insert(QString("concat"), ::OpenAPI::toJsonValue(m_concat));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_configured_isSet) {
        obj.insert(QString("configured"), ::OpenAPI::toJsonValue(m_configured));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_imported_value_isSet) {
        obj.insert(QString("importedValue"), ::OpenAPI::toJsonValue(m_imported_value));
    }
    if (m_component_name_isSet) {
        obj.insert(QString("componentName"), ::OpenAPI::toJsonValue(m_component_name));
    }
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    return obj;
}

QString OAIActionParameters_global::getValue() const {
    return m_value;
}
void OAIActionParameters_global::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIActionParameters_global::is_value_Set() const{
    return m_value_isSet;
}

bool OAIActionParameters_global::is_value_Valid() const{
    return m_value_isValid;
}

OAIComponentProperty_bindingProperties OAIActionParameters_global::getBindingProperties() const {
    return m_binding_properties;
}
void OAIActionParameters_global::setBindingProperties(const OAIComponentProperty_bindingProperties &binding_properties) {
    m_binding_properties = binding_properties;
    m_binding_properties_isSet = true;
}

bool OAIActionParameters_global::is_binding_properties_Set() const{
    return m_binding_properties_isSet;
}

bool OAIActionParameters_global::is_binding_properties_Valid() const{
    return m_binding_properties_isValid;
}

OAIComponentProperty_collectionBindingProperties OAIActionParameters_global::getCollectionBindingProperties() const {
    return m_collection_binding_properties;
}
void OAIActionParameters_global::setCollectionBindingProperties(const OAIComponentProperty_collectionBindingProperties &collection_binding_properties) {
    m_collection_binding_properties = collection_binding_properties;
    m_collection_binding_properties_isSet = true;
}

bool OAIActionParameters_global::is_collection_binding_properties_Set() const{
    return m_collection_binding_properties_isSet;
}

bool OAIActionParameters_global::is_collection_binding_properties_Valid() const{
    return m_collection_binding_properties_isValid;
}

QString OAIActionParameters_global::getDefaultValue() const {
    return m_default_value;
}
void OAIActionParameters_global::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIActionParameters_global::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIActionParameters_global::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIActionParameters_global::getModel() const {
    return m_model;
}
void OAIActionParameters_global::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIActionParameters_global::is_model_Set() const{
    return m_model_isSet;
}

bool OAIActionParameters_global::is_model_Valid() const{
    return m_model_isValid;
}

QMap OAIActionParameters_global::getBindings() const {
    return m_bindings;
}
void OAIActionParameters_global::setBindings(const QMap &bindings) {
    m_bindings = bindings;
    m_bindings_isSet = true;
}

bool OAIActionParameters_global::is_bindings_Set() const{
    return m_bindings_isSet;
}

bool OAIActionParameters_global::is_bindings_Valid() const{
    return m_bindings_isValid;
}

QString OAIActionParameters_global::getEvent() const {
    return m_event;
}
void OAIActionParameters_global::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIActionParameters_global::is_event_Set() const{
    return m_event_isSet;
}

bool OAIActionParameters_global::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIActionParameters_global::getUserAttribute() const {
    return m_user_attribute;
}
void OAIActionParameters_global::setUserAttribute(const QString &user_attribute) {
    m_user_attribute = user_attribute;
    m_user_attribute_isSet = true;
}

bool OAIActionParameters_global::is_user_attribute_Set() const{
    return m_user_attribute_isSet;
}

bool OAIActionParameters_global::is_user_attribute_Valid() const{
    return m_user_attribute_isValid;
}

QList OAIActionParameters_global::getConcat() const {
    return m_concat;
}
void OAIActionParameters_global::setConcat(const QList &concat) {
    m_concat = concat;
    m_concat_isSet = true;
}

bool OAIActionParameters_global::is_concat_Set() const{
    return m_concat_isSet;
}

bool OAIActionParameters_global::is_concat_Valid() const{
    return m_concat_isValid;
}

OAIComponentProperty_condition OAIActionParameters_global::getCondition() const {
    return m_condition;
}
void OAIActionParameters_global::setCondition(const OAIComponentProperty_condition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIActionParameters_global::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIActionParameters_global::is_condition_Valid() const{
    return m_condition_isValid;
}

bool OAIActionParameters_global::getConfigured() const {
    return m_configured;
}
void OAIActionParameters_global::setConfigured(const bool &configured) {
    m_configured = configured;
    m_configured_isSet = true;
}

bool OAIActionParameters_global::is_configured_Set() const{
    return m_configured_isSet;
}

bool OAIActionParameters_global::is_configured_Valid() const{
    return m_configured_isValid;
}

QString OAIActionParameters_global::getType() const {
    return m_type;
}
void OAIActionParameters_global::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActionParameters_global::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActionParameters_global::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIActionParameters_global::getImportedValue() const {
    return m_imported_value;
}
void OAIActionParameters_global::setImportedValue(const QString &imported_value) {
    m_imported_value = imported_value;
    m_imported_value_isSet = true;
}

bool OAIActionParameters_global::is_imported_value_Set() const{
    return m_imported_value_isSet;
}

bool OAIActionParameters_global::is_imported_value_Valid() const{
    return m_imported_value_isValid;
}

QString OAIActionParameters_global::getComponentName() const {
    return m_component_name;
}
void OAIActionParameters_global::setComponentName(const QString &component_name) {
    m_component_name = component_name;
    m_component_name_isSet = true;
}

bool OAIActionParameters_global::is_component_name_Set() const{
    return m_component_name_isSet;
}

bool OAIActionParameters_global::is_component_name_Valid() const{
    return m_component_name_isValid;
}

QString OAIActionParameters_global::getProperty() const {
    return m_property;
}
void OAIActionParameters_global::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIActionParameters_global::is_property_Set() const{
    return m_property_isSet;
}

bool OAIActionParameters_global::is_property_Valid() const{
    return m_property_isValid;
}

bool OAIActionParameters_global::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binding_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_binding_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bindings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActionParameters_global::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
