/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormSummary::OAIFormSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormSummary::OAIFormSummary() {
    this->initializeModel();
}

OAIFormSummary::~OAIFormSummary() {}

void OAIFormSummary::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_form_action_type_isSet = false;
    m_form_action_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIFormSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormSummary::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("environmentName")]);
    m_environment_name_isSet = !json[QString("environmentName")].isNull() && m_environment_name_isValid;

    m_form_action_type_isValid = ::OpenAPI::fromJsonValue(m_form_action_type, json[QString("formActionType")]);
    m_form_action_type_isSet = !json[QString("formActionType")].isNull() && m_form_action_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIFormSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_data_type.isSet()) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_environment_name_isSet) {
        obj.insert(QString("environmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_form_action_type.isSet()) {
        obj.insert(QString("formActionType"), ::OpenAPI::toJsonValue(m_form_action_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIFormSummary::getAppId() const {
    return m_app_id;
}
void OAIFormSummary::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIFormSummary::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIFormSummary::is_app_id_Valid() const{
    return m_app_id_isValid;
}

OAIFormSummary_dataType OAIFormSummary::getDataType() const {
    return m_data_type;
}
void OAIFormSummary::setDataType(const OAIFormSummary_dataType &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIFormSummary::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIFormSummary::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIFormSummary::getEnvironmentName() const {
    return m_environment_name;
}
void OAIFormSummary::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAIFormSummary::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAIFormSummary::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

OAIFormActionType OAIFormSummary::getFormActionType() const {
    return m_form_action_type;
}
void OAIFormSummary::setFormActionType(const OAIFormActionType &form_action_type) {
    m_form_action_type = form_action_type;
    m_form_action_type_isSet = true;
}

bool OAIFormSummary::is_form_action_type_Set() const{
    return m_form_action_type_isSet;
}

bool OAIFormSummary::is_form_action_type_Valid() const{
    return m_form_action_type_isValid;
}

QString OAIFormSummary::getId() const {
    return m_id;
}
void OAIFormSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFormSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFormSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFormSummary::getName() const {
    return m_name;
}
void OAIFormSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFormSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFormSummary::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIFormSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_data_type_isValid && m_environment_name_isValid && m_form_action_type_isValid && m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
