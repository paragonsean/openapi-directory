/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateComponentData.h
 *
 * Updates and saves all of the information about a component, based on component ID.
 */

#ifndef OAIUpdateComponentData_H
#define OAIUpdateComponentData_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateComponentData : public OAIObject {
public:
    OAIUpdateComponentData();
    OAIUpdateComponentData(QString json);
    ~OAIUpdateComponentData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSourceId() const;
    void setSourceId(const QString &source_id);
    bool is_source_id_Set() const;
    bool is_source_id_Valid() const;

    QString getComponentType() const;
    void setComponentType(const QString &component_type);
    bool is_component_type_Set() const;
    bool is_component_type_Valid() const;

    QJsonValue getProperties() const;
    void setProperties(const QJsonValue &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    QList getChildren() const;
    void setChildren(const QList &children);
    bool is_children_Set() const;
    bool is_children_Valid() const;

    QList getVariants() const;
    void setVariants(const QList &variants);
    bool is_variants_Set() const;
    bool is_variants_Valid() const;

    QMap getOverrides() const;
    void setOverrides(const QMap &overrides);
    bool is_overrides_Set() const;
    bool is_overrides_Valid() const;

    QMap getBindingProperties() const;
    void setBindingProperties(const QMap &binding_properties);
    bool is_binding_properties_Set() const;
    bool is_binding_properties_Valid() const;

    QMap getCollectionProperties() const;
    void setCollectionProperties(const QMap &collection_properties);
    bool is_collection_properties_Set() const;
    bool is_collection_properties_Valid() const;

    QMap getEvents() const;
    void setEvents(const QMap &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    QString getSchemaVersion() const;
    void setSchemaVersion(const QString &schema_version);
    bool is_schema_version_Set() const;
    bool is_schema_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_source_id;
    bool m_source_id_isSet;
    bool m_source_id_isValid;

    QString m_component_type;
    bool m_component_type_isSet;
    bool m_component_type_isValid;

    QJsonValue m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    QList m_children;
    bool m_children_isSet;
    bool m_children_isValid;

    QList m_variants;
    bool m_variants_isSet;
    bool m_variants_isValid;

    QMap m_overrides;
    bool m_overrides_isSet;
    bool m_overrides_isValid;

    QMap m_binding_properties;
    bool m_binding_properties_isSet;
    bool m_binding_properties_isValid;

    QMap m_collection_properties;
    bool m_collection_properties_isSet;
    bool m_collection_properties_isValid;

    QMap m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    QString m_schema_version;
    bool m_schema_version_isSet;
    bool m_schema_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateComponentData)

#endif // OAIUpdateComponentData_H
