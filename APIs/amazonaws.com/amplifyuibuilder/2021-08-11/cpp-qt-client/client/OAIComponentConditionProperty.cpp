/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentConditionProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentConditionProperty::OAIComponentConditionProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentConditionProperty::OAIComponentConditionProperty() {
    this->initializeModel();
}

OAIComponentConditionProperty::~OAIComponentConditionProperty() {}

void OAIComponentConditionProperty::initializeModel() {

    m_property_isSet = false;
    m_property_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_operand_isSet = false;
    m_operand_isValid = false;

    m_then_isSet = false;
    m_then_isValid = false;

    m_r_else_isSet = false;
    m_r_else_isValid = false;

    m_operand_type_isSet = false;
    m_operand_type_isValid = false;
}

void OAIComponentConditionProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentConditionProperty::fromJsonObject(QJsonObject json) {

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_operand_isValid = ::OpenAPI::fromJsonValue(m_operand, json[QString("operand")]);
    m_operand_isSet = !json[QString("operand")].isNull() && m_operand_isValid;

    m_then_isValid = ::OpenAPI::fromJsonValue(m_then, json[QString("then")]);
    m_then_isSet = !json[QString("then")].isNull() && m_then_isValid;

    m_r_else_isValid = ::OpenAPI::fromJsonValue(m_r_else, json[QString("else")]);
    m_r_else_isSet = !json[QString("else")].isNull() && m_r_else_isValid;

    m_operand_type_isValid = ::OpenAPI::fromJsonValue(m_operand_type, json[QString("operandType")]);
    m_operand_type_isSet = !json[QString("operandType")].isNull() && m_operand_type_isValid;
}

QString OAIComponentConditionProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentConditionProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_operand_isSet) {
        obj.insert(QString("operand"), ::OpenAPI::toJsonValue(m_operand));
    }
    if (m_then.isSet()) {
        obj.insert(QString("then"), ::OpenAPI::toJsonValue(m_then));
    }
    if (m_r_else.isSet()) {
        obj.insert(QString("else"), ::OpenAPI::toJsonValue(m_r_else));
    }
    if (m_operand_type_isSet) {
        obj.insert(QString("operandType"), ::OpenAPI::toJsonValue(m_operand_type));
    }
    return obj;
}

QString OAIComponentConditionProperty::getProperty() const {
    return m_property;
}
void OAIComponentConditionProperty::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIComponentConditionProperty::is_property_Set() const{
    return m_property_isSet;
}

bool OAIComponentConditionProperty::is_property_Valid() const{
    return m_property_isValid;
}

QString OAIComponentConditionProperty::getField() const {
    return m_field;
}
void OAIComponentConditionProperty::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIComponentConditionProperty::is_field_Set() const{
    return m_field_isSet;
}

bool OAIComponentConditionProperty::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIComponentConditionProperty::getROperator() const {
    return m_r_operator;
}
void OAIComponentConditionProperty::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIComponentConditionProperty::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIComponentConditionProperty::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIComponentConditionProperty::getOperand() const {
    return m_operand;
}
void OAIComponentConditionProperty::setOperand(const QString &operand) {
    m_operand = operand;
    m_operand_isSet = true;
}

bool OAIComponentConditionProperty::is_operand_Set() const{
    return m_operand_isSet;
}

bool OAIComponentConditionProperty::is_operand_Valid() const{
    return m_operand_isValid;
}

OAIComponentConditionProperty_then OAIComponentConditionProperty::getThen() const {
    return m_then;
}
void OAIComponentConditionProperty::setThen(const OAIComponentConditionProperty_then &then) {
    m_then = then;
    m_then_isSet = true;
}

bool OAIComponentConditionProperty::is_then_Set() const{
    return m_then_isSet;
}

bool OAIComponentConditionProperty::is_then_Valid() const{
    return m_then_isValid;
}

OAIComponentConditionProperty_else OAIComponentConditionProperty::getRElse() const {
    return m_r_else;
}
void OAIComponentConditionProperty::setRElse(const OAIComponentConditionProperty_else &r_else) {
    m_r_else = r_else;
    m_r_else_isSet = true;
}

bool OAIComponentConditionProperty::is_r_else_Set() const{
    return m_r_else_isSet;
}

bool OAIComponentConditionProperty::is_r_else_Valid() const{
    return m_r_else_isValid;
}

QString OAIComponentConditionProperty::getOperandType() const {
    return m_operand_type;
}
void OAIComponentConditionProperty::setOperandType(const QString &operand_type) {
    m_operand_type = operand_type;
    m_operand_type_isSet = true;
}

bool OAIComponentConditionProperty::is_operand_type_Set() const{
    return m_operand_type_isSet;
}

bool OAIComponentConditionProperty::is_operand_type_Valid() const{
    return m_operand_type_isValid;
}

bool OAIComponentConditionProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_then.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_else.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operand_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentConditionProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
