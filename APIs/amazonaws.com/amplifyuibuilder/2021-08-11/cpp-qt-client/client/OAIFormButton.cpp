/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormButton.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormButton::OAIFormButton(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormButton::OAIFormButton() {
    this->initializeModel();
}

OAIFormButton::~OAIFormButton() {}

void OAIFormButton::initializeModel() {

    m_excluded_isSet = false;
    m_excluded_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;
}

void OAIFormButton::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormButton::fromJsonObject(QJsonObject json) {

    m_excluded_isValid = ::OpenAPI::fromJsonValue(m_excluded, json[QString("excluded")]);
    m_excluded_isSet = !json[QString("excluded")].isNull() && m_excluded_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;
}

QString OAIFormButton::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormButton::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_isSet) {
        obj.insert(QString("excluded"), ::OpenAPI::toJsonValue(m_excluded));
    }
    if (m_children_isSet) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    return obj;
}

bool OAIFormButton::getExcluded() const {
    return m_excluded;
}
void OAIFormButton::setExcluded(const bool &excluded) {
    m_excluded = excluded;
    m_excluded_isSet = true;
}

bool OAIFormButton::is_excluded_Set() const{
    return m_excluded_isSet;
}

bool OAIFormButton::is_excluded_Valid() const{
    return m_excluded_isValid;
}

QString OAIFormButton::getChildren() const {
    return m_children;
}
void OAIFormButton::setChildren(const QString &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIFormButton::is_children_Set() const{
    return m_children_isSet;
}

bool OAIFormButton::is_children_Valid() const{
    return m_children_isValid;
}

OAIFormButton_position OAIFormButton::getPosition() const {
    return m_position;
}
void OAIFormButton::setPosition(const OAIFormButton_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIFormButton::is_position_Set() const{
    return m_position_isSet;
}

bool OAIFormButton::is_position_Valid() const{
    return m_position_isValid;
}

bool OAIFormButton::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormButton::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
