/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormCTA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormCTA::OAIFormCTA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormCTA::OAIFormCTA() {
    this->initializeModel();
}

OAIFormCTA::~OAIFormCTA() {}

void OAIFormCTA::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_clear_isSet = false;
    m_clear_isValid = false;

    m_cancel_isSet = false;
    m_cancel_isValid = false;

    m_submit_isSet = false;
    m_submit_isValid = false;
}

void OAIFormCTA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormCTA::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_clear_isValid = ::OpenAPI::fromJsonValue(m_clear, json[QString("clear")]);
    m_clear_isSet = !json[QString("clear")].isNull() && m_clear_isValid;

    m_cancel_isValid = ::OpenAPI::fromJsonValue(m_cancel, json[QString("cancel")]);
    m_cancel_isSet = !json[QString("cancel")].isNull() && m_cancel_isValid;

    m_submit_isValid = ::OpenAPI::fromJsonValue(m_submit, json[QString("submit")]);
    m_submit_isSet = !json[QString("submit")].isNull() && m_submit_isValid;
}

QString OAIFormCTA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormCTA::asJsonObject() const {
    QJsonObject obj;
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_clear.isSet()) {
        obj.insert(QString("clear"), ::OpenAPI::toJsonValue(m_clear));
    }
    if (m_cancel.isSet()) {
        obj.insert(QString("cancel"), ::OpenAPI::toJsonValue(m_cancel));
    }
    if (m_submit.isSet()) {
        obj.insert(QString("submit"), ::OpenAPI::toJsonValue(m_submit));
    }
    return obj;
}

OAIFormButtonsPosition OAIFormCTA::getPosition() const {
    return m_position;
}
void OAIFormCTA::setPosition(const OAIFormButtonsPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIFormCTA::is_position_Set() const{
    return m_position_isSet;
}

bool OAIFormCTA::is_position_Valid() const{
    return m_position_isValid;
}

OAIFormCTA_clear OAIFormCTA::getClear() const {
    return m_clear;
}
void OAIFormCTA::setClear(const OAIFormCTA_clear &clear) {
    m_clear = clear;
    m_clear_isSet = true;
}

bool OAIFormCTA::is_clear_Set() const{
    return m_clear_isSet;
}

bool OAIFormCTA::is_clear_Valid() const{
    return m_clear_isValid;
}

OAIFormCTA_cancel OAIFormCTA::getCancel() const {
    return m_cancel;
}
void OAIFormCTA::setCancel(const OAIFormCTA_cancel &cancel) {
    m_cancel = cancel;
    m_cancel_isSet = true;
}

bool OAIFormCTA::is_cancel_Set() const{
    return m_cancel_isSet;
}

bool OAIFormCTA::is_cancel_Valid() const{
    return m_cancel_isValid;
}

OAIFormCTA_submit OAIFormCTA::getSubmit() const {
    return m_submit;
}
void OAIFormCTA::setSubmit(const OAIFormCTA_submit &submit) {
    m_submit = submit;
    m_submit_isSet = true;
}

bool OAIFormCTA::is_submit_Set() const{
    return m_submit_isSet;
}

bool OAIFormCTA::is_submit_Valid() const{
    return m_submit_isValid;
}

bool OAIFormCTA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clear.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormCTA::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
