/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComponentConditionProperty.h
 *
 * Represents a conditional expression to set a component property. Use &lt;code&gt;ComponentConditionProperty&lt;/code&gt; to set a property to different values conditionally, based on the value of another property.
 */

#ifndef OAIComponentConditionProperty_H
#define OAIComponentConditionProperty_H

#include <QJsonObject>

#include "OAIComponentConditionProperty_else.h"
#include "OAIComponentConditionProperty_then.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComponentConditionProperty_then;
class OAIComponentConditionProperty_else;

class OAIComponentConditionProperty : public OAIObject {
public:
    OAIComponentConditionProperty();
    OAIComponentConditionProperty(QString json);
    ~OAIComponentConditionProperty() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getProperty() const;
    void setProperty(const QString &property);
    bool is_property_Set() const;
    bool is_property_Valid() const;

    QString getField() const;
    void setField(const QString &field);
    bool is_field_Set() const;
    bool is_field_Valid() const;

    QString getROperator() const;
    void setROperator(const QString &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    QString getOperand() const;
    void setOperand(const QString &operand);
    bool is_operand_Set() const;
    bool is_operand_Valid() const;

    OAIComponentConditionProperty_then getThen() const;
    void setThen(const OAIComponentConditionProperty_then &then);
    bool is_then_Set() const;
    bool is_then_Valid() const;

    OAIComponentConditionProperty_else getRElse() const;
    void setRElse(const OAIComponentConditionProperty_else &r_else);
    bool is_r_else_Set() const;
    bool is_r_else_Valid() const;

    QString getOperandType() const;
    void setOperandType(const QString &operand_type);
    bool is_operand_type_Set() const;
    bool is_operand_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_property;
    bool m_property_isSet;
    bool m_property_isValid;

    QString m_field;
    bool m_field_isSet;
    bool m_field_isValid;

    QString m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    QString m_operand;
    bool m_operand_isSet;
    bool m_operand_isValid;

    OAIComponentConditionProperty_then m_then;
    bool m_then_isSet;
    bool m_then_isValid;

    OAIComponentConditionProperty_else m_r_else;
    bool m_r_else_isSet;
    bool m_r_else_isValid;

    QString m_operand_type;
    bool m_operand_type_isSet;
    bool m_operand_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComponentConditionProperty)

#endif // OAIComponentConditionProperty_H
