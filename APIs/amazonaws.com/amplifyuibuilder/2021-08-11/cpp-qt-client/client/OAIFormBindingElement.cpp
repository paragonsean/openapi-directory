/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormBindingElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormBindingElement::OAIFormBindingElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormBindingElement::OAIFormBindingElement() {
    this->initializeModel();
}

OAIFormBindingElement::~OAIFormBindingElement() {}

void OAIFormBindingElement::initializeModel() {

    m_element_isSet = false;
    m_element_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;
}

void OAIFormBindingElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormBindingElement::fromJsonObject(QJsonObject json) {

    m_element_isValid = ::OpenAPI::fromJsonValue(m_element, json[QString("element")]);
    m_element_isSet = !json[QString("element")].isNull() && m_element_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;
}

QString OAIFormBindingElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormBindingElement::asJsonObject() const {
    QJsonObject obj;
    if (m_element_isSet) {
        obj.insert(QString("element"), ::OpenAPI::toJsonValue(m_element));
    }
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    return obj;
}

QString OAIFormBindingElement::getElement() const {
    return m_element;
}
void OAIFormBindingElement::setElement(const QString &element) {
    m_element = element;
    m_element_isSet = true;
}

bool OAIFormBindingElement::is_element_Set() const{
    return m_element_isSet;
}

bool OAIFormBindingElement::is_element_Valid() const{
    return m_element_isValid;
}

QString OAIFormBindingElement::getProperty() const {
    return m_property;
}
void OAIFormBindingElement::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIFormBindingElement::is_property_Set() const{
    return m_property_isSet;
}

bool OAIFormBindingElement::is_property_Valid() const{
    return m_property_isValid;
}

bool OAIFormBindingElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormBindingElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_element_isValid && m_property_isValid && true;
}

} // namespace OpenAPI
