/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISortProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISortProperty::OAISortProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISortProperty::OAISortProperty() {
    this->initializeModel();
}

OAISortProperty::~OAISortProperty() {}

void OAISortProperty::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;
}

void OAISortProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISortProperty::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;
}

QString OAISortProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISortProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    return obj;
}

QString OAISortProperty::getField() const {
    return m_field;
}
void OAISortProperty::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAISortProperty::is_field_Set() const{
    return m_field_isSet;
}

bool OAISortProperty::is_field_Valid() const{
    return m_field_isValid;
}

OAISortDirection OAISortProperty::getDirection() const {
    return m_direction;
}
void OAISortProperty::setDirection(const OAISortDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAISortProperty::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAISortProperty::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAISortProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISortProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_isValid && m_direction_isValid && true;
}

} // namespace OpenAPI
