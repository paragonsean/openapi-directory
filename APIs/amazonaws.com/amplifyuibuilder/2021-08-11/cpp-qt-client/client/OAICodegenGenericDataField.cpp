/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodegenGenericDataField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodegenGenericDataField::OAICodegenGenericDataField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodegenGenericDataField::OAICodegenGenericDataField() {
    this->initializeModel();
}

OAICodegenGenericDataField::~OAICodegenGenericDataField() {}

void OAICodegenGenericDataField::initializeModel() {

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_data_type_value_isSet = false;
    m_data_type_value_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_is_array_isSet = false;
    m_is_array_isValid = false;

    m_relationship_isSet = false;
    m_relationship_isValid = false;
}

void OAICodegenGenericDataField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodegenGenericDataField::fromJsonObject(QJsonObject json) {

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_data_type_value_isValid = ::OpenAPI::fromJsonValue(m_data_type_value, json[QString("dataTypeValue")]);
    m_data_type_value_isSet = !json[QString("dataTypeValue")].isNull() && m_data_type_value_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_is_array_isValid = ::OpenAPI::fromJsonValue(m_is_array, json[QString("isArray")]);
    m_is_array_isSet = !json[QString("isArray")].isNull() && m_is_array_isValid;

    m_relationship_isValid = ::OpenAPI::fromJsonValue(m_relationship, json[QString("relationship")]);
    m_relationship_isSet = !json[QString("relationship")].isNull() && m_relationship_isValid;
}

QString OAICodegenGenericDataField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodegenGenericDataField::asJsonObject() const {
    QJsonObject obj;
    if (m_data_type.isSet()) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_data_type_value_isSet) {
        obj.insert(QString("dataTypeValue"), ::OpenAPI::toJsonValue(m_data_type_value));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_is_array_isSet) {
        obj.insert(QString("isArray"), ::OpenAPI::toJsonValue(m_is_array));
    }
    if (m_relationship.isSet()) {
        obj.insert(QString("relationship"), ::OpenAPI::toJsonValue(m_relationship));
    }
    return obj;
}

OAICodegenGenericDataFieldDataType OAICodegenGenericDataField::getDataType() const {
    return m_data_type;
}
void OAICodegenGenericDataField::setDataType(const OAICodegenGenericDataFieldDataType &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAICodegenGenericDataField::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAICodegenGenericDataField::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAICodegenGenericDataField::getDataTypeValue() const {
    return m_data_type_value;
}
void OAICodegenGenericDataField::setDataTypeValue(const QString &data_type_value) {
    m_data_type_value = data_type_value;
    m_data_type_value_isSet = true;
}

bool OAICodegenGenericDataField::is_data_type_value_Set() const{
    return m_data_type_value_isSet;
}

bool OAICodegenGenericDataField::is_data_type_value_Valid() const{
    return m_data_type_value_isValid;
}

bool OAICodegenGenericDataField::getRequired() const {
    return m_required;
}
void OAICodegenGenericDataField::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAICodegenGenericDataField::is_required_Set() const{
    return m_required_isSet;
}

bool OAICodegenGenericDataField::is_required_Valid() const{
    return m_required_isValid;
}

bool OAICodegenGenericDataField::getReadOnly() const {
    return m_read_only;
}
void OAICodegenGenericDataField::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAICodegenGenericDataField::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAICodegenGenericDataField::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAICodegenGenericDataField::getIsArray() const {
    return m_is_array;
}
void OAICodegenGenericDataField::setIsArray(const bool &is_array) {
    m_is_array = is_array;
    m_is_array_isSet = true;
}

bool OAICodegenGenericDataField::is_is_array_Set() const{
    return m_is_array_isSet;
}

bool OAICodegenGenericDataField::is_is_array_Valid() const{
    return m_is_array_isValid;
}

OAICodegenGenericDataField_relationship OAICodegenGenericDataField::getRelationship() const {
    return m_relationship;
}
void OAICodegenGenericDataField::setRelationship(const OAICodegenGenericDataField_relationship &relationship) {
    m_relationship = relationship;
    m_relationship_isSet = true;
}

bool OAICodegenGenericDataField::is_relationship_Set() const{
    return m_relationship_isSet;
}

bool OAICodegenGenericDataField::is_relationship_Valid() const{
    return m_relationship_isValid;
}

bool OAICodegenGenericDataField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_array_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodegenGenericDataField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_type_isValid && m_data_type_value_isValid && m_required_isValid && m_read_only_isValid && m_is_array_isValid && true;
}

} // namespace OpenAPI
