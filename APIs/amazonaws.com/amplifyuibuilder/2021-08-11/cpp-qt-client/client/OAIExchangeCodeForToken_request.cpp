/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExchangeCodeForToken_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExchangeCodeForToken_request::OAIExchangeCodeForToken_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExchangeCodeForToken_request::OAIExchangeCodeForToken_request() {
    this->initializeModel();
}

OAIExchangeCodeForToken_request::~OAIExchangeCodeForToken_request() {}

void OAIExchangeCodeForToken_request::initializeModel() {

    m_request_isSet = false;
    m_request_isValid = false;
}

void OAIExchangeCodeForToken_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExchangeCodeForToken_request::fromJsonObject(QJsonObject json) {

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;
}

QString OAIExchangeCodeForToken_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExchangeCodeForToken_request::asJsonObject() const {
    QJsonObject obj;
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    return obj;
}

OAIExchangeCodeForToken_request_request OAIExchangeCodeForToken_request::getRequest() const {
    return m_request;
}
void OAIExchangeCodeForToken_request::setRequest(const OAIExchangeCodeForToken_request_request &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIExchangeCodeForToken_request::is_request_Set() const{
    return m_request_isSet;
}

bool OAIExchangeCodeForToken_request::is_request_Valid() const{
    return m_request_isValid;
}

bool OAIExchangeCodeForToken_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExchangeCodeForToken_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_isValid && true;
}

} // namespace OpenAPI
