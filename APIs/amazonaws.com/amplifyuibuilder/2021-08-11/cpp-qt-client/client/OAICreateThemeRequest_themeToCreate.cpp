/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateThemeRequest_themeToCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateThemeRequest_themeToCreate::OAICreateThemeRequest_themeToCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateThemeRequest_themeToCreate::OAICreateThemeRequest_themeToCreate() {
    this->initializeModel();
}

OAICreateThemeRequest_themeToCreate::~OAICreateThemeRequest_themeToCreate() {}

void OAICreateThemeRequest_themeToCreate::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateThemeRequest_themeToCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateThemeRequest_themeToCreate::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateThemeRequest_themeToCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateThemeRequest_themeToCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateThemeRequest_themeToCreate::getName() const {
    return m_name;
}
void OAICreateThemeRequest_themeToCreate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateThemeRequest_themeToCreate::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateThemeRequest_themeToCreate::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICreateThemeRequest_themeToCreate::getValues() const {
    return m_values;
}
void OAICreateThemeRequest_themeToCreate::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICreateThemeRequest_themeToCreate::is_values_Set() const{
    return m_values_isSet;
}

bool OAICreateThemeRequest_themeToCreate::is_values_Valid() const{
    return m_values_isValid;
}

QList OAICreateThemeRequest_themeToCreate::getOverrides() const {
    return m_overrides;
}
void OAICreateThemeRequest_themeToCreate::setOverrides(const QList &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAICreateThemeRequest_themeToCreate::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAICreateThemeRequest_themeToCreate::is_overrides_Valid() const{
    return m_overrides_isValid;
}

QMap OAICreateThemeRequest_themeToCreate::getTags() const {
    return m_tags;
}
void OAICreateThemeRequest_themeToCreate::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateThemeRequest_themeToCreate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateThemeRequest_themeToCreate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateThemeRequest_themeToCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateThemeRequest_themeToCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
