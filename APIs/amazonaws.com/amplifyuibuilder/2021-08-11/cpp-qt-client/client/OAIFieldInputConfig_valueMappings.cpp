/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldInputConfig_valueMappings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldInputConfig_valueMappings::OAIFieldInputConfig_valueMappings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldInputConfig_valueMappings::OAIFieldInputConfig_valueMappings() {
    this->initializeModel();
}

OAIFieldInputConfig_valueMappings::~OAIFieldInputConfig_valueMappings() {}

void OAIFieldInputConfig_valueMappings::initializeModel() {

    m_values_isSet = false;
    m_values_isValid = false;

    m_binding_properties_isSet = false;
    m_binding_properties_isValid = false;
}

void OAIFieldInputConfig_valueMappings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldInputConfig_valueMappings::fromJsonObject(QJsonObject json) {

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_binding_properties_isValid = ::OpenAPI::fromJsonValue(m_binding_properties, json[QString("bindingProperties")]);
    m_binding_properties_isSet = !json[QString("bindingProperties")].isNull() && m_binding_properties_isValid;
}

QString OAIFieldInputConfig_valueMappings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldInputConfig_valueMappings::asJsonObject() const {
    QJsonObject obj;
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_binding_properties.isSet()) {
        obj.insert(QString("bindingProperties"), ::OpenAPI::toJsonValue(m_binding_properties));
    }
    return obj;
}

QList OAIFieldInputConfig_valueMappings::getValues() const {
    return m_values;
}
void OAIFieldInputConfig_valueMappings::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIFieldInputConfig_valueMappings::is_values_Set() const{
    return m_values_isSet;
}

bool OAIFieldInputConfig_valueMappings::is_values_Valid() const{
    return m_values_isValid;
}

QMap OAIFieldInputConfig_valueMappings::getBindingProperties() const {
    return m_binding_properties;
}
void OAIFieldInputConfig_valueMappings::setBindingProperties(const QMap &binding_properties) {
    m_binding_properties = binding_properties;
    m_binding_properties_isSet = true;
}

bool OAIFieldInputConfig_valueMappings::is_binding_properties_Set() const{
    return m_binding_properties_isSet;
}

bool OAIFieldInputConfig_valueMappings::is_binding_properties_Valid() const{
    return m_binding_properties_isValid;
}

bool OAIFieldInputConfig_valueMappings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_binding_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldInputConfig_valueMappings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_values_isValid && true;
}

} // namespace OpenAPI
