/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFormRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFormRequest::OAIUpdateFormRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFormRequest::OAIUpdateFormRequest() {
    this->initializeModel();
}

OAIUpdateFormRequest::~OAIUpdateFormRequest() {}

void OAIUpdateFormRequest::initializeModel() {

    m_updated_form_isSet = false;
    m_updated_form_isValid = false;
}

void OAIUpdateFormRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFormRequest::fromJsonObject(QJsonObject json) {

    m_updated_form_isValid = ::OpenAPI::fromJsonValue(m_updated_form, json[QString("updatedForm")]);
    m_updated_form_isSet = !json[QString("updatedForm")].isNull() && m_updated_form_isValid;
}

QString OAIUpdateFormRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFormRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_updated_form.isSet()) {
        obj.insert(QString("updatedForm"), ::OpenAPI::toJsonValue(m_updated_form));
    }
    return obj;
}

OAIUpdateFormRequest_updatedForm OAIUpdateFormRequest::getUpdatedForm() const {
    return m_updated_form;
}
void OAIUpdateFormRequest::setUpdatedForm(const OAIUpdateFormRequest_updatedForm &updated_form) {
    m_updated_form = updated_form;
    m_updated_form_isSet = true;
}

bool OAIUpdateFormRequest::is_updated_form_Set() const{
    return m_updated_form_isSet;
}

bool OAIUpdateFormRequest::is_updated_form_Valid() const{
    return m_updated_form_isValid;
}

bool OAIUpdateFormRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_updated_form.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFormRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_updated_form_isValid && true;
}

} // namespace OpenAPI
