/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateComponentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateComponentResponse::OAICreateComponentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateComponentResponse::OAICreateComponentResponse() {
    this->initializeModel();
}

OAICreateComponentResponse::~OAICreateComponentResponse() {}

void OAICreateComponentResponse::initializeModel() {

    m_entity_isSet = false;
    m_entity_isValid = false;
}

void OAICreateComponentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateComponentResponse::fromJsonObject(QJsonObject json) {

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;
}

QString OAICreateComponentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateComponentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_entity.isSet()) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    return obj;
}

OAICreateComponentResponse_entity OAICreateComponentResponse::getEntity() const {
    return m_entity;
}
void OAICreateComponentResponse::setEntity(const OAICreateComponentResponse_entity &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAICreateComponentResponse::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAICreateComponentResponse::is_entity_Valid() const{
    return m_entity_isValid;
}

bool OAICreateComponentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateComponentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
