/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFormResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFormResponse::OAIGetFormResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFormResponse::OAIGetFormResponse() {
    this->initializeModel();
}

OAIGetFormResponse::~OAIGetFormResponse() {}

void OAIGetFormResponse::initializeModel() {

    m_form_isSet = false;
    m_form_isValid = false;
}

void OAIGetFormResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFormResponse::fromJsonObject(QJsonObject json) {

    m_form_isValid = ::OpenAPI::fromJsonValue(m_form, json[QString("form")]);
    m_form_isSet = !json[QString("form")].isNull() && m_form_isValid;
}

QString OAIGetFormResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFormResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_form.isSet()) {
        obj.insert(QString("form"), ::OpenAPI::toJsonValue(m_form));
    }
    return obj;
}

OAIGetFormResponse_form OAIGetFormResponse::getForm() const {
    return m_form;
}
void OAIGetFormResponse::setForm(const OAIGetFormResponse_form &form) {
    m_form = form;
    m_form_isSet = true;
}

bool OAIGetFormResponse::is_form_Set() const{
    return m_form_isSet;
}

bool OAIGetFormResponse::is_form_Valid() const{
    return m_form_isValid;
}

bool OAIGetFormResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_form.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFormResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
