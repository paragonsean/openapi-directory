/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormInputValueProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormInputValueProperty::OAIFormInputValueProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormInputValueProperty::OAIFormInputValueProperty() {
    this->initializeModel();
}

OAIFormInputValueProperty::~OAIFormInputValueProperty() {}

void OAIFormInputValueProperty::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_binding_properties_isSet = false;
    m_binding_properties_isValid = false;

    m_concat_isSet = false;
    m_concat_isValid = false;
}

void OAIFormInputValueProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormInputValueProperty::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_binding_properties_isValid = ::OpenAPI::fromJsonValue(m_binding_properties, json[QString("bindingProperties")]);
    m_binding_properties_isSet = !json[QString("bindingProperties")].isNull() && m_binding_properties_isValid;

    m_concat_isValid = ::OpenAPI::fromJsonValue(m_concat, json[QString("concat")]);
    m_concat_isSet = !json[QString("concat")].isNull() && m_concat_isValid;
}

QString OAIFormInputValueProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormInputValueProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_binding_properties.isSet()) {
        obj.insert(QString("bindingProperties"), ::OpenAPI::toJsonValue(m_binding_properties));
    }
    if (m_concat.isSet()) {
        obj.insert(QString("concat"), ::OpenAPI::toJsonValue(m_concat));
    }
    return obj;
}

QString OAIFormInputValueProperty::getValue() const {
    return m_value;
}
void OAIFormInputValueProperty::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFormInputValueProperty::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFormInputValueProperty::is_value_Valid() const{
    return m_value_isValid;
}

OAIFormInputValueProperty_bindingProperties OAIFormInputValueProperty::getBindingProperties() const {
    return m_binding_properties;
}
void OAIFormInputValueProperty::setBindingProperties(const OAIFormInputValueProperty_bindingProperties &binding_properties) {
    m_binding_properties = binding_properties;
    m_binding_properties_isSet = true;
}

bool OAIFormInputValueProperty::is_binding_properties_Set() const{
    return m_binding_properties_isSet;
}

bool OAIFormInputValueProperty::is_binding_properties_Valid() const{
    return m_binding_properties_isValid;
}

QList OAIFormInputValueProperty::getConcat() const {
    return m_concat;
}
void OAIFormInputValueProperty::setConcat(const QList &concat) {
    m_concat = concat;
    m_concat_isSet = true;
}

bool OAIFormInputValueProperty::is_concat_Set() const{
    return m_concat_isSet;
}

bool OAIFormInputValueProperty::is_concat_Valid() const{
    return m_concat_isValid;
}

bool OAIFormInputValueProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binding_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_concat.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormInputValueProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
