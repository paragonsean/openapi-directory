/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComponentConditionProperty_else.h
 *
 * 
 */

#ifndef OAIComponentConditionProperty_else_H
#define OAIComponentConditionProperty_else_H

#include <QJsonObject>

#include "OAIComponentProperty_bindingProperties.h"
#include "OAIComponentProperty_collectionBindingProperties.h"
#include "OAIComponentProperty_condition.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComponentProperty_bindingProperties;
class OAIComponentProperty_collectionBindingProperties;
class OAIComponentProperty_condition;

class OAIComponentConditionProperty_else : public OAIObject {
public:
    OAIComponentConditionProperty_else();
    OAIComponentConditionProperty_else(QString json);
    ~OAIComponentConditionProperty_else() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    OAIComponentProperty_bindingProperties getBindingProperties() const;
    void setBindingProperties(const OAIComponentProperty_bindingProperties &binding_properties);
    bool is_binding_properties_Set() const;
    bool is_binding_properties_Valid() const;

    OAIComponentProperty_collectionBindingProperties getCollectionBindingProperties() const;
    void setCollectionBindingProperties(const OAIComponentProperty_collectionBindingProperties &collection_binding_properties);
    bool is_collection_binding_properties_Set() const;
    bool is_collection_binding_properties_Valid() const;

    QString getDefaultValue() const;
    void setDefaultValue(const QString &default_value);
    bool is_default_value_Set() const;
    bool is_default_value_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QMap getBindings() const;
    void setBindings(const QMap &bindings);
    bool is_bindings_Set() const;
    bool is_bindings_Valid() const;

    QString getEvent() const;
    void setEvent(const QString &event);
    bool is_event_Set() const;
    bool is_event_Valid() const;

    QString getUserAttribute() const;
    void setUserAttribute(const QString &user_attribute);
    bool is_user_attribute_Set() const;
    bool is_user_attribute_Valid() const;

    QList getConcat() const;
    void setConcat(const QList &concat);
    bool is_concat_Set() const;
    bool is_concat_Valid() const;

    OAIComponentProperty_condition getCondition() const;
    void setCondition(const OAIComponentProperty_condition &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    bool getConfigured() const;
    void setConfigured(const bool &configured);
    bool is_configured_Set() const;
    bool is_configured_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getImportedValue() const;
    void setImportedValue(const QString &imported_value);
    bool is_imported_value_Set() const;
    bool is_imported_value_Valid() const;

    QString getComponentName() const;
    void setComponentName(const QString &component_name);
    bool is_component_name_Set() const;
    bool is_component_name_Valid() const;

    QString getProperty() const;
    void setProperty(const QString &property);
    bool is_property_Set() const;
    bool is_property_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    OAIComponentProperty_bindingProperties m_binding_properties;
    bool m_binding_properties_isSet;
    bool m_binding_properties_isValid;

    OAIComponentProperty_collectionBindingProperties m_collection_binding_properties;
    bool m_collection_binding_properties_isSet;
    bool m_collection_binding_properties_isValid;

    QString m_default_value;
    bool m_default_value_isSet;
    bool m_default_value_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QMap m_bindings;
    bool m_bindings_isSet;
    bool m_bindings_isValid;

    QString m_event;
    bool m_event_isSet;
    bool m_event_isValid;

    QString m_user_attribute;
    bool m_user_attribute_isSet;
    bool m_user_attribute_isValid;

    QList m_concat;
    bool m_concat_isSet;
    bool m_concat_isValid;

    OAIComponentProperty_condition m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;

    bool m_configured;
    bool m_configured_isSet;
    bool m_configured_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_imported_value;
    bool m_imported_value_isSet;
    bool m_imported_value_isValid;

    QString m_component_name;
    bool m_component_name_isSet;
    bool m_component_name_isValid;

    QString m_property;
    bool m_property_isSet;
    bool m_property_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComponentConditionProperty_else)

#endif // OAIComponentConditionProperty_else_H
