/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldConfig::OAIFieldConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldConfig::OAIFieldConfig() {
    this->initializeModel();
}

OAIFieldConfig::~OAIFieldConfig() {}

void OAIFieldConfig::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_excluded_isSet = false;
    m_excluded_isValid = false;

    m_input_type_isSet = false;
    m_input_type_isValid = false;

    m_validations_isSet = false;
    m_validations_isValid = false;
}

void OAIFieldConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldConfig::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_excluded_isValid = ::OpenAPI::fromJsonValue(m_excluded, json[QString("excluded")]);
    m_excluded_isSet = !json[QString("excluded")].isNull() && m_excluded_isValid;

    m_input_type_isValid = ::OpenAPI::fromJsonValue(m_input_type, json[QString("inputType")]);
    m_input_type_isSet = !json[QString("inputType")].isNull() && m_input_type_isValid;

    m_validations_isValid = ::OpenAPI::fromJsonValue(m_validations, json[QString("validations")]);
    m_validations_isSet = !json[QString("validations")].isNull() && m_validations_isValid;
}

QString OAIFieldConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_excluded_isSet) {
        obj.insert(QString("excluded"), ::OpenAPI::toJsonValue(m_excluded));
    }
    if (m_input_type.isSet()) {
        obj.insert(QString("inputType"), ::OpenAPI::toJsonValue(m_input_type));
    }
    if (m_validations.isSet()) {
        obj.insert(QString("validations"), ::OpenAPI::toJsonValue(m_validations));
    }
    return obj;
}

QString OAIFieldConfig::getLabel() const {
    return m_label;
}
void OAIFieldConfig::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIFieldConfig::is_label_Set() const{
    return m_label_isSet;
}

bool OAIFieldConfig::is_label_Valid() const{
    return m_label_isValid;
}

OAIFieldConfig_position OAIFieldConfig::getPosition() const {
    return m_position;
}
void OAIFieldConfig::setPosition(const OAIFieldConfig_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIFieldConfig::is_position_Set() const{
    return m_position_isSet;
}

bool OAIFieldConfig::is_position_Valid() const{
    return m_position_isValid;
}

bool OAIFieldConfig::getExcluded() const {
    return m_excluded;
}
void OAIFieldConfig::setExcluded(const bool &excluded) {
    m_excluded = excluded;
    m_excluded_isSet = true;
}

bool OAIFieldConfig::is_excluded_Set() const{
    return m_excluded_isSet;
}

bool OAIFieldConfig::is_excluded_Valid() const{
    return m_excluded_isValid;
}

OAIFieldConfig_inputType OAIFieldConfig::getInputType() const {
    return m_input_type;
}
void OAIFieldConfig::setInputType(const OAIFieldConfig_inputType &input_type) {
    m_input_type = input_type;
    m_input_type_isSet = true;
}

bool OAIFieldConfig::is_input_type_Set() const{
    return m_input_type_isSet;
}

bool OAIFieldConfig::is_input_type_Valid() const{
    return m_input_type_isValid;
}

QList OAIFieldConfig::getValidations() const {
    return m_validations;
}
void OAIFieldConfig::setValidations(const QList &validations) {
    m_validations = validations;
    m_validations_isSet = true;
}

bool OAIFieldConfig::is_validations_Set() const{
    return m_validations_isSet;
}

bool OAIFieldConfig::is_validations_Valid() const{
    return m_validations_isValid;
}

bool OAIFieldConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
