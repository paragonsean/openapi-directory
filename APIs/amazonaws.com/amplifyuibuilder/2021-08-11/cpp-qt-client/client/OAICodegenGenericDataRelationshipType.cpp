/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodegenGenericDataRelationshipType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodegenGenericDataRelationshipType::OAICodegenGenericDataRelationshipType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodegenGenericDataRelationshipType::OAICodegenGenericDataRelationshipType() {
    this->initializeModel();
}

OAICodegenGenericDataRelationshipType::~OAICodegenGenericDataRelationshipType() {}

void OAICodegenGenericDataRelationshipType::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_related_model_name_isSet = false;
    m_related_model_name_isValid = false;

    m_related_model_fields_isSet = false;
    m_related_model_fields_isValid = false;

    m_can_unlink_associated_model_isSet = false;
    m_can_unlink_associated_model_isValid = false;

    m_related_join_field_name_isSet = false;
    m_related_join_field_name_isValid = false;

    m_related_join_table_name_isSet = false;
    m_related_join_table_name_isValid = false;

    m_belongs_to_field_on_related_model_isSet = false;
    m_belongs_to_field_on_related_model_isValid = false;

    m_associated_fields_isSet = false;
    m_associated_fields_isValid = false;

    m_is_has_many_index_isSet = false;
    m_is_has_many_index_isValid = false;
}

void OAICodegenGenericDataRelationshipType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodegenGenericDataRelationshipType::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_related_model_name_isValid = ::OpenAPI::fromJsonValue(m_related_model_name, json[QString("relatedModelName")]);
    m_related_model_name_isSet = !json[QString("relatedModelName")].isNull() && m_related_model_name_isValid;

    m_related_model_fields_isValid = ::OpenAPI::fromJsonValue(m_related_model_fields, json[QString("relatedModelFields")]);
    m_related_model_fields_isSet = !json[QString("relatedModelFields")].isNull() && m_related_model_fields_isValid;

    m_can_unlink_associated_model_isValid = ::OpenAPI::fromJsonValue(m_can_unlink_associated_model, json[QString("canUnlinkAssociatedModel")]);
    m_can_unlink_associated_model_isSet = !json[QString("canUnlinkAssociatedModel")].isNull() && m_can_unlink_associated_model_isValid;

    m_related_join_field_name_isValid = ::OpenAPI::fromJsonValue(m_related_join_field_name, json[QString("relatedJoinFieldName")]);
    m_related_join_field_name_isSet = !json[QString("relatedJoinFieldName")].isNull() && m_related_join_field_name_isValid;

    m_related_join_table_name_isValid = ::OpenAPI::fromJsonValue(m_related_join_table_name, json[QString("relatedJoinTableName")]);
    m_related_join_table_name_isSet = !json[QString("relatedJoinTableName")].isNull() && m_related_join_table_name_isValid;

    m_belongs_to_field_on_related_model_isValid = ::OpenAPI::fromJsonValue(m_belongs_to_field_on_related_model, json[QString("belongsToFieldOnRelatedModel")]);
    m_belongs_to_field_on_related_model_isSet = !json[QString("belongsToFieldOnRelatedModel")].isNull() && m_belongs_to_field_on_related_model_isValid;

    m_associated_fields_isValid = ::OpenAPI::fromJsonValue(m_associated_fields, json[QString("associatedFields")]);
    m_associated_fields_isSet = !json[QString("associatedFields")].isNull() && m_associated_fields_isValid;

    m_is_has_many_index_isValid = ::OpenAPI::fromJsonValue(m_is_has_many_index, json[QString("isHasManyIndex")]);
    m_is_has_many_index_isSet = !json[QString("isHasManyIndex")].isNull() && m_is_has_many_index_isValid;
}

QString OAICodegenGenericDataRelationshipType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodegenGenericDataRelationshipType::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_related_model_name_isSet) {
        obj.insert(QString("relatedModelName"), ::OpenAPI::toJsonValue(m_related_model_name));
    }
    if (m_related_model_fields.isSet()) {
        obj.insert(QString("relatedModelFields"), ::OpenAPI::toJsonValue(m_related_model_fields));
    }
    if (m_can_unlink_associated_model_isSet) {
        obj.insert(QString("canUnlinkAssociatedModel"), ::OpenAPI::toJsonValue(m_can_unlink_associated_model));
    }
    if (m_related_join_field_name_isSet) {
        obj.insert(QString("relatedJoinFieldName"), ::OpenAPI::toJsonValue(m_related_join_field_name));
    }
    if (m_related_join_table_name_isSet) {
        obj.insert(QString("relatedJoinTableName"), ::OpenAPI::toJsonValue(m_related_join_table_name));
    }
    if (m_belongs_to_field_on_related_model_isSet) {
        obj.insert(QString("belongsToFieldOnRelatedModel"), ::OpenAPI::toJsonValue(m_belongs_to_field_on_related_model));
    }
    if (m_associated_fields.isSet()) {
        obj.insert(QString("associatedFields"), ::OpenAPI::toJsonValue(m_associated_fields));
    }
    if (m_is_has_many_index_isSet) {
        obj.insert(QString("isHasManyIndex"), ::OpenAPI::toJsonValue(m_is_has_many_index));
    }
    return obj;
}

OAIGenericDataRelationshipType OAICodegenGenericDataRelationshipType::getType() const {
    return m_type;
}
void OAICodegenGenericDataRelationshipType::setType(const OAIGenericDataRelationshipType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICodegenGenericDataRelationshipType::is_type_Set() const{
    return m_type_isSet;
}

bool OAICodegenGenericDataRelationshipType::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICodegenGenericDataRelationshipType::getRelatedModelName() const {
    return m_related_model_name;
}
void OAICodegenGenericDataRelationshipType::setRelatedModelName(const QString &related_model_name) {
    m_related_model_name = related_model_name;
    m_related_model_name_isSet = true;
}

bool OAICodegenGenericDataRelationshipType::is_related_model_name_Set() const{
    return m_related_model_name_isSet;
}

bool OAICodegenGenericDataRelationshipType::is_related_model_name_Valid() const{
    return m_related_model_name_isValid;
}

QList OAICodegenGenericDataRelationshipType::getRelatedModelFields() const {
    return m_related_model_fields;
}
void OAICodegenGenericDataRelationshipType::setRelatedModelFields(const QList &related_model_fields) {
    m_related_model_fields = related_model_fields;
    m_related_model_fields_isSet = true;
}

bool OAICodegenGenericDataRelationshipType::is_related_model_fields_Set() const{
    return m_related_model_fields_isSet;
}

bool OAICodegenGenericDataRelationshipType::is_related_model_fields_Valid() const{
    return m_related_model_fields_isValid;
}

bool OAICodegenGenericDataRelationshipType::getCanUnlinkAssociatedModel() const {
    return m_can_unlink_associated_model;
}
void OAICodegenGenericDataRelationshipType::setCanUnlinkAssociatedModel(const bool &can_unlink_associated_model) {
    m_can_unlink_associated_model = can_unlink_associated_model;
    m_can_unlink_associated_model_isSet = true;
}

bool OAICodegenGenericDataRelationshipType::is_can_unlink_associated_model_Set() const{
    return m_can_unlink_associated_model_isSet;
}

bool OAICodegenGenericDataRelationshipType::is_can_unlink_associated_model_Valid() const{
    return m_can_unlink_associated_model_isValid;
}

QString OAICodegenGenericDataRelationshipType::getRelatedJoinFieldName() const {
    return m_related_join_field_name;
}
void OAICodegenGenericDataRelationshipType::setRelatedJoinFieldName(const QString &related_join_field_name) {
    m_related_join_field_name = related_join_field_name;
    m_related_join_field_name_isSet = true;
}

bool OAICodegenGenericDataRelationshipType::is_related_join_field_name_Set() const{
    return m_related_join_field_name_isSet;
}

bool OAICodegenGenericDataRelationshipType::is_related_join_field_name_Valid() const{
    return m_related_join_field_name_isValid;
}

QString OAICodegenGenericDataRelationshipType::getRelatedJoinTableName() const {
    return m_related_join_table_name;
}
void OAICodegenGenericDataRelationshipType::setRelatedJoinTableName(const QString &related_join_table_name) {
    m_related_join_table_name = related_join_table_name;
    m_related_join_table_name_isSet = true;
}

bool OAICodegenGenericDataRelationshipType::is_related_join_table_name_Set() const{
    return m_related_join_table_name_isSet;
}

bool OAICodegenGenericDataRelationshipType::is_related_join_table_name_Valid() const{
    return m_related_join_table_name_isValid;
}

QString OAICodegenGenericDataRelationshipType::getBelongsToFieldOnRelatedModel() const {
    return m_belongs_to_field_on_related_model;
}
void OAICodegenGenericDataRelationshipType::setBelongsToFieldOnRelatedModel(const QString &belongs_to_field_on_related_model) {
    m_belongs_to_field_on_related_model = belongs_to_field_on_related_model;
    m_belongs_to_field_on_related_model_isSet = true;
}

bool OAICodegenGenericDataRelationshipType::is_belongs_to_field_on_related_model_Set() const{
    return m_belongs_to_field_on_related_model_isSet;
}

bool OAICodegenGenericDataRelationshipType::is_belongs_to_field_on_related_model_Valid() const{
    return m_belongs_to_field_on_related_model_isValid;
}

QList OAICodegenGenericDataRelationshipType::getAssociatedFields() const {
    return m_associated_fields;
}
void OAICodegenGenericDataRelationshipType::setAssociatedFields(const QList &associated_fields) {
    m_associated_fields = associated_fields;
    m_associated_fields_isSet = true;
}

bool OAICodegenGenericDataRelationshipType::is_associated_fields_Set() const{
    return m_associated_fields_isSet;
}

bool OAICodegenGenericDataRelationshipType::is_associated_fields_Valid() const{
    return m_associated_fields_isValid;
}

bool OAICodegenGenericDataRelationshipType::getIsHasManyIndex() const {
    return m_is_has_many_index;
}
void OAICodegenGenericDataRelationshipType::setIsHasManyIndex(const bool &is_has_many_index) {
    m_is_has_many_index = is_has_many_index;
    m_is_has_many_index_isSet = true;
}

bool OAICodegenGenericDataRelationshipType::is_is_has_many_index_Set() const{
    return m_is_has_many_index_isSet;
}

bool OAICodegenGenericDataRelationshipType::is_is_has_many_index_Valid() const{
    return m_is_has_many_index_isValid;
}

bool OAICodegenGenericDataRelationshipType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_model_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_unlink_associated_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_join_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_join_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_belongs_to_field_on_related_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_has_many_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodegenGenericDataRelationshipType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_related_model_name_isValid && true;
}

} // namespace OpenAPI
