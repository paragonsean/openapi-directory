/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponent::OAIComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponent::OAIComponent() {
    this->initializeModel();
}

OAIComponent::~OAIComponent() {}

void OAIComponent::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_component_type_isSet = false;
    m_component_type_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_binding_properties_isSet = false;
    m_binding_properties_isValid = false;

    m_collection_properties_isSet = false;
    m_collection_properties_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;
}

void OAIComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponent::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("environmentName")]);
    m_environment_name_isSet = !json[QString("environmentName")].isNull() && m_environment_name_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_component_type_isValid = ::OpenAPI::fromJsonValue(m_component_type, json[QString("componentType")]);
    m_component_type_isSet = !json[QString("componentType")].isNull() && m_component_type_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_binding_properties_isValid = ::OpenAPI::fromJsonValue(m_binding_properties, json[QString("bindingProperties")]);
    m_binding_properties_isSet = !json[QString("bindingProperties")].isNull() && m_binding_properties_isValid;

    m_collection_properties_isValid = ::OpenAPI::fromJsonValue(m_collection_properties, json[QString("collectionProperties")]);
    m_collection_properties_isSet = !json[QString("collectionProperties")].isNull() && m_collection_properties_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modifiedAt")]);
    m_modified_at_isSet = !json[QString("modifiedAt")].isNull() && m_modified_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;
}

QString OAIComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_environment_name_isSet) {
        obj.insert(QString("environmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_component_type_isSet) {
        obj.insert(QString("componentType"), ::OpenAPI::toJsonValue(m_component_type));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_children.isSet()) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_variants.isSet()) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_binding_properties.isSet()) {
        obj.insert(QString("bindingProperties"), ::OpenAPI::toJsonValue(m_binding_properties));
    }
    if (m_collection_properties.isSet()) {
        obj.insert(QString("collectionProperties"), ::OpenAPI::toJsonValue(m_collection_properties));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("modifiedAt"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    return obj;
}

QString OAIComponent::getAppId() const {
    return m_app_id;
}
void OAIComponent::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIComponent::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIComponent::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIComponent::getEnvironmentName() const {
    return m_environment_name;
}
void OAIComponent::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAIComponent::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAIComponent::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QString OAIComponent::getSourceId() const {
    return m_source_id;
}
void OAIComponent::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIComponent::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIComponent::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIComponent::getId() const {
    return m_id;
}
void OAIComponent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComponent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComponent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIComponent::getName() const {
    return m_name;
}
void OAIComponent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComponent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComponent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIComponent::getComponentType() const {
    return m_component_type;
}
void OAIComponent::setComponentType(const QString &component_type) {
    m_component_type = component_type;
    m_component_type_isSet = true;
}

bool OAIComponent::is_component_type_Set() const{
    return m_component_type_isSet;
}

bool OAIComponent::is_component_type_Valid() const{
    return m_component_type_isValid;
}

QJsonValue OAIComponent::getProperties() const {
    return m_properties;
}
void OAIComponent::setProperties(const QJsonValue &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIComponent::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIComponent::is_properties_Valid() const{
    return m_properties_isValid;
}

QList OAIComponent::getChildren() const {
    return m_children;
}
void OAIComponent::setChildren(const QList &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIComponent::is_children_Set() const{
    return m_children_isSet;
}

bool OAIComponent::is_children_Valid() const{
    return m_children_isValid;
}

QList OAIComponent::getVariants() const {
    return m_variants;
}
void OAIComponent::setVariants(const QList &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAIComponent::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAIComponent::is_variants_Valid() const{
    return m_variants_isValid;
}

QMap OAIComponent::getOverrides() const {
    return m_overrides;
}
void OAIComponent::setOverrides(const QMap &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIComponent::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIComponent::is_overrides_Valid() const{
    return m_overrides_isValid;
}

QMap OAIComponent::getBindingProperties() const {
    return m_binding_properties;
}
void OAIComponent::setBindingProperties(const QMap &binding_properties) {
    m_binding_properties = binding_properties;
    m_binding_properties_isSet = true;
}

bool OAIComponent::is_binding_properties_Set() const{
    return m_binding_properties_isSet;
}

bool OAIComponent::is_binding_properties_Valid() const{
    return m_binding_properties_isValid;
}

QMap OAIComponent::getCollectionProperties() const {
    return m_collection_properties;
}
void OAIComponent::setCollectionProperties(const QMap &collection_properties) {
    m_collection_properties = collection_properties;
    m_collection_properties_isSet = true;
}

bool OAIComponent::is_collection_properties_Set() const{
    return m_collection_properties_isSet;
}

bool OAIComponent::is_collection_properties_Valid() const{
    return m_collection_properties_isValid;
}

QDateTime OAIComponent::getCreatedAt() const {
    return m_created_at;
}
void OAIComponent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIComponent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIComponent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIComponent::getModifiedAt() const {
    return m_modified_at;
}
void OAIComponent::setModifiedAt(const QDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIComponent::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIComponent::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QMap OAIComponent::getTags() const {
    return m_tags;
}
void OAIComponent::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIComponent::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIComponent::is_tags_Valid() const{
    return m_tags_isValid;
}

QMap OAIComponent::getEvents() const {
    return m_events;
}
void OAIComponent::setEvents(const QMap &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIComponent::is_events_Set() const{
    return m_events_isSet;
}

bool OAIComponent::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIComponent::getSchemaVersion() const {
    return m_schema_version;
}
void OAIComponent::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIComponent::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIComponent::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

bool OAIComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_binding_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_environment_name_isValid && m_id_isValid && m_name_isValid && m_component_type_isValid && m_properties_isValid && m_variants_isValid && m_overrides_isValid && m_binding_properties_isValid && m_created_at_isValid && true;
}

} // namespace OpenAPI
