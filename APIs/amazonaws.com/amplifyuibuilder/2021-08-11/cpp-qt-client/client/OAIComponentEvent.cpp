/**
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentEvent::OAIComponentEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentEvent::OAIComponentEvent() {
    this->initializeModel();
}

OAIComponentEvent::~OAIComponentEvent() {}

void OAIComponentEvent::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_binding_event_isSet = false;
    m_binding_event_isValid = false;
}

void OAIComponentEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentEvent::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_binding_event_isValid = ::OpenAPI::fromJsonValue(m_binding_event, json[QString("bindingEvent")]);
    m_binding_event_isSet = !json[QString("bindingEvent")].isNull() && m_binding_event_isValid;
}

QString OAIComponentEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_binding_event_isSet) {
        obj.insert(QString("bindingEvent"), ::OpenAPI::toJsonValue(m_binding_event));
    }
    return obj;
}

QString OAIComponentEvent::getAction() const {
    return m_action;
}
void OAIComponentEvent::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIComponentEvent::is_action_Set() const{
    return m_action_isSet;
}

bool OAIComponentEvent::is_action_Valid() const{
    return m_action_isValid;
}

OAIComponentEvent_parameters OAIComponentEvent::getParameters() const {
    return m_parameters;
}
void OAIComponentEvent::setParameters(const OAIComponentEvent_parameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIComponentEvent::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIComponentEvent::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIComponentEvent::getBindingEvent() const {
    return m_binding_event;
}
void OAIComponentEvent::setBindingEvent(const QString &binding_event) {
    m_binding_event = binding_event;
    m_binding_event_isSet = true;
}

bool OAIComponentEvent::is_binding_event_Set() const{
    return m_binding_event_isSet;
}

bool OAIComponentEvent::is_binding_event_Valid() const{
    return m_binding_event_isValid;
}

bool OAIComponentEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_binding_event_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
