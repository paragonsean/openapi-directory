/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FieldInputConfigFileUploaderConfig;
import org.openapitools.client.model.FieldInputConfigValueMappings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the configuration for the default input values to display for a field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldInputConfig {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_PLACEHOLDER = "placeholder";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER)
  private String placeholder;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_DESCRIPTIVE_TEXT = "descriptiveText";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIVE_TEXT)
  private String descriptiveText;

  public static final String SERIALIZED_NAME_DEFAULT_CHECKED = "defaultChecked";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CHECKED)
  private Boolean defaultChecked;

  public static final String SERIALIZED_NAME_DEFAULT_COUNTRY_CODE = "defaultCountryCode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_COUNTRY_CODE)
  private String defaultCountryCode;

  public static final String SERIALIZED_NAME_VALUE_MAPPINGS = "valueMappings";
  @SerializedName(SERIALIZED_NAME_VALUE_MAPPINGS)
  private FieldInputConfigValueMappings valueMappings;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Float minValue;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Float maxValue;

  public static final String SERIALIZED_NAME_STEP = "step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private Float step;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_IS_ARRAY = "isArray";
  @SerializedName(SERIALIZED_NAME_IS_ARRAY)
  private Boolean isArray;

  public static final String SERIALIZED_NAME_FILE_UPLOADER_CONFIG = "fileUploaderConfig";
  @SerializedName(SERIALIZED_NAME_FILE_UPLOADER_CONFIG)
  private FieldInputConfigFileUploaderConfig fileUploaderConfig;

  public FieldInputConfig() {
  }

  public FieldInputConfig type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public FieldInputConfig required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public FieldInputConfig readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public FieldInputConfig placeholder(String placeholder) {
    this.placeholder = placeholder;
    return this;
  }

  /**
   * Get placeholder
   * @return placeholder
   */
  @javax.annotation.Nullable
  public String getPlaceholder() {
    return placeholder;
  }

  public void setPlaceholder(String placeholder) {
    this.placeholder = placeholder;
  }


  public FieldInputConfig defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public FieldInputConfig descriptiveText(String descriptiveText) {
    this.descriptiveText = descriptiveText;
    return this;
  }

  /**
   * Get descriptiveText
   * @return descriptiveText
   */
  @javax.annotation.Nullable
  public String getDescriptiveText() {
    return descriptiveText;
  }

  public void setDescriptiveText(String descriptiveText) {
    this.descriptiveText = descriptiveText;
  }


  public FieldInputConfig defaultChecked(Boolean defaultChecked) {
    this.defaultChecked = defaultChecked;
    return this;
  }

  /**
   * Get defaultChecked
   * @return defaultChecked
   */
  @javax.annotation.Nullable
  public Boolean getDefaultChecked() {
    return defaultChecked;
  }

  public void setDefaultChecked(Boolean defaultChecked) {
    this.defaultChecked = defaultChecked;
  }


  public FieldInputConfig defaultCountryCode(String defaultCountryCode) {
    this.defaultCountryCode = defaultCountryCode;
    return this;
  }

  /**
   * Get defaultCountryCode
   * @return defaultCountryCode
   */
  @javax.annotation.Nullable
  public String getDefaultCountryCode() {
    return defaultCountryCode;
  }

  public void setDefaultCountryCode(String defaultCountryCode) {
    this.defaultCountryCode = defaultCountryCode;
  }


  public FieldInputConfig valueMappings(FieldInputConfigValueMappings valueMappings) {
    this.valueMappings = valueMappings;
    return this;
  }

  /**
   * Get valueMappings
   * @return valueMappings
   */
  @javax.annotation.Nullable
  public FieldInputConfigValueMappings getValueMappings() {
    return valueMappings;
  }

  public void setValueMappings(FieldInputConfigValueMappings valueMappings) {
    this.valueMappings = valueMappings;
  }


  public FieldInputConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FieldInputConfig minValue(Float minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Get minValue
   * @return minValue
   */
  @javax.annotation.Nullable
  public Float getMinValue() {
    return minValue;
  }

  public void setMinValue(Float minValue) {
    this.minValue = minValue;
  }


  public FieldInputConfig maxValue(Float maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Get maxValue
   * @return maxValue
   */
  @javax.annotation.Nullable
  public Float getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(Float maxValue) {
    this.maxValue = maxValue;
  }


  public FieldInputConfig step(Float step) {
    this.step = step;
    return this;
  }

  /**
   * Get step
   * @return step
   */
  @javax.annotation.Nullable
  public Float getStep() {
    return step;
  }

  public void setStep(Float step) {
    this.step = step;
  }


  public FieldInputConfig value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public FieldInputConfig isArray(Boolean isArray) {
    this.isArray = isArray;
    return this;
  }

  /**
   * Get isArray
   * @return isArray
   */
  @javax.annotation.Nullable
  public Boolean getIsArray() {
    return isArray;
  }

  public void setIsArray(Boolean isArray) {
    this.isArray = isArray;
  }


  public FieldInputConfig fileUploaderConfig(FieldInputConfigFileUploaderConfig fileUploaderConfig) {
    this.fileUploaderConfig = fileUploaderConfig;
    return this;
  }

  /**
   * Get fileUploaderConfig
   * @return fileUploaderConfig
   */
  @javax.annotation.Nullable
  public FieldInputConfigFileUploaderConfig getFileUploaderConfig() {
    return fileUploaderConfig;
  }

  public void setFileUploaderConfig(FieldInputConfigFileUploaderConfig fileUploaderConfig) {
    this.fileUploaderConfig = fileUploaderConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldInputConfig fieldInputConfig = (FieldInputConfig) o;
    return Objects.equals(this.type, fieldInputConfig.type) &&
        Objects.equals(this.required, fieldInputConfig.required) &&
        Objects.equals(this.readOnly, fieldInputConfig.readOnly) &&
        Objects.equals(this.placeholder, fieldInputConfig.placeholder) &&
        Objects.equals(this.defaultValue, fieldInputConfig.defaultValue) &&
        Objects.equals(this.descriptiveText, fieldInputConfig.descriptiveText) &&
        Objects.equals(this.defaultChecked, fieldInputConfig.defaultChecked) &&
        Objects.equals(this.defaultCountryCode, fieldInputConfig.defaultCountryCode) &&
        Objects.equals(this.valueMappings, fieldInputConfig.valueMappings) &&
        Objects.equals(this.name, fieldInputConfig.name) &&
        Objects.equals(this.minValue, fieldInputConfig.minValue) &&
        Objects.equals(this.maxValue, fieldInputConfig.maxValue) &&
        Objects.equals(this.step, fieldInputConfig.step) &&
        Objects.equals(this.value, fieldInputConfig.value) &&
        Objects.equals(this.isArray, fieldInputConfig.isArray) &&
        Objects.equals(this.fileUploaderConfig, fieldInputConfig.fileUploaderConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, required, readOnly, placeholder, defaultValue, descriptiveText, defaultChecked, defaultCountryCode, valueMappings, name, minValue, maxValue, step, value, isArray, fileUploaderConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldInputConfig {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    placeholder: ").append(toIndentedString(placeholder)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    descriptiveText: ").append(toIndentedString(descriptiveText)).append("\n");
    sb.append("    defaultChecked: ").append(toIndentedString(defaultChecked)).append("\n");
    sb.append("    defaultCountryCode: ").append(toIndentedString(defaultCountryCode)).append("\n");
    sb.append("    valueMappings: ").append(toIndentedString(valueMappings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    isArray: ").append(toIndentedString(isArray)).append("\n");
    sb.append("    fileUploaderConfig: ").append(toIndentedString(fileUploaderConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("required");
    openapiFields.add("readOnly");
    openapiFields.add("placeholder");
    openapiFields.add("defaultValue");
    openapiFields.add("descriptiveText");
    openapiFields.add("defaultChecked");
    openapiFields.add("defaultCountryCode");
    openapiFields.add("valueMappings");
    openapiFields.add("name");
    openapiFields.add("minValue");
    openapiFields.add("maxValue");
    openapiFields.add("step");
    openapiFields.add("value");
    openapiFields.add("isArray");
    openapiFields.add("fileUploaderConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldInputConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldInputConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldInputConfig is not found in the empty JSON string", FieldInputConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldInputConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldInputConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FieldInputConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      String.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `required`
      if (jsonObj.get("required") != null && !jsonObj.get("required").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("required"));
      }
      // validate the optional field `readOnly`
      if (jsonObj.get("readOnly") != null && !jsonObj.get("readOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("readOnly"));
      }
      // validate the optional field `placeholder`
      if (jsonObj.get("placeholder") != null && !jsonObj.get("placeholder").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("placeholder"));
      }
      // validate the optional field `defaultValue`
      if (jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultValue"));
      }
      // validate the optional field `descriptiveText`
      if (jsonObj.get("descriptiveText") != null && !jsonObj.get("descriptiveText").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("descriptiveText"));
      }
      // validate the optional field `defaultChecked`
      if (jsonObj.get("defaultChecked") != null && !jsonObj.get("defaultChecked").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("defaultChecked"));
      }
      // validate the optional field `defaultCountryCode`
      if (jsonObj.get("defaultCountryCode") != null && !jsonObj.get("defaultCountryCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultCountryCode"));
      }
      // validate the optional field `valueMappings`
      if (jsonObj.get("valueMappings") != null && !jsonObj.get("valueMappings").isJsonNull()) {
        FieldInputConfigValueMappings.validateJsonElement(jsonObj.get("valueMappings"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `minValue`
      if (jsonObj.get("minValue") != null && !jsonObj.get("minValue").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("minValue"));
      }
      // validate the optional field `maxValue`
      if (jsonObj.get("maxValue") != null && !jsonObj.get("maxValue").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("maxValue"));
      }
      // validate the optional field `step`
      if (jsonObj.get("step") != null && !jsonObj.get("step").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("step"));
      }
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("value"));
      }
      // validate the optional field `isArray`
      if (jsonObj.get("isArray") != null && !jsonObj.get("isArray").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isArray"));
      }
      // validate the optional field `fileUploaderConfig`
      if (jsonObj.get("fileUploaderConfig") != null && !jsonObj.get("fileUploaderConfig").isJsonNull()) {
        FieldInputConfigFileUploaderConfig.validateJsonElement(jsonObj.get("fileUploaderConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldInputConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldInputConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldInputConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldInputConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldInputConfig>() {
           @Override
           public void write(JsonWriter out, FieldInputConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldInputConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldInputConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldInputConfig
   * @throws IOException if the JSON string is invalid with respect to FieldInputConfig
   */
  public static FieldInputConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldInputConfig.class);
  }

  /**
   * Convert an instance of FieldInputConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

