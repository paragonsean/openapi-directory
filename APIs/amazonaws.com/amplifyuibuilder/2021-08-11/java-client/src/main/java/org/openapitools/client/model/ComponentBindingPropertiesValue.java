/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ComponentBindingPropertiesValueBindingProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the data binding configuration for a component at runtime. You can use &lt;code&gt;ComponentBindingPropertiesValue&lt;/code&gt; to add exposed properties to a component to allow different values to be entered when a component is reused in different places in an app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComponentBindingPropertiesValue {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_BINDING_PROPERTIES = "bindingProperties";
  @SerializedName(SERIALIZED_NAME_BINDING_PROPERTIES)
  private ComponentBindingPropertiesValueBindingProperties bindingProperties;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public ComponentBindingPropertiesValue() {
  }

  public ComponentBindingPropertiesValue type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ComponentBindingPropertiesValue bindingProperties(ComponentBindingPropertiesValueBindingProperties bindingProperties) {
    this.bindingProperties = bindingProperties;
    return this;
  }

  /**
   * Get bindingProperties
   * @return bindingProperties
   */
  @javax.annotation.Nullable
  public ComponentBindingPropertiesValueBindingProperties getBindingProperties() {
    return bindingProperties;
  }

  public void setBindingProperties(ComponentBindingPropertiesValueBindingProperties bindingProperties) {
    this.bindingProperties = bindingProperties;
  }


  public ComponentBindingPropertiesValue defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentBindingPropertiesValue componentBindingPropertiesValue = (ComponentBindingPropertiesValue) o;
    return Objects.equals(this.type, componentBindingPropertiesValue.type) &&
        Objects.equals(this.bindingProperties, componentBindingPropertiesValue.bindingProperties) &&
        Objects.equals(this.defaultValue, componentBindingPropertiesValue.defaultValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, bindingProperties, defaultValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentBindingPropertiesValue {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    bindingProperties: ").append(toIndentedString(bindingProperties)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("bindingProperties");
    openapiFields.add("defaultValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComponentBindingPropertiesValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentBindingPropertiesValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentBindingPropertiesValue is not found in the empty JSON string", ComponentBindingPropertiesValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComponentBindingPropertiesValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComponentBindingPropertiesValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `bindingProperties`
      if (jsonObj.get("bindingProperties") != null && !jsonObj.get("bindingProperties").isJsonNull()) {
        ComponentBindingPropertiesValueBindingProperties.validateJsonElement(jsonObj.get("bindingProperties"));
      }
      // validate the optional field `defaultValue`
      if (jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentBindingPropertiesValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentBindingPropertiesValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentBindingPropertiesValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentBindingPropertiesValue.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentBindingPropertiesValue>() {
           @Override
           public void write(JsonWriter out, ComponentBindingPropertiesValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentBindingPropertiesValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComponentBindingPropertiesValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComponentBindingPropertiesValue
   * @throws IOException if the JSON string is invalid with respect to ComponentBindingPropertiesValue
   */
  public static ComponentBindingPropertiesValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentBindingPropertiesValue.class);
  }

  /**
   * Convert an instance of ComponentBindingPropertiesValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

