/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the data binding configuration for a specific property using data stored in Amazon Web Services. For Amazon Web Services connected properties, you can bind a property to data stored in an Amazon S3 bucket, an Amplify DataStore model or an authenticated user attribute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComponentBindingPropertiesValueProperties {
  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_PREDICATES = "predicates";
  @SerializedName(SERIALIZED_NAME_PREDICATES)
  private List predicates;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE = "userAttribute";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE)
  private String userAttribute;

  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_SLOT_NAME = "slotName";
  @SerializedName(SERIALIZED_NAME_SLOT_NAME)
  private String slotName;

  public ComponentBindingPropertiesValueProperties() {
  }

  public ComponentBindingPropertiesValueProperties model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public ComponentBindingPropertiesValueProperties field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public ComponentBindingPropertiesValueProperties predicates(List predicates) {
    this.predicates = predicates;
    return this;
  }

  /**
   * Get predicates
   * @return predicates
   */
  @javax.annotation.Nullable
  public List getPredicates() {
    return predicates;
  }

  public void setPredicates(List predicates) {
    this.predicates = predicates;
  }


  public ComponentBindingPropertiesValueProperties userAttribute(String userAttribute) {
    this.userAttribute = userAttribute;
    return this;
  }

  /**
   * Get userAttribute
   * @return userAttribute
   */
  @javax.annotation.Nullable
  public String getUserAttribute() {
    return userAttribute;
  }

  public void setUserAttribute(String userAttribute) {
    this.userAttribute = userAttribute;
  }


  public ComponentBindingPropertiesValueProperties bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Get bucket
   * @return bucket
   */
  @javax.annotation.Nullable
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public ComponentBindingPropertiesValueProperties key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public ComponentBindingPropertiesValueProperties defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public ComponentBindingPropertiesValueProperties slotName(String slotName) {
    this.slotName = slotName;
    return this;
  }

  /**
   * Get slotName
   * @return slotName
   */
  @javax.annotation.Nullable
  public String getSlotName() {
    return slotName;
  }

  public void setSlotName(String slotName) {
    this.slotName = slotName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentBindingPropertiesValueProperties componentBindingPropertiesValueProperties = (ComponentBindingPropertiesValueProperties) o;
    return Objects.equals(this.model, componentBindingPropertiesValueProperties.model) &&
        Objects.equals(this.field, componentBindingPropertiesValueProperties.field) &&
        Objects.equals(this.predicates, componentBindingPropertiesValueProperties.predicates) &&
        Objects.equals(this.userAttribute, componentBindingPropertiesValueProperties.userAttribute) &&
        Objects.equals(this.bucket, componentBindingPropertiesValueProperties.bucket) &&
        Objects.equals(this.key, componentBindingPropertiesValueProperties.key) &&
        Objects.equals(this.defaultValue, componentBindingPropertiesValueProperties.defaultValue) &&
        Objects.equals(this.slotName, componentBindingPropertiesValueProperties.slotName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, field, predicates, userAttribute, bucket, key, defaultValue, slotName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentBindingPropertiesValueProperties {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    predicates: ").append(toIndentedString(predicates)).append("\n");
    sb.append("    userAttribute: ").append(toIndentedString(userAttribute)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    slotName: ").append(toIndentedString(slotName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("model");
    openapiFields.add("field");
    openapiFields.add("predicates");
    openapiFields.add("userAttribute");
    openapiFields.add("bucket");
    openapiFields.add("key");
    openapiFields.add("defaultValue");
    openapiFields.add("slotName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComponentBindingPropertiesValueProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentBindingPropertiesValueProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentBindingPropertiesValueProperties is not found in the empty JSON string", ComponentBindingPropertiesValueProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComponentBindingPropertiesValueProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComponentBindingPropertiesValueProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("model"));
      }
      // validate the optional field `field`
      if (jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("field"));
      }
      // validate the optional field `predicates`
      if (jsonObj.get("predicates") != null && !jsonObj.get("predicates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("predicates"));
      }
      // validate the optional field `userAttribute`
      if (jsonObj.get("userAttribute") != null && !jsonObj.get("userAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("userAttribute"));
      }
      // validate the optional field `bucket`
      if (jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("bucket"));
      }
      // validate the optional field `key`
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("key"));
      }
      // validate the optional field `defaultValue`
      if (jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultValue"));
      }
      // validate the optional field `slotName`
      if (jsonObj.get("slotName") != null && !jsonObj.get("slotName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentBindingPropertiesValueProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentBindingPropertiesValueProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentBindingPropertiesValueProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentBindingPropertiesValueProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentBindingPropertiesValueProperties>() {
           @Override
           public void write(JsonWriter out, ComponentBindingPropertiesValueProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentBindingPropertiesValueProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComponentBindingPropertiesValueProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComponentBindingPropertiesValueProperties
   * @throws IOException if the JSON string is invalid with respect to ComponentBindingPropertiesValueProperties
   */
  public static ComponentBindingPropertiesValueProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentBindingPropertiesValueProperties.class);
  }

  /**
   * Convert an instance of ComponentBindingPropertiesValueProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

