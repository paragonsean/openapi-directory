/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the GraphQL configuration for an API for a code generation job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GraphQLRenderConfig {
  public static final String SERIALIZED_NAME_TYPES_FILE_PATH = "typesFilePath";
  @SerializedName(SERIALIZED_NAME_TYPES_FILE_PATH)
  private String typesFilePath;

  public static final String SERIALIZED_NAME_QUERIES_FILE_PATH = "queriesFilePath";
  @SerializedName(SERIALIZED_NAME_QUERIES_FILE_PATH)
  private String queriesFilePath;

  public static final String SERIALIZED_NAME_MUTATIONS_FILE_PATH = "mutationsFilePath";
  @SerializedName(SERIALIZED_NAME_MUTATIONS_FILE_PATH)
  private String mutationsFilePath;

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS_FILE_PATH = "subscriptionsFilePath";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS_FILE_PATH)
  private String subscriptionsFilePath;

  public static final String SERIALIZED_NAME_FRAGMENTS_FILE_PATH = "fragmentsFilePath";
  @SerializedName(SERIALIZED_NAME_FRAGMENTS_FILE_PATH)
  private String fragmentsFilePath;

  public GraphQLRenderConfig() {
  }

  public GraphQLRenderConfig typesFilePath(String typesFilePath) {
    this.typesFilePath = typesFilePath;
    return this;
  }

  /**
   * Get typesFilePath
   * @return typesFilePath
   */
  @javax.annotation.Nonnull
  public String getTypesFilePath() {
    return typesFilePath;
  }

  public void setTypesFilePath(String typesFilePath) {
    this.typesFilePath = typesFilePath;
  }


  public GraphQLRenderConfig queriesFilePath(String queriesFilePath) {
    this.queriesFilePath = queriesFilePath;
    return this;
  }

  /**
   * Get queriesFilePath
   * @return queriesFilePath
   */
  @javax.annotation.Nonnull
  public String getQueriesFilePath() {
    return queriesFilePath;
  }

  public void setQueriesFilePath(String queriesFilePath) {
    this.queriesFilePath = queriesFilePath;
  }


  public GraphQLRenderConfig mutationsFilePath(String mutationsFilePath) {
    this.mutationsFilePath = mutationsFilePath;
    return this;
  }

  /**
   * Get mutationsFilePath
   * @return mutationsFilePath
   */
  @javax.annotation.Nonnull
  public String getMutationsFilePath() {
    return mutationsFilePath;
  }

  public void setMutationsFilePath(String mutationsFilePath) {
    this.mutationsFilePath = mutationsFilePath;
  }


  public GraphQLRenderConfig subscriptionsFilePath(String subscriptionsFilePath) {
    this.subscriptionsFilePath = subscriptionsFilePath;
    return this;
  }

  /**
   * Get subscriptionsFilePath
   * @return subscriptionsFilePath
   */
  @javax.annotation.Nonnull
  public String getSubscriptionsFilePath() {
    return subscriptionsFilePath;
  }

  public void setSubscriptionsFilePath(String subscriptionsFilePath) {
    this.subscriptionsFilePath = subscriptionsFilePath;
  }


  public GraphQLRenderConfig fragmentsFilePath(String fragmentsFilePath) {
    this.fragmentsFilePath = fragmentsFilePath;
    return this;
  }

  /**
   * Get fragmentsFilePath
   * @return fragmentsFilePath
   */
  @javax.annotation.Nonnull
  public String getFragmentsFilePath() {
    return fragmentsFilePath;
  }

  public void setFragmentsFilePath(String fragmentsFilePath) {
    this.fragmentsFilePath = fragmentsFilePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GraphQLRenderConfig graphQLRenderConfig = (GraphQLRenderConfig) o;
    return Objects.equals(this.typesFilePath, graphQLRenderConfig.typesFilePath) &&
        Objects.equals(this.queriesFilePath, graphQLRenderConfig.queriesFilePath) &&
        Objects.equals(this.mutationsFilePath, graphQLRenderConfig.mutationsFilePath) &&
        Objects.equals(this.subscriptionsFilePath, graphQLRenderConfig.subscriptionsFilePath) &&
        Objects.equals(this.fragmentsFilePath, graphQLRenderConfig.fragmentsFilePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typesFilePath, queriesFilePath, mutationsFilePath, subscriptionsFilePath, fragmentsFilePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GraphQLRenderConfig {\n");
    sb.append("    typesFilePath: ").append(toIndentedString(typesFilePath)).append("\n");
    sb.append("    queriesFilePath: ").append(toIndentedString(queriesFilePath)).append("\n");
    sb.append("    mutationsFilePath: ").append(toIndentedString(mutationsFilePath)).append("\n");
    sb.append("    subscriptionsFilePath: ").append(toIndentedString(subscriptionsFilePath)).append("\n");
    sb.append("    fragmentsFilePath: ").append(toIndentedString(fragmentsFilePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("typesFilePath");
    openapiFields.add("queriesFilePath");
    openapiFields.add("mutationsFilePath");
    openapiFields.add("subscriptionsFilePath");
    openapiFields.add("fragmentsFilePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("typesFilePath");
    openapiRequiredFields.add("queriesFilePath");
    openapiRequiredFields.add("mutationsFilePath");
    openapiRequiredFields.add("subscriptionsFilePath");
    openapiRequiredFields.add("fragmentsFilePath");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GraphQLRenderConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GraphQLRenderConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GraphQLRenderConfig is not found in the empty JSON string", GraphQLRenderConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GraphQLRenderConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GraphQLRenderConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GraphQLRenderConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `typesFilePath`
      String.validateJsonElement(jsonObj.get("typesFilePath"));
      // validate the required field `queriesFilePath`
      String.validateJsonElement(jsonObj.get("queriesFilePath"));
      // validate the required field `mutationsFilePath`
      String.validateJsonElement(jsonObj.get("mutationsFilePath"));
      // validate the required field `subscriptionsFilePath`
      String.validateJsonElement(jsonObj.get("subscriptionsFilePath"));
      // validate the required field `fragmentsFilePath`
      String.validateJsonElement(jsonObj.get("fragmentsFilePath"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GraphQLRenderConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GraphQLRenderConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GraphQLRenderConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GraphQLRenderConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GraphQLRenderConfig>() {
           @Override
           public void write(JsonWriter out, GraphQLRenderConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GraphQLRenderConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GraphQLRenderConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GraphQLRenderConfig
   * @throws IOException if the JSON string is invalid with respect to GraphQLRenderConfig
   */
  public static GraphQLRenderConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GraphQLRenderConfig.class);
  }

  /**
   * Convert an instance of GraphQLRenderConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

