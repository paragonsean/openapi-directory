/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FormButtonsPosition;
import org.openapitools.client.model.FormCTACancel;
import org.openapitools.client.model.FormCTAClear;
import org.openapitools.client.model.FormCTASubmit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the call to action button configuration for the form.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FormCTA {
  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private FormButtonsPosition position;

  public static final String SERIALIZED_NAME_CLEAR = "clear";
  @SerializedName(SERIALIZED_NAME_CLEAR)
  private FormCTAClear clear;

  public static final String SERIALIZED_NAME_CANCEL = "cancel";
  @SerializedName(SERIALIZED_NAME_CANCEL)
  private FormCTACancel cancel;

  public static final String SERIALIZED_NAME_SUBMIT = "submit";
  @SerializedName(SERIALIZED_NAME_SUBMIT)
  private FormCTASubmit submit;

  public FormCTA() {
  }

  public FormCTA position(FormButtonsPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public FormButtonsPosition getPosition() {
    return position;
  }

  public void setPosition(FormButtonsPosition position) {
    this.position = position;
  }


  public FormCTA clear(FormCTAClear clear) {
    this.clear = clear;
    return this;
  }

  /**
   * Get clear
   * @return clear
   */
  @javax.annotation.Nullable
  public FormCTAClear getClear() {
    return clear;
  }

  public void setClear(FormCTAClear clear) {
    this.clear = clear;
  }


  public FormCTA cancel(FormCTACancel cancel) {
    this.cancel = cancel;
    return this;
  }

  /**
   * Get cancel
   * @return cancel
   */
  @javax.annotation.Nullable
  public FormCTACancel getCancel() {
    return cancel;
  }

  public void setCancel(FormCTACancel cancel) {
    this.cancel = cancel;
  }


  public FormCTA submit(FormCTASubmit submit) {
    this.submit = submit;
    return this;
  }

  /**
   * Get submit
   * @return submit
   */
  @javax.annotation.Nullable
  public FormCTASubmit getSubmit() {
    return submit;
  }

  public void setSubmit(FormCTASubmit submit) {
    this.submit = submit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormCTA formCTA = (FormCTA) o;
    return Objects.equals(this.position, formCTA.position) &&
        Objects.equals(this.clear, formCTA.clear) &&
        Objects.equals(this.cancel, formCTA.cancel) &&
        Objects.equals(this.submit, formCTA.submit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, clear, cancel, submit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormCTA {\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    clear: ").append(toIndentedString(clear)).append("\n");
    sb.append("    cancel: ").append(toIndentedString(cancel)).append("\n");
    sb.append("    submit: ").append(toIndentedString(submit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("position");
    openapiFields.add("clear");
    openapiFields.add("cancel");
    openapiFields.add("submit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormCTA
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormCTA.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormCTA is not found in the empty JSON string", FormCTA.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormCTA.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormCTA` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        FormButtonsPosition.validateJsonElement(jsonObj.get("position"));
      }
      // validate the optional field `clear`
      if (jsonObj.get("clear") != null && !jsonObj.get("clear").isJsonNull()) {
        FormCTAClear.validateJsonElement(jsonObj.get("clear"));
      }
      // validate the optional field `cancel`
      if (jsonObj.get("cancel") != null && !jsonObj.get("cancel").isJsonNull()) {
        FormCTACancel.validateJsonElement(jsonObj.get("cancel"));
      }
      // validate the optional field `submit`
      if (jsonObj.get("submit") != null && !jsonObj.get("submit").isJsonNull()) {
        FormCTASubmit.validateJsonElement(jsonObj.get("submit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormCTA.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormCTA' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormCTA> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormCTA.class));

       return (TypeAdapter<T>) new TypeAdapter<FormCTA>() {
           @Override
           public void write(JsonWriter out, FormCTA value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormCTA read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormCTA given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormCTA
   * @throws IOException if the JSON string is invalid with respect to FormCTA
   */
  public static FormCTA fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormCTA.class);
  }

  /**
   * Convert an instance of FormCTA to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

