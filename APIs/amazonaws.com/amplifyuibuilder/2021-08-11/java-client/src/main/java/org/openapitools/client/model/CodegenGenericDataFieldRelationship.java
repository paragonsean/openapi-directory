/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GenericDataRelationshipType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodegenGenericDataFieldRelationship
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodegenGenericDataFieldRelationship {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private GenericDataRelationshipType type;

  public static final String SERIALIZED_NAME_RELATED_MODEL_NAME = "relatedModelName";
  @SerializedName(SERIALIZED_NAME_RELATED_MODEL_NAME)
  private String relatedModelName;

  public static final String SERIALIZED_NAME_RELATED_MODEL_FIELDS = "relatedModelFields";
  @SerializedName(SERIALIZED_NAME_RELATED_MODEL_FIELDS)
  private List relatedModelFields;

  public static final String SERIALIZED_NAME_CAN_UNLINK_ASSOCIATED_MODEL = "canUnlinkAssociatedModel";
  @SerializedName(SERIALIZED_NAME_CAN_UNLINK_ASSOCIATED_MODEL)
  private Boolean canUnlinkAssociatedModel;

  public static final String SERIALIZED_NAME_RELATED_JOIN_FIELD_NAME = "relatedJoinFieldName";
  @SerializedName(SERIALIZED_NAME_RELATED_JOIN_FIELD_NAME)
  private String relatedJoinFieldName;

  public static final String SERIALIZED_NAME_RELATED_JOIN_TABLE_NAME = "relatedJoinTableName";
  @SerializedName(SERIALIZED_NAME_RELATED_JOIN_TABLE_NAME)
  private String relatedJoinTableName;

  public static final String SERIALIZED_NAME_BELONGS_TO_FIELD_ON_RELATED_MODEL = "belongsToFieldOnRelatedModel";
  @SerializedName(SERIALIZED_NAME_BELONGS_TO_FIELD_ON_RELATED_MODEL)
  private String belongsToFieldOnRelatedModel;

  public static final String SERIALIZED_NAME_ASSOCIATED_FIELDS = "associatedFields";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_FIELDS)
  private List associatedFields;

  public static final String SERIALIZED_NAME_IS_HAS_MANY_INDEX = "isHasManyIndex";
  @SerializedName(SERIALIZED_NAME_IS_HAS_MANY_INDEX)
  private Boolean isHasManyIndex;

  public CodegenGenericDataFieldRelationship() {
  }

  public CodegenGenericDataFieldRelationship type(GenericDataRelationshipType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public GenericDataRelationshipType getType() {
    return type;
  }

  public void setType(GenericDataRelationshipType type) {
    this.type = type;
  }


  public CodegenGenericDataFieldRelationship relatedModelName(String relatedModelName) {
    this.relatedModelName = relatedModelName;
    return this;
  }

  /**
   * Get relatedModelName
   * @return relatedModelName
   */
  @javax.annotation.Nonnull
  public String getRelatedModelName() {
    return relatedModelName;
  }

  public void setRelatedModelName(String relatedModelName) {
    this.relatedModelName = relatedModelName;
  }


  public CodegenGenericDataFieldRelationship relatedModelFields(List relatedModelFields) {
    this.relatedModelFields = relatedModelFields;
    return this;
  }

  /**
   * Get relatedModelFields
   * @return relatedModelFields
   */
  @javax.annotation.Nullable
  public List getRelatedModelFields() {
    return relatedModelFields;
  }

  public void setRelatedModelFields(List relatedModelFields) {
    this.relatedModelFields = relatedModelFields;
  }


  public CodegenGenericDataFieldRelationship canUnlinkAssociatedModel(Boolean canUnlinkAssociatedModel) {
    this.canUnlinkAssociatedModel = canUnlinkAssociatedModel;
    return this;
  }

  /**
   * Get canUnlinkAssociatedModel
   * @return canUnlinkAssociatedModel
   */
  @javax.annotation.Nullable
  public Boolean getCanUnlinkAssociatedModel() {
    return canUnlinkAssociatedModel;
  }

  public void setCanUnlinkAssociatedModel(Boolean canUnlinkAssociatedModel) {
    this.canUnlinkAssociatedModel = canUnlinkAssociatedModel;
  }


  public CodegenGenericDataFieldRelationship relatedJoinFieldName(String relatedJoinFieldName) {
    this.relatedJoinFieldName = relatedJoinFieldName;
    return this;
  }

  /**
   * Get relatedJoinFieldName
   * @return relatedJoinFieldName
   */
  @javax.annotation.Nullable
  public String getRelatedJoinFieldName() {
    return relatedJoinFieldName;
  }

  public void setRelatedJoinFieldName(String relatedJoinFieldName) {
    this.relatedJoinFieldName = relatedJoinFieldName;
  }


  public CodegenGenericDataFieldRelationship relatedJoinTableName(String relatedJoinTableName) {
    this.relatedJoinTableName = relatedJoinTableName;
    return this;
  }

  /**
   * Get relatedJoinTableName
   * @return relatedJoinTableName
   */
  @javax.annotation.Nullable
  public String getRelatedJoinTableName() {
    return relatedJoinTableName;
  }

  public void setRelatedJoinTableName(String relatedJoinTableName) {
    this.relatedJoinTableName = relatedJoinTableName;
  }


  public CodegenGenericDataFieldRelationship belongsToFieldOnRelatedModel(String belongsToFieldOnRelatedModel) {
    this.belongsToFieldOnRelatedModel = belongsToFieldOnRelatedModel;
    return this;
  }

  /**
   * Get belongsToFieldOnRelatedModel
   * @return belongsToFieldOnRelatedModel
   */
  @javax.annotation.Nullable
  public String getBelongsToFieldOnRelatedModel() {
    return belongsToFieldOnRelatedModel;
  }

  public void setBelongsToFieldOnRelatedModel(String belongsToFieldOnRelatedModel) {
    this.belongsToFieldOnRelatedModel = belongsToFieldOnRelatedModel;
  }


  public CodegenGenericDataFieldRelationship associatedFields(List associatedFields) {
    this.associatedFields = associatedFields;
    return this;
  }

  /**
   * Get associatedFields
   * @return associatedFields
   */
  @javax.annotation.Nullable
  public List getAssociatedFields() {
    return associatedFields;
  }

  public void setAssociatedFields(List associatedFields) {
    this.associatedFields = associatedFields;
  }


  public CodegenGenericDataFieldRelationship isHasManyIndex(Boolean isHasManyIndex) {
    this.isHasManyIndex = isHasManyIndex;
    return this;
  }

  /**
   * Get isHasManyIndex
   * @return isHasManyIndex
   */
  @javax.annotation.Nullable
  public Boolean getIsHasManyIndex() {
    return isHasManyIndex;
  }

  public void setIsHasManyIndex(Boolean isHasManyIndex) {
    this.isHasManyIndex = isHasManyIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodegenGenericDataFieldRelationship codegenGenericDataFieldRelationship = (CodegenGenericDataFieldRelationship) o;
    return Objects.equals(this.type, codegenGenericDataFieldRelationship.type) &&
        Objects.equals(this.relatedModelName, codegenGenericDataFieldRelationship.relatedModelName) &&
        Objects.equals(this.relatedModelFields, codegenGenericDataFieldRelationship.relatedModelFields) &&
        Objects.equals(this.canUnlinkAssociatedModel, codegenGenericDataFieldRelationship.canUnlinkAssociatedModel) &&
        Objects.equals(this.relatedJoinFieldName, codegenGenericDataFieldRelationship.relatedJoinFieldName) &&
        Objects.equals(this.relatedJoinTableName, codegenGenericDataFieldRelationship.relatedJoinTableName) &&
        Objects.equals(this.belongsToFieldOnRelatedModel, codegenGenericDataFieldRelationship.belongsToFieldOnRelatedModel) &&
        Objects.equals(this.associatedFields, codegenGenericDataFieldRelationship.associatedFields) &&
        Objects.equals(this.isHasManyIndex, codegenGenericDataFieldRelationship.isHasManyIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, relatedModelName, relatedModelFields, canUnlinkAssociatedModel, relatedJoinFieldName, relatedJoinTableName, belongsToFieldOnRelatedModel, associatedFields, isHasManyIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodegenGenericDataFieldRelationship {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    relatedModelName: ").append(toIndentedString(relatedModelName)).append("\n");
    sb.append("    relatedModelFields: ").append(toIndentedString(relatedModelFields)).append("\n");
    sb.append("    canUnlinkAssociatedModel: ").append(toIndentedString(canUnlinkAssociatedModel)).append("\n");
    sb.append("    relatedJoinFieldName: ").append(toIndentedString(relatedJoinFieldName)).append("\n");
    sb.append("    relatedJoinTableName: ").append(toIndentedString(relatedJoinTableName)).append("\n");
    sb.append("    belongsToFieldOnRelatedModel: ").append(toIndentedString(belongsToFieldOnRelatedModel)).append("\n");
    sb.append("    associatedFields: ").append(toIndentedString(associatedFields)).append("\n");
    sb.append("    isHasManyIndex: ").append(toIndentedString(isHasManyIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("relatedModelName");
    openapiFields.add("relatedModelFields");
    openapiFields.add("canUnlinkAssociatedModel");
    openapiFields.add("relatedJoinFieldName");
    openapiFields.add("relatedJoinTableName");
    openapiFields.add("belongsToFieldOnRelatedModel");
    openapiFields.add("associatedFields");
    openapiFields.add("isHasManyIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("relatedModelName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodegenGenericDataFieldRelationship
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodegenGenericDataFieldRelationship.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodegenGenericDataFieldRelationship is not found in the empty JSON string", CodegenGenericDataFieldRelationship.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodegenGenericDataFieldRelationship.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodegenGenericDataFieldRelationship` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodegenGenericDataFieldRelationship.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      GenericDataRelationshipType.validateJsonElement(jsonObj.get("type"));
      // validate the required field `relatedModelName`
      String.validateJsonElement(jsonObj.get("relatedModelName"));
      // validate the optional field `relatedModelFields`
      if (jsonObj.get("relatedModelFields") != null && !jsonObj.get("relatedModelFields").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("relatedModelFields"));
      }
      // validate the optional field `canUnlinkAssociatedModel`
      if (jsonObj.get("canUnlinkAssociatedModel") != null && !jsonObj.get("canUnlinkAssociatedModel").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("canUnlinkAssociatedModel"));
      }
      // validate the optional field `relatedJoinFieldName`
      if (jsonObj.get("relatedJoinFieldName") != null && !jsonObj.get("relatedJoinFieldName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("relatedJoinFieldName"));
      }
      // validate the optional field `relatedJoinTableName`
      if (jsonObj.get("relatedJoinTableName") != null && !jsonObj.get("relatedJoinTableName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("relatedJoinTableName"));
      }
      // validate the optional field `belongsToFieldOnRelatedModel`
      if (jsonObj.get("belongsToFieldOnRelatedModel") != null && !jsonObj.get("belongsToFieldOnRelatedModel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("belongsToFieldOnRelatedModel"));
      }
      // validate the optional field `associatedFields`
      if (jsonObj.get("associatedFields") != null && !jsonObj.get("associatedFields").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("associatedFields"));
      }
      // validate the optional field `isHasManyIndex`
      if (jsonObj.get("isHasManyIndex") != null && !jsonObj.get("isHasManyIndex").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isHasManyIndex"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodegenGenericDataFieldRelationship.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodegenGenericDataFieldRelationship' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodegenGenericDataFieldRelationship> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodegenGenericDataFieldRelationship.class));

       return (TypeAdapter<T>) new TypeAdapter<CodegenGenericDataFieldRelationship>() {
           @Override
           public void write(JsonWriter out, CodegenGenericDataFieldRelationship value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodegenGenericDataFieldRelationship read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodegenGenericDataFieldRelationship given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodegenGenericDataFieldRelationship
   * @throws IOException if the JSON string is invalid with respect to CodegenGenericDataFieldRelationship
   */
  public static CodegenGenericDataFieldRelationship fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodegenGenericDataFieldRelationship.class);
  }

  /**
   * Convert an instance of CodegenGenericDataFieldRelationship to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

