/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StorageAccessLevel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FieldInputConfigFileUploaderConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldInputConfigFileUploaderConfig {
  public static final String SERIALIZED_NAME_ACCESS_LEVEL = "accessLevel";
  @SerializedName(SERIALIZED_NAME_ACCESS_LEVEL)
  private StorageAccessLevel accessLevel;

  public static final String SERIALIZED_NAME_ACCEPTED_FILE_TYPES = "acceptedFileTypes";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_FILE_TYPES)
  private List acceptedFileTypes;

  public static final String SERIALIZED_NAME_SHOW_THUMBNAILS = "showThumbnails";
  @SerializedName(SERIALIZED_NAME_SHOW_THUMBNAILS)
  private Boolean showThumbnails;

  public static final String SERIALIZED_NAME_IS_RESUMABLE = "isResumable";
  @SerializedName(SERIALIZED_NAME_IS_RESUMABLE)
  private Boolean isResumable;

  public static final String SERIALIZED_NAME_MAX_FILE_COUNT = "maxFileCount";
  @SerializedName(SERIALIZED_NAME_MAX_FILE_COUNT)
  private Integer maxFileCount;

  public static final String SERIALIZED_NAME_MAX_SIZE = "maxSize";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE)
  private Integer maxSize;

  public FieldInputConfigFileUploaderConfig() {
  }

  public FieldInputConfigFileUploaderConfig accessLevel(StorageAccessLevel accessLevel) {
    this.accessLevel = accessLevel;
    return this;
  }

  /**
   * Get accessLevel
   * @return accessLevel
   */
  @javax.annotation.Nonnull
  public StorageAccessLevel getAccessLevel() {
    return accessLevel;
  }

  public void setAccessLevel(StorageAccessLevel accessLevel) {
    this.accessLevel = accessLevel;
  }


  public FieldInputConfigFileUploaderConfig acceptedFileTypes(List acceptedFileTypes) {
    this.acceptedFileTypes = acceptedFileTypes;
    return this;
  }

  /**
   * Get acceptedFileTypes
   * @return acceptedFileTypes
   */
  @javax.annotation.Nonnull
  public List getAcceptedFileTypes() {
    return acceptedFileTypes;
  }

  public void setAcceptedFileTypes(List acceptedFileTypes) {
    this.acceptedFileTypes = acceptedFileTypes;
  }


  public FieldInputConfigFileUploaderConfig showThumbnails(Boolean showThumbnails) {
    this.showThumbnails = showThumbnails;
    return this;
  }

  /**
   * Get showThumbnails
   * @return showThumbnails
   */
  @javax.annotation.Nullable
  public Boolean getShowThumbnails() {
    return showThumbnails;
  }

  public void setShowThumbnails(Boolean showThumbnails) {
    this.showThumbnails = showThumbnails;
  }


  public FieldInputConfigFileUploaderConfig isResumable(Boolean isResumable) {
    this.isResumable = isResumable;
    return this;
  }

  /**
   * Get isResumable
   * @return isResumable
   */
  @javax.annotation.Nullable
  public Boolean getIsResumable() {
    return isResumable;
  }

  public void setIsResumable(Boolean isResumable) {
    this.isResumable = isResumable;
  }


  public FieldInputConfigFileUploaderConfig maxFileCount(Integer maxFileCount) {
    this.maxFileCount = maxFileCount;
    return this;
  }

  /**
   * Get maxFileCount
   * @return maxFileCount
   */
  @javax.annotation.Nullable
  public Integer getMaxFileCount() {
    return maxFileCount;
  }

  public void setMaxFileCount(Integer maxFileCount) {
    this.maxFileCount = maxFileCount;
  }


  public FieldInputConfigFileUploaderConfig maxSize(Integer maxSize) {
    this.maxSize = maxSize;
    return this;
  }

  /**
   * Get maxSize
   * @return maxSize
   */
  @javax.annotation.Nullable
  public Integer getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(Integer maxSize) {
    this.maxSize = maxSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldInputConfigFileUploaderConfig fieldInputConfigFileUploaderConfig = (FieldInputConfigFileUploaderConfig) o;
    return Objects.equals(this.accessLevel, fieldInputConfigFileUploaderConfig.accessLevel) &&
        Objects.equals(this.acceptedFileTypes, fieldInputConfigFileUploaderConfig.acceptedFileTypes) &&
        Objects.equals(this.showThumbnails, fieldInputConfigFileUploaderConfig.showThumbnails) &&
        Objects.equals(this.isResumable, fieldInputConfigFileUploaderConfig.isResumable) &&
        Objects.equals(this.maxFileCount, fieldInputConfigFileUploaderConfig.maxFileCount) &&
        Objects.equals(this.maxSize, fieldInputConfigFileUploaderConfig.maxSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessLevel, acceptedFileTypes, showThumbnails, isResumable, maxFileCount, maxSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldInputConfigFileUploaderConfig {\n");
    sb.append("    accessLevel: ").append(toIndentedString(accessLevel)).append("\n");
    sb.append("    acceptedFileTypes: ").append(toIndentedString(acceptedFileTypes)).append("\n");
    sb.append("    showThumbnails: ").append(toIndentedString(showThumbnails)).append("\n");
    sb.append("    isResumable: ").append(toIndentedString(isResumable)).append("\n");
    sb.append("    maxFileCount: ").append(toIndentedString(maxFileCount)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessLevel");
    openapiFields.add("acceptedFileTypes");
    openapiFields.add("showThumbnails");
    openapiFields.add("isResumable");
    openapiFields.add("maxFileCount");
    openapiFields.add("maxSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessLevel");
    openapiRequiredFields.add("acceptedFileTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldInputConfigFileUploaderConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldInputConfigFileUploaderConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldInputConfigFileUploaderConfig is not found in the empty JSON string", FieldInputConfigFileUploaderConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldInputConfigFileUploaderConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldInputConfigFileUploaderConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FieldInputConfigFileUploaderConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `accessLevel`
      StorageAccessLevel.validateJsonElement(jsonObj.get("accessLevel"));
      // validate the required field `acceptedFileTypes`
      List.validateJsonElement(jsonObj.get("acceptedFileTypes"));
      // validate the optional field `showThumbnails`
      if (jsonObj.get("showThumbnails") != null && !jsonObj.get("showThumbnails").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("showThumbnails"));
      }
      // validate the optional field `isResumable`
      if (jsonObj.get("isResumable") != null && !jsonObj.get("isResumable").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isResumable"));
      }
      // validate the optional field `maxFileCount`
      if (jsonObj.get("maxFileCount") != null && !jsonObj.get("maxFileCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxFileCount"));
      }
      // validate the optional field `maxSize`
      if (jsonObj.get("maxSize") != null && !jsonObj.get("maxSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxSize"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldInputConfigFileUploaderConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldInputConfigFileUploaderConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldInputConfigFileUploaderConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldInputConfigFileUploaderConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldInputConfigFileUploaderConfig>() {
           @Override
           public void write(JsonWriter out, FieldInputConfigFileUploaderConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldInputConfigFileUploaderConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldInputConfigFileUploaderConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldInputConfigFileUploaderConfig
   * @throws IOException if the JSON string is invalid with respect to FieldInputConfigFileUploaderConfig
   */
  public static FieldInputConfigFileUploaderConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldInputConfigFileUploaderConfig.class);
  }

  /**
   * Convert an instance of FieldInputConfigFileUploaderConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

