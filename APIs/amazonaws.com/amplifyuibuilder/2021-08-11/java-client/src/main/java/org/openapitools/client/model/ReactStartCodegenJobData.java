/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JSModule;
import org.openapitools.client.model.JSScript;
import org.openapitools.client.model.JSTarget;
import org.openapitools.client.model.ReactStartCodegenJobDataApiConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the code generation job configuration for a React project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReactStartCodegenJobData {
  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  private JSModule module;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private JSTarget target;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private JSScript script;

  public static final String SERIALIZED_NAME_RENDER_TYPE_DECLARATIONS = "renderTypeDeclarations";
  @SerializedName(SERIALIZED_NAME_RENDER_TYPE_DECLARATIONS)
  private Boolean renderTypeDeclarations;

  public static final String SERIALIZED_NAME_INLINE_SOURCE_MAP = "inlineSourceMap";
  @SerializedName(SERIALIZED_NAME_INLINE_SOURCE_MAP)
  private Boolean inlineSourceMap;

  public static final String SERIALIZED_NAME_API_CONFIGURATION = "apiConfiguration";
  @SerializedName(SERIALIZED_NAME_API_CONFIGURATION)
  private ReactStartCodegenJobDataApiConfiguration apiConfiguration;

  public ReactStartCodegenJobData() {
  }

  public ReactStartCodegenJobData module(JSModule module) {
    this.module = module;
    return this;
  }

  /**
   * Get module
   * @return module
   */
  @javax.annotation.Nullable
  public JSModule getModule() {
    return module;
  }

  public void setModule(JSModule module) {
    this.module = module;
  }


  public ReactStartCodegenJobData target(JSTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public JSTarget getTarget() {
    return target;
  }

  public void setTarget(JSTarget target) {
    this.target = target;
  }


  public ReactStartCodegenJobData script(JSScript script) {
    this.script = script;
    return this;
  }

  /**
   * Get script
   * @return script
   */
  @javax.annotation.Nullable
  public JSScript getScript() {
    return script;
  }

  public void setScript(JSScript script) {
    this.script = script;
  }


  public ReactStartCodegenJobData renderTypeDeclarations(Boolean renderTypeDeclarations) {
    this.renderTypeDeclarations = renderTypeDeclarations;
    return this;
  }

  /**
   * Get renderTypeDeclarations
   * @return renderTypeDeclarations
   */
  @javax.annotation.Nullable
  public Boolean getRenderTypeDeclarations() {
    return renderTypeDeclarations;
  }

  public void setRenderTypeDeclarations(Boolean renderTypeDeclarations) {
    this.renderTypeDeclarations = renderTypeDeclarations;
  }


  public ReactStartCodegenJobData inlineSourceMap(Boolean inlineSourceMap) {
    this.inlineSourceMap = inlineSourceMap;
    return this;
  }

  /**
   * Get inlineSourceMap
   * @return inlineSourceMap
   */
  @javax.annotation.Nullable
  public Boolean getInlineSourceMap() {
    return inlineSourceMap;
  }

  public void setInlineSourceMap(Boolean inlineSourceMap) {
    this.inlineSourceMap = inlineSourceMap;
  }


  public ReactStartCodegenJobData apiConfiguration(ReactStartCodegenJobDataApiConfiguration apiConfiguration) {
    this.apiConfiguration = apiConfiguration;
    return this;
  }

  /**
   * Get apiConfiguration
   * @return apiConfiguration
   */
  @javax.annotation.Nullable
  public ReactStartCodegenJobDataApiConfiguration getApiConfiguration() {
    return apiConfiguration;
  }

  public void setApiConfiguration(ReactStartCodegenJobDataApiConfiguration apiConfiguration) {
    this.apiConfiguration = apiConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReactStartCodegenJobData reactStartCodegenJobData = (ReactStartCodegenJobData) o;
    return Objects.equals(this.module, reactStartCodegenJobData.module) &&
        Objects.equals(this.target, reactStartCodegenJobData.target) &&
        Objects.equals(this.script, reactStartCodegenJobData.script) &&
        Objects.equals(this.renderTypeDeclarations, reactStartCodegenJobData.renderTypeDeclarations) &&
        Objects.equals(this.inlineSourceMap, reactStartCodegenJobData.inlineSourceMap) &&
        Objects.equals(this.apiConfiguration, reactStartCodegenJobData.apiConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(module, target, script, renderTypeDeclarations, inlineSourceMap, apiConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReactStartCodegenJobData {\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    renderTypeDeclarations: ").append(toIndentedString(renderTypeDeclarations)).append("\n");
    sb.append("    inlineSourceMap: ").append(toIndentedString(inlineSourceMap)).append("\n");
    sb.append("    apiConfiguration: ").append(toIndentedString(apiConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("module");
    openapiFields.add("target");
    openapiFields.add("script");
    openapiFields.add("renderTypeDeclarations");
    openapiFields.add("inlineSourceMap");
    openapiFields.add("apiConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReactStartCodegenJobData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReactStartCodegenJobData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReactStartCodegenJobData is not found in the empty JSON string", ReactStartCodegenJobData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReactStartCodegenJobData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReactStartCodegenJobData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `module`
      if (jsonObj.get("module") != null && !jsonObj.get("module").isJsonNull()) {
        JSModule.validateJsonElement(jsonObj.get("module"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        JSTarget.validateJsonElement(jsonObj.get("target"));
      }
      // validate the optional field `script`
      if (jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) {
        JSScript.validateJsonElement(jsonObj.get("script"));
      }
      // validate the optional field `renderTypeDeclarations`
      if (jsonObj.get("renderTypeDeclarations") != null && !jsonObj.get("renderTypeDeclarations").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("renderTypeDeclarations"));
      }
      // validate the optional field `inlineSourceMap`
      if (jsonObj.get("inlineSourceMap") != null && !jsonObj.get("inlineSourceMap").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("inlineSourceMap"));
      }
      // validate the optional field `apiConfiguration`
      if (jsonObj.get("apiConfiguration") != null && !jsonObj.get("apiConfiguration").isJsonNull()) {
        ReactStartCodegenJobDataApiConfiguration.validateJsonElement(jsonObj.get("apiConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReactStartCodegenJobData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReactStartCodegenJobData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReactStartCodegenJobData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReactStartCodegenJobData.class));

       return (TypeAdapter<T>) new TypeAdapter<ReactStartCodegenJobData>() {
           @Override
           public void write(JsonWriter out, ReactStartCodegenJobData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReactStartCodegenJobData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReactStartCodegenJobData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReactStartCodegenJobData
   * @throws IOException if the JSON string is invalid with respect to ReactStartCodegenJobData
   */
  public static ReactStartCodegenJobData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReactStartCodegenJobData.class);
  }

  /**
   * Convert an instance of ReactStartCodegenJobData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

