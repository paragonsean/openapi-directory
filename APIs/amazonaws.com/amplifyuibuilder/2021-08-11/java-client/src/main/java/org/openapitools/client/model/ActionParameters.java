/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ActionParametersAnchor;
import org.openapitools.client.model.ActionParametersGlobal;
import org.openapitools.client.model.ActionParametersId;
import org.openapitools.client.model.ActionParametersState;
import org.openapitools.client.model.ActionParametersTarget;
import org.openapitools.client.model.ActionParametersType;
import org.openapitools.client.model.ActionParametersUrl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the event action configuration for an element of a &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;ComponentChild&lt;/code&gt;. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components. &lt;code&gt;ActionParameters&lt;/code&gt; defines the action that is performed when an event occurs on the component.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionParameters {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ActionParametersType type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private ActionParametersUrl url;

  public static final String SERIALIZED_NAME_ANCHOR = "anchor";
  @SerializedName(SERIALIZED_NAME_ANCHOR)
  private ActionParametersAnchor anchor;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private ActionParametersTarget target;

  public static final String SERIALIZED_NAME_GLOBAL = "global";
  @SerializedName(SERIALIZED_NAME_GLOBAL)
  private ActionParametersGlobal global;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ActionParametersId id;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map fields;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ActionParametersState state;

  public ActionParameters() {
  }

  public ActionParameters type(ActionParametersType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ActionParametersType getType() {
    return type;
  }

  public void setType(ActionParametersType type) {
    this.type = type;
  }


  public ActionParameters url(ActionParametersUrl url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public ActionParametersUrl getUrl() {
    return url;
  }

  public void setUrl(ActionParametersUrl url) {
    this.url = url;
  }


  public ActionParameters anchor(ActionParametersAnchor anchor) {
    this.anchor = anchor;
    return this;
  }

  /**
   * Get anchor
   * @return anchor
   */
  @javax.annotation.Nullable
  public ActionParametersAnchor getAnchor() {
    return anchor;
  }

  public void setAnchor(ActionParametersAnchor anchor) {
    this.anchor = anchor;
  }


  public ActionParameters target(ActionParametersTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public ActionParametersTarget getTarget() {
    return target;
  }

  public void setTarget(ActionParametersTarget target) {
    this.target = target;
  }


  public ActionParameters global(ActionParametersGlobal global) {
    this.global = global;
    return this;
  }

  /**
   * Get global
   * @return global
   */
  @javax.annotation.Nullable
  public ActionParametersGlobal getGlobal() {
    return global;
  }

  public void setGlobal(ActionParametersGlobal global) {
    this.global = global;
  }


  public ActionParameters model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public ActionParameters id(ActionParametersId id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public ActionParametersId getId() {
    return id;
  }

  public void setId(ActionParametersId id) {
    this.id = id;
  }


  public ActionParameters fields(Map fields) {
    this.fields = fields;
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public Map getFields() {
    return fields;
  }

  public void setFields(Map fields) {
    this.fields = fields;
  }


  public ActionParameters state(ActionParametersState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ActionParametersState getState() {
    return state;
  }

  public void setState(ActionParametersState state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionParameters actionParameters = (ActionParameters) o;
    return Objects.equals(this.type, actionParameters.type) &&
        Objects.equals(this.url, actionParameters.url) &&
        Objects.equals(this.anchor, actionParameters.anchor) &&
        Objects.equals(this.target, actionParameters.target) &&
        Objects.equals(this.global, actionParameters.global) &&
        Objects.equals(this.model, actionParameters.model) &&
        Objects.equals(this.id, actionParameters.id) &&
        Objects.equals(this.fields, actionParameters.fields) &&
        Objects.equals(this.state, actionParameters.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, url, anchor, target, global, model, id, fields, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionParameters {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("anchor");
    openapiFields.add("target");
    openapiFields.add("global");
    openapiFields.add("model");
    openapiFields.add("id");
    openapiFields.add("fields");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionParameters is not found in the empty JSON string", ActionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ActionParametersType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `url`
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) {
        ActionParametersUrl.validateJsonElement(jsonObj.get("url"));
      }
      // validate the optional field `anchor`
      if (jsonObj.get("anchor") != null && !jsonObj.get("anchor").isJsonNull()) {
        ActionParametersAnchor.validateJsonElement(jsonObj.get("anchor"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        ActionParametersTarget.validateJsonElement(jsonObj.get("target"));
      }
      // validate the optional field `global`
      if (jsonObj.get("global") != null && !jsonObj.get("global").isJsonNull()) {
        ActionParametersGlobal.validateJsonElement(jsonObj.get("global"));
      }
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("model"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        ActionParametersId.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `fields`
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("fields"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        ActionParametersState.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionParameters>() {
           @Override
           public void write(JsonWriter out, ActionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionParameters
   * @throws IOException if the JSON string is invalid with respect to ActionParameters
   */
  public static ActionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionParameters.class);
  }

  /**
   * Convert an instance of ActionParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

