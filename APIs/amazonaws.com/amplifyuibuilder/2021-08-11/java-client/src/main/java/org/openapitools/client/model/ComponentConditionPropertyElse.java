/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ComponentPropertyBindingProperties;
import org.openapitools.client.model.ComponentPropertyCollectionBindingProperties;
import org.openapitools.client.model.ComponentPropertyCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ComponentConditionPropertyElse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComponentConditionPropertyElse {
  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_BINDING_PROPERTIES = "bindingProperties";
  @SerializedName(SERIALIZED_NAME_BINDING_PROPERTIES)
  private ComponentPropertyBindingProperties bindingProperties;

  public static final String SERIALIZED_NAME_COLLECTION_BINDING_PROPERTIES = "collectionBindingProperties";
  @SerializedName(SERIALIZED_NAME_COLLECTION_BINDING_PROPERTIES)
  private ComponentPropertyCollectionBindingProperties collectionBindingProperties;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_BINDINGS = "bindings";
  @SerializedName(SERIALIZED_NAME_BINDINGS)
  private Map bindings;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE = "userAttribute";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE)
  private String userAttribute;

  public static final String SERIALIZED_NAME_CONCAT = "concat";
  @SerializedName(SERIALIZED_NAME_CONCAT)
  private List concat;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private ComponentPropertyCondition condition;

  public static final String SERIALIZED_NAME_CONFIGURED = "configured";
  @SerializedName(SERIALIZED_NAME_CONFIGURED)
  private Boolean configured;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_IMPORTED_VALUE = "importedValue";
  @SerializedName(SERIALIZED_NAME_IMPORTED_VALUE)
  private String importedValue;

  public static final String SERIALIZED_NAME_COMPONENT_NAME = "componentName";
  @SerializedName(SERIALIZED_NAME_COMPONENT_NAME)
  private String componentName;

  public static final String SERIALIZED_NAME_PROPERTY = "property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public ComponentConditionPropertyElse() {
  }

  public ComponentConditionPropertyElse value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public ComponentConditionPropertyElse bindingProperties(ComponentPropertyBindingProperties bindingProperties) {
    this.bindingProperties = bindingProperties;
    return this;
  }

  /**
   * Get bindingProperties
   * @return bindingProperties
   */
  @javax.annotation.Nullable
  public ComponentPropertyBindingProperties getBindingProperties() {
    return bindingProperties;
  }

  public void setBindingProperties(ComponentPropertyBindingProperties bindingProperties) {
    this.bindingProperties = bindingProperties;
  }


  public ComponentConditionPropertyElse collectionBindingProperties(ComponentPropertyCollectionBindingProperties collectionBindingProperties) {
    this.collectionBindingProperties = collectionBindingProperties;
    return this;
  }

  /**
   * Get collectionBindingProperties
   * @return collectionBindingProperties
   */
  @javax.annotation.Nullable
  public ComponentPropertyCollectionBindingProperties getCollectionBindingProperties() {
    return collectionBindingProperties;
  }

  public void setCollectionBindingProperties(ComponentPropertyCollectionBindingProperties collectionBindingProperties) {
    this.collectionBindingProperties = collectionBindingProperties;
  }


  public ComponentConditionPropertyElse defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public ComponentConditionPropertyElse model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public ComponentConditionPropertyElse bindings(Map bindings) {
    this.bindings = bindings;
    return this;
  }

  /**
   * Get bindings
   * @return bindings
   */
  @javax.annotation.Nullable
  public Map getBindings() {
    return bindings;
  }

  public void setBindings(Map bindings) {
    this.bindings = bindings;
  }


  public ComponentConditionPropertyElse event(String event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   * @return event
   */
  @javax.annotation.Nullable
  public String getEvent() {
    return event;
  }

  public void setEvent(String event) {
    this.event = event;
  }


  public ComponentConditionPropertyElse userAttribute(String userAttribute) {
    this.userAttribute = userAttribute;
    return this;
  }

  /**
   * Get userAttribute
   * @return userAttribute
   */
  @javax.annotation.Nullable
  public String getUserAttribute() {
    return userAttribute;
  }

  public void setUserAttribute(String userAttribute) {
    this.userAttribute = userAttribute;
  }


  public ComponentConditionPropertyElse concat(List concat) {
    this.concat = concat;
    return this;
  }

  /**
   * Get concat
   * @return concat
   */
  @javax.annotation.Nullable
  public List getConcat() {
    return concat;
  }

  public void setConcat(List concat) {
    this.concat = concat;
  }


  public ComponentConditionPropertyElse condition(ComponentPropertyCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public ComponentPropertyCondition getCondition() {
    return condition;
  }

  public void setCondition(ComponentPropertyCondition condition) {
    this.condition = condition;
  }


  public ComponentConditionPropertyElse configured(Boolean configured) {
    this.configured = configured;
    return this;
  }

  /**
   * Get configured
   * @return configured
   */
  @javax.annotation.Nullable
  public Boolean getConfigured() {
    return configured;
  }

  public void setConfigured(Boolean configured) {
    this.configured = configured;
  }


  public ComponentConditionPropertyElse type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ComponentConditionPropertyElse importedValue(String importedValue) {
    this.importedValue = importedValue;
    return this;
  }

  /**
   * Get importedValue
   * @return importedValue
   */
  @javax.annotation.Nullable
  public String getImportedValue() {
    return importedValue;
  }

  public void setImportedValue(String importedValue) {
    this.importedValue = importedValue;
  }


  public ComponentConditionPropertyElse componentName(String componentName) {
    this.componentName = componentName;
    return this;
  }

  /**
   * Get componentName
   * @return componentName
   */
  @javax.annotation.Nullable
  public String getComponentName() {
    return componentName;
  }

  public void setComponentName(String componentName) {
    this.componentName = componentName;
  }


  public ComponentConditionPropertyElse property(String property) {
    this.property = property;
    return this;
  }

  /**
   * Get property
   * @return property
   */
  @javax.annotation.Nullable
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentConditionPropertyElse componentConditionPropertyElse = (ComponentConditionPropertyElse) o;
    return Objects.equals(this.value, componentConditionPropertyElse.value) &&
        Objects.equals(this.bindingProperties, componentConditionPropertyElse.bindingProperties) &&
        Objects.equals(this.collectionBindingProperties, componentConditionPropertyElse.collectionBindingProperties) &&
        Objects.equals(this.defaultValue, componentConditionPropertyElse.defaultValue) &&
        Objects.equals(this.model, componentConditionPropertyElse.model) &&
        Objects.equals(this.bindings, componentConditionPropertyElse.bindings) &&
        Objects.equals(this.event, componentConditionPropertyElse.event) &&
        Objects.equals(this.userAttribute, componentConditionPropertyElse.userAttribute) &&
        Objects.equals(this.concat, componentConditionPropertyElse.concat) &&
        Objects.equals(this.condition, componentConditionPropertyElse.condition) &&
        Objects.equals(this.configured, componentConditionPropertyElse.configured) &&
        Objects.equals(this.type, componentConditionPropertyElse.type) &&
        Objects.equals(this.importedValue, componentConditionPropertyElse.importedValue) &&
        Objects.equals(this.componentName, componentConditionPropertyElse.componentName) &&
        Objects.equals(this.property, componentConditionPropertyElse.property);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, bindingProperties, collectionBindingProperties, defaultValue, model, bindings, event, userAttribute, concat, condition, configured, type, importedValue, componentName, property);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentConditionPropertyElse {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    bindingProperties: ").append(toIndentedString(bindingProperties)).append("\n");
    sb.append("    collectionBindingProperties: ").append(toIndentedString(collectionBindingProperties)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    bindings: ").append(toIndentedString(bindings)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    userAttribute: ").append(toIndentedString(userAttribute)).append("\n");
    sb.append("    concat: ").append(toIndentedString(concat)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    configured: ").append(toIndentedString(configured)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    importedValue: ").append(toIndentedString(importedValue)).append("\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("value");
    openapiFields.add("bindingProperties");
    openapiFields.add("collectionBindingProperties");
    openapiFields.add("defaultValue");
    openapiFields.add("model");
    openapiFields.add("bindings");
    openapiFields.add("event");
    openapiFields.add("userAttribute");
    openapiFields.add("concat");
    openapiFields.add("condition");
    openapiFields.add("configured");
    openapiFields.add("type");
    openapiFields.add("importedValue");
    openapiFields.add("componentName");
    openapiFields.add("property");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComponentConditionPropertyElse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentConditionPropertyElse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentConditionPropertyElse is not found in the empty JSON string", ComponentConditionPropertyElse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComponentConditionPropertyElse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComponentConditionPropertyElse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("value"));
      }
      // validate the optional field `bindingProperties`
      if (jsonObj.get("bindingProperties") != null && !jsonObj.get("bindingProperties").isJsonNull()) {
        ComponentPropertyBindingProperties.validateJsonElement(jsonObj.get("bindingProperties"));
      }
      // validate the optional field `collectionBindingProperties`
      if (jsonObj.get("collectionBindingProperties") != null && !jsonObj.get("collectionBindingProperties").isJsonNull()) {
        ComponentPropertyCollectionBindingProperties.validateJsonElement(jsonObj.get("collectionBindingProperties"));
      }
      // validate the optional field `defaultValue`
      if (jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultValue"));
      }
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("model"));
      }
      // validate the optional field `bindings`
      if (jsonObj.get("bindings") != null && !jsonObj.get("bindings").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("bindings"));
      }
      // validate the optional field `event`
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("event"));
      }
      // validate the optional field `userAttribute`
      if (jsonObj.get("userAttribute") != null && !jsonObj.get("userAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("userAttribute"));
      }
      // validate the optional field `concat`
      if (jsonObj.get("concat") != null && !jsonObj.get("concat").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("concat"));
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        ComponentPropertyCondition.validateJsonElement(jsonObj.get("condition"));
      }
      // validate the optional field `configured`
      if (jsonObj.get("configured") != null && !jsonObj.get("configured").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("configured"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `importedValue`
      if (jsonObj.get("importedValue") != null && !jsonObj.get("importedValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("importedValue"));
      }
      // validate the optional field `componentName`
      if (jsonObj.get("componentName") != null && !jsonObj.get("componentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("componentName"));
      }
      // validate the optional field `property`
      if (jsonObj.get("property") != null && !jsonObj.get("property").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("property"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentConditionPropertyElse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentConditionPropertyElse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentConditionPropertyElse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentConditionPropertyElse.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentConditionPropertyElse>() {
           @Override
           public void write(JsonWriter out, ComponentConditionPropertyElse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentConditionPropertyElse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComponentConditionPropertyElse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComponentConditionPropertyElse
   * @throws IOException if the JSON string is invalid with respect to ComponentConditionPropertyElse
   */
  public static ComponentConditionPropertyElse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentConditionPropertyElse.class);
  }

  /**
   * Convert an instance of ComponentConditionPropertyElse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

