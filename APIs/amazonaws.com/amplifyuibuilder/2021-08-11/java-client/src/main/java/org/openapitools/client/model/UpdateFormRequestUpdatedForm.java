/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.CreateFormRequestFormToCreateCta;
import org.openapitools.client.model.CreateFormRequestFormToCreateDataType;
import org.openapitools.client.model.CreateFormRequestFormToCreateStyle;
import org.openapitools.client.model.FormActionType;
import org.openapitools.client.model.LabelDecorator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFormRequestUpdatedForm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFormRequestUpdatedForm {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private CreateFormRequestFormToCreateDataType dataType;

  public static final String SERIALIZED_NAME_FORM_ACTION_TYPE = "formActionType";
  @SerializedName(SERIALIZED_NAME_FORM_ACTION_TYPE)
  private FormActionType formActionType;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map fields;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private CreateFormRequestFormToCreateStyle style;

  public static final String SERIALIZED_NAME_SECTIONAL_ELEMENTS = "sectionalElements";
  @SerializedName(SERIALIZED_NAME_SECTIONAL_ELEMENTS)
  private Map sectionalElements;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_CTA = "cta";
  @SerializedName(SERIALIZED_NAME_CTA)
  private CreateFormRequestFormToCreateCta cta;

  public static final String SERIALIZED_NAME_LABEL_DECORATOR = "labelDecorator";
  @SerializedName(SERIALIZED_NAME_LABEL_DECORATOR)
  private LabelDecorator labelDecorator;

  public UpdateFormRequestUpdatedForm() {
  }

  public UpdateFormRequestUpdatedForm name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateFormRequestUpdatedForm dataType(CreateFormRequestFormToCreateDataType dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nullable
  public CreateFormRequestFormToCreateDataType getDataType() {
    return dataType;
  }

  public void setDataType(CreateFormRequestFormToCreateDataType dataType) {
    this.dataType = dataType;
  }


  public UpdateFormRequestUpdatedForm formActionType(FormActionType formActionType) {
    this.formActionType = formActionType;
    return this;
  }

  /**
   * Get formActionType
   * @return formActionType
   */
  @javax.annotation.Nullable
  public FormActionType getFormActionType() {
    return formActionType;
  }

  public void setFormActionType(FormActionType formActionType) {
    this.formActionType = formActionType;
  }


  public UpdateFormRequestUpdatedForm fields(Map fields) {
    this.fields = fields;
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public Map getFields() {
    return fields;
  }

  public void setFields(Map fields) {
    this.fields = fields;
  }


  public UpdateFormRequestUpdatedForm style(CreateFormRequestFormToCreateStyle style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nullable
  public CreateFormRequestFormToCreateStyle getStyle() {
    return style;
  }

  public void setStyle(CreateFormRequestFormToCreateStyle style) {
    this.style = style;
  }


  public UpdateFormRequestUpdatedForm sectionalElements(Map sectionalElements) {
    this.sectionalElements = sectionalElements;
    return this;
  }

  /**
   * Get sectionalElements
   * @return sectionalElements
   */
  @javax.annotation.Nullable
  public Map getSectionalElements() {
    return sectionalElements;
  }

  public void setSectionalElements(Map sectionalElements) {
    this.sectionalElements = sectionalElements;
  }


  public UpdateFormRequestUpdatedForm schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Get schemaVersion
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public UpdateFormRequestUpdatedForm cta(CreateFormRequestFormToCreateCta cta) {
    this.cta = cta;
    return this;
  }

  /**
   * Get cta
   * @return cta
   */
  @javax.annotation.Nullable
  public CreateFormRequestFormToCreateCta getCta() {
    return cta;
  }

  public void setCta(CreateFormRequestFormToCreateCta cta) {
    this.cta = cta;
  }


  public UpdateFormRequestUpdatedForm labelDecorator(LabelDecorator labelDecorator) {
    this.labelDecorator = labelDecorator;
    return this;
  }

  /**
   * Get labelDecorator
   * @return labelDecorator
   */
  @javax.annotation.Nullable
  public LabelDecorator getLabelDecorator() {
    return labelDecorator;
  }

  public void setLabelDecorator(LabelDecorator labelDecorator) {
    this.labelDecorator = labelDecorator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFormRequestUpdatedForm updateFormRequestUpdatedForm = (UpdateFormRequestUpdatedForm) o;
    return Objects.equals(this.name, updateFormRequestUpdatedForm.name) &&
        Objects.equals(this.dataType, updateFormRequestUpdatedForm.dataType) &&
        Objects.equals(this.formActionType, updateFormRequestUpdatedForm.formActionType) &&
        Objects.equals(this.fields, updateFormRequestUpdatedForm.fields) &&
        Objects.equals(this.style, updateFormRequestUpdatedForm.style) &&
        Objects.equals(this.sectionalElements, updateFormRequestUpdatedForm.sectionalElements) &&
        Objects.equals(this.schemaVersion, updateFormRequestUpdatedForm.schemaVersion) &&
        Objects.equals(this.cta, updateFormRequestUpdatedForm.cta) &&
        Objects.equals(this.labelDecorator, updateFormRequestUpdatedForm.labelDecorator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, dataType, formActionType, fields, style, sectionalElements, schemaVersion, cta, labelDecorator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFormRequestUpdatedForm {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    formActionType: ").append(toIndentedString(formActionType)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    sectionalElements: ").append(toIndentedString(sectionalElements)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    cta: ").append(toIndentedString(cta)).append("\n");
    sb.append("    labelDecorator: ").append(toIndentedString(labelDecorator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("dataType");
    openapiFields.add("formActionType");
    openapiFields.add("fields");
    openapiFields.add("style");
    openapiFields.add("sectionalElements");
    openapiFields.add("schemaVersion");
    openapiFields.add("cta");
    openapiFields.add("labelDecorator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFormRequestUpdatedForm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFormRequestUpdatedForm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFormRequestUpdatedForm is not found in the empty JSON string", UpdateFormRequestUpdatedForm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFormRequestUpdatedForm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFormRequestUpdatedForm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `dataType`
      if (jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) {
        CreateFormRequestFormToCreateDataType.validateJsonElement(jsonObj.get("dataType"));
      }
      // validate the optional field `formActionType`
      if (jsonObj.get("formActionType") != null && !jsonObj.get("formActionType").isJsonNull()) {
        FormActionType.validateJsonElement(jsonObj.get("formActionType"));
      }
      // validate the optional field `fields`
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("fields"));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        CreateFormRequestFormToCreateStyle.validateJsonElement(jsonObj.get("style"));
      }
      // validate the optional field `sectionalElements`
      if (jsonObj.get("sectionalElements") != null && !jsonObj.get("sectionalElements").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("sectionalElements"));
      }
      // validate the optional field `schemaVersion`
      if (jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("schemaVersion"));
      }
      // validate the optional field `cta`
      if (jsonObj.get("cta") != null && !jsonObj.get("cta").isJsonNull()) {
        CreateFormRequestFormToCreateCta.validateJsonElement(jsonObj.get("cta"));
      }
      // validate the optional field `labelDecorator`
      if (jsonObj.get("labelDecorator") != null && !jsonObj.get("labelDecorator").isJsonNull()) {
        LabelDecorator.validateJsonElement(jsonObj.get("labelDecorator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFormRequestUpdatedForm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFormRequestUpdatedForm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFormRequestUpdatedForm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFormRequestUpdatedForm.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFormRequestUpdatedForm>() {
           @Override
           public void write(JsonWriter out, UpdateFormRequestUpdatedForm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFormRequestUpdatedForm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFormRequestUpdatedForm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFormRequestUpdatedForm
   * @throws IOException if the JSON string is invalid with respect to UpdateFormRequestUpdatedForm
   */
  public static UpdateFormRequestUpdatedForm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFormRequestUpdatedForm.class);
  }

  /**
   * Convert an instance of UpdateFormRequestUpdatedForm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

