/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.CodegenFeatureFlags;
import org.openapitools.client.model.CodegenJobAsset;
import org.openapitools.client.model.CodegenJobGenericDataSchema;
import org.openapitools.client.model.CodegenJobRenderConfig;
import org.openapitools.client.model.CodegenJobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the configuration for a code generation job that is associated with an Amplify app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodegenJob {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_ENVIRONMENT_NAME = "environmentName";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_NAME)
  private String environmentName;

  public static final String SERIALIZED_NAME_RENDER_CONFIG = "renderConfig";
  @SerializedName(SERIALIZED_NAME_RENDER_CONFIG)
  private CodegenJobRenderConfig renderConfig;

  public static final String SERIALIZED_NAME_GENERIC_DATA_SCHEMA = "genericDataSchema";
  @SerializedName(SERIALIZED_NAME_GENERIC_DATA_SCHEMA)
  private CodegenJobGenericDataSchema genericDataSchema;

  public static final String SERIALIZED_NAME_AUTO_GENERATE_FORMS = "autoGenerateForms";
  @SerializedName(SERIALIZED_NAME_AUTO_GENERATE_FORMS)
  private Boolean autoGenerateForms;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private CodegenFeatureFlags features;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CodegenJobStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_ASSET = "asset";
  @SerializedName(SERIALIZED_NAME_ASSET)
  private CodegenJobAsset asset;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public CodegenJob() {
  }

  public CodegenJob id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CodegenJob appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Get appId
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public CodegenJob environmentName(String environmentName) {
    this.environmentName = environmentName;
    return this;
  }

  /**
   * Get environmentName
   * @return environmentName
   */
  @javax.annotation.Nonnull
  public String getEnvironmentName() {
    return environmentName;
  }

  public void setEnvironmentName(String environmentName) {
    this.environmentName = environmentName;
  }


  public CodegenJob renderConfig(CodegenJobRenderConfig renderConfig) {
    this.renderConfig = renderConfig;
    return this;
  }

  /**
   * Get renderConfig
   * @return renderConfig
   */
  @javax.annotation.Nullable
  public CodegenJobRenderConfig getRenderConfig() {
    return renderConfig;
  }

  public void setRenderConfig(CodegenJobRenderConfig renderConfig) {
    this.renderConfig = renderConfig;
  }


  public CodegenJob genericDataSchema(CodegenJobGenericDataSchema genericDataSchema) {
    this.genericDataSchema = genericDataSchema;
    return this;
  }

  /**
   * Get genericDataSchema
   * @return genericDataSchema
   */
  @javax.annotation.Nullable
  public CodegenJobGenericDataSchema getGenericDataSchema() {
    return genericDataSchema;
  }

  public void setGenericDataSchema(CodegenJobGenericDataSchema genericDataSchema) {
    this.genericDataSchema = genericDataSchema;
  }


  public CodegenJob autoGenerateForms(Boolean autoGenerateForms) {
    this.autoGenerateForms = autoGenerateForms;
    return this;
  }

  /**
   * Get autoGenerateForms
   * @return autoGenerateForms
   */
  @javax.annotation.Nullable
  public Boolean getAutoGenerateForms() {
    return autoGenerateForms;
  }

  public void setAutoGenerateForms(Boolean autoGenerateForms) {
    this.autoGenerateForms = autoGenerateForms;
  }


  public CodegenJob features(CodegenFeatureFlags features) {
    this.features = features;
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public CodegenFeatureFlags getFeatures() {
    return features;
  }

  public void setFeatures(CodegenFeatureFlags features) {
    this.features = features;
  }


  public CodegenJob status(CodegenJobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CodegenJobStatus getStatus() {
    return status;
  }

  public void setStatus(CodegenJobStatus status) {
    this.status = status;
  }


  public CodegenJob statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public CodegenJob asset(CodegenJobAsset asset) {
    this.asset = asset;
    return this;
  }

  /**
   * Get asset
   * @return asset
   */
  @javax.annotation.Nullable
  public CodegenJobAsset getAsset() {
    return asset;
  }

  public void setAsset(CodegenJobAsset asset) {
    this.asset = asset;
  }


  public CodegenJob tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CodegenJob createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CodegenJob modifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * Get modifiedAt
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodegenJob codegenJob = (CodegenJob) o;
    return Objects.equals(this.id, codegenJob.id) &&
        Objects.equals(this.appId, codegenJob.appId) &&
        Objects.equals(this.environmentName, codegenJob.environmentName) &&
        Objects.equals(this.renderConfig, codegenJob.renderConfig) &&
        Objects.equals(this.genericDataSchema, codegenJob.genericDataSchema) &&
        Objects.equals(this.autoGenerateForms, codegenJob.autoGenerateForms) &&
        Objects.equals(this.features, codegenJob.features) &&
        Objects.equals(this.status, codegenJob.status) &&
        Objects.equals(this.statusMessage, codegenJob.statusMessage) &&
        Objects.equals(this.asset, codegenJob.asset) &&
        Objects.equals(this.tags, codegenJob.tags) &&
        Objects.equals(this.createdAt, codegenJob.createdAt) &&
        Objects.equals(this.modifiedAt, codegenJob.modifiedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, appId, environmentName, renderConfig, genericDataSchema, autoGenerateForms, features, status, statusMessage, asset, tags, createdAt, modifiedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodegenJob {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    environmentName: ").append(toIndentedString(environmentName)).append("\n");
    sb.append("    renderConfig: ").append(toIndentedString(renderConfig)).append("\n");
    sb.append("    genericDataSchema: ").append(toIndentedString(genericDataSchema)).append("\n");
    sb.append("    autoGenerateForms: ").append(toIndentedString(autoGenerateForms)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("appId");
    openapiFields.add("environmentName");
    openapiFields.add("renderConfig");
    openapiFields.add("genericDataSchema");
    openapiFields.add("autoGenerateForms");
    openapiFields.add("features");
    openapiFields.add("status");
    openapiFields.add("statusMessage");
    openapiFields.add("asset");
    openapiFields.add("tags");
    openapiFields.add("createdAt");
    openapiFields.add("modifiedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("appId");
    openapiRequiredFields.add("environmentName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodegenJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodegenJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodegenJob is not found in the empty JSON string", CodegenJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodegenJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodegenJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodegenJob.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `appId`
      String.validateJsonElement(jsonObj.get("appId"));
      // validate the required field `environmentName`
      String.validateJsonElement(jsonObj.get("environmentName"));
      // validate the optional field `renderConfig`
      if (jsonObj.get("renderConfig") != null && !jsonObj.get("renderConfig").isJsonNull()) {
        CodegenJobRenderConfig.validateJsonElement(jsonObj.get("renderConfig"));
      }
      // validate the optional field `genericDataSchema`
      if (jsonObj.get("genericDataSchema") != null && !jsonObj.get("genericDataSchema").isJsonNull()) {
        CodegenJobGenericDataSchema.validateJsonElement(jsonObj.get("genericDataSchema"));
      }
      // validate the optional field `autoGenerateForms`
      if (jsonObj.get("autoGenerateForms") != null && !jsonObj.get("autoGenerateForms").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("autoGenerateForms"));
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        CodegenFeatureFlags.validateJsonElement(jsonObj.get("features"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        CodegenJobStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `asset`
      if (jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull()) {
        CodegenJobAsset.validateJsonElement(jsonObj.get("asset"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `modifiedAt`
      if (jsonObj.get("modifiedAt") != null && !jsonObj.get("modifiedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("modifiedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodegenJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodegenJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodegenJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodegenJob.class));

       return (TypeAdapter<T>) new TypeAdapter<CodegenJob>() {
           @Override
           public void write(JsonWriter out, CodegenJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodegenJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodegenJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodegenJob
   * @throws IOException if the JSON string is invalid with respect to CodegenJob
   */
  public static CodegenJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodegenJob.class);
  }

  /**
   * Convert an instance of CodegenJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

