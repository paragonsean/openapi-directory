/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.StartCodegenJobRequestCodegenJobToCreateFeatures;
import org.openapitools.client.model.StartCodegenJobRequestCodegenJobToCreateGenericDataSchema;
import org.openapitools.client.model.StartCodegenJobRequestCodegenJobToCreateRenderConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartCodegenJobRequestCodegenJobToCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartCodegenJobRequestCodegenJobToCreate {
  public static final String SERIALIZED_NAME_RENDER_CONFIG = "renderConfig";
  @SerializedName(SERIALIZED_NAME_RENDER_CONFIG)
  private StartCodegenJobRequestCodegenJobToCreateRenderConfig renderConfig;

  public static final String SERIALIZED_NAME_GENERIC_DATA_SCHEMA = "genericDataSchema";
  @SerializedName(SERIALIZED_NAME_GENERIC_DATA_SCHEMA)
  private StartCodegenJobRequestCodegenJobToCreateGenericDataSchema genericDataSchema;

  public static final String SERIALIZED_NAME_AUTO_GENERATE_FORMS = "autoGenerateForms";
  @SerializedName(SERIALIZED_NAME_AUTO_GENERATE_FORMS)
  private Boolean autoGenerateForms;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private StartCodegenJobRequestCodegenJobToCreateFeatures features;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public StartCodegenJobRequestCodegenJobToCreate() {
  }

  public StartCodegenJobRequestCodegenJobToCreate renderConfig(StartCodegenJobRequestCodegenJobToCreateRenderConfig renderConfig) {
    this.renderConfig = renderConfig;
    return this;
  }

  /**
   * Get renderConfig
   * @return renderConfig
   */
  @javax.annotation.Nonnull
  public StartCodegenJobRequestCodegenJobToCreateRenderConfig getRenderConfig() {
    return renderConfig;
  }

  public void setRenderConfig(StartCodegenJobRequestCodegenJobToCreateRenderConfig renderConfig) {
    this.renderConfig = renderConfig;
  }


  public StartCodegenJobRequestCodegenJobToCreate genericDataSchema(StartCodegenJobRequestCodegenJobToCreateGenericDataSchema genericDataSchema) {
    this.genericDataSchema = genericDataSchema;
    return this;
  }

  /**
   * Get genericDataSchema
   * @return genericDataSchema
   */
  @javax.annotation.Nullable
  public StartCodegenJobRequestCodegenJobToCreateGenericDataSchema getGenericDataSchema() {
    return genericDataSchema;
  }

  public void setGenericDataSchema(StartCodegenJobRequestCodegenJobToCreateGenericDataSchema genericDataSchema) {
    this.genericDataSchema = genericDataSchema;
  }


  public StartCodegenJobRequestCodegenJobToCreate autoGenerateForms(Boolean autoGenerateForms) {
    this.autoGenerateForms = autoGenerateForms;
    return this;
  }

  /**
   * Get autoGenerateForms
   * @return autoGenerateForms
   */
  @javax.annotation.Nullable
  public Boolean getAutoGenerateForms() {
    return autoGenerateForms;
  }

  public void setAutoGenerateForms(Boolean autoGenerateForms) {
    this.autoGenerateForms = autoGenerateForms;
  }


  public StartCodegenJobRequestCodegenJobToCreate features(StartCodegenJobRequestCodegenJobToCreateFeatures features) {
    this.features = features;
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public StartCodegenJobRequestCodegenJobToCreateFeatures getFeatures() {
    return features;
  }

  public void setFeatures(StartCodegenJobRequestCodegenJobToCreateFeatures features) {
    this.features = features;
  }


  public StartCodegenJobRequestCodegenJobToCreate tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartCodegenJobRequestCodegenJobToCreate startCodegenJobRequestCodegenJobToCreate = (StartCodegenJobRequestCodegenJobToCreate) o;
    return Objects.equals(this.renderConfig, startCodegenJobRequestCodegenJobToCreate.renderConfig) &&
        Objects.equals(this.genericDataSchema, startCodegenJobRequestCodegenJobToCreate.genericDataSchema) &&
        Objects.equals(this.autoGenerateForms, startCodegenJobRequestCodegenJobToCreate.autoGenerateForms) &&
        Objects.equals(this.features, startCodegenJobRequestCodegenJobToCreate.features) &&
        Objects.equals(this.tags, startCodegenJobRequestCodegenJobToCreate.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(renderConfig, genericDataSchema, autoGenerateForms, features, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartCodegenJobRequestCodegenJobToCreate {\n");
    sb.append("    renderConfig: ").append(toIndentedString(renderConfig)).append("\n");
    sb.append("    genericDataSchema: ").append(toIndentedString(genericDataSchema)).append("\n");
    sb.append("    autoGenerateForms: ").append(toIndentedString(autoGenerateForms)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("renderConfig");
    openapiFields.add("genericDataSchema");
    openapiFields.add("autoGenerateForms");
    openapiFields.add("features");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("renderConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartCodegenJobRequestCodegenJobToCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartCodegenJobRequestCodegenJobToCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartCodegenJobRequestCodegenJobToCreate is not found in the empty JSON string", StartCodegenJobRequestCodegenJobToCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartCodegenJobRequestCodegenJobToCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartCodegenJobRequestCodegenJobToCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartCodegenJobRequestCodegenJobToCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `renderConfig`
      StartCodegenJobRequestCodegenJobToCreateRenderConfig.validateJsonElement(jsonObj.get("renderConfig"));
      // validate the optional field `genericDataSchema`
      if (jsonObj.get("genericDataSchema") != null && !jsonObj.get("genericDataSchema").isJsonNull()) {
        StartCodegenJobRequestCodegenJobToCreateGenericDataSchema.validateJsonElement(jsonObj.get("genericDataSchema"));
      }
      // validate the optional field `autoGenerateForms`
      if (jsonObj.get("autoGenerateForms") != null && !jsonObj.get("autoGenerateForms").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("autoGenerateForms"));
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        StartCodegenJobRequestCodegenJobToCreateFeatures.validateJsonElement(jsonObj.get("features"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartCodegenJobRequestCodegenJobToCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartCodegenJobRequestCodegenJobToCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartCodegenJobRequestCodegenJobToCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartCodegenJobRequestCodegenJobToCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<StartCodegenJobRequestCodegenJobToCreate>() {
           @Override
           public void write(JsonWriter out, StartCodegenJobRequestCodegenJobToCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartCodegenJobRequestCodegenJobToCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartCodegenJobRequestCodegenJobToCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartCodegenJobRequestCodegenJobToCreate
   * @throws IOException if the JSON string is invalid with respect to StartCodegenJobRequestCodegenJobToCreate
   */
  public static StartCodegenJobRequestCodegenJobToCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartCodegenJobRequestCodegenJobToCreate.class);
  }

  /**
   * Convert an instance of StartCodegenJobRequestCodegenJobToCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

