/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ComponentConditionPropertyElse;
import org.openapitools.client.model.ComponentConditionPropertyThen;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a conditional expression to set a component property. Use &lt;code&gt;ComponentConditionProperty&lt;/code&gt; to set a property to different values conditionally, based on the value of another property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComponentConditionProperty {
  public static final String SERIALIZED_NAME_PROPERTY = "property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private String operator;

  public static final String SERIALIZED_NAME_OPERAND = "operand";
  @SerializedName(SERIALIZED_NAME_OPERAND)
  private String operand;

  public static final String SERIALIZED_NAME_THEN = "then";
  @SerializedName(SERIALIZED_NAME_THEN)
  private ComponentConditionPropertyThen then;

  public static final String SERIALIZED_NAME_ELSE = "else";
  @SerializedName(SERIALIZED_NAME_ELSE)
  private ComponentConditionPropertyElse _else;

  public static final String SERIALIZED_NAME_OPERAND_TYPE = "operandType";
  @SerializedName(SERIALIZED_NAME_OPERAND_TYPE)
  private String operandType;

  public ComponentConditionProperty() {
  }

  public ComponentConditionProperty property(String property) {
    this.property = property;
    return this;
  }

  /**
   * Get property
   * @return property
   */
  @javax.annotation.Nullable
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }


  public ComponentConditionProperty field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public ComponentConditionProperty operator(String operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nullable
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }


  public ComponentConditionProperty operand(String operand) {
    this.operand = operand;
    return this;
  }

  /**
   * Get operand
   * @return operand
   */
  @javax.annotation.Nullable
  public String getOperand() {
    return operand;
  }

  public void setOperand(String operand) {
    this.operand = operand;
  }


  public ComponentConditionProperty then(ComponentConditionPropertyThen then) {
    this.then = then;
    return this;
  }

  /**
   * Get then
   * @return then
   */
  @javax.annotation.Nullable
  public ComponentConditionPropertyThen getThen() {
    return then;
  }

  public void setThen(ComponentConditionPropertyThen then) {
    this.then = then;
  }


  public ComponentConditionProperty _else(ComponentConditionPropertyElse _else) {
    this._else = _else;
    return this;
  }

  /**
   * Get _else
   * @return _else
   */
  @javax.annotation.Nullable
  public ComponentConditionPropertyElse getElse() {
    return _else;
  }

  public void setElse(ComponentConditionPropertyElse _else) {
    this._else = _else;
  }


  public ComponentConditionProperty operandType(String operandType) {
    this.operandType = operandType;
    return this;
  }

  /**
   * Get operandType
   * @return operandType
   */
  @javax.annotation.Nullable
  public String getOperandType() {
    return operandType;
  }

  public void setOperandType(String operandType) {
    this.operandType = operandType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentConditionProperty componentConditionProperty = (ComponentConditionProperty) o;
    return Objects.equals(this.property, componentConditionProperty.property) &&
        Objects.equals(this.field, componentConditionProperty.field) &&
        Objects.equals(this.operator, componentConditionProperty.operator) &&
        Objects.equals(this.operand, componentConditionProperty.operand) &&
        Objects.equals(this.then, componentConditionProperty.then) &&
        Objects.equals(this._else, componentConditionProperty._else) &&
        Objects.equals(this.operandType, componentConditionProperty.operandType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(property, field, operator, operand, then, _else, operandType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentConditionProperty {\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    operand: ").append(toIndentedString(operand)).append("\n");
    sb.append("    then: ").append(toIndentedString(then)).append("\n");
    sb.append("    _else: ").append(toIndentedString(_else)).append("\n");
    sb.append("    operandType: ").append(toIndentedString(operandType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("property");
    openapiFields.add("field");
    openapiFields.add("operator");
    openapiFields.add("operand");
    openapiFields.add("then");
    openapiFields.add("else");
    openapiFields.add("operandType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComponentConditionProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentConditionProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentConditionProperty is not found in the empty JSON string", ComponentConditionProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComponentConditionProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComponentConditionProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `property`
      if (jsonObj.get("property") != null && !jsonObj.get("property").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("property"));
      }
      // validate the optional field `field`
      if (jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("field"));
      }
      // validate the optional field `operator`
      if (jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("operator"));
      }
      // validate the optional field `operand`
      if (jsonObj.get("operand") != null && !jsonObj.get("operand").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("operand"));
      }
      // validate the optional field `then`
      if (jsonObj.get("then") != null && !jsonObj.get("then").isJsonNull()) {
        ComponentConditionPropertyThen.validateJsonElement(jsonObj.get("then"));
      }
      // validate the optional field `else`
      if (jsonObj.get("else") != null && !jsonObj.get("else").isJsonNull()) {
        ComponentConditionPropertyElse.validateJsonElement(jsonObj.get("else"));
      }
      // validate the optional field `operandType`
      if (jsonObj.get("operandType") != null && !jsonObj.get("operandType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("operandType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentConditionProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentConditionProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentConditionProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentConditionProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentConditionProperty>() {
           @Override
           public void write(JsonWriter out, ComponentConditionProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentConditionProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComponentConditionProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComponentConditionProperty
   * @throws IOException if the JSON string is invalid with respect to ComponentConditionProperty
   */
  public static ComponentConditionProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentConditionProperty.class);
  }

  /**
   * Convert an instance of ComponentConditionProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

