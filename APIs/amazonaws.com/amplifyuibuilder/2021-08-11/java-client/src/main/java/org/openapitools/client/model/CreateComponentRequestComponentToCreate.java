/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateComponentRequestComponentToCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateComponentRequestComponentToCreate {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_COMPONENT_TYPE = "componentType";
  @SerializedName(SERIALIZED_NAME_COMPONENT_TYPE)
  private String componentType;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List children;

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List variants;

  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private Map overrides;

  public static final String SERIALIZED_NAME_BINDING_PROPERTIES = "bindingProperties";
  @SerializedName(SERIALIZED_NAME_BINDING_PROPERTIES)
  private Map bindingProperties;

  public static final String SERIALIZED_NAME_COLLECTION_PROPERTIES = "collectionProperties";
  @SerializedName(SERIALIZED_NAME_COLLECTION_PROPERTIES)
  private Map collectionProperties;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private Map events;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public CreateComponentRequestComponentToCreate() {
  }

  public CreateComponentRequestComponentToCreate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateComponentRequestComponentToCreate sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * Get sourceId
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public CreateComponentRequestComponentToCreate componentType(String componentType) {
    this.componentType = componentType;
    return this;
  }

  /**
   * Get componentType
   * @return componentType
   */
  @javax.annotation.Nonnull
  public String getComponentType() {
    return componentType;
  }

  public void setComponentType(String componentType) {
    this.componentType = componentType;
  }


  public CreateComponentRequestComponentToCreate properties(Object properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Describes the component&#39;s properties.
   * @return properties
   */
  @javax.annotation.Nullable
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public CreateComponentRequestComponentToCreate children(List children) {
    this.children = children;
    return this;
  }

  /**
   * Get children
   * @return children
   */
  @javax.annotation.Nullable
  public List getChildren() {
    return children;
  }

  public void setChildren(List children) {
    this.children = children;
  }


  public CreateComponentRequestComponentToCreate variants(List variants) {
    this.variants = variants;
    return this;
  }

  /**
   * Get variants
   * @return variants
   */
  @javax.annotation.Nonnull
  public List getVariants() {
    return variants;
  }

  public void setVariants(List variants) {
    this.variants = variants;
  }


  public CreateComponentRequestComponentToCreate overrides(Map overrides) {
    this.overrides = overrides;
    return this;
  }

  /**
   * Get overrides
   * @return overrides
   */
  @javax.annotation.Nonnull
  public Map getOverrides() {
    return overrides;
  }

  public void setOverrides(Map overrides) {
    this.overrides = overrides;
  }


  public CreateComponentRequestComponentToCreate bindingProperties(Map bindingProperties) {
    this.bindingProperties = bindingProperties;
    return this;
  }

  /**
   * Get bindingProperties
   * @return bindingProperties
   */
  @javax.annotation.Nonnull
  public Map getBindingProperties() {
    return bindingProperties;
  }

  public void setBindingProperties(Map bindingProperties) {
    this.bindingProperties = bindingProperties;
  }


  public CreateComponentRequestComponentToCreate collectionProperties(Map collectionProperties) {
    this.collectionProperties = collectionProperties;
    return this;
  }

  /**
   * Get collectionProperties
   * @return collectionProperties
   */
  @javax.annotation.Nullable
  public Map getCollectionProperties() {
    return collectionProperties;
  }

  public void setCollectionProperties(Map collectionProperties) {
    this.collectionProperties = collectionProperties;
  }


  public CreateComponentRequestComponentToCreate tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateComponentRequestComponentToCreate events(Map events) {
    this.events = events;
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public Map getEvents() {
    return events;
  }

  public void setEvents(Map events) {
    this.events = events;
  }


  public CreateComponentRequestComponentToCreate schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Get schemaVersion
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateComponentRequestComponentToCreate createComponentRequestComponentToCreate = (CreateComponentRequestComponentToCreate) o;
    return Objects.equals(this.name, createComponentRequestComponentToCreate.name) &&
        Objects.equals(this.sourceId, createComponentRequestComponentToCreate.sourceId) &&
        Objects.equals(this.componentType, createComponentRequestComponentToCreate.componentType) &&
        Objects.equals(this.properties, createComponentRequestComponentToCreate.properties) &&
        Objects.equals(this.children, createComponentRequestComponentToCreate.children) &&
        Objects.equals(this.variants, createComponentRequestComponentToCreate.variants) &&
        Objects.equals(this.overrides, createComponentRequestComponentToCreate.overrides) &&
        Objects.equals(this.bindingProperties, createComponentRequestComponentToCreate.bindingProperties) &&
        Objects.equals(this.collectionProperties, createComponentRequestComponentToCreate.collectionProperties) &&
        Objects.equals(this.tags, createComponentRequestComponentToCreate.tags) &&
        Objects.equals(this.events, createComponentRequestComponentToCreate.events) &&
        Objects.equals(this.schemaVersion, createComponentRequestComponentToCreate.schemaVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, sourceId, componentType, properties, children, variants, overrides, bindingProperties, collectionProperties, tags, events, schemaVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateComponentRequestComponentToCreate {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    componentType: ").append(toIndentedString(componentType)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    bindingProperties: ").append(toIndentedString(bindingProperties)).append("\n");
    sb.append("    collectionProperties: ").append(toIndentedString(collectionProperties)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("sourceId");
    openapiFields.add("componentType");
    openapiFields.add("properties");
    openapiFields.add("children");
    openapiFields.add("variants");
    openapiFields.add("overrides");
    openapiFields.add("bindingProperties");
    openapiFields.add("collectionProperties");
    openapiFields.add("tags");
    openapiFields.add("events");
    openapiFields.add("schemaVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("componentType");
    openapiRequiredFields.add("properties");
    openapiRequiredFields.add("variants");
    openapiRequiredFields.add("overrides");
    openapiRequiredFields.add("bindingProperties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateComponentRequestComponentToCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateComponentRequestComponentToCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateComponentRequestComponentToCreate is not found in the empty JSON string", CreateComponentRequestComponentToCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateComponentRequestComponentToCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateComponentRequestComponentToCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateComponentRequestComponentToCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `sourceId`
      if (jsonObj.get("sourceId") != null && !jsonObj.get("sourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceId"));
      }
      // validate the required field `componentType`
      String.validateJsonElement(jsonObj.get("componentType"));
      // validate the optional field `children`
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("children"));
      }
      // validate the required field `variants`
      List.validateJsonElement(jsonObj.get("variants"));
      // validate the required field `overrides`
      Map.validateJsonElement(jsonObj.get("overrides"));
      // validate the required field `bindingProperties`
      Map.validateJsonElement(jsonObj.get("bindingProperties"));
      // validate the optional field `collectionProperties`
      if (jsonObj.get("collectionProperties") != null && !jsonObj.get("collectionProperties").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("collectionProperties"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `events`
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("events"));
      }
      // validate the optional field `schemaVersion`
      if (jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("schemaVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateComponentRequestComponentToCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateComponentRequestComponentToCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateComponentRequestComponentToCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateComponentRequestComponentToCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateComponentRequestComponentToCreate>() {
           @Override
           public void write(JsonWriter out, CreateComponentRequestComponentToCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateComponentRequestComponentToCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateComponentRequestComponentToCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateComponentRequestComponentToCreate
   * @throws IOException if the JSON string is invalid with respect to CreateComponentRequestComponentToCreate
   */
  public static CreateComponentRequestComponentToCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateComponentRequestComponentToCreate.class);
  }

  /**
   * Convert an instance of CreateComponentRequestComponentToCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

