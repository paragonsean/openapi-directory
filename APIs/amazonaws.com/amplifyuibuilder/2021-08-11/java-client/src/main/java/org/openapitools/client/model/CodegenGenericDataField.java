/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodegenGenericDataFieldDataType;
import org.openapitools.client.model.CodegenGenericDataFieldRelationship;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a field in a generic data schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodegenGenericDataField {
  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private CodegenGenericDataFieldDataType dataType;

  public static final String SERIALIZED_NAME_DATA_TYPE_VALUE = "dataTypeValue";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE_VALUE)
  private String dataTypeValue;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_IS_ARRAY = "isArray";
  @SerializedName(SERIALIZED_NAME_IS_ARRAY)
  private Boolean isArray;

  public static final String SERIALIZED_NAME_RELATIONSHIP = "relationship";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP)
  private CodegenGenericDataFieldRelationship relationship;

  public CodegenGenericDataField() {
  }

  public CodegenGenericDataField dataType(CodegenGenericDataFieldDataType dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nonnull
  public CodegenGenericDataFieldDataType getDataType() {
    return dataType;
  }

  public void setDataType(CodegenGenericDataFieldDataType dataType) {
    this.dataType = dataType;
  }


  public CodegenGenericDataField dataTypeValue(String dataTypeValue) {
    this.dataTypeValue = dataTypeValue;
    return this;
  }

  /**
   * Get dataTypeValue
   * @return dataTypeValue
   */
  @javax.annotation.Nonnull
  public String getDataTypeValue() {
    return dataTypeValue;
  }

  public void setDataTypeValue(String dataTypeValue) {
    this.dataTypeValue = dataTypeValue;
  }


  public CodegenGenericDataField required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nonnull
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public CodegenGenericDataField readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @javax.annotation.Nonnull
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public CodegenGenericDataField isArray(Boolean isArray) {
    this.isArray = isArray;
    return this;
  }

  /**
   * Get isArray
   * @return isArray
   */
  @javax.annotation.Nonnull
  public Boolean getIsArray() {
    return isArray;
  }

  public void setIsArray(Boolean isArray) {
    this.isArray = isArray;
  }


  public CodegenGenericDataField relationship(CodegenGenericDataFieldRelationship relationship) {
    this.relationship = relationship;
    return this;
  }

  /**
   * Get relationship
   * @return relationship
   */
  @javax.annotation.Nullable
  public CodegenGenericDataFieldRelationship getRelationship() {
    return relationship;
  }

  public void setRelationship(CodegenGenericDataFieldRelationship relationship) {
    this.relationship = relationship;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodegenGenericDataField codegenGenericDataField = (CodegenGenericDataField) o;
    return Objects.equals(this.dataType, codegenGenericDataField.dataType) &&
        Objects.equals(this.dataTypeValue, codegenGenericDataField.dataTypeValue) &&
        Objects.equals(this.required, codegenGenericDataField.required) &&
        Objects.equals(this.readOnly, codegenGenericDataField.readOnly) &&
        Objects.equals(this.isArray, codegenGenericDataField.isArray) &&
        Objects.equals(this.relationship, codegenGenericDataField.relationship);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, dataTypeValue, required, readOnly, isArray, relationship);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodegenGenericDataField {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dataTypeValue: ").append(toIndentedString(dataTypeValue)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    isArray: ").append(toIndentedString(isArray)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataType");
    openapiFields.add("dataTypeValue");
    openapiFields.add("required");
    openapiFields.add("readOnly");
    openapiFields.add("isArray");
    openapiFields.add("relationship");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataType");
    openapiRequiredFields.add("dataTypeValue");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("readOnly");
    openapiRequiredFields.add("isArray");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodegenGenericDataField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodegenGenericDataField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodegenGenericDataField is not found in the empty JSON string", CodegenGenericDataField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodegenGenericDataField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodegenGenericDataField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodegenGenericDataField.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dataType`
      CodegenGenericDataFieldDataType.validateJsonElement(jsonObj.get("dataType"));
      // validate the required field `dataTypeValue`
      String.validateJsonElement(jsonObj.get("dataTypeValue"));
      // validate the required field `required`
      Boolean.validateJsonElement(jsonObj.get("required"));
      // validate the required field `readOnly`
      Boolean.validateJsonElement(jsonObj.get("readOnly"));
      // validate the required field `isArray`
      Boolean.validateJsonElement(jsonObj.get("isArray"));
      // validate the optional field `relationship`
      if (jsonObj.get("relationship") != null && !jsonObj.get("relationship").isJsonNull()) {
        CodegenGenericDataFieldRelationship.validateJsonElement(jsonObj.get("relationship"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodegenGenericDataField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodegenGenericDataField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodegenGenericDataField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodegenGenericDataField.class));

       return (TypeAdapter<T>) new TypeAdapter<CodegenGenericDataField>() {
           @Override
           public void write(JsonWriter out, CodegenGenericDataField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodegenGenericDataField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodegenGenericDataField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodegenGenericDataField
   * @throws IOException if the JSON string is invalid with respect to CodegenGenericDataField
   */
  public static CodegenGenericDataField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodegenGenericDataField.class);
  }

  /**
   * Convert an instance of CodegenGenericDataField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

