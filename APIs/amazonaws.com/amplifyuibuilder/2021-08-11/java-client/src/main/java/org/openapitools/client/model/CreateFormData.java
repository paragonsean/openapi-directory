/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.CreateFormRequestFormToCreateCta;
import org.openapitools.client.model.CreateFormRequestFormToCreateDataType;
import org.openapitools.client.model.CreateFormRequestFormToCreateStyle;
import org.openapitools.client.model.FormActionType;
import org.openapitools.client.model.LabelDecorator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents all of the information that is required to create a form.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFormData {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private CreateFormRequestFormToCreateDataType dataType;

  public static final String SERIALIZED_NAME_FORM_ACTION_TYPE = "formActionType";
  @SerializedName(SERIALIZED_NAME_FORM_ACTION_TYPE)
  private FormActionType formActionType;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map fields;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private CreateFormRequestFormToCreateStyle style;

  public static final String SERIALIZED_NAME_SECTIONAL_ELEMENTS = "sectionalElements";
  @SerializedName(SERIALIZED_NAME_SECTIONAL_ELEMENTS)
  private Map sectionalElements;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_CTA = "cta";
  @SerializedName(SERIALIZED_NAME_CTA)
  private CreateFormRequestFormToCreateCta cta;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_LABEL_DECORATOR = "labelDecorator";
  @SerializedName(SERIALIZED_NAME_LABEL_DECORATOR)
  private LabelDecorator labelDecorator;

  public CreateFormData() {
  }

  public CreateFormData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateFormData dataType(CreateFormRequestFormToCreateDataType dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nonnull
  public CreateFormRequestFormToCreateDataType getDataType() {
    return dataType;
  }

  public void setDataType(CreateFormRequestFormToCreateDataType dataType) {
    this.dataType = dataType;
  }


  public CreateFormData formActionType(FormActionType formActionType) {
    this.formActionType = formActionType;
    return this;
  }

  /**
   * Get formActionType
   * @return formActionType
   */
  @javax.annotation.Nonnull
  public FormActionType getFormActionType() {
    return formActionType;
  }

  public void setFormActionType(FormActionType formActionType) {
    this.formActionType = formActionType;
  }


  public CreateFormData fields(Map fields) {
    this.fields = fields;
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nonnull
  public Map getFields() {
    return fields;
  }

  public void setFields(Map fields) {
    this.fields = fields;
  }


  public CreateFormData style(CreateFormRequestFormToCreateStyle style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nonnull
  public CreateFormRequestFormToCreateStyle getStyle() {
    return style;
  }

  public void setStyle(CreateFormRequestFormToCreateStyle style) {
    this.style = style;
  }


  public CreateFormData sectionalElements(Map sectionalElements) {
    this.sectionalElements = sectionalElements;
    return this;
  }

  /**
   * Get sectionalElements
   * @return sectionalElements
   */
  @javax.annotation.Nonnull
  public Map getSectionalElements() {
    return sectionalElements;
  }

  public void setSectionalElements(Map sectionalElements) {
    this.sectionalElements = sectionalElements;
  }


  public CreateFormData schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Get schemaVersion
   * @return schemaVersion
   */
  @javax.annotation.Nonnull
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public CreateFormData cta(CreateFormRequestFormToCreateCta cta) {
    this.cta = cta;
    return this;
  }

  /**
   * Get cta
   * @return cta
   */
  @javax.annotation.Nullable
  public CreateFormRequestFormToCreateCta getCta() {
    return cta;
  }

  public void setCta(CreateFormRequestFormToCreateCta cta) {
    this.cta = cta;
  }


  public CreateFormData tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateFormData labelDecorator(LabelDecorator labelDecorator) {
    this.labelDecorator = labelDecorator;
    return this;
  }

  /**
   * Get labelDecorator
   * @return labelDecorator
   */
  @javax.annotation.Nullable
  public LabelDecorator getLabelDecorator() {
    return labelDecorator;
  }

  public void setLabelDecorator(LabelDecorator labelDecorator) {
    this.labelDecorator = labelDecorator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFormData createFormData = (CreateFormData) o;
    return Objects.equals(this.name, createFormData.name) &&
        Objects.equals(this.dataType, createFormData.dataType) &&
        Objects.equals(this.formActionType, createFormData.formActionType) &&
        Objects.equals(this.fields, createFormData.fields) &&
        Objects.equals(this.style, createFormData.style) &&
        Objects.equals(this.sectionalElements, createFormData.sectionalElements) &&
        Objects.equals(this.schemaVersion, createFormData.schemaVersion) &&
        Objects.equals(this.cta, createFormData.cta) &&
        Objects.equals(this.tags, createFormData.tags) &&
        Objects.equals(this.labelDecorator, createFormData.labelDecorator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, dataType, formActionType, fields, style, sectionalElements, schemaVersion, cta, tags, labelDecorator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFormData {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    formActionType: ").append(toIndentedString(formActionType)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    sectionalElements: ").append(toIndentedString(sectionalElements)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    cta: ").append(toIndentedString(cta)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    labelDecorator: ").append(toIndentedString(labelDecorator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("dataType");
    openapiFields.add("formActionType");
    openapiFields.add("fields");
    openapiFields.add("style");
    openapiFields.add("sectionalElements");
    openapiFields.add("schemaVersion");
    openapiFields.add("cta");
    openapiFields.add("tags");
    openapiFields.add("labelDecorator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("dataType");
    openapiRequiredFields.add("formActionType");
    openapiRequiredFields.add("fields");
    openapiRequiredFields.add("style");
    openapiRequiredFields.add("sectionalElements");
    openapiRequiredFields.add("schemaVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFormData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFormData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFormData is not found in the empty JSON string", CreateFormData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFormData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFormData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFormData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `dataType`
      CreateFormRequestFormToCreateDataType.validateJsonElement(jsonObj.get("dataType"));
      // validate the required field `formActionType`
      FormActionType.validateJsonElement(jsonObj.get("formActionType"));
      // validate the required field `fields`
      Map.validateJsonElement(jsonObj.get("fields"));
      // validate the required field `style`
      CreateFormRequestFormToCreateStyle.validateJsonElement(jsonObj.get("style"));
      // validate the required field `sectionalElements`
      Map.validateJsonElement(jsonObj.get("sectionalElements"));
      // validate the required field `schemaVersion`
      String.validateJsonElement(jsonObj.get("schemaVersion"));
      // validate the optional field `cta`
      if (jsonObj.get("cta") != null && !jsonObj.get("cta").isJsonNull()) {
        CreateFormRequestFormToCreateCta.validateJsonElement(jsonObj.get("cta"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `labelDecorator`
      if (jsonObj.get("labelDecorator") != null && !jsonObj.get("labelDecorator").isJsonNull()) {
        LabelDecorator.validateJsonElement(jsonObj.get("labelDecorator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFormData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFormData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFormData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFormData.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFormData>() {
           @Override
           public void write(JsonWriter out, CreateFormData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFormData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFormData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFormData
   * @throws IOException if the JSON string is invalid with respect to CreateFormData
   */
  public static CreateFormData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFormData.class);
  }

  /**
   * Convert an instance of CreateFormData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

