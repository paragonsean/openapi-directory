/*
 * AWS Amplify UI Builder
 * <p>The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources.</p> <p>You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see <a href=\"https://docs.amplify.aws/console/adminui/intro\">Introduction</a> in the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework</a>. For more information about deploying an Amplify application to Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2021-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FormStyleHorizontalGap;
import org.openapitools.client.model.FormStyleOuterPadding;
import org.openapitools.client.model.FormStyleVerticalGap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFormRequestFormToCreateStyle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:30.692671-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFormRequestFormToCreateStyle {
  public static final String SERIALIZED_NAME_HORIZONTAL_GAP = "horizontalGap";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_GAP)
  private FormStyleHorizontalGap horizontalGap;

  public static final String SERIALIZED_NAME_VERTICAL_GAP = "verticalGap";
  @SerializedName(SERIALIZED_NAME_VERTICAL_GAP)
  private FormStyleVerticalGap verticalGap;

  public static final String SERIALIZED_NAME_OUTER_PADDING = "outerPadding";
  @SerializedName(SERIALIZED_NAME_OUTER_PADDING)
  private FormStyleOuterPadding outerPadding;

  public CreateFormRequestFormToCreateStyle() {
  }

  public CreateFormRequestFormToCreateStyle horizontalGap(FormStyleHorizontalGap horizontalGap) {
    this.horizontalGap = horizontalGap;
    return this;
  }

  /**
   * Get horizontalGap
   * @return horizontalGap
   */
  @javax.annotation.Nullable
  public FormStyleHorizontalGap getHorizontalGap() {
    return horizontalGap;
  }

  public void setHorizontalGap(FormStyleHorizontalGap horizontalGap) {
    this.horizontalGap = horizontalGap;
  }


  public CreateFormRequestFormToCreateStyle verticalGap(FormStyleVerticalGap verticalGap) {
    this.verticalGap = verticalGap;
    return this;
  }

  /**
   * Get verticalGap
   * @return verticalGap
   */
  @javax.annotation.Nullable
  public FormStyleVerticalGap getVerticalGap() {
    return verticalGap;
  }

  public void setVerticalGap(FormStyleVerticalGap verticalGap) {
    this.verticalGap = verticalGap;
  }


  public CreateFormRequestFormToCreateStyle outerPadding(FormStyleOuterPadding outerPadding) {
    this.outerPadding = outerPadding;
    return this;
  }

  /**
   * Get outerPadding
   * @return outerPadding
   */
  @javax.annotation.Nullable
  public FormStyleOuterPadding getOuterPadding() {
    return outerPadding;
  }

  public void setOuterPadding(FormStyleOuterPadding outerPadding) {
    this.outerPadding = outerPadding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFormRequestFormToCreateStyle createFormRequestFormToCreateStyle = (CreateFormRequestFormToCreateStyle) o;
    return Objects.equals(this.horizontalGap, createFormRequestFormToCreateStyle.horizontalGap) &&
        Objects.equals(this.verticalGap, createFormRequestFormToCreateStyle.verticalGap) &&
        Objects.equals(this.outerPadding, createFormRequestFormToCreateStyle.outerPadding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(horizontalGap, verticalGap, outerPadding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFormRequestFormToCreateStyle {\n");
    sb.append("    horizontalGap: ").append(toIndentedString(horizontalGap)).append("\n");
    sb.append("    verticalGap: ").append(toIndentedString(verticalGap)).append("\n");
    sb.append("    outerPadding: ").append(toIndentedString(outerPadding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("horizontalGap");
    openapiFields.add("verticalGap");
    openapiFields.add("outerPadding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFormRequestFormToCreateStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFormRequestFormToCreateStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFormRequestFormToCreateStyle is not found in the empty JSON string", CreateFormRequestFormToCreateStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFormRequestFormToCreateStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFormRequestFormToCreateStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `horizontalGap`
      if (jsonObj.get("horizontalGap") != null && !jsonObj.get("horizontalGap").isJsonNull()) {
        FormStyleHorizontalGap.validateJsonElement(jsonObj.get("horizontalGap"));
      }
      // validate the optional field `verticalGap`
      if (jsonObj.get("verticalGap") != null && !jsonObj.get("verticalGap").isJsonNull()) {
        FormStyleVerticalGap.validateJsonElement(jsonObj.get("verticalGap"));
      }
      // validate the optional field `outerPadding`
      if (jsonObj.get("outerPadding") != null && !jsonObj.get("outerPadding").isJsonNull()) {
        FormStyleOuterPadding.validateJsonElement(jsonObj.get("outerPadding"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFormRequestFormToCreateStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFormRequestFormToCreateStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFormRequestFormToCreateStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFormRequestFormToCreateStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFormRequestFormToCreateStyle>() {
           @Override
           public void write(JsonWriter out, CreateFormRequestFormToCreateStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFormRequestFormToCreateStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFormRequestFormToCreateStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFormRequestFormToCreateStyle
   * @throws IOException if the JSON string is invalid with respect to CreateFormRequestFormToCreateStyle
   */
  public static CreateFormRequestFormToCreateStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFormRequestFormToCreateStyle.class);
  }

  /**
   * Convert an instance of CreateFormRequestFormToCreateStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

