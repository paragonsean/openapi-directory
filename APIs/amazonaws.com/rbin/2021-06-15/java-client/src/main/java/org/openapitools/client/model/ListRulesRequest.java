/*
 * Amazon Recycle Bin
 * <p>This is the <i>Recycle Bin API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that enables you to restore accidentally deleted snapshots and EBS-backed AMIs. When using Recycle Bin, if your resources are deleted, they are retained in the Recycle Bin for a time period that you specify.</p> <p>You can restore a resource from the Recycle Bin at any time before its retention period expires. After you restore a resource from the Recycle Bin, the resource is removed from the Recycle Bin, and you can then use it in the same way you use any other resource of that type in your account. If the retention period expires and the resource is not restored, the resource is permanently deleted from the Recycle Bin and is no longer available for recovery. For more information about Recycle Bin, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-recycle-bin.html\"> Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListRulesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:55.433609-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListRulesRequest {
  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  /**
   * The resource type retained by the retention rule. Only retention rules that retain the specified resource type are listed. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To list retention rules that retain snapshots, specify &lt;code&gt;EBS_SNAPSHOT&lt;/code&gt;. To list retention rules that retain EBS-backed AMIs, specify &lt;code&gt;EC2_IMAGE&lt;/code&gt;.
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    EBS_SNAPSHOT("EBS_SNAPSHOT"),
    
    EC2_IMAGE("EC2_IMAGE");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_TAGS = "ResourceTags";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TAGS)
  private List<ResourceTag> resourceTags = new ArrayList<>();

  /**
   * The lock state of the retention rules to list. Only retention rules with the specified lock state are returned.
   */
  @JsonAdapter(LockStateEnum.Adapter.class)
  public enum LockStateEnum {
    LOCKED("locked"),
    
    PENDING_UNLOCK("pending_unlock"),
    
    UNLOCKED("unlocked");

    private String value;

    LockStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LockStateEnum fromValue(String value) {
      for (LockStateEnum b : LockStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LockStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LockStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LockStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LockStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LockStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCK_STATE = "LockState";
  @SerializedName(SERIALIZED_NAME_LOCK_STATE)
  private LockStateEnum lockState;

  public ListRulesRequest() {
  }

  public ListRulesRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned &lt;code&gt;NextToken&lt;/code&gt; value.
   * minimum: 1
   * maximum: 1000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListRulesRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The token for the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListRulesRequest resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * The resource type retained by the retention rule. Only retention rules that retain the specified resource type are listed. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To list retention rules that retain snapshots, specify &lt;code&gt;EBS_SNAPSHOT&lt;/code&gt;. To list retention rules that retain EBS-backed AMIs, specify &lt;code&gt;EC2_IMAGE&lt;/code&gt;.
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public ListRulesRequest resourceTags(List<ResourceTag> resourceTags) {
    this.resourceTags = resourceTags;
    return this;
  }

  public ListRulesRequest addResourceTagsItem(ResourceTag resourceTagsItem) {
    if (this.resourceTags == null) {
      this.resourceTags = new ArrayList<>();
    }
    this.resourceTags.add(resourceTagsItem);
    return this;
  }

  /**
   * Information about the resource tags used to identify resources that are retained by the retention rule.
   * @return resourceTags
   */
  @javax.annotation.Nullable
  public List<ResourceTag> getResourceTags() {
    return resourceTags;
  }

  public void setResourceTags(List<ResourceTag> resourceTags) {
    this.resourceTags = resourceTags;
  }


  public ListRulesRequest lockState(LockStateEnum lockState) {
    this.lockState = lockState;
    return this;
  }

  /**
   * The lock state of the retention rules to list. Only retention rules with the specified lock state are returned.
   * @return lockState
   */
  @javax.annotation.Nullable
  public LockStateEnum getLockState() {
    return lockState;
  }

  public void setLockState(LockStateEnum lockState) {
    this.lockState = lockState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListRulesRequest listRulesRequest = (ListRulesRequest) o;
    return Objects.equals(this.maxResults, listRulesRequest.maxResults) &&
        Objects.equals(this.nextToken, listRulesRequest.nextToken) &&
        Objects.equals(this.resourceType, listRulesRequest.resourceType) &&
        Objects.equals(this.resourceTags, listRulesRequest.resourceTags) &&
        Objects.equals(this.lockState, listRulesRequest.lockState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxResults, nextToken, resourceType, resourceTags, lockState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListRulesRequest {\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceTags: ").append(toIndentedString(resourceTags)).append("\n");
    sb.append("    lockState: ").append(toIndentedString(lockState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxResults");
    openapiFields.add("NextToken");
    openapiFields.add("ResourceType");
    openapiFields.add("ResourceTags");
    openapiFields.add("LockState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ResourceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListRulesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListRulesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListRulesRequest is not found in the empty JSON string", ListRulesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListRulesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListRulesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListRulesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      if (!jsonObj.get("ResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceType").toString()));
      }
      // validate the required field `ResourceType`
      ResourceTypeEnum.validateJsonElement(jsonObj.get("ResourceType"));
      if (jsonObj.get("ResourceTags") != null && !jsonObj.get("ResourceTags").isJsonNull()) {
        JsonArray jsonArrayresourceTags = jsonObj.getAsJsonArray("ResourceTags");
        if (jsonArrayresourceTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ResourceTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ResourceTags` to be an array in the JSON string but got `%s`", jsonObj.get("ResourceTags").toString()));
          }

          // validate the optional field `ResourceTags` (array)
          for (int i = 0; i < jsonArrayresourceTags.size(); i++) {
            ResourceTag.validateJsonElement(jsonArrayresourceTags.get(i));
          };
        }
      }
      if ((jsonObj.get("LockState") != null && !jsonObj.get("LockState").isJsonNull()) && !jsonObj.get("LockState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LockState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LockState").toString()));
      }
      // validate the optional field `LockState`
      if (jsonObj.get("LockState") != null && !jsonObj.get("LockState").isJsonNull()) {
        LockStateEnum.validateJsonElement(jsonObj.get("LockState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListRulesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListRulesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListRulesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListRulesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListRulesRequest>() {
           @Override
           public void write(JsonWriter out, ListRulesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListRulesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListRulesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListRulesRequest
   * @throws IOException if the JSON string is invalid with respect to ListRulesRequest
   */
  public static ListRulesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListRulesRequest.class);
  }

  /**
   * Convert an instance of ListRulesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

