/*
 * Amazon Recycle Bin
 * <p>This is the <i>Recycle Bin API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that enables you to restore accidentally deleted snapshots and EBS-backed AMIs. When using Recycle Bin, if your resources are deleted, they are retained in the Recycle Bin for a time period that you specify.</p> <p>You can restore a resource from the Recycle Bin at any time before its retention period expires. After you restore a resource from the Recycle Bin, the resource is removed from the Recycle Bin, and you can then use it in the same way you use any other resource of that type in your account. If the retention period expires and the resource is not restored, the resource is permanently deleted from the Recycle Bin and is no longer available for recovery. For more information about Recycle Bin, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-recycle-bin.html\"> Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UnlockDelayUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRuleRequestLockConfigurationUnlockDelay
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:55.433609-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRuleRequestLockConfigurationUnlockDelay {
  public static final String SERIALIZED_NAME_UNLOCK_DELAY_VALUE = "UnlockDelayValue";
  @SerializedName(SERIALIZED_NAME_UNLOCK_DELAY_VALUE)
  private Integer unlockDelayValue;

  public static final String SERIALIZED_NAME_UNLOCK_DELAY_UNIT = "UnlockDelayUnit";
  @SerializedName(SERIALIZED_NAME_UNLOCK_DELAY_UNIT)
  private UnlockDelayUnit unlockDelayUnit;

  public CreateRuleRequestLockConfigurationUnlockDelay() {
  }

  public CreateRuleRequestLockConfigurationUnlockDelay unlockDelayValue(Integer unlockDelayValue) {
    this.unlockDelayValue = unlockDelayValue;
    return this;
  }

  /**
   * Get unlockDelayValue
   * @return unlockDelayValue
   */
  @javax.annotation.Nonnull
  public Integer getUnlockDelayValue() {
    return unlockDelayValue;
  }

  public void setUnlockDelayValue(Integer unlockDelayValue) {
    this.unlockDelayValue = unlockDelayValue;
  }


  public CreateRuleRequestLockConfigurationUnlockDelay unlockDelayUnit(UnlockDelayUnit unlockDelayUnit) {
    this.unlockDelayUnit = unlockDelayUnit;
    return this;
  }

  /**
   * Get unlockDelayUnit
   * @return unlockDelayUnit
   */
  @javax.annotation.Nonnull
  public UnlockDelayUnit getUnlockDelayUnit() {
    return unlockDelayUnit;
  }

  public void setUnlockDelayUnit(UnlockDelayUnit unlockDelayUnit) {
    this.unlockDelayUnit = unlockDelayUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRuleRequestLockConfigurationUnlockDelay createRuleRequestLockConfigurationUnlockDelay = (CreateRuleRequestLockConfigurationUnlockDelay) o;
    return Objects.equals(this.unlockDelayValue, createRuleRequestLockConfigurationUnlockDelay.unlockDelayValue) &&
        Objects.equals(this.unlockDelayUnit, createRuleRequestLockConfigurationUnlockDelay.unlockDelayUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unlockDelayValue, unlockDelayUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRuleRequestLockConfigurationUnlockDelay {\n");
    sb.append("    unlockDelayValue: ").append(toIndentedString(unlockDelayValue)).append("\n");
    sb.append("    unlockDelayUnit: ").append(toIndentedString(unlockDelayUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UnlockDelayValue");
    openapiFields.add("UnlockDelayUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("UnlockDelayValue");
    openapiRequiredFields.add("UnlockDelayUnit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRuleRequestLockConfigurationUnlockDelay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRuleRequestLockConfigurationUnlockDelay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRuleRequestLockConfigurationUnlockDelay is not found in the empty JSON string", CreateRuleRequestLockConfigurationUnlockDelay.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRuleRequestLockConfigurationUnlockDelay.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRuleRequestLockConfigurationUnlockDelay` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRuleRequestLockConfigurationUnlockDelay.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `UnlockDelayValue`
      Integer.validateJsonElement(jsonObj.get("UnlockDelayValue"));
      // validate the required field `UnlockDelayUnit`
      UnlockDelayUnit.validateJsonElement(jsonObj.get("UnlockDelayUnit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRuleRequestLockConfigurationUnlockDelay.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRuleRequestLockConfigurationUnlockDelay' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRuleRequestLockConfigurationUnlockDelay> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRuleRequestLockConfigurationUnlockDelay.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRuleRequestLockConfigurationUnlockDelay>() {
           @Override
           public void write(JsonWriter out, CreateRuleRequestLockConfigurationUnlockDelay value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRuleRequestLockConfigurationUnlockDelay read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRuleRequestLockConfigurationUnlockDelay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRuleRequestLockConfigurationUnlockDelay
   * @throws IOException if the JSON string is invalid with respect to CreateRuleRequestLockConfigurationUnlockDelay
   */
  public static CreateRuleRequestLockConfigurationUnlockDelay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRuleRequestLockConfigurationUnlockDelay.class);
  }

  /**
   * Convert an instance of CreateRuleRequestLockConfigurationUnlockDelay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

