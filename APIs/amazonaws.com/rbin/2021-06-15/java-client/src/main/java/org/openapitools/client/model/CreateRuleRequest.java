/*
 * Amazon Recycle Bin
 * <p>This is the <i>Recycle Bin API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that enables you to restore accidentally deleted snapshots and EBS-backed AMIs. When using Recycle Bin, if your resources are deleted, they are retained in the Recycle Bin for a time period that you specify.</p> <p>You can restore a resource from the Recycle Bin at any time before its retention period expires. After you restore a resource from the Recycle Bin, the resource is removed from the Recycle Bin, and you can then use it in the same way you use any other resource of that type in your account. If the retention period expires and the resource is not restored, the resource is permanently deleted from the Recycle Bin and is no longer available for recovery. For more information about Recycle Bin, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-recycle-bin.html\"> Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateRuleRequestLockConfiguration;
import org.openapitools.client.model.CreateRuleRequestRetentionPeriod;
import org.openapitools.client.model.ResourceTag;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRuleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:55.433609-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRuleRequest {
  public static final String SERIALIZED_NAME_RETENTION_PERIOD = "RetentionPeriod";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD)
  private CreateRuleRequestRetentionPeriod retentionPeriod;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  /**
   * The resource type to be retained by the retention rule. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To retain snapshots, specify &lt;code&gt;EBS_SNAPSHOT&lt;/code&gt;. To retain EBS-backed AMIs, specify &lt;code&gt;EC2_IMAGE&lt;/code&gt;.
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    EBS_SNAPSHOT("EBS_SNAPSHOT"),
    
    EC2_IMAGE("EC2_IMAGE");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_TAGS = "ResourceTags";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TAGS)
  private List<ResourceTag> resourceTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCK_CONFIGURATION = "LockConfiguration";
  @SerializedName(SERIALIZED_NAME_LOCK_CONFIGURATION)
  private CreateRuleRequestLockConfiguration lockConfiguration;

  public CreateRuleRequest() {
  }

  public CreateRuleRequest retentionPeriod(CreateRuleRequestRetentionPeriod retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
    return this;
  }

  /**
   * Get retentionPeriod
   * @return retentionPeriod
   */
  @javax.annotation.Nonnull
  public CreateRuleRequestRetentionPeriod getRetentionPeriod() {
    return retentionPeriod;
  }

  public void setRetentionPeriod(CreateRuleRequestRetentionPeriod retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
  }


  public CreateRuleRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The retention rule description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateRuleRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateRuleRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Information about the tags to assign to the retention rule.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateRuleRequest resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * The resource type to be retained by the retention rule. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To retain snapshots, specify &lt;code&gt;EBS_SNAPSHOT&lt;/code&gt;. To retain EBS-backed AMIs, specify &lt;code&gt;EC2_IMAGE&lt;/code&gt;.
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public CreateRuleRequest resourceTags(List<ResourceTag> resourceTags) {
    this.resourceTags = resourceTags;
    return this;
  }

  public CreateRuleRequest addResourceTagsItem(ResourceTag resourceTagsItem) {
    if (this.resourceTags == null) {
      this.resourceTags = new ArrayList<>();
    }
    this.resourceTags.add(resourceTagsItem);
    return this;
  }

  /**
   * &lt;p&gt;Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. For tag-level retention rules, only deleted resources, of the specified resource type, that have one or more of the specified tag key and value pairs are retained. If a resource is deleted, but it does not have any of the specified tag key and value pairs, it is immediately deleted without being retained by the retention rule.&lt;/p&gt; &lt;p&gt;You can add the same tag key and value pair to a maximum or five retention rules.&lt;/p&gt; &lt;p&gt;To create a Region-level retention rule, omit this parameter. A Region-level retention rule does not have any resource tags specified. It retains all deleted resources of the specified resource type in the Region in which the rule is created, even if the resources are not tagged.&lt;/p&gt;
   * @return resourceTags
   */
  @javax.annotation.Nullable
  public List<ResourceTag> getResourceTags() {
    return resourceTags;
  }

  public void setResourceTags(List<ResourceTag> resourceTags) {
    this.resourceTags = resourceTags;
  }


  public CreateRuleRequest lockConfiguration(CreateRuleRequestLockConfiguration lockConfiguration) {
    this.lockConfiguration = lockConfiguration;
    return this;
  }

  /**
   * Get lockConfiguration
   * @return lockConfiguration
   */
  @javax.annotation.Nullable
  public CreateRuleRequestLockConfiguration getLockConfiguration() {
    return lockConfiguration;
  }

  public void setLockConfiguration(CreateRuleRequestLockConfiguration lockConfiguration) {
    this.lockConfiguration = lockConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRuleRequest createRuleRequest = (CreateRuleRequest) o;
    return Objects.equals(this.retentionPeriod, createRuleRequest.retentionPeriod) &&
        Objects.equals(this.description, createRuleRequest.description) &&
        Objects.equals(this.tags, createRuleRequest.tags) &&
        Objects.equals(this.resourceType, createRuleRequest.resourceType) &&
        Objects.equals(this.resourceTags, createRuleRequest.resourceTags) &&
        Objects.equals(this.lockConfiguration, createRuleRequest.lockConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(retentionPeriod, description, tags, resourceType, resourceTags, lockConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRuleRequest {\n");
    sb.append("    retentionPeriod: ").append(toIndentedString(retentionPeriod)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceTags: ").append(toIndentedString(resourceTags)).append("\n");
    sb.append("    lockConfiguration: ").append(toIndentedString(lockConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RetentionPeriod");
    openapiFields.add("Description");
    openapiFields.add("Tags");
    openapiFields.add("ResourceType");
    openapiFields.add("ResourceTags");
    openapiFields.add("LockConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RetentionPeriod");
    openapiRequiredFields.add("ResourceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRuleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRuleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRuleRequest is not found in the empty JSON string", CreateRuleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRuleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRuleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRuleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `RetentionPeriod`
      CreateRuleRequestRetentionPeriod.validateJsonElement(jsonObj.get("RetentionPeriod"));
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (!jsonObj.get("ResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceType").toString()));
      }
      // validate the required field `ResourceType`
      ResourceTypeEnum.validateJsonElement(jsonObj.get("ResourceType"));
      if (jsonObj.get("ResourceTags") != null && !jsonObj.get("ResourceTags").isJsonNull()) {
        JsonArray jsonArrayresourceTags = jsonObj.getAsJsonArray("ResourceTags");
        if (jsonArrayresourceTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ResourceTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ResourceTags` to be an array in the JSON string but got `%s`", jsonObj.get("ResourceTags").toString()));
          }

          // validate the optional field `ResourceTags` (array)
          for (int i = 0; i < jsonArrayresourceTags.size(); i++) {
            ResourceTag.validateJsonElement(jsonArrayresourceTags.get(i));
          };
        }
      }
      // validate the optional field `LockConfiguration`
      if (jsonObj.get("LockConfiguration") != null && !jsonObj.get("LockConfiguration").isJsonNull()) {
        CreateRuleRequestLockConfiguration.validateJsonElement(jsonObj.get("LockConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRuleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRuleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRuleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRuleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRuleRequest>() {
           @Override
           public void write(JsonWriter out, CreateRuleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRuleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRuleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRuleRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRuleRequest
   */
  public static CreateRuleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRuleRequest.class);
  }

  /**
   * Convert an instance of CreateRuleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

