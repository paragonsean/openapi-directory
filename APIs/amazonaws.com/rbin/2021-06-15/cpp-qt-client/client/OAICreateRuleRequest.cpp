/**
 * Amazon Recycle Bin
 * <p>This is the <i>Recycle Bin API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that enables you to restore accidentally deleted snapshots and EBS-backed AMIs. When using Recycle Bin, if your resources are deleted, they are retained in the Recycle Bin for a time period that you specify.</p> <p>You can restore a resource from the Recycle Bin at any time before its retention period expires. After you restore a resource from the Recycle Bin, the resource is removed from the Recycle Bin, and you can then use it in the same way you use any other resource of that type in your account. If the retention period expires and the resource is not restored, the resource is permanently deleted from the Recycle Bin and is no longer available for recovery. For more information about Recycle Bin, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-recycle-bin.html\"> Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRuleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRuleRequest::OAICreateRuleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRuleRequest::OAICreateRuleRequest() {
    this->initializeModel();
}

OAICreateRuleRequest::~OAICreateRuleRequest() {}

void OAICreateRuleRequest::initializeModel() {

    m_retention_period_isSet = false;
    m_retention_period_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_tags_isSet = false;
    m_resource_tags_isValid = false;

    m_lock_configuration_isSet = false;
    m_lock_configuration_isValid = false;
}

void OAICreateRuleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRuleRequest::fromJsonObject(QJsonObject json) {

    m_retention_period_isValid = ::OpenAPI::fromJsonValue(m_retention_period, json[QString("RetentionPeriod")]);
    m_retention_period_isSet = !json[QString("RetentionPeriod")].isNull() && m_retention_period_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_resource_tags_isValid = ::OpenAPI::fromJsonValue(m_resource_tags, json[QString("ResourceTags")]);
    m_resource_tags_isSet = !json[QString("ResourceTags")].isNull() && m_resource_tags_isValid;

    m_lock_configuration_isValid = ::OpenAPI::fromJsonValue(m_lock_configuration, json[QString("LockConfiguration")]);
    m_lock_configuration_isSet = !json[QString("LockConfiguration")].isNull() && m_lock_configuration_isValid;
}

QString OAICreateRuleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRuleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_retention_period.isSet()) {
        obj.insert(QString("RetentionPeriod"), ::OpenAPI::toJsonValue(m_retention_period));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_tags.isSet()) {
        obj.insert(QString("ResourceTags"), ::OpenAPI::toJsonValue(m_resource_tags));
    }
    if (m_lock_configuration.isSet()) {
        obj.insert(QString("LockConfiguration"), ::OpenAPI::toJsonValue(m_lock_configuration));
    }
    return obj;
}

OAIGetRuleResponse_RetentionPeriod OAICreateRuleRequest::getRetentionPeriod() const {
    return m_retention_period;
}
void OAICreateRuleRequest::setRetentionPeriod(const OAIGetRuleResponse_RetentionPeriod &retention_period) {
    m_retention_period = retention_period;
    m_retention_period_isSet = true;
}

bool OAICreateRuleRequest::is_retention_period_Set() const{
    return m_retention_period_isSet;
}

bool OAICreateRuleRequest::is_retention_period_Valid() const{
    return m_retention_period_isValid;
}

QString OAICreateRuleRequest::getDescription() const {
    return m_description;
}
void OAICreateRuleRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateRuleRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateRuleRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateRuleRequest::getTags() const {
    return m_tags;
}
void OAICreateRuleRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRuleRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRuleRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIResourceType OAICreateRuleRequest::getResourceType() const {
    return m_resource_type;
}
void OAICreateRuleRequest::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAICreateRuleRequest::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAICreateRuleRequest::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList OAICreateRuleRequest::getResourceTags() const {
    return m_resource_tags;
}
void OAICreateRuleRequest::setResourceTags(const QList &resource_tags) {
    m_resource_tags = resource_tags;
    m_resource_tags_isSet = true;
}

bool OAICreateRuleRequest::is_resource_tags_Set() const{
    return m_resource_tags_isSet;
}

bool OAICreateRuleRequest::is_resource_tags_Valid() const{
    return m_resource_tags_isValid;
}

OAICreateRuleResponse_LockConfiguration OAICreateRuleRequest::getLockConfiguration() const {
    return m_lock_configuration;
}
void OAICreateRuleRequest::setLockConfiguration(const OAICreateRuleResponse_LockConfiguration &lock_configuration) {
    m_lock_configuration = lock_configuration;
    m_lock_configuration_isSet = true;
}

bool OAICreateRuleRequest::is_lock_configuration_Set() const{
    return m_lock_configuration_isSet;
}

bool OAICreateRuleRequest::is_lock_configuration_Valid() const{
    return m_lock_configuration_isValid;
}

bool OAICreateRuleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_retention_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRuleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_retention_period_isValid && m_resource_type_isValid && true;
}

} // namespace OpenAPI
