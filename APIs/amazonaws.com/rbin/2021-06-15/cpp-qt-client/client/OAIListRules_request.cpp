/**
 * Amazon Recycle Bin
 * <p>This is the <i>Recycle Bin API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that enables you to restore accidentally deleted snapshots and EBS-backed AMIs. When using Recycle Bin, if your resources are deleted, they are retained in the Recycle Bin for a time period that you specify.</p> <p>You can restore a resource from the Recycle Bin at any time before its retention period expires. After you restore a resource from the Recycle Bin, the resource is removed from the Recycle Bin, and you can then use it in the same way you use any other resource of that type in your account. If the retention period expires and the resource is not restored, the resource is permanently deleted from the Recycle Bin and is no longer available for recovery. For more information about Recycle Bin, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-recycle-bin.html\"> Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRules_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRules_request::OAIListRules_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRules_request::OAIListRules_request() {
    this->initializeModel();
}

OAIListRules_request::~OAIListRules_request() {}

void OAIListRules_request::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_tags_isSet = false;
    m_resource_tags_isValid = false;

    m_lock_state_isSet = false;
    m_lock_state_isValid = false;
}

void OAIListRules_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRules_request::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_resource_tags_isValid = ::OpenAPI::fromJsonValue(m_resource_tags, json[QString("ResourceTags")]);
    m_resource_tags_isSet = !json[QString("ResourceTags")].isNull() && m_resource_tags_isValid;

    m_lock_state_isValid = ::OpenAPI::fromJsonValue(m_lock_state, json[QString("LockState")]);
    m_lock_state_isSet = !json[QString("LockState")].isNull() && m_lock_state_isValid;
}

QString OAIListRules_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRules_request::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_tags.size() > 0) {
        obj.insert(QString("ResourceTags"), ::OpenAPI::toJsonValue(m_resource_tags));
    }
    if (m_lock_state_isSet) {
        obj.insert(QString("LockState"), ::OpenAPI::toJsonValue(m_lock_state));
    }
    return obj;
}

qint32 OAIListRules_request::getMaxResults() const {
    return m_max_results;
}
void OAIListRules_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListRules_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListRules_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListRules_request::getNextToken() const {
    return m_next_token;
}
void OAIListRules_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRules_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRules_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIListRules_request::getResourceType() const {
    return m_resource_type;
}
void OAIListRules_request::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIListRules_request::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIListRules_request::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList<OAIResourceTag> OAIListRules_request::getResourceTags() const {
    return m_resource_tags;
}
void OAIListRules_request::setResourceTags(const QList<OAIResourceTag> &resource_tags) {
    m_resource_tags = resource_tags;
    m_resource_tags_isSet = true;
}

bool OAIListRules_request::is_resource_tags_Set() const{
    return m_resource_tags_isSet;
}

bool OAIListRules_request::is_resource_tags_Valid() const{
    return m_resource_tags_isValid;
}

QString OAIListRules_request::getLockState() const {
    return m_lock_state;
}
void OAIListRules_request::setLockState(const QString &lock_state) {
    m_lock_state = lock_state;
    m_lock_state_isSet = true;
}

bool OAIListRules_request::is_lock_state_Set() const{
    return m_lock_state_isSet;
}

bool OAIListRules_request::is_lock_state_Valid() const{
    return m_lock_state_isValid;
}

bool OAIListRules_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRules_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_type_isValid && true;
}

} // namespace OpenAPI
