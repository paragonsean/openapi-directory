/**
 * Amazon Recycle Bin
 * <p>This is the <i>Recycle Bin API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that enables you to restore accidentally deleted snapshots and EBS-backed AMIs. When using Recycle Bin, if your resources are deleted, they are retained in the Recycle Bin for a time period that you specify.</p> <p>You can restore a resource from the Recycle Bin at any time before its retention period expires. After you restore a resource from the Recycle Bin, the resource is removed from the Recycle Bin, and you can then use it in the same way you use any other resource of that type in your account. If the retention period expires and the resource is not restored, the resource is permanently deleted from the Recycle Bin and is no longer available for recovery. For more information about Recycle Bin, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-recycle-bin.html\"> Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRuleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRuleResponse::OAIUpdateRuleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRuleResponse::OAIUpdateRuleResponse() {
    this->initializeModel();
}

OAIUpdateRuleResponse::~OAIUpdateRuleResponse() {}

void OAIUpdateRuleResponse::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_retention_period_isSet = false;
    m_retention_period_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_tags_isSet = false;
    m_resource_tags_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_lock_state_isSet = false;
    m_lock_state_isValid = false;

    m_lock_end_time_isSet = false;
    m_lock_end_time_isValid = false;
}

void OAIUpdateRuleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRuleResponse::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;

    m_retention_period_isValid = ::OpenAPI::fromJsonValue(m_retention_period, json[QString("RetentionPeriod")]);
    m_retention_period_isSet = !json[QString("RetentionPeriod")].isNull() && m_retention_period_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_resource_tags_isValid = ::OpenAPI::fromJsonValue(m_resource_tags, json[QString("ResourceTags")]);
    m_resource_tags_isSet = !json[QString("ResourceTags")].isNull() && m_resource_tags_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_lock_state_isValid = ::OpenAPI::fromJsonValue(m_lock_state, json[QString("LockState")]);
    m_lock_state_isSet = !json[QString("LockState")].isNull() && m_lock_state_isValid;

    m_lock_end_time_isValid = ::OpenAPI::fromJsonValue(m_lock_end_time, json[QString("LockEndTime")]);
    m_lock_end_time_isSet = !json[QString("LockEndTime")].isNull() && m_lock_end_time_isValid;
}

QString OAIUpdateRuleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRuleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_retention_period.isSet()) {
        obj.insert(QString("RetentionPeriod"), ::OpenAPI::toJsonValue(m_retention_period));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_tags.isSet()) {
        obj.insert(QString("ResourceTags"), ::OpenAPI::toJsonValue(m_resource_tags));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_lock_state.isSet()) {
        obj.insert(QString("LockState"), ::OpenAPI::toJsonValue(m_lock_state));
    }
    if (m_lock_end_time_isSet) {
        obj.insert(QString("LockEndTime"), ::OpenAPI::toJsonValue(m_lock_end_time));
    }
    return obj;
}

QString OAIUpdateRuleResponse::getIdentifier() const {
    return m_identifier;
}
void OAIUpdateRuleResponse::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIUpdateRuleResponse::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIUpdateRuleResponse::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAIRetentionPeriod OAIUpdateRuleResponse::getRetentionPeriod() const {
    return m_retention_period;
}
void OAIUpdateRuleResponse::setRetentionPeriod(const OAIRetentionPeriod &retention_period) {
    m_retention_period = retention_period;
    m_retention_period_isSet = true;
}

bool OAIUpdateRuleResponse::is_retention_period_Set() const{
    return m_retention_period_isSet;
}

bool OAIUpdateRuleResponse::is_retention_period_Valid() const{
    return m_retention_period_isValid;
}

QString OAIUpdateRuleResponse::getDescription() const {
    return m_description;
}
void OAIUpdateRuleResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateRuleResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateRuleResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIResourceType OAIUpdateRuleResponse::getResourceType() const {
    return m_resource_type;
}
void OAIUpdateRuleResponse::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIUpdateRuleResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIUpdateRuleResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList OAIUpdateRuleResponse::getResourceTags() const {
    return m_resource_tags;
}
void OAIUpdateRuleResponse::setResourceTags(const QList &resource_tags) {
    m_resource_tags = resource_tags;
    m_resource_tags_isSet = true;
}

bool OAIUpdateRuleResponse::is_resource_tags_Set() const{
    return m_resource_tags_isSet;
}

bool OAIUpdateRuleResponse::is_resource_tags_Valid() const{
    return m_resource_tags_isValid;
}

OAIRuleStatus OAIUpdateRuleResponse::getStatus() const {
    return m_status;
}
void OAIUpdateRuleResponse::setStatus(const OAIRuleStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateRuleResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateRuleResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAILockState OAIUpdateRuleResponse::getLockState() const {
    return m_lock_state;
}
void OAIUpdateRuleResponse::setLockState(const OAILockState &lock_state) {
    m_lock_state = lock_state;
    m_lock_state_isSet = true;
}

bool OAIUpdateRuleResponse::is_lock_state_Set() const{
    return m_lock_state_isSet;
}

bool OAIUpdateRuleResponse::is_lock_state_Valid() const{
    return m_lock_state_isValid;
}

QDateTime OAIUpdateRuleResponse::getLockEndTime() const {
    return m_lock_end_time;
}
void OAIUpdateRuleResponse::setLockEndTime(const QDateTime &lock_end_time) {
    m_lock_end_time = lock_end_time;
    m_lock_end_time_isSet = true;
}

bool OAIUpdateRuleResponse::is_lock_end_time_Set() const{
    return m_lock_end_time_isSet;
}

bool OAIUpdateRuleResponse::is_lock_end_time_Valid() const{
    return m_lock_end_time_isValid;
}

bool OAIUpdateRuleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRuleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
