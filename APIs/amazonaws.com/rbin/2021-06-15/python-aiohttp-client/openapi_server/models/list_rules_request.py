# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_tag import ResourceTag
import re
from openapi_server import util


class ListRulesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, next_token: str=None, resource_type: str=None, resource_tags: List[ResourceTag]=None, lock_state: str=None):
        """ListRulesRequest - a model defined in OpenAPI

        :param max_results: The max_results of this ListRulesRequest.
        :param next_token: The next_token of this ListRulesRequest.
        :param resource_type: The resource_type of this ListRulesRequest.
        :param resource_tags: The resource_tags of this ListRulesRequest.
        :param lock_state: The lock_state of this ListRulesRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'next_token': str,
            'resource_type': str,
            'resource_tags': List[ResourceTag],
            'lock_state': str
        }

        self.attribute_map = {
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'resource_type': 'ResourceType',
            'resource_tags': 'ResourceTags',
            'lock_state': 'LockState'
        }

        self._max_results = max_results
        self._next_token = next_token
        self._resource_type = resource_type
        self._resource_tags = resource_tags
        self._lock_state = lock_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRulesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRules_request of this ListRulesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this ListRulesRequest.

        The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.

        :return: The max_results of this ListRulesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListRulesRequest.

        The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.

        :param max_results: The max_results of this ListRulesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListRulesRequest.

        The token for the next page of results.

        :return: The next_token of this ListRulesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListRulesRequest.

        The token for the next page of results.

        :param next_token: The next_token of this ListRulesRequest.
        :type next_token: str
        """
        if next_token is not None and not re.search(r'^[A-Za-z0-9+\/=]{1,2048}$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[A-Za-z0-9+\/=]{1,2048}$/`")

        self._next_token = next_token

    @property
    def resource_type(self):
        """Gets the resource_type of this ListRulesRequest.

        The resource type retained by the retention rule. Only retention rules that retain the specified resource type are listed. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To list retention rules that retain snapshots, specify <code>EBS_SNAPSHOT</code>. To list retention rules that retain EBS-backed AMIs, specify <code>EC2_IMAGE</code>.

        :return: The resource_type of this ListRulesRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ListRulesRequest.

        The resource type retained by the retention rule. Only retention rules that retain the specified resource type are listed. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To list retention rules that retain snapshots, specify <code>EBS_SNAPSHOT</code>. To list retention rules that retain EBS-backed AMIs, specify <code>EC2_IMAGE</code>.

        :param resource_type: The resource_type of this ListRulesRequest.
        :type resource_type: str
        """
        allowed_values = ["EBS_SNAPSHOT", "EC2_IMAGE"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def resource_tags(self):
        """Gets the resource_tags of this ListRulesRequest.

        Information about the resource tags used to identify resources that are retained by the retention rule.

        :return: The resource_tags of this ListRulesRequest.
        :rtype: List[ResourceTag]
        """
        return self._resource_tags

    @resource_tags.setter
    def resource_tags(self, resource_tags):
        """Sets the resource_tags of this ListRulesRequest.

        Information about the resource tags used to identify resources that are retained by the retention rule.

        :param resource_tags: The resource_tags of this ListRulesRequest.
        :type resource_tags: List[ResourceTag]
        """
        if resource_tags is not None and len(resource_tags) > 50:
            raise ValueError("Invalid value for `resource_tags`, number of items must be less than or equal to `50`")
        if resource_tags is not None and len(resource_tags) < 0:
            raise ValueError("Invalid value for `resource_tags`, number of items must be greater than or equal to `0`")

        self._resource_tags = resource_tags

    @property
    def lock_state(self):
        """Gets the lock_state of this ListRulesRequest.

        The lock state of the retention rules to list. Only retention rules with the specified lock state are returned.

        :return: The lock_state of this ListRulesRequest.
        :rtype: str
        """
        return self._lock_state

    @lock_state.setter
    def lock_state(self, lock_state):
        """Sets the lock_state of this ListRulesRequest.

        The lock state of the retention rules to list. Only retention rules with the specified lock state are returned.

        :param lock_state: The lock_state of this ListRulesRequest.
        :type lock_state: str
        """
        allowed_values = ["locked", "pending_unlock", "unlocked"]  # noqa: E501
        if lock_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lock_state` ({0}), must be one of {1}"
                .format(lock_state, allowed_values)
            )

        self._lock_state = lock_state
