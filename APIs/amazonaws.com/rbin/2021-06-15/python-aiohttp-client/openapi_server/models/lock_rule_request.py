# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_request_lock_configuration import CreateRuleRequestLockConfiguration
from openapi_server import util


class LockRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lock_configuration: CreateRuleRequestLockConfiguration=None):
        """LockRuleRequest - a model defined in OpenAPI

        :param lock_configuration: The lock_configuration of this LockRuleRequest.
        """
        self.openapi_types = {
            'lock_configuration': CreateRuleRequestLockConfiguration
        }

        self.attribute_map = {
            'lock_configuration': 'LockConfiguration'
        }

        self._lock_configuration = lock_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LockRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LockRule_request of this LockRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lock_configuration(self):
        """Gets the lock_configuration of this LockRuleRequest.


        :return: The lock_configuration of this LockRuleRequest.
        :rtype: CreateRuleRequestLockConfiguration
        """
        return self._lock_configuration

    @lock_configuration.setter
    def lock_configuration(self, lock_configuration):
        """Sets the lock_configuration of this LockRuleRequest.


        :param lock_configuration: The lock_configuration of this LockRuleRequest.
        :type lock_configuration: CreateRuleRequestLockConfiguration
        """
        if lock_configuration is None:
            raise ValueError("Invalid value for `lock_configuration`, must not be `None`")

        self._lock_configuration = lock_configuration
