# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_rule_response_retention_period import GetRuleResponseRetentionPeriod
from openapi_server.models.lock_state import LockState
from openapi_server import util


class RuleSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, description: str=None, retention_period: GetRuleResponseRetentionPeriod=None, lock_state: LockState=None):
        """RuleSummary - a model defined in OpenAPI

        :param identifier: The identifier of this RuleSummary.
        :param description: The description of this RuleSummary.
        :param retention_period: The retention_period of this RuleSummary.
        :param lock_state: The lock_state of this RuleSummary.
        """
        self.openapi_types = {
            'identifier': str,
            'description': str,
            'retention_period': GetRuleResponseRetentionPeriod,
            'lock_state': LockState
        }

        self.attribute_map = {
            'identifier': 'Identifier',
            'description': 'Description',
            'retention_period': 'RetentionPeriod',
            'lock_state': 'LockState'
        }

        self._identifier = identifier
        self._description = description
        self._retention_period = retention_period
        self._lock_state = lock_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleSummary of this RuleSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this RuleSummary.


        :return: The identifier of this RuleSummary.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this RuleSummary.


        :param identifier: The identifier of this RuleSummary.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def description(self):
        """Gets the description of this RuleSummary.


        :return: The description of this RuleSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RuleSummary.


        :param description: The description of this RuleSummary.
        :type description: str
        """

        self._description = description

    @property
    def retention_period(self):
        """Gets the retention_period of this RuleSummary.


        :return: The retention_period of this RuleSummary.
        :rtype: GetRuleResponseRetentionPeriod
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this RuleSummary.


        :param retention_period: The retention_period of this RuleSummary.
        :type retention_period: GetRuleResponseRetentionPeriod
        """

        self._retention_period = retention_period

    @property
    def lock_state(self):
        """Gets the lock_state of this RuleSummary.


        :return: The lock_state of this RuleSummary.
        :rtype: LockState
        """
        return self._lock_state

    @lock_state.setter
    def lock_state(self, lock_state):
        """Sets the lock_state of this RuleSummary.


        :param lock_state: The lock_state of this RuleSummary.
        :type lock_state: LockState
        """

        self._lock_state = lock_state
