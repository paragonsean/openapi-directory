# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_request_lock_configuration_unlock_delay import CreateRuleRequestLockConfigurationUnlockDelay
from openapi_server import util


class LockConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unlock_delay: CreateRuleRequestLockConfigurationUnlockDelay=None):
        """LockConfiguration - a model defined in OpenAPI

        :param unlock_delay: The unlock_delay of this LockConfiguration.
        """
        self.openapi_types = {
            'unlock_delay': CreateRuleRequestLockConfigurationUnlockDelay
        }

        self.attribute_map = {
            'unlock_delay': 'UnlockDelay'
        }

        self._unlock_delay = unlock_delay

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LockConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LockConfiguration of this LockConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unlock_delay(self):
        """Gets the unlock_delay of this LockConfiguration.


        :return: The unlock_delay of this LockConfiguration.
        :rtype: CreateRuleRequestLockConfigurationUnlockDelay
        """
        return self._unlock_delay

    @unlock_delay.setter
    def unlock_delay(self, unlock_delay):
        """Sets the unlock_delay of this LockConfiguration.


        :param unlock_delay: The unlock_delay of this LockConfiguration.
        :type unlock_delay: CreateRuleRequestLockConfigurationUnlockDelay
        """
        if unlock_delay is None:
            raise ValueError("Invalid value for `unlock_delay`, must not be `None`")

        self._unlock_delay = unlock_delay
