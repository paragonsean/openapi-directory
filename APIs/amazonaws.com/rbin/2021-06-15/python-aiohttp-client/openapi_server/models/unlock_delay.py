# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unlock_delay_unit import UnlockDelayUnit
from openapi_server import util


class UnlockDelay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unlock_delay_value: int=None, unlock_delay_unit: UnlockDelayUnit=None):
        """UnlockDelay - a model defined in OpenAPI

        :param unlock_delay_value: The unlock_delay_value of this UnlockDelay.
        :param unlock_delay_unit: The unlock_delay_unit of this UnlockDelay.
        """
        self.openapi_types = {
            'unlock_delay_value': int,
            'unlock_delay_unit': UnlockDelayUnit
        }

        self.attribute_map = {
            'unlock_delay_value': 'UnlockDelayValue',
            'unlock_delay_unit': 'UnlockDelayUnit'
        }

        self._unlock_delay_value = unlock_delay_value
        self._unlock_delay_unit = unlock_delay_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnlockDelay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnlockDelay of this UnlockDelay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unlock_delay_value(self):
        """Gets the unlock_delay_value of this UnlockDelay.


        :return: The unlock_delay_value of this UnlockDelay.
        :rtype: int
        """
        return self._unlock_delay_value

    @unlock_delay_value.setter
    def unlock_delay_value(self, unlock_delay_value):
        """Sets the unlock_delay_value of this UnlockDelay.


        :param unlock_delay_value: The unlock_delay_value of this UnlockDelay.
        :type unlock_delay_value: int
        """
        if unlock_delay_value is None:
            raise ValueError("Invalid value for `unlock_delay_value`, must not be `None`")

        self._unlock_delay_value = unlock_delay_value

    @property
    def unlock_delay_unit(self):
        """Gets the unlock_delay_unit of this UnlockDelay.


        :return: The unlock_delay_unit of this UnlockDelay.
        :rtype: UnlockDelayUnit
        """
        return self._unlock_delay_unit

    @unlock_delay_unit.setter
    def unlock_delay_unit(self, unlock_delay_unit):
        """Sets the unlock_delay_unit of this UnlockDelay.


        :param unlock_delay_unit: The unlock_delay_unit of this UnlockDelay.
        :type unlock_delay_unit: UnlockDelayUnit
        """
        if unlock_delay_unit is None:
            raise ValueError("Invalid value for `unlock_delay_unit`, must not be `None`")

        self._unlock_delay_unit = unlock_delay_unit
