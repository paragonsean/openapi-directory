# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_request_retention_period import CreateRuleRequestRetentionPeriod
from openapi_server.models.resource_tag import ResourceTag
import re
from openapi_server import util


class UpdateRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, retention_period: CreateRuleRequestRetentionPeriod=None, description: str=None, resource_type: str=None, resource_tags: List[ResourceTag]=None):
        """UpdateRuleRequest - a model defined in OpenAPI

        :param retention_period: The retention_period of this UpdateRuleRequest.
        :param description: The description of this UpdateRuleRequest.
        :param resource_type: The resource_type of this UpdateRuleRequest.
        :param resource_tags: The resource_tags of this UpdateRuleRequest.
        """
        self.openapi_types = {
            'retention_period': CreateRuleRequestRetentionPeriod,
            'description': str,
            'resource_type': str,
            'resource_tags': List[ResourceTag]
        }

        self.attribute_map = {
            'retention_period': 'RetentionPeriod',
            'description': 'Description',
            'resource_type': 'ResourceType',
            'resource_tags': 'ResourceTags'
        }

        self._retention_period = retention_period
        self._description = description
        self._resource_type = resource_type
        self._resource_tags = resource_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRule_request of this UpdateRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def retention_period(self):
        """Gets the retention_period of this UpdateRuleRequest.


        :return: The retention_period of this UpdateRuleRequest.
        :rtype: CreateRuleRequestRetentionPeriod
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this UpdateRuleRequest.


        :param retention_period: The retention_period of this UpdateRuleRequest.
        :type retention_period: CreateRuleRequestRetentionPeriod
        """

        self._retention_period = retention_period

    @property
    def description(self):
        """Gets the description of this UpdateRuleRequest.

        The retention rule description.

        :return: The description of this UpdateRuleRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateRuleRequest.

        The retention rule description.

        :param description: The description of this UpdateRuleRequest.
        :type description: str
        """
        if description is not None and not re.search(r'^[\S ]{0,255}$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[\S ]{0,255}$/`")

        self._description = description

    @property
    def resource_type(self):
        """Gets the resource_type of this UpdateRuleRequest.

        <note> <p>This parameter is currently not supported. You can't update a retention rule's resource type after creation.</p> </note>

        :return: The resource_type of this UpdateRuleRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this UpdateRuleRequest.

        <note> <p>This parameter is currently not supported. You can't update a retention rule's resource type after creation.</p> </note>

        :param resource_type: The resource_type of this UpdateRuleRequest.
        :type resource_type: str
        """
        allowed_values = ["EBS_SNAPSHOT", "EC2_IMAGE"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def resource_tags(self):
        """Gets the resource_tags of this UpdateRuleRequest.

        <p>Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. For tag-level retention rules, only deleted resources, of the specified resource type, that have one or more of the specified tag key and value pairs are retained. If a resource is deleted, but it does not have any of the specified tag key and value pairs, it is immediately deleted without being retained by the retention rule.</p> <p>You can add the same tag key and value pair to a maximum or five retention rules.</p> <p>To create a Region-level retention rule, omit this parameter. A Region-level retention rule does not have any resource tags specified. It retains all deleted resources of the specified resource type in the Region in which the rule is created, even if the resources are not tagged.</p>

        :return: The resource_tags of this UpdateRuleRequest.
        :rtype: List[ResourceTag]
        """
        return self._resource_tags

    @resource_tags.setter
    def resource_tags(self, resource_tags):
        """Sets the resource_tags of this UpdateRuleRequest.

        <p>Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. For tag-level retention rules, only deleted resources, of the specified resource type, that have one or more of the specified tag key and value pairs are retained. If a resource is deleted, but it does not have any of the specified tag key and value pairs, it is immediately deleted without being retained by the retention rule.</p> <p>You can add the same tag key and value pair to a maximum or five retention rules.</p> <p>To create a Region-level retention rule, omit this parameter. A Region-level retention rule does not have any resource tags specified. It retains all deleted resources of the specified resource type in the Region in which the rule is created, even if the resources are not tagged.</p>

        :param resource_tags: The resource_tags of this UpdateRuleRequest.
        :type resource_tags: List[ResourceTag]
        """
        if resource_tags is not None and len(resource_tags) > 50:
            raise ValueError("Invalid value for `resource_tags`, number of items must be less than or equal to `50`")
        if resource_tags is not None and len(resource_tags) < 0:
            raise ValueError("Invalid value for `resource_tags`, number of items must be greater than or equal to `0`")

        self._resource_tags = resource_tags
