# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_request_lock_configuration import CreateRuleRequestLockConfiguration
from openapi_server.models.create_rule_request_retention_period import CreateRuleRequestRetentionPeriod
from openapi_server.models.resource_tag import ResourceTag
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, retention_period: CreateRuleRequestRetentionPeriod=None, description: str=None, tags: List[Tag]=None, resource_type: str=None, resource_tags: List[ResourceTag]=None, lock_configuration: CreateRuleRequestLockConfiguration=None):
        """CreateRuleRequest - a model defined in OpenAPI

        :param retention_period: The retention_period of this CreateRuleRequest.
        :param description: The description of this CreateRuleRequest.
        :param tags: The tags of this CreateRuleRequest.
        :param resource_type: The resource_type of this CreateRuleRequest.
        :param resource_tags: The resource_tags of this CreateRuleRequest.
        :param lock_configuration: The lock_configuration of this CreateRuleRequest.
        """
        self.openapi_types = {
            'retention_period': CreateRuleRequestRetentionPeriod,
            'description': str,
            'tags': List[Tag],
            'resource_type': str,
            'resource_tags': List[ResourceTag],
            'lock_configuration': CreateRuleRequestLockConfiguration
        }

        self.attribute_map = {
            'retention_period': 'RetentionPeriod',
            'description': 'Description',
            'tags': 'Tags',
            'resource_type': 'ResourceType',
            'resource_tags': 'ResourceTags',
            'lock_configuration': 'LockConfiguration'
        }

        self._retention_period = retention_period
        self._description = description
        self._tags = tags
        self._resource_type = resource_type
        self._resource_tags = resource_tags
        self._lock_configuration = lock_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRule_request of this CreateRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def retention_period(self):
        """Gets the retention_period of this CreateRuleRequest.


        :return: The retention_period of this CreateRuleRequest.
        :rtype: CreateRuleRequestRetentionPeriod
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this CreateRuleRequest.


        :param retention_period: The retention_period of this CreateRuleRequest.
        :type retention_period: CreateRuleRequestRetentionPeriod
        """
        if retention_period is None:
            raise ValueError("Invalid value for `retention_period`, must not be `None`")

        self._retention_period = retention_period

    @property
    def description(self):
        """Gets the description of this CreateRuleRequest.

        The retention rule description.

        :return: The description of this CreateRuleRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateRuleRequest.

        The retention rule description.

        :param description: The description of this CreateRuleRequest.
        :type description: str
        """
        if description is not None and not re.search(r'^[\S ]{0,255}$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[\S ]{0,255}$/`")

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateRuleRequest.

        Information about the tags to assign to the retention rule.

        :return: The tags of this CreateRuleRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRuleRequest.

        Information about the tags to assign to the retention rule.

        :param tags: The tags of this CreateRuleRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def resource_type(self):
        """Gets the resource_type of this CreateRuleRequest.

        The resource type to be retained by the retention rule. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To retain snapshots, specify <code>EBS_SNAPSHOT</code>. To retain EBS-backed AMIs, specify <code>EC2_IMAGE</code>.

        :return: The resource_type of this CreateRuleRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CreateRuleRequest.

        The resource type to be retained by the retention rule. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To retain snapshots, specify <code>EBS_SNAPSHOT</code>. To retain EBS-backed AMIs, specify <code>EC2_IMAGE</code>.

        :param resource_type: The resource_type of this CreateRuleRequest.
        :type resource_type: str
        """
        allowed_values = ["EBS_SNAPSHOT", "EC2_IMAGE"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def resource_tags(self):
        """Gets the resource_tags of this CreateRuleRequest.

        <p>Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. For tag-level retention rules, only deleted resources, of the specified resource type, that have one or more of the specified tag key and value pairs are retained. If a resource is deleted, but it does not have any of the specified tag key and value pairs, it is immediately deleted without being retained by the retention rule.</p> <p>You can add the same tag key and value pair to a maximum or five retention rules.</p> <p>To create a Region-level retention rule, omit this parameter. A Region-level retention rule does not have any resource tags specified. It retains all deleted resources of the specified resource type in the Region in which the rule is created, even if the resources are not tagged.</p>

        :return: The resource_tags of this CreateRuleRequest.
        :rtype: List[ResourceTag]
        """
        return self._resource_tags

    @resource_tags.setter
    def resource_tags(self, resource_tags):
        """Sets the resource_tags of this CreateRuleRequest.

        <p>Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. For tag-level retention rules, only deleted resources, of the specified resource type, that have one or more of the specified tag key and value pairs are retained. If a resource is deleted, but it does not have any of the specified tag key and value pairs, it is immediately deleted without being retained by the retention rule.</p> <p>You can add the same tag key and value pair to a maximum or five retention rules.</p> <p>To create a Region-level retention rule, omit this parameter. A Region-level retention rule does not have any resource tags specified. It retains all deleted resources of the specified resource type in the Region in which the rule is created, even if the resources are not tagged.</p>

        :param resource_tags: The resource_tags of this CreateRuleRequest.
        :type resource_tags: List[ResourceTag]
        """
        if resource_tags is not None and len(resource_tags) > 50:
            raise ValueError("Invalid value for `resource_tags`, number of items must be less than or equal to `50`")
        if resource_tags is not None and len(resource_tags) < 0:
            raise ValueError("Invalid value for `resource_tags`, number of items must be greater than or equal to `0`")

        self._resource_tags = resource_tags

    @property
    def lock_configuration(self):
        """Gets the lock_configuration of this CreateRuleRequest.


        :return: The lock_configuration of this CreateRuleRequest.
        :rtype: CreateRuleRequestLockConfiguration
        """
        return self._lock_configuration

    @lock_configuration.setter
    def lock_configuration(self, lock_configuration):
        """Sets the lock_configuration of this CreateRuleRequest.


        :param lock_configuration: The lock_configuration of this CreateRuleRequest.
        :type lock_configuration: CreateRuleRequestLockConfiguration
        """

        self._lock_configuration = lock_configuration
