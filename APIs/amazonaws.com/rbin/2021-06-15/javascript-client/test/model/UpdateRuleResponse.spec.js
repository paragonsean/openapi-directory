/**
 * Amazon Recycle Bin
 * <p>This is the <i>Recycle Bin API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that enables you to restore accidentally deleted snapshots and EBS-backed AMIs. When using Recycle Bin, if your resources are deleted, they are retained in the Recycle Bin for a time period that you specify.</p> <p>You can restore a resource from the Recycle Bin at any time before its retention period expires. After you restore a resource from the Recycle Bin, the resource is removed from the Recycle Bin, and you can then use it in the same way you use any other resource of that type in your account. If the retention period expires and the resource is not restored, the resource is permanently deleted from the Recycle Bin and is no longer available for recovery. For more information about Recycle Bin, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-recycle-bin.html\"> Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonRecycleBin);
  }
}(this, function(expect, AmazonRecycleBin) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonRecycleBin.UpdateRuleResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateRuleResponse', function() {
    it('should create an instance of UpdateRuleResponse', function() {
      // uncomment below and update the code to test UpdateRuleResponse
      //var instance = new AmazonRecycleBin.UpdateRuleResponse();
      //expect(instance).to.be.a(AmazonRecycleBin.UpdateRuleResponse);
    });

    it('should have the property identifier (base name: "Identifier")', function() {
      // uncomment below and update the code to test the property identifier
      //var instance = new AmazonRecycleBin.UpdateRuleResponse();
      //expect(instance).to.be();
    });

    it('should have the property retentionPeriod (base name: "RetentionPeriod")', function() {
      // uncomment below and update the code to test the property retentionPeriod
      //var instance = new AmazonRecycleBin.UpdateRuleResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonRecycleBin.UpdateRuleResponse();
      //expect(instance).to.be();
    });

    it('should have the property resourceType (base name: "ResourceType")', function() {
      // uncomment below and update the code to test the property resourceType
      //var instance = new AmazonRecycleBin.UpdateRuleResponse();
      //expect(instance).to.be();
    });

    it('should have the property resourceTags (base name: "ResourceTags")', function() {
      // uncomment below and update the code to test the property resourceTags
      //var instance = new AmazonRecycleBin.UpdateRuleResponse();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonRecycleBin.UpdateRuleResponse();
      //expect(instance).to.be();
    });

    it('should have the property lockState (base name: "LockState")', function() {
      // uncomment below and update the code to test the property lockState
      //var instance = new AmazonRecycleBin.UpdateRuleResponse();
      //expect(instance).to.be();
    });

    it('should have the property lockEndTime (base name: "LockEndTime")', function() {
      // uncomment below and update the code to test the property lockEndTime
      //var instance = new AmazonRecycleBin.UpdateRuleResponse();
      //expect(instance).to.be();
    });

  });

}));
