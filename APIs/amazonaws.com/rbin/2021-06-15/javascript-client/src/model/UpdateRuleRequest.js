/**
 * Amazon Recycle Bin
 * <p>This is the <i>Recycle Bin API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that enables you to restore accidentally deleted snapshots and EBS-backed AMIs. When using Recycle Bin, if your resources are deleted, they are retained in the Recycle Bin for a time period that you specify.</p> <p>You can restore a resource from the Recycle Bin at any time before its retention period expires. After you restore a resource from the Recycle Bin, the resource is removed from the Recycle Bin, and you can then use it in the same way you use any other resource of that type in your account. If the retention period expires and the resource is not restored, the resource is permanently deleted from the Recycle Bin and is no longer available for recovery. For more information about Recycle Bin, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-recycle-bin.html\"> Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateRuleRequestRetentionPeriod from './CreateRuleRequestRetentionPeriod';
import ResourceTag from './ResourceTag';

/**
 * The UpdateRuleRequest model module.
 * @module model/UpdateRuleRequest
 * @version 2021-06-15
 */
class UpdateRuleRequest {
    /**
     * Constructs a new <code>UpdateRuleRequest</code>.
     * @alias module:model/UpdateRuleRequest
     */
    constructor() { 
        
        UpdateRuleRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateRuleRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateRuleRequest} obj Optional instance to populate.
     * @return {module:model/UpdateRuleRequest} The populated <code>UpdateRuleRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateRuleRequest();

            if (data.hasOwnProperty('RetentionPeriod')) {
                obj['RetentionPeriod'] = CreateRuleRequestRetentionPeriod.constructFromObject(data['RetentionPeriod']);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('ResourceType')) {
                obj['ResourceType'] = ApiClient.convertToType(data['ResourceType'], 'String');
            }
            if (data.hasOwnProperty('ResourceTags')) {
                obj['ResourceTags'] = ApiClient.convertToType(data['ResourceTags'], [ResourceTag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateRuleRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateRuleRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `RetentionPeriod`
        if (data['RetentionPeriod']) { // data not null
          CreateRuleRequestRetentionPeriod.validateJSON(data['RetentionPeriod']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['ResourceType'] && !(typeof data['ResourceType'] === 'string' || data['ResourceType'] instanceof String)) {
            throw new Error("Expected the field `ResourceType` to be a primitive type in the JSON string but got " + data['ResourceType']);
        }
        if (data['ResourceTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ResourceTags'])) {
                throw new Error("Expected the field `ResourceTags` to be an array in the JSON data but got " + data['ResourceTags']);
            }
            // validate the optional field `ResourceTags` (array)
            for (const item of data['ResourceTags']) {
                ResourceTag.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/CreateRuleRequestRetentionPeriod} RetentionPeriod
 */
UpdateRuleRequest.prototype['RetentionPeriod'] = undefined;

/**
 * The retention rule description.
 * @member {String} Description
 */
UpdateRuleRequest.prototype['Description'] = undefined;

/**
 * <note> <p>This parameter is currently not supported. You can't update a retention rule's resource type after creation.</p> </note>
 * @member {module:model/UpdateRuleRequest.ResourceTypeEnum} ResourceType
 */
UpdateRuleRequest.prototype['ResourceType'] = undefined;

/**
 * <p>Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. For tag-level retention rules, only deleted resources, of the specified resource type, that have one or more of the specified tag key and value pairs are retained. If a resource is deleted, but it does not have any of the specified tag key and value pairs, it is immediately deleted without being retained by the retention rule.</p> <p>You can add the same tag key and value pair to a maximum or five retention rules.</p> <p>To create a Region-level retention rule, omit this parameter. A Region-level retention rule does not have any resource tags specified. It retains all deleted resources of the specified resource type in the Region in which the rule is created, even if the resources are not tagged.</p>
 * @member {Array.<module:model/ResourceTag>} ResourceTags
 */
UpdateRuleRequest.prototype['ResourceTags'] = undefined;





/**
 * Allowed values for the <code>ResourceType</code> property.
 * @enum {String}
 * @readonly
 */
UpdateRuleRequest['ResourceTypeEnum'] = {

    /**
     * value: "EBS_SNAPSHOT"
     * @const
     */
    "EBS_SNAPSHOT": "EBS_SNAPSHOT",

    /**
     * value: "EC2_IMAGE"
     * @const
     */
    "EC2_IMAGE": "EC2_IMAGE"
};



export default UpdateRuleRequest;

