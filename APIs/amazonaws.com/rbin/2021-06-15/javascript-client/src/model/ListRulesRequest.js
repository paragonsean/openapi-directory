/**
 * Amazon Recycle Bin
 * <p>This is the <i>Recycle Bin API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that enables you to restore accidentally deleted snapshots and EBS-backed AMIs. When using Recycle Bin, if your resources are deleted, they are retained in the Recycle Bin for a time period that you specify.</p> <p>You can restore a resource from the Recycle Bin at any time before its retention period expires. After you restore a resource from the Recycle Bin, the resource is removed from the Recycle Bin, and you can then use it in the same way you use any other resource of that type in your account. If the retention period expires and the resource is not restored, the resource is permanently deleted from the Recycle Bin and is no longer available for recovery. For more information about Recycle Bin, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-recycle-bin.html\"> Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceTag from './ResourceTag';

/**
 * The ListRulesRequest model module.
 * @module model/ListRulesRequest
 * @version 2021-06-15
 */
class ListRulesRequest {
    /**
     * Constructs a new <code>ListRulesRequest</code>.
     * @alias module:model/ListRulesRequest
     * @param resourceType {module:model/ListRulesRequest.ResourceTypeEnum} The resource type retained by the retention rule. Only retention rules that retain the specified resource type are listed. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To list retention rules that retain snapshots, specify <code>EBS_SNAPSHOT</code>. To list retention rules that retain EBS-backed AMIs, specify <code>EC2_IMAGE</code>.
     */
    constructor(resourceType) { 
        
        ListRulesRequest.initialize(this, resourceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resourceType) { 
        obj['ResourceType'] = resourceType;
    }

    /**
     * Constructs a <code>ListRulesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListRulesRequest} obj Optional instance to populate.
     * @return {module:model/ListRulesRequest} The populated <code>ListRulesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListRulesRequest();

            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
            if (data.hasOwnProperty('ResourceType')) {
                obj['ResourceType'] = ApiClient.convertToType(data['ResourceType'], 'String');
            }
            if (data.hasOwnProperty('ResourceTags')) {
                obj['ResourceTags'] = ApiClient.convertToType(data['ResourceTags'], [ResourceTag]);
            }
            if (data.hasOwnProperty('LockState')) {
                obj['LockState'] = ApiClient.convertToType(data['LockState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListRulesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListRulesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListRulesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }
        // ensure the json data is a string
        if (data['ResourceType'] && !(typeof data['ResourceType'] === 'string' || data['ResourceType'] instanceof String)) {
            throw new Error("Expected the field `ResourceType` to be a primitive type in the JSON string but got " + data['ResourceType']);
        }
        if (data['ResourceTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ResourceTags'])) {
                throw new Error("Expected the field `ResourceTags` to be an array in the JSON data but got " + data['ResourceTags']);
            }
            // validate the optional field `ResourceTags` (array)
            for (const item of data['ResourceTags']) {
                ResourceTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['LockState'] && !(typeof data['LockState'] === 'string' || data['LockState'] instanceof String)) {
            throw new Error("Expected the field `LockState` to be a primitive type in the JSON string but got " + data['LockState']);
        }

        return true;
    }


}

ListRulesRequest.RequiredProperties = ["ResourceType"];

/**
 * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
 * @member {Number} MaxResults
 */
ListRulesRequest.prototype['MaxResults'] = undefined;

/**
 * The token for the next page of results.
 * @member {String} NextToken
 */
ListRulesRequest.prototype['NextToken'] = undefined;

/**
 * The resource type retained by the retention rule. Only retention rules that retain the specified resource type are listed. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To list retention rules that retain snapshots, specify <code>EBS_SNAPSHOT</code>. To list retention rules that retain EBS-backed AMIs, specify <code>EC2_IMAGE</code>.
 * @member {module:model/ListRulesRequest.ResourceTypeEnum} ResourceType
 */
ListRulesRequest.prototype['ResourceType'] = undefined;

/**
 * Information about the resource tags used to identify resources that are retained by the retention rule.
 * @member {Array.<module:model/ResourceTag>} ResourceTags
 */
ListRulesRequest.prototype['ResourceTags'] = undefined;

/**
 * The lock state of the retention rules to list. Only retention rules with the specified lock state are returned.
 * @member {module:model/ListRulesRequest.LockStateEnum} LockState
 */
ListRulesRequest.prototype['LockState'] = undefined;





/**
 * Allowed values for the <code>ResourceType</code> property.
 * @enum {String}
 * @readonly
 */
ListRulesRequest['ResourceTypeEnum'] = {

    /**
     * value: "EBS_SNAPSHOT"
     * @const
     */
    "EBS_SNAPSHOT": "EBS_SNAPSHOT",

    /**
     * value: "EC2_IMAGE"
     * @const
     */
    "EC2_IMAGE": "EC2_IMAGE"
};


/**
 * Allowed values for the <code>LockState</code> property.
 * @enum {String}
 * @readonly
 */
ListRulesRequest['LockStateEnum'] = {

    /**
     * value: "locked"
     * @const
     */
    "locked": "locked",

    /**
     * value: "pending_unlock"
     * @const
     */
    "pending_unlock": "pending_unlock",

    /**
     * value: "unlocked"
     * @const
     */
    "unlocked": "unlocked"
};



export default ListRulesRequest;

