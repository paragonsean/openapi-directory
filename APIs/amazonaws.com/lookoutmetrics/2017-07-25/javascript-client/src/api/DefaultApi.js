/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivateAnomalyDetectorRequest from '../model/ActivateAnomalyDetectorRequest';
import BackTestAnomalyDetectorRequest from '../model/BackTestAnomalyDetectorRequest';
import CreateAlertRequest from '../model/CreateAlertRequest';
import CreateAlertResponse from '../model/CreateAlertResponse';
import CreateAnomalyDetectorRequest from '../model/CreateAnomalyDetectorRequest';
import CreateAnomalyDetectorResponse from '../model/CreateAnomalyDetectorResponse';
import CreateMetricSetRequest from '../model/CreateMetricSetRequest';
import CreateMetricSetResponse from '../model/CreateMetricSetResponse';
import DeleteAlertRequest from '../model/DeleteAlertRequest';
import DeleteAnomalyDetectorRequest from '../model/DeleteAnomalyDetectorRequest';
import DescribeAlertRequest from '../model/DescribeAlertRequest';
import DescribeAlertResponse from '../model/DescribeAlertResponse';
import DescribeAnomalyDetectionExecutionsRequest from '../model/DescribeAnomalyDetectionExecutionsRequest';
import DescribeAnomalyDetectionExecutionsResponse from '../model/DescribeAnomalyDetectionExecutionsResponse';
import DescribeAnomalyDetectorRequest from '../model/DescribeAnomalyDetectorRequest';
import DescribeAnomalyDetectorResponse from '../model/DescribeAnomalyDetectorResponse';
import DescribeMetricSetRequest from '../model/DescribeMetricSetRequest';
import DescribeMetricSetResponse from '../model/DescribeMetricSetResponse';
import DetectMetricSetConfigRequest from '../model/DetectMetricSetConfigRequest';
import DetectMetricSetConfigResponse from '../model/DetectMetricSetConfigResponse';
import GetAnomalyGroupRequest from '../model/GetAnomalyGroupRequest';
import GetAnomalyGroupResponse from '../model/GetAnomalyGroupResponse';
import GetDataQualityMetricsRequest from '../model/GetDataQualityMetricsRequest';
import GetDataQualityMetricsResponse from '../model/GetDataQualityMetricsResponse';
import GetFeedbackRequest from '../model/GetFeedbackRequest';
import GetFeedbackResponse from '../model/GetFeedbackResponse';
import GetSampleDataRequest from '../model/GetSampleDataRequest';
import GetSampleDataResponse from '../model/GetSampleDataResponse';
import ListAlertsRequest from '../model/ListAlertsRequest';
import ListAlertsResponse from '../model/ListAlertsResponse';
import ListAnomalyDetectorsRequest from '../model/ListAnomalyDetectorsRequest';
import ListAnomalyDetectorsResponse from '../model/ListAnomalyDetectorsResponse';
import ListAnomalyGroupRelatedMetricsRequest from '../model/ListAnomalyGroupRelatedMetricsRequest';
import ListAnomalyGroupRelatedMetricsResponse from '../model/ListAnomalyGroupRelatedMetricsResponse';
import ListAnomalyGroupSummariesRequest from '../model/ListAnomalyGroupSummariesRequest';
import ListAnomalyGroupSummariesResponse from '../model/ListAnomalyGroupSummariesResponse';
import ListAnomalyGroupTimeSeriesRequest from '../model/ListAnomalyGroupTimeSeriesRequest';
import ListAnomalyGroupTimeSeriesResponse from '../model/ListAnomalyGroupTimeSeriesResponse';
import ListMetricSetsRequest from '../model/ListMetricSetsRequest';
import ListMetricSetsResponse from '../model/ListMetricSetsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutFeedbackRequest from '../model/PutFeedbackRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAlertRequest from '../model/UpdateAlertRequest';
import UpdateAlertResponse from '../model/UpdateAlertResponse';
import UpdateAnomalyDetectorRequest from '../model/UpdateAnomalyDetectorRequest';
import UpdateAnomalyDetectorResponse from '../model/UpdateAnomalyDetectorResponse';
import UpdateMetricSetRequest from '../model/UpdateMetricSetRequest';
import UpdateMetricSetResponse from '../model/UpdateMetricSetResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-07-25
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateAnomalyDetector operation.
     * @callback module:api/DefaultApi~activateAnomalyDetectorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates an anomaly detector.
     * @param {module:model/ActivateAnomalyDetectorRequest} activateAnomalyDetectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~activateAnomalyDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    activateAnomalyDetector(activateAnomalyDetectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = activateAnomalyDetectorRequest;
      // verify the required parameter 'activateAnomalyDetectorRequest' is set
      if (activateAnomalyDetectorRequest === undefined || activateAnomalyDetectorRequest === null) {
        throw new Error("Missing the required parameter 'activateAnomalyDetectorRequest' when calling activateAnomalyDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/ActivateAnomalyDetector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backTestAnomalyDetector operation.
     * @callback module:api/DefaultApi~backTestAnomalyDetectorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs a backtest for anomaly detection for the specified resource.
     * @param {module:model/BackTestAnomalyDetectorRequest} backTestAnomalyDetectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~backTestAnomalyDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    backTestAnomalyDetector(backTestAnomalyDetectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = backTestAnomalyDetectorRequest;
      // verify the required parameter 'backTestAnomalyDetectorRequest' is set
      if (backTestAnomalyDetectorRequest === undefined || backTestAnomalyDetectorRequest === null) {
        throw new Error("Missing the required parameter 'backTestAnomalyDetectorRequest' when calling backTestAnomalyDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/BackTestAnomalyDetector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAlert operation.
     * @callback module:api/DefaultApi~createAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAlertResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an alert for an anomaly detector.
     * @param {module:model/CreateAlertRequest} createAlertRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAlertResponse}
     */
    createAlert(createAlertRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAlertRequest;
      // verify the required parameter 'createAlertRequest' is set
      if (createAlertRequest === undefined || createAlertRequest === null) {
        throw new Error("Missing the required parameter 'createAlertRequest' when calling createAlert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAlertResponse;
      return this.apiClient.callApi(
        '/CreateAlert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnomalyDetector operation.
     * @callback module:api/DefaultApi~createAnomalyDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAnomalyDetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an anomaly detector.
     * @param {module:model/CreateAnomalyDetectorRequest} createAnomalyDetectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAnomalyDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAnomalyDetectorResponse}
     */
    createAnomalyDetector(createAnomalyDetectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAnomalyDetectorRequest;
      // verify the required parameter 'createAnomalyDetectorRequest' is set
      if (createAnomalyDetectorRequest === undefined || createAnomalyDetectorRequest === null) {
        throw new Error("Missing the required parameter 'createAnomalyDetectorRequest' when calling createAnomalyDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAnomalyDetectorResponse;
      return this.apiClient.callApi(
        '/CreateAnomalyDetector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMetricSet operation.
     * @callback module:api/DefaultApi~createMetricSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMetricSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a dataset.
     * @param {module:model/CreateMetricSetRequest} createMetricSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMetricSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMetricSetResponse}
     */
    createMetricSet(createMetricSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMetricSetRequest;
      // verify the required parameter 'createMetricSetRequest' is set
      if (createMetricSetRequest === undefined || createMetricSetRequest === null) {
        throw new Error("Missing the required parameter 'createMetricSetRequest' when calling createMetricSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMetricSetResponse;
      return this.apiClient.callApi(
        '/CreateMetricSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateAnomalyDetector operation.
     * @callback module:api/DefaultApi~deactivateAnomalyDetectorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivates an anomaly detector.
     * @param {module:model/BackTestAnomalyDetectorRequest} backTestAnomalyDetectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deactivateAnomalyDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deactivateAnomalyDetector(backTestAnomalyDetectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = backTestAnomalyDetectorRequest;
      // verify the required parameter 'backTestAnomalyDetectorRequest' is set
      if (backTestAnomalyDetectorRequest === undefined || backTestAnomalyDetectorRequest === null) {
        throw new Error("Missing the required parameter 'backTestAnomalyDetectorRequest' when calling deactivateAnomalyDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeactivateAnomalyDetector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlert operation.
     * @callback module:api/DefaultApi~deleteAlertCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an alert.
     * @param {module:model/DeleteAlertRequest} deleteAlertRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAlert(deleteAlertRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAlertRequest;
      // verify the required parameter 'deleteAlertRequest' is set
      if (deleteAlertRequest === undefined || deleteAlertRequest === null) {
        throw new Error("Missing the required parameter 'deleteAlertRequest' when calling deleteAlert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteAlert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAnomalyDetector operation.
     * @callback module:api/DefaultApi~deleteAnomalyDetectorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a detector. Deleting an anomaly detector will delete all of its corresponding resources including any configured datasets and alerts.
     * @param {module:model/DeleteAnomalyDetectorRequest} deleteAnomalyDetectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAnomalyDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAnomalyDetector(deleteAnomalyDetectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAnomalyDetectorRequest;
      // verify the required parameter 'deleteAnomalyDetectorRequest' is set
      if (deleteAnomalyDetectorRequest === undefined || deleteAnomalyDetectorRequest === null) {
        throw new Error("Missing the required parameter 'deleteAnomalyDetectorRequest' when calling deleteAnomalyDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteAnomalyDetector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAlert operation.
     * @callback module:api/DefaultApi~describeAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAlertResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes an alert.</p> <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
     * @param {module:model/DescribeAlertRequest} describeAlertRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAlertResponse}
     */
    describeAlert(describeAlertRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAlertRequest;
      // verify the required parameter 'describeAlertRequest' is set
      if (describeAlertRequest === undefined || describeAlertRequest === null) {
        throw new Error("Missing the required parameter 'describeAlertRequest' when calling describeAlert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAlertResponse;
      return this.apiClient.callApi(
        '/DescribeAlert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAnomalyDetectionExecutions operation.
     * @callback module:api/DefaultApi~describeAnomalyDetectionExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAnomalyDetectionExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the status of the specified anomaly detection jobs.
     * @param {module:model/DescribeAnomalyDetectionExecutionsRequest} describeAnomalyDetectionExecutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeAnomalyDetectionExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAnomalyDetectionExecutionsResponse}
     */
    describeAnomalyDetectionExecutions(describeAnomalyDetectionExecutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAnomalyDetectionExecutionsRequest;
      // verify the required parameter 'describeAnomalyDetectionExecutionsRequest' is set
      if (describeAnomalyDetectionExecutionsRequest === undefined || describeAnomalyDetectionExecutionsRequest === null) {
        throw new Error("Missing the required parameter 'describeAnomalyDetectionExecutionsRequest' when calling describeAnomalyDetectionExecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAnomalyDetectionExecutionsResponse;
      return this.apiClient.callApi(
        '/DescribeAnomalyDetectionExecutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAnomalyDetector operation.
     * @callback module:api/DefaultApi~describeAnomalyDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAnomalyDetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a detector.</p> <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
     * @param {module:model/DescribeAnomalyDetectorRequest} describeAnomalyDetectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAnomalyDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAnomalyDetectorResponse}
     */
    describeAnomalyDetector(describeAnomalyDetectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAnomalyDetectorRequest;
      // verify the required parameter 'describeAnomalyDetectorRequest' is set
      if (describeAnomalyDetectorRequest === undefined || describeAnomalyDetectorRequest === null) {
        throw new Error("Missing the required parameter 'describeAnomalyDetectorRequest' when calling describeAnomalyDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAnomalyDetectorResponse;
      return this.apiClient.callApi(
        '/DescribeAnomalyDetector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeMetricSet operation.
     * @callback module:api/DefaultApi~describeMetricSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeMetricSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a dataset.</p> <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
     * @param {module:model/DescribeMetricSetRequest} describeMetricSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeMetricSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeMetricSetResponse}
     */
    describeMetricSet(describeMetricSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeMetricSetRequest;
      // verify the required parameter 'describeMetricSetRequest' is set
      if (describeMetricSetRequest === undefined || describeMetricSetRequest === null) {
        throw new Error("Missing the required parameter 'describeMetricSetRequest' when calling describeMetricSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeMetricSetResponse;
      return this.apiClient.callApi(
        '/DescribeMetricSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectMetricSetConfig operation.
     * @callback module:api/DefaultApi~detectMetricSetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectMetricSetConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detects an Amazon S3 dataset's file format, interval, and offset.
     * @param {module:model/DetectMetricSetConfigRequest} detectMetricSetConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~detectMetricSetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectMetricSetConfigResponse}
     */
    detectMetricSetConfig(detectMetricSetConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = detectMetricSetConfigRequest;
      // verify the required parameter 'detectMetricSetConfigRequest' is set
      if (detectMetricSetConfigRequest === undefined || detectMetricSetConfigRequest === null) {
        throw new Error("Missing the required parameter 'detectMetricSetConfigRequest' when calling detectMetricSetConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DetectMetricSetConfigResponse;
      return this.apiClient.callApi(
        '/DetectMetricSetConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnomalyGroup operation.
     * @callback module:api/DefaultApi~getAnomalyGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAnomalyGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details about a group of anomalous metrics.
     * @param {module:model/GetAnomalyGroupRequest} getAnomalyGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAnomalyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAnomalyGroupResponse}
     */
    getAnomalyGroup(getAnomalyGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAnomalyGroupRequest;
      // verify the required parameter 'getAnomalyGroupRequest' is set
      if (getAnomalyGroupRequest === undefined || getAnomalyGroupRequest === null) {
        throw new Error("Missing the required parameter 'getAnomalyGroupRequest' when calling getAnomalyGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAnomalyGroupResponse;
      return this.apiClient.callApi(
        '/GetAnomalyGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataQualityMetrics operation.
     * @callback module:api/DefaultApi~getDataQualityMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataQualityMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details about the requested data quality metrics.
     * @param {module:model/GetDataQualityMetricsRequest} getDataQualityMetricsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDataQualityMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataQualityMetricsResponse}
     */
    getDataQualityMetrics(getDataQualityMetricsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDataQualityMetricsRequest;
      // verify the required parameter 'getDataQualityMetricsRequest' is set
      if (getDataQualityMetricsRequest === undefined || getDataQualityMetricsRequest === null) {
        throw new Error("Missing the required parameter 'getDataQualityMetricsRequest' when calling getDataQualityMetrics");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataQualityMetricsResponse;
      return this.apiClient.callApi(
        '/GetDataQualityMetrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedback operation.
     * @callback module:api/DefaultApi~getFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeedbackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get feedback for an anomaly group.
     * @param {module:model/GetFeedbackRequest} getFeedbackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeedbackResponse}
     */
    getFeedback(getFeedbackRequest, opts, callback) {
      opts = opts || {};
      let postBody = getFeedbackRequest;
      // verify the required parameter 'getFeedbackRequest' is set
      if (getFeedbackRequest === undefined || getFeedbackRequest === null) {
        throw new Error("Missing the required parameter 'getFeedbackRequest' when calling getFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFeedbackResponse;
      return this.apiClient.callApi(
        '/GetFeedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSampleData operation.
     * @callback module:api/DefaultApi~getSampleDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSampleDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a selection of sample records from an Amazon S3 datasource.
     * @param {module:model/GetSampleDataRequest} getSampleDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSampleDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSampleDataResponse}
     */
    getSampleData(getSampleDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSampleDataRequest;
      // verify the required parameter 'getSampleDataRequest' is set
      if (getSampleDataRequest === undefined || getSampleDataRequest === null) {
        throw new Error("Missing the required parameter 'getSampleDataRequest' when calling getSampleData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSampleDataResponse;
      return this.apiClient.callApi(
        '/GetSampleData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAlerts operation.
     * @callback module:api/DefaultApi~listAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAlertsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the alerts attached to a detector.</p> <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
     * @param {module:model/ListAlertsRequest} listAlertsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAlertsResponse}
     */
    listAlerts(listAlertsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAlertsRequest;
      // verify the required parameter 'listAlertsRequest' is set
      if (listAlertsRequest === undefined || listAlertsRequest === null) {
        throw new Error("Missing the required parameter 'listAlertsRequest' when calling listAlerts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAlertsResponse;
      return this.apiClient.callApi(
        '/ListAlerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnomalyDetectors operation.
     * @callback module:api/DefaultApi~listAnomalyDetectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnomalyDetectorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the detectors in the current AWS Region.</p> <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
     * @param {module:model/ListAnomalyDetectorsRequest} listAnomalyDetectorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAnomalyDetectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnomalyDetectorsResponse}
     */
    listAnomalyDetectors(listAnomalyDetectorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAnomalyDetectorsRequest;
      // verify the required parameter 'listAnomalyDetectorsRequest' is set
      if (listAnomalyDetectorsRequest === undefined || listAnomalyDetectorsRequest === null) {
        throw new Error("Missing the required parameter 'listAnomalyDetectorsRequest' when calling listAnomalyDetectors");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAnomalyDetectorsResponse;
      return this.apiClient.callApi(
        '/ListAnomalyDetectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnomalyGroupRelatedMetrics operation.
     * @callback module:api/DefaultApi~listAnomalyGroupRelatedMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnomalyGroupRelatedMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of measures that are potential causes or effects of an anomaly group.
     * @param {module:model/ListAnomalyGroupRelatedMetricsRequest} listAnomalyGroupRelatedMetricsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAnomalyGroupRelatedMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnomalyGroupRelatedMetricsResponse}
     */
    listAnomalyGroupRelatedMetrics(listAnomalyGroupRelatedMetricsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAnomalyGroupRelatedMetricsRequest;
      // verify the required parameter 'listAnomalyGroupRelatedMetricsRequest' is set
      if (listAnomalyGroupRelatedMetricsRequest === undefined || listAnomalyGroupRelatedMetricsRequest === null) {
        throw new Error("Missing the required parameter 'listAnomalyGroupRelatedMetricsRequest' when calling listAnomalyGroupRelatedMetrics");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAnomalyGroupRelatedMetricsResponse;
      return this.apiClient.callApi(
        '/ListAnomalyGroupRelatedMetrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnomalyGroupSummaries operation.
     * @callback module:api/DefaultApi~listAnomalyGroupSummariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnomalyGroupSummariesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of anomaly groups.
     * @param {module:model/ListAnomalyGroupSummariesRequest} listAnomalyGroupSummariesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAnomalyGroupSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnomalyGroupSummariesResponse}
     */
    listAnomalyGroupSummaries(listAnomalyGroupSummariesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAnomalyGroupSummariesRequest;
      // verify the required parameter 'listAnomalyGroupSummariesRequest' is set
      if (listAnomalyGroupSummariesRequest === undefined || listAnomalyGroupSummariesRequest === null) {
        throw new Error("Missing the required parameter 'listAnomalyGroupSummariesRequest' when calling listAnomalyGroupSummaries");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAnomalyGroupSummariesResponse;
      return this.apiClient.callApi(
        '/ListAnomalyGroupSummaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnomalyGroupTimeSeries operation.
     * @callback module:api/DefaultApi~listAnomalyGroupTimeSeriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnomalyGroupTimeSeriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of anomalous metrics for a measure in an anomaly group.
     * @param {module:model/ListAnomalyGroupTimeSeriesRequest} listAnomalyGroupTimeSeriesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAnomalyGroupTimeSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnomalyGroupTimeSeriesResponse}
     */
    listAnomalyGroupTimeSeries(listAnomalyGroupTimeSeriesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAnomalyGroupTimeSeriesRequest;
      // verify the required parameter 'listAnomalyGroupTimeSeriesRequest' is set
      if (listAnomalyGroupTimeSeriesRequest === undefined || listAnomalyGroupTimeSeriesRequest === null) {
        throw new Error("Missing the required parameter 'listAnomalyGroupTimeSeriesRequest' when calling listAnomalyGroupTimeSeries");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAnomalyGroupTimeSeriesResponse;
      return this.apiClient.callApi(
        '/ListAnomalyGroupTimeSeries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMetricSets operation.
     * @callback module:api/DefaultApi~listMetricSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMetricSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the datasets in the current AWS Region.</p> <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
     * @param {module:model/ListMetricSetsRequest} listMetricSetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMetricSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMetricSetsResponse}
     */
    listMetricSets(listMetricSetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMetricSetsRequest;
      // verify the required parameter 'listMetricSetsRequest' is set
      if (listMetricSetsRequest === undefined || listMetricSetsRequest === null) {
        throw new Error("Missing the required parameter 'listMetricSetsRequest' when calling listMetricSets");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMetricSetsResponse;
      return this.apiClient.callApi(
        '/ListMetricSets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> for a detector, dataset, or alert.
     * @param {String} resourceArn The resource's Amazon Resource Name (ARN).
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putFeedback operation.
     * @callback module:api/DefaultApi~putFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add feedback for an anomalous metric.
     * @param {module:model/PutFeedbackRequest} putFeedbackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putFeedback(putFeedbackRequest, opts, callback) {
      opts = opts || {};
      let postBody = putFeedbackRequest;
      // verify the required parameter 'putFeedbackRequest' is set
      if (putFeedbackRequest === undefined || putFeedbackRequest === null) {
        throw new Error("Missing the required parameter 'putFeedbackRequest' when calling putFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/PutFeedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> to a detector, dataset, or alert.
     * @param {String} resourceArn The resource's Amazon Resource Name (ARN).
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> from a detector, dataset, or alert.
     * @param {String} resourceArn The resource's Amazon Resource Name (ARN).
     * @param {Array.<String>} tagKeys Keys to remove from the resource's tags.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAlert operation.
     * @callback module:api/DefaultApi~updateAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAlertResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make changes to an existing alert.
     * @param {module:model/UpdateAlertRequest} updateAlertRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAlertResponse}
     */
    updateAlert(updateAlertRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAlertRequest;
      // verify the required parameter 'updateAlertRequest' is set
      if (updateAlertRequest === undefined || updateAlertRequest === null) {
        throw new Error("Missing the required parameter 'updateAlertRequest' when calling updateAlert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAlertResponse;
      return this.apiClient.callApi(
        '/UpdateAlert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnomalyDetector operation.
     * @callback module:api/DefaultApi~updateAnomalyDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAnomalyDetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a detector. After activation, you can only change a detector's ingestion delay and description.
     * @param {module:model/UpdateAnomalyDetectorRequest} updateAnomalyDetectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAnomalyDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAnomalyDetectorResponse}
     */
    updateAnomalyDetector(updateAnomalyDetectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAnomalyDetectorRequest;
      // verify the required parameter 'updateAnomalyDetectorRequest' is set
      if (updateAnomalyDetectorRequest === undefined || updateAnomalyDetectorRequest === null) {
        throw new Error("Missing the required parameter 'updateAnomalyDetectorRequest' when calling updateAnomalyDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAnomalyDetectorResponse;
      return this.apiClient.callApi(
        '/UpdateAnomalyDetector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMetricSet operation.
     * @callback module:api/DefaultApi~updateMetricSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMetricSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a dataset.
     * @param {module:model/UpdateMetricSetRequest} updateMetricSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMetricSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMetricSetResponse}
     */
    updateMetricSet(updateMetricSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMetricSetRequest;
      // verify the required parameter 'updateMetricSetRequest' is set
      if (updateMetricSetRequest === undefined || updateMetricSetRequest === null) {
        throw new Error("Missing the required parameter 'updateMetricSetRequest' when calling updateMetricSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMetricSetResponse;
      return this.apiClient.callApi(
        '/UpdateMetricSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
