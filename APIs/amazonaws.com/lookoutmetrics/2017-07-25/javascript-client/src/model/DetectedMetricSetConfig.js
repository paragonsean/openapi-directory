/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DetectedMetricSetConfigMetricSetFrequency from './DetectedMetricSetConfigMetricSetFrequency';
import DetectedMetricSetConfigMetricSource from './DetectedMetricSetConfigMetricSource';
import DetectedMetricSetConfigOffset from './DetectedMetricSetConfigOffset';

/**
 * The DetectedMetricSetConfig model module.
 * @module model/DetectedMetricSetConfig
 * @version 2017-07-25
 */
class DetectedMetricSetConfig {
    /**
     * Constructs a new <code>DetectedMetricSetConfig</code>.
     * An inferred dataset configuration.
     * @alias module:model/DetectedMetricSetConfig
     */
    constructor() { 
        
        DetectedMetricSetConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DetectedMetricSetConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DetectedMetricSetConfig} obj Optional instance to populate.
     * @return {module:model/DetectedMetricSetConfig} The populated <code>DetectedMetricSetConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DetectedMetricSetConfig();

            if (data.hasOwnProperty('Offset')) {
                obj['Offset'] = DetectedMetricSetConfigOffset.constructFromObject(data['Offset']);
            }
            if (data.hasOwnProperty('MetricSetFrequency')) {
                obj['MetricSetFrequency'] = DetectedMetricSetConfigMetricSetFrequency.constructFromObject(data['MetricSetFrequency']);
            }
            if (data.hasOwnProperty('MetricSource')) {
                obj['MetricSource'] = DetectedMetricSetConfigMetricSource.constructFromObject(data['MetricSource']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DetectedMetricSetConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DetectedMetricSetConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Offset`
        if (data['Offset']) { // data not null
          DetectedMetricSetConfigOffset.validateJSON(data['Offset']);
        }
        // validate the optional field `MetricSetFrequency`
        if (data['MetricSetFrequency']) { // data not null
          DetectedMetricSetConfigMetricSetFrequency.validateJSON(data['MetricSetFrequency']);
        }
        // validate the optional field `MetricSource`
        if (data['MetricSource']) { // data not null
          DetectedMetricSetConfigMetricSource.validateJSON(data['MetricSource']);
        }

        return true;
    }


}



/**
 * @member {module:model/DetectedMetricSetConfigOffset} Offset
 */
DetectedMetricSetConfig.prototype['Offset'] = undefined;

/**
 * @member {module:model/DetectedMetricSetConfigMetricSetFrequency} MetricSetFrequency
 */
DetectedMetricSetConfig.prototype['MetricSetFrequency'] = undefined;

/**
 * @member {module:model/DetectedMetricSetConfigMetricSource} MetricSource
 */
DetectedMetricSetConfig.prototype['MetricSource'] = undefined;






export default DetectedMetricSetConfig;

