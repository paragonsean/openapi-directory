/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DescribeMetricSetResponseMetricSource from './DescribeMetricSetResponseMetricSource';
import DescribeMetricSetResponseTimestampColumn from './DescribeMetricSetResponseTimestampColumn';
import Frequency from './Frequency';

/**
 * The DescribeMetricSetResponse model module.
 * @module model/DescribeMetricSetResponse
 * @version 2017-07-25
 */
class DescribeMetricSetResponse {
    /**
     * Constructs a new <code>DescribeMetricSetResponse</code>.
     * @alias module:model/DescribeMetricSetResponse
     */
    constructor() { 
        
        DescribeMetricSetResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeMetricSetResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeMetricSetResponse} obj Optional instance to populate.
     * @return {module:model/DescribeMetricSetResponse} The populated <code>DescribeMetricSetResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeMetricSetResponse();

            if (data.hasOwnProperty('MetricSetArn')) {
                obj['MetricSetArn'] = ApiClient.convertToType(data['MetricSetArn'], 'String');
            }
            if (data.hasOwnProperty('AnomalyDetectorArn')) {
                obj['AnomalyDetectorArn'] = ApiClient.convertToType(data['AnomalyDetectorArn'], 'String');
            }
            if (data.hasOwnProperty('MetricSetName')) {
                obj['MetricSetName'] = ApiClient.convertToType(data['MetricSetName'], 'String');
            }
            if (data.hasOwnProperty('MetricSetDescription')) {
                obj['MetricSetDescription'] = ApiClient.convertToType(data['MetricSetDescription'], 'String');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('LastModificationTime')) {
                obj['LastModificationTime'] = ApiClient.convertToType(data['LastModificationTime'], 'Date');
            }
            if (data.hasOwnProperty('Offset')) {
                obj['Offset'] = ApiClient.convertToType(data['Offset'], 'Number');
            }
            if (data.hasOwnProperty('MetricList')) {
                obj['MetricList'] = ApiClient.convertToType(data['MetricList'], Array);
            }
            if (data.hasOwnProperty('TimestampColumn')) {
                obj['TimestampColumn'] = DescribeMetricSetResponseTimestampColumn.constructFromObject(data['TimestampColumn']);
            }
            if (data.hasOwnProperty('DimensionList')) {
                obj['DimensionList'] = ApiClient.convertToType(data['DimensionList'], Array);
            }
            if (data.hasOwnProperty('MetricSetFrequency')) {
                obj['MetricSetFrequency'] = ApiClient.convertToType(data['MetricSetFrequency'], Frequency);
            }
            if (data.hasOwnProperty('Timezone')) {
                obj['Timezone'] = ApiClient.convertToType(data['Timezone'], 'String');
            }
            if (data.hasOwnProperty('MetricSource')) {
                obj['MetricSource'] = DescribeMetricSetResponseMetricSource.constructFromObject(data['MetricSource']);
            }
            if (data.hasOwnProperty('DimensionFilterList')) {
                obj['DimensionFilterList'] = ApiClient.convertToType(data['DimensionFilterList'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeMetricSetResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeMetricSetResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `MetricSetArn`
        if (data['MetricSetArn']) { // data not null
          String.validateJSON(data['MetricSetArn']);
        }
        // validate the optional field `AnomalyDetectorArn`
        if (data['AnomalyDetectorArn']) { // data not null
          String.validateJSON(data['AnomalyDetectorArn']);
        }
        // validate the optional field `MetricSetName`
        if (data['MetricSetName']) { // data not null
          String.validateJSON(data['MetricSetName']);
        }
        // validate the optional field `MetricSetDescription`
        if (data['MetricSetDescription']) { // data not null
          String.validateJSON(data['MetricSetDescription']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `LastModificationTime`
        if (data['LastModificationTime']) { // data not null
          Date.validateJSON(data['LastModificationTime']);
        }
        // validate the optional field `Offset`
        if (data['Offset']) { // data not null
          Number.validateJSON(data['Offset']);
        }
        // validate the optional field `MetricList`
        if (data['MetricList']) { // data not null
          Array.validateJSON(data['MetricList']);
        }
        // validate the optional field `TimestampColumn`
        if (data['TimestampColumn']) { // data not null
          DescribeMetricSetResponseTimestampColumn.validateJSON(data['TimestampColumn']);
        }
        // validate the optional field `DimensionList`
        if (data['DimensionList']) { // data not null
          Array.validateJSON(data['DimensionList']);
        }
        // validate the optional field `MetricSetFrequency`
        if (data['MetricSetFrequency']) { // data not null
          Frequency.validateJSON(data['MetricSetFrequency']);
        }
        // validate the optional field `Timezone`
        if (data['Timezone']) { // data not null
          String.validateJSON(data['Timezone']);
        }
        // validate the optional field `MetricSource`
        if (data['MetricSource']) { // data not null
          DescribeMetricSetResponseMetricSource.validateJSON(data['MetricSource']);
        }
        // validate the optional field `DimensionFilterList`
        if (data['DimensionFilterList']) { // data not null
          Array.validateJSON(data['DimensionFilterList']);
        }

        return true;
    }


}



/**
 * @member {String} MetricSetArn
 */
DescribeMetricSetResponse.prototype['MetricSetArn'] = undefined;

/**
 * @member {String} AnomalyDetectorArn
 */
DescribeMetricSetResponse.prototype['AnomalyDetectorArn'] = undefined;

/**
 * @member {String} MetricSetName
 */
DescribeMetricSetResponse.prototype['MetricSetName'] = undefined;

/**
 * @member {String} MetricSetDescription
 */
DescribeMetricSetResponse.prototype['MetricSetDescription'] = undefined;

/**
 * @member {Date} CreationTime
 */
DescribeMetricSetResponse.prototype['CreationTime'] = undefined;

/**
 * @member {Date} LastModificationTime
 */
DescribeMetricSetResponse.prototype['LastModificationTime'] = undefined;

/**
 * @member {Number} Offset
 */
DescribeMetricSetResponse.prototype['Offset'] = undefined;

/**
 * @member {Array} MetricList
 */
DescribeMetricSetResponse.prototype['MetricList'] = undefined;

/**
 * @member {module:model/DescribeMetricSetResponseTimestampColumn} TimestampColumn
 */
DescribeMetricSetResponse.prototype['TimestampColumn'] = undefined;

/**
 * @member {Array} DimensionList
 */
DescribeMetricSetResponse.prototype['DimensionList'] = undefined;

/**
 * @member {module:model/Frequency} MetricSetFrequency
 */
DescribeMetricSetResponse.prototype['MetricSetFrequency'] = undefined;

/**
 * @member {String} Timezone
 */
DescribeMetricSetResponse.prototype['Timezone'] = undefined;

/**
 * @member {module:model/DescribeMetricSetResponseMetricSource} MetricSource
 */
DescribeMetricSetResponse.prototype['MetricSource'] = undefined;

/**
 * @member {Array} DimensionFilterList
 */
DescribeMetricSetResponse.prototype['DimensionFilterList'] = undefined;






export default DescribeMetricSetResponse;

