/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregationFunction from './AggregationFunction';

/**
 * The Metric model module.
 * @module model/Metric
 * @version 2017-07-25
 */
class Metric {
    /**
     * Constructs a new <code>Metric</code>.
     * A calculation made by contrasting a measure and a dimension from your source data.
     * @alias module:model/Metric
     * @param metricName {String} 
     * @param aggregationFunction {module:model/AggregationFunction} 
     */
    constructor(metricName, aggregationFunction) { 
        
        Metric.initialize(this, metricName, aggregationFunction);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metricName, aggregationFunction) { 
        obj['MetricName'] = metricName;
        obj['AggregationFunction'] = aggregationFunction;
    }

    /**
     * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metric} obj Optional instance to populate.
     * @return {module:model/Metric} The populated <code>Metric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metric();

            if (data.hasOwnProperty('MetricName')) {
                obj['MetricName'] = ApiClient.convertToType(data['MetricName'], 'String');
            }
            if (data.hasOwnProperty('AggregationFunction')) {
                obj['AggregationFunction'] = ApiClient.convertToType(data['AggregationFunction'], AggregationFunction);
            }
            if (data.hasOwnProperty('Namespace')) {
                obj['Namespace'] = ApiClient.convertToType(data['Namespace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metric</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Metric.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `MetricName`
        if (data['MetricName']) { // data not null
          String.validateJSON(data['MetricName']);
        }
        // validate the optional field `AggregationFunction`
        if (data['AggregationFunction']) { // data not null
          AggregationFunction.validateJSON(data['AggregationFunction']);
        }
        // validate the optional field `Namespace`
        if (data['Namespace']) { // data not null
          String.validateJSON(data['Namespace']);
        }

        return true;
    }


}

Metric.RequiredProperties = ["MetricName", "AggregationFunction"];

/**
 * @member {String} MetricName
 */
Metric.prototype['MetricName'] = undefined;

/**
 * @member {module:model/AggregationFunction} AggregationFunction
 */
Metric.prototype['AggregationFunction'] = undefined;

/**
 * @member {String} Namespace
 */
Metric.prototype['Namespace'] = undefined;






export default Metric;

