/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateMetricSetRequestMetricSource from './CreateMetricSetRequestMetricSource';
import CreateMetricSetRequestTimestampColumn from './CreateMetricSetRequestTimestampColumn';
import Metric from './Metric';
import MetricSetDimensionFilter from './MetricSetDimensionFilter';

/**
 * The UpdateMetricSetRequest model module.
 * @module model/UpdateMetricSetRequest
 * @version 2017-07-25
 */
class UpdateMetricSetRequest {
    /**
     * Constructs a new <code>UpdateMetricSetRequest</code>.
     * @alias module:model/UpdateMetricSetRequest
     * @param metricSetArn {String} The ARN of the dataset to update.
     */
    constructor(metricSetArn) { 
        
        UpdateMetricSetRequest.initialize(this, metricSetArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metricSetArn) { 
        obj['MetricSetArn'] = metricSetArn;
    }

    /**
     * Constructs a <code>UpdateMetricSetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateMetricSetRequest} obj Optional instance to populate.
     * @return {module:model/UpdateMetricSetRequest} The populated <code>UpdateMetricSetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateMetricSetRequest();

            if (data.hasOwnProperty('MetricSetArn')) {
                obj['MetricSetArn'] = ApiClient.convertToType(data['MetricSetArn'], 'String');
            }
            if (data.hasOwnProperty('MetricSetDescription')) {
                obj['MetricSetDescription'] = ApiClient.convertToType(data['MetricSetDescription'], 'String');
            }
            if (data.hasOwnProperty('MetricList')) {
                obj['MetricList'] = ApiClient.convertToType(data['MetricList'], [Metric]);
            }
            if (data.hasOwnProperty('Offset')) {
                obj['Offset'] = ApiClient.convertToType(data['Offset'], 'Number');
            }
            if (data.hasOwnProperty('TimestampColumn')) {
                obj['TimestampColumn'] = CreateMetricSetRequestTimestampColumn.constructFromObject(data['TimestampColumn']);
            }
            if (data.hasOwnProperty('DimensionList')) {
                obj['DimensionList'] = ApiClient.convertToType(data['DimensionList'], ['String']);
            }
            if (data.hasOwnProperty('MetricSetFrequency')) {
                obj['MetricSetFrequency'] = ApiClient.convertToType(data['MetricSetFrequency'], 'String');
            }
            if (data.hasOwnProperty('MetricSource')) {
                obj['MetricSource'] = CreateMetricSetRequestMetricSource.constructFromObject(data['MetricSource']);
            }
            if (data.hasOwnProperty('DimensionFilterList')) {
                obj['DimensionFilterList'] = ApiClient.convertToType(data['DimensionFilterList'], [MetricSetDimensionFilter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateMetricSetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateMetricSetRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateMetricSetRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['MetricSetArn'] && !(typeof data['MetricSetArn'] === 'string' || data['MetricSetArn'] instanceof String)) {
            throw new Error("Expected the field `MetricSetArn` to be a primitive type in the JSON string but got " + data['MetricSetArn']);
        }
        // ensure the json data is a string
        if (data['MetricSetDescription'] && !(typeof data['MetricSetDescription'] === 'string' || data['MetricSetDescription'] instanceof String)) {
            throw new Error("Expected the field `MetricSetDescription` to be a primitive type in the JSON string but got " + data['MetricSetDescription']);
        }
        if (data['MetricList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MetricList'])) {
                throw new Error("Expected the field `MetricList` to be an array in the JSON data but got " + data['MetricList']);
            }
            // validate the optional field `MetricList` (array)
            for (const item of data['MetricList']) {
                Metric.validateJSON(item);
            };
        }
        // validate the optional field `TimestampColumn`
        if (data['TimestampColumn']) { // data not null
          CreateMetricSetRequestTimestampColumn.validateJSON(data['TimestampColumn']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DimensionList'])) {
            throw new Error("Expected the field `DimensionList` to be an array in the JSON data but got " + data['DimensionList']);
        }
        // ensure the json data is a string
        if (data['MetricSetFrequency'] && !(typeof data['MetricSetFrequency'] === 'string' || data['MetricSetFrequency'] instanceof String)) {
            throw new Error("Expected the field `MetricSetFrequency` to be a primitive type in the JSON string but got " + data['MetricSetFrequency']);
        }
        // validate the optional field `MetricSource`
        if (data['MetricSource']) { // data not null
          CreateMetricSetRequestMetricSource.validateJSON(data['MetricSource']);
        }
        if (data['DimensionFilterList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DimensionFilterList'])) {
                throw new Error("Expected the field `DimensionFilterList` to be an array in the JSON data but got " + data['DimensionFilterList']);
            }
            // validate the optional field `DimensionFilterList` (array)
            for (const item of data['DimensionFilterList']) {
                MetricSetDimensionFilter.validateJSON(item);
            };
        }

        return true;
    }


}

UpdateMetricSetRequest.RequiredProperties = ["MetricSetArn"];

/**
 * The ARN of the dataset to update.
 * @member {String} MetricSetArn
 */
UpdateMetricSetRequest.prototype['MetricSetArn'] = undefined;

/**
 * The dataset's description.
 * @member {String} MetricSetDescription
 */
UpdateMetricSetRequest.prototype['MetricSetDescription'] = undefined;

/**
 * The metric list.
 * @member {Array.<module:model/Metric>} MetricList
 */
UpdateMetricSetRequest.prototype['MetricList'] = undefined;

/**
 * After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.
 * @member {Number} Offset
 */
UpdateMetricSetRequest.prototype['Offset'] = undefined;

/**
 * @member {module:model/CreateMetricSetRequestTimestampColumn} TimestampColumn
 */
UpdateMetricSetRequest.prototype['TimestampColumn'] = undefined;

/**
 * The dimension list.
 * @member {Array.<String>} DimensionList
 */
UpdateMetricSetRequest.prototype['DimensionList'] = undefined;

/**
 * The dataset's interval.
 * @member {module:model/UpdateMetricSetRequest.MetricSetFrequencyEnum} MetricSetFrequency
 */
UpdateMetricSetRequest.prototype['MetricSetFrequency'] = undefined;

/**
 * @member {module:model/CreateMetricSetRequestMetricSource} MetricSource
 */
UpdateMetricSetRequest.prototype['MetricSource'] = undefined;

/**
 * Describes a list of filters for choosing specific dimensions and specific values. Each filter consists of the dimension and one of its values that you want to include. When multiple dimensions or values are specified, the dimensions are joined with an AND operation and the values are joined with an OR operation.
 * @member {Array.<module:model/MetricSetDimensionFilter>} DimensionFilterList
 */
UpdateMetricSetRequest.prototype['DimensionFilterList'] = undefined;





/**
 * Allowed values for the <code>MetricSetFrequency</code> property.
 * @enum {String}
 * @readonly
 */
UpdateMetricSetRequest['MetricSetFrequencyEnum'] = {

    /**
     * value: "P1D"
     * @const
     */
    "P1D": "P1D",

    /**
     * value: "PT1H"
     * @const
     */
    "PT1H": "PT1H",

    /**
     * value: "PT10M"
     * @const
     */
    "PT10M": "PT10M",

    /**
     * value: "PT5M"
     * @const
     */
    "PT5M": "PT5M"
};



export default UpdateMetricSetRequest;

