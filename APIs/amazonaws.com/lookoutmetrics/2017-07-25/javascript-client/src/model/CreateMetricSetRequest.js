/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateMetricSetRequestMetricSource from './CreateMetricSetRequestMetricSource';
import CreateMetricSetRequestTimestampColumn from './CreateMetricSetRequestTimestampColumn';
import Metric from './Metric';
import MetricSetDimensionFilter from './MetricSetDimensionFilter';

/**
 * The CreateMetricSetRequest model module.
 * @module model/CreateMetricSetRequest
 * @version 2017-07-25
 */
class CreateMetricSetRequest {
    /**
     * Constructs a new <code>CreateMetricSetRequest</code>.
     * @alias module:model/CreateMetricSetRequest
     * @param anomalyDetectorArn {String} The ARN of the anomaly detector that will use the dataset.
     * @param metricSetName {String} The name of the dataset.
     * @param metricList {Array.<module:model/Metric>} A list of metrics that the dataset will contain.
     * @param metricSource {module:model/CreateMetricSetRequestMetricSource} 
     */
    constructor(anomalyDetectorArn, metricSetName, metricList, metricSource) { 
        
        CreateMetricSetRequest.initialize(this, anomalyDetectorArn, metricSetName, metricList, metricSource);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, anomalyDetectorArn, metricSetName, metricList, metricSource) { 
        obj['AnomalyDetectorArn'] = anomalyDetectorArn;
        obj['MetricSetName'] = metricSetName;
        obj['MetricList'] = metricList;
        obj['MetricSource'] = metricSource;
    }

    /**
     * Constructs a <code>CreateMetricSetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateMetricSetRequest} obj Optional instance to populate.
     * @return {module:model/CreateMetricSetRequest} The populated <code>CreateMetricSetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateMetricSetRequest();

            if (data.hasOwnProperty('AnomalyDetectorArn')) {
                obj['AnomalyDetectorArn'] = ApiClient.convertToType(data['AnomalyDetectorArn'], 'String');
            }
            if (data.hasOwnProperty('MetricSetName')) {
                obj['MetricSetName'] = ApiClient.convertToType(data['MetricSetName'], 'String');
            }
            if (data.hasOwnProperty('MetricSetDescription')) {
                obj['MetricSetDescription'] = ApiClient.convertToType(data['MetricSetDescription'], 'String');
            }
            if (data.hasOwnProperty('MetricList')) {
                obj['MetricList'] = ApiClient.convertToType(data['MetricList'], [Metric]);
            }
            if (data.hasOwnProperty('Offset')) {
                obj['Offset'] = ApiClient.convertToType(data['Offset'], 'Number');
            }
            if (data.hasOwnProperty('TimestampColumn')) {
                obj['TimestampColumn'] = CreateMetricSetRequestTimestampColumn.constructFromObject(data['TimestampColumn']);
            }
            if (data.hasOwnProperty('DimensionList')) {
                obj['DimensionList'] = ApiClient.convertToType(data['DimensionList'], ['String']);
            }
            if (data.hasOwnProperty('MetricSetFrequency')) {
                obj['MetricSetFrequency'] = ApiClient.convertToType(data['MetricSetFrequency'], 'String');
            }
            if (data.hasOwnProperty('MetricSource')) {
                obj['MetricSource'] = CreateMetricSetRequestMetricSource.constructFromObject(data['MetricSource']);
            }
            if (data.hasOwnProperty('Timezone')) {
                obj['Timezone'] = ApiClient.convertToType(data['Timezone'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('DimensionFilterList')) {
                obj['DimensionFilterList'] = ApiClient.convertToType(data['DimensionFilterList'], [MetricSetDimensionFilter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateMetricSetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateMetricSetRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateMetricSetRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AnomalyDetectorArn'] && !(typeof data['AnomalyDetectorArn'] === 'string' || data['AnomalyDetectorArn'] instanceof String)) {
            throw new Error("Expected the field `AnomalyDetectorArn` to be a primitive type in the JSON string but got " + data['AnomalyDetectorArn']);
        }
        // ensure the json data is a string
        if (data['MetricSetName'] && !(typeof data['MetricSetName'] === 'string' || data['MetricSetName'] instanceof String)) {
            throw new Error("Expected the field `MetricSetName` to be a primitive type in the JSON string but got " + data['MetricSetName']);
        }
        // ensure the json data is a string
        if (data['MetricSetDescription'] && !(typeof data['MetricSetDescription'] === 'string' || data['MetricSetDescription'] instanceof String)) {
            throw new Error("Expected the field `MetricSetDescription` to be a primitive type in the JSON string but got " + data['MetricSetDescription']);
        }
        if (data['MetricList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MetricList'])) {
                throw new Error("Expected the field `MetricList` to be an array in the JSON data but got " + data['MetricList']);
            }
            // validate the optional field `MetricList` (array)
            for (const item of data['MetricList']) {
                Metric.validateJSON(item);
            };
        }
        // validate the optional field `TimestampColumn`
        if (data['TimestampColumn']) { // data not null
          CreateMetricSetRequestTimestampColumn.validateJSON(data['TimestampColumn']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DimensionList'])) {
            throw new Error("Expected the field `DimensionList` to be an array in the JSON data but got " + data['DimensionList']);
        }
        // ensure the json data is a string
        if (data['MetricSetFrequency'] && !(typeof data['MetricSetFrequency'] === 'string' || data['MetricSetFrequency'] instanceof String)) {
            throw new Error("Expected the field `MetricSetFrequency` to be a primitive type in the JSON string but got " + data['MetricSetFrequency']);
        }
        // validate the optional field `MetricSource`
        if (data['MetricSource']) { // data not null
          CreateMetricSetRequestMetricSource.validateJSON(data['MetricSource']);
        }
        // ensure the json data is a string
        if (data['Timezone'] && !(typeof data['Timezone'] === 'string' || data['Timezone'] instanceof String)) {
            throw new Error("Expected the field `Timezone` to be a primitive type in the JSON string but got " + data['Timezone']);
        }
        if (data['DimensionFilterList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DimensionFilterList'])) {
                throw new Error("Expected the field `DimensionFilterList` to be an array in the JSON data but got " + data['DimensionFilterList']);
            }
            // validate the optional field `DimensionFilterList` (array)
            for (const item of data['DimensionFilterList']) {
                MetricSetDimensionFilter.validateJSON(item);
            };
        }

        return true;
    }


}

CreateMetricSetRequest.RequiredProperties = ["AnomalyDetectorArn", "MetricSetName", "MetricList", "MetricSource"];

/**
 * The ARN of the anomaly detector that will use the dataset.
 * @member {String} AnomalyDetectorArn
 */
CreateMetricSetRequest.prototype['AnomalyDetectorArn'] = undefined;

/**
 * The name of the dataset.
 * @member {String} MetricSetName
 */
CreateMetricSetRequest.prototype['MetricSetName'] = undefined;

/**
 * A description of the dataset you are creating.
 * @member {String} MetricSetDescription
 */
CreateMetricSetRequest.prototype['MetricSetDescription'] = undefined;

/**
 * A list of metrics that the dataset will contain.
 * @member {Array.<module:model/Metric>} MetricList
 */
CreateMetricSetRequest.prototype['MetricList'] = undefined;

/**
 * After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.
 * @member {Number} Offset
 */
CreateMetricSetRequest.prototype['Offset'] = undefined;

/**
 * @member {module:model/CreateMetricSetRequestTimestampColumn} TimestampColumn
 */
CreateMetricSetRequest.prototype['TimestampColumn'] = undefined;

/**
 * A list of the fields you want to treat as dimensions.
 * @member {Array.<String>} DimensionList
 */
CreateMetricSetRequest.prototype['DimensionList'] = undefined;

/**
 * The frequency with which the source data will be analyzed for anomalies.
 * @member {module:model/CreateMetricSetRequest.MetricSetFrequencyEnum} MetricSetFrequency
 */
CreateMetricSetRequest.prototype['MetricSetFrequency'] = undefined;

/**
 * @member {module:model/CreateMetricSetRequestMetricSource} MetricSource
 */
CreateMetricSetRequest.prototype['MetricSource'] = undefined;

/**
 * The time zone in which your source data was recorded.
 * @member {String} Timezone
 */
CreateMetricSetRequest.prototype['Timezone'] = undefined;

/**
 * A list of <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> to apply to the dataset.
 * @member {Object.<String, String>} Tags
 */
CreateMetricSetRequest.prototype['Tags'] = undefined;

/**
 * A list of filters that specify which data is kept for anomaly detection.
 * @member {Array.<module:model/MetricSetDimensionFilter>} DimensionFilterList
 */
CreateMetricSetRequest.prototype['DimensionFilterList'] = undefined;





/**
 * Allowed values for the <code>MetricSetFrequency</code> property.
 * @enum {String}
 * @readonly
 */
CreateMetricSetRequest['MetricSetFrequencyEnum'] = {

    /**
     * value: "P1D"
     * @const
     */
    "P1D": "P1D",

    /**
     * value: "PT1H"
     * @const
     */
    "PT1H": "PT1H",

    /**
     * value: "PT10M"
     * @const
     */
    "PT10M": "PT10M",

    /**
     * value: "PT5M"
     * @const
     */
    "PT5M": "PT5M"
};



export default CreateMetricSetRequest;

