/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RedshiftSourceConfig from './RedshiftSourceConfig';
import RedshiftSourceConfigVpcConfiguration from './RedshiftSourceConfigVpcConfiguration';

/**
 * The CreateMetricSetRequestMetricSourceRedshiftSourceConfig model module.
 * @module model/CreateMetricSetRequestMetricSourceRedshiftSourceConfig
 * @version 2017-07-25
 */
class CreateMetricSetRequestMetricSourceRedshiftSourceConfig {
    /**
     * Constructs a new <code>CreateMetricSetRequestMetricSourceRedshiftSourceConfig</code>.
     * @alias module:model/CreateMetricSetRequestMetricSourceRedshiftSourceConfig
     * @implements module:model/RedshiftSourceConfig
     */
    constructor() { 
        RedshiftSourceConfig.initialize(this);
        CreateMetricSetRequestMetricSourceRedshiftSourceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateMetricSetRequestMetricSourceRedshiftSourceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateMetricSetRequestMetricSourceRedshiftSourceConfig} obj Optional instance to populate.
     * @return {module:model/CreateMetricSetRequestMetricSourceRedshiftSourceConfig} The populated <code>CreateMetricSetRequestMetricSourceRedshiftSourceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateMetricSetRequestMetricSourceRedshiftSourceConfig();
            RedshiftSourceConfig.constructFromObject(data, obj);

            if (data.hasOwnProperty('ClusterIdentifier')) {
                obj['ClusterIdentifier'] = ApiClient.convertToType(data['ClusterIdentifier'], 'String');
            }
            if (data.hasOwnProperty('DatabaseHost')) {
                obj['DatabaseHost'] = ApiClient.convertToType(data['DatabaseHost'], 'String');
            }
            if (data.hasOwnProperty('DatabasePort')) {
                obj['DatabasePort'] = ApiClient.convertToType(data['DatabasePort'], 'Number');
            }
            if (data.hasOwnProperty('SecretManagerArn')) {
                obj['SecretManagerArn'] = ApiClient.convertToType(data['SecretManagerArn'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('VpcConfiguration')) {
                obj['VpcConfiguration'] = RedshiftSourceConfigVpcConfiguration.constructFromObject(data['VpcConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateMetricSetRequestMetricSourceRedshiftSourceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateMetricSetRequestMetricSourceRedshiftSourceConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ClusterIdentifier`
        if (data['ClusterIdentifier']) { // data not null
          String.validateJSON(data['ClusterIdentifier']);
        }
        // validate the optional field `DatabaseHost`
        if (data['DatabaseHost']) { // data not null
          String.validateJSON(data['DatabaseHost']);
        }
        // validate the optional field `DatabasePort`
        if (data['DatabasePort']) { // data not null
          Number.validateJSON(data['DatabasePort']);
        }
        // validate the optional field `SecretManagerArn`
        if (data['SecretManagerArn']) { // data not null
          String.validateJSON(data['SecretManagerArn']);
        }
        // validate the optional field `DatabaseName`
        if (data['DatabaseName']) { // data not null
          String.validateJSON(data['DatabaseName']);
        }
        // validate the optional field `TableName`
        if (data['TableName']) { // data not null
          String.validateJSON(data['TableName']);
        }
        // validate the optional field `RoleArn`
        if (data['RoleArn']) { // data not null
          String.validateJSON(data['RoleArn']);
        }
        // validate the optional field `VpcConfiguration`
        if (data['VpcConfiguration']) { // data not null
          RedshiftSourceConfigVpcConfiguration.validateJSON(data['VpcConfiguration']);
        }

        return true;
    }


}



/**
 * @member {String} ClusterIdentifier
 */
CreateMetricSetRequestMetricSourceRedshiftSourceConfig.prototype['ClusterIdentifier'] = undefined;

/**
 * @member {String} DatabaseHost
 */
CreateMetricSetRequestMetricSourceRedshiftSourceConfig.prototype['DatabaseHost'] = undefined;

/**
 * @member {Number} DatabasePort
 */
CreateMetricSetRequestMetricSourceRedshiftSourceConfig.prototype['DatabasePort'] = undefined;

/**
 * @member {String} SecretManagerArn
 */
CreateMetricSetRequestMetricSourceRedshiftSourceConfig.prototype['SecretManagerArn'] = undefined;

/**
 * @member {String} DatabaseName
 */
CreateMetricSetRequestMetricSourceRedshiftSourceConfig.prototype['DatabaseName'] = undefined;

/**
 * @member {String} TableName
 */
CreateMetricSetRequestMetricSourceRedshiftSourceConfig.prototype['TableName'] = undefined;

/**
 * @member {String} RoleArn
 */
CreateMetricSetRequestMetricSourceRedshiftSourceConfig.prototype['RoleArn'] = undefined;

/**
 * @member {module:model/RedshiftSourceConfigVpcConfiguration} VpcConfiguration
 */
CreateMetricSetRequestMetricSourceRedshiftSourceConfig.prototype['VpcConfiguration'] = undefined;


// Implement RedshiftSourceConfig interface:
/**
 * @member {String} ClusterIdentifier
 */
RedshiftSourceConfig.prototype['ClusterIdentifier'] = undefined;
/**
 * @member {String} DatabaseHost
 */
RedshiftSourceConfig.prototype['DatabaseHost'] = undefined;
/**
 * @member {Number} DatabasePort
 */
RedshiftSourceConfig.prototype['DatabasePort'] = undefined;
/**
 * @member {String} SecretManagerArn
 */
RedshiftSourceConfig.prototype['SecretManagerArn'] = undefined;
/**
 * @member {String} DatabaseName
 */
RedshiftSourceConfig.prototype['DatabaseName'] = undefined;
/**
 * @member {String} TableName
 */
RedshiftSourceConfig.prototype['TableName'] = undefined;
/**
 * @member {String} RoleArn
 */
RedshiftSourceConfig.prototype['RoleArn'] = undefined;
/**
 * @member {module:model/RedshiftSourceConfigVpcConfiguration} VpcConfiguration
 */
RedshiftSourceConfig.prototype['VpcConfiguration'] = undefined;




export default CreateMetricSetRequestMetricSourceRedshiftSourceConfig;

