/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonLookoutForMetrics);
  }
}(this, function(expect, AmazonLookoutForMetrics) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonLookoutForMetrics.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('activateAnomalyDetector', function() {
      it('should call activateAnomalyDetector successfully', function(done) {
        //uncomment below and update the code to test activateAnomalyDetector
        //instance.activateAnomalyDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('backTestAnomalyDetector', function() {
      it('should call backTestAnomalyDetector successfully', function(done) {
        //uncomment below and update the code to test backTestAnomalyDetector
        //instance.backTestAnomalyDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAlert', function() {
      it('should call createAlert successfully', function(done) {
        //uncomment below and update the code to test createAlert
        //instance.createAlert(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAnomalyDetector', function() {
      it('should call createAnomalyDetector successfully', function(done) {
        //uncomment below and update the code to test createAnomalyDetector
        //instance.createAnomalyDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMetricSet', function() {
      it('should call createMetricSet successfully', function(done) {
        //uncomment below and update the code to test createMetricSet
        //instance.createMetricSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deactivateAnomalyDetector', function() {
      it('should call deactivateAnomalyDetector successfully', function(done) {
        //uncomment below and update the code to test deactivateAnomalyDetector
        //instance.deactivateAnomalyDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAlert', function() {
      it('should call deleteAlert successfully', function(done) {
        //uncomment below and update the code to test deleteAlert
        //instance.deleteAlert(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAnomalyDetector', function() {
      it('should call deleteAnomalyDetector successfully', function(done) {
        //uncomment below and update the code to test deleteAnomalyDetector
        //instance.deleteAnomalyDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAlert', function() {
      it('should call describeAlert successfully', function(done) {
        //uncomment below and update the code to test describeAlert
        //instance.describeAlert(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAnomalyDetectionExecutions', function() {
      it('should call describeAnomalyDetectionExecutions successfully', function(done) {
        //uncomment below and update the code to test describeAnomalyDetectionExecutions
        //instance.describeAnomalyDetectionExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAnomalyDetector', function() {
      it('should call describeAnomalyDetector successfully', function(done) {
        //uncomment below and update the code to test describeAnomalyDetector
        //instance.describeAnomalyDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMetricSet', function() {
      it('should call describeMetricSet successfully', function(done) {
        //uncomment below and update the code to test describeMetricSet
        //instance.describeMetricSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectMetricSetConfig', function() {
      it('should call detectMetricSetConfig successfully', function(done) {
        //uncomment below and update the code to test detectMetricSetConfig
        //instance.detectMetricSetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnomalyGroup', function() {
      it('should call getAnomalyGroup successfully', function(done) {
        //uncomment below and update the code to test getAnomalyGroup
        //instance.getAnomalyGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataQualityMetrics', function() {
      it('should call getDataQualityMetrics successfully', function(done) {
        //uncomment below and update the code to test getDataQualityMetrics
        //instance.getDataQualityMetrics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeedback', function() {
      it('should call getFeedback successfully', function(done) {
        //uncomment below and update the code to test getFeedback
        //instance.getFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSampleData', function() {
      it('should call getSampleData successfully', function(done) {
        //uncomment below and update the code to test getSampleData
        //instance.getSampleData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAlerts', function() {
      it('should call listAlerts successfully', function(done) {
        //uncomment below and update the code to test listAlerts
        //instance.listAlerts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnomalyDetectors', function() {
      it('should call listAnomalyDetectors successfully', function(done) {
        //uncomment below and update the code to test listAnomalyDetectors
        //instance.listAnomalyDetectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnomalyGroupRelatedMetrics', function() {
      it('should call listAnomalyGroupRelatedMetrics successfully', function(done) {
        //uncomment below and update the code to test listAnomalyGroupRelatedMetrics
        //instance.listAnomalyGroupRelatedMetrics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnomalyGroupSummaries', function() {
      it('should call listAnomalyGroupSummaries successfully', function(done) {
        //uncomment below and update the code to test listAnomalyGroupSummaries
        //instance.listAnomalyGroupSummaries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnomalyGroupTimeSeries', function() {
      it('should call listAnomalyGroupTimeSeries successfully', function(done) {
        //uncomment below and update the code to test listAnomalyGroupTimeSeries
        //instance.listAnomalyGroupTimeSeries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMetricSets', function() {
      it('should call listMetricSets successfully', function(done) {
        //uncomment below and update the code to test listMetricSets
        //instance.listMetricSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putFeedback', function() {
      it('should call putFeedback successfully', function(done) {
        //uncomment below and update the code to test putFeedback
        //instance.putFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAlert', function() {
      it('should call updateAlert successfully', function(done) {
        //uncomment below and update the code to test updateAlert
        //instance.updateAlert(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAnomalyDetector', function() {
      it('should call updateAnomalyDetector successfully', function(done) {
        //uncomment below and update the code to test updateAnomalyDetector
        //instance.updateAnomalyDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMetricSet', function() {
      it('should call updateMetricSet successfully', function(done) {
        //uncomment below and update the code to test updateMetricSet
        //instance.updateMetricSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
