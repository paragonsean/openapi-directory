# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detected_csv_format_descriptor_charset import DetectedCsvFormatDescriptorCharset
from openapi_server.models.detected_csv_format_descriptor_contains_header import DetectedCsvFormatDescriptorContainsHeader
from openapi_server.models.detected_csv_format_descriptor_delimiter import DetectedCsvFormatDescriptorDelimiter
from openapi_server.models.detected_csv_format_descriptor_file_compression import DetectedCsvFormatDescriptorFileCompression
from openapi_server.models.detected_csv_format_descriptor_header_list import DetectedCsvFormatDescriptorHeaderList
from openapi_server.models.detected_csv_format_descriptor_quote_symbol import DetectedCsvFormatDescriptorQuoteSymbol
from openapi_server import util


class DetectedFileFormatDescriptorCsvFormatDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_compression: DetectedCsvFormatDescriptorFileCompression=None, charset: DetectedCsvFormatDescriptorCharset=None, contains_header: DetectedCsvFormatDescriptorContainsHeader=None, delimiter: DetectedCsvFormatDescriptorDelimiter=None, header_list: DetectedCsvFormatDescriptorHeaderList=None, quote_symbol: DetectedCsvFormatDescriptorQuoteSymbol=None):
        """DetectedFileFormatDescriptorCsvFormatDescriptor - a model defined in OpenAPI

        :param file_compression: The file_compression of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :param charset: The charset of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :param contains_header: The contains_header of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :param delimiter: The delimiter of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :param header_list: The header_list of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :param quote_symbol: The quote_symbol of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        """
        self.openapi_types = {
            'file_compression': DetectedCsvFormatDescriptorFileCompression,
            'charset': DetectedCsvFormatDescriptorCharset,
            'contains_header': DetectedCsvFormatDescriptorContainsHeader,
            'delimiter': DetectedCsvFormatDescriptorDelimiter,
            'header_list': DetectedCsvFormatDescriptorHeaderList,
            'quote_symbol': DetectedCsvFormatDescriptorQuoteSymbol
        }

        self.attribute_map = {
            'file_compression': 'FileCompression',
            'charset': 'Charset',
            'contains_header': 'ContainsHeader',
            'delimiter': 'Delimiter',
            'header_list': 'HeaderList',
            'quote_symbol': 'QuoteSymbol'
        }

        self._file_compression = file_compression
        self._charset = charset
        self._contains_header = contains_header
        self._delimiter = delimiter
        self._header_list = header_list
        self._quote_symbol = quote_symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedFileFormatDescriptorCsvFormatDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectedFileFormatDescriptor_CsvFormatDescriptor of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_compression(self):
        """Gets the file_compression of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :return: The file_compression of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :rtype: DetectedCsvFormatDescriptorFileCompression
        """
        return self._file_compression

    @file_compression.setter
    def file_compression(self, file_compression):
        """Sets the file_compression of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :param file_compression: The file_compression of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :type file_compression: DetectedCsvFormatDescriptorFileCompression
        """

        self._file_compression = file_compression

    @property
    def charset(self):
        """Gets the charset of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :return: The charset of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :rtype: DetectedCsvFormatDescriptorCharset
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :param charset: The charset of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :type charset: DetectedCsvFormatDescriptorCharset
        """

        self._charset = charset

    @property
    def contains_header(self):
        """Gets the contains_header of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :return: The contains_header of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :rtype: DetectedCsvFormatDescriptorContainsHeader
        """
        return self._contains_header

    @contains_header.setter
    def contains_header(self, contains_header):
        """Sets the contains_header of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :param contains_header: The contains_header of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :type contains_header: DetectedCsvFormatDescriptorContainsHeader
        """

        self._contains_header = contains_header

    @property
    def delimiter(self):
        """Gets the delimiter of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :return: The delimiter of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :rtype: DetectedCsvFormatDescriptorDelimiter
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :param delimiter: The delimiter of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :type delimiter: DetectedCsvFormatDescriptorDelimiter
        """

        self._delimiter = delimiter

    @property
    def header_list(self):
        """Gets the header_list of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :return: The header_list of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :rtype: DetectedCsvFormatDescriptorHeaderList
        """
        return self._header_list

    @header_list.setter
    def header_list(self, header_list):
        """Sets the header_list of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :param header_list: The header_list of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :type header_list: DetectedCsvFormatDescriptorHeaderList
        """

        self._header_list = header_list

    @property
    def quote_symbol(self):
        """Gets the quote_symbol of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :return: The quote_symbol of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :rtype: DetectedCsvFormatDescriptorQuoteSymbol
        """
        return self._quote_symbol

    @quote_symbol.setter
    def quote_symbol(self, quote_symbol):
        """Sets the quote_symbol of this DetectedFileFormatDescriptorCsvFormatDescriptor.


        :param quote_symbol: The quote_symbol of this DetectedFileFormatDescriptorCsvFormatDescriptor.
        :type quote_symbol: DetectedCsvFormatDescriptorQuoteSymbol
        """

        self._quote_symbol = quote_symbol
