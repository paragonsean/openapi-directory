# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectedFieldValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s: str=None, n: str=None, b: str=None, ss: List=None, ns: List=None, bs: List=None):
        """DetectedFieldValue - a model defined in OpenAPI

        :param s: The s of this DetectedFieldValue.
        :param n: The n of this DetectedFieldValue.
        :param b: The b of this DetectedFieldValue.
        :param ss: The ss of this DetectedFieldValue.
        :param ns: The ns of this DetectedFieldValue.
        :param bs: The bs of this DetectedFieldValue.
        """
        self.openapi_types = {
            's': str,
            'n': str,
            'b': str,
            'ss': List,
            'ns': List,
            'bs': List
        }

        self.attribute_map = {
            's': 'S',
            'n': 'N',
            'b': 'B',
            'ss': 'SS',
            'ns': 'NS',
            'bs': 'BS'
        }

        self._s = s
        self._n = n
        self._b = b
        self._ss = ss
        self._ns = ns
        self._bs = bs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedFieldValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectedField_Value of this DetectedFieldValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s(self):
        """Gets the s of this DetectedFieldValue.


        :return: The s of this DetectedFieldValue.
        :rtype: str
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this DetectedFieldValue.


        :param s: The s of this DetectedFieldValue.
        :type s: str
        """

        self._s = s

    @property
    def n(self):
        """Gets the n of this DetectedFieldValue.


        :return: The n of this DetectedFieldValue.
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this DetectedFieldValue.


        :param n: The n of this DetectedFieldValue.
        :type n: str
        """

        self._n = n

    @property
    def b(self):
        """Gets the b of this DetectedFieldValue.


        :return: The b of this DetectedFieldValue.
        :rtype: str
        """
        return self._b

    @b.setter
    def b(self, b):
        """Sets the b of this DetectedFieldValue.


        :param b: The b of this DetectedFieldValue.
        :type b: str
        """

        self._b = b

    @property
    def ss(self):
        """Gets the ss of this DetectedFieldValue.


        :return: The ss of this DetectedFieldValue.
        :rtype: List
        """
        return self._ss

    @ss.setter
    def ss(self, ss):
        """Sets the ss of this DetectedFieldValue.


        :param ss: The ss of this DetectedFieldValue.
        :type ss: List
        """

        self._ss = ss

    @property
    def ns(self):
        """Gets the ns of this DetectedFieldValue.


        :return: The ns of this DetectedFieldValue.
        :rtype: List
        """
        return self._ns

    @ns.setter
    def ns(self, ns):
        """Sets the ns of this DetectedFieldValue.


        :param ns: The ns of this DetectedFieldValue.
        :type ns: List
        """

        self._ns = ns

    @property
    def bs(self):
        """Gets the bs of this DetectedFieldValue.


        :return: The bs of this DetectedFieldValue.
        :rtype: List
        """
        return self._bs

    @bs.setter
    def bs(self, bs):
        """Sets the bs of this DetectedFieldValue.


        :param bs: The bs of this DetectedFieldValue.
        :type bs: List
        """

        self._bs = bs
