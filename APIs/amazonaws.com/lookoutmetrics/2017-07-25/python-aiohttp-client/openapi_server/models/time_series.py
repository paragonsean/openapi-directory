# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_series_id: str=None, dimension_list: List=None, metric_value_list: List=None):
        """TimeSeries - a model defined in OpenAPI

        :param time_series_id: The time_series_id of this TimeSeries.
        :param dimension_list: The dimension_list of this TimeSeries.
        :param metric_value_list: The metric_value_list of this TimeSeries.
        """
        self.openapi_types = {
            'time_series_id': str,
            'dimension_list': List,
            'metric_value_list': List
        }

        self.attribute_map = {
            'time_series_id': 'TimeSeriesId',
            'dimension_list': 'DimensionList',
            'metric_value_list': 'MetricValueList'
        }

        self._time_series_id = time_series_id
        self._dimension_list = dimension_list
        self._metric_value_list = metric_value_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeries of this TimeSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_series_id(self):
        """Gets the time_series_id of this TimeSeries.


        :return: The time_series_id of this TimeSeries.
        :rtype: str
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this TimeSeries.


        :param time_series_id: The time_series_id of this TimeSeries.
        :type time_series_id: str
        """
        if time_series_id is None:
            raise ValueError("Invalid value for `time_series_id`, must not be `None`")

        self._time_series_id = time_series_id

    @property
    def dimension_list(self):
        """Gets the dimension_list of this TimeSeries.


        :return: The dimension_list of this TimeSeries.
        :rtype: List
        """
        return self._dimension_list

    @dimension_list.setter
    def dimension_list(self, dimension_list):
        """Sets the dimension_list of this TimeSeries.


        :param dimension_list: The dimension_list of this TimeSeries.
        :type dimension_list: List
        """
        if dimension_list is None:
            raise ValueError("Invalid value for `dimension_list`, must not be `None`")

        self._dimension_list = dimension_list

    @property
    def metric_value_list(self):
        """Gets the metric_value_list of this TimeSeries.


        :return: The metric_value_list of this TimeSeries.
        :rtype: List
        """
        return self._metric_value_list

    @metric_value_list.setter
    def metric_value_list(self, metric_value_list):
        """Sets the metric_value_list of this TimeSeries.


        :param metric_value_list: The metric_value_list of this TimeSeries.
        :type metric_value_list: List
        """
        if metric_value_list is None:
            raise ValueError("Invalid value for `metric_value_list`, must not be `None`")

        self._metric_value_list = metric_value_list
