# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_metric_set_request_metric_source import CreateMetricSetRequestMetricSource
from openapi_server.models.create_metric_set_request_timestamp_column import CreateMetricSetRequestTimestampColumn
from openapi_server.models.metric import Metric
from openapi_server.models.metric_set_dimension_filter import MetricSetDimensionFilter
import re
from openapi_server import util


class CreateMetricSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomaly_detector_arn: str=None, metric_set_name: str=None, metric_set_description: str=None, metric_list: List[Metric]=None, offset: int=None, timestamp_column: CreateMetricSetRequestTimestampColumn=None, dimension_list: List[str]=None, metric_set_frequency: str=None, metric_source: CreateMetricSetRequestMetricSource=None, timezone: str=None, tags: Dict[str, str]=None, dimension_filter_list: List[MetricSetDimensionFilter]=None):
        """CreateMetricSetRequest - a model defined in OpenAPI

        :param anomaly_detector_arn: The anomaly_detector_arn of this CreateMetricSetRequest.
        :param metric_set_name: The metric_set_name of this CreateMetricSetRequest.
        :param metric_set_description: The metric_set_description of this CreateMetricSetRequest.
        :param metric_list: The metric_list of this CreateMetricSetRequest.
        :param offset: The offset of this CreateMetricSetRequest.
        :param timestamp_column: The timestamp_column of this CreateMetricSetRequest.
        :param dimension_list: The dimension_list of this CreateMetricSetRequest.
        :param metric_set_frequency: The metric_set_frequency of this CreateMetricSetRequest.
        :param metric_source: The metric_source of this CreateMetricSetRequest.
        :param timezone: The timezone of this CreateMetricSetRequest.
        :param tags: The tags of this CreateMetricSetRequest.
        :param dimension_filter_list: The dimension_filter_list of this CreateMetricSetRequest.
        """
        self.openapi_types = {
            'anomaly_detector_arn': str,
            'metric_set_name': str,
            'metric_set_description': str,
            'metric_list': List[Metric],
            'offset': int,
            'timestamp_column': CreateMetricSetRequestTimestampColumn,
            'dimension_list': List[str],
            'metric_set_frequency': str,
            'metric_source': CreateMetricSetRequestMetricSource,
            'timezone': str,
            'tags': Dict[str, str],
            'dimension_filter_list': List[MetricSetDimensionFilter]
        }

        self.attribute_map = {
            'anomaly_detector_arn': 'AnomalyDetectorArn',
            'metric_set_name': 'MetricSetName',
            'metric_set_description': 'MetricSetDescription',
            'metric_list': 'MetricList',
            'offset': 'Offset',
            'timestamp_column': 'TimestampColumn',
            'dimension_list': 'DimensionList',
            'metric_set_frequency': 'MetricSetFrequency',
            'metric_source': 'MetricSource',
            'timezone': 'Timezone',
            'tags': 'Tags',
            'dimension_filter_list': 'DimensionFilterList'
        }

        self._anomaly_detector_arn = anomaly_detector_arn
        self._metric_set_name = metric_set_name
        self._metric_set_description = metric_set_description
        self._metric_list = metric_list
        self._offset = offset
        self._timestamp_column = timestamp_column
        self._dimension_list = dimension_list
        self._metric_set_frequency = metric_set_frequency
        self._metric_source = metric_source
        self._timezone = timezone
        self._tags = tags
        self._dimension_filter_list = dimension_filter_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMetricSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMetricSet_request of this CreateMetricSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomaly_detector_arn(self):
        """Gets the anomaly_detector_arn of this CreateMetricSetRequest.

        The ARN of the anomaly detector that will use the dataset.

        :return: The anomaly_detector_arn of this CreateMetricSetRequest.
        :rtype: str
        """
        return self._anomaly_detector_arn

    @anomaly_detector_arn.setter
    def anomaly_detector_arn(self, anomaly_detector_arn):
        """Sets the anomaly_detector_arn of this CreateMetricSetRequest.

        The ARN of the anomaly detector that will use the dataset.

        :param anomaly_detector_arn: The anomaly_detector_arn of this CreateMetricSetRequest.
        :type anomaly_detector_arn: str
        """
        if anomaly_detector_arn is None:
            raise ValueError("Invalid value for `anomaly_detector_arn`, must not be `None`")
        if anomaly_detector_arn is not None and len(anomaly_detector_arn) > 256:
            raise ValueError("Invalid value for `anomaly_detector_arn`, length must be less than or equal to `256`")
        if anomaly_detector_arn is not None and not re.search(r'arn:([a-z\d-]+):.*:.*:.*:.+', anomaly_detector_arn):
            raise ValueError("Invalid value for `anomaly_detector_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):.*:.*:.*:.+/`")

        self._anomaly_detector_arn = anomaly_detector_arn

    @property
    def metric_set_name(self):
        """Gets the metric_set_name of this CreateMetricSetRequest.

        The name of the dataset.

        :return: The metric_set_name of this CreateMetricSetRequest.
        :rtype: str
        """
        return self._metric_set_name

    @metric_set_name.setter
    def metric_set_name(self, metric_set_name):
        """Sets the metric_set_name of this CreateMetricSetRequest.

        The name of the dataset.

        :param metric_set_name: The metric_set_name of this CreateMetricSetRequest.
        :type metric_set_name: str
        """
        if metric_set_name is None:
            raise ValueError("Invalid value for `metric_set_name`, must not be `None`")
        if metric_set_name is not None and len(metric_set_name) > 63:
            raise ValueError("Invalid value for `metric_set_name`, length must be less than or equal to `63`")
        if metric_set_name is not None and len(metric_set_name) < 1:
            raise ValueError("Invalid value for `metric_set_name`, length must be greater than or equal to `1`")
        if metric_set_name is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', metric_set_name):
            raise ValueError("Invalid value for `metric_set_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9\-_]*/`")

        self._metric_set_name = metric_set_name

    @property
    def metric_set_description(self):
        """Gets the metric_set_description of this CreateMetricSetRequest.

        A description of the dataset you are creating.

        :return: The metric_set_description of this CreateMetricSetRequest.
        :rtype: str
        """
        return self._metric_set_description

    @metric_set_description.setter
    def metric_set_description(self, metric_set_description):
        """Sets the metric_set_description of this CreateMetricSetRequest.

        A description of the dataset you are creating.

        :param metric_set_description: The metric_set_description of this CreateMetricSetRequest.
        :type metric_set_description: str
        """
        if metric_set_description is not None and len(metric_set_description) > 256:
            raise ValueError("Invalid value for `metric_set_description`, length must be less than or equal to `256`")
        if metric_set_description is not None and len(metric_set_description) < 1:
            raise ValueError("Invalid value for `metric_set_description`, length must be greater than or equal to `1`")
        if metric_set_description is not None and not re.search(r'.*\S.*', metric_set_description):
            raise ValueError("Invalid value for `metric_set_description`, must be a follow pattern or equal to `/.*\S.*/`")

        self._metric_set_description = metric_set_description

    @property
    def metric_list(self):
        """Gets the metric_list of this CreateMetricSetRequest.

        A list of metrics that the dataset will contain.

        :return: The metric_list of this CreateMetricSetRequest.
        :rtype: List[Metric]
        """
        return self._metric_list

    @metric_list.setter
    def metric_list(self, metric_list):
        """Sets the metric_list of this CreateMetricSetRequest.

        A list of metrics that the dataset will contain.

        :param metric_list: The metric_list of this CreateMetricSetRequest.
        :type metric_list: List[Metric]
        """
        if metric_list is None:
            raise ValueError("Invalid value for `metric_list`, must not be `None`")
        if metric_list is not None and len(metric_list) < 1:
            raise ValueError("Invalid value for `metric_list`, number of items must be greater than or equal to `1`")

        self._metric_list = metric_list

    @property
    def offset(self):
        """Gets the offset of this CreateMetricSetRequest.

        After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.

        :return: The offset of this CreateMetricSetRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this CreateMetricSetRequest.

        After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.

        :param offset: The offset of this CreateMetricSetRequest.
        :type offset: int
        """
        if offset is not None and offset > 432000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `432000`")
        if offset is not None and offset < 0:
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")

        self._offset = offset

    @property
    def timestamp_column(self):
        """Gets the timestamp_column of this CreateMetricSetRequest.


        :return: The timestamp_column of this CreateMetricSetRequest.
        :rtype: CreateMetricSetRequestTimestampColumn
        """
        return self._timestamp_column

    @timestamp_column.setter
    def timestamp_column(self, timestamp_column):
        """Sets the timestamp_column of this CreateMetricSetRequest.


        :param timestamp_column: The timestamp_column of this CreateMetricSetRequest.
        :type timestamp_column: CreateMetricSetRequestTimestampColumn
        """

        self._timestamp_column = timestamp_column

    @property
    def dimension_list(self):
        """Gets the dimension_list of this CreateMetricSetRequest.

        A list of the fields you want to treat as dimensions.

        :return: The dimension_list of this CreateMetricSetRequest.
        :rtype: List[str]
        """
        return self._dimension_list

    @dimension_list.setter
    def dimension_list(self, dimension_list):
        """Sets the dimension_list of this CreateMetricSetRequest.

        A list of the fields you want to treat as dimensions.

        :param dimension_list: The dimension_list of this CreateMetricSetRequest.
        :type dimension_list: List[str]
        """
        if dimension_list is not None and len(dimension_list) < 1:
            raise ValueError("Invalid value for `dimension_list`, number of items must be greater than or equal to `1`")

        self._dimension_list = dimension_list

    @property
    def metric_set_frequency(self):
        """Gets the metric_set_frequency of this CreateMetricSetRequest.

        The frequency with which the source data will be analyzed for anomalies.

        :return: The metric_set_frequency of this CreateMetricSetRequest.
        :rtype: str
        """
        return self._metric_set_frequency

    @metric_set_frequency.setter
    def metric_set_frequency(self, metric_set_frequency):
        """Sets the metric_set_frequency of this CreateMetricSetRequest.

        The frequency with which the source data will be analyzed for anomalies.

        :param metric_set_frequency: The metric_set_frequency of this CreateMetricSetRequest.
        :type metric_set_frequency: str
        """
        allowed_values = ["P1D", "PT1H", "PT10M", "PT5M"]  # noqa: E501
        if metric_set_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_set_frequency` ({0}), must be one of {1}"
                .format(metric_set_frequency, allowed_values)
            )

        self._metric_set_frequency = metric_set_frequency

    @property
    def metric_source(self):
        """Gets the metric_source of this CreateMetricSetRequest.


        :return: The metric_source of this CreateMetricSetRequest.
        :rtype: CreateMetricSetRequestMetricSource
        """
        return self._metric_source

    @metric_source.setter
    def metric_source(self, metric_source):
        """Sets the metric_source of this CreateMetricSetRequest.


        :param metric_source: The metric_source of this CreateMetricSetRequest.
        :type metric_source: CreateMetricSetRequestMetricSource
        """
        if metric_source is None:
            raise ValueError("Invalid value for `metric_source`, must not be `None`")

        self._metric_source = metric_source

    @property
    def timezone(self):
        """Gets the timezone of this CreateMetricSetRequest.

        The time zone in which your source data was recorded.

        :return: The timezone of this CreateMetricSetRequest.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CreateMetricSetRequest.

        The time zone in which your source data was recorded.

        :param timezone: The timezone of this CreateMetricSetRequest.
        :type timezone: str
        """
        if timezone is not None and len(timezone) > 60:
            raise ValueError("Invalid value for `timezone`, length must be less than or equal to `60`")
        if timezone is not None and not re.search(r'.*\S.*', timezone):
            raise ValueError("Invalid value for `timezone`, must be a follow pattern or equal to `/.*\S.*/`")

        self._timezone = timezone

    @property
    def tags(self):
        """Gets the tags of this CreateMetricSetRequest.

        A list of <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> to apply to the dataset.

        :return: The tags of this CreateMetricSetRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMetricSetRequest.

        A list of <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> to apply to the dataset.

        :param tags: The tags of this CreateMetricSetRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def dimension_filter_list(self):
        """Gets the dimension_filter_list of this CreateMetricSetRequest.

        A list of filters that specify which data is kept for anomaly detection.

        :return: The dimension_filter_list of this CreateMetricSetRequest.
        :rtype: List[MetricSetDimensionFilter]
        """
        return self._dimension_filter_list

    @dimension_filter_list.setter
    def dimension_filter_list(self, dimension_filter_list):
        """Sets the dimension_filter_list of this CreateMetricSetRequest.

        A list of filters that specify which data is kept for anomaly detection.

        :param dimension_filter_list: The dimension_filter_list of this CreateMetricSetRequest.
        :type dimension_filter_list: List[MetricSetDimensionFilter]
        """

        self._dimension_filter_list = dimension_filter_list
