# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LambdaConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, lambda_arn: str=None):
        """LambdaConfiguration - a model defined in OpenAPI

        :param role_arn: The role_arn of this LambdaConfiguration.
        :param lambda_arn: The lambda_arn of this LambdaConfiguration.
        """
        self.openapi_types = {
            'role_arn': str,
            'lambda_arn': str
        }

        self.attribute_map = {
            'role_arn': 'RoleArn',
            'lambda_arn': 'LambdaArn'
        }

        self._role_arn = role_arn
        self._lambda_arn = lambda_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LambdaConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LambdaConfiguration of this LambdaConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this LambdaConfiguration.


        :return: The role_arn of this LambdaConfiguration.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this LambdaConfiguration.


        :param role_arn: The role_arn of this LambdaConfiguration.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def lambda_arn(self):
        """Gets the lambda_arn of this LambdaConfiguration.


        :return: The lambda_arn of this LambdaConfiguration.
        :rtype: str
        """
        return self._lambda_arn

    @lambda_arn.setter
    def lambda_arn(self, lambda_arn):
        """Sets the lambda_arn of this LambdaConfiguration.


        :param lambda_arn: The lambda_arn of this LambdaConfiguration.
        :type lambda_arn: str
        """
        if lambda_arn is None:
            raise ValueError("Invalid value for `lambda_arn`, must not be `None`")

        self._lambda_arn = lambda_arn
