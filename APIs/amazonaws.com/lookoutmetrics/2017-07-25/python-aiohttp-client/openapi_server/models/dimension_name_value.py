# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DimensionNameValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_name: str=None, dimension_value: str=None):
        """DimensionNameValue - a model defined in OpenAPI

        :param dimension_name: The dimension_name of this DimensionNameValue.
        :param dimension_value: The dimension_value of this DimensionNameValue.
        """
        self.openapi_types = {
            'dimension_name': str,
            'dimension_value': str
        }

        self.attribute_map = {
            'dimension_name': 'DimensionName',
            'dimension_value': 'DimensionValue'
        }

        self._dimension_name = dimension_name
        self._dimension_value = dimension_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DimensionNameValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DimensionNameValue of this DimensionNameValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_name(self):
        """Gets the dimension_name of this DimensionNameValue.


        :return: The dimension_name of this DimensionNameValue.
        :rtype: str
        """
        return self._dimension_name

    @dimension_name.setter
    def dimension_name(self, dimension_name):
        """Sets the dimension_name of this DimensionNameValue.


        :param dimension_name: The dimension_name of this DimensionNameValue.
        :type dimension_name: str
        """
        if dimension_name is None:
            raise ValueError("Invalid value for `dimension_name`, must not be `None`")

        self._dimension_name = dimension_name

    @property
    def dimension_value(self):
        """Gets the dimension_value of this DimensionNameValue.


        :return: The dimension_value of this DimensionNameValue.
        :rtype: str
        """
        return self._dimension_value

    @dimension_value.setter
    def dimension_value(self, dimension_value):
        """Sets the dimension_value of this DimensionNameValue.


        :param dimension_value: The dimension_value of this DimensionNameValue.
        :type dimension_value: str
        """
        if dimension_value is None:
            raise ValueError("Invalid value for `dimension_value`, must not be `None`")

        self._dimension_value = dimension_value
