# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detect_metric_set_config_request_auto_detection_metric_source import DetectMetricSetConfigRequestAutoDetectionMetricSource
import re
from openapi_server import util


class DetectMetricSetConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomaly_detector_arn: str=None, auto_detection_metric_source: DetectMetricSetConfigRequestAutoDetectionMetricSource=None):
        """DetectMetricSetConfigRequest - a model defined in OpenAPI

        :param anomaly_detector_arn: The anomaly_detector_arn of this DetectMetricSetConfigRequest.
        :param auto_detection_metric_source: The auto_detection_metric_source of this DetectMetricSetConfigRequest.
        """
        self.openapi_types = {
            'anomaly_detector_arn': str,
            'auto_detection_metric_source': DetectMetricSetConfigRequestAutoDetectionMetricSource
        }

        self.attribute_map = {
            'anomaly_detector_arn': 'AnomalyDetectorArn',
            'auto_detection_metric_source': 'AutoDetectionMetricSource'
        }

        self._anomaly_detector_arn = anomaly_detector_arn
        self._auto_detection_metric_source = auto_detection_metric_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectMetricSetConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectMetricSetConfig_request of this DetectMetricSetConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomaly_detector_arn(self):
        """Gets the anomaly_detector_arn of this DetectMetricSetConfigRequest.

        An anomaly detector ARN.

        :return: The anomaly_detector_arn of this DetectMetricSetConfigRequest.
        :rtype: str
        """
        return self._anomaly_detector_arn

    @anomaly_detector_arn.setter
    def anomaly_detector_arn(self, anomaly_detector_arn):
        """Sets the anomaly_detector_arn of this DetectMetricSetConfigRequest.

        An anomaly detector ARN.

        :param anomaly_detector_arn: The anomaly_detector_arn of this DetectMetricSetConfigRequest.
        :type anomaly_detector_arn: str
        """
        if anomaly_detector_arn is None:
            raise ValueError("Invalid value for `anomaly_detector_arn`, must not be `None`")
        if anomaly_detector_arn is not None and len(anomaly_detector_arn) > 256:
            raise ValueError("Invalid value for `anomaly_detector_arn`, length must be less than or equal to `256`")
        if anomaly_detector_arn is not None and not re.search(r'arn:([a-z\d-]+):.*:.*:.*:.+', anomaly_detector_arn):
            raise ValueError("Invalid value for `anomaly_detector_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):.*:.*:.*:.+/`")

        self._anomaly_detector_arn = anomaly_detector_arn

    @property
    def auto_detection_metric_source(self):
        """Gets the auto_detection_metric_source of this DetectMetricSetConfigRequest.


        :return: The auto_detection_metric_source of this DetectMetricSetConfigRequest.
        :rtype: DetectMetricSetConfigRequestAutoDetectionMetricSource
        """
        return self._auto_detection_metric_source

    @auto_detection_metric_source.setter
    def auto_detection_metric_source(self, auto_detection_metric_source):
        """Sets the auto_detection_metric_source of this DetectMetricSetConfigRequest.


        :param auto_detection_metric_source: The auto_detection_metric_source of this DetectMetricSetConfigRequest.
        :type auto_detection_metric_source: DetectMetricSetConfigRequestAutoDetectionMetricSource
        """
        if auto_detection_metric_source is None:
            raise ValueError("Invalid value for `auto_detection_metric_source`, must not be `None`")

        self._auto_detection_metric_source = auto_detection_metric_source
