# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_file_compression import JsonFileCompression
from openapi_server import util


class FileFormatDescriptorJsonFormatDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_compression: JsonFileCompression=None, charset: str=None):
        """FileFormatDescriptorJsonFormatDescriptor - a model defined in OpenAPI

        :param file_compression: The file_compression of this FileFormatDescriptorJsonFormatDescriptor.
        :param charset: The charset of this FileFormatDescriptorJsonFormatDescriptor.
        """
        self.openapi_types = {
            'file_compression': JsonFileCompression,
            'charset': str
        }

        self.attribute_map = {
            'file_compression': 'FileCompression',
            'charset': 'Charset'
        }

        self._file_compression = file_compression
        self._charset = charset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileFormatDescriptorJsonFormatDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileFormatDescriptor_JsonFormatDescriptor of this FileFormatDescriptorJsonFormatDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_compression(self):
        """Gets the file_compression of this FileFormatDescriptorJsonFormatDescriptor.


        :return: The file_compression of this FileFormatDescriptorJsonFormatDescriptor.
        :rtype: JsonFileCompression
        """
        return self._file_compression

    @file_compression.setter
    def file_compression(self, file_compression):
        """Sets the file_compression of this FileFormatDescriptorJsonFormatDescriptor.


        :param file_compression: The file_compression of this FileFormatDescriptorJsonFormatDescriptor.
        :type file_compression: JsonFileCompression
        """

        self._file_compression = file_compression

    @property
    def charset(self):
        """Gets the charset of this FileFormatDescriptorJsonFormatDescriptor.


        :return: The charset of this FileFormatDescriptorJsonFormatDescriptor.
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this FileFormatDescriptorJsonFormatDescriptor.


        :param charset: The charset of this FileFormatDescriptorJsonFormatDescriptor.
        :type charset: str
        """

        self._charset = charset
