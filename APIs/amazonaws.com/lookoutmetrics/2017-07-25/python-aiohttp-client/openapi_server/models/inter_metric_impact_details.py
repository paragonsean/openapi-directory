# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relationship_type import RelationshipType
from openapi_server import util


class InterMetricImpactDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, anomaly_group_id: str=None, relationship_type: RelationshipType=None, contribution_percentage: float=None):
        """InterMetricImpactDetails - a model defined in OpenAPI

        :param metric_name: The metric_name of this InterMetricImpactDetails.
        :param anomaly_group_id: The anomaly_group_id of this InterMetricImpactDetails.
        :param relationship_type: The relationship_type of this InterMetricImpactDetails.
        :param contribution_percentage: The contribution_percentage of this InterMetricImpactDetails.
        """
        self.openapi_types = {
            'metric_name': str,
            'anomaly_group_id': str,
            'relationship_type': RelationshipType,
            'contribution_percentage': float
        }

        self.attribute_map = {
            'metric_name': 'MetricName',
            'anomaly_group_id': 'AnomalyGroupId',
            'relationship_type': 'RelationshipType',
            'contribution_percentage': 'ContributionPercentage'
        }

        self._metric_name = metric_name
        self._anomaly_group_id = anomaly_group_id
        self._relationship_type = relationship_type
        self._contribution_percentage = contribution_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterMetricImpactDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterMetricImpactDetails of this InterMetricImpactDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this InterMetricImpactDetails.


        :return: The metric_name of this InterMetricImpactDetails.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this InterMetricImpactDetails.


        :param metric_name: The metric_name of this InterMetricImpactDetails.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def anomaly_group_id(self):
        """Gets the anomaly_group_id of this InterMetricImpactDetails.


        :return: The anomaly_group_id of this InterMetricImpactDetails.
        :rtype: str
        """
        return self._anomaly_group_id

    @anomaly_group_id.setter
    def anomaly_group_id(self, anomaly_group_id):
        """Sets the anomaly_group_id of this InterMetricImpactDetails.


        :param anomaly_group_id: The anomaly_group_id of this InterMetricImpactDetails.
        :type anomaly_group_id: str
        """

        self._anomaly_group_id = anomaly_group_id

    @property
    def relationship_type(self):
        """Gets the relationship_type of this InterMetricImpactDetails.


        :return: The relationship_type of this InterMetricImpactDetails.
        :rtype: RelationshipType
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this InterMetricImpactDetails.


        :param relationship_type: The relationship_type of this InterMetricImpactDetails.
        :type relationship_type: RelationshipType
        """

        self._relationship_type = relationship_type

    @property
    def contribution_percentage(self):
        """Gets the contribution_percentage of this InterMetricImpactDetails.


        :return: The contribution_percentage of this InterMetricImpactDetails.
        :rtype: float
        """
        return self._contribution_percentage

    @contribution_percentage.setter
    def contribution_percentage(self, contribution_percentage):
        """Sets the contribution_percentage of this InterMetricImpactDetails.


        :param contribution_percentage: The contribution_percentage of this InterMetricImpactDetails.
        :type contribution_percentage: float
        """

        self._contribution_percentage = contribution_percentage
