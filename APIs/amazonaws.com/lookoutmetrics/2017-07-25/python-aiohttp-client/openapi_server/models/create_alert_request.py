# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_alert_request_action import CreateAlertRequestAction
from openapi_server.models.create_alert_request_alert_filters import CreateAlertRequestAlertFilters
import re
from openapi_server import util


class CreateAlertRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_name: str=None, alert_sensitivity_threshold: int=None, alert_description: str=None, anomaly_detector_arn: str=None, action: CreateAlertRequestAction=None, tags: Dict[str, str]=None, alert_filters: CreateAlertRequestAlertFilters=None):
        """CreateAlertRequest - a model defined in OpenAPI

        :param alert_name: The alert_name of this CreateAlertRequest.
        :param alert_sensitivity_threshold: The alert_sensitivity_threshold of this CreateAlertRequest.
        :param alert_description: The alert_description of this CreateAlertRequest.
        :param anomaly_detector_arn: The anomaly_detector_arn of this CreateAlertRequest.
        :param action: The action of this CreateAlertRequest.
        :param tags: The tags of this CreateAlertRequest.
        :param alert_filters: The alert_filters of this CreateAlertRequest.
        """
        self.openapi_types = {
            'alert_name': str,
            'alert_sensitivity_threshold': int,
            'alert_description': str,
            'anomaly_detector_arn': str,
            'action': CreateAlertRequestAction,
            'tags': Dict[str, str],
            'alert_filters': CreateAlertRequestAlertFilters
        }

        self.attribute_map = {
            'alert_name': 'AlertName',
            'alert_sensitivity_threshold': 'AlertSensitivityThreshold',
            'alert_description': 'AlertDescription',
            'anomaly_detector_arn': 'AnomalyDetectorArn',
            'action': 'Action',
            'tags': 'Tags',
            'alert_filters': 'AlertFilters'
        }

        self._alert_name = alert_name
        self._alert_sensitivity_threshold = alert_sensitivity_threshold
        self._alert_description = alert_description
        self._anomaly_detector_arn = anomaly_detector_arn
        self._action = action
        self._tags = tags
        self._alert_filters = alert_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAlertRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAlert_request of this CreateAlertRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_name(self):
        """Gets the alert_name of this CreateAlertRequest.

        The name of the alert.

        :return: The alert_name of this CreateAlertRequest.
        :rtype: str
        """
        return self._alert_name

    @alert_name.setter
    def alert_name(self, alert_name):
        """Sets the alert_name of this CreateAlertRequest.

        The name of the alert.

        :param alert_name: The alert_name of this CreateAlertRequest.
        :type alert_name: str
        """
        if alert_name is None:
            raise ValueError("Invalid value for `alert_name`, must not be `None`")
        if alert_name is not None and len(alert_name) > 63:
            raise ValueError("Invalid value for `alert_name`, length must be less than or equal to `63`")
        if alert_name is not None and len(alert_name) < 1:
            raise ValueError("Invalid value for `alert_name`, length must be greater than or equal to `1`")
        if alert_name is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', alert_name):
            raise ValueError("Invalid value for `alert_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9\-_]*/`")

        self._alert_name = alert_name

    @property
    def alert_sensitivity_threshold(self):
        """Gets the alert_sensitivity_threshold of this CreateAlertRequest.

        An integer from 0 to 100 specifying the alert sensitivity threshold.

        :return: The alert_sensitivity_threshold of this CreateAlertRequest.
        :rtype: int
        """
        return self._alert_sensitivity_threshold

    @alert_sensitivity_threshold.setter
    def alert_sensitivity_threshold(self, alert_sensitivity_threshold):
        """Sets the alert_sensitivity_threshold of this CreateAlertRequest.

        An integer from 0 to 100 specifying the alert sensitivity threshold.

        :param alert_sensitivity_threshold: The alert_sensitivity_threshold of this CreateAlertRequest.
        :type alert_sensitivity_threshold: int
        """
        if alert_sensitivity_threshold is not None and alert_sensitivity_threshold > 100:
            raise ValueError("Invalid value for `alert_sensitivity_threshold`, must be a value less than or equal to `100`")
        if alert_sensitivity_threshold is not None and alert_sensitivity_threshold < 0:
            raise ValueError("Invalid value for `alert_sensitivity_threshold`, must be a value greater than or equal to `0`")

        self._alert_sensitivity_threshold = alert_sensitivity_threshold

    @property
    def alert_description(self):
        """Gets the alert_description of this CreateAlertRequest.

        A description of the alert.

        :return: The alert_description of this CreateAlertRequest.
        :rtype: str
        """
        return self._alert_description

    @alert_description.setter
    def alert_description(self, alert_description):
        """Sets the alert_description of this CreateAlertRequest.

        A description of the alert.

        :param alert_description: The alert_description of this CreateAlertRequest.
        :type alert_description: str
        """
        if alert_description is not None and len(alert_description) > 256:
            raise ValueError("Invalid value for `alert_description`, length must be less than or equal to `256`")
        if alert_description is not None and not re.search(r'.*\S.*', alert_description):
            raise ValueError("Invalid value for `alert_description`, must be a follow pattern or equal to `/.*\S.*/`")

        self._alert_description = alert_description

    @property
    def anomaly_detector_arn(self):
        """Gets the anomaly_detector_arn of this CreateAlertRequest.

        The ARN of the detector to which the alert is attached.

        :return: The anomaly_detector_arn of this CreateAlertRequest.
        :rtype: str
        """
        return self._anomaly_detector_arn

    @anomaly_detector_arn.setter
    def anomaly_detector_arn(self, anomaly_detector_arn):
        """Sets the anomaly_detector_arn of this CreateAlertRequest.

        The ARN of the detector to which the alert is attached.

        :param anomaly_detector_arn: The anomaly_detector_arn of this CreateAlertRequest.
        :type anomaly_detector_arn: str
        """
        if anomaly_detector_arn is None:
            raise ValueError("Invalid value for `anomaly_detector_arn`, must not be `None`")
        if anomaly_detector_arn is not None and len(anomaly_detector_arn) > 256:
            raise ValueError("Invalid value for `anomaly_detector_arn`, length must be less than or equal to `256`")
        if anomaly_detector_arn is not None and not re.search(r'arn:([a-z\d-]+):.*:.*:.*:.+', anomaly_detector_arn):
            raise ValueError("Invalid value for `anomaly_detector_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):.*:.*:.*:.+/`")

        self._anomaly_detector_arn = anomaly_detector_arn

    @property
    def action(self):
        """Gets the action of this CreateAlertRequest.


        :return: The action of this CreateAlertRequest.
        :rtype: CreateAlertRequestAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateAlertRequest.


        :param action: The action of this CreateAlertRequest.
        :type action: CreateAlertRequestAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def tags(self):
        """Gets the tags of this CreateAlertRequest.

        A list of <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> to apply to the alert.

        :return: The tags of this CreateAlertRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAlertRequest.

        A list of <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> to apply to the alert.

        :param tags: The tags of this CreateAlertRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def alert_filters(self):
        """Gets the alert_filters of this CreateAlertRequest.


        :return: The alert_filters of this CreateAlertRequest.
        :rtype: CreateAlertRequestAlertFilters
        """
        return self._alert_filters

    @alert_filters.setter
    def alert_filters(self, alert_filters):
        """Sets the alert_filters of this CreateAlertRequest.


        :param alert_filters: The alert_filters of this CreateAlertRequest.
        :type alert_filters: CreateAlertRequestAlertFilters
        """

        self._alert_filters = alert_filters
