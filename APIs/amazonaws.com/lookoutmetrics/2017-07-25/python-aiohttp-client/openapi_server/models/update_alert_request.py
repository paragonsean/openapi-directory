# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_alert_request_action import CreateAlertRequestAction
from openapi_server.models.create_alert_request_alert_filters import CreateAlertRequestAlertFilters
import re
from openapi_server import util


class UpdateAlertRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_arn: str=None, alert_description: str=None, alert_sensitivity_threshold: int=None, action: CreateAlertRequestAction=None, alert_filters: CreateAlertRequestAlertFilters=None):
        """UpdateAlertRequest - a model defined in OpenAPI

        :param alert_arn: The alert_arn of this UpdateAlertRequest.
        :param alert_description: The alert_description of this UpdateAlertRequest.
        :param alert_sensitivity_threshold: The alert_sensitivity_threshold of this UpdateAlertRequest.
        :param action: The action of this UpdateAlertRequest.
        :param alert_filters: The alert_filters of this UpdateAlertRequest.
        """
        self.openapi_types = {
            'alert_arn': str,
            'alert_description': str,
            'alert_sensitivity_threshold': int,
            'action': CreateAlertRequestAction,
            'alert_filters': CreateAlertRequestAlertFilters
        }

        self.attribute_map = {
            'alert_arn': 'AlertArn',
            'alert_description': 'AlertDescription',
            'alert_sensitivity_threshold': 'AlertSensitivityThreshold',
            'action': 'Action',
            'alert_filters': 'AlertFilters'
        }

        self._alert_arn = alert_arn
        self._alert_description = alert_description
        self._alert_sensitivity_threshold = alert_sensitivity_threshold
        self._action = action
        self._alert_filters = alert_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAlertRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAlert_request of this UpdateAlertRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_arn(self):
        """Gets the alert_arn of this UpdateAlertRequest.

        The ARN of the alert to update.

        :return: The alert_arn of this UpdateAlertRequest.
        :rtype: str
        """
        return self._alert_arn

    @alert_arn.setter
    def alert_arn(self, alert_arn):
        """Sets the alert_arn of this UpdateAlertRequest.

        The ARN of the alert to update.

        :param alert_arn: The alert_arn of this UpdateAlertRequest.
        :type alert_arn: str
        """
        if alert_arn is None:
            raise ValueError("Invalid value for `alert_arn`, must not be `None`")
        if alert_arn is not None and len(alert_arn) > 256:
            raise ValueError("Invalid value for `alert_arn`, length must be less than or equal to `256`")
        if alert_arn is not None and not re.search(r'arn:([a-z\d-]+):.*:.*:.*:.+', alert_arn):
            raise ValueError("Invalid value for `alert_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):.*:.*:.*:.+/`")

        self._alert_arn = alert_arn

    @property
    def alert_description(self):
        """Gets the alert_description of this UpdateAlertRequest.

        A description of the alert.

        :return: The alert_description of this UpdateAlertRequest.
        :rtype: str
        """
        return self._alert_description

    @alert_description.setter
    def alert_description(self, alert_description):
        """Sets the alert_description of this UpdateAlertRequest.

        A description of the alert.

        :param alert_description: The alert_description of this UpdateAlertRequest.
        :type alert_description: str
        """
        if alert_description is not None and len(alert_description) > 256:
            raise ValueError("Invalid value for `alert_description`, length must be less than or equal to `256`")
        if alert_description is not None and not re.search(r'.*\S.*', alert_description):
            raise ValueError("Invalid value for `alert_description`, must be a follow pattern or equal to `/.*\S.*/`")

        self._alert_description = alert_description

    @property
    def alert_sensitivity_threshold(self):
        """Gets the alert_sensitivity_threshold of this UpdateAlertRequest.

        An integer from 0 to 100 specifying the alert sensitivity threshold.

        :return: The alert_sensitivity_threshold of this UpdateAlertRequest.
        :rtype: int
        """
        return self._alert_sensitivity_threshold

    @alert_sensitivity_threshold.setter
    def alert_sensitivity_threshold(self, alert_sensitivity_threshold):
        """Sets the alert_sensitivity_threshold of this UpdateAlertRequest.

        An integer from 0 to 100 specifying the alert sensitivity threshold.

        :param alert_sensitivity_threshold: The alert_sensitivity_threshold of this UpdateAlertRequest.
        :type alert_sensitivity_threshold: int
        """
        if alert_sensitivity_threshold is not None and alert_sensitivity_threshold > 100:
            raise ValueError("Invalid value for `alert_sensitivity_threshold`, must be a value less than or equal to `100`")
        if alert_sensitivity_threshold is not None and alert_sensitivity_threshold < 0:
            raise ValueError("Invalid value for `alert_sensitivity_threshold`, must be a value greater than or equal to `0`")

        self._alert_sensitivity_threshold = alert_sensitivity_threshold

    @property
    def action(self):
        """Gets the action of this UpdateAlertRequest.


        :return: The action of this UpdateAlertRequest.
        :rtype: CreateAlertRequestAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UpdateAlertRequest.


        :param action: The action of this UpdateAlertRequest.
        :type action: CreateAlertRequestAction
        """

        self._action = action

    @property
    def alert_filters(self):
        """Gets the alert_filters of this UpdateAlertRequest.


        :return: The alert_filters of this UpdateAlertRequest.
        :rtype: CreateAlertRequestAlertFilters
        """
        return self._alert_filters

    @alert_filters.setter
    def alert_filters(self, alert_filters):
        """Sets the alert_filters of this UpdateAlertRequest.


        :param alert_filters: The alert_filters of this UpdateAlertRequest.
        :type alert_filters: CreateAlertRequestAlertFilters
        """

        self._alert_filters = alert_filters
