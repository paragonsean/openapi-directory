# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_format_descriptor import FileFormatDescriptor
from openapi_server import util


class GetSampleDataRequestS3SourceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, templated_path_list: List=None, historical_data_path_list: List=None, file_format_descriptor: FileFormatDescriptor=None):
        """GetSampleDataRequestS3SourceConfig - a model defined in OpenAPI

        :param role_arn: The role_arn of this GetSampleDataRequestS3SourceConfig.
        :param templated_path_list: The templated_path_list of this GetSampleDataRequestS3SourceConfig.
        :param historical_data_path_list: The historical_data_path_list of this GetSampleDataRequestS3SourceConfig.
        :param file_format_descriptor: The file_format_descriptor of this GetSampleDataRequestS3SourceConfig.
        """
        self.openapi_types = {
            'role_arn': str,
            'templated_path_list': List,
            'historical_data_path_list': List,
            'file_format_descriptor': FileFormatDescriptor
        }

        self.attribute_map = {
            'role_arn': 'RoleArn',
            'templated_path_list': 'TemplatedPathList',
            'historical_data_path_list': 'HistoricalDataPathList',
            'file_format_descriptor': 'FileFormatDescriptor'
        }

        self._role_arn = role_arn
        self._templated_path_list = templated_path_list
        self._historical_data_path_list = historical_data_path_list
        self._file_format_descriptor = file_format_descriptor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSampleDataRequestS3SourceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSampleDataRequest_S3SourceConfig of this GetSampleDataRequestS3SourceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this GetSampleDataRequestS3SourceConfig.


        :return: The role_arn of this GetSampleDataRequestS3SourceConfig.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this GetSampleDataRequestS3SourceConfig.


        :param role_arn: The role_arn of this GetSampleDataRequestS3SourceConfig.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def templated_path_list(self):
        """Gets the templated_path_list of this GetSampleDataRequestS3SourceConfig.


        :return: The templated_path_list of this GetSampleDataRequestS3SourceConfig.
        :rtype: List
        """
        return self._templated_path_list

    @templated_path_list.setter
    def templated_path_list(self, templated_path_list):
        """Sets the templated_path_list of this GetSampleDataRequestS3SourceConfig.


        :param templated_path_list: The templated_path_list of this GetSampleDataRequestS3SourceConfig.
        :type templated_path_list: List
        """

        self._templated_path_list = templated_path_list

    @property
    def historical_data_path_list(self):
        """Gets the historical_data_path_list of this GetSampleDataRequestS3SourceConfig.


        :return: The historical_data_path_list of this GetSampleDataRequestS3SourceConfig.
        :rtype: List
        """
        return self._historical_data_path_list

    @historical_data_path_list.setter
    def historical_data_path_list(self, historical_data_path_list):
        """Sets the historical_data_path_list of this GetSampleDataRequestS3SourceConfig.


        :param historical_data_path_list: The historical_data_path_list of this GetSampleDataRequestS3SourceConfig.
        :type historical_data_path_list: List
        """

        self._historical_data_path_list = historical_data_path_list

    @property
    def file_format_descriptor(self):
        """Gets the file_format_descriptor of this GetSampleDataRequestS3SourceConfig.


        :return: The file_format_descriptor of this GetSampleDataRequestS3SourceConfig.
        :rtype: FileFormatDescriptor
        """
        return self._file_format_descriptor

    @file_format_descriptor.setter
    def file_format_descriptor(self, file_format_descriptor):
        """Sets the file_format_descriptor of this GetSampleDataRequestS3SourceConfig.


        :param file_format_descriptor: The file_format_descriptor of this GetSampleDataRequestS3SourceConfig.
        :type file_format_descriptor: FileFormatDescriptor
        """
        if file_format_descriptor is None:
            raise ValueError("Invalid value for `file_format_descriptor`, must not be `None`")

        self._file_format_descriptor = file_format_descriptor
