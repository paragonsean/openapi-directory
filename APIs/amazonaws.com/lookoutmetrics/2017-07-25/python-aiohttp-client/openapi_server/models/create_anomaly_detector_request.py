# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_anomaly_detector_request_anomaly_detector_config import CreateAnomalyDetectorRequestAnomalyDetectorConfig
import re
from openapi_server import util


class CreateAnomalyDetectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomaly_detector_name: str=None, anomaly_detector_description: str=None, anomaly_detector_config: CreateAnomalyDetectorRequestAnomalyDetectorConfig=None, kms_key_arn: str=None, tags: Dict[str, str]=None):
        """CreateAnomalyDetectorRequest - a model defined in OpenAPI

        :param anomaly_detector_name: The anomaly_detector_name of this CreateAnomalyDetectorRequest.
        :param anomaly_detector_description: The anomaly_detector_description of this CreateAnomalyDetectorRequest.
        :param anomaly_detector_config: The anomaly_detector_config of this CreateAnomalyDetectorRequest.
        :param kms_key_arn: The kms_key_arn of this CreateAnomalyDetectorRequest.
        :param tags: The tags of this CreateAnomalyDetectorRequest.
        """
        self.openapi_types = {
            'anomaly_detector_name': str,
            'anomaly_detector_description': str,
            'anomaly_detector_config': CreateAnomalyDetectorRequestAnomalyDetectorConfig,
            'kms_key_arn': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'anomaly_detector_name': 'AnomalyDetectorName',
            'anomaly_detector_description': 'AnomalyDetectorDescription',
            'anomaly_detector_config': 'AnomalyDetectorConfig',
            'kms_key_arn': 'KmsKeyArn',
            'tags': 'Tags'
        }

        self._anomaly_detector_name = anomaly_detector_name
        self._anomaly_detector_description = anomaly_detector_description
        self._anomaly_detector_config = anomaly_detector_config
        self._kms_key_arn = kms_key_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnomalyDetectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAnomalyDetector_request of this CreateAnomalyDetectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomaly_detector_name(self):
        """Gets the anomaly_detector_name of this CreateAnomalyDetectorRequest.

        The name of the detector.

        :return: The anomaly_detector_name of this CreateAnomalyDetectorRequest.
        :rtype: str
        """
        return self._anomaly_detector_name

    @anomaly_detector_name.setter
    def anomaly_detector_name(self, anomaly_detector_name):
        """Sets the anomaly_detector_name of this CreateAnomalyDetectorRequest.

        The name of the detector.

        :param anomaly_detector_name: The anomaly_detector_name of this CreateAnomalyDetectorRequest.
        :type anomaly_detector_name: str
        """
        if anomaly_detector_name is None:
            raise ValueError("Invalid value for `anomaly_detector_name`, must not be `None`")
        if anomaly_detector_name is not None and len(anomaly_detector_name) > 63:
            raise ValueError("Invalid value for `anomaly_detector_name`, length must be less than or equal to `63`")
        if anomaly_detector_name is not None and len(anomaly_detector_name) < 1:
            raise ValueError("Invalid value for `anomaly_detector_name`, length must be greater than or equal to `1`")
        if anomaly_detector_name is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', anomaly_detector_name):
            raise ValueError("Invalid value for `anomaly_detector_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9\-_]*/`")

        self._anomaly_detector_name = anomaly_detector_name

    @property
    def anomaly_detector_description(self):
        """Gets the anomaly_detector_description of this CreateAnomalyDetectorRequest.

        A description of the detector.

        :return: The anomaly_detector_description of this CreateAnomalyDetectorRequest.
        :rtype: str
        """
        return self._anomaly_detector_description

    @anomaly_detector_description.setter
    def anomaly_detector_description(self, anomaly_detector_description):
        """Sets the anomaly_detector_description of this CreateAnomalyDetectorRequest.

        A description of the detector.

        :param anomaly_detector_description: The anomaly_detector_description of this CreateAnomalyDetectorRequest.
        :type anomaly_detector_description: str
        """
        if anomaly_detector_description is not None and len(anomaly_detector_description) > 256:
            raise ValueError("Invalid value for `anomaly_detector_description`, length must be less than or equal to `256`")
        if anomaly_detector_description is not None and len(anomaly_detector_description) < 1:
            raise ValueError("Invalid value for `anomaly_detector_description`, length must be greater than or equal to `1`")
        if anomaly_detector_description is not None and not re.search(r'.*\S.*', anomaly_detector_description):
            raise ValueError("Invalid value for `anomaly_detector_description`, must be a follow pattern or equal to `/.*\S.*/`")

        self._anomaly_detector_description = anomaly_detector_description

    @property
    def anomaly_detector_config(self):
        """Gets the anomaly_detector_config of this CreateAnomalyDetectorRequest.


        :return: The anomaly_detector_config of this CreateAnomalyDetectorRequest.
        :rtype: CreateAnomalyDetectorRequestAnomalyDetectorConfig
        """
        return self._anomaly_detector_config

    @anomaly_detector_config.setter
    def anomaly_detector_config(self, anomaly_detector_config):
        """Sets the anomaly_detector_config of this CreateAnomalyDetectorRequest.


        :param anomaly_detector_config: The anomaly_detector_config of this CreateAnomalyDetectorRequest.
        :type anomaly_detector_config: CreateAnomalyDetectorRequestAnomalyDetectorConfig
        """
        if anomaly_detector_config is None:
            raise ValueError("Invalid value for `anomaly_detector_config`, must not be `None`")

        self._anomaly_detector_config = anomaly_detector_config

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this CreateAnomalyDetectorRequest.

        The ARN of the KMS key to use to encrypt your data.

        :return: The kms_key_arn of this CreateAnomalyDetectorRequest.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this CreateAnomalyDetectorRequest.

        The ARN of the KMS key to use to encrypt your data.

        :param kms_key_arn: The kms_key_arn of this CreateAnomalyDetectorRequest.
        :type kms_key_arn: str
        """
        if kms_key_arn is not None and len(kms_key_arn) > 2048:
            raise ValueError("Invalid value for `kms_key_arn`, length must be less than or equal to `2048`")
        if kms_key_arn is not None and len(kms_key_arn) < 20:
            raise ValueError("Invalid value for `kms_key_arn`, length must be greater than or equal to `20`")
        if kms_key_arn is not None and not re.search(r'arn:aws.*:kms:.*:[0-9]{12}:key\/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}', kms_key_arn):
            raise ValueError("Invalid value for `kms_key_arn`, must be a follow pattern or equal to `/arn:aws.*:kms:.*:[0-9]{12}:key\/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}/`")

        self._kms_key_arn = kms_key_arn

    @property
    def tags(self):
        """Gets the tags of this CreateAnomalyDetectorRequest.

        A list of <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> to apply to the anomaly detector.

        :return: The tags of this CreateAnomalyDetectorRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAnomalyDetectorRequest.

        A list of <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\">tags</a> to apply to the anomaly detector.

        :param tags: The tags of this CreateAnomalyDetectorRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
