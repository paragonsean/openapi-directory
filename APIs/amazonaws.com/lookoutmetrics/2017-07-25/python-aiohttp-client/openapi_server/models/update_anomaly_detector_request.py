# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_anomaly_detector_request_anomaly_detector_config import CreateAnomalyDetectorRequestAnomalyDetectorConfig
import re
from openapi_server import util


class UpdateAnomalyDetectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomaly_detector_arn: str=None, kms_key_arn: str=None, anomaly_detector_description: str=None, anomaly_detector_config: CreateAnomalyDetectorRequestAnomalyDetectorConfig=None):
        """UpdateAnomalyDetectorRequest - a model defined in OpenAPI

        :param anomaly_detector_arn: The anomaly_detector_arn of this UpdateAnomalyDetectorRequest.
        :param kms_key_arn: The kms_key_arn of this UpdateAnomalyDetectorRequest.
        :param anomaly_detector_description: The anomaly_detector_description of this UpdateAnomalyDetectorRequest.
        :param anomaly_detector_config: The anomaly_detector_config of this UpdateAnomalyDetectorRequest.
        """
        self.openapi_types = {
            'anomaly_detector_arn': str,
            'kms_key_arn': str,
            'anomaly_detector_description': str,
            'anomaly_detector_config': CreateAnomalyDetectorRequestAnomalyDetectorConfig
        }

        self.attribute_map = {
            'anomaly_detector_arn': 'AnomalyDetectorArn',
            'kms_key_arn': 'KmsKeyArn',
            'anomaly_detector_description': 'AnomalyDetectorDescription',
            'anomaly_detector_config': 'AnomalyDetectorConfig'
        }

        self._anomaly_detector_arn = anomaly_detector_arn
        self._kms_key_arn = kms_key_arn
        self._anomaly_detector_description = anomaly_detector_description
        self._anomaly_detector_config = anomaly_detector_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAnomalyDetectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAnomalyDetector_request of this UpdateAnomalyDetectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomaly_detector_arn(self):
        """Gets the anomaly_detector_arn of this UpdateAnomalyDetectorRequest.

        The ARN of the detector to update.

        :return: The anomaly_detector_arn of this UpdateAnomalyDetectorRequest.
        :rtype: str
        """
        return self._anomaly_detector_arn

    @anomaly_detector_arn.setter
    def anomaly_detector_arn(self, anomaly_detector_arn):
        """Sets the anomaly_detector_arn of this UpdateAnomalyDetectorRequest.

        The ARN of the detector to update.

        :param anomaly_detector_arn: The anomaly_detector_arn of this UpdateAnomalyDetectorRequest.
        :type anomaly_detector_arn: str
        """
        if anomaly_detector_arn is None:
            raise ValueError("Invalid value for `anomaly_detector_arn`, must not be `None`")
        if anomaly_detector_arn is not None and len(anomaly_detector_arn) > 256:
            raise ValueError("Invalid value for `anomaly_detector_arn`, length must be less than or equal to `256`")
        if anomaly_detector_arn is not None and not re.search(r'arn:([a-z\d-]+):.*:.*:.*:.+', anomaly_detector_arn):
            raise ValueError("Invalid value for `anomaly_detector_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):.*:.*:.*:.+/`")

        self._anomaly_detector_arn = anomaly_detector_arn

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this UpdateAnomalyDetectorRequest.

        The Amazon Resource Name (ARN) of an AWS KMS encryption key.

        :return: The kms_key_arn of this UpdateAnomalyDetectorRequest.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this UpdateAnomalyDetectorRequest.

        The Amazon Resource Name (ARN) of an AWS KMS encryption key.

        :param kms_key_arn: The kms_key_arn of this UpdateAnomalyDetectorRequest.
        :type kms_key_arn: str
        """
        if kms_key_arn is not None and len(kms_key_arn) > 2048:
            raise ValueError("Invalid value for `kms_key_arn`, length must be less than or equal to `2048`")
        if kms_key_arn is not None and len(kms_key_arn) < 20:
            raise ValueError("Invalid value for `kms_key_arn`, length must be greater than or equal to `20`")
        if kms_key_arn is not None and not re.search(r'arn:aws.*:kms:.*:[0-9]{12}:key\/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}', kms_key_arn):
            raise ValueError("Invalid value for `kms_key_arn`, must be a follow pattern or equal to `/arn:aws.*:kms:.*:[0-9]{12}:key\/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}/`")

        self._kms_key_arn = kms_key_arn

    @property
    def anomaly_detector_description(self):
        """Gets the anomaly_detector_description of this UpdateAnomalyDetectorRequest.

        The updated detector description.

        :return: The anomaly_detector_description of this UpdateAnomalyDetectorRequest.
        :rtype: str
        """
        return self._anomaly_detector_description

    @anomaly_detector_description.setter
    def anomaly_detector_description(self, anomaly_detector_description):
        """Sets the anomaly_detector_description of this UpdateAnomalyDetectorRequest.

        The updated detector description.

        :param anomaly_detector_description: The anomaly_detector_description of this UpdateAnomalyDetectorRequest.
        :type anomaly_detector_description: str
        """
        if anomaly_detector_description is not None and len(anomaly_detector_description) > 256:
            raise ValueError("Invalid value for `anomaly_detector_description`, length must be less than or equal to `256`")
        if anomaly_detector_description is not None and len(anomaly_detector_description) < 1:
            raise ValueError("Invalid value for `anomaly_detector_description`, length must be greater than or equal to `1`")
        if anomaly_detector_description is not None and not re.search(r'.*\S.*', anomaly_detector_description):
            raise ValueError("Invalid value for `anomaly_detector_description`, must be a follow pattern or equal to `/.*\S.*/`")

        self._anomaly_detector_description = anomaly_detector_description

    @property
    def anomaly_detector_config(self):
        """Gets the anomaly_detector_config of this UpdateAnomalyDetectorRequest.


        :return: The anomaly_detector_config of this UpdateAnomalyDetectorRequest.
        :rtype: CreateAnomalyDetectorRequestAnomalyDetectorConfig
        """
        return self._anomaly_detector_config

    @anomaly_detector_config.setter
    def anomaly_detector_config(self, anomaly_detector_config):
        """Sets the anomaly_detector_config of this UpdateAnomalyDetectorRequest.


        :param anomaly_detector_config: The anomaly_detector_config of this UpdateAnomalyDetectorRequest.
        :type anomaly_detector_config: CreateAnomalyDetectorRequestAnomalyDetectorConfig
        """

        self._anomaly_detector_config = anomaly_detector_config
