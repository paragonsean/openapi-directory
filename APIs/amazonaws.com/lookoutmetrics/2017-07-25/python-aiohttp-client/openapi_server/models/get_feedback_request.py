# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_feedback_request_anomaly_group_time_series_feedback import GetFeedbackRequestAnomalyGroupTimeSeriesFeedback
import re
from openapi_server import util


class GetFeedbackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomaly_detector_arn: str=None, anomaly_group_time_series_feedback: GetFeedbackRequestAnomalyGroupTimeSeriesFeedback=None, max_results: int=None, next_token: str=None):
        """GetFeedbackRequest - a model defined in OpenAPI

        :param anomaly_detector_arn: The anomaly_detector_arn of this GetFeedbackRequest.
        :param anomaly_group_time_series_feedback: The anomaly_group_time_series_feedback of this GetFeedbackRequest.
        :param max_results: The max_results of this GetFeedbackRequest.
        :param next_token: The next_token of this GetFeedbackRequest.
        """
        self.openapi_types = {
            'anomaly_detector_arn': str,
            'anomaly_group_time_series_feedback': GetFeedbackRequestAnomalyGroupTimeSeriesFeedback,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'anomaly_detector_arn': 'AnomalyDetectorArn',
            'anomaly_group_time_series_feedback': 'AnomalyGroupTimeSeriesFeedback',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._anomaly_detector_arn = anomaly_detector_arn
        self._anomaly_group_time_series_feedback = anomaly_group_time_series_feedback
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFeedbackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFeedback_request of this GetFeedbackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomaly_detector_arn(self):
        """Gets the anomaly_detector_arn of this GetFeedbackRequest.

        The Amazon Resource Name (ARN) of the anomaly detector.

        :return: The anomaly_detector_arn of this GetFeedbackRequest.
        :rtype: str
        """
        return self._anomaly_detector_arn

    @anomaly_detector_arn.setter
    def anomaly_detector_arn(self, anomaly_detector_arn):
        """Sets the anomaly_detector_arn of this GetFeedbackRequest.

        The Amazon Resource Name (ARN) of the anomaly detector.

        :param anomaly_detector_arn: The anomaly_detector_arn of this GetFeedbackRequest.
        :type anomaly_detector_arn: str
        """
        if anomaly_detector_arn is None:
            raise ValueError("Invalid value for `anomaly_detector_arn`, must not be `None`")
        if anomaly_detector_arn is not None and len(anomaly_detector_arn) > 256:
            raise ValueError("Invalid value for `anomaly_detector_arn`, length must be less than or equal to `256`")
        if anomaly_detector_arn is not None and not re.search(r'arn:([a-z\d-]+):.*:.*:.*:.+', anomaly_detector_arn):
            raise ValueError("Invalid value for `anomaly_detector_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):.*:.*:.*:.+/`")

        self._anomaly_detector_arn = anomaly_detector_arn

    @property
    def anomaly_group_time_series_feedback(self):
        """Gets the anomaly_group_time_series_feedback of this GetFeedbackRequest.


        :return: The anomaly_group_time_series_feedback of this GetFeedbackRequest.
        :rtype: GetFeedbackRequestAnomalyGroupTimeSeriesFeedback
        """
        return self._anomaly_group_time_series_feedback

    @anomaly_group_time_series_feedback.setter
    def anomaly_group_time_series_feedback(self, anomaly_group_time_series_feedback):
        """Sets the anomaly_group_time_series_feedback of this GetFeedbackRequest.


        :param anomaly_group_time_series_feedback: The anomaly_group_time_series_feedback of this GetFeedbackRequest.
        :type anomaly_group_time_series_feedback: GetFeedbackRequestAnomalyGroupTimeSeriesFeedback
        """
        if anomaly_group_time_series_feedback is None:
            raise ValueError("Invalid value for `anomaly_group_time_series_feedback`, must not be `None`")

        self._anomaly_group_time_series_feedback = anomaly_group_time_series_feedback

    @property
    def max_results(self):
        """Gets the max_results of this GetFeedbackRequest.

        The maximum number of results to return.

        :return: The max_results of this GetFeedbackRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetFeedbackRequest.

        The maximum number of results to return.

        :param max_results: The max_results of this GetFeedbackRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetFeedbackRequest.

        Specify the pagination token that's returned by a previous request to retrieve the next page of results.

        :return: The next_token of this GetFeedbackRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetFeedbackRequest.

        Specify the pagination token that's returned by a previous request to retrieve the next page of results.

        :param next_token: The next_token of this GetFeedbackRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 3000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `3000`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'.*\S.*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._next_token = next_token
