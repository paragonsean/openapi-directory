# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_function import AggregationFunction
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, aggregation_function: AggregationFunction=None, namespace: str=None):
        """Metric - a model defined in OpenAPI

        :param metric_name: The metric_name of this Metric.
        :param aggregation_function: The aggregation_function of this Metric.
        :param namespace: The namespace of this Metric.
        """
        self.openapi_types = {
            'metric_name': str,
            'aggregation_function': AggregationFunction,
            'namespace': str
        }

        self.attribute_map = {
            'metric_name': 'MetricName',
            'aggregation_function': 'AggregationFunction',
            'namespace': 'Namespace'
        }

        self._metric_name = metric_name
        self._aggregation_function = aggregation_function
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this Metric.


        :return: The metric_name of this Metric.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this Metric.


        :param metric_name: The metric_name of this Metric.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def aggregation_function(self):
        """Gets the aggregation_function of this Metric.


        :return: The aggregation_function of this Metric.
        :rtype: AggregationFunction
        """
        return self._aggregation_function

    @aggregation_function.setter
    def aggregation_function(self, aggregation_function):
        """Sets the aggregation_function of this Metric.


        :param aggregation_function: The aggregation_function of this Metric.
        :type aggregation_function: AggregationFunction
        """
        if aggregation_function is None:
            raise ValueError("Invalid value for `aggregation_function`, must not be `None`")

        self._aggregation_function = aggregation_function

    @property
    def namespace(self):
        """Gets the namespace of this Metric.


        :return: The namespace of this Metric.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Metric.


        :param namespace: The namespace of this Metric.
        :type namespace: str
        """

        self._namespace = namespace
