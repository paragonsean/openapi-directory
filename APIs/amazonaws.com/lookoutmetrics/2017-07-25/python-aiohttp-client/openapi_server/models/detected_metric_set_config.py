# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detected_metric_set_config_metric_set_frequency import DetectedMetricSetConfigMetricSetFrequency
from openapi_server.models.detected_metric_set_config_metric_source import DetectedMetricSetConfigMetricSource
from openapi_server.models.detected_metric_set_config_offset import DetectedMetricSetConfigOffset
from openapi_server import util


class DetectedMetricSetConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset: DetectedMetricSetConfigOffset=None, metric_set_frequency: DetectedMetricSetConfigMetricSetFrequency=None, metric_source: DetectedMetricSetConfigMetricSource=None):
        """DetectedMetricSetConfig - a model defined in OpenAPI

        :param offset: The offset of this DetectedMetricSetConfig.
        :param metric_set_frequency: The metric_set_frequency of this DetectedMetricSetConfig.
        :param metric_source: The metric_source of this DetectedMetricSetConfig.
        """
        self.openapi_types = {
            'offset': DetectedMetricSetConfigOffset,
            'metric_set_frequency': DetectedMetricSetConfigMetricSetFrequency,
            'metric_source': DetectedMetricSetConfigMetricSource
        }

        self.attribute_map = {
            'offset': 'Offset',
            'metric_set_frequency': 'MetricSetFrequency',
            'metric_source': 'MetricSource'
        }

        self._offset = offset
        self._metric_set_frequency = metric_set_frequency
        self._metric_source = metric_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedMetricSetConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectedMetricSetConfig of this DetectedMetricSetConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this DetectedMetricSetConfig.


        :return: The offset of this DetectedMetricSetConfig.
        :rtype: DetectedMetricSetConfigOffset
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DetectedMetricSetConfig.


        :param offset: The offset of this DetectedMetricSetConfig.
        :type offset: DetectedMetricSetConfigOffset
        """

        self._offset = offset

    @property
    def metric_set_frequency(self):
        """Gets the metric_set_frequency of this DetectedMetricSetConfig.


        :return: The metric_set_frequency of this DetectedMetricSetConfig.
        :rtype: DetectedMetricSetConfigMetricSetFrequency
        """
        return self._metric_set_frequency

    @metric_set_frequency.setter
    def metric_set_frequency(self, metric_set_frequency):
        """Sets the metric_set_frequency of this DetectedMetricSetConfig.


        :param metric_set_frequency: The metric_set_frequency of this DetectedMetricSetConfig.
        :type metric_set_frequency: DetectedMetricSetConfigMetricSetFrequency
        """

        self._metric_set_frequency = metric_set_frequency

    @property
    def metric_source(self):
        """Gets the metric_source of this DetectedMetricSetConfig.


        :return: The metric_source of this DetectedMetricSetConfig.
        :rtype: DetectedMetricSetConfigMetricSource
        """
        return self._metric_source

    @metric_source.setter
    def metric_source(self, metric_source):
        """Sets the metric_source of this DetectedMetricSetConfig.


        :param metric_source: The metric_source of this DetectedMetricSetConfig.
        :type metric_source: DetectedMetricSetConfigMetricSource
        """

        self._metric_source = metric_source
