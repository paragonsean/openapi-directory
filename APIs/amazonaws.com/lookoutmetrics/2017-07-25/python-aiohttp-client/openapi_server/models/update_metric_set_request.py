# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_metric_set_request_metric_source import CreateMetricSetRequestMetricSource
from openapi_server.models.create_metric_set_request_timestamp_column import CreateMetricSetRequestTimestampColumn
from openapi_server.models.metric import Metric
from openapi_server.models.metric_set_dimension_filter import MetricSetDimensionFilter
import re
from openapi_server import util


class UpdateMetricSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_set_arn: str=None, metric_set_description: str=None, metric_list: List[Metric]=None, offset: int=None, timestamp_column: CreateMetricSetRequestTimestampColumn=None, dimension_list: List[str]=None, metric_set_frequency: str=None, metric_source: CreateMetricSetRequestMetricSource=None, dimension_filter_list: List[MetricSetDimensionFilter]=None):
        """UpdateMetricSetRequest - a model defined in OpenAPI

        :param metric_set_arn: The metric_set_arn of this UpdateMetricSetRequest.
        :param metric_set_description: The metric_set_description of this UpdateMetricSetRequest.
        :param metric_list: The metric_list of this UpdateMetricSetRequest.
        :param offset: The offset of this UpdateMetricSetRequest.
        :param timestamp_column: The timestamp_column of this UpdateMetricSetRequest.
        :param dimension_list: The dimension_list of this UpdateMetricSetRequest.
        :param metric_set_frequency: The metric_set_frequency of this UpdateMetricSetRequest.
        :param metric_source: The metric_source of this UpdateMetricSetRequest.
        :param dimension_filter_list: The dimension_filter_list of this UpdateMetricSetRequest.
        """
        self.openapi_types = {
            'metric_set_arn': str,
            'metric_set_description': str,
            'metric_list': List[Metric],
            'offset': int,
            'timestamp_column': CreateMetricSetRequestTimestampColumn,
            'dimension_list': List[str],
            'metric_set_frequency': str,
            'metric_source': CreateMetricSetRequestMetricSource,
            'dimension_filter_list': List[MetricSetDimensionFilter]
        }

        self.attribute_map = {
            'metric_set_arn': 'MetricSetArn',
            'metric_set_description': 'MetricSetDescription',
            'metric_list': 'MetricList',
            'offset': 'Offset',
            'timestamp_column': 'TimestampColumn',
            'dimension_list': 'DimensionList',
            'metric_set_frequency': 'MetricSetFrequency',
            'metric_source': 'MetricSource',
            'dimension_filter_list': 'DimensionFilterList'
        }

        self._metric_set_arn = metric_set_arn
        self._metric_set_description = metric_set_description
        self._metric_list = metric_list
        self._offset = offset
        self._timestamp_column = timestamp_column
        self._dimension_list = dimension_list
        self._metric_set_frequency = metric_set_frequency
        self._metric_source = metric_source
        self._dimension_filter_list = dimension_filter_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMetricSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMetricSet_request of this UpdateMetricSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_set_arn(self):
        """Gets the metric_set_arn of this UpdateMetricSetRequest.

        The ARN of the dataset to update.

        :return: The metric_set_arn of this UpdateMetricSetRequest.
        :rtype: str
        """
        return self._metric_set_arn

    @metric_set_arn.setter
    def metric_set_arn(self, metric_set_arn):
        """Sets the metric_set_arn of this UpdateMetricSetRequest.

        The ARN of the dataset to update.

        :param metric_set_arn: The metric_set_arn of this UpdateMetricSetRequest.
        :type metric_set_arn: str
        """
        if metric_set_arn is None:
            raise ValueError("Invalid value for `metric_set_arn`, must not be `None`")
        if metric_set_arn is not None and len(metric_set_arn) > 256:
            raise ValueError("Invalid value for `metric_set_arn`, length must be less than or equal to `256`")
        if metric_set_arn is not None and not re.search(r'arn:([a-z\d-]+):.*:.*:.*:.+', metric_set_arn):
            raise ValueError("Invalid value for `metric_set_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):.*:.*:.*:.+/`")

        self._metric_set_arn = metric_set_arn

    @property
    def metric_set_description(self):
        """Gets the metric_set_description of this UpdateMetricSetRequest.

        The dataset's description.

        :return: The metric_set_description of this UpdateMetricSetRequest.
        :rtype: str
        """
        return self._metric_set_description

    @metric_set_description.setter
    def metric_set_description(self, metric_set_description):
        """Sets the metric_set_description of this UpdateMetricSetRequest.

        The dataset's description.

        :param metric_set_description: The metric_set_description of this UpdateMetricSetRequest.
        :type metric_set_description: str
        """
        if metric_set_description is not None and len(metric_set_description) > 256:
            raise ValueError("Invalid value for `metric_set_description`, length must be less than or equal to `256`")
        if metric_set_description is not None and len(metric_set_description) < 1:
            raise ValueError("Invalid value for `metric_set_description`, length must be greater than or equal to `1`")
        if metric_set_description is not None and not re.search(r'.*\S.*', metric_set_description):
            raise ValueError("Invalid value for `metric_set_description`, must be a follow pattern or equal to `/.*\S.*/`")

        self._metric_set_description = metric_set_description

    @property
    def metric_list(self):
        """Gets the metric_list of this UpdateMetricSetRequest.

        The metric list.

        :return: The metric_list of this UpdateMetricSetRequest.
        :rtype: List[Metric]
        """
        return self._metric_list

    @metric_list.setter
    def metric_list(self, metric_list):
        """Sets the metric_list of this UpdateMetricSetRequest.

        The metric list.

        :param metric_list: The metric_list of this UpdateMetricSetRequest.
        :type metric_list: List[Metric]
        """
        if metric_list is not None and len(metric_list) < 1:
            raise ValueError("Invalid value for `metric_list`, number of items must be greater than or equal to `1`")

        self._metric_list = metric_list

    @property
    def offset(self):
        """Gets the offset of this UpdateMetricSetRequest.

        After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.

        :return: The offset of this UpdateMetricSetRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this UpdateMetricSetRequest.

        After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.

        :param offset: The offset of this UpdateMetricSetRequest.
        :type offset: int
        """
        if offset is not None and offset > 432000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `432000`")
        if offset is not None and offset < 0:
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")

        self._offset = offset

    @property
    def timestamp_column(self):
        """Gets the timestamp_column of this UpdateMetricSetRequest.


        :return: The timestamp_column of this UpdateMetricSetRequest.
        :rtype: CreateMetricSetRequestTimestampColumn
        """
        return self._timestamp_column

    @timestamp_column.setter
    def timestamp_column(self, timestamp_column):
        """Sets the timestamp_column of this UpdateMetricSetRequest.


        :param timestamp_column: The timestamp_column of this UpdateMetricSetRequest.
        :type timestamp_column: CreateMetricSetRequestTimestampColumn
        """

        self._timestamp_column = timestamp_column

    @property
    def dimension_list(self):
        """Gets the dimension_list of this UpdateMetricSetRequest.

        The dimension list.

        :return: The dimension_list of this UpdateMetricSetRequest.
        :rtype: List[str]
        """
        return self._dimension_list

    @dimension_list.setter
    def dimension_list(self, dimension_list):
        """Sets the dimension_list of this UpdateMetricSetRequest.

        The dimension list.

        :param dimension_list: The dimension_list of this UpdateMetricSetRequest.
        :type dimension_list: List[str]
        """
        if dimension_list is not None and len(dimension_list) < 1:
            raise ValueError("Invalid value for `dimension_list`, number of items must be greater than or equal to `1`")

        self._dimension_list = dimension_list

    @property
    def metric_set_frequency(self):
        """Gets the metric_set_frequency of this UpdateMetricSetRequest.

        The dataset's interval.

        :return: The metric_set_frequency of this UpdateMetricSetRequest.
        :rtype: str
        """
        return self._metric_set_frequency

    @metric_set_frequency.setter
    def metric_set_frequency(self, metric_set_frequency):
        """Sets the metric_set_frequency of this UpdateMetricSetRequest.

        The dataset's interval.

        :param metric_set_frequency: The metric_set_frequency of this UpdateMetricSetRequest.
        :type metric_set_frequency: str
        """
        allowed_values = ["P1D", "PT1H", "PT10M", "PT5M"]  # noqa: E501
        if metric_set_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_set_frequency` ({0}), must be one of {1}"
                .format(metric_set_frequency, allowed_values)
            )

        self._metric_set_frequency = metric_set_frequency

    @property
    def metric_source(self):
        """Gets the metric_source of this UpdateMetricSetRequest.


        :return: The metric_source of this UpdateMetricSetRequest.
        :rtype: CreateMetricSetRequestMetricSource
        """
        return self._metric_source

    @metric_source.setter
    def metric_source(self, metric_source):
        """Sets the metric_source of this UpdateMetricSetRequest.


        :param metric_source: The metric_source of this UpdateMetricSetRequest.
        :type metric_source: CreateMetricSetRequestMetricSource
        """

        self._metric_source = metric_source

    @property
    def dimension_filter_list(self):
        """Gets the dimension_filter_list of this UpdateMetricSetRequest.

        Describes a list of filters for choosing specific dimensions and specific values. Each filter consists of the dimension and one of its values that you want to include. When multiple dimensions or values are specified, the dimensions are joined with an AND operation and the values are joined with an OR operation.

        :return: The dimension_filter_list of this UpdateMetricSetRequest.
        :rtype: List[MetricSetDimensionFilter]
        """
        return self._dimension_filter_list

    @dimension_filter_list.setter
    def dimension_filter_list(self, dimension_filter_list):
        """Sets the dimension_filter_list of this UpdateMetricSetRequest.

        Describes a list of filters for choosing specific dimensions and specific values. Each filter consists of the dimension and one of its values that you want to include. When multiple dimensions or values are specified, the dimensions are joined with an AND operation and the values are joined with an OR operation.

        :param dimension_filter_list: The dimension_filter_list of this UpdateMetricSetRequest.
        :type dimension_filter_list: List[MetricSetDimensionFilter]
        """

        self._dimension_filter_list = dimension_filter_list
