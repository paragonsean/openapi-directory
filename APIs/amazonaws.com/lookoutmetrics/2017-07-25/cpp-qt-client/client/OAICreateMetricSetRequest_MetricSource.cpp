/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMetricSetRequest_MetricSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMetricSetRequest_MetricSource::OAICreateMetricSetRequest_MetricSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMetricSetRequest_MetricSource::OAICreateMetricSetRequest_MetricSource() {
    this->initializeModel();
}

OAICreateMetricSetRequest_MetricSource::~OAICreateMetricSetRequest_MetricSource() {}

void OAICreateMetricSetRequest_MetricSource::initializeModel() {

    m_s3_source_config_isSet = false;
    m_s3_source_config_isValid = false;

    m_app_flow_config_isSet = false;
    m_app_flow_config_isValid = false;

    m_cloud_watch_config_isSet = false;
    m_cloud_watch_config_isValid = false;

    m_rds_source_config_isSet = false;
    m_rds_source_config_isValid = false;

    m_redshift_source_config_isSet = false;
    m_redshift_source_config_isValid = false;

    m_athena_source_config_isSet = false;
    m_athena_source_config_isValid = false;
}

void OAICreateMetricSetRequest_MetricSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMetricSetRequest_MetricSource::fromJsonObject(QJsonObject json) {

    m_s3_source_config_isValid = ::OpenAPI::fromJsonValue(m_s3_source_config, json[QString("S3SourceConfig")]);
    m_s3_source_config_isSet = !json[QString("S3SourceConfig")].isNull() && m_s3_source_config_isValid;

    m_app_flow_config_isValid = ::OpenAPI::fromJsonValue(m_app_flow_config, json[QString("AppFlowConfig")]);
    m_app_flow_config_isSet = !json[QString("AppFlowConfig")].isNull() && m_app_flow_config_isValid;

    m_cloud_watch_config_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_config, json[QString("CloudWatchConfig")]);
    m_cloud_watch_config_isSet = !json[QString("CloudWatchConfig")].isNull() && m_cloud_watch_config_isValid;

    m_rds_source_config_isValid = ::OpenAPI::fromJsonValue(m_rds_source_config, json[QString("RDSSourceConfig")]);
    m_rds_source_config_isSet = !json[QString("RDSSourceConfig")].isNull() && m_rds_source_config_isValid;

    m_redshift_source_config_isValid = ::OpenAPI::fromJsonValue(m_redshift_source_config, json[QString("RedshiftSourceConfig")]);
    m_redshift_source_config_isSet = !json[QString("RedshiftSourceConfig")].isNull() && m_redshift_source_config_isValid;

    m_athena_source_config_isValid = ::OpenAPI::fromJsonValue(m_athena_source_config, json[QString("AthenaSourceConfig")]);
    m_athena_source_config_isSet = !json[QString("AthenaSourceConfig")].isNull() && m_athena_source_config_isValid;
}

QString OAICreateMetricSetRequest_MetricSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMetricSetRequest_MetricSource::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_source_config.isSet()) {
        obj.insert(QString("S3SourceConfig"), ::OpenAPI::toJsonValue(m_s3_source_config));
    }
    if (m_app_flow_config.isSet()) {
        obj.insert(QString("AppFlowConfig"), ::OpenAPI::toJsonValue(m_app_flow_config));
    }
    if (m_cloud_watch_config.isSet()) {
        obj.insert(QString("CloudWatchConfig"), ::OpenAPI::toJsonValue(m_cloud_watch_config));
    }
    if (m_rds_source_config.isSet()) {
        obj.insert(QString("RDSSourceConfig"), ::OpenAPI::toJsonValue(m_rds_source_config));
    }
    if (m_redshift_source_config.isSet()) {
        obj.insert(QString("RedshiftSourceConfig"), ::OpenAPI::toJsonValue(m_redshift_source_config));
    }
    if (m_athena_source_config.isSet()) {
        obj.insert(QString("AthenaSourceConfig"), ::OpenAPI::toJsonValue(m_athena_source_config));
    }
    return obj;
}

OAIS3SourceConfig OAICreateMetricSetRequest_MetricSource::getS3SourceConfig() const {
    return m_s3_source_config;
}
void OAICreateMetricSetRequest_MetricSource::setS3SourceConfig(const OAIS3SourceConfig &s3_source_config) {
    m_s3_source_config = s3_source_config;
    m_s3_source_config_isSet = true;
}

bool OAICreateMetricSetRequest_MetricSource::is_s3_source_config_Set() const{
    return m_s3_source_config_isSet;
}

bool OAICreateMetricSetRequest_MetricSource::is_s3_source_config_Valid() const{
    return m_s3_source_config_isValid;
}

OAICreateMetricSet_request_MetricSource_AppFlowConfig OAICreateMetricSetRequest_MetricSource::getAppFlowConfig() const {
    return m_app_flow_config;
}
void OAICreateMetricSetRequest_MetricSource::setAppFlowConfig(const OAICreateMetricSet_request_MetricSource_AppFlowConfig &app_flow_config) {
    m_app_flow_config = app_flow_config;
    m_app_flow_config_isSet = true;
}

bool OAICreateMetricSetRequest_MetricSource::is_app_flow_config_Set() const{
    return m_app_flow_config_isSet;
}

bool OAICreateMetricSetRequest_MetricSource::is_app_flow_config_Valid() const{
    return m_app_flow_config_isValid;
}

OAICreateMetricSet_request_MetricSource_CloudWatchConfig OAICreateMetricSetRequest_MetricSource::getCloudWatchConfig() const {
    return m_cloud_watch_config;
}
void OAICreateMetricSetRequest_MetricSource::setCloudWatchConfig(const OAICreateMetricSet_request_MetricSource_CloudWatchConfig &cloud_watch_config) {
    m_cloud_watch_config = cloud_watch_config;
    m_cloud_watch_config_isSet = true;
}

bool OAICreateMetricSetRequest_MetricSource::is_cloud_watch_config_Set() const{
    return m_cloud_watch_config_isSet;
}

bool OAICreateMetricSetRequest_MetricSource::is_cloud_watch_config_Valid() const{
    return m_cloud_watch_config_isValid;
}

OAICreateMetricSet_request_MetricSource_RDSSourceConfig OAICreateMetricSetRequest_MetricSource::getRdsSourceConfig() const {
    return m_rds_source_config;
}
void OAICreateMetricSetRequest_MetricSource::setRdsSourceConfig(const OAICreateMetricSet_request_MetricSource_RDSSourceConfig &rds_source_config) {
    m_rds_source_config = rds_source_config;
    m_rds_source_config_isSet = true;
}

bool OAICreateMetricSetRequest_MetricSource::is_rds_source_config_Set() const{
    return m_rds_source_config_isSet;
}

bool OAICreateMetricSetRequest_MetricSource::is_rds_source_config_Valid() const{
    return m_rds_source_config_isValid;
}

OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig OAICreateMetricSetRequest_MetricSource::getRedshiftSourceConfig() const {
    return m_redshift_source_config;
}
void OAICreateMetricSetRequest_MetricSource::setRedshiftSourceConfig(const OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig &redshift_source_config) {
    m_redshift_source_config = redshift_source_config;
    m_redshift_source_config_isSet = true;
}

bool OAICreateMetricSetRequest_MetricSource::is_redshift_source_config_Set() const{
    return m_redshift_source_config_isSet;
}

bool OAICreateMetricSetRequest_MetricSource::is_redshift_source_config_Valid() const{
    return m_redshift_source_config_isValid;
}

OAICreateMetricSet_request_MetricSource_AthenaSourceConfig OAICreateMetricSetRequest_MetricSource::getAthenaSourceConfig() const {
    return m_athena_source_config;
}
void OAICreateMetricSetRequest_MetricSource::setAthenaSourceConfig(const OAICreateMetricSet_request_MetricSource_AthenaSourceConfig &athena_source_config) {
    m_athena_source_config = athena_source_config;
    m_athena_source_config_isSet = true;
}

bool OAICreateMetricSetRequest_MetricSource::is_athena_source_config_Set() const{
    return m_athena_source_config_isSet;
}

bool OAICreateMetricSetRequest_MetricSource::is_athena_source_config_Valid() const{
    return m_athena_source_config_isValid;
}

bool OAICreateMetricSetRequest_MetricSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_source_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_flow_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rds_source_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_source_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_athena_source_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMetricSetRequest_MetricSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
