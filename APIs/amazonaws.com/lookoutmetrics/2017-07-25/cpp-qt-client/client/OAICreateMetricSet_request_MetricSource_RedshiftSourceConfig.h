/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig.h
 *
 * 
 */

#ifndef OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig_H
#define OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig_H

#include <QJsonObject>

#include "OAIRedshiftSourceConfig_VpcConfiguration.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRedshiftSourceConfig_VpcConfiguration;

class OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig : public OAIObject {
public:
    OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig();
    OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig(QString json);
    ~OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterIdentifier() const;
    void setClusterIdentifier(const QString &cluster_identifier);
    bool is_cluster_identifier_Set() const;
    bool is_cluster_identifier_Valid() const;

    QString getDatabaseHost() const;
    void setDatabaseHost(const QString &database_host);
    bool is_database_host_Set() const;
    bool is_database_host_Valid() const;

    qint32 getDatabasePort() const;
    void setDatabasePort(const qint32 &database_port);
    bool is_database_port_Set() const;
    bool is_database_port_Valid() const;

    QString getSecretManagerArn() const;
    void setSecretManagerArn(const QString &secret_manager_arn);
    bool is_secret_manager_arn_Set() const;
    bool is_secret_manager_arn_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getTableName() const;
    void setTableName(const QString &table_name);
    bool is_table_name_Set() const;
    bool is_table_name_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    OAIRedshiftSourceConfig_VpcConfiguration getVpcConfiguration() const;
    void setVpcConfiguration(const OAIRedshiftSourceConfig_VpcConfiguration &vpc_configuration);
    bool is_vpc_configuration_Set() const;
    bool is_vpc_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_identifier;
    bool m_cluster_identifier_isSet;
    bool m_cluster_identifier_isValid;

    QString m_database_host;
    bool m_database_host_isSet;
    bool m_database_host_isValid;

    qint32 m_database_port;
    bool m_database_port_isSet;
    bool m_database_port_isValid;

    QString m_secret_manager_arn;
    bool m_secret_manager_arn_isSet;
    bool m_secret_manager_arn_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_table_name;
    bool m_table_name_isSet;
    bool m_table_name_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    OAIRedshiftSourceConfig_VpcConfiguration m_vpc_configuration;
    bool m_vpc_configuration_isSet;
    bool m_vpc_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig)

#endif // OAICreateMetricSet_request_MetricSource_RedshiftSourceConfig_H
