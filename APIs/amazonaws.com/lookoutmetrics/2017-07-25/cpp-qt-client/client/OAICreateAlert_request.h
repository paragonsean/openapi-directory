/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAlert_request.h
 *
 * 
 */

#ifndef OAICreateAlert_request_H
#define OAICreateAlert_request_H

#include <QJsonObject>

#include "OAICreateAlert_request_Action.h"
#include "OAICreateAlert_request_AlertFilters.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAlert_request_Action;
class OAICreateAlert_request_AlertFilters;

class OAICreateAlert_request : public OAIObject {
public:
    OAICreateAlert_request();
    OAICreateAlert_request(QString json);
    ~OAICreateAlert_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlertName() const;
    void setAlertName(const QString &alert_name);
    bool is_alert_name_Set() const;
    bool is_alert_name_Valid() const;

    qint32 getAlertSensitivityThreshold() const;
    void setAlertSensitivityThreshold(const qint32 &alert_sensitivity_threshold);
    bool is_alert_sensitivity_threshold_Set() const;
    bool is_alert_sensitivity_threshold_Valid() const;

    QString getAlertDescription() const;
    void setAlertDescription(const QString &alert_description);
    bool is_alert_description_Set() const;
    bool is_alert_description_Valid() const;

    QString getAnomalyDetectorArn() const;
    void setAnomalyDetectorArn(const QString &anomaly_detector_arn);
    bool is_anomaly_detector_arn_Set() const;
    bool is_anomaly_detector_arn_Valid() const;

    OAICreateAlert_request_Action getAction() const;
    void setAction(const OAICreateAlert_request_Action &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAICreateAlert_request_AlertFilters getAlertFilters() const;
    void setAlertFilters(const OAICreateAlert_request_AlertFilters &alert_filters);
    bool is_alert_filters_Set() const;
    bool is_alert_filters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alert_name;
    bool m_alert_name_isSet;
    bool m_alert_name_isValid;

    qint32 m_alert_sensitivity_threshold;
    bool m_alert_sensitivity_threshold_isSet;
    bool m_alert_sensitivity_threshold_isValid;

    QString m_alert_description;
    bool m_alert_description_isSet;
    bool m_alert_description_isValid;

    QString m_anomaly_detector_arn;
    bool m_anomaly_detector_arn_isSet;
    bool m_anomaly_detector_arn_isValid;

    OAICreateAlert_request_Action m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAICreateAlert_request_AlertFilters m_alert_filters;
    bool m_alert_filters_isSet;
    bool m_alert_filters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAlert_request)

#endif // OAICreateAlert_request_H
