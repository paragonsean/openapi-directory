/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedFileFormatDescriptor_JsonFormatDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::OAIDetectedFileFormatDescriptor_JsonFormatDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::OAIDetectedFileFormatDescriptor_JsonFormatDescriptor() {
    this->initializeModel();
}

OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::~OAIDetectedFileFormatDescriptor_JsonFormatDescriptor() {}

void OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::initializeModel() {

    m_file_compression_isSet = false;
    m_file_compression_isValid = false;

    m_charset_isSet = false;
    m_charset_isValid = false;
}

void OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::fromJsonObject(QJsonObject json) {

    m_file_compression_isValid = ::OpenAPI::fromJsonValue(m_file_compression, json[QString("FileCompression")]);
    m_file_compression_isSet = !json[QString("FileCompression")].isNull() && m_file_compression_isValid;

    m_charset_isValid = ::OpenAPI::fromJsonValue(m_charset, json[QString("Charset")]);
    m_charset_isSet = !json[QString("Charset")].isNull() && m_charset_isValid;
}

QString OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_file_compression.isSet()) {
        obj.insert(QString("FileCompression"), ::OpenAPI::toJsonValue(m_file_compression));
    }
    if (m_charset.isSet()) {
        obj.insert(QString("Charset"), ::OpenAPI::toJsonValue(m_charset));
    }
    return obj;
}

OAIDetectedCsvFormatDescriptor_FileCompression OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::getFileCompression() const {
    return m_file_compression;
}
void OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::setFileCompression(const OAIDetectedCsvFormatDescriptor_FileCompression &file_compression) {
    m_file_compression = file_compression;
    m_file_compression_isSet = true;
}

bool OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::is_file_compression_Set() const{
    return m_file_compression_isSet;
}

bool OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::is_file_compression_Valid() const{
    return m_file_compression_isValid;
}

OAIDetectedJsonFormatDescriptor_Charset OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::getCharset() const {
    return m_charset;
}
void OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::setCharset(const OAIDetectedJsonFormatDescriptor_Charset &charset) {
    m_charset = charset;
    m_charset_isSet = true;
}

bool OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::is_charset_Set() const{
    return m_charset_isSet;
}

bool OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::is_charset_Valid() const{
    return m_charset_isValid;
}

bool OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_charset.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedFileFormatDescriptor_JsonFormatDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
