/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemizedMetricStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemizedMetricStats::OAIItemizedMetricStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemizedMetricStats::OAIItemizedMetricStats() {
    this->initializeModel();
}

OAIItemizedMetricStats::~OAIItemizedMetricStats() {}

void OAIItemizedMetricStats::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_occurrence_count_isSet = false;
    m_occurrence_count_isValid = false;
}

void OAIItemizedMetricStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemizedMetricStats::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_occurrence_count_isValid = ::OpenAPI::fromJsonValue(m_occurrence_count, json[QString("OccurrenceCount")]);
    m_occurrence_count_isSet = !json[QString("OccurrenceCount")].isNull() && m_occurrence_count_isValid;
}

QString OAIItemizedMetricStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemizedMetricStats::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_occurrence_count_isSet) {
        obj.insert(QString("OccurrenceCount"), ::OpenAPI::toJsonValue(m_occurrence_count));
    }
    return obj;
}

QString OAIItemizedMetricStats::getMetricName() const {
    return m_metric_name;
}
void OAIItemizedMetricStats::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIItemizedMetricStats::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIItemizedMetricStats::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

qint32 OAIItemizedMetricStats::getOccurrenceCount() const {
    return m_occurrence_count;
}
void OAIItemizedMetricStats::setOccurrenceCount(const qint32 &occurrence_count) {
    m_occurrence_count = occurrence_count;
    m_occurrence_count_isSet = true;
}

bool OAIItemizedMetricStats::is_occurrence_count_Set() const{
    return m_occurrence_count_isSet;
}

bool OAIItemizedMetricStats::is_occurrence_count_Valid() const{
    return m_occurrence_count_isValid;
}

bool OAIItemizedMetricStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurrence_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemizedMetricStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
