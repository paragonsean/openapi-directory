/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataQualityMetricType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataQualityMetricType::OAIDataQualityMetricType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataQualityMetricType::OAIDataQualityMetricType() {
    this->initializeModel();
}

OAIDataQualityMetricType::~OAIDataQualityMetricType() {}

void OAIDataQualityMetricType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataQualityMetricType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataQualityMetricType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("COLUMN_COMPLETENESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::COLUMN_COMPLETENESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIMENSION_UNIQUENESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::DIMENSION_UNIQUENESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_SERIES_COUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::TIME_SERIES_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ROWS_PROCESSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::ROWS_PROCESSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ROWS_PARTIAL_COMPLIANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::ROWS_PARTIAL_COMPLIANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_ROWS_COMPLIANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::INVALID_ROWS_COMPLIANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKTEST_TRAINING_DATA_START_TIME_STAMP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::BACKTEST_TRAINING_DATA_START_TIME_STAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKTEST_TRAINING_DATA_END_TIME_STAMP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::BACKTEST_TRAINING_DATA_END_TIME_STAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKTEST_INFERENCE_DATA_START_TIME_STAMP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::BACKTEST_INFERENCE_DATA_START_TIME_STAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKTEST_INFERENCE_DATA_END_TIME_STAMP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataQualityMetricType::BACKTEST_INFERENCE_DATA_END_TIME_STAMP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataQualityMetricType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataQualityMetricType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataQualityMetricType::COLUMN_COMPLETENESS:
            val = "COLUMN_COMPLETENESS";
            break;
        case eOAIDataQualityMetricType::DIMENSION_UNIQUENESS:
            val = "DIMENSION_UNIQUENESS";
            break;
        case eOAIDataQualityMetricType::TIME_SERIES_COUNT:
            val = "TIME_SERIES_COUNT";
            break;
        case eOAIDataQualityMetricType::ROWS_PROCESSED:
            val = "ROWS_PROCESSED";
            break;
        case eOAIDataQualityMetricType::ROWS_PARTIAL_COMPLIANCE:
            val = "ROWS_PARTIAL_COMPLIANCE";
            break;
        case eOAIDataQualityMetricType::INVALID_ROWS_COMPLIANCE:
            val = "INVALID_ROWS_COMPLIANCE";
            break;
        case eOAIDataQualityMetricType::BACKTEST_TRAINING_DATA_START_TIME_STAMP:
            val = "BACKTEST_TRAINING_DATA_START_TIME_STAMP";
            break;
        case eOAIDataQualityMetricType::BACKTEST_TRAINING_DATA_END_TIME_STAMP:
            val = "BACKTEST_TRAINING_DATA_END_TIME_STAMP";
            break;
        case eOAIDataQualityMetricType::BACKTEST_INFERENCE_DATA_START_TIME_STAMP:
            val = "BACKTEST_INFERENCE_DATA_START_TIME_STAMP";
            break;
        case eOAIDataQualityMetricType::BACKTEST_INFERENCE_DATA_END_TIME_STAMP:
            val = "BACKTEST_INFERENCE_DATA_END_TIME_STAMP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataQualityMetricType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataQualityMetricType::eOAIDataQualityMetricType OAIDataQualityMetricType::getValue() const {
    return m_value;
}

void OAIDataQualityMetricType::setValue(const OAIDataQualityMetricType::eOAIDataQualityMetricType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataQualityMetricType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataQualityMetricType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
