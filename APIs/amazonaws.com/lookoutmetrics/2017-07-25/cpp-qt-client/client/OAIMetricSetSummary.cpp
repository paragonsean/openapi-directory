/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricSetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricSetSummary::OAIMetricSetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricSetSummary::OAIMetricSetSummary() {
    this->initializeModel();
}

OAIMetricSetSummary::~OAIMetricSetSummary() {}

void OAIMetricSetSummary::initializeModel() {

    m_metric_set_arn_isSet = false;
    m_metric_set_arn_isValid = false;

    m_anomaly_detector_arn_isSet = false;
    m_anomaly_detector_arn_isValid = false;

    m_metric_set_description_isSet = false;
    m_metric_set_description_isValid = false;

    m_metric_set_name_isSet = false;
    m_metric_set_name_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIMetricSetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricSetSummary::fromJsonObject(QJsonObject json) {

    m_metric_set_arn_isValid = ::OpenAPI::fromJsonValue(m_metric_set_arn, json[QString("MetricSetArn")]);
    m_metric_set_arn_isSet = !json[QString("MetricSetArn")].isNull() && m_metric_set_arn_isValid;

    m_anomaly_detector_arn_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_arn, json[QString("AnomalyDetectorArn")]);
    m_anomaly_detector_arn_isSet = !json[QString("AnomalyDetectorArn")].isNull() && m_anomaly_detector_arn_isValid;

    m_metric_set_description_isValid = ::OpenAPI::fromJsonValue(m_metric_set_description, json[QString("MetricSetDescription")]);
    m_metric_set_description_isSet = !json[QString("MetricSetDescription")].isNull() && m_metric_set_description_isValid;

    m_metric_set_name_isValid = ::OpenAPI::fromJsonValue(m_metric_set_name, json[QString("MetricSetName")]);
    m_metric_set_name_isSet = !json[QString("MetricSetName")].isNull() && m_metric_set_name_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIMetricSetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricSetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_set_arn_isSet) {
        obj.insert(QString("MetricSetArn"), ::OpenAPI::toJsonValue(m_metric_set_arn));
    }
    if (m_anomaly_detector_arn_isSet) {
        obj.insert(QString("AnomalyDetectorArn"), ::OpenAPI::toJsonValue(m_anomaly_detector_arn));
    }
    if (m_metric_set_description_isSet) {
        obj.insert(QString("MetricSetDescription"), ::OpenAPI::toJsonValue(m_metric_set_description));
    }
    if (m_metric_set_name_isSet) {
        obj.insert(QString("MetricSetName"), ::OpenAPI::toJsonValue(m_metric_set_name));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIMetricSetSummary::getMetricSetArn() const {
    return m_metric_set_arn;
}
void OAIMetricSetSummary::setMetricSetArn(const QString &metric_set_arn) {
    m_metric_set_arn = metric_set_arn;
    m_metric_set_arn_isSet = true;
}

bool OAIMetricSetSummary::is_metric_set_arn_Set() const{
    return m_metric_set_arn_isSet;
}

bool OAIMetricSetSummary::is_metric_set_arn_Valid() const{
    return m_metric_set_arn_isValid;
}

QString OAIMetricSetSummary::getAnomalyDetectorArn() const {
    return m_anomaly_detector_arn;
}
void OAIMetricSetSummary::setAnomalyDetectorArn(const QString &anomaly_detector_arn) {
    m_anomaly_detector_arn = anomaly_detector_arn;
    m_anomaly_detector_arn_isSet = true;
}

bool OAIMetricSetSummary::is_anomaly_detector_arn_Set() const{
    return m_anomaly_detector_arn_isSet;
}

bool OAIMetricSetSummary::is_anomaly_detector_arn_Valid() const{
    return m_anomaly_detector_arn_isValid;
}

QString OAIMetricSetSummary::getMetricSetDescription() const {
    return m_metric_set_description;
}
void OAIMetricSetSummary::setMetricSetDescription(const QString &metric_set_description) {
    m_metric_set_description = metric_set_description;
    m_metric_set_description_isSet = true;
}

bool OAIMetricSetSummary::is_metric_set_description_Set() const{
    return m_metric_set_description_isSet;
}

bool OAIMetricSetSummary::is_metric_set_description_Valid() const{
    return m_metric_set_description_isValid;
}

QString OAIMetricSetSummary::getMetricSetName() const {
    return m_metric_set_name;
}
void OAIMetricSetSummary::setMetricSetName(const QString &metric_set_name) {
    m_metric_set_name = metric_set_name;
    m_metric_set_name_isSet = true;
}

bool OAIMetricSetSummary::is_metric_set_name_Set() const{
    return m_metric_set_name_isSet;
}

bool OAIMetricSetSummary::is_metric_set_name_Valid() const{
    return m_metric_set_name_isValid;
}

QDateTime OAIMetricSetSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIMetricSetSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIMetricSetSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIMetricSetSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIMetricSetSummary::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIMetricSetSummary::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIMetricSetSummary::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIMetricSetSummary::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

QMap OAIMetricSetSummary::getTags() const {
    return m_tags;
}
void OAIMetricSetSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMetricSetSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMetricSetSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIMetricSetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_detector_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_set_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricSetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
