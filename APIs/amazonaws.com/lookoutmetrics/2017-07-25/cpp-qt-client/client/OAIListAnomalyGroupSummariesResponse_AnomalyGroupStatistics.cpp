/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics() {
    this->initializeModel();
}

OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::~OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics() {}

void OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::initializeModel() {

    m_evaluation_start_date_isSet = false;
    m_evaluation_start_date_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_itemized_metric_stats_list_isSet = false;
    m_itemized_metric_stats_list_isValid = false;
}

void OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::fromJsonObject(QJsonObject json) {

    m_evaluation_start_date_isValid = ::OpenAPI::fromJsonValue(m_evaluation_start_date, json[QString("EvaluationStartDate")]);
    m_evaluation_start_date_isSet = !json[QString("EvaluationStartDate")].isNull() && m_evaluation_start_date_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;

    m_itemized_metric_stats_list_isValid = ::OpenAPI::fromJsonValue(m_itemized_metric_stats_list, json[QString("ItemizedMetricStatsList")]);
    m_itemized_metric_stats_list_isSet = !json[QString("ItemizedMetricStatsList")].isNull() && m_itemized_metric_stats_list_isValid;
}

QString OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_start_date_isSet) {
        obj.insert(QString("EvaluationStartDate"), ::OpenAPI::toJsonValue(m_evaluation_start_date));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_itemized_metric_stats_list.isSet()) {
        obj.insert(QString("ItemizedMetricStatsList"), ::OpenAPI::toJsonValue(m_itemized_metric_stats_list));
    }
    return obj;
}

QString OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::getEvaluationStartDate() const {
    return m_evaluation_start_date;
}
void OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::setEvaluationStartDate(const QString &evaluation_start_date) {
    m_evaluation_start_date = evaluation_start_date;
    m_evaluation_start_date_isSet = true;
}

bool OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::is_evaluation_start_date_Set() const{
    return m_evaluation_start_date_isSet;
}

bool OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::is_evaluation_start_date_Valid() const{
    return m_evaluation_start_date_isValid;
}

qint32 OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::getTotalCount() const {
    return m_total_count;
}
void OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::is_total_count_Valid() const{
    return m_total_count_isValid;
}

QList OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::getItemizedMetricStatsList() const {
    return m_itemized_metric_stats_list;
}
void OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::setItemizedMetricStatsList(const QList &itemized_metric_stats_list) {
    m_itemized_metric_stats_list = itemized_metric_stats_list;
    m_itemized_metric_stats_list_isSet = true;
}

bool OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::is_itemized_metric_stats_list_Set() const{
    return m_itemized_metric_stats_list_isSet;
}

bool OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::is_itemized_metric_stats_list_Valid() const{
    return m_itemized_metric_stats_list_isValid;
}

bool OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemized_metric_stats_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAnomalyGroupSummariesResponse_AnomalyGroupStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
