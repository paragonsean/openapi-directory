/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAnomalyGroupTimeSeriesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAnomalyGroupTimeSeriesRequest::OAIListAnomalyGroupTimeSeriesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAnomalyGroupTimeSeriesRequest::OAIListAnomalyGroupTimeSeriesRequest() {
    this->initializeModel();
}

OAIListAnomalyGroupTimeSeriesRequest::~OAIListAnomalyGroupTimeSeriesRequest() {}

void OAIListAnomalyGroupTimeSeriesRequest::initializeModel() {

    m_anomaly_detector_arn_isSet = false;
    m_anomaly_detector_arn_isValid = false;

    m_anomaly_group_id_isSet = false;
    m_anomaly_group_id_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAnomalyGroupTimeSeriesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAnomalyGroupTimeSeriesRequest::fromJsonObject(QJsonObject json) {

    m_anomaly_detector_arn_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_arn, json[QString("AnomalyDetectorArn")]);
    m_anomaly_detector_arn_isSet = !json[QString("AnomalyDetectorArn")].isNull() && m_anomaly_detector_arn_isValid;

    m_anomaly_group_id_isValid = ::OpenAPI::fromJsonValue(m_anomaly_group_id, json[QString("AnomalyGroupId")]);
    m_anomaly_group_id_isSet = !json[QString("AnomalyGroupId")].isNull() && m_anomaly_group_id_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAnomalyGroupTimeSeriesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAnomalyGroupTimeSeriesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_detector_arn_isSet) {
        obj.insert(QString("AnomalyDetectorArn"), ::OpenAPI::toJsonValue(m_anomaly_detector_arn));
    }
    if (m_anomaly_group_id_isSet) {
        obj.insert(QString("AnomalyGroupId"), ::OpenAPI::toJsonValue(m_anomaly_group_id));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListAnomalyGroupTimeSeriesRequest::getAnomalyDetectorArn() const {
    return m_anomaly_detector_arn;
}
void OAIListAnomalyGroupTimeSeriesRequest::setAnomalyDetectorArn(const QString &anomaly_detector_arn) {
    m_anomaly_detector_arn = anomaly_detector_arn;
    m_anomaly_detector_arn_isSet = true;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_anomaly_detector_arn_Set() const{
    return m_anomaly_detector_arn_isSet;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_anomaly_detector_arn_Valid() const{
    return m_anomaly_detector_arn_isValid;
}

QString OAIListAnomalyGroupTimeSeriesRequest::getAnomalyGroupId() const {
    return m_anomaly_group_id;
}
void OAIListAnomalyGroupTimeSeriesRequest::setAnomalyGroupId(const QString &anomaly_group_id) {
    m_anomaly_group_id = anomaly_group_id;
    m_anomaly_group_id_isSet = true;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_anomaly_group_id_Set() const{
    return m_anomaly_group_id_isSet;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_anomaly_group_id_Valid() const{
    return m_anomaly_group_id_isValid;
}

QString OAIListAnomalyGroupTimeSeriesRequest::getMetricName() const {
    return m_metric_name;
}
void OAIListAnomalyGroupTimeSeriesRequest::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

qint32 OAIListAnomalyGroupTimeSeriesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListAnomalyGroupTimeSeriesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListAnomalyGroupTimeSeriesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListAnomalyGroupTimeSeriesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAnomalyGroupTimeSeriesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAnomalyGroupTimeSeriesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_detector_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAnomalyGroupTimeSeriesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomaly_detector_arn_isValid && m_anomaly_group_id_isValid && m_metric_name_isValid && true;
}

} // namespace OpenAPI
