/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnomalyDetectorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnomalyDetectorRequest::OAICreateAnomalyDetectorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnomalyDetectorRequest::OAICreateAnomalyDetectorRequest() {
    this->initializeModel();
}

OAICreateAnomalyDetectorRequest::~OAICreateAnomalyDetectorRequest() {}

void OAICreateAnomalyDetectorRequest::initializeModel() {

    m_anomaly_detector_name_isSet = false;
    m_anomaly_detector_name_isValid = false;

    m_anomaly_detector_description_isSet = false;
    m_anomaly_detector_description_isValid = false;

    m_anomaly_detector_config_isSet = false;
    m_anomaly_detector_config_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAnomalyDetectorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnomalyDetectorRequest::fromJsonObject(QJsonObject json) {

    m_anomaly_detector_name_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_name, json[QString("AnomalyDetectorName")]);
    m_anomaly_detector_name_isSet = !json[QString("AnomalyDetectorName")].isNull() && m_anomaly_detector_name_isValid;

    m_anomaly_detector_description_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_description, json[QString("AnomalyDetectorDescription")]);
    m_anomaly_detector_description_isSet = !json[QString("AnomalyDetectorDescription")].isNull() && m_anomaly_detector_description_isValid;

    m_anomaly_detector_config_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_config, json[QString("AnomalyDetectorConfig")]);
    m_anomaly_detector_config_isSet = !json[QString("AnomalyDetectorConfig")].isNull() && m_anomaly_detector_config_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateAnomalyDetectorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnomalyDetectorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_detector_name_isSet) {
        obj.insert(QString("AnomalyDetectorName"), ::OpenAPI::toJsonValue(m_anomaly_detector_name));
    }
    if (m_anomaly_detector_description_isSet) {
        obj.insert(QString("AnomalyDetectorDescription"), ::OpenAPI::toJsonValue(m_anomaly_detector_description));
    }
    if (m_anomaly_detector_config.isSet()) {
        obj.insert(QString("AnomalyDetectorConfig"), ::OpenAPI::toJsonValue(m_anomaly_detector_config));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAnomalyDetectorRequest::getAnomalyDetectorName() const {
    return m_anomaly_detector_name;
}
void OAICreateAnomalyDetectorRequest::setAnomalyDetectorName(const QString &anomaly_detector_name) {
    m_anomaly_detector_name = anomaly_detector_name;
    m_anomaly_detector_name_isSet = true;
}

bool OAICreateAnomalyDetectorRequest::is_anomaly_detector_name_Set() const{
    return m_anomaly_detector_name_isSet;
}

bool OAICreateAnomalyDetectorRequest::is_anomaly_detector_name_Valid() const{
    return m_anomaly_detector_name_isValid;
}

QString OAICreateAnomalyDetectorRequest::getAnomalyDetectorDescription() const {
    return m_anomaly_detector_description;
}
void OAICreateAnomalyDetectorRequest::setAnomalyDetectorDescription(const QString &anomaly_detector_description) {
    m_anomaly_detector_description = anomaly_detector_description;
    m_anomaly_detector_description_isSet = true;
}

bool OAICreateAnomalyDetectorRequest::is_anomaly_detector_description_Set() const{
    return m_anomaly_detector_description_isSet;
}

bool OAICreateAnomalyDetectorRequest::is_anomaly_detector_description_Valid() const{
    return m_anomaly_detector_description_isValid;
}

OAICreateAnomalyDetectorRequest_AnomalyDetectorConfig OAICreateAnomalyDetectorRequest::getAnomalyDetectorConfig() const {
    return m_anomaly_detector_config;
}
void OAICreateAnomalyDetectorRequest::setAnomalyDetectorConfig(const OAICreateAnomalyDetectorRequest_AnomalyDetectorConfig &anomaly_detector_config) {
    m_anomaly_detector_config = anomaly_detector_config;
    m_anomaly_detector_config_isSet = true;
}

bool OAICreateAnomalyDetectorRequest::is_anomaly_detector_config_Set() const{
    return m_anomaly_detector_config_isSet;
}

bool OAICreateAnomalyDetectorRequest::is_anomaly_detector_config_Valid() const{
    return m_anomaly_detector_config_isValid;
}

QString OAICreateAnomalyDetectorRequest::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAICreateAnomalyDetectorRequest::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAICreateAnomalyDetectorRequest::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAICreateAnomalyDetectorRequest::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QMap OAICreateAnomalyDetectorRequest::getTags() const {
    return m_tags;
}
void OAICreateAnomalyDetectorRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAnomalyDetectorRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAnomalyDetectorRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAnomalyDetectorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_detector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_detector_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_detector_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnomalyDetectorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomaly_detector_name_isValid && m_anomaly_detector_config_isValid && true;
}

} // namespace OpenAPI
