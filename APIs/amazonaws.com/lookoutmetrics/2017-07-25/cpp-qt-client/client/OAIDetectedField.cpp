/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedField::OAIDetectedField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedField::OAIDetectedField() {
    this->initializeModel();
}

OAIDetectedField::~OAIDetectedField() {}

void OAIDetectedField::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIDetectedField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedField::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("Confidence")]);
    m_confidence_isSet = !json[QString("Confidence")].isNull() && m_confidence_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIDetectedField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedField::asJsonObject() const {
    QJsonObject obj;
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_confidence.isSet()) {
        obj.insert(QString("Confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIDetectedField_Value OAIDetectedField::getValue() const {
    return m_value;
}
void OAIDetectedField::setValue(const OAIDetectedField_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDetectedField::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDetectedField::is_value_Valid() const{
    return m_value_isValid;
}

OAIConfidence OAIDetectedField::getConfidence() const {
    return m_confidence;
}
void OAIDetectedField::setConfidence(const OAIConfidence &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIDetectedField::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIDetectedField::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIDetectedField::getMessage() const {
    return m_message;
}
void OAIDetectedField::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDetectedField::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDetectedField::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIDetectedField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
