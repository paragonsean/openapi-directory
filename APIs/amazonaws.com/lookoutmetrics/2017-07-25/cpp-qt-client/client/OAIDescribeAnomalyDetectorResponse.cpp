/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAnomalyDetectorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAnomalyDetectorResponse::OAIDescribeAnomalyDetectorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAnomalyDetectorResponse::OAIDescribeAnomalyDetectorResponse() {
    this->initializeModel();
}

OAIDescribeAnomalyDetectorResponse::~OAIDescribeAnomalyDetectorResponse() {}

void OAIDescribeAnomalyDetectorResponse::initializeModel() {

    m_anomaly_detector_arn_isSet = false;
    m_anomaly_detector_arn_isValid = false;

    m_anomaly_detector_name_isSet = false;
    m_anomaly_detector_name_isValid = false;

    m_anomaly_detector_description_isSet = false;
    m_anomaly_detector_description_isValid = false;

    m_anomaly_detector_config_isSet = false;
    m_anomaly_detector_config_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_failure_type_isSet = false;
    m_failure_type_isValid = false;
}

void OAIDescribeAnomalyDetectorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAnomalyDetectorResponse::fromJsonObject(QJsonObject json) {

    m_anomaly_detector_arn_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_arn, json[QString("AnomalyDetectorArn")]);
    m_anomaly_detector_arn_isSet = !json[QString("AnomalyDetectorArn")].isNull() && m_anomaly_detector_arn_isValid;

    m_anomaly_detector_name_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_name, json[QString("AnomalyDetectorName")]);
    m_anomaly_detector_name_isSet = !json[QString("AnomalyDetectorName")].isNull() && m_anomaly_detector_name_isValid;

    m_anomaly_detector_description_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_description, json[QString("AnomalyDetectorDescription")]);
    m_anomaly_detector_description_isSet = !json[QString("AnomalyDetectorDescription")].isNull() && m_anomaly_detector_description_isValid;

    m_anomaly_detector_config_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_config, json[QString("AnomalyDetectorConfig")]);
    m_anomaly_detector_config_isSet = !json[QString("AnomalyDetectorConfig")].isNull() && m_anomaly_detector_config_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_failure_type_isValid = ::OpenAPI::fromJsonValue(m_failure_type, json[QString("FailureType")]);
    m_failure_type_isSet = !json[QString("FailureType")].isNull() && m_failure_type_isValid;
}

QString OAIDescribeAnomalyDetectorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAnomalyDetectorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_detector_arn_isSet) {
        obj.insert(QString("AnomalyDetectorArn"), ::OpenAPI::toJsonValue(m_anomaly_detector_arn));
    }
    if (m_anomaly_detector_name_isSet) {
        obj.insert(QString("AnomalyDetectorName"), ::OpenAPI::toJsonValue(m_anomaly_detector_name));
    }
    if (m_anomaly_detector_description_isSet) {
        obj.insert(QString("AnomalyDetectorDescription"), ::OpenAPI::toJsonValue(m_anomaly_detector_description));
    }
    if (m_anomaly_detector_config.isSet()) {
        obj.insert(QString("AnomalyDetectorConfig"), ::OpenAPI::toJsonValue(m_anomaly_detector_config));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_failure_type.isSet()) {
        obj.insert(QString("FailureType"), ::OpenAPI::toJsonValue(m_failure_type));
    }
    return obj;
}

QString OAIDescribeAnomalyDetectorResponse::getAnomalyDetectorArn() const {
    return m_anomaly_detector_arn;
}
void OAIDescribeAnomalyDetectorResponse::setAnomalyDetectorArn(const QString &anomaly_detector_arn) {
    m_anomaly_detector_arn = anomaly_detector_arn;
    m_anomaly_detector_arn_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_anomaly_detector_arn_Set() const{
    return m_anomaly_detector_arn_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_anomaly_detector_arn_Valid() const{
    return m_anomaly_detector_arn_isValid;
}

QString OAIDescribeAnomalyDetectorResponse::getAnomalyDetectorName() const {
    return m_anomaly_detector_name;
}
void OAIDescribeAnomalyDetectorResponse::setAnomalyDetectorName(const QString &anomaly_detector_name) {
    m_anomaly_detector_name = anomaly_detector_name;
    m_anomaly_detector_name_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_anomaly_detector_name_Set() const{
    return m_anomaly_detector_name_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_anomaly_detector_name_Valid() const{
    return m_anomaly_detector_name_isValid;
}

QString OAIDescribeAnomalyDetectorResponse::getAnomalyDetectorDescription() const {
    return m_anomaly_detector_description;
}
void OAIDescribeAnomalyDetectorResponse::setAnomalyDetectorDescription(const QString &anomaly_detector_description) {
    m_anomaly_detector_description = anomaly_detector_description;
    m_anomaly_detector_description_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_anomaly_detector_description_Set() const{
    return m_anomaly_detector_description_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_anomaly_detector_description_Valid() const{
    return m_anomaly_detector_description_isValid;
}

OAIDescribeAnomalyDetectorResponse_AnomalyDetectorConfig OAIDescribeAnomalyDetectorResponse::getAnomalyDetectorConfig() const {
    return m_anomaly_detector_config;
}
void OAIDescribeAnomalyDetectorResponse::setAnomalyDetectorConfig(const OAIDescribeAnomalyDetectorResponse_AnomalyDetectorConfig &anomaly_detector_config) {
    m_anomaly_detector_config = anomaly_detector_config;
    m_anomaly_detector_config_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_anomaly_detector_config_Set() const{
    return m_anomaly_detector_config_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_anomaly_detector_config_Valid() const{
    return m_anomaly_detector_config_isValid;
}

QDateTime OAIDescribeAnomalyDetectorResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeAnomalyDetectorResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeAnomalyDetectorResponse::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIDescribeAnomalyDetectorResponse::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

OAIAnomalyDetectorStatus OAIDescribeAnomalyDetectorResponse::getStatus() const {
    return m_status;
}
void OAIDescribeAnomalyDetectorResponse::setStatus(const OAIAnomalyDetectorStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeAnomalyDetectorResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIDescribeAnomalyDetectorResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIDescribeAnomalyDetectorResponse::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIDescribeAnomalyDetectorResponse::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

OAIAnomalyDetectorFailureType OAIDescribeAnomalyDetectorResponse::getFailureType() const {
    return m_failure_type;
}
void OAIDescribeAnomalyDetectorResponse::setFailureType(const OAIAnomalyDetectorFailureType &failure_type) {
    m_failure_type = failure_type;
    m_failure_type_isSet = true;
}

bool OAIDescribeAnomalyDetectorResponse::is_failure_type_Set() const{
    return m_failure_type_isSet;
}

bool OAIDescribeAnomalyDetectorResponse::is_failure_type_Valid() const{
    return m_failure_type_isValid;
}

bool OAIDescribeAnomalyDetectorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_detector_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_detector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_detector_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_detector_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAnomalyDetectorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
