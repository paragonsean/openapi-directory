/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftSourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftSourceConfig::OAIRedshiftSourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftSourceConfig::OAIRedshiftSourceConfig() {
    this->initializeModel();
}

OAIRedshiftSourceConfig::~OAIRedshiftSourceConfig() {}

void OAIRedshiftSourceConfig::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_database_host_isSet = false;
    m_database_host_isValid = false;

    m_database_port_isSet = false;
    m_database_port_isValid = false;

    m_secret_manager_arn_isSet = false;
    m_secret_manager_arn_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;
}

void OAIRedshiftSourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftSourceConfig::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_database_host_isValid = ::OpenAPI::fromJsonValue(m_database_host, json[QString("DatabaseHost")]);
    m_database_host_isSet = !json[QString("DatabaseHost")].isNull() && m_database_host_isValid;

    m_database_port_isValid = ::OpenAPI::fromJsonValue(m_database_port, json[QString("DatabasePort")]);
    m_database_port_isSet = !json[QString("DatabasePort")].isNull() && m_database_port_isValid;

    m_secret_manager_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_manager_arn, json[QString("SecretManagerArn")]);
    m_secret_manager_arn_isSet = !json[QString("SecretManagerArn")].isNull() && m_secret_manager_arn_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;
}

QString OAIRedshiftSourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftSourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_database_host_isSet) {
        obj.insert(QString("DatabaseHost"), ::OpenAPI::toJsonValue(m_database_host));
    }
    if (m_database_port_isSet) {
        obj.insert(QString("DatabasePort"), ::OpenAPI::toJsonValue(m_database_port));
    }
    if (m_secret_manager_arn_isSet) {
        obj.insert(QString("SecretManagerArn"), ::OpenAPI::toJsonValue(m_secret_manager_arn));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    return obj;
}

QString OAIRedshiftSourceConfig::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIRedshiftSourceConfig::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIRedshiftSourceConfig::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIRedshiftSourceConfig::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIRedshiftSourceConfig::getDatabaseHost() const {
    return m_database_host;
}
void OAIRedshiftSourceConfig::setDatabaseHost(const QString &database_host) {
    m_database_host = database_host;
    m_database_host_isSet = true;
}

bool OAIRedshiftSourceConfig::is_database_host_Set() const{
    return m_database_host_isSet;
}

bool OAIRedshiftSourceConfig::is_database_host_Valid() const{
    return m_database_host_isValid;
}

qint32 OAIRedshiftSourceConfig::getDatabasePort() const {
    return m_database_port;
}
void OAIRedshiftSourceConfig::setDatabasePort(const qint32 &database_port) {
    m_database_port = database_port;
    m_database_port_isSet = true;
}

bool OAIRedshiftSourceConfig::is_database_port_Set() const{
    return m_database_port_isSet;
}

bool OAIRedshiftSourceConfig::is_database_port_Valid() const{
    return m_database_port_isValid;
}

QString OAIRedshiftSourceConfig::getSecretManagerArn() const {
    return m_secret_manager_arn;
}
void OAIRedshiftSourceConfig::setSecretManagerArn(const QString &secret_manager_arn) {
    m_secret_manager_arn = secret_manager_arn;
    m_secret_manager_arn_isSet = true;
}

bool OAIRedshiftSourceConfig::is_secret_manager_arn_Set() const{
    return m_secret_manager_arn_isSet;
}

bool OAIRedshiftSourceConfig::is_secret_manager_arn_Valid() const{
    return m_secret_manager_arn_isValid;
}

QString OAIRedshiftSourceConfig::getDatabaseName() const {
    return m_database_name;
}
void OAIRedshiftSourceConfig::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIRedshiftSourceConfig::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIRedshiftSourceConfig::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIRedshiftSourceConfig::getTableName() const {
    return m_table_name;
}
void OAIRedshiftSourceConfig::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIRedshiftSourceConfig::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIRedshiftSourceConfig::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIRedshiftSourceConfig::getRoleArn() const {
    return m_role_arn;
}
void OAIRedshiftSourceConfig::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIRedshiftSourceConfig::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIRedshiftSourceConfig::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIRedshiftSourceConfig_VpcConfiguration OAIRedshiftSourceConfig::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIRedshiftSourceConfig::setVpcConfiguration(const OAIRedshiftSourceConfig_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIRedshiftSourceConfig::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIRedshiftSourceConfig::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

bool OAIRedshiftSourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_manager_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftSourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
