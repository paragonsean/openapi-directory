/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedS3SourceConfig_FileFormatDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedS3SourceConfig_FileFormatDescriptor::OAIDetectedS3SourceConfig_FileFormatDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedS3SourceConfig_FileFormatDescriptor::OAIDetectedS3SourceConfig_FileFormatDescriptor() {
    this->initializeModel();
}

OAIDetectedS3SourceConfig_FileFormatDescriptor::~OAIDetectedS3SourceConfig_FileFormatDescriptor() {}

void OAIDetectedS3SourceConfig_FileFormatDescriptor::initializeModel() {

    m_csv_format_descriptor_isSet = false;
    m_csv_format_descriptor_isValid = false;

    m_json_format_descriptor_isSet = false;
    m_json_format_descriptor_isValid = false;
}

void OAIDetectedS3SourceConfig_FileFormatDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedS3SourceConfig_FileFormatDescriptor::fromJsonObject(QJsonObject json) {

    m_csv_format_descriptor_isValid = ::OpenAPI::fromJsonValue(m_csv_format_descriptor, json[QString("CsvFormatDescriptor")]);
    m_csv_format_descriptor_isSet = !json[QString("CsvFormatDescriptor")].isNull() && m_csv_format_descriptor_isValid;

    m_json_format_descriptor_isValid = ::OpenAPI::fromJsonValue(m_json_format_descriptor, json[QString("JsonFormatDescriptor")]);
    m_json_format_descriptor_isSet = !json[QString("JsonFormatDescriptor")].isNull() && m_json_format_descriptor_isValid;
}

QString OAIDetectedS3SourceConfig_FileFormatDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedS3SourceConfig_FileFormatDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_csv_format_descriptor.isSet()) {
        obj.insert(QString("CsvFormatDescriptor"), ::OpenAPI::toJsonValue(m_csv_format_descriptor));
    }
    if (m_json_format_descriptor.isSet()) {
        obj.insert(QString("JsonFormatDescriptor"), ::OpenAPI::toJsonValue(m_json_format_descriptor));
    }
    return obj;
}

OAIDetectedFileFormatDescriptor_CsvFormatDescriptor OAIDetectedS3SourceConfig_FileFormatDescriptor::getCsvFormatDescriptor() const {
    return m_csv_format_descriptor;
}
void OAIDetectedS3SourceConfig_FileFormatDescriptor::setCsvFormatDescriptor(const OAIDetectedFileFormatDescriptor_CsvFormatDescriptor &csv_format_descriptor) {
    m_csv_format_descriptor = csv_format_descriptor;
    m_csv_format_descriptor_isSet = true;
}

bool OAIDetectedS3SourceConfig_FileFormatDescriptor::is_csv_format_descriptor_Set() const{
    return m_csv_format_descriptor_isSet;
}

bool OAIDetectedS3SourceConfig_FileFormatDescriptor::is_csv_format_descriptor_Valid() const{
    return m_csv_format_descriptor_isValid;
}

OAIDetectedFileFormatDescriptor_JsonFormatDescriptor OAIDetectedS3SourceConfig_FileFormatDescriptor::getJsonFormatDescriptor() const {
    return m_json_format_descriptor;
}
void OAIDetectedS3SourceConfig_FileFormatDescriptor::setJsonFormatDescriptor(const OAIDetectedFileFormatDescriptor_JsonFormatDescriptor &json_format_descriptor) {
    m_json_format_descriptor = json_format_descriptor;
    m_json_format_descriptor_isSet = true;
}

bool OAIDetectedS3SourceConfig_FileFormatDescriptor::is_json_format_descriptor_Set() const{
    return m_json_format_descriptor_isSet;
}

bool OAIDetectedS3SourceConfig_FileFormatDescriptor::is_json_format_descriptor_Valid() const{
    return m_json_format_descriptor_isValid;
}

bool OAIDetectedS3SourceConfig_FileFormatDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_csv_format_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_format_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedS3SourceConfig_FileFormatDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
