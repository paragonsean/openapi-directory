/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedMetricSetConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedMetricSetConfig::OAIDetectedMetricSetConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedMetricSetConfig::OAIDetectedMetricSetConfig() {
    this->initializeModel();
}

OAIDetectedMetricSetConfig::~OAIDetectedMetricSetConfig() {}

void OAIDetectedMetricSetConfig::initializeModel() {

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_metric_set_frequency_isSet = false;
    m_metric_set_frequency_isValid = false;

    m_metric_source_isSet = false;
    m_metric_source_isValid = false;
}

void OAIDetectedMetricSetConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedMetricSetConfig::fromJsonObject(QJsonObject json) {

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("Offset")]);
    m_offset_isSet = !json[QString("Offset")].isNull() && m_offset_isValid;

    m_metric_set_frequency_isValid = ::OpenAPI::fromJsonValue(m_metric_set_frequency, json[QString("MetricSetFrequency")]);
    m_metric_set_frequency_isSet = !json[QString("MetricSetFrequency")].isNull() && m_metric_set_frequency_isValid;

    m_metric_source_isValid = ::OpenAPI::fromJsonValue(m_metric_source, json[QString("MetricSource")]);
    m_metric_source_isSet = !json[QString("MetricSource")].isNull() && m_metric_source_isValid;
}

QString OAIDetectedMetricSetConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedMetricSetConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_offset.isSet()) {
        obj.insert(QString("Offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_metric_set_frequency.isSet()) {
        obj.insert(QString("MetricSetFrequency"), ::OpenAPI::toJsonValue(m_metric_set_frequency));
    }
    if (m_metric_source.isSet()) {
        obj.insert(QString("MetricSource"), ::OpenAPI::toJsonValue(m_metric_source));
    }
    return obj;
}

OAIDetectedMetricSetConfig_Offset OAIDetectedMetricSetConfig::getOffset() const {
    return m_offset;
}
void OAIDetectedMetricSetConfig::setOffset(const OAIDetectedMetricSetConfig_Offset &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIDetectedMetricSetConfig::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIDetectedMetricSetConfig::is_offset_Valid() const{
    return m_offset_isValid;
}

OAIDetectedMetricSetConfig_MetricSetFrequency OAIDetectedMetricSetConfig::getMetricSetFrequency() const {
    return m_metric_set_frequency;
}
void OAIDetectedMetricSetConfig::setMetricSetFrequency(const OAIDetectedMetricSetConfig_MetricSetFrequency &metric_set_frequency) {
    m_metric_set_frequency = metric_set_frequency;
    m_metric_set_frequency_isSet = true;
}

bool OAIDetectedMetricSetConfig::is_metric_set_frequency_Set() const{
    return m_metric_set_frequency_isSet;
}

bool OAIDetectedMetricSetConfig::is_metric_set_frequency_Valid() const{
    return m_metric_set_frequency_isValid;
}

OAIDetectedMetricSetConfig_MetricSource OAIDetectedMetricSetConfig::getMetricSource() const {
    return m_metric_source;
}
void OAIDetectedMetricSetConfig::setMetricSource(const OAIDetectedMetricSetConfig_MetricSource &metric_source) {
    m_metric_source = metric_source;
    m_metric_source_isSet = true;
}

bool OAIDetectedMetricSetConfig::is_metric_source_Set() const{
    return m_metric_source_isSet;
}

bool OAIDetectedMetricSetConfig::is_metric_source_Valid() const{
    return m_metric_source_isValid;
}

bool OAIDetectedMetricSetConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_set_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedMetricSetConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
