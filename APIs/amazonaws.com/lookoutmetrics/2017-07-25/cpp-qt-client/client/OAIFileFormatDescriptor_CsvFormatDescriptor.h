/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFileFormatDescriptor_CsvFormatDescriptor.h
 *
 * 
 */

#ifndef OAIFileFormatDescriptor_CsvFormatDescriptor_H
#define OAIFileFormatDescriptor_CsvFormatDescriptor_H

#include <QJsonObject>

#include "OAICSVFileCompression.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFileFormatDescriptor_CsvFormatDescriptor : public OAIObject {
public:
    OAIFileFormatDescriptor_CsvFormatDescriptor();
    OAIFileFormatDescriptor_CsvFormatDescriptor(QString json);
    ~OAIFileFormatDescriptor_CsvFormatDescriptor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICSVFileCompression getFileCompression() const;
    void setFileCompression(const OAICSVFileCompression &file_compression);
    bool is_file_compression_Set() const;
    bool is_file_compression_Valid() const;

    QString getCharset() const;
    void setCharset(const QString &charset);
    bool is_charset_Set() const;
    bool is_charset_Valid() const;

    bool getContainsHeader() const;
    void setContainsHeader(const bool &contains_header);
    bool is_contains_header_Set() const;
    bool is_contains_header_Valid() const;

    QString getDelimiter() const;
    void setDelimiter(const QString &delimiter);
    bool is_delimiter_Set() const;
    bool is_delimiter_Valid() const;

    QList getHeaderList() const;
    void setHeaderList(const QList &header_list);
    bool is_header_list_Set() const;
    bool is_header_list_Valid() const;

    QString getQuoteSymbol() const;
    void setQuoteSymbol(const QString &quote_symbol);
    bool is_quote_symbol_Set() const;
    bool is_quote_symbol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICSVFileCompression m_file_compression;
    bool m_file_compression_isSet;
    bool m_file_compression_isValid;

    QString m_charset;
    bool m_charset_isSet;
    bool m_charset_isValid;

    bool m_contains_header;
    bool m_contains_header_isSet;
    bool m_contains_header_isValid;

    QString m_delimiter;
    bool m_delimiter_isSet;
    bool m_delimiter_isValid;

    QList m_header_list;
    bool m_header_list_isSet;
    bool m_header_list_isValid;

    QString m_quote_symbol;
    bool m_quote_symbol_isSet;
    bool m_quote_symbol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFileFormatDescriptor_CsvFormatDescriptor)

#endif // OAIFileFormatDescriptor_CsvFormatDescriptor_H
