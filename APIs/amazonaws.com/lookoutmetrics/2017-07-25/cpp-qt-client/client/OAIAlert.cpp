/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlert::OAIAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlert::OAIAlert() {
    this->initializeModel();
}

OAIAlert::~OAIAlert() {}

void OAIAlert::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_alert_description_isSet = false;
    m_alert_description_isValid = false;

    m_alert_arn_isSet = false;
    m_alert_arn_isValid = false;

    m_anomaly_detector_arn_isSet = false;
    m_anomaly_detector_arn_isValid = false;

    m_alert_name_isSet = false;
    m_alert_name_isValid = false;

    m_alert_sensitivity_threshold_isSet = false;
    m_alert_sensitivity_threshold_isValid = false;

    m_alert_type_isSet = false;
    m_alert_type_isValid = false;

    m_alert_status_isSet = false;
    m_alert_status_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_alert_filters_isSet = false;
    m_alert_filters_isValid = false;
}

void OAIAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlert::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_alert_description_isValid = ::OpenAPI::fromJsonValue(m_alert_description, json[QString("AlertDescription")]);
    m_alert_description_isSet = !json[QString("AlertDescription")].isNull() && m_alert_description_isValid;

    m_alert_arn_isValid = ::OpenAPI::fromJsonValue(m_alert_arn, json[QString("AlertArn")]);
    m_alert_arn_isSet = !json[QString("AlertArn")].isNull() && m_alert_arn_isValid;

    m_anomaly_detector_arn_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_arn, json[QString("AnomalyDetectorArn")]);
    m_anomaly_detector_arn_isSet = !json[QString("AnomalyDetectorArn")].isNull() && m_anomaly_detector_arn_isValid;

    m_alert_name_isValid = ::OpenAPI::fromJsonValue(m_alert_name, json[QString("AlertName")]);
    m_alert_name_isSet = !json[QString("AlertName")].isNull() && m_alert_name_isValid;

    m_alert_sensitivity_threshold_isValid = ::OpenAPI::fromJsonValue(m_alert_sensitivity_threshold, json[QString("AlertSensitivityThreshold")]);
    m_alert_sensitivity_threshold_isSet = !json[QString("AlertSensitivityThreshold")].isNull() && m_alert_sensitivity_threshold_isValid;

    m_alert_type_isValid = ::OpenAPI::fromJsonValue(m_alert_type, json[QString("AlertType")]);
    m_alert_type_isSet = !json[QString("AlertType")].isNull() && m_alert_type_isValid;

    m_alert_status_isValid = ::OpenAPI::fromJsonValue(m_alert_status, json[QString("AlertStatus")]);
    m_alert_status_isSet = !json[QString("AlertStatus")].isNull() && m_alert_status_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_alert_filters_isValid = ::OpenAPI::fromJsonValue(m_alert_filters, json[QString("AlertFilters")]);
    m_alert_filters_isSet = !json[QString("AlertFilters")].isNull() && m_alert_filters_isValid;
}

QString OAIAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_alert_description_isSet) {
        obj.insert(QString("AlertDescription"), ::OpenAPI::toJsonValue(m_alert_description));
    }
    if (m_alert_arn_isSet) {
        obj.insert(QString("AlertArn"), ::OpenAPI::toJsonValue(m_alert_arn));
    }
    if (m_anomaly_detector_arn_isSet) {
        obj.insert(QString("AnomalyDetectorArn"), ::OpenAPI::toJsonValue(m_anomaly_detector_arn));
    }
    if (m_alert_name_isSet) {
        obj.insert(QString("AlertName"), ::OpenAPI::toJsonValue(m_alert_name));
    }
    if (m_alert_sensitivity_threshold_isSet) {
        obj.insert(QString("AlertSensitivityThreshold"), ::OpenAPI::toJsonValue(m_alert_sensitivity_threshold));
    }
    if (m_alert_type.isSet()) {
        obj.insert(QString("AlertType"), ::OpenAPI::toJsonValue(m_alert_type));
    }
    if (m_alert_status.isSet()) {
        obj.insert(QString("AlertStatus"), ::OpenAPI::toJsonValue(m_alert_status));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_alert_filters.isSet()) {
        obj.insert(QString("AlertFilters"), ::OpenAPI::toJsonValue(m_alert_filters));
    }
    return obj;
}

OAIAlert_Action OAIAlert::getAction() const {
    return m_action;
}
void OAIAlert::setAction(const OAIAlert_Action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAlert::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAlert::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIAlert::getAlertDescription() const {
    return m_alert_description;
}
void OAIAlert::setAlertDescription(const QString &alert_description) {
    m_alert_description = alert_description;
    m_alert_description_isSet = true;
}

bool OAIAlert::is_alert_description_Set() const{
    return m_alert_description_isSet;
}

bool OAIAlert::is_alert_description_Valid() const{
    return m_alert_description_isValid;
}

QString OAIAlert::getAlertArn() const {
    return m_alert_arn;
}
void OAIAlert::setAlertArn(const QString &alert_arn) {
    m_alert_arn = alert_arn;
    m_alert_arn_isSet = true;
}

bool OAIAlert::is_alert_arn_Set() const{
    return m_alert_arn_isSet;
}

bool OAIAlert::is_alert_arn_Valid() const{
    return m_alert_arn_isValid;
}

QString OAIAlert::getAnomalyDetectorArn() const {
    return m_anomaly_detector_arn;
}
void OAIAlert::setAnomalyDetectorArn(const QString &anomaly_detector_arn) {
    m_anomaly_detector_arn = anomaly_detector_arn;
    m_anomaly_detector_arn_isSet = true;
}

bool OAIAlert::is_anomaly_detector_arn_Set() const{
    return m_anomaly_detector_arn_isSet;
}

bool OAIAlert::is_anomaly_detector_arn_Valid() const{
    return m_anomaly_detector_arn_isValid;
}

QString OAIAlert::getAlertName() const {
    return m_alert_name;
}
void OAIAlert::setAlertName(const QString &alert_name) {
    m_alert_name = alert_name;
    m_alert_name_isSet = true;
}

bool OAIAlert::is_alert_name_Set() const{
    return m_alert_name_isSet;
}

bool OAIAlert::is_alert_name_Valid() const{
    return m_alert_name_isValid;
}

qint32 OAIAlert::getAlertSensitivityThreshold() const {
    return m_alert_sensitivity_threshold;
}
void OAIAlert::setAlertSensitivityThreshold(const qint32 &alert_sensitivity_threshold) {
    m_alert_sensitivity_threshold = alert_sensitivity_threshold;
    m_alert_sensitivity_threshold_isSet = true;
}

bool OAIAlert::is_alert_sensitivity_threshold_Set() const{
    return m_alert_sensitivity_threshold_isSet;
}

bool OAIAlert::is_alert_sensitivity_threshold_Valid() const{
    return m_alert_sensitivity_threshold_isValid;
}

OAIAlertType OAIAlert::getAlertType() const {
    return m_alert_type;
}
void OAIAlert::setAlertType(const OAIAlertType &alert_type) {
    m_alert_type = alert_type;
    m_alert_type_isSet = true;
}

bool OAIAlert::is_alert_type_Set() const{
    return m_alert_type_isSet;
}

bool OAIAlert::is_alert_type_Valid() const{
    return m_alert_type_isValid;
}

OAIAlertStatus OAIAlert::getAlertStatus() const {
    return m_alert_status;
}
void OAIAlert::setAlertStatus(const OAIAlertStatus &alert_status) {
    m_alert_status = alert_status;
    m_alert_status_isSet = true;
}

bool OAIAlert::is_alert_status_Set() const{
    return m_alert_status_isSet;
}

bool OAIAlert::is_alert_status_Valid() const{
    return m_alert_status_isValid;
}

QDateTime OAIAlert::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIAlert::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIAlert::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIAlert::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

QDateTime OAIAlert::getCreationTime() const {
    return m_creation_time;
}
void OAIAlert::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAlert::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAlert::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIAlert_AlertFilters OAIAlert::getAlertFilters() const {
    return m_alert_filters;
}
void OAIAlert::setAlertFilters(const OAIAlert_AlertFilters &alert_filters) {
    m_alert_filters = alert_filters;
    m_alert_filters_isSet = true;
}

bool OAIAlert::is_alert_filters_Set() const{
    return m_alert_filters_isSet;
}

bool OAIAlert::is_alert_filters_Valid() const{
    return m_alert_filters_isValid;
}

bool OAIAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_detector_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_sensitivity_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
