/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnomalyDetectorStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnomalyDetectorStatus::OAIAnomalyDetectorStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnomalyDetectorStatus::OAIAnomalyDetectorStatus() {
    this->initializeModel();
}

OAIAnomalyDetectorStatus::~OAIAnomalyDetectorStatus() {}

void OAIAnomalyDetectorStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAnomalyDetectorStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAnomalyDetectorStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::ACTIVATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::INACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEARNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::LEARNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACK_TEST_ACTIVATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::BACK_TEST_ACTIVATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACK_TEST_ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::BACK_TEST_ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACK_TEST_COMPLETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::BACK_TEST_COMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEACTIVATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::DEACTIVATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEACTIVATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectorStatus::DEACTIVATING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAnomalyDetectorStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAnomalyDetectorStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAnomalyDetectorStatus::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIAnomalyDetectorStatus::ACTIVATING:
            val = "ACTIVATING";
            break;
        case eOAIAnomalyDetectorStatus::DELETING:
            val = "DELETING";
            break;
        case eOAIAnomalyDetectorStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIAnomalyDetectorStatus::INACTIVE:
            val = "INACTIVE";
            break;
        case eOAIAnomalyDetectorStatus::LEARNING:
            val = "LEARNING";
            break;
        case eOAIAnomalyDetectorStatus::BACK_TEST_ACTIVATING:
            val = "BACK_TEST_ACTIVATING";
            break;
        case eOAIAnomalyDetectorStatus::BACK_TEST_ACTIVE:
            val = "BACK_TEST_ACTIVE";
            break;
        case eOAIAnomalyDetectorStatus::BACK_TEST_COMPLETE:
            val = "BACK_TEST_COMPLETE";
            break;
        case eOAIAnomalyDetectorStatus::DEACTIVATED:
            val = "DEACTIVATED";
            break;
        case eOAIAnomalyDetectorStatus::DEACTIVATING:
            val = "DEACTIVATING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAnomalyDetectorStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAnomalyDetectorStatus::eOAIAnomalyDetectorStatus OAIAnomalyDetectorStatus::getValue() const {
    return m_value;
}

void OAIAnomalyDetectorStatus::setValue(const OAIAnomalyDetectorStatus::eOAIAnomalyDetectorStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAnomalyDetectorStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIAnomalyDetectorStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
