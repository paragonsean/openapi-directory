/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAlertRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAlertRequest::OAICreateAlertRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAlertRequest::OAICreateAlertRequest() {
    this->initializeModel();
}

OAICreateAlertRequest::~OAICreateAlertRequest() {}

void OAICreateAlertRequest::initializeModel() {

    m_alert_name_isSet = false;
    m_alert_name_isValid = false;

    m_alert_sensitivity_threshold_isSet = false;
    m_alert_sensitivity_threshold_isValid = false;

    m_alert_description_isSet = false;
    m_alert_description_isValid = false;

    m_anomaly_detector_arn_isSet = false;
    m_anomaly_detector_arn_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_alert_filters_isSet = false;
    m_alert_filters_isValid = false;
}

void OAICreateAlertRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAlertRequest::fromJsonObject(QJsonObject json) {

    m_alert_name_isValid = ::OpenAPI::fromJsonValue(m_alert_name, json[QString("AlertName")]);
    m_alert_name_isSet = !json[QString("AlertName")].isNull() && m_alert_name_isValid;

    m_alert_sensitivity_threshold_isValid = ::OpenAPI::fromJsonValue(m_alert_sensitivity_threshold, json[QString("AlertSensitivityThreshold")]);
    m_alert_sensitivity_threshold_isSet = !json[QString("AlertSensitivityThreshold")].isNull() && m_alert_sensitivity_threshold_isValid;

    m_alert_description_isValid = ::OpenAPI::fromJsonValue(m_alert_description, json[QString("AlertDescription")]);
    m_alert_description_isSet = !json[QString("AlertDescription")].isNull() && m_alert_description_isValid;

    m_anomaly_detector_arn_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_arn, json[QString("AnomalyDetectorArn")]);
    m_anomaly_detector_arn_isSet = !json[QString("AnomalyDetectorArn")].isNull() && m_anomaly_detector_arn_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_alert_filters_isValid = ::OpenAPI::fromJsonValue(m_alert_filters, json[QString("AlertFilters")]);
    m_alert_filters_isSet = !json[QString("AlertFilters")].isNull() && m_alert_filters_isValid;
}

QString OAICreateAlertRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAlertRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_name_isSet) {
        obj.insert(QString("AlertName"), ::OpenAPI::toJsonValue(m_alert_name));
    }
    if (m_alert_sensitivity_threshold_isSet) {
        obj.insert(QString("AlertSensitivityThreshold"), ::OpenAPI::toJsonValue(m_alert_sensitivity_threshold));
    }
    if (m_alert_description_isSet) {
        obj.insert(QString("AlertDescription"), ::OpenAPI::toJsonValue(m_alert_description));
    }
    if (m_anomaly_detector_arn_isSet) {
        obj.insert(QString("AnomalyDetectorArn"), ::OpenAPI::toJsonValue(m_anomaly_detector_arn));
    }
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_alert_filters.isSet()) {
        obj.insert(QString("AlertFilters"), ::OpenAPI::toJsonValue(m_alert_filters));
    }
    return obj;
}

QString OAICreateAlertRequest::getAlertName() const {
    return m_alert_name;
}
void OAICreateAlertRequest::setAlertName(const QString &alert_name) {
    m_alert_name = alert_name;
    m_alert_name_isSet = true;
}

bool OAICreateAlertRequest::is_alert_name_Set() const{
    return m_alert_name_isSet;
}

bool OAICreateAlertRequest::is_alert_name_Valid() const{
    return m_alert_name_isValid;
}

qint32 OAICreateAlertRequest::getAlertSensitivityThreshold() const {
    return m_alert_sensitivity_threshold;
}
void OAICreateAlertRequest::setAlertSensitivityThreshold(const qint32 &alert_sensitivity_threshold) {
    m_alert_sensitivity_threshold = alert_sensitivity_threshold;
    m_alert_sensitivity_threshold_isSet = true;
}

bool OAICreateAlertRequest::is_alert_sensitivity_threshold_Set() const{
    return m_alert_sensitivity_threshold_isSet;
}

bool OAICreateAlertRequest::is_alert_sensitivity_threshold_Valid() const{
    return m_alert_sensitivity_threshold_isValid;
}

QString OAICreateAlertRequest::getAlertDescription() const {
    return m_alert_description;
}
void OAICreateAlertRequest::setAlertDescription(const QString &alert_description) {
    m_alert_description = alert_description;
    m_alert_description_isSet = true;
}

bool OAICreateAlertRequest::is_alert_description_Set() const{
    return m_alert_description_isSet;
}

bool OAICreateAlertRequest::is_alert_description_Valid() const{
    return m_alert_description_isValid;
}

QString OAICreateAlertRequest::getAnomalyDetectorArn() const {
    return m_anomaly_detector_arn;
}
void OAICreateAlertRequest::setAnomalyDetectorArn(const QString &anomaly_detector_arn) {
    m_anomaly_detector_arn = anomaly_detector_arn;
    m_anomaly_detector_arn_isSet = true;
}

bool OAICreateAlertRequest::is_anomaly_detector_arn_Set() const{
    return m_anomaly_detector_arn_isSet;
}

bool OAICreateAlertRequest::is_anomaly_detector_arn_Valid() const{
    return m_anomaly_detector_arn_isValid;
}

OAIAlert_Action OAICreateAlertRequest::getAction() const {
    return m_action;
}
void OAICreateAlertRequest::setAction(const OAIAlert_Action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICreateAlertRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAICreateAlertRequest::is_action_Valid() const{
    return m_action_isValid;
}

QMap OAICreateAlertRequest::getTags() const {
    return m_tags;
}
void OAICreateAlertRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAlertRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAlertRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateAlertRequest_AlertFilters OAICreateAlertRequest::getAlertFilters() const {
    return m_alert_filters;
}
void OAICreateAlertRequest::setAlertFilters(const OAICreateAlertRequest_AlertFilters &alert_filters) {
    m_alert_filters = alert_filters;
    m_alert_filters_isSet = true;
}

bool OAICreateAlertRequest::is_alert_filters_Set() const{
    return m_alert_filters_isSet;
}

bool OAICreateAlertRequest::is_alert_filters_Valid() const{
    return m_alert_filters_isValid;
}

bool OAICreateAlertRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_sensitivity_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_detector_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAlertRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alert_name_isValid && m_anomaly_detector_arn_isValid && m_action_isValid && true;
}

} // namespace OpenAPI
