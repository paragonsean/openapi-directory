/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAlert_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAlert_request::OAIUpdateAlert_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAlert_request::OAIUpdateAlert_request() {
    this->initializeModel();
}

OAIUpdateAlert_request::~OAIUpdateAlert_request() {}

void OAIUpdateAlert_request::initializeModel() {

    m_alert_arn_isSet = false;
    m_alert_arn_isValid = false;

    m_alert_description_isSet = false;
    m_alert_description_isValid = false;

    m_alert_sensitivity_threshold_isSet = false;
    m_alert_sensitivity_threshold_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_alert_filters_isSet = false;
    m_alert_filters_isValid = false;
}

void OAIUpdateAlert_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAlert_request::fromJsonObject(QJsonObject json) {

    m_alert_arn_isValid = ::OpenAPI::fromJsonValue(m_alert_arn, json[QString("AlertArn")]);
    m_alert_arn_isSet = !json[QString("AlertArn")].isNull() && m_alert_arn_isValid;

    m_alert_description_isValid = ::OpenAPI::fromJsonValue(m_alert_description, json[QString("AlertDescription")]);
    m_alert_description_isSet = !json[QString("AlertDescription")].isNull() && m_alert_description_isValid;

    m_alert_sensitivity_threshold_isValid = ::OpenAPI::fromJsonValue(m_alert_sensitivity_threshold, json[QString("AlertSensitivityThreshold")]);
    m_alert_sensitivity_threshold_isSet = !json[QString("AlertSensitivityThreshold")].isNull() && m_alert_sensitivity_threshold_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_alert_filters_isValid = ::OpenAPI::fromJsonValue(m_alert_filters, json[QString("AlertFilters")]);
    m_alert_filters_isSet = !json[QString("AlertFilters")].isNull() && m_alert_filters_isValid;
}

QString OAIUpdateAlert_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAlert_request::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_arn_isSet) {
        obj.insert(QString("AlertArn"), ::OpenAPI::toJsonValue(m_alert_arn));
    }
    if (m_alert_description_isSet) {
        obj.insert(QString("AlertDescription"), ::OpenAPI::toJsonValue(m_alert_description));
    }
    if (m_alert_sensitivity_threshold_isSet) {
        obj.insert(QString("AlertSensitivityThreshold"), ::OpenAPI::toJsonValue(m_alert_sensitivity_threshold));
    }
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_alert_filters.isSet()) {
        obj.insert(QString("AlertFilters"), ::OpenAPI::toJsonValue(m_alert_filters));
    }
    return obj;
}

QString OAIUpdateAlert_request::getAlertArn() const {
    return m_alert_arn;
}
void OAIUpdateAlert_request::setAlertArn(const QString &alert_arn) {
    m_alert_arn = alert_arn;
    m_alert_arn_isSet = true;
}

bool OAIUpdateAlert_request::is_alert_arn_Set() const{
    return m_alert_arn_isSet;
}

bool OAIUpdateAlert_request::is_alert_arn_Valid() const{
    return m_alert_arn_isValid;
}

QString OAIUpdateAlert_request::getAlertDescription() const {
    return m_alert_description;
}
void OAIUpdateAlert_request::setAlertDescription(const QString &alert_description) {
    m_alert_description = alert_description;
    m_alert_description_isSet = true;
}

bool OAIUpdateAlert_request::is_alert_description_Set() const{
    return m_alert_description_isSet;
}

bool OAIUpdateAlert_request::is_alert_description_Valid() const{
    return m_alert_description_isValid;
}

qint32 OAIUpdateAlert_request::getAlertSensitivityThreshold() const {
    return m_alert_sensitivity_threshold;
}
void OAIUpdateAlert_request::setAlertSensitivityThreshold(const qint32 &alert_sensitivity_threshold) {
    m_alert_sensitivity_threshold = alert_sensitivity_threshold;
    m_alert_sensitivity_threshold_isSet = true;
}

bool OAIUpdateAlert_request::is_alert_sensitivity_threshold_Set() const{
    return m_alert_sensitivity_threshold_isSet;
}

bool OAIUpdateAlert_request::is_alert_sensitivity_threshold_Valid() const{
    return m_alert_sensitivity_threshold_isValid;
}

OAICreateAlert_request_Action OAIUpdateAlert_request::getAction() const {
    return m_action;
}
void OAIUpdateAlert_request::setAction(const OAICreateAlert_request_Action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIUpdateAlert_request::is_action_Set() const{
    return m_action_isSet;
}

bool OAIUpdateAlert_request::is_action_Valid() const{
    return m_action_isValid;
}

OAICreateAlert_request_AlertFilters OAIUpdateAlert_request::getAlertFilters() const {
    return m_alert_filters;
}
void OAIUpdateAlert_request::setAlertFilters(const OAICreateAlert_request_AlertFilters &alert_filters) {
    m_alert_filters = alert_filters;
    m_alert_filters_isSet = true;
}

bool OAIUpdateAlert_request::is_alert_filters_Set() const{
    return m_alert_filters_isSet;
}

bool OAIUpdateAlert_request::is_alert_filters_Valid() const{
    return m_alert_filters_isValid;
}

bool OAIUpdateAlert_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_sensitivity_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAlert_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alert_arn_isValid && true;
}

} // namespace OpenAPI
