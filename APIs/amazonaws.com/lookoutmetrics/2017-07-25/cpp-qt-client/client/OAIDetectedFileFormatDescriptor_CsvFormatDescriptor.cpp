/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedFileFormatDescriptor_CsvFormatDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::OAIDetectedFileFormatDescriptor_CsvFormatDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::OAIDetectedFileFormatDescriptor_CsvFormatDescriptor() {
    this->initializeModel();
}

OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::~OAIDetectedFileFormatDescriptor_CsvFormatDescriptor() {}

void OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::initializeModel() {

    m_file_compression_isSet = false;
    m_file_compression_isValid = false;

    m_charset_isSet = false;
    m_charset_isValid = false;

    m_contains_header_isSet = false;
    m_contains_header_isValid = false;

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_header_list_isSet = false;
    m_header_list_isValid = false;

    m_quote_symbol_isSet = false;
    m_quote_symbol_isValid = false;
}

void OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::fromJsonObject(QJsonObject json) {

    m_file_compression_isValid = ::OpenAPI::fromJsonValue(m_file_compression, json[QString("FileCompression")]);
    m_file_compression_isSet = !json[QString("FileCompression")].isNull() && m_file_compression_isValid;

    m_charset_isValid = ::OpenAPI::fromJsonValue(m_charset, json[QString("Charset")]);
    m_charset_isSet = !json[QString("Charset")].isNull() && m_charset_isValid;

    m_contains_header_isValid = ::OpenAPI::fromJsonValue(m_contains_header, json[QString("ContainsHeader")]);
    m_contains_header_isSet = !json[QString("ContainsHeader")].isNull() && m_contains_header_isValid;

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("Delimiter")]);
    m_delimiter_isSet = !json[QString("Delimiter")].isNull() && m_delimiter_isValid;

    m_header_list_isValid = ::OpenAPI::fromJsonValue(m_header_list, json[QString("HeaderList")]);
    m_header_list_isSet = !json[QString("HeaderList")].isNull() && m_header_list_isValid;

    m_quote_symbol_isValid = ::OpenAPI::fromJsonValue(m_quote_symbol, json[QString("QuoteSymbol")]);
    m_quote_symbol_isSet = !json[QString("QuoteSymbol")].isNull() && m_quote_symbol_isValid;
}

QString OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_file_compression.isSet()) {
        obj.insert(QString("FileCompression"), ::OpenAPI::toJsonValue(m_file_compression));
    }
    if (m_charset.isSet()) {
        obj.insert(QString("Charset"), ::OpenAPI::toJsonValue(m_charset));
    }
    if (m_contains_header.isSet()) {
        obj.insert(QString("ContainsHeader"), ::OpenAPI::toJsonValue(m_contains_header));
    }
    if (m_delimiter.isSet()) {
        obj.insert(QString("Delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_header_list.isSet()) {
        obj.insert(QString("HeaderList"), ::OpenAPI::toJsonValue(m_header_list));
    }
    if (m_quote_symbol.isSet()) {
        obj.insert(QString("QuoteSymbol"), ::OpenAPI::toJsonValue(m_quote_symbol));
    }
    return obj;
}

OAIDetectedCsvFormatDescriptor_FileCompression OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::getFileCompression() const {
    return m_file_compression;
}
void OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::setFileCompression(const OAIDetectedCsvFormatDescriptor_FileCompression &file_compression) {
    m_file_compression = file_compression;
    m_file_compression_isSet = true;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_file_compression_Set() const{
    return m_file_compression_isSet;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_file_compression_Valid() const{
    return m_file_compression_isValid;
}

OAIDetectedCsvFormatDescriptor_Charset OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::getCharset() const {
    return m_charset;
}
void OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::setCharset(const OAIDetectedCsvFormatDescriptor_Charset &charset) {
    m_charset = charset;
    m_charset_isSet = true;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_charset_Set() const{
    return m_charset_isSet;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_charset_Valid() const{
    return m_charset_isValid;
}

OAIDetectedCsvFormatDescriptor_ContainsHeader OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::getContainsHeader() const {
    return m_contains_header;
}
void OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::setContainsHeader(const OAIDetectedCsvFormatDescriptor_ContainsHeader &contains_header) {
    m_contains_header = contains_header;
    m_contains_header_isSet = true;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_contains_header_Set() const{
    return m_contains_header_isSet;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_contains_header_Valid() const{
    return m_contains_header_isValid;
}

OAIDetectedCsvFormatDescriptor_Delimiter OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::getDelimiter() const {
    return m_delimiter;
}
void OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::setDelimiter(const OAIDetectedCsvFormatDescriptor_Delimiter &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

OAIDetectedCsvFormatDescriptor_HeaderList OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::getHeaderList() const {
    return m_header_list;
}
void OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::setHeaderList(const OAIDetectedCsvFormatDescriptor_HeaderList &header_list) {
    m_header_list = header_list;
    m_header_list_isSet = true;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_header_list_Set() const{
    return m_header_list_isSet;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_header_list_Valid() const{
    return m_header_list_isValid;
}

OAIDetectedCsvFormatDescriptor_QuoteSymbol OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::getQuoteSymbol() const {
    return m_quote_symbol;
}
void OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::setQuoteSymbol(const OAIDetectedCsvFormatDescriptor_QuoteSymbol &quote_symbol) {
    m_quote_symbol = quote_symbol;
    m_quote_symbol_isSet = true;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_quote_symbol_Set() const{
    return m_quote_symbol_isSet;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::is_quote_symbol_Valid() const{
    return m_quote_symbol_isValid;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_charset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_symbol.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedFileFormatDescriptor_CsvFormatDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
