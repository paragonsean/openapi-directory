/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInterMetricImpactDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInterMetricImpactDetails::OAIInterMetricImpactDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInterMetricImpactDetails::OAIInterMetricImpactDetails() {
    this->initializeModel();
}

OAIInterMetricImpactDetails::~OAIInterMetricImpactDetails() {}

void OAIInterMetricImpactDetails::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_anomaly_group_id_isSet = false;
    m_anomaly_group_id_isValid = false;

    m_relationship_type_isSet = false;
    m_relationship_type_isValid = false;

    m_contribution_percentage_isSet = false;
    m_contribution_percentage_isValid = false;
}

void OAIInterMetricImpactDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInterMetricImpactDetails::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_anomaly_group_id_isValid = ::OpenAPI::fromJsonValue(m_anomaly_group_id, json[QString("AnomalyGroupId")]);
    m_anomaly_group_id_isSet = !json[QString("AnomalyGroupId")].isNull() && m_anomaly_group_id_isValid;

    m_relationship_type_isValid = ::OpenAPI::fromJsonValue(m_relationship_type, json[QString("RelationshipType")]);
    m_relationship_type_isSet = !json[QString("RelationshipType")].isNull() && m_relationship_type_isValid;

    m_contribution_percentage_isValid = ::OpenAPI::fromJsonValue(m_contribution_percentage, json[QString("ContributionPercentage")]);
    m_contribution_percentage_isSet = !json[QString("ContributionPercentage")].isNull() && m_contribution_percentage_isValid;
}

QString OAIInterMetricImpactDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInterMetricImpactDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_anomaly_group_id_isSet) {
        obj.insert(QString("AnomalyGroupId"), ::OpenAPI::toJsonValue(m_anomaly_group_id));
    }
    if (m_relationship_type.isSet()) {
        obj.insert(QString("RelationshipType"), ::OpenAPI::toJsonValue(m_relationship_type));
    }
    if (m_contribution_percentage_isSet) {
        obj.insert(QString("ContributionPercentage"), ::OpenAPI::toJsonValue(m_contribution_percentage));
    }
    return obj;
}

QString OAIInterMetricImpactDetails::getMetricName() const {
    return m_metric_name;
}
void OAIInterMetricImpactDetails::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIInterMetricImpactDetails::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIInterMetricImpactDetails::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAIInterMetricImpactDetails::getAnomalyGroupId() const {
    return m_anomaly_group_id;
}
void OAIInterMetricImpactDetails::setAnomalyGroupId(const QString &anomaly_group_id) {
    m_anomaly_group_id = anomaly_group_id;
    m_anomaly_group_id_isSet = true;
}

bool OAIInterMetricImpactDetails::is_anomaly_group_id_Set() const{
    return m_anomaly_group_id_isSet;
}

bool OAIInterMetricImpactDetails::is_anomaly_group_id_Valid() const{
    return m_anomaly_group_id_isValid;
}

OAIRelationshipType OAIInterMetricImpactDetails::getRelationshipType() const {
    return m_relationship_type;
}
void OAIInterMetricImpactDetails::setRelationshipType(const OAIRelationshipType &relationship_type) {
    m_relationship_type = relationship_type;
    m_relationship_type_isSet = true;
}

bool OAIInterMetricImpactDetails::is_relationship_type_Set() const{
    return m_relationship_type_isSet;
}

bool OAIInterMetricImpactDetails::is_relationship_type_Valid() const{
    return m_relationship_type_isValid;
}

double OAIInterMetricImpactDetails::getContributionPercentage() const {
    return m_contribution_percentage;
}
void OAIInterMetricImpactDetails::setContributionPercentage(const double &contribution_percentage) {
    m_contribution_percentage = contribution_percentage;
    m_contribution_percentage_isSet = true;
}

bool OAIInterMetricImpactDetails::is_contribution_percentage_Set() const{
    return m_contribution_percentage_isSet;
}

bool OAIInterMetricImpactDetails::is_contribution_percentage_Valid() const{
    return m_contribution_percentage_isValid;
}

bool OAIInterMetricImpactDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInterMetricImpactDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
