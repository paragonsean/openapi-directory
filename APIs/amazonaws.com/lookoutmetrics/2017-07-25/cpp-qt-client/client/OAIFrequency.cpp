/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrequency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrequency::OAIFrequency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrequency::OAIFrequency() {
    this->initializeModel();
}

OAIFrequency::~OAIFrequency() {}

void OAIFrequency::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFrequency::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFrequency::fromJson(QString jsonString) {
    
    if ( jsonString.compare("P1D", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequency::P1D;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT1H", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequency::PT1H;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT10M", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequency::PT10M;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT5M", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequency::PT5M;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFrequency::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFrequency::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFrequency::P1D:
            val = "P1D";
            break;
        case eOAIFrequency::PT1H:
            val = "PT1H";
            break;
        case eOAIFrequency::PT10M:
            val = "PT10M";
            break;
        case eOAIFrequency::PT5M:
            val = "PT5M";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFrequency::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFrequency::eOAIFrequency OAIFrequency::getValue() const {
    return m_value;
}

void OAIFrequency::setValue(const OAIFrequency::eOAIFrequency& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFrequency::isSet() const {
    
    return m_value_isSet;
}

bool OAIFrequency::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
