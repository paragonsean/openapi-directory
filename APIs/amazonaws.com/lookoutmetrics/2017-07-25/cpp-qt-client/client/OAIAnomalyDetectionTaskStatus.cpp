/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnomalyDetectionTaskStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnomalyDetectionTaskStatus::OAIAnomalyDetectionTaskStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnomalyDetectionTaskStatus::OAIAnomalyDetectionTaskStatus() {
    this->initializeModel();
}

OAIAnomalyDetectionTaskStatus::~OAIAnomalyDetectionTaskStatus() {}

void OAIAnomalyDetectionTaskStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAnomalyDetectionTaskStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAnomalyDetectionTaskStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectionTaskStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectionTaskStatus::IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectionTaskStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectionTaskStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_SCHEDULE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnomalyDetectionTaskStatus::FAILED_TO_SCHEDULE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAnomalyDetectionTaskStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAnomalyDetectionTaskStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAnomalyDetectionTaskStatus::PENDING:
            val = "PENDING";
            break;
        case eOAIAnomalyDetectionTaskStatus::IN_PROGRESS:
            val = "IN_PROGRESS";
            break;
        case eOAIAnomalyDetectionTaskStatus::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAIAnomalyDetectionTaskStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIAnomalyDetectionTaskStatus::FAILED_TO_SCHEDULE:
            val = "FAILED_TO_SCHEDULE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAnomalyDetectionTaskStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAnomalyDetectionTaskStatus::eOAIAnomalyDetectionTaskStatus OAIAnomalyDetectionTaskStatus::getValue() const {
    return m_value;
}

void OAIAnomalyDetectionTaskStatus::setValue(const OAIAnomalyDetectionTaskStatus::eOAIAnomalyDetectionTaskStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAnomalyDetectionTaskStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIAnomalyDetectionTaskStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
