/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMetricSetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMetricSetRequest::OAICreateMetricSetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMetricSetRequest::OAICreateMetricSetRequest() {
    this->initializeModel();
}

OAICreateMetricSetRequest::~OAICreateMetricSetRequest() {}

void OAICreateMetricSetRequest::initializeModel() {

    m_anomaly_detector_arn_isSet = false;
    m_anomaly_detector_arn_isValid = false;

    m_metric_set_name_isSet = false;
    m_metric_set_name_isValid = false;

    m_metric_set_description_isSet = false;
    m_metric_set_description_isValid = false;

    m_metric_list_isSet = false;
    m_metric_list_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_timestamp_column_isSet = false;
    m_timestamp_column_isValid = false;

    m_dimension_list_isSet = false;
    m_dimension_list_isValid = false;

    m_metric_set_frequency_isSet = false;
    m_metric_set_frequency_isValid = false;

    m_metric_source_isSet = false;
    m_metric_source_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_dimension_filter_list_isSet = false;
    m_dimension_filter_list_isValid = false;
}

void OAICreateMetricSetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMetricSetRequest::fromJsonObject(QJsonObject json) {

    m_anomaly_detector_arn_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_arn, json[QString("AnomalyDetectorArn")]);
    m_anomaly_detector_arn_isSet = !json[QString("AnomalyDetectorArn")].isNull() && m_anomaly_detector_arn_isValid;

    m_metric_set_name_isValid = ::OpenAPI::fromJsonValue(m_metric_set_name, json[QString("MetricSetName")]);
    m_metric_set_name_isSet = !json[QString("MetricSetName")].isNull() && m_metric_set_name_isValid;

    m_metric_set_description_isValid = ::OpenAPI::fromJsonValue(m_metric_set_description, json[QString("MetricSetDescription")]);
    m_metric_set_description_isSet = !json[QString("MetricSetDescription")].isNull() && m_metric_set_description_isValid;

    m_metric_list_isValid = ::OpenAPI::fromJsonValue(m_metric_list, json[QString("MetricList")]);
    m_metric_list_isSet = !json[QString("MetricList")].isNull() && m_metric_list_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("Offset")]);
    m_offset_isSet = !json[QString("Offset")].isNull() && m_offset_isValid;

    m_timestamp_column_isValid = ::OpenAPI::fromJsonValue(m_timestamp_column, json[QString("TimestampColumn")]);
    m_timestamp_column_isSet = !json[QString("TimestampColumn")].isNull() && m_timestamp_column_isValid;

    m_dimension_list_isValid = ::OpenAPI::fromJsonValue(m_dimension_list, json[QString("DimensionList")]);
    m_dimension_list_isSet = !json[QString("DimensionList")].isNull() && m_dimension_list_isValid;

    m_metric_set_frequency_isValid = ::OpenAPI::fromJsonValue(m_metric_set_frequency, json[QString("MetricSetFrequency")]);
    m_metric_set_frequency_isSet = !json[QString("MetricSetFrequency")].isNull() && m_metric_set_frequency_isValid;

    m_metric_source_isValid = ::OpenAPI::fromJsonValue(m_metric_source, json[QString("MetricSource")]);
    m_metric_source_isSet = !json[QString("MetricSource")].isNull() && m_metric_source_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_dimension_filter_list_isValid = ::OpenAPI::fromJsonValue(m_dimension_filter_list, json[QString("DimensionFilterList")]);
    m_dimension_filter_list_isSet = !json[QString("DimensionFilterList")].isNull() && m_dimension_filter_list_isValid;
}

QString OAICreateMetricSetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMetricSetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_detector_arn_isSet) {
        obj.insert(QString("AnomalyDetectorArn"), ::OpenAPI::toJsonValue(m_anomaly_detector_arn));
    }
    if (m_metric_set_name_isSet) {
        obj.insert(QString("MetricSetName"), ::OpenAPI::toJsonValue(m_metric_set_name));
    }
    if (m_metric_set_description_isSet) {
        obj.insert(QString("MetricSetDescription"), ::OpenAPI::toJsonValue(m_metric_set_description));
    }
    if (m_metric_list.isSet()) {
        obj.insert(QString("MetricList"), ::OpenAPI::toJsonValue(m_metric_list));
    }
    if (m_offset_isSet) {
        obj.insert(QString("Offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_timestamp_column.isSet()) {
        obj.insert(QString("TimestampColumn"), ::OpenAPI::toJsonValue(m_timestamp_column));
    }
    if (m_dimension_list.isSet()) {
        obj.insert(QString("DimensionList"), ::OpenAPI::toJsonValue(m_dimension_list));
    }
    if (m_metric_set_frequency.isSet()) {
        obj.insert(QString("MetricSetFrequency"), ::OpenAPI::toJsonValue(m_metric_set_frequency));
    }
    if (m_metric_source.isSet()) {
        obj.insert(QString("MetricSource"), ::OpenAPI::toJsonValue(m_metric_source));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_dimension_filter_list.isSet()) {
        obj.insert(QString("DimensionFilterList"), ::OpenAPI::toJsonValue(m_dimension_filter_list));
    }
    return obj;
}

QString OAICreateMetricSetRequest::getAnomalyDetectorArn() const {
    return m_anomaly_detector_arn;
}
void OAICreateMetricSetRequest::setAnomalyDetectorArn(const QString &anomaly_detector_arn) {
    m_anomaly_detector_arn = anomaly_detector_arn;
    m_anomaly_detector_arn_isSet = true;
}

bool OAICreateMetricSetRequest::is_anomaly_detector_arn_Set() const{
    return m_anomaly_detector_arn_isSet;
}

bool OAICreateMetricSetRequest::is_anomaly_detector_arn_Valid() const{
    return m_anomaly_detector_arn_isValid;
}

QString OAICreateMetricSetRequest::getMetricSetName() const {
    return m_metric_set_name;
}
void OAICreateMetricSetRequest::setMetricSetName(const QString &metric_set_name) {
    m_metric_set_name = metric_set_name;
    m_metric_set_name_isSet = true;
}

bool OAICreateMetricSetRequest::is_metric_set_name_Set() const{
    return m_metric_set_name_isSet;
}

bool OAICreateMetricSetRequest::is_metric_set_name_Valid() const{
    return m_metric_set_name_isValid;
}

QString OAICreateMetricSetRequest::getMetricSetDescription() const {
    return m_metric_set_description;
}
void OAICreateMetricSetRequest::setMetricSetDescription(const QString &metric_set_description) {
    m_metric_set_description = metric_set_description;
    m_metric_set_description_isSet = true;
}

bool OAICreateMetricSetRequest::is_metric_set_description_Set() const{
    return m_metric_set_description_isSet;
}

bool OAICreateMetricSetRequest::is_metric_set_description_Valid() const{
    return m_metric_set_description_isValid;
}

QList OAICreateMetricSetRequest::getMetricList() const {
    return m_metric_list;
}
void OAICreateMetricSetRequest::setMetricList(const QList &metric_list) {
    m_metric_list = metric_list;
    m_metric_list_isSet = true;
}

bool OAICreateMetricSetRequest::is_metric_list_Set() const{
    return m_metric_list_isSet;
}

bool OAICreateMetricSetRequest::is_metric_list_Valid() const{
    return m_metric_list_isValid;
}

qint32 OAICreateMetricSetRequest::getOffset() const {
    return m_offset;
}
void OAICreateMetricSetRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAICreateMetricSetRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAICreateMetricSetRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

OAIDescribeMetricSetResponse_TimestampColumn OAICreateMetricSetRequest::getTimestampColumn() const {
    return m_timestamp_column;
}
void OAICreateMetricSetRequest::setTimestampColumn(const OAIDescribeMetricSetResponse_TimestampColumn &timestamp_column) {
    m_timestamp_column = timestamp_column;
    m_timestamp_column_isSet = true;
}

bool OAICreateMetricSetRequest::is_timestamp_column_Set() const{
    return m_timestamp_column_isSet;
}

bool OAICreateMetricSetRequest::is_timestamp_column_Valid() const{
    return m_timestamp_column_isValid;
}

QList OAICreateMetricSetRequest::getDimensionList() const {
    return m_dimension_list;
}
void OAICreateMetricSetRequest::setDimensionList(const QList &dimension_list) {
    m_dimension_list = dimension_list;
    m_dimension_list_isSet = true;
}

bool OAICreateMetricSetRequest::is_dimension_list_Set() const{
    return m_dimension_list_isSet;
}

bool OAICreateMetricSetRequest::is_dimension_list_Valid() const{
    return m_dimension_list_isValid;
}

OAIFrequency OAICreateMetricSetRequest::getMetricSetFrequency() const {
    return m_metric_set_frequency;
}
void OAICreateMetricSetRequest::setMetricSetFrequency(const OAIFrequency &metric_set_frequency) {
    m_metric_set_frequency = metric_set_frequency;
    m_metric_set_frequency_isSet = true;
}

bool OAICreateMetricSetRequest::is_metric_set_frequency_Set() const{
    return m_metric_set_frequency_isSet;
}

bool OAICreateMetricSetRequest::is_metric_set_frequency_Valid() const{
    return m_metric_set_frequency_isValid;
}

OAICreateMetricSetRequest_MetricSource OAICreateMetricSetRequest::getMetricSource() const {
    return m_metric_source;
}
void OAICreateMetricSetRequest::setMetricSource(const OAICreateMetricSetRequest_MetricSource &metric_source) {
    m_metric_source = metric_source;
    m_metric_source_isSet = true;
}

bool OAICreateMetricSetRequest::is_metric_source_Set() const{
    return m_metric_source_isSet;
}

bool OAICreateMetricSetRequest::is_metric_source_Valid() const{
    return m_metric_source_isValid;
}

QString OAICreateMetricSetRequest::getTimezone() const {
    return m_timezone;
}
void OAICreateMetricSetRequest::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAICreateMetricSetRequest::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAICreateMetricSetRequest::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QMap OAICreateMetricSetRequest::getTags() const {
    return m_tags;
}
void OAICreateMetricSetRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMetricSetRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMetricSetRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAICreateMetricSetRequest::getDimensionFilterList() const {
    return m_dimension_filter_list;
}
void OAICreateMetricSetRequest::setDimensionFilterList(const QList &dimension_filter_list) {
    m_dimension_filter_list = dimension_filter_list;
    m_dimension_filter_list_isSet = true;
}

bool OAICreateMetricSetRequest::is_dimension_filter_list_Set() const{
    return m_dimension_filter_list_isSet;
}

bool OAICreateMetricSetRequest::is_dimension_filter_list_Valid() const{
    return m_dimension_filter_list_isValid;
}

bool OAICreateMetricSetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_detector_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_set_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_set_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_filter_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMetricSetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomaly_detector_arn_isValid && m_metric_set_name_isValid && m_metric_list_isValid && m_metric_source_isValid && true;
}

} // namespace OpenAPI
