/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3SourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3SourceConfig::OAIS3SourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3SourceConfig::OAIS3SourceConfig() {
    this->initializeModel();
}

OAIS3SourceConfig::~OAIS3SourceConfig() {}

void OAIS3SourceConfig::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_templated_path_list_isSet = false;
    m_templated_path_list_isValid = false;

    m_historical_data_path_list_isSet = false;
    m_historical_data_path_list_isValid = false;

    m_file_format_descriptor_isSet = false;
    m_file_format_descriptor_isValid = false;
}

void OAIS3SourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3SourceConfig::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_templated_path_list_isValid = ::OpenAPI::fromJsonValue(m_templated_path_list, json[QString("TemplatedPathList")]);
    m_templated_path_list_isSet = !json[QString("TemplatedPathList")].isNull() && m_templated_path_list_isValid;

    m_historical_data_path_list_isValid = ::OpenAPI::fromJsonValue(m_historical_data_path_list, json[QString("HistoricalDataPathList")]);
    m_historical_data_path_list_isSet = !json[QString("HistoricalDataPathList")].isNull() && m_historical_data_path_list_isValid;

    m_file_format_descriptor_isValid = ::OpenAPI::fromJsonValue(m_file_format_descriptor, json[QString("FileFormatDescriptor")]);
    m_file_format_descriptor_isSet = !json[QString("FileFormatDescriptor")].isNull() && m_file_format_descriptor_isValid;
}

QString OAIS3SourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3SourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_templated_path_list.isSet()) {
        obj.insert(QString("TemplatedPathList"), ::OpenAPI::toJsonValue(m_templated_path_list));
    }
    if (m_historical_data_path_list.isSet()) {
        obj.insert(QString("HistoricalDataPathList"), ::OpenAPI::toJsonValue(m_historical_data_path_list));
    }
    if (m_file_format_descriptor.isSet()) {
        obj.insert(QString("FileFormatDescriptor"), ::OpenAPI::toJsonValue(m_file_format_descriptor));
    }
    return obj;
}

QString OAIS3SourceConfig::getRoleArn() const {
    return m_role_arn;
}
void OAIS3SourceConfig::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIS3SourceConfig::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIS3SourceConfig::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIS3SourceConfig::getTemplatedPathList() const {
    return m_templated_path_list;
}
void OAIS3SourceConfig::setTemplatedPathList(const QList &templated_path_list) {
    m_templated_path_list = templated_path_list;
    m_templated_path_list_isSet = true;
}

bool OAIS3SourceConfig::is_templated_path_list_Set() const{
    return m_templated_path_list_isSet;
}

bool OAIS3SourceConfig::is_templated_path_list_Valid() const{
    return m_templated_path_list_isValid;
}

QList OAIS3SourceConfig::getHistoricalDataPathList() const {
    return m_historical_data_path_list;
}
void OAIS3SourceConfig::setHistoricalDataPathList(const QList &historical_data_path_list) {
    m_historical_data_path_list = historical_data_path_list;
    m_historical_data_path_list_isSet = true;
}

bool OAIS3SourceConfig::is_historical_data_path_list_Set() const{
    return m_historical_data_path_list_isSet;
}

bool OAIS3SourceConfig::is_historical_data_path_list_Valid() const{
    return m_historical_data_path_list_isValid;
}

OAIS3SourceConfig_FileFormatDescriptor OAIS3SourceConfig::getFileFormatDescriptor() const {
    return m_file_format_descriptor;
}
void OAIS3SourceConfig::setFileFormatDescriptor(const OAIS3SourceConfig_FileFormatDescriptor &file_format_descriptor) {
    m_file_format_descriptor = file_format_descriptor;
    m_file_format_descriptor_isSet = true;
}

bool OAIS3SourceConfig::is_file_format_descriptor_Set() const{
    return m_file_format_descriptor_isSet;
}

bool OAIS3SourceConfig::is_file_format_descriptor_Valid() const{
    return m_file_format_descriptor_isValid;
}

bool OAIS3SourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_templated_path_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_historical_data_path_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_format_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3SourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
