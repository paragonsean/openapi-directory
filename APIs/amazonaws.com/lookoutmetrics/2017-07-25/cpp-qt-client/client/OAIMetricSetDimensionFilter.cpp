/**
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricSetDimensionFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricSetDimensionFilter::OAIMetricSetDimensionFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricSetDimensionFilter::OAIMetricSetDimensionFilter() {
    this->initializeModel();
}

OAIMetricSetDimensionFilter::~OAIMetricSetDimensionFilter() {}

void OAIMetricSetDimensionFilter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_filter_list_isSet = false;
    m_filter_list_isValid = false;
}

void OAIMetricSetDimensionFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricSetDimensionFilter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_filter_list_isValid = ::OpenAPI::fromJsonValue(m_filter_list, json[QString("FilterList")]);
    m_filter_list_isSet = !json[QString("FilterList")].isNull() && m_filter_list_isValid;
}

QString OAIMetricSetDimensionFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricSetDimensionFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_filter_list.isSet()) {
        obj.insert(QString("FilterList"), ::OpenAPI::toJsonValue(m_filter_list));
    }
    return obj;
}

QString OAIMetricSetDimensionFilter::getName() const {
    return m_name;
}
void OAIMetricSetDimensionFilter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetricSetDimensionFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetricSetDimensionFilter::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIMetricSetDimensionFilter::getFilterList() const {
    return m_filter_list;
}
void OAIMetricSetDimensionFilter::setFilterList(const QList &filter_list) {
    m_filter_list = filter_list;
    m_filter_list_isSet = true;
}

bool OAIMetricSetDimensionFilter::is_filter_list_Set() const{
    return m_filter_list_isSet;
}

bool OAIMetricSetDimensionFilter::is_filter_list_Valid() const{
    return m_filter_list_isValid;
}

bool OAIMetricSetDimensionFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricSetDimensionFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
