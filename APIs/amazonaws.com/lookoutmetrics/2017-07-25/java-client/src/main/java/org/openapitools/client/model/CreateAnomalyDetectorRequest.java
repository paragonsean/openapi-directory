/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateAnomalyDetectorRequestAnomalyDetectorConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnomalyDetectorRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnomalyDetectorRequest {
  public static final String SERIALIZED_NAME_ANOMALY_DETECTOR_NAME = "AnomalyDetectorName";
  @SerializedName(SERIALIZED_NAME_ANOMALY_DETECTOR_NAME)
  private String anomalyDetectorName;

  public static final String SERIALIZED_NAME_ANOMALY_DETECTOR_DESCRIPTION = "AnomalyDetectorDescription";
  @SerializedName(SERIALIZED_NAME_ANOMALY_DETECTOR_DESCRIPTION)
  private String anomalyDetectorDescription;

  public static final String SERIALIZED_NAME_ANOMALY_DETECTOR_CONFIG = "AnomalyDetectorConfig";
  @SerializedName(SERIALIZED_NAME_ANOMALY_DETECTOR_CONFIG)
  private CreateAnomalyDetectorRequestAnomalyDetectorConfig anomalyDetectorConfig;

  public static final String SERIALIZED_NAME_KMS_KEY_ARN = "KmsKeyArn";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ARN)
  private String kmsKeyArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateAnomalyDetectorRequest() {
  }

  public CreateAnomalyDetectorRequest anomalyDetectorName(String anomalyDetectorName) {
    this.anomalyDetectorName = anomalyDetectorName;
    return this;
  }

  /**
   * The name of the detector.
   * @return anomalyDetectorName
   */
  @javax.annotation.Nonnull
  public String getAnomalyDetectorName() {
    return anomalyDetectorName;
  }

  public void setAnomalyDetectorName(String anomalyDetectorName) {
    this.anomalyDetectorName = anomalyDetectorName;
  }


  public CreateAnomalyDetectorRequest anomalyDetectorDescription(String anomalyDetectorDescription) {
    this.anomalyDetectorDescription = anomalyDetectorDescription;
    return this;
  }

  /**
   * A description of the detector.
   * @return anomalyDetectorDescription
   */
  @javax.annotation.Nullable
  public String getAnomalyDetectorDescription() {
    return anomalyDetectorDescription;
  }

  public void setAnomalyDetectorDescription(String anomalyDetectorDescription) {
    this.anomalyDetectorDescription = anomalyDetectorDescription;
  }


  public CreateAnomalyDetectorRequest anomalyDetectorConfig(CreateAnomalyDetectorRequestAnomalyDetectorConfig anomalyDetectorConfig) {
    this.anomalyDetectorConfig = anomalyDetectorConfig;
    return this;
  }

  /**
   * Get anomalyDetectorConfig
   * @return anomalyDetectorConfig
   */
  @javax.annotation.Nonnull
  public CreateAnomalyDetectorRequestAnomalyDetectorConfig getAnomalyDetectorConfig() {
    return anomalyDetectorConfig;
  }

  public void setAnomalyDetectorConfig(CreateAnomalyDetectorRequestAnomalyDetectorConfig anomalyDetectorConfig) {
    this.anomalyDetectorConfig = anomalyDetectorConfig;
  }


  public CreateAnomalyDetectorRequest kmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
    return this;
  }

  /**
   * The ARN of the KMS key to use to encrypt your data.
   * @return kmsKeyArn
   */
  @javax.annotation.Nullable
  public String getKmsKeyArn() {
    return kmsKeyArn;
  }

  public void setKmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
  }


  public CreateAnomalyDetectorRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateAnomalyDetectorRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\&quot;&gt;tags&lt;/a&gt; to apply to the anomaly detector.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnomalyDetectorRequest createAnomalyDetectorRequest = (CreateAnomalyDetectorRequest) o;
    return Objects.equals(this.anomalyDetectorName, createAnomalyDetectorRequest.anomalyDetectorName) &&
        Objects.equals(this.anomalyDetectorDescription, createAnomalyDetectorRequest.anomalyDetectorDescription) &&
        Objects.equals(this.anomalyDetectorConfig, createAnomalyDetectorRequest.anomalyDetectorConfig) &&
        Objects.equals(this.kmsKeyArn, createAnomalyDetectorRequest.kmsKeyArn) &&
        Objects.equals(this.tags, createAnomalyDetectorRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anomalyDetectorName, anomalyDetectorDescription, anomalyDetectorConfig, kmsKeyArn, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnomalyDetectorRequest {\n");
    sb.append("    anomalyDetectorName: ").append(toIndentedString(anomalyDetectorName)).append("\n");
    sb.append("    anomalyDetectorDescription: ").append(toIndentedString(anomalyDetectorDescription)).append("\n");
    sb.append("    anomalyDetectorConfig: ").append(toIndentedString(anomalyDetectorConfig)).append("\n");
    sb.append("    kmsKeyArn: ").append(toIndentedString(kmsKeyArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnomalyDetectorName");
    openapiFields.add("AnomalyDetectorDescription");
    openapiFields.add("AnomalyDetectorConfig");
    openapiFields.add("KmsKeyArn");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AnomalyDetectorName");
    openapiRequiredFields.add("AnomalyDetectorConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnomalyDetectorRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnomalyDetectorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnomalyDetectorRequest is not found in the empty JSON string", CreateAnomalyDetectorRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnomalyDetectorRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnomalyDetectorRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnomalyDetectorRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AnomalyDetectorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnomalyDetectorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnomalyDetectorName").toString()));
      }
      if ((jsonObj.get("AnomalyDetectorDescription") != null && !jsonObj.get("AnomalyDetectorDescription").isJsonNull()) && !jsonObj.get("AnomalyDetectorDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnomalyDetectorDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnomalyDetectorDescription").toString()));
      }
      // validate the required field `AnomalyDetectorConfig`
      CreateAnomalyDetectorRequestAnomalyDetectorConfig.validateJsonElement(jsonObj.get("AnomalyDetectorConfig"));
      if ((jsonObj.get("KmsKeyArn") != null && !jsonObj.get("KmsKeyArn").isJsonNull()) && !jsonObj.get("KmsKeyArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KmsKeyArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KmsKeyArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnomalyDetectorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnomalyDetectorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnomalyDetectorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnomalyDetectorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnomalyDetectorRequest>() {
           @Override
           public void write(JsonWriter out, CreateAnomalyDetectorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnomalyDetectorRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnomalyDetectorRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnomalyDetectorRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAnomalyDetectorRequest
   */
  public static CreateAnomalyDetectorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnomalyDetectorRequest.class);
  }

  /**
   * Convert an instance of CreateAnomalyDetectorRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

