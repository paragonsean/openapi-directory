/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeMetricSetResponseMetricSource;
import org.openapitools.client.model.DescribeMetricSetResponseTimestampColumn;
import org.openapitools.client.model.Frequency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeMetricSetResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeMetricSetResponse {
  public static final String SERIALIZED_NAME_METRIC_SET_ARN = "MetricSetArn";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_ARN)
  private String metricSetArn;

  public static final String SERIALIZED_NAME_ANOMALY_DETECTOR_ARN = "AnomalyDetectorArn";
  @SerializedName(SERIALIZED_NAME_ANOMALY_DETECTOR_ARN)
  private String anomalyDetectorArn;

  public static final String SERIALIZED_NAME_METRIC_SET_NAME = "MetricSetName";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_NAME)
  private String metricSetName;

  public static final String SERIALIZED_NAME_METRIC_SET_DESCRIPTION = "MetricSetDescription";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_DESCRIPTION)
  private String metricSetDescription;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_TIME = "LastModificationTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_TIME)
  private OffsetDateTime lastModificationTime;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_METRIC_LIST = "MetricList";
  @SerializedName(SERIALIZED_NAME_METRIC_LIST)
  private List metricList;

  public static final String SERIALIZED_NAME_TIMESTAMP_COLUMN = "TimestampColumn";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_COLUMN)
  private DescribeMetricSetResponseTimestampColumn timestampColumn;

  public static final String SERIALIZED_NAME_DIMENSION_LIST = "DimensionList";
  @SerializedName(SERIALIZED_NAME_DIMENSION_LIST)
  private List dimensionList;

  public static final String SERIALIZED_NAME_METRIC_SET_FREQUENCY = "MetricSetFrequency";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_FREQUENCY)
  private Frequency metricSetFrequency;

  public static final String SERIALIZED_NAME_TIMEZONE = "Timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_METRIC_SOURCE = "MetricSource";
  @SerializedName(SERIALIZED_NAME_METRIC_SOURCE)
  private DescribeMetricSetResponseMetricSource metricSource;

  public static final String SERIALIZED_NAME_DIMENSION_FILTER_LIST = "DimensionFilterList";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTER_LIST)
  private List dimensionFilterList;

  public DescribeMetricSetResponse() {
  }

  public DescribeMetricSetResponse metricSetArn(String metricSetArn) {
    this.metricSetArn = metricSetArn;
    return this;
  }

  /**
   * Get metricSetArn
   * @return metricSetArn
   */
  @javax.annotation.Nullable
  public String getMetricSetArn() {
    return metricSetArn;
  }

  public void setMetricSetArn(String metricSetArn) {
    this.metricSetArn = metricSetArn;
  }


  public DescribeMetricSetResponse anomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
    return this;
  }

  /**
   * Get anomalyDetectorArn
   * @return anomalyDetectorArn
   */
  @javax.annotation.Nullable
  public String getAnomalyDetectorArn() {
    return anomalyDetectorArn;
  }

  public void setAnomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
  }


  public DescribeMetricSetResponse metricSetName(String metricSetName) {
    this.metricSetName = metricSetName;
    return this;
  }

  /**
   * Get metricSetName
   * @return metricSetName
   */
  @javax.annotation.Nullable
  public String getMetricSetName() {
    return metricSetName;
  }

  public void setMetricSetName(String metricSetName) {
    this.metricSetName = metricSetName;
  }


  public DescribeMetricSetResponse metricSetDescription(String metricSetDescription) {
    this.metricSetDescription = metricSetDescription;
    return this;
  }

  /**
   * Get metricSetDescription
   * @return metricSetDescription
   */
  @javax.annotation.Nullable
  public String getMetricSetDescription() {
    return metricSetDescription;
  }

  public void setMetricSetDescription(String metricSetDescription) {
    this.metricSetDescription = metricSetDescription;
  }


  public DescribeMetricSetResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeMetricSetResponse lastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
    return this;
  }

  /**
   * Get lastModificationTime
   * @return lastModificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationTime() {
    return lastModificationTime;
  }

  public void setLastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
  }


  public DescribeMetricSetResponse offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public DescribeMetricSetResponse metricList(List metricList) {
    this.metricList = metricList;
    return this;
  }

  /**
   * Get metricList
   * @return metricList
   */
  @javax.annotation.Nullable
  public List getMetricList() {
    return metricList;
  }

  public void setMetricList(List metricList) {
    this.metricList = metricList;
  }


  public DescribeMetricSetResponse timestampColumn(DescribeMetricSetResponseTimestampColumn timestampColumn) {
    this.timestampColumn = timestampColumn;
    return this;
  }

  /**
   * Get timestampColumn
   * @return timestampColumn
   */
  @javax.annotation.Nullable
  public DescribeMetricSetResponseTimestampColumn getTimestampColumn() {
    return timestampColumn;
  }

  public void setTimestampColumn(DescribeMetricSetResponseTimestampColumn timestampColumn) {
    this.timestampColumn = timestampColumn;
  }


  public DescribeMetricSetResponse dimensionList(List dimensionList) {
    this.dimensionList = dimensionList;
    return this;
  }

  /**
   * Get dimensionList
   * @return dimensionList
   */
  @javax.annotation.Nullable
  public List getDimensionList() {
    return dimensionList;
  }

  public void setDimensionList(List dimensionList) {
    this.dimensionList = dimensionList;
  }


  public DescribeMetricSetResponse metricSetFrequency(Frequency metricSetFrequency) {
    this.metricSetFrequency = metricSetFrequency;
    return this;
  }

  /**
   * Get metricSetFrequency
   * @return metricSetFrequency
   */
  @javax.annotation.Nullable
  public Frequency getMetricSetFrequency() {
    return metricSetFrequency;
  }

  public void setMetricSetFrequency(Frequency metricSetFrequency) {
    this.metricSetFrequency = metricSetFrequency;
  }


  public DescribeMetricSetResponse timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public DescribeMetricSetResponse metricSource(DescribeMetricSetResponseMetricSource metricSource) {
    this.metricSource = metricSource;
    return this;
  }

  /**
   * Get metricSource
   * @return metricSource
   */
  @javax.annotation.Nullable
  public DescribeMetricSetResponseMetricSource getMetricSource() {
    return metricSource;
  }

  public void setMetricSource(DescribeMetricSetResponseMetricSource metricSource) {
    this.metricSource = metricSource;
  }


  public DescribeMetricSetResponse dimensionFilterList(List dimensionFilterList) {
    this.dimensionFilterList = dimensionFilterList;
    return this;
  }

  /**
   * Get dimensionFilterList
   * @return dimensionFilterList
   */
  @javax.annotation.Nullable
  public List getDimensionFilterList() {
    return dimensionFilterList;
  }

  public void setDimensionFilterList(List dimensionFilterList) {
    this.dimensionFilterList = dimensionFilterList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeMetricSetResponse describeMetricSetResponse = (DescribeMetricSetResponse) o;
    return Objects.equals(this.metricSetArn, describeMetricSetResponse.metricSetArn) &&
        Objects.equals(this.anomalyDetectorArn, describeMetricSetResponse.anomalyDetectorArn) &&
        Objects.equals(this.metricSetName, describeMetricSetResponse.metricSetName) &&
        Objects.equals(this.metricSetDescription, describeMetricSetResponse.metricSetDescription) &&
        Objects.equals(this.creationTime, describeMetricSetResponse.creationTime) &&
        Objects.equals(this.lastModificationTime, describeMetricSetResponse.lastModificationTime) &&
        Objects.equals(this.offset, describeMetricSetResponse.offset) &&
        Objects.equals(this.metricList, describeMetricSetResponse.metricList) &&
        Objects.equals(this.timestampColumn, describeMetricSetResponse.timestampColumn) &&
        Objects.equals(this.dimensionList, describeMetricSetResponse.dimensionList) &&
        Objects.equals(this.metricSetFrequency, describeMetricSetResponse.metricSetFrequency) &&
        Objects.equals(this.timezone, describeMetricSetResponse.timezone) &&
        Objects.equals(this.metricSource, describeMetricSetResponse.metricSource) &&
        Objects.equals(this.dimensionFilterList, describeMetricSetResponse.dimensionFilterList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricSetArn, anomalyDetectorArn, metricSetName, metricSetDescription, creationTime, lastModificationTime, offset, metricList, timestampColumn, dimensionList, metricSetFrequency, timezone, metricSource, dimensionFilterList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeMetricSetResponse {\n");
    sb.append("    metricSetArn: ").append(toIndentedString(metricSetArn)).append("\n");
    sb.append("    anomalyDetectorArn: ").append(toIndentedString(anomalyDetectorArn)).append("\n");
    sb.append("    metricSetName: ").append(toIndentedString(metricSetName)).append("\n");
    sb.append("    metricSetDescription: ").append(toIndentedString(metricSetDescription)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModificationTime: ").append(toIndentedString(lastModificationTime)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    metricList: ").append(toIndentedString(metricList)).append("\n");
    sb.append("    timestampColumn: ").append(toIndentedString(timestampColumn)).append("\n");
    sb.append("    dimensionList: ").append(toIndentedString(dimensionList)).append("\n");
    sb.append("    metricSetFrequency: ").append(toIndentedString(metricSetFrequency)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    metricSource: ").append(toIndentedString(metricSource)).append("\n");
    sb.append("    dimensionFilterList: ").append(toIndentedString(dimensionFilterList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricSetArn");
    openapiFields.add("AnomalyDetectorArn");
    openapiFields.add("MetricSetName");
    openapiFields.add("MetricSetDescription");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModificationTime");
    openapiFields.add("Offset");
    openapiFields.add("MetricList");
    openapiFields.add("TimestampColumn");
    openapiFields.add("DimensionList");
    openapiFields.add("MetricSetFrequency");
    openapiFields.add("Timezone");
    openapiFields.add("MetricSource");
    openapiFields.add("DimensionFilterList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeMetricSetResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeMetricSetResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeMetricSetResponse is not found in the empty JSON string", DescribeMetricSetResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeMetricSetResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeMetricSetResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MetricSetArn`
      if (jsonObj.get("MetricSetArn") != null && !jsonObj.get("MetricSetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricSetArn"));
      }
      // validate the optional field `AnomalyDetectorArn`
      if (jsonObj.get("AnomalyDetectorArn") != null && !jsonObj.get("AnomalyDetectorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AnomalyDetectorArn"));
      }
      // validate the optional field `MetricSetName`
      if (jsonObj.get("MetricSetName") != null && !jsonObj.get("MetricSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricSetName"));
      }
      // validate the optional field `MetricSetDescription`
      if (jsonObj.get("MetricSetDescription") != null && !jsonObj.get("MetricSetDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricSetDescription"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastModificationTime`
      if (jsonObj.get("LastModificationTime") != null && !jsonObj.get("LastModificationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModificationTime"));
      }
      // validate the optional field `Offset`
      if (jsonObj.get("Offset") != null && !jsonObj.get("Offset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Offset"));
      }
      // validate the optional field `MetricList`
      if (jsonObj.get("MetricList") != null && !jsonObj.get("MetricList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MetricList"));
      }
      // validate the optional field `TimestampColumn`
      if (jsonObj.get("TimestampColumn") != null && !jsonObj.get("TimestampColumn").isJsonNull()) {
        DescribeMetricSetResponseTimestampColumn.validateJsonElement(jsonObj.get("TimestampColumn"));
      }
      // validate the optional field `DimensionList`
      if (jsonObj.get("DimensionList") != null && !jsonObj.get("DimensionList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DimensionList"));
      }
      // validate the optional field `MetricSetFrequency`
      if (jsonObj.get("MetricSetFrequency") != null && !jsonObj.get("MetricSetFrequency").isJsonNull()) {
        Frequency.validateJsonElement(jsonObj.get("MetricSetFrequency"));
      }
      // validate the optional field `Timezone`
      if (jsonObj.get("Timezone") != null && !jsonObj.get("Timezone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Timezone"));
      }
      // validate the optional field `MetricSource`
      if (jsonObj.get("MetricSource") != null && !jsonObj.get("MetricSource").isJsonNull()) {
        DescribeMetricSetResponseMetricSource.validateJsonElement(jsonObj.get("MetricSource"));
      }
      // validate the optional field `DimensionFilterList`
      if (jsonObj.get("DimensionFilterList") != null && !jsonObj.get("DimensionFilterList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DimensionFilterList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeMetricSetResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeMetricSetResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeMetricSetResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeMetricSetResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeMetricSetResponse>() {
           @Override
           public void write(JsonWriter out, DescribeMetricSetResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeMetricSetResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeMetricSetResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeMetricSetResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeMetricSetResponse
   */
  public static DescribeMetricSetResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeMetricSetResponse.class);
  }

  /**
   * Convert an instance of DescribeMetricSetResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

