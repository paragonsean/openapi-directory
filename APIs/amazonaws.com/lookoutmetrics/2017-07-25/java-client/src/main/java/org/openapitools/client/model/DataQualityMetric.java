/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataQualityMetricType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An array that describes a data quality metric. Each &lt;code&gt;DataQualityMetric&lt;/code&gt; object contains the data quality metric name, its value, a description of the metric, and the affected column.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataQualityMetric {
  public static final String SERIALIZED_NAME_METRIC_TYPE = "MetricType";
  @SerializedName(SERIALIZED_NAME_METRIC_TYPE)
  private DataQualityMetricType metricType;

  public static final String SERIALIZED_NAME_METRIC_DESCRIPTION = "MetricDescription";
  @SerializedName(SERIALIZED_NAME_METRIC_DESCRIPTION)
  private String metricDescription;

  public static final String SERIALIZED_NAME_RELATED_COLUMN_NAME = "RelatedColumnName";
  @SerializedName(SERIALIZED_NAME_RELATED_COLUMN_NAME)
  private String relatedColumnName;

  public static final String SERIALIZED_NAME_METRIC_VALUE = "MetricValue";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUE)
  private Double metricValue;

  public DataQualityMetric() {
  }

  public DataQualityMetric metricType(DataQualityMetricType metricType) {
    this.metricType = metricType;
    return this;
  }

  /**
   * Get metricType
   * @return metricType
   */
  @javax.annotation.Nullable
  public DataQualityMetricType getMetricType() {
    return metricType;
  }

  public void setMetricType(DataQualityMetricType metricType) {
    this.metricType = metricType;
  }


  public DataQualityMetric metricDescription(String metricDescription) {
    this.metricDescription = metricDescription;
    return this;
  }

  /**
   * Get metricDescription
   * @return metricDescription
   */
  @javax.annotation.Nullable
  public String getMetricDescription() {
    return metricDescription;
  }

  public void setMetricDescription(String metricDescription) {
    this.metricDescription = metricDescription;
  }


  public DataQualityMetric relatedColumnName(String relatedColumnName) {
    this.relatedColumnName = relatedColumnName;
    return this;
  }

  /**
   * Get relatedColumnName
   * @return relatedColumnName
   */
  @javax.annotation.Nullable
  public String getRelatedColumnName() {
    return relatedColumnName;
  }

  public void setRelatedColumnName(String relatedColumnName) {
    this.relatedColumnName = relatedColumnName;
  }


  public DataQualityMetric metricValue(Double metricValue) {
    this.metricValue = metricValue;
    return this;
  }

  /**
   * Get metricValue
   * @return metricValue
   */
  @javax.annotation.Nullable
  public Double getMetricValue() {
    return metricValue;
  }

  public void setMetricValue(Double metricValue) {
    this.metricValue = metricValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataQualityMetric dataQualityMetric = (DataQualityMetric) o;
    return Objects.equals(this.metricType, dataQualityMetric.metricType) &&
        Objects.equals(this.metricDescription, dataQualityMetric.metricDescription) &&
        Objects.equals(this.relatedColumnName, dataQualityMetric.relatedColumnName) &&
        Objects.equals(this.metricValue, dataQualityMetric.metricValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricType, metricDescription, relatedColumnName, metricValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataQualityMetric {\n");
    sb.append("    metricType: ").append(toIndentedString(metricType)).append("\n");
    sb.append("    metricDescription: ").append(toIndentedString(metricDescription)).append("\n");
    sb.append("    relatedColumnName: ").append(toIndentedString(relatedColumnName)).append("\n");
    sb.append("    metricValue: ").append(toIndentedString(metricValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricType");
    openapiFields.add("MetricDescription");
    openapiFields.add("RelatedColumnName");
    openapiFields.add("MetricValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataQualityMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataQualityMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataQualityMetric is not found in the empty JSON string", DataQualityMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataQualityMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataQualityMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MetricType`
      if (jsonObj.get("MetricType") != null && !jsonObj.get("MetricType").isJsonNull()) {
        DataQualityMetricType.validateJsonElement(jsonObj.get("MetricType"));
      }
      // validate the optional field `MetricDescription`
      if (jsonObj.get("MetricDescription") != null && !jsonObj.get("MetricDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricDescription"));
      }
      // validate the optional field `RelatedColumnName`
      if (jsonObj.get("RelatedColumnName") != null && !jsonObj.get("RelatedColumnName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RelatedColumnName"));
      }
      // validate the optional field `MetricValue`
      if (jsonObj.get("MetricValue") != null && !jsonObj.get("MetricValue").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MetricValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataQualityMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataQualityMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataQualityMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataQualityMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<DataQualityMetric>() {
           @Override
           public void write(JsonWriter out, DataQualityMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataQualityMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataQualityMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataQualityMetric
   * @throws IOException if the JSON string is invalid with respect to DataQualityMetric
   */
  public static DataQualityMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataQualityMetric.class);
  }

  /**
   * Convert an instance of DataQualityMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

