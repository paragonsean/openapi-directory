/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateMetricSetRequestMetricSource;
import org.openapitools.client.model.CreateMetricSetRequestTimestampColumn;
import org.openapitools.client.model.Metric;
import org.openapitools.client.model.MetricSetDimensionFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMetricSetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMetricSetRequest {
  public static final String SERIALIZED_NAME_ANOMALY_DETECTOR_ARN = "AnomalyDetectorArn";
  @SerializedName(SERIALIZED_NAME_ANOMALY_DETECTOR_ARN)
  private String anomalyDetectorArn;

  public static final String SERIALIZED_NAME_METRIC_SET_NAME = "MetricSetName";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_NAME)
  private String metricSetName;

  public static final String SERIALIZED_NAME_METRIC_SET_DESCRIPTION = "MetricSetDescription";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_DESCRIPTION)
  private String metricSetDescription;

  public static final String SERIALIZED_NAME_METRIC_LIST = "MetricList";
  @SerializedName(SERIALIZED_NAME_METRIC_LIST)
  private List<Metric> metricList = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_TIMESTAMP_COLUMN = "TimestampColumn";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_COLUMN)
  private CreateMetricSetRequestTimestampColumn timestampColumn;

  public static final String SERIALIZED_NAME_DIMENSION_LIST = "DimensionList";
  @SerializedName(SERIALIZED_NAME_DIMENSION_LIST)
  private List<String> dimensionList = new ArrayList<>();

  /**
   * The frequency with which the source data will be analyzed for anomalies.
   */
  @JsonAdapter(MetricSetFrequencyEnum.Adapter.class)
  public enum MetricSetFrequencyEnum {
    P1_D("P1D"),
    
    PT1_H("PT1H"),
    
    PT10_M("PT10M"),
    
    PT5_M("PT5M");

    private String value;

    MetricSetFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricSetFrequencyEnum fromValue(String value) {
      for (MetricSetFrequencyEnum b : MetricSetFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricSetFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricSetFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricSetFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricSetFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricSetFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC_SET_FREQUENCY = "MetricSetFrequency";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_FREQUENCY)
  private MetricSetFrequencyEnum metricSetFrequency;

  public static final String SERIALIZED_NAME_METRIC_SOURCE = "MetricSource";
  @SerializedName(SERIALIZED_NAME_METRIC_SOURCE)
  private CreateMetricSetRequestMetricSource metricSource;

  public static final String SERIALIZED_NAME_TIMEZONE = "Timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_DIMENSION_FILTER_LIST = "DimensionFilterList";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTER_LIST)
  private List<MetricSetDimensionFilter> dimensionFilterList = new ArrayList<>();

  public CreateMetricSetRequest() {
  }

  public CreateMetricSetRequest anomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
    return this;
  }

  /**
   * The ARN of the anomaly detector that will use the dataset.
   * @return anomalyDetectorArn
   */
  @javax.annotation.Nonnull
  public String getAnomalyDetectorArn() {
    return anomalyDetectorArn;
  }

  public void setAnomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
  }


  public CreateMetricSetRequest metricSetName(String metricSetName) {
    this.metricSetName = metricSetName;
    return this;
  }

  /**
   * The name of the dataset.
   * @return metricSetName
   */
  @javax.annotation.Nonnull
  public String getMetricSetName() {
    return metricSetName;
  }

  public void setMetricSetName(String metricSetName) {
    this.metricSetName = metricSetName;
  }


  public CreateMetricSetRequest metricSetDescription(String metricSetDescription) {
    this.metricSetDescription = metricSetDescription;
    return this;
  }

  /**
   * A description of the dataset you are creating.
   * @return metricSetDescription
   */
  @javax.annotation.Nullable
  public String getMetricSetDescription() {
    return metricSetDescription;
  }

  public void setMetricSetDescription(String metricSetDescription) {
    this.metricSetDescription = metricSetDescription;
  }


  public CreateMetricSetRequest metricList(List<Metric> metricList) {
    this.metricList = metricList;
    return this;
  }

  public CreateMetricSetRequest addMetricListItem(Metric metricListItem) {
    if (this.metricList == null) {
      this.metricList = new ArrayList<>();
    }
    this.metricList.add(metricListItem);
    return this;
  }

  /**
   * A list of metrics that the dataset will contain.
   * @return metricList
   */
  @javax.annotation.Nonnull
  public List<Metric> getMetricList() {
    return metricList;
  }

  public void setMetricList(List<Metric> metricList) {
    this.metricList = metricList;
  }


  public CreateMetricSetRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.
   * minimum: 0
   * maximum: 432000
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public CreateMetricSetRequest timestampColumn(CreateMetricSetRequestTimestampColumn timestampColumn) {
    this.timestampColumn = timestampColumn;
    return this;
  }

  /**
   * Get timestampColumn
   * @return timestampColumn
   */
  @javax.annotation.Nullable
  public CreateMetricSetRequestTimestampColumn getTimestampColumn() {
    return timestampColumn;
  }

  public void setTimestampColumn(CreateMetricSetRequestTimestampColumn timestampColumn) {
    this.timestampColumn = timestampColumn;
  }


  public CreateMetricSetRequest dimensionList(List<String> dimensionList) {
    this.dimensionList = dimensionList;
    return this;
  }

  public CreateMetricSetRequest addDimensionListItem(String dimensionListItem) {
    if (this.dimensionList == null) {
      this.dimensionList = new ArrayList<>();
    }
    this.dimensionList.add(dimensionListItem);
    return this;
  }

  /**
   * A list of the fields you want to treat as dimensions.
   * @return dimensionList
   */
  @javax.annotation.Nullable
  public List<String> getDimensionList() {
    return dimensionList;
  }

  public void setDimensionList(List<String> dimensionList) {
    this.dimensionList = dimensionList;
  }


  public CreateMetricSetRequest metricSetFrequency(MetricSetFrequencyEnum metricSetFrequency) {
    this.metricSetFrequency = metricSetFrequency;
    return this;
  }

  /**
   * The frequency with which the source data will be analyzed for anomalies.
   * @return metricSetFrequency
   */
  @javax.annotation.Nullable
  public MetricSetFrequencyEnum getMetricSetFrequency() {
    return metricSetFrequency;
  }

  public void setMetricSetFrequency(MetricSetFrequencyEnum metricSetFrequency) {
    this.metricSetFrequency = metricSetFrequency;
  }


  public CreateMetricSetRequest metricSource(CreateMetricSetRequestMetricSource metricSource) {
    this.metricSource = metricSource;
    return this;
  }

  /**
   * Get metricSource
   * @return metricSource
   */
  @javax.annotation.Nonnull
  public CreateMetricSetRequestMetricSource getMetricSource() {
    return metricSource;
  }

  public void setMetricSource(CreateMetricSetRequestMetricSource metricSource) {
    this.metricSource = metricSource;
  }


  public CreateMetricSetRequest timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The time zone in which your source data was recorded.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public CreateMetricSetRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateMetricSetRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\&quot;&gt;tags&lt;/a&gt; to apply to the dataset.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateMetricSetRequest dimensionFilterList(List<MetricSetDimensionFilter> dimensionFilterList) {
    this.dimensionFilterList = dimensionFilterList;
    return this;
  }

  public CreateMetricSetRequest addDimensionFilterListItem(MetricSetDimensionFilter dimensionFilterListItem) {
    if (this.dimensionFilterList == null) {
      this.dimensionFilterList = new ArrayList<>();
    }
    this.dimensionFilterList.add(dimensionFilterListItem);
    return this;
  }

  /**
   * A list of filters that specify which data is kept for anomaly detection.
   * @return dimensionFilterList
   */
  @javax.annotation.Nullable
  public List<MetricSetDimensionFilter> getDimensionFilterList() {
    return dimensionFilterList;
  }

  public void setDimensionFilterList(List<MetricSetDimensionFilter> dimensionFilterList) {
    this.dimensionFilterList = dimensionFilterList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMetricSetRequest createMetricSetRequest = (CreateMetricSetRequest) o;
    return Objects.equals(this.anomalyDetectorArn, createMetricSetRequest.anomalyDetectorArn) &&
        Objects.equals(this.metricSetName, createMetricSetRequest.metricSetName) &&
        Objects.equals(this.metricSetDescription, createMetricSetRequest.metricSetDescription) &&
        Objects.equals(this.metricList, createMetricSetRequest.metricList) &&
        Objects.equals(this.offset, createMetricSetRequest.offset) &&
        Objects.equals(this.timestampColumn, createMetricSetRequest.timestampColumn) &&
        Objects.equals(this.dimensionList, createMetricSetRequest.dimensionList) &&
        Objects.equals(this.metricSetFrequency, createMetricSetRequest.metricSetFrequency) &&
        Objects.equals(this.metricSource, createMetricSetRequest.metricSource) &&
        Objects.equals(this.timezone, createMetricSetRequest.timezone) &&
        Objects.equals(this.tags, createMetricSetRequest.tags) &&
        Objects.equals(this.dimensionFilterList, createMetricSetRequest.dimensionFilterList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anomalyDetectorArn, metricSetName, metricSetDescription, metricList, offset, timestampColumn, dimensionList, metricSetFrequency, metricSource, timezone, tags, dimensionFilterList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMetricSetRequest {\n");
    sb.append("    anomalyDetectorArn: ").append(toIndentedString(anomalyDetectorArn)).append("\n");
    sb.append("    metricSetName: ").append(toIndentedString(metricSetName)).append("\n");
    sb.append("    metricSetDescription: ").append(toIndentedString(metricSetDescription)).append("\n");
    sb.append("    metricList: ").append(toIndentedString(metricList)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    timestampColumn: ").append(toIndentedString(timestampColumn)).append("\n");
    sb.append("    dimensionList: ").append(toIndentedString(dimensionList)).append("\n");
    sb.append("    metricSetFrequency: ").append(toIndentedString(metricSetFrequency)).append("\n");
    sb.append("    metricSource: ").append(toIndentedString(metricSource)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    dimensionFilterList: ").append(toIndentedString(dimensionFilterList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnomalyDetectorArn");
    openapiFields.add("MetricSetName");
    openapiFields.add("MetricSetDescription");
    openapiFields.add("MetricList");
    openapiFields.add("Offset");
    openapiFields.add("TimestampColumn");
    openapiFields.add("DimensionList");
    openapiFields.add("MetricSetFrequency");
    openapiFields.add("MetricSource");
    openapiFields.add("Timezone");
    openapiFields.add("Tags");
    openapiFields.add("DimensionFilterList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AnomalyDetectorArn");
    openapiRequiredFields.add("MetricSetName");
    openapiRequiredFields.add("MetricList");
    openapiRequiredFields.add("MetricSource");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMetricSetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMetricSetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMetricSetRequest is not found in the empty JSON string", CreateMetricSetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMetricSetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMetricSetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMetricSetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AnomalyDetectorArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnomalyDetectorArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnomalyDetectorArn").toString()));
      }
      if (!jsonObj.get("MetricSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetricSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetricSetName").toString()));
      }
      if ((jsonObj.get("MetricSetDescription") != null && !jsonObj.get("MetricSetDescription").isJsonNull()) && !jsonObj.get("MetricSetDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetricSetDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetricSetDescription").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("MetricList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetricList` to be an array in the JSON string but got `%s`", jsonObj.get("MetricList").toString()));
      }

      JsonArray jsonArraymetricList = jsonObj.getAsJsonArray("MetricList");
      // validate the required field `MetricList` (array)
      for (int i = 0; i < jsonArraymetricList.size(); i++) {
        Metric.validateJsonElement(jsonArraymetricList.get(i));
      };
      // validate the optional field `TimestampColumn`
      if (jsonObj.get("TimestampColumn") != null && !jsonObj.get("TimestampColumn").isJsonNull()) {
        CreateMetricSetRequestTimestampColumn.validateJsonElement(jsonObj.get("TimestampColumn"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DimensionList") != null && !jsonObj.get("DimensionList").isJsonNull() && !jsonObj.get("DimensionList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DimensionList` to be an array in the JSON string but got `%s`", jsonObj.get("DimensionList").toString()));
      }
      if ((jsonObj.get("MetricSetFrequency") != null && !jsonObj.get("MetricSetFrequency").isJsonNull()) && !jsonObj.get("MetricSetFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetricSetFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetricSetFrequency").toString()));
      }
      // validate the optional field `MetricSetFrequency`
      if (jsonObj.get("MetricSetFrequency") != null && !jsonObj.get("MetricSetFrequency").isJsonNull()) {
        MetricSetFrequencyEnum.validateJsonElement(jsonObj.get("MetricSetFrequency"));
      }
      // validate the required field `MetricSource`
      CreateMetricSetRequestMetricSource.validateJsonElement(jsonObj.get("MetricSource"));
      if ((jsonObj.get("Timezone") != null && !jsonObj.get("Timezone").isJsonNull()) && !jsonObj.get("Timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timezone").toString()));
      }
      if (jsonObj.get("DimensionFilterList") != null && !jsonObj.get("DimensionFilterList").isJsonNull()) {
        JsonArray jsonArraydimensionFilterList = jsonObj.getAsJsonArray("DimensionFilterList");
        if (jsonArraydimensionFilterList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DimensionFilterList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DimensionFilterList` to be an array in the JSON string but got `%s`", jsonObj.get("DimensionFilterList").toString()));
          }

          // validate the optional field `DimensionFilterList` (array)
          for (int i = 0; i < jsonArraydimensionFilterList.size(); i++) {
            MetricSetDimensionFilter.validateJsonElement(jsonArraydimensionFilterList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMetricSetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMetricSetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMetricSetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMetricSetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMetricSetRequest>() {
           @Override
           public void write(JsonWriter out, CreateMetricSetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMetricSetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMetricSetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMetricSetRequest
   * @throws IOException if the JSON string is invalid with respect to CreateMetricSetRequest
   */
  public static CreateMetricSetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMetricSetRequest.class);
  }

  /**
   * Convert an instance of CreateMetricSetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

