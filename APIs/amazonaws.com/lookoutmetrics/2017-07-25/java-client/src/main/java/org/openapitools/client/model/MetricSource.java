/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateMetricSetRequestMetricSourceAppFlowConfig;
import org.openapitools.client.model.CreateMetricSetRequestMetricSourceAthenaSourceConfig;
import org.openapitools.client.model.CreateMetricSetRequestMetricSourceCloudWatchConfig;
import org.openapitools.client.model.CreateMetricSetRequestMetricSourceRDSSourceConfig;
import org.openapitools.client.model.CreateMetricSetRequestMetricSourceRedshiftSourceConfig;
import org.openapitools.client.model.S3SourceConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about source data used to generate metrics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricSource {
  public static final String SERIALIZED_NAME_S3_SOURCE_CONFIG = "S3SourceConfig";
  @SerializedName(SERIALIZED_NAME_S3_SOURCE_CONFIG)
  private S3SourceConfig s3SourceConfig;

  public static final String SERIALIZED_NAME_APP_FLOW_CONFIG = "AppFlowConfig";
  @SerializedName(SERIALIZED_NAME_APP_FLOW_CONFIG)
  private CreateMetricSetRequestMetricSourceAppFlowConfig appFlowConfig;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_CONFIG = "CloudWatchConfig";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_CONFIG)
  private CreateMetricSetRequestMetricSourceCloudWatchConfig cloudWatchConfig;

  public static final String SERIALIZED_NAME_RD_S_SOURCE_CONFIG = "RDSSourceConfig";
  @SerializedName(SERIALIZED_NAME_RD_S_SOURCE_CONFIG)
  private CreateMetricSetRequestMetricSourceRDSSourceConfig rdSSourceConfig;

  public static final String SERIALIZED_NAME_REDSHIFT_SOURCE_CONFIG = "RedshiftSourceConfig";
  @SerializedName(SERIALIZED_NAME_REDSHIFT_SOURCE_CONFIG)
  private CreateMetricSetRequestMetricSourceRedshiftSourceConfig redshiftSourceConfig;

  public static final String SERIALIZED_NAME_ATHENA_SOURCE_CONFIG = "AthenaSourceConfig";
  @SerializedName(SERIALIZED_NAME_ATHENA_SOURCE_CONFIG)
  private CreateMetricSetRequestMetricSourceAthenaSourceConfig athenaSourceConfig;

  public MetricSource() {
  }

  public MetricSource s3SourceConfig(S3SourceConfig s3SourceConfig) {
    this.s3SourceConfig = s3SourceConfig;
    return this;
  }

  /**
   * Get s3SourceConfig
   * @return s3SourceConfig
   */
  @javax.annotation.Nullable
  public S3SourceConfig getS3SourceConfig() {
    return s3SourceConfig;
  }

  public void setS3SourceConfig(S3SourceConfig s3SourceConfig) {
    this.s3SourceConfig = s3SourceConfig;
  }


  public MetricSource appFlowConfig(CreateMetricSetRequestMetricSourceAppFlowConfig appFlowConfig) {
    this.appFlowConfig = appFlowConfig;
    return this;
  }

  /**
   * Get appFlowConfig
   * @return appFlowConfig
   */
  @javax.annotation.Nullable
  public CreateMetricSetRequestMetricSourceAppFlowConfig getAppFlowConfig() {
    return appFlowConfig;
  }

  public void setAppFlowConfig(CreateMetricSetRequestMetricSourceAppFlowConfig appFlowConfig) {
    this.appFlowConfig = appFlowConfig;
  }


  public MetricSource cloudWatchConfig(CreateMetricSetRequestMetricSourceCloudWatchConfig cloudWatchConfig) {
    this.cloudWatchConfig = cloudWatchConfig;
    return this;
  }

  /**
   * Get cloudWatchConfig
   * @return cloudWatchConfig
   */
  @javax.annotation.Nullable
  public CreateMetricSetRequestMetricSourceCloudWatchConfig getCloudWatchConfig() {
    return cloudWatchConfig;
  }

  public void setCloudWatchConfig(CreateMetricSetRequestMetricSourceCloudWatchConfig cloudWatchConfig) {
    this.cloudWatchConfig = cloudWatchConfig;
  }


  public MetricSource rdSSourceConfig(CreateMetricSetRequestMetricSourceRDSSourceConfig rdSSourceConfig) {
    this.rdSSourceConfig = rdSSourceConfig;
    return this;
  }

  /**
   * Get rdSSourceConfig
   * @return rdSSourceConfig
   */
  @javax.annotation.Nullable
  public CreateMetricSetRequestMetricSourceRDSSourceConfig getRdSSourceConfig() {
    return rdSSourceConfig;
  }

  public void setRdSSourceConfig(CreateMetricSetRequestMetricSourceRDSSourceConfig rdSSourceConfig) {
    this.rdSSourceConfig = rdSSourceConfig;
  }


  public MetricSource redshiftSourceConfig(CreateMetricSetRequestMetricSourceRedshiftSourceConfig redshiftSourceConfig) {
    this.redshiftSourceConfig = redshiftSourceConfig;
    return this;
  }

  /**
   * Get redshiftSourceConfig
   * @return redshiftSourceConfig
   */
  @javax.annotation.Nullable
  public CreateMetricSetRequestMetricSourceRedshiftSourceConfig getRedshiftSourceConfig() {
    return redshiftSourceConfig;
  }

  public void setRedshiftSourceConfig(CreateMetricSetRequestMetricSourceRedshiftSourceConfig redshiftSourceConfig) {
    this.redshiftSourceConfig = redshiftSourceConfig;
  }


  public MetricSource athenaSourceConfig(CreateMetricSetRequestMetricSourceAthenaSourceConfig athenaSourceConfig) {
    this.athenaSourceConfig = athenaSourceConfig;
    return this;
  }

  /**
   * Get athenaSourceConfig
   * @return athenaSourceConfig
   */
  @javax.annotation.Nullable
  public CreateMetricSetRequestMetricSourceAthenaSourceConfig getAthenaSourceConfig() {
    return athenaSourceConfig;
  }

  public void setAthenaSourceConfig(CreateMetricSetRequestMetricSourceAthenaSourceConfig athenaSourceConfig) {
    this.athenaSourceConfig = athenaSourceConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricSource metricSource = (MetricSource) o;
    return Objects.equals(this.s3SourceConfig, metricSource.s3SourceConfig) &&
        Objects.equals(this.appFlowConfig, metricSource.appFlowConfig) &&
        Objects.equals(this.cloudWatchConfig, metricSource.cloudWatchConfig) &&
        Objects.equals(this.rdSSourceConfig, metricSource.rdSSourceConfig) &&
        Objects.equals(this.redshiftSourceConfig, metricSource.redshiftSourceConfig) &&
        Objects.equals(this.athenaSourceConfig, metricSource.athenaSourceConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3SourceConfig, appFlowConfig, cloudWatchConfig, rdSSourceConfig, redshiftSourceConfig, athenaSourceConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricSource {\n");
    sb.append("    s3SourceConfig: ").append(toIndentedString(s3SourceConfig)).append("\n");
    sb.append("    appFlowConfig: ").append(toIndentedString(appFlowConfig)).append("\n");
    sb.append("    cloudWatchConfig: ").append(toIndentedString(cloudWatchConfig)).append("\n");
    sb.append("    rdSSourceConfig: ").append(toIndentedString(rdSSourceConfig)).append("\n");
    sb.append("    redshiftSourceConfig: ").append(toIndentedString(redshiftSourceConfig)).append("\n");
    sb.append("    athenaSourceConfig: ").append(toIndentedString(athenaSourceConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3SourceConfig");
    openapiFields.add("AppFlowConfig");
    openapiFields.add("CloudWatchConfig");
    openapiFields.add("RDSSourceConfig");
    openapiFields.add("RedshiftSourceConfig");
    openapiFields.add("AthenaSourceConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricSource is not found in the empty JSON string", MetricSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S3SourceConfig`
      if (jsonObj.get("S3SourceConfig") != null && !jsonObj.get("S3SourceConfig").isJsonNull()) {
        S3SourceConfig.validateJsonElement(jsonObj.get("S3SourceConfig"));
      }
      // validate the optional field `AppFlowConfig`
      if (jsonObj.get("AppFlowConfig") != null && !jsonObj.get("AppFlowConfig").isJsonNull()) {
        CreateMetricSetRequestMetricSourceAppFlowConfig.validateJsonElement(jsonObj.get("AppFlowConfig"));
      }
      // validate the optional field `CloudWatchConfig`
      if (jsonObj.get("CloudWatchConfig") != null && !jsonObj.get("CloudWatchConfig").isJsonNull()) {
        CreateMetricSetRequestMetricSourceCloudWatchConfig.validateJsonElement(jsonObj.get("CloudWatchConfig"));
      }
      // validate the optional field `RDSSourceConfig`
      if (jsonObj.get("RDSSourceConfig") != null && !jsonObj.get("RDSSourceConfig").isJsonNull()) {
        CreateMetricSetRequestMetricSourceRDSSourceConfig.validateJsonElement(jsonObj.get("RDSSourceConfig"));
      }
      // validate the optional field `RedshiftSourceConfig`
      if (jsonObj.get("RedshiftSourceConfig") != null && !jsonObj.get("RedshiftSourceConfig").isJsonNull()) {
        CreateMetricSetRequestMetricSourceRedshiftSourceConfig.validateJsonElement(jsonObj.get("RedshiftSourceConfig"));
      }
      // validate the optional field `AthenaSourceConfig`
      if (jsonObj.get("AthenaSourceConfig") != null && !jsonObj.get("AthenaSourceConfig").isJsonNull()) {
        CreateMetricSetRequestMetricSourceAthenaSourceConfig.validateJsonElement(jsonObj.get("AthenaSourceConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricSource.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricSource>() {
           @Override
           public void write(JsonWriter out, MetricSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricSource
   * @throws IOException if the JSON string is invalid with respect to MetricSource
   */
  public static MetricSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricSource.class);
  }

  /**
   * Convert an instance of MetricSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

