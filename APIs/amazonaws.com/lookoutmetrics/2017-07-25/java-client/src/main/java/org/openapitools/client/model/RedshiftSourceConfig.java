/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RedshiftSourceConfigVpcConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the Amazon Redshift database configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RedshiftSourceConfig {
  public static final String SERIALIZED_NAME_CLUSTER_IDENTIFIER = "ClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_CLUSTER_IDENTIFIER)
  private String clusterIdentifier;

  public static final String SERIALIZED_NAME_DATABASE_HOST = "DatabaseHost";
  @SerializedName(SERIALIZED_NAME_DATABASE_HOST)
  private String databaseHost;

  public static final String SERIALIZED_NAME_DATABASE_PORT = "DatabasePort";
  @SerializedName(SERIALIZED_NAME_DATABASE_PORT)
  private Integer databasePort;

  public static final String SERIALIZED_NAME_SECRET_MANAGER_ARN = "SecretManagerArn";
  @SerializedName(SERIALIZED_NAME_SECRET_MANAGER_ARN)
  private String secretManagerArn;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "VpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private RedshiftSourceConfigVpcConfiguration vpcConfiguration;

  public RedshiftSourceConfig() {
  }

  public RedshiftSourceConfig clusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
    return this;
  }

  /**
   * Get clusterIdentifier
   * @return clusterIdentifier
   */
  @javax.annotation.Nullable
  public String getClusterIdentifier() {
    return clusterIdentifier;
  }

  public void setClusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
  }


  public RedshiftSourceConfig databaseHost(String databaseHost) {
    this.databaseHost = databaseHost;
    return this;
  }

  /**
   * Get databaseHost
   * @return databaseHost
   */
  @javax.annotation.Nullable
  public String getDatabaseHost() {
    return databaseHost;
  }

  public void setDatabaseHost(String databaseHost) {
    this.databaseHost = databaseHost;
  }


  public RedshiftSourceConfig databasePort(Integer databasePort) {
    this.databasePort = databasePort;
    return this;
  }

  /**
   * Get databasePort
   * @return databasePort
   */
  @javax.annotation.Nullable
  public Integer getDatabasePort() {
    return databasePort;
  }

  public void setDatabasePort(Integer databasePort) {
    this.databasePort = databasePort;
  }


  public RedshiftSourceConfig secretManagerArn(String secretManagerArn) {
    this.secretManagerArn = secretManagerArn;
    return this;
  }

  /**
   * Get secretManagerArn
   * @return secretManagerArn
   */
  @javax.annotation.Nullable
  public String getSecretManagerArn() {
    return secretManagerArn;
  }

  public void setSecretManagerArn(String secretManagerArn) {
    this.secretManagerArn = secretManagerArn;
  }


  public RedshiftSourceConfig databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public RedshiftSourceConfig tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public RedshiftSourceConfig roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public RedshiftSourceConfig vpcConfiguration(RedshiftSourceConfigVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public RedshiftSourceConfigVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(RedshiftSourceConfigVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedshiftSourceConfig redshiftSourceConfig = (RedshiftSourceConfig) o;
    return Objects.equals(this.clusterIdentifier, redshiftSourceConfig.clusterIdentifier) &&
        Objects.equals(this.databaseHost, redshiftSourceConfig.databaseHost) &&
        Objects.equals(this.databasePort, redshiftSourceConfig.databasePort) &&
        Objects.equals(this.secretManagerArn, redshiftSourceConfig.secretManagerArn) &&
        Objects.equals(this.databaseName, redshiftSourceConfig.databaseName) &&
        Objects.equals(this.tableName, redshiftSourceConfig.tableName) &&
        Objects.equals(this.roleArn, redshiftSourceConfig.roleArn) &&
        Objects.equals(this.vpcConfiguration, redshiftSourceConfig.vpcConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterIdentifier, databaseHost, databasePort, secretManagerArn, databaseName, tableName, roleArn, vpcConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedshiftSourceConfig {\n");
    sb.append("    clusterIdentifier: ").append(toIndentedString(clusterIdentifier)).append("\n");
    sb.append("    databaseHost: ").append(toIndentedString(databaseHost)).append("\n");
    sb.append("    databasePort: ").append(toIndentedString(databasePort)).append("\n");
    sb.append("    secretManagerArn: ").append(toIndentedString(secretManagerArn)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClusterIdentifier");
    openapiFields.add("DatabaseHost");
    openapiFields.add("DatabasePort");
    openapiFields.add("SecretManagerArn");
    openapiFields.add("DatabaseName");
    openapiFields.add("TableName");
    openapiFields.add("RoleArn");
    openapiFields.add("VpcConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RedshiftSourceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedshiftSourceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedshiftSourceConfig is not found in the empty JSON string", RedshiftSourceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedshiftSourceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedshiftSourceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClusterIdentifier`
      if (jsonObj.get("ClusterIdentifier") != null && !jsonObj.get("ClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClusterIdentifier"));
      }
      // validate the optional field `DatabaseHost`
      if (jsonObj.get("DatabaseHost") != null && !jsonObj.get("DatabaseHost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseHost"));
      }
      // validate the optional field `DatabasePort`
      if (jsonObj.get("DatabasePort") != null && !jsonObj.get("DatabasePort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DatabasePort"));
      }
      // validate the optional field `SecretManagerArn`
      if (jsonObj.get("SecretManagerArn") != null && !jsonObj.get("SecretManagerArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretManagerArn"));
      }
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the optional field `TableName`
      if (jsonObj.get("TableName") != null && !jsonObj.get("TableName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableName"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `VpcConfiguration`
      if (jsonObj.get("VpcConfiguration") != null && !jsonObj.get("VpcConfiguration").isJsonNull()) {
        RedshiftSourceConfigVpcConfiguration.validateJsonElement(jsonObj.get("VpcConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedshiftSourceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedshiftSourceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedshiftSourceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedshiftSourceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RedshiftSourceConfig>() {
           @Override
           public void write(JsonWriter out, RedshiftSourceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedshiftSourceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RedshiftSourceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RedshiftSourceConfig
   * @throws IOException if the JSON string is invalid with respect to RedshiftSourceConfig
   */
  public static RedshiftSourceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedshiftSourceConfig.class);
  }

  /**
   * Convert an instance of RedshiftSourceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

