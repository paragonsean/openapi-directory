/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateMetricSetRequestMetricSource;
import org.openapitools.client.model.CreateMetricSetRequestTimestampColumn;
import org.openapitools.client.model.Metric;
import org.openapitools.client.model.MetricSetDimensionFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateMetricSetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateMetricSetRequest {
  public static final String SERIALIZED_NAME_METRIC_SET_ARN = "MetricSetArn";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_ARN)
  private String metricSetArn;

  public static final String SERIALIZED_NAME_METRIC_SET_DESCRIPTION = "MetricSetDescription";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_DESCRIPTION)
  private String metricSetDescription;

  public static final String SERIALIZED_NAME_METRIC_LIST = "MetricList";
  @SerializedName(SERIALIZED_NAME_METRIC_LIST)
  private List<Metric> metricList = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_TIMESTAMP_COLUMN = "TimestampColumn";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_COLUMN)
  private CreateMetricSetRequestTimestampColumn timestampColumn;

  public static final String SERIALIZED_NAME_DIMENSION_LIST = "DimensionList";
  @SerializedName(SERIALIZED_NAME_DIMENSION_LIST)
  private List<String> dimensionList = new ArrayList<>();

  /**
   * The dataset&#39;s interval.
   */
  @JsonAdapter(MetricSetFrequencyEnum.Adapter.class)
  public enum MetricSetFrequencyEnum {
    P1_D("P1D"),
    
    PT1_H("PT1H"),
    
    PT10_M("PT10M"),
    
    PT5_M("PT5M");

    private String value;

    MetricSetFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricSetFrequencyEnum fromValue(String value) {
      for (MetricSetFrequencyEnum b : MetricSetFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricSetFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricSetFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricSetFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricSetFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricSetFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC_SET_FREQUENCY = "MetricSetFrequency";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_FREQUENCY)
  private MetricSetFrequencyEnum metricSetFrequency;

  public static final String SERIALIZED_NAME_METRIC_SOURCE = "MetricSource";
  @SerializedName(SERIALIZED_NAME_METRIC_SOURCE)
  private CreateMetricSetRequestMetricSource metricSource;

  public static final String SERIALIZED_NAME_DIMENSION_FILTER_LIST = "DimensionFilterList";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTER_LIST)
  private List<MetricSetDimensionFilter> dimensionFilterList = new ArrayList<>();

  public UpdateMetricSetRequest() {
  }

  public UpdateMetricSetRequest metricSetArn(String metricSetArn) {
    this.metricSetArn = metricSetArn;
    return this;
  }

  /**
   * The ARN of the dataset to update.
   * @return metricSetArn
   */
  @javax.annotation.Nonnull
  public String getMetricSetArn() {
    return metricSetArn;
  }

  public void setMetricSetArn(String metricSetArn) {
    this.metricSetArn = metricSetArn;
  }


  public UpdateMetricSetRequest metricSetDescription(String metricSetDescription) {
    this.metricSetDescription = metricSetDescription;
    return this;
  }

  /**
   * The dataset&#39;s description.
   * @return metricSetDescription
   */
  @javax.annotation.Nullable
  public String getMetricSetDescription() {
    return metricSetDescription;
  }

  public void setMetricSetDescription(String metricSetDescription) {
    this.metricSetDescription = metricSetDescription;
  }


  public UpdateMetricSetRequest metricList(List<Metric> metricList) {
    this.metricList = metricList;
    return this;
  }

  public UpdateMetricSetRequest addMetricListItem(Metric metricListItem) {
    if (this.metricList == null) {
      this.metricList = new ArrayList<>();
    }
    this.metricList.add(metricListItem);
    return this;
  }

  /**
   * The metric list.
   * @return metricList
   */
  @javax.annotation.Nullable
  public List<Metric> getMetricList() {
    return metricList;
  }

  public void setMetricList(List<Metric> metricList) {
    this.metricList = metricList;
  }


  public UpdateMetricSetRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.
   * minimum: 0
   * maximum: 432000
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public UpdateMetricSetRequest timestampColumn(CreateMetricSetRequestTimestampColumn timestampColumn) {
    this.timestampColumn = timestampColumn;
    return this;
  }

  /**
   * Get timestampColumn
   * @return timestampColumn
   */
  @javax.annotation.Nullable
  public CreateMetricSetRequestTimestampColumn getTimestampColumn() {
    return timestampColumn;
  }

  public void setTimestampColumn(CreateMetricSetRequestTimestampColumn timestampColumn) {
    this.timestampColumn = timestampColumn;
  }


  public UpdateMetricSetRequest dimensionList(List<String> dimensionList) {
    this.dimensionList = dimensionList;
    return this;
  }

  public UpdateMetricSetRequest addDimensionListItem(String dimensionListItem) {
    if (this.dimensionList == null) {
      this.dimensionList = new ArrayList<>();
    }
    this.dimensionList.add(dimensionListItem);
    return this;
  }

  /**
   * The dimension list.
   * @return dimensionList
   */
  @javax.annotation.Nullable
  public List<String> getDimensionList() {
    return dimensionList;
  }

  public void setDimensionList(List<String> dimensionList) {
    this.dimensionList = dimensionList;
  }


  public UpdateMetricSetRequest metricSetFrequency(MetricSetFrequencyEnum metricSetFrequency) {
    this.metricSetFrequency = metricSetFrequency;
    return this;
  }

  /**
   * The dataset&#39;s interval.
   * @return metricSetFrequency
   */
  @javax.annotation.Nullable
  public MetricSetFrequencyEnum getMetricSetFrequency() {
    return metricSetFrequency;
  }

  public void setMetricSetFrequency(MetricSetFrequencyEnum metricSetFrequency) {
    this.metricSetFrequency = metricSetFrequency;
  }


  public UpdateMetricSetRequest metricSource(CreateMetricSetRequestMetricSource metricSource) {
    this.metricSource = metricSource;
    return this;
  }

  /**
   * Get metricSource
   * @return metricSource
   */
  @javax.annotation.Nullable
  public CreateMetricSetRequestMetricSource getMetricSource() {
    return metricSource;
  }

  public void setMetricSource(CreateMetricSetRequestMetricSource metricSource) {
    this.metricSource = metricSource;
  }


  public UpdateMetricSetRequest dimensionFilterList(List<MetricSetDimensionFilter> dimensionFilterList) {
    this.dimensionFilterList = dimensionFilterList;
    return this;
  }

  public UpdateMetricSetRequest addDimensionFilterListItem(MetricSetDimensionFilter dimensionFilterListItem) {
    if (this.dimensionFilterList == null) {
      this.dimensionFilterList = new ArrayList<>();
    }
    this.dimensionFilterList.add(dimensionFilterListItem);
    return this;
  }

  /**
   * Describes a list of filters for choosing specific dimensions and specific values. Each filter consists of the dimension and one of its values that you want to include. When multiple dimensions or values are specified, the dimensions are joined with an AND operation and the values are joined with an OR operation.
   * @return dimensionFilterList
   */
  @javax.annotation.Nullable
  public List<MetricSetDimensionFilter> getDimensionFilterList() {
    return dimensionFilterList;
  }

  public void setDimensionFilterList(List<MetricSetDimensionFilter> dimensionFilterList) {
    this.dimensionFilterList = dimensionFilterList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateMetricSetRequest updateMetricSetRequest = (UpdateMetricSetRequest) o;
    return Objects.equals(this.metricSetArn, updateMetricSetRequest.metricSetArn) &&
        Objects.equals(this.metricSetDescription, updateMetricSetRequest.metricSetDescription) &&
        Objects.equals(this.metricList, updateMetricSetRequest.metricList) &&
        Objects.equals(this.offset, updateMetricSetRequest.offset) &&
        Objects.equals(this.timestampColumn, updateMetricSetRequest.timestampColumn) &&
        Objects.equals(this.dimensionList, updateMetricSetRequest.dimensionList) &&
        Objects.equals(this.metricSetFrequency, updateMetricSetRequest.metricSetFrequency) &&
        Objects.equals(this.metricSource, updateMetricSetRequest.metricSource) &&
        Objects.equals(this.dimensionFilterList, updateMetricSetRequest.dimensionFilterList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricSetArn, metricSetDescription, metricList, offset, timestampColumn, dimensionList, metricSetFrequency, metricSource, dimensionFilterList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateMetricSetRequest {\n");
    sb.append("    metricSetArn: ").append(toIndentedString(metricSetArn)).append("\n");
    sb.append("    metricSetDescription: ").append(toIndentedString(metricSetDescription)).append("\n");
    sb.append("    metricList: ").append(toIndentedString(metricList)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    timestampColumn: ").append(toIndentedString(timestampColumn)).append("\n");
    sb.append("    dimensionList: ").append(toIndentedString(dimensionList)).append("\n");
    sb.append("    metricSetFrequency: ").append(toIndentedString(metricSetFrequency)).append("\n");
    sb.append("    metricSource: ").append(toIndentedString(metricSource)).append("\n");
    sb.append("    dimensionFilterList: ").append(toIndentedString(dimensionFilterList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricSetArn");
    openapiFields.add("MetricSetDescription");
    openapiFields.add("MetricList");
    openapiFields.add("Offset");
    openapiFields.add("TimestampColumn");
    openapiFields.add("DimensionList");
    openapiFields.add("MetricSetFrequency");
    openapiFields.add("MetricSource");
    openapiFields.add("DimensionFilterList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MetricSetArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateMetricSetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateMetricSetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateMetricSetRequest is not found in the empty JSON string", UpdateMetricSetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateMetricSetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateMetricSetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateMetricSetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("MetricSetArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetricSetArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetricSetArn").toString()));
      }
      if ((jsonObj.get("MetricSetDescription") != null && !jsonObj.get("MetricSetDescription").isJsonNull()) && !jsonObj.get("MetricSetDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetricSetDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetricSetDescription").toString()));
      }
      if (jsonObj.get("MetricList") != null && !jsonObj.get("MetricList").isJsonNull()) {
        JsonArray jsonArraymetricList = jsonObj.getAsJsonArray("MetricList");
        if (jsonArraymetricList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MetricList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MetricList` to be an array in the JSON string but got `%s`", jsonObj.get("MetricList").toString()));
          }

          // validate the optional field `MetricList` (array)
          for (int i = 0; i < jsonArraymetricList.size(); i++) {
            Metric.validateJsonElement(jsonArraymetricList.get(i));
          };
        }
      }
      // validate the optional field `TimestampColumn`
      if (jsonObj.get("TimestampColumn") != null && !jsonObj.get("TimestampColumn").isJsonNull()) {
        CreateMetricSetRequestTimestampColumn.validateJsonElement(jsonObj.get("TimestampColumn"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DimensionList") != null && !jsonObj.get("DimensionList").isJsonNull() && !jsonObj.get("DimensionList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DimensionList` to be an array in the JSON string but got `%s`", jsonObj.get("DimensionList").toString()));
      }
      if ((jsonObj.get("MetricSetFrequency") != null && !jsonObj.get("MetricSetFrequency").isJsonNull()) && !jsonObj.get("MetricSetFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetricSetFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetricSetFrequency").toString()));
      }
      // validate the optional field `MetricSetFrequency`
      if (jsonObj.get("MetricSetFrequency") != null && !jsonObj.get("MetricSetFrequency").isJsonNull()) {
        MetricSetFrequencyEnum.validateJsonElement(jsonObj.get("MetricSetFrequency"));
      }
      // validate the optional field `MetricSource`
      if (jsonObj.get("MetricSource") != null && !jsonObj.get("MetricSource").isJsonNull()) {
        CreateMetricSetRequestMetricSource.validateJsonElement(jsonObj.get("MetricSource"));
      }
      if (jsonObj.get("DimensionFilterList") != null && !jsonObj.get("DimensionFilterList").isJsonNull()) {
        JsonArray jsonArraydimensionFilterList = jsonObj.getAsJsonArray("DimensionFilterList");
        if (jsonArraydimensionFilterList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DimensionFilterList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DimensionFilterList` to be an array in the JSON string but got `%s`", jsonObj.get("DimensionFilterList").toString()));
          }

          // validate the optional field `DimensionFilterList` (array)
          for (int i = 0; i < jsonArraydimensionFilterList.size(); i++) {
            MetricSetDimensionFilter.validateJsonElement(jsonArraydimensionFilterList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateMetricSetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateMetricSetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateMetricSetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateMetricSetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateMetricSetRequest>() {
           @Override
           public void write(JsonWriter out, UpdateMetricSetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateMetricSetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateMetricSetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateMetricSetRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateMetricSetRequest
   */
  public static UpdateMetricSetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateMetricSetRequest.class);
  }

  /**
   * Convert an instance of UpdateMetricSetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

