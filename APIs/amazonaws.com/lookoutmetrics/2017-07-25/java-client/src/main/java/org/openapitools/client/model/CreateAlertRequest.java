/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateAlertRequestAction;
import org.openapitools.client.model.CreateAlertRequestAlertFilters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAlertRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAlertRequest {
  public static final String SERIALIZED_NAME_ALERT_NAME = "AlertName";
  @SerializedName(SERIALIZED_NAME_ALERT_NAME)
  private String alertName;

  public static final String SERIALIZED_NAME_ALERT_SENSITIVITY_THRESHOLD = "AlertSensitivityThreshold";
  @SerializedName(SERIALIZED_NAME_ALERT_SENSITIVITY_THRESHOLD)
  private Integer alertSensitivityThreshold;

  public static final String SERIALIZED_NAME_ALERT_DESCRIPTION = "AlertDescription";
  @SerializedName(SERIALIZED_NAME_ALERT_DESCRIPTION)
  private String alertDescription;

  public static final String SERIALIZED_NAME_ANOMALY_DETECTOR_ARN = "AnomalyDetectorArn";
  @SerializedName(SERIALIZED_NAME_ANOMALY_DETECTOR_ARN)
  private String anomalyDetectorArn;

  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private CreateAlertRequestAction action;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_ALERT_FILTERS = "AlertFilters";
  @SerializedName(SERIALIZED_NAME_ALERT_FILTERS)
  private CreateAlertRequestAlertFilters alertFilters;

  public CreateAlertRequest() {
  }

  public CreateAlertRequest alertName(String alertName) {
    this.alertName = alertName;
    return this;
  }

  /**
   * The name of the alert.
   * @return alertName
   */
  @javax.annotation.Nonnull
  public String getAlertName() {
    return alertName;
  }

  public void setAlertName(String alertName) {
    this.alertName = alertName;
  }


  public CreateAlertRequest alertSensitivityThreshold(Integer alertSensitivityThreshold) {
    this.alertSensitivityThreshold = alertSensitivityThreshold;
    return this;
  }

  /**
   * An integer from 0 to 100 specifying the alert sensitivity threshold.
   * minimum: 0
   * maximum: 100
   * @return alertSensitivityThreshold
   */
  @javax.annotation.Nullable
  public Integer getAlertSensitivityThreshold() {
    return alertSensitivityThreshold;
  }

  public void setAlertSensitivityThreshold(Integer alertSensitivityThreshold) {
    this.alertSensitivityThreshold = alertSensitivityThreshold;
  }


  public CreateAlertRequest alertDescription(String alertDescription) {
    this.alertDescription = alertDescription;
    return this;
  }

  /**
   * A description of the alert.
   * @return alertDescription
   */
  @javax.annotation.Nullable
  public String getAlertDescription() {
    return alertDescription;
  }

  public void setAlertDescription(String alertDescription) {
    this.alertDescription = alertDescription;
  }


  public CreateAlertRequest anomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
    return this;
  }

  /**
   * The ARN of the detector to which the alert is attached.
   * @return anomalyDetectorArn
   */
  @javax.annotation.Nonnull
  public String getAnomalyDetectorArn() {
    return anomalyDetectorArn;
  }

  public void setAnomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
  }


  public CreateAlertRequest action(CreateAlertRequestAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public CreateAlertRequestAction getAction() {
    return action;
  }

  public void setAction(CreateAlertRequestAction action) {
    this.action = action;
  }


  public CreateAlertRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateAlertRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\&quot;&gt;tags&lt;/a&gt; to apply to the alert.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateAlertRequest alertFilters(CreateAlertRequestAlertFilters alertFilters) {
    this.alertFilters = alertFilters;
    return this;
  }

  /**
   * Get alertFilters
   * @return alertFilters
   */
  @javax.annotation.Nullable
  public CreateAlertRequestAlertFilters getAlertFilters() {
    return alertFilters;
  }

  public void setAlertFilters(CreateAlertRequestAlertFilters alertFilters) {
    this.alertFilters = alertFilters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAlertRequest createAlertRequest = (CreateAlertRequest) o;
    return Objects.equals(this.alertName, createAlertRequest.alertName) &&
        Objects.equals(this.alertSensitivityThreshold, createAlertRequest.alertSensitivityThreshold) &&
        Objects.equals(this.alertDescription, createAlertRequest.alertDescription) &&
        Objects.equals(this.anomalyDetectorArn, createAlertRequest.anomalyDetectorArn) &&
        Objects.equals(this.action, createAlertRequest.action) &&
        Objects.equals(this.tags, createAlertRequest.tags) &&
        Objects.equals(this.alertFilters, createAlertRequest.alertFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertName, alertSensitivityThreshold, alertDescription, anomalyDetectorArn, action, tags, alertFilters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAlertRequest {\n");
    sb.append("    alertName: ").append(toIndentedString(alertName)).append("\n");
    sb.append("    alertSensitivityThreshold: ").append(toIndentedString(alertSensitivityThreshold)).append("\n");
    sb.append("    alertDescription: ").append(toIndentedString(alertDescription)).append("\n");
    sb.append("    anomalyDetectorArn: ").append(toIndentedString(anomalyDetectorArn)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    alertFilters: ").append(toIndentedString(alertFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlertName");
    openapiFields.add("AlertSensitivityThreshold");
    openapiFields.add("AlertDescription");
    openapiFields.add("AnomalyDetectorArn");
    openapiFields.add("Action");
    openapiFields.add("Tags");
    openapiFields.add("AlertFilters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AlertName");
    openapiRequiredFields.add("AnomalyDetectorArn");
    openapiRequiredFields.add("Action");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAlertRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAlertRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAlertRequest is not found in the empty JSON string", CreateAlertRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAlertRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAlertRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAlertRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AlertName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlertName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlertName").toString()));
      }
      if ((jsonObj.get("AlertDescription") != null && !jsonObj.get("AlertDescription").isJsonNull()) && !jsonObj.get("AlertDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlertDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlertDescription").toString()));
      }
      if (!jsonObj.get("AnomalyDetectorArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnomalyDetectorArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnomalyDetectorArn").toString()));
      }
      // validate the required field `Action`
      CreateAlertRequestAction.validateJsonElement(jsonObj.get("Action"));
      // validate the optional field `AlertFilters`
      if (jsonObj.get("AlertFilters") != null && !jsonObj.get("AlertFilters").isJsonNull()) {
        CreateAlertRequestAlertFilters.validateJsonElement(jsonObj.get("AlertFilters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAlertRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAlertRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAlertRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAlertRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAlertRequest>() {
           @Override
           public void write(JsonWriter out, CreateAlertRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAlertRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAlertRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAlertRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAlertRequest
   */
  public static CreateAlertRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAlertRequest.class);
  }

  /**
   * Convert an instance of CreateAlertRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

