/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a dataset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricSetSummary {
  public static final String SERIALIZED_NAME_METRIC_SET_ARN = "MetricSetArn";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_ARN)
  private String metricSetArn;

  public static final String SERIALIZED_NAME_ANOMALY_DETECTOR_ARN = "AnomalyDetectorArn";
  @SerializedName(SERIALIZED_NAME_ANOMALY_DETECTOR_ARN)
  private String anomalyDetectorArn;

  public static final String SERIALIZED_NAME_METRIC_SET_DESCRIPTION = "MetricSetDescription";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_DESCRIPTION)
  private String metricSetDescription;

  public static final String SERIALIZED_NAME_METRIC_SET_NAME = "MetricSetName";
  @SerializedName(SERIALIZED_NAME_METRIC_SET_NAME)
  private String metricSetName;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_TIME = "LastModificationTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_TIME)
  private OffsetDateTime lastModificationTime;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public MetricSetSummary() {
  }

  public MetricSetSummary metricSetArn(String metricSetArn) {
    this.metricSetArn = metricSetArn;
    return this;
  }

  /**
   * Get metricSetArn
   * @return metricSetArn
   */
  @javax.annotation.Nullable
  public String getMetricSetArn() {
    return metricSetArn;
  }

  public void setMetricSetArn(String metricSetArn) {
    this.metricSetArn = metricSetArn;
  }


  public MetricSetSummary anomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
    return this;
  }

  /**
   * Get anomalyDetectorArn
   * @return anomalyDetectorArn
   */
  @javax.annotation.Nullable
  public String getAnomalyDetectorArn() {
    return anomalyDetectorArn;
  }

  public void setAnomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
  }


  public MetricSetSummary metricSetDescription(String metricSetDescription) {
    this.metricSetDescription = metricSetDescription;
    return this;
  }

  /**
   * Get metricSetDescription
   * @return metricSetDescription
   */
  @javax.annotation.Nullable
  public String getMetricSetDescription() {
    return metricSetDescription;
  }

  public void setMetricSetDescription(String metricSetDescription) {
    this.metricSetDescription = metricSetDescription;
  }


  public MetricSetSummary metricSetName(String metricSetName) {
    this.metricSetName = metricSetName;
    return this;
  }

  /**
   * Get metricSetName
   * @return metricSetName
   */
  @javax.annotation.Nullable
  public String getMetricSetName() {
    return metricSetName;
  }

  public void setMetricSetName(String metricSetName) {
    this.metricSetName = metricSetName;
  }


  public MetricSetSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public MetricSetSummary lastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
    return this;
  }

  /**
   * Get lastModificationTime
   * @return lastModificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationTime() {
    return lastModificationTime;
  }

  public void setLastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
  }


  public MetricSetSummary tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricSetSummary metricSetSummary = (MetricSetSummary) o;
    return Objects.equals(this.metricSetArn, metricSetSummary.metricSetArn) &&
        Objects.equals(this.anomalyDetectorArn, metricSetSummary.anomalyDetectorArn) &&
        Objects.equals(this.metricSetDescription, metricSetSummary.metricSetDescription) &&
        Objects.equals(this.metricSetName, metricSetSummary.metricSetName) &&
        Objects.equals(this.creationTime, metricSetSummary.creationTime) &&
        Objects.equals(this.lastModificationTime, metricSetSummary.lastModificationTime) &&
        Objects.equals(this.tags, metricSetSummary.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricSetArn, anomalyDetectorArn, metricSetDescription, metricSetName, creationTime, lastModificationTime, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricSetSummary {\n");
    sb.append("    metricSetArn: ").append(toIndentedString(metricSetArn)).append("\n");
    sb.append("    anomalyDetectorArn: ").append(toIndentedString(anomalyDetectorArn)).append("\n");
    sb.append("    metricSetDescription: ").append(toIndentedString(metricSetDescription)).append("\n");
    sb.append("    metricSetName: ").append(toIndentedString(metricSetName)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModificationTime: ").append(toIndentedString(lastModificationTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricSetArn");
    openapiFields.add("AnomalyDetectorArn");
    openapiFields.add("MetricSetDescription");
    openapiFields.add("MetricSetName");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModificationTime");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricSetSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricSetSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricSetSummary is not found in the empty JSON string", MetricSetSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricSetSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricSetSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MetricSetArn`
      if (jsonObj.get("MetricSetArn") != null && !jsonObj.get("MetricSetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricSetArn"));
      }
      // validate the optional field `AnomalyDetectorArn`
      if (jsonObj.get("AnomalyDetectorArn") != null && !jsonObj.get("AnomalyDetectorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AnomalyDetectorArn"));
      }
      // validate the optional field `MetricSetDescription`
      if (jsonObj.get("MetricSetDescription") != null && !jsonObj.get("MetricSetDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricSetDescription"));
      }
      // validate the optional field `MetricSetName`
      if (jsonObj.get("MetricSetName") != null && !jsonObj.get("MetricSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricSetName"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastModificationTime`
      if (jsonObj.get("LastModificationTime") != null && !jsonObj.get("LastModificationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModificationTime"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricSetSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricSetSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricSetSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricSetSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricSetSummary>() {
           @Override
           public void write(JsonWriter out, MetricSetSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricSetSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricSetSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricSetSummary
   * @throws IOException if the JSON string is invalid with respect to MetricSetSummary
   */
  public static MetricSetSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricSetSummary.class);
  }

  /**
   * Convert an instance of MetricSetSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

