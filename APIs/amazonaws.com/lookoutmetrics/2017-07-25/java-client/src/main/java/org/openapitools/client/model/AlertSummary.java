/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AlertStatus;
import org.openapitools.client.model.AlertType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides a summary of an alert&#39;s configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:15.433600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertSummary {
  public static final String SERIALIZED_NAME_ALERT_ARN = "AlertArn";
  @SerializedName(SERIALIZED_NAME_ALERT_ARN)
  private String alertArn;

  public static final String SERIALIZED_NAME_ANOMALY_DETECTOR_ARN = "AnomalyDetectorArn";
  @SerializedName(SERIALIZED_NAME_ANOMALY_DETECTOR_ARN)
  private String anomalyDetectorArn;

  public static final String SERIALIZED_NAME_ALERT_NAME = "AlertName";
  @SerializedName(SERIALIZED_NAME_ALERT_NAME)
  private String alertName;

  public static final String SERIALIZED_NAME_ALERT_SENSITIVITY_THRESHOLD = "AlertSensitivityThreshold";
  @SerializedName(SERIALIZED_NAME_ALERT_SENSITIVITY_THRESHOLD)
  private Integer alertSensitivityThreshold;

  public static final String SERIALIZED_NAME_ALERT_TYPE = "AlertType";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE)
  private AlertType alertType;

  public static final String SERIALIZED_NAME_ALERT_STATUS = "AlertStatus";
  @SerializedName(SERIALIZED_NAME_ALERT_STATUS)
  private AlertStatus alertStatus;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_TIME = "LastModificationTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_TIME)
  private OffsetDateTime lastModificationTime;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public AlertSummary() {
  }

  public AlertSummary alertArn(String alertArn) {
    this.alertArn = alertArn;
    return this;
  }

  /**
   * Get alertArn
   * @return alertArn
   */
  @javax.annotation.Nullable
  public String getAlertArn() {
    return alertArn;
  }

  public void setAlertArn(String alertArn) {
    this.alertArn = alertArn;
  }


  public AlertSummary anomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
    return this;
  }

  /**
   * Get anomalyDetectorArn
   * @return anomalyDetectorArn
   */
  @javax.annotation.Nullable
  public String getAnomalyDetectorArn() {
    return anomalyDetectorArn;
  }

  public void setAnomalyDetectorArn(String anomalyDetectorArn) {
    this.anomalyDetectorArn = anomalyDetectorArn;
  }


  public AlertSummary alertName(String alertName) {
    this.alertName = alertName;
    return this;
  }

  /**
   * Get alertName
   * @return alertName
   */
  @javax.annotation.Nullable
  public String getAlertName() {
    return alertName;
  }

  public void setAlertName(String alertName) {
    this.alertName = alertName;
  }


  public AlertSummary alertSensitivityThreshold(Integer alertSensitivityThreshold) {
    this.alertSensitivityThreshold = alertSensitivityThreshold;
    return this;
  }

  /**
   * Get alertSensitivityThreshold
   * @return alertSensitivityThreshold
   */
  @javax.annotation.Nullable
  public Integer getAlertSensitivityThreshold() {
    return alertSensitivityThreshold;
  }

  public void setAlertSensitivityThreshold(Integer alertSensitivityThreshold) {
    this.alertSensitivityThreshold = alertSensitivityThreshold;
  }


  public AlertSummary alertType(AlertType alertType) {
    this.alertType = alertType;
    return this;
  }

  /**
   * Get alertType
   * @return alertType
   */
  @javax.annotation.Nullable
  public AlertType getAlertType() {
    return alertType;
  }

  public void setAlertType(AlertType alertType) {
    this.alertType = alertType;
  }


  public AlertSummary alertStatus(AlertStatus alertStatus) {
    this.alertStatus = alertStatus;
    return this;
  }

  /**
   * Get alertStatus
   * @return alertStatus
   */
  @javax.annotation.Nullable
  public AlertStatus getAlertStatus() {
    return alertStatus;
  }

  public void setAlertStatus(AlertStatus alertStatus) {
    this.alertStatus = alertStatus;
  }


  public AlertSummary lastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
    return this;
  }

  /**
   * Get lastModificationTime
   * @return lastModificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationTime() {
    return lastModificationTime;
  }

  public void setLastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
  }


  public AlertSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public AlertSummary tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertSummary alertSummary = (AlertSummary) o;
    return Objects.equals(this.alertArn, alertSummary.alertArn) &&
        Objects.equals(this.anomalyDetectorArn, alertSummary.anomalyDetectorArn) &&
        Objects.equals(this.alertName, alertSummary.alertName) &&
        Objects.equals(this.alertSensitivityThreshold, alertSummary.alertSensitivityThreshold) &&
        Objects.equals(this.alertType, alertSummary.alertType) &&
        Objects.equals(this.alertStatus, alertSummary.alertStatus) &&
        Objects.equals(this.lastModificationTime, alertSummary.lastModificationTime) &&
        Objects.equals(this.creationTime, alertSummary.creationTime) &&
        Objects.equals(this.tags, alertSummary.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertArn, anomalyDetectorArn, alertName, alertSensitivityThreshold, alertType, alertStatus, lastModificationTime, creationTime, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertSummary {\n");
    sb.append("    alertArn: ").append(toIndentedString(alertArn)).append("\n");
    sb.append("    anomalyDetectorArn: ").append(toIndentedString(anomalyDetectorArn)).append("\n");
    sb.append("    alertName: ").append(toIndentedString(alertName)).append("\n");
    sb.append("    alertSensitivityThreshold: ").append(toIndentedString(alertSensitivityThreshold)).append("\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    alertStatus: ").append(toIndentedString(alertStatus)).append("\n");
    sb.append("    lastModificationTime: ").append(toIndentedString(lastModificationTime)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlertArn");
    openapiFields.add("AnomalyDetectorArn");
    openapiFields.add("AlertName");
    openapiFields.add("AlertSensitivityThreshold");
    openapiFields.add("AlertType");
    openapiFields.add("AlertStatus");
    openapiFields.add("LastModificationTime");
    openapiFields.add("CreationTime");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertSummary is not found in the empty JSON string", AlertSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AlertArn`
      if (jsonObj.get("AlertArn") != null && !jsonObj.get("AlertArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlertArn"));
      }
      // validate the optional field `AnomalyDetectorArn`
      if (jsonObj.get("AnomalyDetectorArn") != null && !jsonObj.get("AnomalyDetectorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AnomalyDetectorArn"));
      }
      // validate the optional field `AlertName`
      if (jsonObj.get("AlertName") != null && !jsonObj.get("AlertName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlertName"));
      }
      // validate the optional field `AlertSensitivityThreshold`
      if (jsonObj.get("AlertSensitivityThreshold") != null && !jsonObj.get("AlertSensitivityThreshold").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AlertSensitivityThreshold"));
      }
      // validate the optional field `AlertType`
      if (jsonObj.get("AlertType") != null && !jsonObj.get("AlertType").isJsonNull()) {
        AlertType.validateJsonElement(jsonObj.get("AlertType"));
      }
      // validate the optional field `AlertStatus`
      if (jsonObj.get("AlertStatus") != null && !jsonObj.get("AlertStatus").isJsonNull()) {
        AlertStatus.validateJsonElement(jsonObj.get("AlertStatus"));
      }
      // validate the optional field `LastModificationTime`
      if (jsonObj.get("LastModificationTime") != null && !jsonObj.get("LastModificationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModificationTime"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertSummary>() {
           @Override
           public void write(JsonWriter out, AlertSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertSummary
   * @throws IOException if the JSON string is invalid with respect to AlertSummary
   */
  public static AlertSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertSummary.class);
  }

  /**
   * Convert an instance of AlertSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

