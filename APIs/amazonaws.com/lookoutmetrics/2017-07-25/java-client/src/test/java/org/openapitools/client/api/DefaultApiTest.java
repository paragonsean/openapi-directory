/*
 * Amazon Lookout for Metrics
 * This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service with tutorials for getting started, visit <a href=\"https://docs.aws.amazon.com/lookoutmetrics/latest/dev\">Amazon Lookout for Metrics Developer Guide</a>.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivateAnomalyDetectorRequest;
import org.openapitools.client.model.BackTestAnomalyDetectorRequest;
import org.openapitools.client.model.CreateAlertRequest;
import org.openapitools.client.model.CreateAlertResponse;
import org.openapitools.client.model.CreateAnomalyDetectorRequest;
import org.openapitools.client.model.CreateAnomalyDetectorResponse;
import org.openapitools.client.model.CreateMetricSetRequest;
import org.openapitools.client.model.CreateMetricSetResponse;
import org.openapitools.client.model.DeleteAlertRequest;
import org.openapitools.client.model.DeleteAnomalyDetectorRequest;
import org.openapitools.client.model.DescribeAlertRequest;
import org.openapitools.client.model.DescribeAlertResponse;
import org.openapitools.client.model.DescribeAnomalyDetectionExecutionsRequest;
import org.openapitools.client.model.DescribeAnomalyDetectionExecutionsResponse;
import org.openapitools.client.model.DescribeAnomalyDetectorRequest;
import org.openapitools.client.model.DescribeAnomalyDetectorResponse;
import org.openapitools.client.model.DescribeMetricSetRequest;
import org.openapitools.client.model.DescribeMetricSetResponse;
import org.openapitools.client.model.DetectMetricSetConfigRequest;
import org.openapitools.client.model.DetectMetricSetConfigResponse;
import org.openapitools.client.model.GetAnomalyGroupRequest;
import org.openapitools.client.model.GetAnomalyGroupResponse;
import org.openapitools.client.model.GetDataQualityMetricsRequest;
import org.openapitools.client.model.GetDataQualityMetricsResponse;
import org.openapitools.client.model.GetFeedbackRequest;
import org.openapitools.client.model.GetFeedbackResponse;
import org.openapitools.client.model.GetSampleDataRequest;
import org.openapitools.client.model.GetSampleDataResponse;
import org.openapitools.client.model.ListAlertsRequest;
import org.openapitools.client.model.ListAlertsResponse;
import org.openapitools.client.model.ListAnomalyDetectorsRequest;
import org.openapitools.client.model.ListAnomalyDetectorsResponse;
import org.openapitools.client.model.ListAnomalyGroupRelatedMetricsRequest;
import org.openapitools.client.model.ListAnomalyGroupRelatedMetricsResponse;
import org.openapitools.client.model.ListAnomalyGroupSummariesRequest;
import org.openapitools.client.model.ListAnomalyGroupSummariesResponse;
import org.openapitools.client.model.ListAnomalyGroupTimeSeriesRequest;
import org.openapitools.client.model.ListAnomalyGroupTimeSeriesResponse;
import org.openapitools.client.model.ListMetricSetsRequest;
import org.openapitools.client.model.ListMetricSetsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutFeedbackRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAlertRequest;
import org.openapitools.client.model.UpdateAlertResponse;
import org.openapitools.client.model.UpdateAnomalyDetectorRequest;
import org.openapitools.client.model.UpdateAnomalyDetectorResponse;
import org.openapitools.client.model.UpdateMetricSetRequest;
import org.openapitools.client.model.UpdateMetricSetResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Activates an anomaly detector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateAnomalyDetectorTest() throws ApiException {
        ActivateAnomalyDetectorRequest activateAnomalyDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.activateAnomalyDetector(activateAnomalyDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Runs a backtest for anomaly detection for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backTestAnomalyDetectorTest() throws ApiException {
        BackTestAnomalyDetectorRequest backTestAnomalyDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.backTestAnomalyDetector(backTestAnomalyDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an alert for an anomaly detector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAlertTest() throws ApiException {
        CreateAlertRequest createAlertRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAlertResponse response = api.createAlert(createAlertRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an anomaly detector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnomalyDetectorTest() throws ApiException {
        CreateAnomalyDetectorRequest createAnomalyDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAnomalyDetectorResponse response = api.createAnomalyDetector(createAnomalyDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMetricSetTest() throws ApiException {
        CreateMetricSetRequest createMetricSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMetricSetResponse response = api.createMetricSet(createMetricSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deactivates an anomaly detector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateAnomalyDetectorTest() throws ApiException {
        BackTestAnomalyDetectorRequest backTestAnomalyDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deactivateAnomalyDetector(backTestAnomalyDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlertTest() throws ApiException {
        DeleteAlertRequest deleteAlertRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAlert(deleteAlertRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a detector. Deleting an anomaly detector will delete all of its corresponding resources including any configured datasets and alerts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnomalyDetectorTest() throws ApiException {
        DeleteAnomalyDetectorRequest deleteAnomalyDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAnomalyDetector(deleteAnomalyDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes an alert.&lt;/p&gt; &lt;p&gt;Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAlertTest() throws ApiException {
        DescribeAlertRequest describeAlertRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAlertResponse response = api.describeAlert(describeAlertRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the status of the specified anomaly detection jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAnomalyDetectionExecutionsTest() throws ApiException {
        DescribeAnomalyDetectionExecutionsRequest describeAnomalyDetectionExecutionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeAnomalyDetectionExecutionsResponse response = api.describeAnomalyDetectionExecutions(describeAnomalyDetectionExecutionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes a detector.&lt;/p&gt; &lt;p&gt;Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAnomalyDetectorTest() throws ApiException {
        DescribeAnomalyDetectorRequest describeAnomalyDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAnomalyDetectorResponse response = api.describeAnomalyDetector(describeAnomalyDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes a dataset.&lt;/p&gt; &lt;p&gt;Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMetricSetTest() throws ApiException {
        DescribeMetricSetRequest describeMetricSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMetricSetResponse response = api.describeMetricSet(describeMetricSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Detects an Amazon S3 dataset&#39;s file format, interval, and offset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detectMetricSetConfigTest() throws ApiException {
        DetectMetricSetConfigRequest detectMetricSetConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetectMetricSetConfigResponse response = api.detectMetricSetConfig(detectMetricSetConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns details about a group of anomalous metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnomalyGroupTest() throws ApiException {
        GetAnomalyGroupRequest getAnomalyGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAnomalyGroupResponse response = api.getAnomalyGroup(getAnomalyGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns details about the requested data quality metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataQualityMetricsTest() throws ApiException {
        GetDataQualityMetricsRequest getDataQualityMetricsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataQualityMetricsResponse response = api.getDataQualityMetrics(getDataQualityMetricsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get feedback for an anomaly group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedbackTest() throws ApiException {
        GetFeedbackRequest getFeedbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetFeedbackResponse response = api.getFeedback(getFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a selection of sample records from an Amazon S3 datasource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSampleDataTest() throws ApiException {
        GetSampleDataRequest getSampleDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSampleDataResponse response = api.getSampleData(getSampleDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the alerts attached to a detector.&lt;/p&gt; &lt;p&gt;Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAlertsTest() throws ApiException {
        ListAlertsRequest listAlertsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAlertsResponse response = api.listAlerts(listAlertsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the detectors in the current AWS Region.&lt;/p&gt; &lt;p&gt;Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnomalyDetectorsTest() throws ApiException {
        ListAnomalyDetectorsRequest listAnomalyDetectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAnomalyDetectorsResponse response = api.listAnomalyDetectors(listAnomalyDetectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of measures that are potential causes or effects of an anomaly group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnomalyGroupRelatedMetricsTest() throws ApiException {
        ListAnomalyGroupRelatedMetricsRequest listAnomalyGroupRelatedMetricsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAnomalyGroupRelatedMetricsResponse response = api.listAnomalyGroupRelatedMetrics(listAnomalyGroupRelatedMetricsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of anomaly groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnomalyGroupSummariesTest() throws ApiException {
        ListAnomalyGroupSummariesRequest listAnomalyGroupSummariesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAnomalyGroupSummariesResponse response = api.listAnomalyGroupSummaries(listAnomalyGroupSummariesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of anomalous metrics for a measure in an anomaly group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnomalyGroupTimeSeriesTest() throws ApiException {
        ListAnomalyGroupTimeSeriesRequest listAnomalyGroupTimeSeriesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAnomalyGroupTimeSeriesResponse response = api.listAnomalyGroupTimeSeries(listAnomalyGroupTimeSeriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the datasets in the current AWS Region.&lt;/p&gt; &lt;p&gt;Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMetricSetsTest() throws ApiException {
        ListMetricSetsRequest listMetricSetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMetricSetsResponse response = api.listMetricSets(listMetricSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\&quot;&gt;tags&lt;/a&gt; for a detector, dataset, or alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add feedback for an anomalous metric.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putFeedbackTest() throws ApiException {
        PutFeedbackRequest putFeedbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putFeedback(putFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\&quot;&gt;tags&lt;/a&gt; to a detector, dataset, or alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html\&quot;&gt;tags&lt;/a&gt; from a detector, dataset, or alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Make changes to an existing alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAlertTest() throws ApiException {
        UpdateAlertRequest updateAlertRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAlertResponse response = api.updateAlert(updateAlertRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a detector. After activation, you can only change a detector&#39;s ingestion delay and description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnomalyDetectorTest() throws ApiException {
        UpdateAnomalyDetectorRequest updateAnomalyDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAnomalyDetectorResponse response = api.updateAnomalyDetector(updateAnomalyDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMetricSetTest() throws ApiException {
        UpdateMetricSetRequest updateMetricSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMetricSetResponse response = api.updateMetricSet(updateMetricSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
