/*
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DescribeDeviceOutputSoftware;
import org.openapitools.client.model.UnlockState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDeviceOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:38.671198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDeviceOutput {
  public static final String SERIALIZED_NAME_ASSOCIATED_WITH_JOB = "associatedWithJob";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_WITH_JOB)
  private String associatedWithJob;

  public static final String SERIALIZED_NAME_DEVICE_CAPACITIES = "deviceCapacities";
  @SerializedName(SERIALIZED_NAME_DEVICE_CAPACITIES)
  private List deviceCapacities;

  public static final String SERIALIZED_NAME_DEVICE_STATE = "deviceState";
  @SerializedName(SERIALIZED_NAME_DEVICE_STATE)
  private UnlockState deviceState;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private String deviceType;

  public static final String SERIALIZED_NAME_LAST_REACHED_OUT_AT = "lastReachedOutAt";
  @SerializedName(SERIALIZED_NAME_LAST_REACHED_OUT_AT)
  private OffsetDateTime lastReachedOutAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "lastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_MANAGED_DEVICE_ARN = "managedDeviceArn";
  @SerializedName(SERIALIZED_NAME_MANAGED_DEVICE_ARN)
  private String managedDeviceArn;

  public static final String SERIALIZED_NAME_MANAGED_DEVICE_ID = "managedDeviceId";
  @SerializedName(SERIALIZED_NAME_MANAGED_DEVICE_ID)
  private String managedDeviceId;

  public static final String SERIALIZED_NAME_PHYSICAL_NETWORK_INTERFACES = "physicalNetworkInterfaces";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_NETWORK_INTERFACES)
  private List physicalNetworkInterfaces;

  public static final String SERIALIZED_NAME_SOFTWARE = "software";
  @SerializedName(SERIALIZED_NAME_SOFTWARE)
  private DescribeDeviceOutputSoftware software;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public DescribeDeviceOutput() {
  }

  public DescribeDeviceOutput associatedWithJob(String associatedWithJob) {
    this.associatedWithJob = associatedWithJob;
    return this;
  }

  /**
   * Get associatedWithJob
   * @return associatedWithJob
   */
  @javax.annotation.Nullable
  public String getAssociatedWithJob() {
    return associatedWithJob;
  }

  public void setAssociatedWithJob(String associatedWithJob) {
    this.associatedWithJob = associatedWithJob;
  }


  public DescribeDeviceOutput deviceCapacities(List deviceCapacities) {
    this.deviceCapacities = deviceCapacities;
    return this;
  }

  /**
   * Get deviceCapacities
   * @return deviceCapacities
   */
  @javax.annotation.Nullable
  public List getDeviceCapacities() {
    return deviceCapacities;
  }

  public void setDeviceCapacities(List deviceCapacities) {
    this.deviceCapacities = deviceCapacities;
  }


  public DescribeDeviceOutput deviceState(UnlockState deviceState) {
    this.deviceState = deviceState;
    return this;
  }

  /**
   * Get deviceState
   * @return deviceState
   */
  @javax.annotation.Nullable
  public UnlockState getDeviceState() {
    return deviceState;
  }

  public void setDeviceState(UnlockState deviceState) {
    this.deviceState = deviceState;
  }


  public DescribeDeviceOutput deviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Get deviceType
   * @return deviceType
   */
  @javax.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }


  public DescribeDeviceOutput lastReachedOutAt(OffsetDateTime lastReachedOutAt) {
    this.lastReachedOutAt = lastReachedOutAt;
    return this;
  }

  /**
   * Get lastReachedOutAt
   * @return lastReachedOutAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastReachedOutAt() {
    return lastReachedOutAt;
  }

  public void setLastReachedOutAt(OffsetDateTime lastReachedOutAt) {
    this.lastReachedOutAt = lastReachedOutAt;
  }


  public DescribeDeviceOutput lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public DescribeDeviceOutput managedDeviceArn(String managedDeviceArn) {
    this.managedDeviceArn = managedDeviceArn;
    return this;
  }

  /**
   * Get managedDeviceArn
   * @return managedDeviceArn
   */
  @javax.annotation.Nullable
  public String getManagedDeviceArn() {
    return managedDeviceArn;
  }

  public void setManagedDeviceArn(String managedDeviceArn) {
    this.managedDeviceArn = managedDeviceArn;
  }


  public DescribeDeviceOutput managedDeviceId(String managedDeviceId) {
    this.managedDeviceId = managedDeviceId;
    return this;
  }

  /**
   * Get managedDeviceId
   * @return managedDeviceId
   */
  @javax.annotation.Nullable
  public String getManagedDeviceId() {
    return managedDeviceId;
  }

  public void setManagedDeviceId(String managedDeviceId) {
    this.managedDeviceId = managedDeviceId;
  }


  public DescribeDeviceOutput physicalNetworkInterfaces(List physicalNetworkInterfaces) {
    this.physicalNetworkInterfaces = physicalNetworkInterfaces;
    return this;
  }

  /**
   * Get physicalNetworkInterfaces
   * @return physicalNetworkInterfaces
   */
  @javax.annotation.Nullable
  public List getPhysicalNetworkInterfaces() {
    return physicalNetworkInterfaces;
  }

  public void setPhysicalNetworkInterfaces(List physicalNetworkInterfaces) {
    this.physicalNetworkInterfaces = physicalNetworkInterfaces;
  }


  public DescribeDeviceOutput software(DescribeDeviceOutputSoftware software) {
    this.software = software;
    return this;
  }

  /**
   * Get software
   * @return software
   */
  @javax.annotation.Nullable
  public DescribeDeviceOutputSoftware getSoftware() {
    return software;
  }

  public void setSoftware(DescribeDeviceOutputSoftware software) {
    this.software = software;
  }


  public DescribeDeviceOutput tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDeviceOutput describeDeviceOutput = (DescribeDeviceOutput) o;
    return Objects.equals(this.associatedWithJob, describeDeviceOutput.associatedWithJob) &&
        Objects.equals(this.deviceCapacities, describeDeviceOutput.deviceCapacities) &&
        Objects.equals(this.deviceState, describeDeviceOutput.deviceState) &&
        Objects.equals(this.deviceType, describeDeviceOutput.deviceType) &&
        Objects.equals(this.lastReachedOutAt, describeDeviceOutput.lastReachedOutAt) &&
        Objects.equals(this.lastUpdatedAt, describeDeviceOutput.lastUpdatedAt) &&
        Objects.equals(this.managedDeviceArn, describeDeviceOutput.managedDeviceArn) &&
        Objects.equals(this.managedDeviceId, describeDeviceOutput.managedDeviceId) &&
        Objects.equals(this.physicalNetworkInterfaces, describeDeviceOutput.physicalNetworkInterfaces) &&
        Objects.equals(this.software, describeDeviceOutput.software) &&
        Objects.equals(this.tags, describeDeviceOutput.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedWithJob, deviceCapacities, deviceState, deviceType, lastReachedOutAt, lastUpdatedAt, managedDeviceArn, managedDeviceId, physicalNetworkInterfaces, software, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDeviceOutput {\n");
    sb.append("    associatedWithJob: ").append(toIndentedString(associatedWithJob)).append("\n");
    sb.append("    deviceCapacities: ").append(toIndentedString(deviceCapacities)).append("\n");
    sb.append("    deviceState: ").append(toIndentedString(deviceState)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    lastReachedOutAt: ").append(toIndentedString(lastReachedOutAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    managedDeviceArn: ").append(toIndentedString(managedDeviceArn)).append("\n");
    sb.append("    managedDeviceId: ").append(toIndentedString(managedDeviceId)).append("\n");
    sb.append("    physicalNetworkInterfaces: ").append(toIndentedString(physicalNetworkInterfaces)).append("\n");
    sb.append("    software: ").append(toIndentedString(software)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedWithJob");
    openapiFields.add("deviceCapacities");
    openapiFields.add("deviceState");
    openapiFields.add("deviceType");
    openapiFields.add("lastReachedOutAt");
    openapiFields.add("lastUpdatedAt");
    openapiFields.add("managedDeviceArn");
    openapiFields.add("managedDeviceId");
    openapiFields.add("physicalNetworkInterfaces");
    openapiFields.add("software");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDeviceOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDeviceOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDeviceOutput is not found in the empty JSON string", DescribeDeviceOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDeviceOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDeviceOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `associatedWithJob`
      if (jsonObj.get("associatedWithJob") != null && !jsonObj.get("associatedWithJob").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("associatedWithJob"));
      }
      // validate the optional field `deviceCapacities`
      if (jsonObj.get("deviceCapacities") != null && !jsonObj.get("deviceCapacities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("deviceCapacities"));
      }
      // validate the optional field `deviceState`
      if (jsonObj.get("deviceState") != null && !jsonObj.get("deviceState").isJsonNull()) {
        UnlockState.validateJsonElement(jsonObj.get("deviceState"));
      }
      // validate the optional field `deviceType`
      if (jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("deviceType"));
      }
      // validate the optional field `lastReachedOutAt`
      if (jsonObj.get("lastReachedOutAt") != null && !jsonObj.get("lastReachedOutAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastReachedOutAt"));
      }
      // validate the optional field `lastUpdatedAt`
      if (jsonObj.get("lastUpdatedAt") != null && !jsonObj.get("lastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedAt"));
      }
      // validate the optional field `managedDeviceArn`
      if (jsonObj.get("managedDeviceArn") != null && !jsonObj.get("managedDeviceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("managedDeviceArn"));
      }
      // validate the optional field `managedDeviceId`
      if (jsonObj.get("managedDeviceId") != null && !jsonObj.get("managedDeviceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("managedDeviceId"));
      }
      // validate the optional field `physicalNetworkInterfaces`
      if (jsonObj.get("physicalNetworkInterfaces") != null && !jsonObj.get("physicalNetworkInterfaces").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("physicalNetworkInterfaces"));
      }
      // validate the optional field `software`
      if (jsonObj.get("software") != null && !jsonObj.get("software").isJsonNull()) {
        DescribeDeviceOutputSoftware.validateJsonElement(jsonObj.get("software"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDeviceOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDeviceOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDeviceOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDeviceOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDeviceOutput>() {
           @Override
           public void write(JsonWriter out, DescribeDeviceOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDeviceOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDeviceOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDeviceOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeDeviceOutput
   */
  public static DescribeDeviceOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDeviceOutput.class);
  }

  /**
   * Convert an instance of DescribeDeviceOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

