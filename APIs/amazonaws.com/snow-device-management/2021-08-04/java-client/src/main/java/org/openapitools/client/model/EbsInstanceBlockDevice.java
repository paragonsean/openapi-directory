/*
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AttachmentStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a parameter used to set up an Amazon Elastic Block Store (Amazon EBS) volume in a block device mapping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:38.671198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EbsInstanceBlockDevice {
  public static final String SERIALIZED_NAME_ATTACH_TIME = "attachTime";
  @SerializedName(SERIALIZED_NAME_ATTACH_TIME)
  private OffsetDateTime attachTime;

  public static final String SERIALIZED_NAME_DELETE_ON_TERMINATION = "deleteOnTermination";
  @SerializedName(SERIALIZED_NAME_DELETE_ON_TERMINATION)
  private Boolean deleteOnTermination;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AttachmentStatus status;

  public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  public EbsInstanceBlockDevice() {
  }

  public EbsInstanceBlockDevice attachTime(OffsetDateTime attachTime) {
    this.attachTime = attachTime;
    return this;
  }

  /**
   * Get attachTime
   * @return attachTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAttachTime() {
    return attachTime;
  }

  public void setAttachTime(OffsetDateTime attachTime) {
    this.attachTime = attachTime;
  }


  public EbsInstanceBlockDevice deleteOnTermination(Boolean deleteOnTermination) {
    this.deleteOnTermination = deleteOnTermination;
    return this;
  }

  /**
   * Get deleteOnTermination
   * @return deleteOnTermination
   */
  @javax.annotation.Nullable
  public Boolean getDeleteOnTermination() {
    return deleteOnTermination;
  }

  public void setDeleteOnTermination(Boolean deleteOnTermination) {
    this.deleteOnTermination = deleteOnTermination;
  }


  public EbsInstanceBlockDevice status(AttachmentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public AttachmentStatus getStatus() {
    return status;
  }

  public void setStatus(AttachmentStatus status) {
    this.status = status;
  }


  public EbsInstanceBlockDevice volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * Get volumeId
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EbsInstanceBlockDevice ebsInstanceBlockDevice = (EbsInstanceBlockDevice) o;
    return Objects.equals(this.attachTime, ebsInstanceBlockDevice.attachTime) &&
        Objects.equals(this.deleteOnTermination, ebsInstanceBlockDevice.deleteOnTermination) &&
        Objects.equals(this.status, ebsInstanceBlockDevice.status) &&
        Objects.equals(this.volumeId, ebsInstanceBlockDevice.volumeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachTime, deleteOnTermination, status, volumeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EbsInstanceBlockDevice {\n");
    sb.append("    attachTime: ").append(toIndentedString(attachTime)).append("\n");
    sb.append("    deleteOnTermination: ").append(toIndentedString(deleteOnTermination)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachTime");
    openapiFields.add("deleteOnTermination");
    openapiFields.add("status");
    openapiFields.add("volumeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EbsInstanceBlockDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EbsInstanceBlockDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EbsInstanceBlockDevice is not found in the empty JSON string", EbsInstanceBlockDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EbsInstanceBlockDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EbsInstanceBlockDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attachTime`
      if (jsonObj.get("attachTime") != null && !jsonObj.get("attachTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("attachTime"));
      }
      // validate the optional field `deleteOnTermination`
      if (jsonObj.get("deleteOnTermination") != null && !jsonObj.get("deleteOnTermination").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("deleteOnTermination"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        AttachmentStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `volumeId`
      if (jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("volumeId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EbsInstanceBlockDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EbsInstanceBlockDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EbsInstanceBlockDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EbsInstanceBlockDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<EbsInstanceBlockDevice>() {
           @Override
           public void write(JsonWriter out, EbsInstanceBlockDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EbsInstanceBlockDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EbsInstanceBlockDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EbsInstanceBlockDevice
   * @throws IOException if the JSON string is invalid with respect to EbsInstanceBlockDevice
   */
  public static EbsInstanceBlockDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EbsInstanceBlockDevice.class);
  }

  /**
   * Convert an instance of EbsInstanceBlockDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

