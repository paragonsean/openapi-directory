/*
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IpAddressAssignment;
import org.openapitools.client.model.PhysicalConnectorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details about the physical network interface for the device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:38.671198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhysicalNetworkInterface {
  public static final String SERIALIZED_NAME_DEFAULT_GATEWAY = "defaultGateway";
  @SerializedName(SERIALIZED_NAME_DEFAULT_GATEWAY)
  private String defaultGateway;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_IP_ADDRESS_ASSIGNMENT = "ipAddressAssignment";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_ASSIGNMENT)
  private IpAddressAssignment ipAddressAssignment;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "macAddress";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_NETMASK = "netmask";
  @SerializedName(SERIALIZED_NAME_NETMASK)
  private String netmask;

  public static final String SERIALIZED_NAME_PHYSICAL_CONNECTOR_TYPE = "physicalConnectorType";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_CONNECTOR_TYPE)
  private PhysicalConnectorType physicalConnectorType;

  public static final String SERIALIZED_NAME_PHYSICAL_NETWORK_INTERFACE_ID = "physicalNetworkInterfaceId";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_NETWORK_INTERFACE_ID)
  private String physicalNetworkInterfaceId;

  public PhysicalNetworkInterface() {
  }

  public PhysicalNetworkInterface defaultGateway(String defaultGateway) {
    this.defaultGateway = defaultGateway;
    return this;
  }

  /**
   * Get defaultGateway
   * @return defaultGateway
   */
  @javax.annotation.Nullable
  public String getDefaultGateway() {
    return defaultGateway;
  }

  public void setDefaultGateway(String defaultGateway) {
    this.defaultGateway = defaultGateway;
  }


  public PhysicalNetworkInterface ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public PhysicalNetworkInterface ipAddressAssignment(IpAddressAssignment ipAddressAssignment) {
    this.ipAddressAssignment = ipAddressAssignment;
    return this;
  }

  /**
   * Get ipAddressAssignment
   * @return ipAddressAssignment
   */
  @javax.annotation.Nullable
  public IpAddressAssignment getIpAddressAssignment() {
    return ipAddressAssignment;
  }

  public void setIpAddressAssignment(IpAddressAssignment ipAddressAssignment) {
    this.ipAddressAssignment = ipAddressAssignment;
  }


  public PhysicalNetworkInterface macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public PhysicalNetworkInterface netmask(String netmask) {
    this.netmask = netmask;
    return this;
  }

  /**
   * Get netmask
   * @return netmask
   */
  @javax.annotation.Nullable
  public String getNetmask() {
    return netmask;
  }

  public void setNetmask(String netmask) {
    this.netmask = netmask;
  }


  public PhysicalNetworkInterface physicalConnectorType(PhysicalConnectorType physicalConnectorType) {
    this.physicalConnectorType = physicalConnectorType;
    return this;
  }

  /**
   * Get physicalConnectorType
   * @return physicalConnectorType
   */
  @javax.annotation.Nullable
  public PhysicalConnectorType getPhysicalConnectorType() {
    return physicalConnectorType;
  }

  public void setPhysicalConnectorType(PhysicalConnectorType physicalConnectorType) {
    this.physicalConnectorType = physicalConnectorType;
  }


  public PhysicalNetworkInterface physicalNetworkInterfaceId(String physicalNetworkInterfaceId) {
    this.physicalNetworkInterfaceId = physicalNetworkInterfaceId;
    return this;
  }

  /**
   * Get physicalNetworkInterfaceId
   * @return physicalNetworkInterfaceId
   */
  @javax.annotation.Nullable
  public String getPhysicalNetworkInterfaceId() {
    return physicalNetworkInterfaceId;
  }

  public void setPhysicalNetworkInterfaceId(String physicalNetworkInterfaceId) {
    this.physicalNetworkInterfaceId = physicalNetworkInterfaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalNetworkInterface physicalNetworkInterface = (PhysicalNetworkInterface) o;
    return Objects.equals(this.defaultGateway, physicalNetworkInterface.defaultGateway) &&
        Objects.equals(this.ipAddress, physicalNetworkInterface.ipAddress) &&
        Objects.equals(this.ipAddressAssignment, physicalNetworkInterface.ipAddressAssignment) &&
        Objects.equals(this.macAddress, physicalNetworkInterface.macAddress) &&
        Objects.equals(this.netmask, physicalNetworkInterface.netmask) &&
        Objects.equals(this.physicalConnectorType, physicalNetworkInterface.physicalConnectorType) &&
        Objects.equals(this.physicalNetworkInterfaceId, physicalNetworkInterface.physicalNetworkInterfaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultGateway, ipAddress, ipAddressAssignment, macAddress, netmask, physicalConnectorType, physicalNetworkInterfaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalNetworkInterface {\n");
    sb.append("    defaultGateway: ").append(toIndentedString(defaultGateway)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    ipAddressAssignment: ").append(toIndentedString(ipAddressAssignment)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    netmask: ").append(toIndentedString(netmask)).append("\n");
    sb.append("    physicalConnectorType: ").append(toIndentedString(physicalConnectorType)).append("\n");
    sb.append("    physicalNetworkInterfaceId: ").append(toIndentedString(physicalNetworkInterfaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultGateway");
    openapiFields.add("ipAddress");
    openapiFields.add("ipAddressAssignment");
    openapiFields.add("macAddress");
    openapiFields.add("netmask");
    openapiFields.add("physicalConnectorType");
    openapiFields.add("physicalNetworkInterfaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhysicalNetworkInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhysicalNetworkInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhysicalNetworkInterface is not found in the empty JSON string", PhysicalNetworkInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhysicalNetworkInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhysicalNetworkInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultGateway`
      if (jsonObj.get("defaultGateway") != null && !jsonObj.get("defaultGateway").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultGateway"));
      }
      // validate the optional field `ipAddress`
      if (jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ipAddress"));
      }
      // validate the optional field `ipAddressAssignment`
      if (jsonObj.get("ipAddressAssignment") != null && !jsonObj.get("ipAddressAssignment").isJsonNull()) {
        IpAddressAssignment.validateJsonElement(jsonObj.get("ipAddressAssignment"));
      }
      // validate the optional field `macAddress`
      if (jsonObj.get("macAddress") != null && !jsonObj.get("macAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("macAddress"));
      }
      // validate the optional field `netmask`
      if (jsonObj.get("netmask") != null && !jsonObj.get("netmask").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("netmask"));
      }
      // validate the optional field `physicalConnectorType`
      if (jsonObj.get("physicalConnectorType") != null && !jsonObj.get("physicalConnectorType").isJsonNull()) {
        PhysicalConnectorType.validateJsonElement(jsonObj.get("physicalConnectorType"));
      }
      // validate the optional field `physicalNetworkInterfaceId`
      if (jsonObj.get("physicalNetworkInterfaceId") != null && !jsonObj.get("physicalNetworkInterfaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("physicalNetworkInterfaceId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhysicalNetworkInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhysicalNetworkInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhysicalNetworkInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhysicalNetworkInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<PhysicalNetworkInterface>() {
           @Override
           public void write(JsonWriter out, PhysicalNetworkInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhysicalNetworkInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhysicalNetworkInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhysicalNetworkInterface
   * @throws IOException if the JSON string is invalid with respect to PhysicalNetworkInterface
   */
  public static PhysicalNetworkInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhysicalNetworkInterface.class);
  }

  /**
   * Convert an instance of PhysicalNetworkInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

