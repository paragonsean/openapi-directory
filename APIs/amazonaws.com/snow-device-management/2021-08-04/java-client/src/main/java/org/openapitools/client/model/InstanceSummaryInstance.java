/*
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstanceCpuOptions;
import org.openapitools.client.model.InstanceState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InstanceSummaryInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:38.671198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceSummaryInstance {
  public static final String SERIALIZED_NAME_AMI_LAUNCH_INDEX = "amiLaunchIndex";
  @SerializedName(SERIALIZED_NAME_AMI_LAUNCH_INDEX)
  private Integer amiLaunchIndex;

  public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPINGS = "blockDeviceMappings";
  @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPINGS)
  private List blockDeviceMappings;

  public static final String SERIALIZED_NAME_CPU_OPTIONS = "cpuOptions";
  @SerializedName(SERIALIZED_NAME_CPU_OPTIONS)
  private InstanceCpuOptions cpuOptions;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_PRIVATE_IP_ADDRESS = "privateIpAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ADDRESS)
  private String privateIpAddress;

  public static final String SERIALIZED_NAME_PUBLIC_IP_ADDRESS = "publicIpAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ADDRESS)
  private String publicIpAddress;

  public static final String SERIALIZED_NAME_ROOT_DEVICE_NAME = "rootDeviceName";
  @SerializedName(SERIALIZED_NAME_ROOT_DEVICE_NAME)
  private String rootDeviceName;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "securityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List securityGroups;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private InstanceState state;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public InstanceSummaryInstance() {
  }

  public InstanceSummaryInstance amiLaunchIndex(Integer amiLaunchIndex) {
    this.amiLaunchIndex = amiLaunchIndex;
    return this;
  }

  /**
   * Get amiLaunchIndex
   * @return amiLaunchIndex
   */
  @javax.annotation.Nullable
  public Integer getAmiLaunchIndex() {
    return amiLaunchIndex;
  }

  public void setAmiLaunchIndex(Integer amiLaunchIndex) {
    this.amiLaunchIndex = amiLaunchIndex;
  }


  public InstanceSummaryInstance blockDeviceMappings(List blockDeviceMappings) {
    this.blockDeviceMappings = blockDeviceMappings;
    return this;
  }

  /**
   * Get blockDeviceMappings
   * @return blockDeviceMappings
   */
  @javax.annotation.Nullable
  public List getBlockDeviceMappings() {
    return blockDeviceMappings;
  }

  public void setBlockDeviceMappings(List blockDeviceMappings) {
    this.blockDeviceMappings = blockDeviceMappings;
  }


  public InstanceSummaryInstance cpuOptions(InstanceCpuOptions cpuOptions) {
    this.cpuOptions = cpuOptions;
    return this;
  }

  /**
   * Get cpuOptions
   * @return cpuOptions
   */
  @javax.annotation.Nullable
  public InstanceCpuOptions getCpuOptions() {
    return cpuOptions;
  }

  public void setCpuOptions(InstanceCpuOptions cpuOptions) {
    this.cpuOptions = cpuOptions;
  }


  public InstanceSummaryInstance createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public InstanceSummaryInstance imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Get imageId
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public InstanceSummaryInstance instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public InstanceSummaryInstance instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public InstanceSummaryInstance privateIpAddress(String privateIpAddress) {
    this.privateIpAddress = privateIpAddress;
    return this;
  }

  /**
   * Get privateIpAddress
   * @return privateIpAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIpAddress() {
    return privateIpAddress;
  }

  public void setPrivateIpAddress(String privateIpAddress) {
    this.privateIpAddress = privateIpAddress;
  }


  public InstanceSummaryInstance publicIpAddress(String publicIpAddress) {
    this.publicIpAddress = publicIpAddress;
    return this;
  }

  /**
   * Get publicIpAddress
   * @return publicIpAddress
   */
  @javax.annotation.Nullable
  public String getPublicIpAddress() {
    return publicIpAddress;
  }

  public void setPublicIpAddress(String publicIpAddress) {
    this.publicIpAddress = publicIpAddress;
  }


  public InstanceSummaryInstance rootDeviceName(String rootDeviceName) {
    this.rootDeviceName = rootDeviceName;
    return this;
  }

  /**
   * Get rootDeviceName
   * @return rootDeviceName
   */
  @javax.annotation.Nullable
  public String getRootDeviceName() {
    return rootDeviceName;
  }

  public void setRootDeviceName(String rootDeviceName) {
    this.rootDeviceName = rootDeviceName;
  }


  public InstanceSummaryInstance securityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  /**
   * Get securityGroups
   * @return securityGroups
   */
  @javax.annotation.Nullable
  public List getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
  }


  public InstanceSummaryInstance state(InstanceState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public InstanceState getState() {
    return state;
  }

  public void setState(InstanceState state) {
    this.state = state;
  }


  public InstanceSummaryInstance updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceSummaryInstance instanceSummaryInstance = (InstanceSummaryInstance) o;
    return Objects.equals(this.amiLaunchIndex, instanceSummaryInstance.amiLaunchIndex) &&
        Objects.equals(this.blockDeviceMappings, instanceSummaryInstance.blockDeviceMappings) &&
        Objects.equals(this.cpuOptions, instanceSummaryInstance.cpuOptions) &&
        Objects.equals(this.createdAt, instanceSummaryInstance.createdAt) &&
        Objects.equals(this.imageId, instanceSummaryInstance.imageId) &&
        Objects.equals(this.instanceId, instanceSummaryInstance.instanceId) &&
        Objects.equals(this.instanceType, instanceSummaryInstance.instanceType) &&
        Objects.equals(this.privateIpAddress, instanceSummaryInstance.privateIpAddress) &&
        Objects.equals(this.publicIpAddress, instanceSummaryInstance.publicIpAddress) &&
        Objects.equals(this.rootDeviceName, instanceSummaryInstance.rootDeviceName) &&
        Objects.equals(this.securityGroups, instanceSummaryInstance.securityGroups) &&
        Objects.equals(this.state, instanceSummaryInstance.state) &&
        Objects.equals(this.updatedAt, instanceSummaryInstance.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amiLaunchIndex, blockDeviceMappings, cpuOptions, createdAt, imageId, instanceId, instanceType, privateIpAddress, publicIpAddress, rootDeviceName, securityGroups, state, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceSummaryInstance {\n");
    sb.append("    amiLaunchIndex: ").append(toIndentedString(amiLaunchIndex)).append("\n");
    sb.append("    blockDeviceMappings: ").append(toIndentedString(blockDeviceMappings)).append("\n");
    sb.append("    cpuOptions: ").append(toIndentedString(cpuOptions)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    privateIpAddress: ").append(toIndentedString(privateIpAddress)).append("\n");
    sb.append("    publicIpAddress: ").append(toIndentedString(publicIpAddress)).append("\n");
    sb.append("    rootDeviceName: ").append(toIndentedString(rootDeviceName)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amiLaunchIndex");
    openapiFields.add("blockDeviceMappings");
    openapiFields.add("cpuOptions");
    openapiFields.add("createdAt");
    openapiFields.add("imageId");
    openapiFields.add("instanceId");
    openapiFields.add("instanceType");
    openapiFields.add("privateIpAddress");
    openapiFields.add("publicIpAddress");
    openapiFields.add("rootDeviceName");
    openapiFields.add("securityGroups");
    openapiFields.add("state");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceSummaryInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceSummaryInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceSummaryInstance is not found in the empty JSON string", InstanceSummaryInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceSummaryInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceSummaryInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amiLaunchIndex`
      if (jsonObj.get("amiLaunchIndex") != null && !jsonObj.get("amiLaunchIndex").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("amiLaunchIndex"));
      }
      // validate the optional field `blockDeviceMappings`
      if (jsonObj.get("blockDeviceMappings") != null && !jsonObj.get("blockDeviceMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("blockDeviceMappings"));
      }
      // validate the optional field `cpuOptions`
      if (jsonObj.get("cpuOptions") != null && !jsonObj.get("cpuOptions").isJsonNull()) {
        InstanceCpuOptions.validateJsonElement(jsonObj.get("cpuOptions"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `imageId`
      if (jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageId"));
      }
      // validate the optional field `instanceId`
      if (jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("instanceId"));
      }
      // validate the optional field `instanceType`
      if (jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("instanceType"));
      }
      // validate the optional field `privateIpAddress`
      if (jsonObj.get("privateIpAddress") != null && !jsonObj.get("privateIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("privateIpAddress"));
      }
      // validate the optional field `publicIpAddress`
      if (jsonObj.get("publicIpAddress") != null && !jsonObj.get("publicIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("publicIpAddress"));
      }
      // validate the optional field `rootDeviceName`
      if (jsonObj.get("rootDeviceName") != null && !jsonObj.get("rootDeviceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rootDeviceName"));
      }
      // validate the optional field `securityGroups`
      if (jsonObj.get("securityGroups") != null && !jsonObj.get("securityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("securityGroups"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        InstanceState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceSummaryInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceSummaryInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceSummaryInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceSummaryInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceSummaryInstance>() {
           @Override
           public void write(JsonWriter out, InstanceSummaryInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceSummaryInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceSummaryInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceSummaryInstance
   * @throws IOException if the JSON string is invalid with respect to InstanceSummaryInstance
   */
  public static InstanceSummaryInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceSummaryInstance.class);
  }

  /**
   * Convert an instance of InstanceSummaryInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

