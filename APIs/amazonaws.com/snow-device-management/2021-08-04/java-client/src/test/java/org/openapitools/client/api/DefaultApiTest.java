/*
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelTaskOutput;
import org.openapitools.client.model.CreateTaskOutput;
import org.openapitools.client.model.CreateTaskRequest;
import org.openapitools.client.model.DescribeDeviceEc2InstancesRequest;
import org.openapitools.client.model.DescribeDeviceEc2Output;
import org.openapitools.client.model.DescribeDeviceOutput;
import org.openapitools.client.model.DescribeExecutionOutput;
import org.openapitools.client.model.DescribeTaskOutput;
import org.openapitools.client.model.ListDeviceResourcesOutput;
import org.openapitools.client.model.ListDevicesOutput;
import org.openapitools.client.model.ListExecutionsOutput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.ListTasksOutput;
import org.openapitools.client.model.TagResourceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Sends a cancel request for a specified task. You can cancel a task only if it&#39;s still in a &lt;code&gt;QUEUED&lt;/code&gt; state. Tasks that are already running can&#39;t be cancelled.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A task might still run if it&#39;s processed from the queue before the &lt;code&gt;CancelTask&lt;/code&gt; operation changes the task&#39;s state.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelTaskTest() throws ApiException {
        String taskId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelTaskOutput response = api.cancelTask(taskId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Instructs one or more devices to start a task, such as unlocking or rebooting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskTest() throws ApiException {
        CreateTaskRequest createTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTaskOutput response = api.createTask(createTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Checks device-specific information, such as the device type, software version, IP addresses, and lock status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDeviceTest() throws ApiException {
        String managedDeviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDeviceOutput response = api.describeDevice(managedDeviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Checks the current state of the Amazon EC2 instances. The output is similar to &lt;code&gt;describeDevice&lt;/code&gt;, but the results are sourced from the device cache in the Amazon Web Services Cloud and include a subset of the available fields. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDeviceEc2InstancesTest() throws ApiException {
        String managedDeviceId = null;
        DescribeDeviceEc2InstancesRequest describeDeviceEc2InstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDeviceEc2Output response = api.describeDeviceEc2Instances(managedDeviceId, describeDeviceEc2InstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Checks the status of a remote task running on one or more target devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeExecutionTest() throws ApiException {
        String managedDeviceId = null;
        String taskId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeExecutionOutput response = api.describeExecution(managedDeviceId, taskId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Checks the metadata for a given task on a device. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTaskTest() throws ApiException {
        String taskId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTaskOutput response = api.describeTask(taskId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of the Amazon Web Services resources available for a device. Currently, Amazon EC2 instances are the only supported resource type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeviceResourcesTest() throws ApiException {
        String managedDeviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String type = null;
        ListDeviceResourcesOutput response = api.listDeviceResources(managedDeviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, type);
        // TODO: test validations
    }

    /**
     * Returns a list of all devices on your Amazon Web Services account that have Amazon Web Services Snow Device Management enabled in the Amazon Web Services Region where the command is run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String jobId = null;
        Integer maxResults = null;
        String nextToken = null;
        ListDevicesOutput response = api.listDevices(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, jobId, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the status of tasks for one or more target devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExecutionsTest() throws ApiException {
        String taskId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String state = null;
        ListExecutionsOutput response = api.listExecutions(taskId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, state);
        // TODO: test validations
    }

    /**
     * Returns a list of tags for a managed device or task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceOutput response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of tasks that can be filtered by state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTasksTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String state = null;
        ListTasksOutput response = api.listTasks(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, state);
        // TODO: test validations
    }

    /**
     * Adds or replaces tags on a device or task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a tag from a device or task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
