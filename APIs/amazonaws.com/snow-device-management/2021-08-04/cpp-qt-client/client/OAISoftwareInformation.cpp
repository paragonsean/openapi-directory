/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareInformation::OAISoftwareInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareInformation::OAISoftwareInformation() {
    this->initializeModel();
}

OAISoftwareInformation::~OAISoftwareInformation() {}

void OAISoftwareInformation::initializeModel() {

    m_install_state_isSet = false;
    m_install_state_isValid = false;

    m_installed_version_isSet = false;
    m_installed_version_isValid = false;

    m_installing_version_isSet = false;
    m_installing_version_isValid = false;
}

void OAISoftwareInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareInformation::fromJsonObject(QJsonObject json) {

    m_install_state_isValid = ::OpenAPI::fromJsonValue(m_install_state, json[QString("installState")]);
    m_install_state_isSet = !json[QString("installState")].isNull() && m_install_state_isValid;

    m_installed_version_isValid = ::OpenAPI::fromJsonValue(m_installed_version, json[QString("installedVersion")]);
    m_installed_version_isSet = !json[QString("installedVersion")].isNull() && m_installed_version_isValid;

    m_installing_version_isValid = ::OpenAPI::fromJsonValue(m_installing_version, json[QString("installingVersion")]);
    m_installing_version_isSet = !json[QString("installingVersion")].isNull() && m_installing_version_isValid;
}

QString OAISoftwareInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_install_state_isSet) {
        obj.insert(QString("installState"), ::OpenAPI::toJsonValue(m_install_state));
    }
    if (m_installed_version_isSet) {
        obj.insert(QString("installedVersion"), ::OpenAPI::toJsonValue(m_installed_version));
    }
    if (m_installing_version_isSet) {
        obj.insert(QString("installingVersion"), ::OpenAPI::toJsonValue(m_installing_version));
    }
    return obj;
}

QString OAISoftwareInformation::getInstallState() const {
    return m_install_state;
}
void OAISoftwareInformation::setInstallState(const QString &install_state) {
    m_install_state = install_state;
    m_install_state_isSet = true;
}

bool OAISoftwareInformation::is_install_state_Set() const{
    return m_install_state_isSet;
}

bool OAISoftwareInformation::is_install_state_Valid() const{
    return m_install_state_isValid;
}

QString OAISoftwareInformation::getInstalledVersion() const {
    return m_installed_version;
}
void OAISoftwareInformation::setInstalledVersion(const QString &installed_version) {
    m_installed_version = installed_version;
    m_installed_version_isSet = true;
}

bool OAISoftwareInformation::is_installed_version_Set() const{
    return m_installed_version_isSet;
}

bool OAISoftwareInformation::is_installed_version_Valid() const{
    return m_installed_version_isValid;
}

QString OAISoftwareInformation::getInstallingVersion() const {
    return m_installing_version;
}
void OAISoftwareInformation::setInstallingVersion(const QString &installing_version) {
    m_installing_version = installing_version;
    m_installing_version_isSet = true;
}

bool OAISoftwareInformation::is_installing_version_Set() const{
    return m_installing_version_isSet;
}

bool OAISoftwareInformation::is_installing_version_Valid() const{
    return m_installing_version_isValid;
}

bool OAISoftwareInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_install_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installing_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
