/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeDeviceOutput.h
 *
 * 
 */

#ifndef OAIDescribeDeviceOutput_H
#define OAIDescribeDeviceOutput_H

#include <QJsonObject>

#include "OAIDescribeDeviceOutput_software.h"
#include "OAIUnlockState.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeDeviceOutput_software;

class OAIDescribeDeviceOutput : public OAIObject {
public:
    OAIDescribeDeviceOutput();
    OAIDescribeDeviceOutput(QString json);
    ~OAIDescribeDeviceOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssociatedWithJob() const;
    void setAssociatedWithJob(const QString &associated_with_job);
    bool is_associated_with_job_Set() const;
    bool is_associated_with_job_Valid() const;

    QList getDeviceCapacities() const;
    void setDeviceCapacities(const QList &device_capacities);
    bool is_device_capacities_Set() const;
    bool is_device_capacities_Valid() const;

    OAIUnlockState getDeviceState() const;
    void setDeviceState(const OAIUnlockState &device_state);
    bool is_device_state_Set() const;
    bool is_device_state_Valid() const;

    QString getDeviceType() const;
    void setDeviceType(const QString &device_type);
    bool is_device_type_Set() const;
    bool is_device_type_Valid() const;

    QDateTime getLastReachedOutAt() const;
    void setLastReachedOutAt(const QDateTime &last_reached_out_at);
    bool is_last_reached_out_at_Set() const;
    bool is_last_reached_out_at_Valid() const;

    QDateTime getLastUpdatedAt() const;
    void setLastUpdatedAt(const QDateTime &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    QString getManagedDeviceArn() const;
    void setManagedDeviceArn(const QString &managed_device_arn);
    bool is_managed_device_arn_Set() const;
    bool is_managed_device_arn_Valid() const;

    QString getManagedDeviceId() const;
    void setManagedDeviceId(const QString &managed_device_id);
    bool is_managed_device_id_Set() const;
    bool is_managed_device_id_Valid() const;

    QList getPhysicalNetworkInterfaces() const;
    void setPhysicalNetworkInterfaces(const QList &physical_network_interfaces);
    bool is_physical_network_interfaces_Set() const;
    bool is_physical_network_interfaces_Valid() const;

    OAIDescribeDeviceOutput_software getSoftware() const;
    void setSoftware(const OAIDescribeDeviceOutput_software &software);
    bool is_software_Set() const;
    bool is_software_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_associated_with_job;
    bool m_associated_with_job_isSet;
    bool m_associated_with_job_isValid;

    QList m_device_capacities;
    bool m_device_capacities_isSet;
    bool m_device_capacities_isValid;

    OAIUnlockState m_device_state;
    bool m_device_state_isSet;
    bool m_device_state_isValid;

    QString m_device_type;
    bool m_device_type_isSet;
    bool m_device_type_isValid;

    QDateTime m_last_reached_out_at;
    bool m_last_reached_out_at_isSet;
    bool m_last_reached_out_at_isValid;

    QDateTime m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;

    QString m_managed_device_arn;
    bool m_managed_device_arn_isSet;
    bool m_managed_device_arn_isValid;

    QString m_managed_device_id;
    bool m_managed_device_id_isSet;
    bool m_managed_device_id_isValid;

    QList m_physical_network_interfaces;
    bool m_physical_network_interfaces_isSet;
    bool m_physical_network_interfaces_isValid;

    OAIDescribeDeviceOutput_software m_software;
    bool m_software_isSet;
    bool m_software_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeDeviceOutput)

#endif // OAIDescribeDeviceOutput_H
