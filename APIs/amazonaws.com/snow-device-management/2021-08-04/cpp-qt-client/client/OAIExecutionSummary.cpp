/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionSummary::OAIExecutionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionSummary::OAIExecutionSummary() {
    this->initializeModel();
}

OAIExecutionSummary::~OAIExecutionSummary() {}

void OAIExecutionSummary::initializeModel() {

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_managed_device_id_isSet = false;
    m_managed_device_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAIExecutionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionSummary::fromJsonObject(QJsonObject json) {

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_managed_device_id_isValid = ::OpenAPI::fromJsonValue(m_managed_device_id, json[QString("managedDeviceId")]);
    m_managed_device_id_isSet = !json[QString("managedDeviceId")].isNull() && m_managed_device_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;
}

QString OAIExecutionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_managed_device_id_isSet) {
        obj.insert(QString("managedDeviceId"), ::OpenAPI::toJsonValue(m_managed_device_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

QString OAIExecutionSummary::getExecutionId() const {
    return m_execution_id;
}
void OAIExecutionSummary::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIExecutionSummary::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIExecutionSummary::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

QString OAIExecutionSummary::getManagedDeviceId() const {
    return m_managed_device_id;
}
void OAIExecutionSummary::setManagedDeviceId(const QString &managed_device_id) {
    m_managed_device_id = managed_device_id;
    m_managed_device_id_isSet = true;
}

bool OAIExecutionSummary::is_managed_device_id_Set() const{
    return m_managed_device_id_isSet;
}

bool OAIExecutionSummary::is_managed_device_id_Valid() const{
    return m_managed_device_id_isValid;
}

OAIExecutionState OAIExecutionSummary::getState() const {
    return m_state;
}
void OAIExecutionSummary::setState(const OAIExecutionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExecutionSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExecutionSummary::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIExecutionSummary::getTaskId() const {
    return m_task_id;
}
void OAIExecutionSummary::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIExecutionSummary::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIExecutionSummary::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAIExecutionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
