/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceStateName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceStateName::OAIInstanceStateName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceStateName::OAIInstanceStateName() {
    this->initializeModel();
}

OAIInstanceStateName::~OAIInstanceStateName() {}

void OAIInstanceStateName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInstanceStateName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInstanceStateName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInstanceStateName::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInstanceStateName::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHUTTING_DOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInstanceStateName::SHUTTING_DOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERMINATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInstanceStateName::TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInstanceStateName::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInstanceStateName::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInstanceStateName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInstanceStateName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInstanceStateName::PENDING:
            val = "PENDING";
            break;
        case eOAIInstanceStateName::RUNNING:
            val = "RUNNING";
            break;
        case eOAIInstanceStateName::SHUTTING_DOWN:
            val = "SHUTTING_DOWN";
            break;
        case eOAIInstanceStateName::TERMINATED:
            val = "TERMINATED";
            break;
        case eOAIInstanceStateName::STOPPING:
            val = "STOPPING";
            break;
        case eOAIInstanceStateName::STOPPED:
            val = "STOPPED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInstanceStateName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInstanceStateName::eOAIInstanceStateName OAIInstanceStateName::getValue() const {
    return m_value;
}

void OAIInstanceStateName::setValue(const OAIInstanceStateName::eOAIInstanceStateName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInstanceStateName::isSet() const {
    
    return m_value_isSet;
}

bool OAIInstanceStateName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
