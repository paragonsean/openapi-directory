/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICpuOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICpuOptions::OAICpuOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICpuOptions::OAICpuOptions() {
    this->initializeModel();
}

OAICpuOptions::~OAICpuOptions() {}

void OAICpuOptions::initializeModel() {

    m_core_count_isSet = false;
    m_core_count_isValid = false;

    m_threads_per_core_isSet = false;
    m_threads_per_core_isValid = false;
}

void OAICpuOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICpuOptions::fromJsonObject(QJsonObject json) {

    m_core_count_isValid = ::OpenAPI::fromJsonValue(m_core_count, json[QString("coreCount")]);
    m_core_count_isSet = !json[QString("coreCount")].isNull() && m_core_count_isValid;

    m_threads_per_core_isValid = ::OpenAPI::fromJsonValue(m_threads_per_core, json[QString("threadsPerCore")]);
    m_threads_per_core_isSet = !json[QString("threadsPerCore")].isNull() && m_threads_per_core_isValid;
}

QString OAICpuOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICpuOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_core_count_isSet) {
        obj.insert(QString("coreCount"), ::OpenAPI::toJsonValue(m_core_count));
    }
    if (m_threads_per_core_isSet) {
        obj.insert(QString("threadsPerCore"), ::OpenAPI::toJsonValue(m_threads_per_core));
    }
    return obj;
}

qint32 OAICpuOptions::getCoreCount() const {
    return m_core_count;
}
void OAICpuOptions::setCoreCount(const qint32 &core_count) {
    m_core_count = core_count;
    m_core_count_isSet = true;
}

bool OAICpuOptions::is_core_count_Set() const{
    return m_core_count_isSet;
}

bool OAICpuOptions::is_core_count_Valid() const{
    return m_core_count_isValid;
}

qint32 OAICpuOptions::getThreadsPerCore() const {
    return m_threads_per_core;
}
void OAICpuOptions::setThreadsPerCore(const qint32 &threads_per_core) {
    m_threads_per_core = threads_per_core;
    m_threads_per_core_isSet = true;
}

bool OAICpuOptions::is_threads_per_core_Set() const{
    return m_threads_per_core_isSet;
}

bool OAICpuOptions::is_threads_per_core_Valid() const{
    return m_threads_per_core_isValid;
}

bool OAICpuOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_core_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threads_per_core_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICpuOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
