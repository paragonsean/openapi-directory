/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEbsInstanceBlockDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEbsInstanceBlockDevice::OAIEbsInstanceBlockDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEbsInstanceBlockDevice::OAIEbsInstanceBlockDevice() {
    this->initializeModel();
}

OAIEbsInstanceBlockDevice::~OAIEbsInstanceBlockDevice() {}

void OAIEbsInstanceBlockDevice::initializeModel() {

    m_attach_time_isSet = false;
    m_attach_time_isValid = false;

    m_delete_on_termination_isSet = false;
    m_delete_on_termination_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAIEbsInstanceBlockDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEbsInstanceBlockDevice::fromJsonObject(QJsonObject json) {

    m_attach_time_isValid = ::OpenAPI::fromJsonValue(m_attach_time, json[QString("attachTime")]);
    m_attach_time_isSet = !json[QString("attachTime")].isNull() && m_attach_time_isValid;

    m_delete_on_termination_isValid = ::OpenAPI::fromJsonValue(m_delete_on_termination, json[QString("deleteOnTermination")]);
    m_delete_on_termination_isSet = !json[QString("deleteOnTermination")].isNull() && m_delete_on_termination_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;
}

QString OAIEbsInstanceBlockDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEbsInstanceBlockDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_attach_time_isSet) {
        obj.insert(QString("attachTime"), ::OpenAPI::toJsonValue(m_attach_time));
    }
    if (m_delete_on_termination_isSet) {
        obj.insert(QString("deleteOnTermination"), ::OpenAPI::toJsonValue(m_delete_on_termination));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

QDateTime OAIEbsInstanceBlockDevice::getAttachTime() const {
    return m_attach_time;
}
void OAIEbsInstanceBlockDevice::setAttachTime(const QDateTime &attach_time) {
    m_attach_time = attach_time;
    m_attach_time_isSet = true;
}

bool OAIEbsInstanceBlockDevice::is_attach_time_Set() const{
    return m_attach_time_isSet;
}

bool OAIEbsInstanceBlockDevice::is_attach_time_Valid() const{
    return m_attach_time_isValid;
}

bool OAIEbsInstanceBlockDevice::getDeleteOnTermination() const {
    return m_delete_on_termination;
}
void OAIEbsInstanceBlockDevice::setDeleteOnTermination(const bool &delete_on_termination) {
    m_delete_on_termination = delete_on_termination;
    m_delete_on_termination_isSet = true;
}

bool OAIEbsInstanceBlockDevice::is_delete_on_termination_Set() const{
    return m_delete_on_termination_isSet;
}

bool OAIEbsInstanceBlockDevice::is_delete_on_termination_Valid() const{
    return m_delete_on_termination_isValid;
}

OAIAttachmentStatus OAIEbsInstanceBlockDevice::getStatus() const {
    return m_status;
}
void OAIEbsInstanceBlockDevice::setStatus(const OAIAttachmentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEbsInstanceBlockDevice::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEbsInstanceBlockDevice::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEbsInstanceBlockDevice::getVolumeId() const {
    return m_volume_id;
}
void OAIEbsInstanceBlockDevice::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIEbsInstanceBlockDevice::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIEbsInstanceBlockDevice::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAIEbsInstanceBlockDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attach_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_on_termination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEbsInstanceBlockDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
