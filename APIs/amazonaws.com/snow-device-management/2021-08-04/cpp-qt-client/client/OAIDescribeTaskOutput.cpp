/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTaskOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTaskOutput::OAIDescribeTaskOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTaskOutput::OAIDescribeTaskOutput() {
    this->initializeModel();
}

OAIDescribeTaskOutput::~OAIDescribeTaskOutput() {}

void OAIDescribeTaskOutput::initializeModel() {

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_task_arn_isSet = false;
    m_task_arn_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAIDescribeTaskOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTaskOutput::fromJsonObject(QJsonObject json) {

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_task_arn_isValid = ::OpenAPI::fromJsonValue(m_task_arn, json[QString("taskArn")]);
    m_task_arn_isSet = !json[QString("taskArn")].isNull() && m_task_arn_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;
}

QString OAIDescribeTaskOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTaskOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_task_arn_isSet) {
        obj.insert(QString("taskArn"), ::OpenAPI::toJsonValue(m_task_arn));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

QDateTime OAIDescribeTaskOutput::getCompletedAt() const {
    return m_completed_at;
}
void OAIDescribeTaskOutput::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIDescribeTaskOutput::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIDescribeTaskOutput::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QDateTime OAIDescribeTaskOutput::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeTaskOutput::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeTaskOutput::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeTaskOutput::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDescribeTaskOutput::getDescription() const {
    return m_description;
}
void OAIDescribeTaskOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeTaskOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeTaskOutput::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIDescribeTaskOutput::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIDescribeTaskOutput::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIDescribeTaskOutput::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIDescribeTaskOutput::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

OAITaskState OAIDescribeTaskOutput::getState() const {
    return m_state;
}
void OAIDescribeTaskOutput::setState(const OAITaskState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeTaskOutput::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeTaskOutput::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAIDescribeTaskOutput::getTags() const {
    return m_tags;
}
void OAIDescribeTaskOutput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeTaskOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeTaskOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIDescribeTaskOutput::getTargets() const {
    return m_targets;
}
void OAIDescribeTaskOutput::setTargets(const QList &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIDescribeTaskOutput::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIDescribeTaskOutput::is_targets_Valid() const{
    return m_targets_isValid;
}

QString OAIDescribeTaskOutput::getTaskArn() const {
    return m_task_arn;
}
void OAIDescribeTaskOutput::setTaskArn(const QString &task_arn) {
    m_task_arn = task_arn;
    m_task_arn_isSet = true;
}

bool OAIDescribeTaskOutput::is_task_arn_Set() const{
    return m_task_arn_isSet;
}

bool OAIDescribeTaskOutput::is_task_arn_Valid() const{
    return m_task_arn_isValid;
}

QString OAIDescribeTaskOutput::getTaskId() const {
    return m_task_id;
}
void OAIDescribeTaskOutput::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIDescribeTaskOutput::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIDescribeTaskOutput::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAIDescribeTaskOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTaskOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
