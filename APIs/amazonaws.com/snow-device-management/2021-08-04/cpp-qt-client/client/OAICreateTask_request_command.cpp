/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTask_request_command.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTask_request_command::OAICreateTask_request_command(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTask_request_command::OAICreateTask_request_command() {
    this->initializeModel();
}

OAICreateTask_request_command::~OAICreateTask_request_command() {}

void OAICreateTask_request_command::initializeModel() {

    m_reboot_isSet = false;
    m_reboot_isValid = false;

    m_unlock_isSet = false;
    m_unlock_isValid = false;
}

void OAICreateTask_request_command::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTask_request_command::fromJsonObject(QJsonObject json) {

    m_reboot_isValid = ::OpenAPI::fromJsonValue(m_reboot, json[QString("reboot")]);
    m_reboot_isSet = !json[QString("reboot")].isNull() && m_reboot_isValid;

    m_unlock_isValid = ::OpenAPI::fromJsonValue(m_unlock, json[QString("unlock")]);
    m_unlock_isSet = !json[QString("unlock")].isNull() && m_unlock_isValid;
}

QString OAICreateTask_request_command::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTask_request_command::asJsonObject() const {
    QJsonObject obj;
    if (m_reboot.isSet()) {
        obj.insert(QString("reboot"), ::OpenAPI::toJsonValue(m_reboot));
    }
    if (m_unlock.isSet()) {
        obj.insert(QString("unlock"), ::OpenAPI::toJsonValue(m_unlock));
    }
    return obj;
}

OAIObject OAICreateTask_request_command::getReboot() const {
    return m_reboot;
}
void OAICreateTask_request_command::setReboot(const OAIObject &reboot) {
    m_reboot = reboot;
    m_reboot_isSet = true;
}

bool OAICreateTask_request_command::is_reboot_Set() const{
    return m_reboot_isSet;
}

bool OAICreateTask_request_command::is_reboot_Valid() const{
    return m_reboot_isValid;
}

OAIObject OAICreateTask_request_command::getUnlock() const {
    return m_unlock;
}
void OAICreateTask_request_command::setUnlock(const OAIObject &unlock) {
    m_unlock = unlock;
    m_unlock_isSet = true;
}

bool OAICreateTask_request_command::is_unlock_Set() const{
    return m_unlock_isSet;
}

bool OAICreateTask_request_command::is_unlock_Valid() const{
    return m_unlock_isValid;
}

bool OAICreateTask_request_command::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reboot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlock.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTask_request_command::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
