/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceSummary::OAIDeviceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceSummary::OAIDeviceSummary() {
    this->initializeModel();
}

OAIDeviceSummary::~OAIDeviceSummary() {}

void OAIDeviceSummary::initializeModel() {

    m_associated_with_job_isSet = false;
    m_associated_with_job_isValid = false;

    m_managed_device_arn_isSet = false;
    m_managed_device_arn_isValid = false;

    m_managed_device_id_isSet = false;
    m_managed_device_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDeviceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceSummary::fromJsonObject(QJsonObject json) {

    m_associated_with_job_isValid = ::OpenAPI::fromJsonValue(m_associated_with_job, json[QString("associatedWithJob")]);
    m_associated_with_job_isSet = !json[QString("associatedWithJob")].isNull() && m_associated_with_job_isValid;

    m_managed_device_arn_isValid = ::OpenAPI::fromJsonValue(m_managed_device_arn, json[QString("managedDeviceArn")]);
    m_managed_device_arn_isSet = !json[QString("managedDeviceArn")].isNull() && m_managed_device_arn_isValid;

    m_managed_device_id_isValid = ::OpenAPI::fromJsonValue(m_managed_device_id, json[QString("managedDeviceId")]);
    m_managed_device_id_isSet = !json[QString("managedDeviceId")].isNull() && m_managed_device_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIDeviceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_with_job_isSet) {
        obj.insert(QString("associatedWithJob"), ::OpenAPI::toJsonValue(m_associated_with_job));
    }
    if (m_managed_device_arn_isSet) {
        obj.insert(QString("managedDeviceArn"), ::OpenAPI::toJsonValue(m_managed_device_arn));
    }
    if (m_managed_device_id_isSet) {
        obj.insert(QString("managedDeviceId"), ::OpenAPI::toJsonValue(m_managed_device_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDeviceSummary::getAssociatedWithJob() const {
    return m_associated_with_job;
}
void OAIDeviceSummary::setAssociatedWithJob(const QString &associated_with_job) {
    m_associated_with_job = associated_with_job;
    m_associated_with_job_isSet = true;
}

bool OAIDeviceSummary::is_associated_with_job_Set() const{
    return m_associated_with_job_isSet;
}

bool OAIDeviceSummary::is_associated_with_job_Valid() const{
    return m_associated_with_job_isValid;
}

QString OAIDeviceSummary::getManagedDeviceArn() const {
    return m_managed_device_arn;
}
void OAIDeviceSummary::setManagedDeviceArn(const QString &managed_device_arn) {
    m_managed_device_arn = managed_device_arn;
    m_managed_device_arn_isSet = true;
}

bool OAIDeviceSummary::is_managed_device_arn_Set() const{
    return m_managed_device_arn_isSet;
}

bool OAIDeviceSummary::is_managed_device_arn_Valid() const{
    return m_managed_device_arn_isValid;
}

QString OAIDeviceSummary::getManagedDeviceId() const {
    return m_managed_device_id;
}
void OAIDeviceSummary::setManagedDeviceId(const QString &managed_device_id) {
    m_managed_device_id = managed_device_id;
    m_managed_device_id_isSet = true;
}

bool OAIDeviceSummary::is_managed_device_id_Set() const{
    return m_managed_device_id_isSet;
}

bool OAIDeviceSummary::is_managed_device_id_Valid() const{
    return m_managed_device_id_isValid;
}

QMap OAIDeviceSummary::getTags() const {
    return m_tags;
}
void OAIDeviceSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDeviceSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDeviceSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDeviceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_with_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_device_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
