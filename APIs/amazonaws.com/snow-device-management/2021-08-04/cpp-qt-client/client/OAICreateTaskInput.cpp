/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTaskInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTaskInput::OAICreateTaskInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTaskInput::OAICreateTaskInput() {
    this->initializeModel();
}

OAICreateTaskInput::~OAICreateTaskInput() {}

void OAICreateTaskInput::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAICreateTaskInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTaskInput::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;
}

QString OAICreateTaskInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTaskInput::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_command.isSet()) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

QString OAICreateTaskInput::getClientToken() const {
    return m_client_token;
}
void OAICreateTaskInput::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateTaskInput::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateTaskInput::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateTaskInput_command OAICreateTaskInput::getCommand() const {
    return m_command;
}
void OAICreateTaskInput::setCommand(const OAICreateTaskInput_command &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAICreateTaskInput::is_command_Set() const{
    return m_command_isSet;
}

bool OAICreateTaskInput::is_command_Valid() const{
    return m_command_isValid;
}

QString OAICreateTaskInput::getDescription() const {
    return m_description;
}
void OAICreateTaskInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateTaskInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateTaskInput::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAICreateTaskInput::getTags() const {
    return m_tags;
}
void OAICreateTaskInput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTaskInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTaskInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAICreateTaskInput::getTargets() const {
    return m_targets;
}
void OAICreateTaskInput::setTargets(const QList &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAICreateTaskInput::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAICreateTaskInput::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAICreateTaskInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTaskInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_command_isValid && m_targets_isValid && true;
}

} // namespace OpenAPI
