/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceSummary_instance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceSummary_instance::OAIInstanceSummary_instance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceSummary_instance::OAIInstanceSummary_instance() {
    this->initializeModel();
}

OAIInstanceSummary_instance::~OAIInstanceSummary_instance() {}

void OAIInstanceSummary_instance::initializeModel() {

    m_ami_launch_index_isSet = false;
    m_ami_launch_index_isValid = false;

    m_block_device_mappings_isSet = false;
    m_block_device_mappings_isValid = false;

    m_cpu_options_isSet = false;
    m_cpu_options_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_private_ip_address_isSet = false;
    m_private_ip_address_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;

    m_root_device_name_isSet = false;
    m_root_device_name_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIInstanceSummary_instance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceSummary_instance::fromJsonObject(QJsonObject json) {

    m_ami_launch_index_isValid = ::OpenAPI::fromJsonValue(m_ami_launch_index, json[QString("amiLaunchIndex")]);
    m_ami_launch_index_isSet = !json[QString("amiLaunchIndex")].isNull() && m_ami_launch_index_isValid;

    m_block_device_mappings_isValid = ::OpenAPI::fromJsonValue(m_block_device_mappings, json[QString("blockDeviceMappings")]);
    m_block_device_mappings_isSet = !json[QString("blockDeviceMappings")].isNull() && m_block_device_mappings_isValid;

    m_cpu_options_isValid = ::OpenAPI::fromJsonValue(m_cpu_options, json[QString("cpuOptions")]);
    m_cpu_options_isSet = !json[QString("cpuOptions")].isNull() && m_cpu_options_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_private_ip_address_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address, json[QString("privateIpAddress")]);
    m_private_ip_address_isSet = !json[QString("privateIpAddress")].isNull() && m_private_ip_address_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIpAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIpAddress")].isNull() && m_public_ip_address_isValid;

    m_root_device_name_isValid = ::OpenAPI::fromJsonValue(m_root_device_name, json[QString("rootDeviceName")]);
    m_root_device_name_isSet = !json[QString("rootDeviceName")].isNull() && m_root_device_name_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("securityGroups")]);
    m_security_groups_isSet = !json[QString("securityGroups")].isNull() && m_security_groups_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIInstanceSummary_instance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceSummary_instance::asJsonObject() const {
    QJsonObject obj;
    if (m_ami_launch_index_isSet) {
        obj.insert(QString("amiLaunchIndex"), ::OpenAPI::toJsonValue(m_ami_launch_index));
    }
    if (m_block_device_mappings.isSet()) {
        obj.insert(QString("blockDeviceMappings"), ::OpenAPI::toJsonValue(m_block_device_mappings));
    }
    if (m_cpu_options.isSet()) {
        obj.insert(QString("cpuOptions"), ::OpenAPI::toJsonValue(m_cpu_options));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_private_ip_address_isSet) {
        obj.insert(QString("privateIpAddress"), ::OpenAPI::toJsonValue(m_private_ip_address));
    }
    if (m_public_ip_address_isSet) {
        obj.insert(QString("publicIpAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    if (m_root_device_name_isSet) {
        obj.insert(QString("rootDeviceName"), ::OpenAPI::toJsonValue(m_root_device_name));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("securityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint32 OAIInstanceSummary_instance::getAmiLaunchIndex() const {
    return m_ami_launch_index;
}
void OAIInstanceSummary_instance::setAmiLaunchIndex(const qint32 &ami_launch_index) {
    m_ami_launch_index = ami_launch_index;
    m_ami_launch_index_isSet = true;
}

bool OAIInstanceSummary_instance::is_ami_launch_index_Set() const{
    return m_ami_launch_index_isSet;
}

bool OAIInstanceSummary_instance::is_ami_launch_index_Valid() const{
    return m_ami_launch_index_isValid;
}

QList OAIInstanceSummary_instance::getBlockDeviceMappings() const {
    return m_block_device_mappings;
}
void OAIInstanceSummary_instance::setBlockDeviceMappings(const QList &block_device_mappings) {
    m_block_device_mappings = block_device_mappings;
    m_block_device_mappings_isSet = true;
}

bool OAIInstanceSummary_instance::is_block_device_mappings_Set() const{
    return m_block_device_mappings_isSet;
}

bool OAIInstanceSummary_instance::is_block_device_mappings_Valid() const{
    return m_block_device_mappings_isValid;
}

OAIInstance_cpuOptions OAIInstanceSummary_instance::getCpuOptions() const {
    return m_cpu_options;
}
void OAIInstanceSummary_instance::setCpuOptions(const OAIInstance_cpuOptions &cpu_options) {
    m_cpu_options = cpu_options;
    m_cpu_options_isSet = true;
}

bool OAIInstanceSummary_instance::is_cpu_options_Set() const{
    return m_cpu_options_isSet;
}

bool OAIInstanceSummary_instance::is_cpu_options_Valid() const{
    return m_cpu_options_isValid;
}

QDateTime OAIInstanceSummary_instance::getCreatedAt() const {
    return m_created_at;
}
void OAIInstanceSummary_instance::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIInstanceSummary_instance::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIInstanceSummary_instance::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIInstanceSummary_instance::getImageId() const {
    return m_image_id;
}
void OAIInstanceSummary_instance::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIInstanceSummary_instance::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIInstanceSummary_instance::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIInstanceSummary_instance::getInstanceId() const {
    return m_instance_id;
}
void OAIInstanceSummary_instance::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIInstanceSummary_instance::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIInstanceSummary_instance::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIInstanceSummary_instance::getInstanceType() const {
    return m_instance_type;
}
void OAIInstanceSummary_instance::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInstanceSummary_instance::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInstanceSummary_instance::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIInstanceSummary_instance::getPrivateIpAddress() const {
    return m_private_ip_address;
}
void OAIInstanceSummary_instance::setPrivateIpAddress(const QString &private_ip_address) {
    m_private_ip_address = private_ip_address;
    m_private_ip_address_isSet = true;
}

bool OAIInstanceSummary_instance::is_private_ip_address_Set() const{
    return m_private_ip_address_isSet;
}

bool OAIInstanceSummary_instance::is_private_ip_address_Valid() const{
    return m_private_ip_address_isValid;
}

QString OAIInstanceSummary_instance::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAIInstanceSummary_instance::setPublicIpAddress(const QString &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAIInstanceSummary_instance::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAIInstanceSummary_instance::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

QString OAIInstanceSummary_instance::getRootDeviceName() const {
    return m_root_device_name;
}
void OAIInstanceSummary_instance::setRootDeviceName(const QString &root_device_name) {
    m_root_device_name = root_device_name;
    m_root_device_name_isSet = true;
}

bool OAIInstanceSummary_instance::is_root_device_name_Set() const{
    return m_root_device_name_isSet;
}

bool OAIInstanceSummary_instance::is_root_device_name_Valid() const{
    return m_root_device_name_isValid;
}

QList OAIInstanceSummary_instance::getSecurityGroups() const {
    return m_security_groups;
}
void OAIInstanceSummary_instance::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIInstanceSummary_instance::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIInstanceSummary_instance::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

OAIInstanceState OAIInstanceSummary_instance::getState() const {
    return m_state;
}
void OAIInstanceSummary_instance::setState(const OAIInstanceState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInstanceSummary_instance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInstanceSummary_instance::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIInstanceSummary_instance::getUpdatedAt() const {
    return m_updated_at;
}
void OAIInstanceSummary_instance::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIInstanceSummary_instance::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIInstanceSummary_instance::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIInstanceSummary_instance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ami_launch_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_device_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceSummary_instance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
