/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalConnectorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalConnectorType::OAIPhysicalConnectorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalConnectorType::OAIPhysicalConnectorType() {
    this->initializeModel();
}

OAIPhysicalConnectorType::~OAIPhysicalConnectorType() {}

void OAIPhysicalConnectorType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPhysicalConnectorType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPhysicalConnectorType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RJ45", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPhysicalConnectorType::RJ45;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SFP_PLUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPhysicalConnectorType::SFP_PLUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QSFP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPhysicalConnectorType::QSFP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RJ45_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPhysicalConnectorType::RJ45_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WIFI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPhysicalConnectorType::WIFI;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPhysicalConnectorType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPhysicalConnectorType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPhysicalConnectorType::RJ45:
            val = "RJ45";
            break;
        case eOAIPhysicalConnectorType::SFP_PLUS:
            val = "SFP_PLUS";
            break;
        case eOAIPhysicalConnectorType::QSFP:
            val = "QSFP";
            break;
        case eOAIPhysicalConnectorType::RJ45_2:
            val = "RJ45_2";
            break;
        case eOAIPhysicalConnectorType::WIFI:
            val = "WIFI";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPhysicalConnectorType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPhysicalConnectorType::eOAIPhysicalConnectorType OAIPhysicalConnectorType::getValue() const {
    return m_value;
}

void OAIPhysicalConnectorType::setValue(const OAIPhysicalConnectorType::eOAIPhysicalConnectorType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPhysicalConnectorType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPhysicalConnectorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
