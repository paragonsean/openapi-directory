/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionState::OAIExecutionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionState::OAIExecutionState() {
    this->initializeModel();
}

OAIExecutionState::~OAIExecutionState() {}

void OAIExecutionState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIExecutionState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIExecutionState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("QUEUED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExecutionState::QUEUED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExecutionState::IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExecutionState::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExecutionState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExecutionState::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExecutionState::REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMED_OUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExecutionState::TIMED_OUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIExecutionState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIExecutionState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIExecutionState::QUEUED:
            val = "QUEUED";
            break;
        case eOAIExecutionState::IN_PROGRESS:
            val = "IN_PROGRESS";
            break;
        case eOAIExecutionState::CANCELED:
            val = "CANCELED";
            break;
        case eOAIExecutionState::FAILED:
            val = "FAILED";
            break;
        case eOAIExecutionState::SUCCEEDED:
            val = "SUCCEEDED";
            break;
        case eOAIExecutionState::REJECTED:
            val = "REJECTED";
            break;
        case eOAIExecutionState::TIMED_OUT:
            val = "TIMED_OUT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIExecutionState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIExecutionState::eOAIExecutionState OAIExecutionState::getValue() const {
    return m_value;
}

void OAIExecutionState::setValue(const OAIExecutionState::eOAIExecutionState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIExecutionState::isSet() const {
    
    return m_value_isSet;
}

bool OAIExecutionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
