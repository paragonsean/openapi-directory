/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceBlockDeviceMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceBlockDeviceMapping::OAIInstanceBlockDeviceMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceBlockDeviceMapping::OAIInstanceBlockDeviceMapping() {
    this->initializeModel();
}

OAIInstanceBlockDeviceMapping::~OAIInstanceBlockDeviceMapping() {}

void OAIInstanceBlockDeviceMapping::initializeModel() {

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_ebs_isSet = false;
    m_ebs_isValid = false;
}

void OAIInstanceBlockDeviceMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceBlockDeviceMapping::fromJsonObject(QJsonObject json) {

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_ebs_isValid = ::OpenAPI::fromJsonValue(m_ebs, json[QString("ebs")]);
    m_ebs_isSet = !json[QString("ebs")].isNull() && m_ebs_isValid;
}

QString OAIInstanceBlockDeviceMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceBlockDeviceMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_ebs.isSet()) {
        obj.insert(QString("ebs"), ::OpenAPI::toJsonValue(m_ebs));
    }
    return obj;
}

QString OAIInstanceBlockDeviceMapping::getDeviceName() const {
    return m_device_name;
}
void OAIInstanceBlockDeviceMapping::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIInstanceBlockDeviceMapping::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIInstanceBlockDeviceMapping::is_device_name_Valid() const{
    return m_device_name_isValid;
}

OAIInstanceBlockDeviceMapping_ebs OAIInstanceBlockDeviceMapping::getEbs() const {
    return m_ebs;
}
void OAIInstanceBlockDeviceMapping::setEbs(const OAIInstanceBlockDeviceMapping_ebs &ebs) {
    m_ebs = ebs;
    m_ebs_isSet = true;
}

bool OAIInstanceBlockDeviceMapping::is_ebs_Set() const{
    return m_ebs_isSet;
}

bool OAIInstanceBlockDeviceMapping::is_ebs_Valid() const{
    return m_ebs_isValid;
}

bool OAIInstanceBlockDeviceMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceBlockDeviceMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
