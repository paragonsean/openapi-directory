/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDeviceOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDeviceOutput::OAIDescribeDeviceOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDeviceOutput::OAIDescribeDeviceOutput() {
    this->initializeModel();
}

OAIDescribeDeviceOutput::~OAIDescribeDeviceOutput() {}

void OAIDescribeDeviceOutput::initializeModel() {

    m_associated_with_job_isSet = false;
    m_associated_with_job_isValid = false;

    m_device_capacities_isSet = false;
    m_device_capacities_isValid = false;

    m_device_state_isSet = false;
    m_device_state_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_last_reached_out_at_isSet = false;
    m_last_reached_out_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_managed_device_arn_isSet = false;
    m_managed_device_arn_isValid = false;

    m_managed_device_id_isSet = false;
    m_managed_device_id_isValid = false;

    m_physical_network_interfaces_isSet = false;
    m_physical_network_interfaces_isValid = false;

    m_software_isSet = false;
    m_software_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeDeviceOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDeviceOutput::fromJsonObject(QJsonObject json) {

    m_associated_with_job_isValid = ::OpenAPI::fromJsonValue(m_associated_with_job, json[QString("associatedWithJob")]);
    m_associated_with_job_isSet = !json[QString("associatedWithJob")].isNull() && m_associated_with_job_isValid;

    m_device_capacities_isValid = ::OpenAPI::fromJsonValue(m_device_capacities, json[QString("deviceCapacities")]);
    m_device_capacities_isSet = !json[QString("deviceCapacities")].isNull() && m_device_capacities_isValid;

    m_device_state_isValid = ::OpenAPI::fromJsonValue(m_device_state, json[QString("deviceState")]);
    m_device_state_isSet = !json[QString("deviceState")].isNull() && m_device_state_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_last_reached_out_at_isValid = ::OpenAPI::fromJsonValue(m_last_reached_out_at, json[QString("lastReachedOutAt")]);
    m_last_reached_out_at_isSet = !json[QString("lastReachedOutAt")].isNull() && m_last_reached_out_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_managed_device_arn_isValid = ::OpenAPI::fromJsonValue(m_managed_device_arn, json[QString("managedDeviceArn")]);
    m_managed_device_arn_isSet = !json[QString("managedDeviceArn")].isNull() && m_managed_device_arn_isValid;

    m_managed_device_id_isValid = ::OpenAPI::fromJsonValue(m_managed_device_id, json[QString("managedDeviceId")]);
    m_managed_device_id_isSet = !json[QString("managedDeviceId")].isNull() && m_managed_device_id_isValid;

    m_physical_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_physical_network_interfaces, json[QString("physicalNetworkInterfaces")]);
    m_physical_network_interfaces_isSet = !json[QString("physicalNetworkInterfaces")].isNull() && m_physical_network_interfaces_isValid;

    m_software_isValid = ::OpenAPI::fromJsonValue(m_software, json[QString("software")]);
    m_software_isSet = !json[QString("software")].isNull() && m_software_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeDeviceOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDeviceOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_with_job_isSet) {
        obj.insert(QString("associatedWithJob"), ::OpenAPI::toJsonValue(m_associated_with_job));
    }
    if (m_device_capacities.isSet()) {
        obj.insert(QString("deviceCapacities"), ::OpenAPI::toJsonValue(m_device_capacities));
    }
    if (m_device_state.isSet()) {
        obj.insert(QString("deviceState"), ::OpenAPI::toJsonValue(m_device_state));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_last_reached_out_at_isSet) {
        obj.insert(QString("lastReachedOutAt"), ::OpenAPI::toJsonValue(m_last_reached_out_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_managed_device_arn_isSet) {
        obj.insert(QString("managedDeviceArn"), ::OpenAPI::toJsonValue(m_managed_device_arn));
    }
    if (m_managed_device_id_isSet) {
        obj.insert(QString("managedDeviceId"), ::OpenAPI::toJsonValue(m_managed_device_id));
    }
    if (m_physical_network_interfaces.isSet()) {
        obj.insert(QString("physicalNetworkInterfaces"), ::OpenAPI::toJsonValue(m_physical_network_interfaces));
    }
    if (m_software.isSet()) {
        obj.insert(QString("software"), ::OpenAPI::toJsonValue(m_software));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeDeviceOutput::getAssociatedWithJob() const {
    return m_associated_with_job;
}
void OAIDescribeDeviceOutput::setAssociatedWithJob(const QString &associated_with_job) {
    m_associated_with_job = associated_with_job;
    m_associated_with_job_isSet = true;
}

bool OAIDescribeDeviceOutput::is_associated_with_job_Set() const{
    return m_associated_with_job_isSet;
}

bool OAIDescribeDeviceOutput::is_associated_with_job_Valid() const{
    return m_associated_with_job_isValid;
}

QList OAIDescribeDeviceOutput::getDeviceCapacities() const {
    return m_device_capacities;
}
void OAIDescribeDeviceOutput::setDeviceCapacities(const QList &device_capacities) {
    m_device_capacities = device_capacities;
    m_device_capacities_isSet = true;
}

bool OAIDescribeDeviceOutput::is_device_capacities_Set() const{
    return m_device_capacities_isSet;
}

bool OAIDescribeDeviceOutput::is_device_capacities_Valid() const{
    return m_device_capacities_isValid;
}

OAIUnlockState OAIDescribeDeviceOutput::getDeviceState() const {
    return m_device_state;
}
void OAIDescribeDeviceOutput::setDeviceState(const OAIUnlockState &device_state) {
    m_device_state = device_state;
    m_device_state_isSet = true;
}

bool OAIDescribeDeviceOutput::is_device_state_Set() const{
    return m_device_state_isSet;
}

bool OAIDescribeDeviceOutput::is_device_state_Valid() const{
    return m_device_state_isValid;
}

QString OAIDescribeDeviceOutput::getDeviceType() const {
    return m_device_type;
}
void OAIDescribeDeviceOutput::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDescribeDeviceOutput::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDescribeDeviceOutput::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QDateTime OAIDescribeDeviceOutput::getLastReachedOutAt() const {
    return m_last_reached_out_at;
}
void OAIDescribeDeviceOutput::setLastReachedOutAt(const QDateTime &last_reached_out_at) {
    m_last_reached_out_at = last_reached_out_at;
    m_last_reached_out_at_isSet = true;
}

bool OAIDescribeDeviceOutput::is_last_reached_out_at_Set() const{
    return m_last_reached_out_at_isSet;
}

bool OAIDescribeDeviceOutput::is_last_reached_out_at_Valid() const{
    return m_last_reached_out_at_isValid;
}

QDateTime OAIDescribeDeviceOutput::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIDescribeDeviceOutput::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIDescribeDeviceOutput::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIDescribeDeviceOutput::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIDescribeDeviceOutput::getManagedDeviceArn() const {
    return m_managed_device_arn;
}
void OAIDescribeDeviceOutput::setManagedDeviceArn(const QString &managed_device_arn) {
    m_managed_device_arn = managed_device_arn;
    m_managed_device_arn_isSet = true;
}

bool OAIDescribeDeviceOutput::is_managed_device_arn_Set() const{
    return m_managed_device_arn_isSet;
}

bool OAIDescribeDeviceOutput::is_managed_device_arn_Valid() const{
    return m_managed_device_arn_isValid;
}

QString OAIDescribeDeviceOutput::getManagedDeviceId() const {
    return m_managed_device_id;
}
void OAIDescribeDeviceOutput::setManagedDeviceId(const QString &managed_device_id) {
    m_managed_device_id = managed_device_id;
    m_managed_device_id_isSet = true;
}

bool OAIDescribeDeviceOutput::is_managed_device_id_Set() const{
    return m_managed_device_id_isSet;
}

bool OAIDescribeDeviceOutput::is_managed_device_id_Valid() const{
    return m_managed_device_id_isValid;
}

QList OAIDescribeDeviceOutput::getPhysicalNetworkInterfaces() const {
    return m_physical_network_interfaces;
}
void OAIDescribeDeviceOutput::setPhysicalNetworkInterfaces(const QList &physical_network_interfaces) {
    m_physical_network_interfaces = physical_network_interfaces;
    m_physical_network_interfaces_isSet = true;
}

bool OAIDescribeDeviceOutput::is_physical_network_interfaces_Set() const{
    return m_physical_network_interfaces_isSet;
}

bool OAIDescribeDeviceOutput::is_physical_network_interfaces_Valid() const{
    return m_physical_network_interfaces_isValid;
}

OAIDescribeDeviceOutput_software OAIDescribeDeviceOutput::getSoftware() const {
    return m_software;
}
void OAIDescribeDeviceOutput::setSoftware(const OAIDescribeDeviceOutput_software &software) {
    m_software = software;
    m_software_isSet = true;
}

bool OAIDescribeDeviceOutput::is_software_Set() const{
    return m_software_isSet;
}

bool OAIDescribeDeviceOutput::is_software_Valid() const{
    return m_software_isValid;
}

QMap OAIDescribeDeviceOutput::getTags() const {
    return m_tags;
}
void OAIDescribeDeviceOutput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeDeviceOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeDeviceOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeDeviceOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_with_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_capacities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_reached_out_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_device_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_network_interfaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_software.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDeviceOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
