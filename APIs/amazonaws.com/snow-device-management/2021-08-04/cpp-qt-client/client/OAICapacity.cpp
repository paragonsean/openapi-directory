/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapacity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapacity::OAICapacity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapacity::OAICapacity() {
    this->initializeModel();
}

OAICapacity::~OAICapacity() {}

void OAICapacity::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;
}

void OAICapacity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapacity::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;
}

QString OAICapacity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapacity::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    return obj;
}

qint32 OAICapacity::getAvailable() const {
    return m_available;
}
void OAICapacity::setAvailable(const qint32 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAICapacity::is_available_Set() const{
    return m_available_isSet;
}

bool OAICapacity::is_available_Valid() const{
    return m_available_isValid;
}

QString OAICapacity::getName() const {
    return m_name;
}
void OAICapacity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICapacity::is_name_Set() const{
    return m_name_isSet;
}

bool OAICapacity::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICapacity::getTotal() const {
    return m_total;
}
void OAICapacity::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAICapacity::is_total_Set() const{
    return m_total_isSet;
}

bool OAICapacity::is_total_Valid() const{
    return m_total_isValid;
}

QString OAICapacity::getUnit() const {
    return m_unit;
}
void OAICapacity::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAICapacity::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAICapacity::is_unit_Valid() const{
    return m_unit_isValid;
}

qint32 OAICapacity::getUsed() const {
    return m_used;
}
void OAICapacity::setUsed(const qint32 &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAICapacity::is_used_Set() const{
    return m_used_isSet;
}

bool OAICapacity::is_used_Valid() const{
    return m_used_isValid;
}

bool OAICapacity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapacity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
