/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalNetworkInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalNetworkInterface::OAIPhysicalNetworkInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalNetworkInterface::OAIPhysicalNetworkInterface() {
    this->initializeModel();
}

OAIPhysicalNetworkInterface::~OAIPhysicalNetworkInterface() {}

void OAIPhysicalNetworkInterface::initializeModel() {

    m_default_gateway_isSet = false;
    m_default_gateway_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_ip_address_assignment_isSet = false;
    m_ip_address_assignment_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_netmask_isSet = false;
    m_netmask_isValid = false;

    m_physical_connector_type_isSet = false;
    m_physical_connector_type_isValid = false;

    m_physical_network_interface_id_isSet = false;
    m_physical_network_interface_id_isValid = false;
}

void OAIPhysicalNetworkInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalNetworkInterface::fromJsonObject(QJsonObject json) {

    m_default_gateway_isValid = ::OpenAPI::fromJsonValue(m_default_gateway, json[QString("defaultGateway")]);
    m_default_gateway_isSet = !json[QString("defaultGateway")].isNull() && m_default_gateway_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_ip_address_assignment_isValid = ::OpenAPI::fromJsonValue(m_ip_address_assignment, json[QString("ipAddressAssignment")]);
    m_ip_address_assignment_isSet = !json[QString("ipAddressAssignment")].isNull() && m_ip_address_assignment_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("macAddress")]);
    m_mac_address_isSet = !json[QString("macAddress")].isNull() && m_mac_address_isValid;

    m_netmask_isValid = ::OpenAPI::fromJsonValue(m_netmask, json[QString("netmask")]);
    m_netmask_isSet = !json[QString("netmask")].isNull() && m_netmask_isValid;

    m_physical_connector_type_isValid = ::OpenAPI::fromJsonValue(m_physical_connector_type, json[QString("physicalConnectorType")]);
    m_physical_connector_type_isSet = !json[QString("physicalConnectorType")].isNull() && m_physical_connector_type_isValid;

    m_physical_network_interface_id_isValid = ::OpenAPI::fromJsonValue(m_physical_network_interface_id, json[QString("physicalNetworkInterfaceId")]);
    m_physical_network_interface_id_isSet = !json[QString("physicalNetworkInterfaceId")].isNull() && m_physical_network_interface_id_isValid;
}

QString OAIPhysicalNetworkInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalNetworkInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_default_gateway_isSet) {
        obj.insert(QString("defaultGateway"), ::OpenAPI::toJsonValue(m_default_gateway));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_ip_address_assignment.isSet()) {
        obj.insert(QString("ipAddressAssignment"), ::OpenAPI::toJsonValue(m_ip_address_assignment));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_netmask_isSet) {
        obj.insert(QString("netmask"), ::OpenAPI::toJsonValue(m_netmask));
    }
    if (m_physical_connector_type.isSet()) {
        obj.insert(QString("physicalConnectorType"), ::OpenAPI::toJsonValue(m_physical_connector_type));
    }
    if (m_physical_network_interface_id_isSet) {
        obj.insert(QString("physicalNetworkInterfaceId"), ::OpenAPI::toJsonValue(m_physical_network_interface_id));
    }
    return obj;
}

QString OAIPhysicalNetworkInterface::getDefaultGateway() const {
    return m_default_gateway;
}
void OAIPhysicalNetworkInterface::setDefaultGateway(const QString &default_gateway) {
    m_default_gateway = default_gateway;
    m_default_gateway_isSet = true;
}

bool OAIPhysicalNetworkInterface::is_default_gateway_Set() const{
    return m_default_gateway_isSet;
}

bool OAIPhysicalNetworkInterface::is_default_gateway_Valid() const{
    return m_default_gateway_isValid;
}

QString OAIPhysicalNetworkInterface::getIpAddress() const {
    return m_ip_address;
}
void OAIPhysicalNetworkInterface::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIPhysicalNetworkInterface::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIPhysicalNetworkInterface::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAIIpAddressAssignment OAIPhysicalNetworkInterface::getIpAddressAssignment() const {
    return m_ip_address_assignment;
}
void OAIPhysicalNetworkInterface::setIpAddressAssignment(const OAIIpAddressAssignment &ip_address_assignment) {
    m_ip_address_assignment = ip_address_assignment;
    m_ip_address_assignment_isSet = true;
}

bool OAIPhysicalNetworkInterface::is_ip_address_assignment_Set() const{
    return m_ip_address_assignment_isSet;
}

bool OAIPhysicalNetworkInterface::is_ip_address_assignment_Valid() const{
    return m_ip_address_assignment_isValid;
}

QString OAIPhysicalNetworkInterface::getMacAddress() const {
    return m_mac_address;
}
void OAIPhysicalNetworkInterface::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIPhysicalNetworkInterface::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIPhysicalNetworkInterface::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

QString OAIPhysicalNetworkInterface::getNetmask() const {
    return m_netmask;
}
void OAIPhysicalNetworkInterface::setNetmask(const QString &netmask) {
    m_netmask = netmask;
    m_netmask_isSet = true;
}

bool OAIPhysicalNetworkInterface::is_netmask_Set() const{
    return m_netmask_isSet;
}

bool OAIPhysicalNetworkInterface::is_netmask_Valid() const{
    return m_netmask_isValid;
}

OAIPhysicalConnectorType OAIPhysicalNetworkInterface::getPhysicalConnectorType() const {
    return m_physical_connector_type;
}
void OAIPhysicalNetworkInterface::setPhysicalConnectorType(const OAIPhysicalConnectorType &physical_connector_type) {
    m_physical_connector_type = physical_connector_type;
    m_physical_connector_type_isSet = true;
}

bool OAIPhysicalNetworkInterface::is_physical_connector_type_Set() const{
    return m_physical_connector_type_isSet;
}

bool OAIPhysicalNetworkInterface::is_physical_connector_type_Valid() const{
    return m_physical_connector_type_isValid;
}

QString OAIPhysicalNetworkInterface::getPhysicalNetworkInterfaceId() const {
    return m_physical_network_interface_id;
}
void OAIPhysicalNetworkInterface::setPhysicalNetworkInterfaceId(const QString &physical_network_interface_id) {
    m_physical_network_interface_id = physical_network_interface_id;
    m_physical_network_interface_id_isSet = true;
}

bool OAIPhysicalNetworkInterface::is_physical_network_interface_id_Set() const{
    return m_physical_network_interface_id_isSet;
}

bool OAIPhysicalNetworkInterface::is_physical_network_interface_id_Valid() const{
    return m_physical_network_interface_id_isValid;
}

bool OAIPhysicalNetworkInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_netmask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_connector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_network_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalNetworkInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
