/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IpAddressAssignment from './IpAddressAssignment';
import PhysicalConnectorType from './PhysicalConnectorType';

/**
 * The PhysicalNetworkInterface model module.
 * @module model/PhysicalNetworkInterface
 * @version 2021-08-04
 */
class PhysicalNetworkInterface {
    /**
     * Constructs a new <code>PhysicalNetworkInterface</code>.
     * The details about the physical network interface for the device.
     * @alias module:model/PhysicalNetworkInterface
     */
    constructor() { 
        
        PhysicalNetworkInterface.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PhysicalNetworkInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PhysicalNetworkInterface} obj Optional instance to populate.
     * @return {module:model/PhysicalNetworkInterface} The populated <code>PhysicalNetworkInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PhysicalNetworkInterface();

            if (data.hasOwnProperty('defaultGateway')) {
                obj['defaultGateway'] = ApiClient.convertToType(data['defaultGateway'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('ipAddressAssignment')) {
                obj['ipAddressAssignment'] = ApiClient.convertToType(data['ipAddressAssignment'], IpAddressAssignment);
            }
            if (data.hasOwnProperty('macAddress')) {
                obj['macAddress'] = ApiClient.convertToType(data['macAddress'], 'String');
            }
            if (data.hasOwnProperty('netmask')) {
                obj['netmask'] = ApiClient.convertToType(data['netmask'], 'String');
            }
            if (data.hasOwnProperty('physicalConnectorType')) {
                obj['physicalConnectorType'] = ApiClient.convertToType(data['physicalConnectorType'], PhysicalConnectorType);
            }
            if (data.hasOwnProperty('physicalNetworkInterfaceId')) {
                obj['physicalNetworkInterfaceId'] = ApiClient.convertToType(data['physicalNetworkInterfaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PhysicalNetworkInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PhysicalNetworkInterface</code>.
     */
    static validateJSON(data) {
        // validate the optional field `defaultGateway`
        if (data['defaultGateway']) { // data not null
          String.validateJSON(data['defaultGateway']);
        }
        // validate the optional field `ipAddress`
        if (data['ipAddress']) { // data not null
          String.validateJSON(data['ipAddress']);
        }
        // validate the optional field `ipAddressAssignment`
        if (data['ipAddressAssignment']) { // data not null
          IpAddressAssignment.validateJSON(data['ipAddressAssignment']);
        }
        // validate the optional field `macAddress`
        if (data['macAddress']) { // data not null
          String.validateJSON(data['macAddress']);
        }
        // validate the optional field `netmask`
        if (data['netmask']) { // data not null
          String.validateJSON(data['netmask']);
        }
        // validate the optional field `physicalConnectorType`
        if (data['physicalConnectorType']) { // data not null
          PhysicalConnectorType.validateJSON(data['physicalConnectorType']);
        }
        // validate the optional field `physicalNetworkInterfaceId`
        if (data['physicalNetworkInterfaceId']) { // data not null
          String.validateJSON(data['physicalNetworkInterfaceId']);
        }

        return true;
    }


}



/**
 * @member {String} defaultGateway
 */
PhysicalNetworkInterface.prototype['defaultGateway'] = undefined;

/**
 * @member {String} ipAddress
 */
PhysicalNetworkInterface.prototype['ipAddress'] = undefined;

/**
 * @member {module:model/IpAddressAssignment} ipAddressAssignment
 */
PhysicalNetworkInterface.prototype['ipAddressAssignment'] = undefined;

/**
 * @member {String} macAddress
 */
PhysicalNetworkInterface.prototype['macAddress'] = undefined;

/**
 * @member {String} netmask
 */
PhysicalNetworkInterface.prototype['netmask'] = undefined;

/**
 * @member {module:model/PhysicalConnectorType} physicalConnectorType
 */
PhysicalNetworkInterface.prototype['physicalConnectorType'] = undefined;

/**
 * @member {String} physicalNetworkInterfaceId
 */
PhysicalNetworkInterface.prototype['physicalNetworkInterfaceId'] = undefined;






export default PhysicalNetworkInterface;

