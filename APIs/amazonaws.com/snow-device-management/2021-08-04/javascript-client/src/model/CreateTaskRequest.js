/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateTaskRequestCommand from './CreateTaskRequestCommand';

/**
 * The CreateTaskRequest model module.
 * @module model/CreateTaskRequest
 * @version 2021-08-04
 */
class CreateTaskRequest {
    /**
     * Constructs a new <code>CreateTaskRequest</code>.
     * @alias module:model/CreateTaskRequest
     * @param command {module:model/CreateTaskRequestCommand} 
     * @param targets {Array.<String>} A list of managed device IDs.
     */
    constructor(command, targets) { 
        
        CreateTaskRequest.initialize(this, command, targets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, command, targets) { 
        obj['command'] = command;
        obj['targets'] = targets;
    }

    /**
     * Constructs a <code>CreateTaskRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateTaskRequest} obj Optional instance to populate.
     * @return {module:model/CreateTaskRequest} The populated <code>CreateTaskRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateTaskRequest();

            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('command')) {
                obj['command'] = CreateTaskRequestCommand.constructFromObject(data['command']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateTaskRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateTaskRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateTaskRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // validate the optional field `command`
        if (data['command']) { // data not null
          CreateTaskRequestCommand.validateJSON(data['command']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targets'])) {
            throw new Error("Expected the field `targets` to be an array in the JSON data but got " + data['targets']);
        }

        return true;
    }


}

CreateTaskRequest.RequiredProperties = ["command", "targets"];

/**
 * A token ensuring that the action is called only once with the specified details.
 * @member {String} clientToken
 */
CreateTaskRequest.prototype['clientToken'] = undefined;

/**
 * @member {module:model/CreateTaskRequestCommand} command
 */
CreateTaskRequest.prototype['command'] = undefined;

/**
 * A description of the task and its targets.
 * @member {String} description
 */
CreateTaskRequest.prototype['description'] = undefined;

/**
 * Optional metadata that you assign to a resource. You can use tags to categorize a resource in different ways, such as by purpose, owner, or environment. 
 * @member {Object.<String, String>} tags
 */
CreateTaskRequest.prototype['tags'] = undefined;

/**
 * A list of managed device IDs.
 * @member {Array.<String>} targets
 */
CreateTaskRequest.prototype['targets'] = undefined;






export default CreateTaskRequest;

