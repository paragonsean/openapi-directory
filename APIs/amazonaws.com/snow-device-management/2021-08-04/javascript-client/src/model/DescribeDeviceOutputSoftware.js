/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SoftwareInformation from './SoftwareInformation';

/**
 * The DescribeDeviceOutputSoftware model module.
 * @module model/DescribeDeviceOutputSoftware
 * @version 2021-08-04
 */
class DescribeDeviceOutputSoftware {
    /**
     * Constructs a new <code>DescribeDeviceOutputSoftware</code>.
     * @alias module:model/DescribeDeviceOutputSoftware
     * @implements module:model/SoftwareInformation
     */
    constructor() { 
        SoftwareInformation.initialize(this);
        DescribeDeviceOutputSoftware.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeDeviceOutputSoftware</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeDeviceOutputSoftware} obj Optional instance to populate.
     * @return {module:model/DescribeDeviceOutputSoftware} The populated <code>DescribeDeviceOutputSoftware</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeDeviceOutputSoftware();
            SoftwareInformation.constructFromObject(data, obj);

            if (data.hasOwnProperty('installState')) {
                obj['installState'] = ApiClient.convertToType(data['installState'], 'String');
            }
            if (data.hasOwnProperty('installedVersion')) {
                obj['installedVersion'] = ApiClient.convertToType(data['installedVersion'], 'String');
            }
            if (data.hasOwnProperty('installingVersion')) {
                obj['installingVersion'] = ApiClient.convertToType(data['installingVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeDeviceOutputSoftware</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeDeviceOutputSoftware</code>.
     */
    static validateJSON(data) {
        // validate the optional field `installState`
        if (data['installState']) { // data not null
          String.validateJSON(data['installState']);
        }
        // validate the optional field `installedVersion`
        if (data['installedVersion']) { // data not null
          String.validateJSON(data['installedVersion']);
        }
        // validate the optional field `installingVersion`
        if (data['installingVersion']) { // data not null
          String.validateJSON(data['installingVersion']);
        }

        return true;
    }


}



/**
 * @member {String} installState
 */
DescribeDeviceOutputSoftware.prototype['installState'] = undefined;

/**
 * @member {String} installedVersion
 */
DescribeDeviceOutputSoftware.prototype['installedVersion'] = undefined;

/**
 * @member {String} installingVersion
 */
DescribeDeviceOutputSoftware.prototype['installingVersion'] = undefined;


// Implement SoftwareInformation interface:
/**
 * @member {String} installState
 */
SoftwareInformation.prototype['installState'] = undefined;
/**
 * @member {String} installedVersion
 */
SoftwareInformation.prototype['installedVersion'] = undefined;
/**
 * @member {String} installingVersion
 */
SoftwareInformation.prototype['installingVersion'] = undefined;




export default DescribeDeviceOutputSoftware;

