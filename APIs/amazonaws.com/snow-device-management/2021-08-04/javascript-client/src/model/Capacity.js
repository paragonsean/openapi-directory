/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Capacity model module.
 * @module model/Capacity
 * @version 2021-08-04
 */
class Capacity {
    /**
     * Constructs a new <code>Capacity</code>.
     * The physical capacity of the Amazon Web Services Snow Family device. 
     * @alias module:model/Capacity
     */
    constructor() { 
        
        Capacity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Capacity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Capacity} obj Optional instance to populate.
     * @return {module:model/Capacity} The populated <code>Capacity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Capacity();

            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('used')) {
                obj['used'] = ApiClient.convertToType(data['used'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Capacity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Capacity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `available`
        if (data['available']) { // data not null
          Number.validateJSON(data['available']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `total`
        if (data['total']) { // data not null
          Number.validateJSON(data['total']);
        }
        // validate the optional field `unit`
        if (data['unit']) { // data not null
          String.validateJSON(data['unit']);
        }
        // validate the optional field `used`
        if (data['used']) { // data not null
          Number.validateJSON(data['used']);
        }

        return true;
    }


}



/**
 * @member {Number} available
 */
Capacity.prototype['available'] = undefined;

/**
 * @member {String} name
 */
Capacity.prototype['name'] = undefined;

/**
 * @member {Number} total
 */
Capacity.prototype['total'] = undefined;

/**
 * @member {String} unit
 */
Capacity.prototype['unit'] = undefined;

/**
 * @member {Number} used
 */
Capacity.prototype['used'] = undefined;






export default Capacity;

