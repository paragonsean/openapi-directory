/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceCpuOptions from './InstanceCpuOptions';
import InstanceState from './InstanceState';

/**
 * The Instance model module.
 * @module model/Instance
 * @version 2021-08-04
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * The description of an instance. Currently, Amazon EC2 instances are the only supported instance type.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('amiLaunchIndex')) {
                obj['amiLaunchIndex'] = ApiClient.convertToType(data['amiLaunchIndex'], 'Number');
            }
            if (data.hasOwnProperty('blockDeviceMappings')) {
                obj['blockDeviceMappings'] = ApiClient.convertToType(data['blockDeviceMappings'], Array);
            }
            if (data.hasOwnProperty('cpuOptions')) {
                obj['cpuOptions'] = InstanceCpuOptions.constructFromObject(data['cpuOptions']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('imageId')) {
                obj['imageId'] = ApiClient.convertToType(data['imageId'], 'String');
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('privateIpAddress')) {
                obj['privateIpAddress'] = ApiClient.convertToType(data['privateIpAddress'], 'String');
            }
            if (data.hasOwnProperty('publicIpAddress')) {
                obj['publicIpAddress'] = ApiClient.convertToType(data['publicIpAddress'], 'String');
            }
            if (data.hasOwnProperty('rootDeviceName')) {
                obj['rootDeviceName'] = ApiClient.convertToType(data['rootDeviceName'], 'String');
            }
            if (data.hasOwnProperty('securityGroups')) {
                obj['securityGroups'] = ApiClient.convertToType(data['securityGroups'], Array);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = InstanceState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amiLaunchIndex`
        if (data['amiLaunchIndex']) { // data not null
          Number.validateJSON(data['amiLaunchIndex']);
        }
        // validate the optional field `blockDeviceMappings`
        if (data['blockDeviceMappings']) { // data not null
          Array.validateJSON(data['blockDeviceMappings']);
        }
        // validate the optional field `cpuOptions`
        if (data['cpuOptions']) { // data not null
          InstanceCpuOptions.validateJSON(data['cpuOptions']);
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `imageId`
        if (data['imageId']) { // data not null
          String.validateJSON(data['imageId']);
        }
        // validate the optional field `instanceId`
        if (data['instanceId']) { // data not null
          String.validateJSON(data['instanceId']);
        }
        // validate the optional field `instanceType`
        if (data['instanceType']) { // data not null
          String.validateJSON(data['instanceType']);
        }
        // validate the optional field `privateIpAddress`
        if (data['privateIpAddress']) { // data not null
          String.validateJSON(data['privateIpAddress']);
        }
        // validate the optional field `publicIpAddress`
        if (data['publicIpAddress']) { // data not null
          String.validateJSON(data['publicIpAddress']);
        }
        // validate the optional field `rootDeviceName`
        if (data['rootDeviceName']) { // data not null
          String.validateJSON(data['rootDeviceName']);
        }
        // validate the optional field `securityGroups`
        if (data['securityGroups']) { // data not null
          Array.validateJSON(data['securityGroups']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          InstanceState.validateJSON(data['state']);
        }
        // validate the optional field `updatedAt`
        if (data['updatedAt']) { // data not null
          Date.validateJSON(data['updatedAt']);
        }

        return true;
    }


}



/**
 * @member {Number} amiLaunchIndex
 */
Instance.prototype['amiLaunchIndex'] = undefined;

/**
 * @member {Array} blockDeviceMappings
 */
Instance.prototype['blockDeviceMappings'] = undefined;

/**
 * @member {module:model/InstanceCpuOptions} cpuOptions
 */
Instance.prototype['cpuOptions'] = undefined;

/**
 * @member {Date} createdAt
 */
Instance.prototype['createdAt'] = undefined;

/**
 * @member {String} imageId
 */
Instance.prototype['imageId'] = undefined;

/**
 * @member {String} instanceId
 */
Instance.prototype['instanceId'] = undefined;

/**
 * @member {String} instanceType
 */
Instance.prototype['instanceType'] = undefined;

/**
 * @member {String} privateIpAddress
 */
Instance.prototype['privateIpAddress'] = undefined;

/**
 * @member {String} publicIpAddress
 */
Instance.prototype['publicIpAddress'] = undefined;

/**
 * @member {String} rootDeviceName
 */
Instance.prototype['rootDeviceName'] = undefined;

/**
 * @member {Array} securityGroups
 */
Instance.prototype['securityGroups'] = undefined;

/**
 * @member {module:model/InstanceState} state
 */
Instance.prototype['state'] = undefined;

/**
 * @member {Date} updatedAt
 */
Instance.prototype['updatedAt'] = undefined;






export default Instance;

