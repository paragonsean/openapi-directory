/**
 * AWS Snow Device Management
 * Amazon Web Services Snow Device Management documentation.
 *
 * The version of the OpenAPI document: 2021-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsSnowDeviceManagement);
  }
}(this, function(expect, AwsSnowDeviceManagement) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsSnowDeviceManagement.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('cancelTask', function() {
      it('should call cancelTask successfully', function(done) {
        //uncomment below and update the code to test cancelTask
        //instance.cancelTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTask', function() {
      it('should call createTask successfully', function(done) {
        //uncomment below and update the code to test createTask
        //instance.createTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDevice', function() {
      it('should call describeDevice successfully', function(done) {
        //uncomment below and update the code to test describeDevice
        //instance.describeDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDeviceEc2Instances', function() {
      it('should call describeDeviceEc2Instances successfully', function(done) {
        //uncomment below and update the code to test describeDeviceEc2Instances
        //instance.describeDeviceEc2Instances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeExecution', function() {
      it('should call describeExecution successfully', function(done) {
        //uncomment below and update the code to test describeExecution
        //instance.describeExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTask', function() {
      it('should call describeTask successfully', function(done) {
        //uncomment below and update the code to test describeTask
        //instance.describeTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeviceResources', function() {
      it('should call listDeviceResources successfully', function(done) {
        //uncomment below and update the code to test listDeviceResources
        //instance.listDeviceResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDevices', function() {
      it('should call listDevices successfully', function(done) {
        //uncomment below and update the code to test listDevices
        //instance.listDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExecutions', function() {
      it('should call listExecutions successfully', function(done) {
        //uncomment below and update the code to test listExecutions
        //instance.listExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTasks', function() {
      it('should call listTasks successfully', function(done) {
        //uncomment below and update the code to test listTasks
        //instance.listTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
