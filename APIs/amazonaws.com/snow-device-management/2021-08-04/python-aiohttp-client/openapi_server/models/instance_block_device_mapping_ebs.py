# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_status import AttachmentStatus
from openapi_server import util


class InstanceBlockDeviceMappingEbs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attach_time: datetime=None, delete_on_termination: bool=None, status: AttachmentStatus=None, volume_id: str=None):
        """InstanceBlockDeviceMappingEbs - a model defined in OpenAPI

        :param attach_time: The attach_time of this InstanceBlockDeviceMappingEbs.
        :param delete_on_termination: The delete_on_termination of this InstanceBlockDeviceMappingEbs.
        :param status: The status of this InstanceBlockDeviceMappingEbs.
        :param volume_id: The volume_id of this InstanceBlockDeviceMappingEbs.
        """
        self.openapi_types = {
            'attach_time': datetime,
            'delete_on_termination': bool,
            'status': AttachmentStatus,
            'volume_id': str
        }

        self.attribute_map = {
            'attach_time': 'attachTime',
            'delete_on_termination': 'deleteOnTermination',
            'status': 'status',
            'volume_id': 'volumeId'
        }

        self._attach_time = attach_time
        self._delete_on_termination = delete_on_termination
        self._status = status
        self._volume_id = volume_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceBlockDeviceMappingEbs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceBlockDeviceMapping_ebs of this InstanceBlockDeviceMappingEbs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attach_time(self):
        """Gets the attach_time of this InstanceBlockDeviceMappingEbs.


        :return: The attach_time of this InstanceBlockDeviceMappingEbs.
        :rtype: datetime
        """
        return self._attach_time

    @attach_time.setter
    def attach_time(self, attach_time):
        """Sets the attach_time of this InstanceBlockDeviceMappingEbs.


        :param attach_time: The attach_time of this InstanceBlockDeviceMappingEbs.
        :type attach_time: datetime
        """

        self._attach_time = attach_time

    @property
    def delete_on_termination(self):
        """Gets the delete_on_termination of this InstanceBlockDeviceMappingEbs.


        :return: The delete_on_termination of this InstanceBlockDeviceMappingEbs.
        :rtype: bool
        """
        return self._delete_on_termination

    @delete_on_termination.setter
    def delete_on_termination(self, delete_on_termination):
        """Sets the delete_on_termination of this InstanceBlockDeviceMappingEbs.


        :param delete_on_termination: The delete_on_termination of this InstanceBlockDeviceMappingEbs.
        :type delete_on_termination: bool
        """

        self._delete_on_termination = delete_on_termination

    @property
    def status(self):
        """Gets the status of this InstanceBlockDeviceMappingEbs.


        :return: The status of this InstanceBlockDeviceMappingEbs.
        :rtype: AttachmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InstanceBlockDeviceMappingEbs.


        :param status: The status of this InstanceBlockDeviceMappingEbs.
        :type status: AttachmentStatus
        """

        self._status = status

    @property
    def volume_id(self):
        """Gets the volume_id of this InstanceBlockDeviceMappingEbs.


        :return: The volume_id of this InstanceBlockDeviceMappingEbs.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this InstanceBlockDeviceMappingEbs.


        :param volume_id: The volume_id of this InstanceBlockDeviceMappingEbs.
        :type volume_id: str
        """

        self._volume_id = volume_id
