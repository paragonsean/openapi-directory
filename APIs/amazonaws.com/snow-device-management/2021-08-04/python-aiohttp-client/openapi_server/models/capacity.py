# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Capacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: int=None, name: str=None, total: int=None, unit: str=None, used: int=None):
        """Capacity - a model defined in OpenAPI

        :param available: The available of this Capacity.
        :param name: The name of this Capacity.
        :param total: The total of this Capacity.
        :param unit: The unit of this Capacity.
        :param used: The used of this Capacity.
        """
        self.openapi_types = {
            'available': int,
            'name': str,
            'total': int,
            'unit': str,
            'used': int
        }

        self.attribute_map = {
            'available': 'available',
            'name': 'name',
            'total': 'total',
            'unit': 'unit',
            'used': 'used'
        }

        self._available = available
        self._name = name
        self._total = total
        self._unit = unit
        self._used = used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Capacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Capacity of this Capacity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this Capacity.


        :return: The available of this Capacity.
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Capacity.


        :param available: The available of this Capacity.
        :type available: int
        """

        self._available = available

    @property
    def name(self):
        """Gets the name of this Capacity.


        :return: The name of this Capacity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Capacity.


        :param name: The name of this Capacity.
        :type name: str
        """

        self._name = name

    @property
    def total(self):
        """Gets the total of this Capacity.


        :return: The total of this Capacity.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Capacity.


        :param total: The total of this Capacity.
        :type total: int
        """

        self._total = total

    @property
    def unit(self):
        """Gets the unit of this Capacity.


        :return: The unit of this Capacity.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Capacity.


        :param unit: The unit of this Capacity.
        :type unit: str
        """

        self._unit = unit

    @property
    def used(self):
        """Gets the used of this Capacity.


        :return: The used of this Capacity.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this Capacity.


        :param used: The used of this Capacity.
        :type used: int
        """

        self._used = used
