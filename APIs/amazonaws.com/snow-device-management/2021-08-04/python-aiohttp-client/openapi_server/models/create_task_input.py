# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_task_input_command import CreateTaskInputCommand
from openapi_server import util


class CreateTaskInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, command: CreateTaskInputCommand=None, description: str=None, tags: Dict=None, targets: List=None):
        """CreateTaskInput - a model defined in OpenAPI

        :param client_token: The client_token of this CreateTaskInput.
        :param command: The command of this CreateTaskInput.
        :param description: The description of this CreateTaskInput.
        :param tags: The tags of this CreateTaskInput.
        :param targets: The targets of this CreateTaskInput.
        """
        self.openapi_types = {
            'client_token': str,
            'command': CreateTaskInputCommand,
            'description': str,
            'tags': Dict,
            'targets': List
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'command': 'command',
            'description': 'description',
            'tags': 'tags',
            'targets': 'targets'
        }

        self._client_token = client_token
        self._command = command
        self._description = description
        self._tags = tags
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTaskInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTaskInput of this CreateTaskInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateTaskInput.


        :return: The client_token of this CreateTaskInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateTaskInput.


        :param client_token: The client_token of this CreateTaskInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def command(self):
        """Gets the command of this CreateTaskInput.


        :return: The command of this CreateTaskInput.
        :rtype: CreateTaskInputCommand
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this CreateTaskInput.


        :param command: The command of this CreateTaskInput.
        :type command: CreateTaskInputCommand
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")

        self._command = command

    @property
    def description(self):
        """Gets the description of this CreateTaskInput.


        :return: The description of this CreateTaskInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTaskInput.


        :param description: The description of this CreateTaskInput.
        :type description: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateTaskInput.


        :return: The tags of this CreateTaskInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateTaskInput.


        :param tags: The tags of this CreateTaskInput.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def targets(self):
        """Gets the targets of this CreateTaskInput.


        :return: The targets of this CreateTaskInput.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this CreateTaskInput.


        :param targets: The targets of this CreateTaskInput.
        :type targets: List
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets
