# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_state_name import InstanceStateName
from openapi_server import util


class InstanceState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, name: InstanceStateName=None):
        """InstanceState - a model defined in OpenAPI

        :param code: The code of this InstanceState.
        :param name: The name of this InstanceState.
        """
        self.openapi_types = {
            'code': int,
            'name': InstanceStateName
        }

        self.attribute_map = {
            'code': 'code',
            'name': 'name'
        }

        self._code = code
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceState of this InstanceState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this InstanceState.


        :return: The code of this InstanceState.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InstanceState.


        :param code: The code of this InstanceState.
        :type code: int
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this InstanceState.


        :return: The name of this InstanceState.
        :rtype: InstanceStateName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstanceState.


        :param name: The name of this InstanceState.
        :type name: InstanceStateName
        """

        self._name = name
