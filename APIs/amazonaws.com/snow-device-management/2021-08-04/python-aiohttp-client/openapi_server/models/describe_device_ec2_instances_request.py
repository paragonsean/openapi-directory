# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeDeviceEc2InstancesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_ids: List[str]=None):
        """DescribeDeviceEc2InstancesRequest - a model defined in OpenAPI

        :param instance_ids: The instance_ids of this DescribeDeviceEc2InstancesRequest.
        """
        self.openapi_types = {
            'instance_ids': List[str]
        }

        self.attribute_map = {
            'instance_ids': 'instanceIds'
        }

        self._instance_ids = instance_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDeviceEc2InstancesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDeviceEc2Instances_request of this DescribeDeviceEc2InstancesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_ids(self):
        """Gets the instance_ids of this DescribeDeviceEc2InstancesRequest.

        A list of instance IDs associated with the managed device.

        :return: The instance_ids of this DescribeDeviceEc2InstancesRequest.
        :rtype: List[str]
        """
        return self._instance_ids

    @instance_ids.setter
    def instance_ids(self, instance_ids):
        """Sets the instance_ids of this DescribeDeviceEc2InstancesRequest.

        A list of instance IDs associated with the managed device.

        :param instance_ids: The instance_ids of this DescribeDeviceEc2InstancesRequest.
        :type instance_ids: List[str]
        """
        if instance_ids is None:
            raise ValueError("Invalid value for `instance_ids`, must not be `None`")

        self._instance_ids = instance_ids
