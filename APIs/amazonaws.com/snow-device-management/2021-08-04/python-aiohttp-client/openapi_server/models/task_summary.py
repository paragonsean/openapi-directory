# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_state import TaskState
from openapi_server import util


class TaskSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: TaskState=None, tags: Dict=None, task_arn: str=None, task_id: str=None):
        """TaskSummary - a model defined in OpenAPI

        :param state: The state of this TaskSummary.
        :param tags: The tags of this TaskSummary.
        :param task_arn: The task_arn of this TaskSummary.
        :param task_id: The task_id of this TaskSummary.
        """
        self.openapi_types = {
            'state': TaskState,
            'tags': Dict,
            'task_arn': str,
            'task_id': str
        }

        self.attribute_map = {
            'state': 'state',
            'tags': 'tags',
            'task_arn': 'taskArn',
            'task_id': 'taskId'
        }

        self._state = state
        self._tags = tags
        self._task_arn = task_arn
        self._task_id = task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskSummary of this TaskSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this TaskSummary.


        :return: The state of this TaskSummary.
        :rtype: TaskState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskSummary.


        :param state: The state of this TaskSummary.
        :type state: TaskState
        """

        self._state = state

    @property
    def tags(self):
        """Gets the tags of this TaskSummary.


        :return: The tags of this TaskSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TaskSummary.


        :param tags: The tags of this TaskSummary.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def task_arn(self):
        """Gets the task_arn of this TaskSummary.


        :return: The task_arn of this TaskSummary.
        :rtype: str
        """
        return self._task_arn

    @task_arn.setter
    def task_arn(self, task_arn):
        """Sets the task_arn of this TaskSummary.


        :param task_arn: The task_arn of this TaskSummary.
        :type task_arn: str
        """

        self._task_arn = task_arn

    @property
    def task_id(self):
        """Gets the task_id of this TaskSummary.


        :return: The task_id of this TaskSummary.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskSummary.


        :param task_id: The task_id of this TaskSummary.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id
