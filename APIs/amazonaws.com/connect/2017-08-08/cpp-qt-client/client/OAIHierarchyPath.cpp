/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHierarchyPath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHierarchyPath::OAIHierarchyPath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHierarchyPath::OAIHierarchyPath() {
    this->initializeModel();
}

OAIHierarchyPath::~OAIHierarchyPath() {}

void OAIHierarchyPath::initializeModel() {

    m_level_one_isSet = false;
    m_level_one_isValid = false;

    m_level_two_isSet = false;
    m_level_two_isValid = false;

    m_level_three_isSet = false;
    m_level_three_isValid = false;

    m_level_four_isSet = false;
    m_level_four_isValid = false;

    m_level_five_isSet = false;
    m_level_five_isValid = false;
}

void OAIHierarchyPath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHierarchyPath::fromJsonObject(QJsonObject json) {

    m_level_one_isValid = ::OpenAPI::fromJsonValue(m_level_one, json[QString("LevelOne")]);
    m_level_one_isSet = !json[QString("LevelOne")].isNull() && m_level_one_isValid;

    m_level_two_isValid = ::OpenAPI::fromJsonValue(m_level_two, json[QString("LevelTwo")]);
    m_level_two_isSet = !json[QString("LevelTwo")].isNull() && m_level_two_isValid;

    m_level_three_isValid = ::OpenAPI::fromJsonValue(m_level_three, json[QString("LevelThree")]);
    m_level_three_isSet = !json[QString("LevelThree")].isNull() && m_level_three_isValid;

    m_level_four_isValid = ::OpenAPI::fromJsonValue(m_level_four, json[QString("LevelFour")]);
    m_level_four_isSet = !json[QString("LevelFour")].isNull() && m_level_four_isValid;

    m_level_five_isValid = ::OpenAPI::fromJsonValue(m_level_five, json[QString("LevelFive")]);
    m_level_five_isSet = !json[QString("LevelFive")].isNull() && m_level_five_isValid;
}

QString OAIHierarchyPath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHierarchyPath::asJsonObject() const {
    QJsonObject obj;
    if (m_level_one.isSet()) {
        obj.insert(QString("LevelOne"), ::OpenAPI::toJsonValue(m_level_one));
    }
    if (m_level_two.isSet()) {
        obj.insert(QString("LevelTwo"), ::OpenAPI::toJsonValue(m_level_two));
    }
    if (m_level_three.isSet()) {
        obj.insert(QString("LevelThree"), ::OpenAPI::toJsonValue(m_level_three));
    }
    if (m_level_four.isSet()) {
        obj.insert(QString("LevelFour"), ::OpenAPI::toJsonValue(m_level_four));
    }
    if (m_level_five.isSet()) {
        obj.insert(QString("LevelFive"), ::OpenAPI::toJsonValue(m_level_five));
    }
    return obj;
}

OAIHierarchyPath_LevelOne OAIHierarchyPath::getLevelOne() const {
    return m_level_one;
}
void OAIHierarchyPath::setLevelOne(const OAIHierarchyPath_LevelOne &level_one) {
    m_level_one = level_one;
    m_level_one_isSet = true;
}

bool OAIHierarchyPath::is_level_one_Set() const{
    return m_level_one_isSet;
}

bool OAIHierarchyPath::is_level_one_Valid() const{
    return m_level_one_isValid;
}

OAIHierarchyPath_LevelTwo OAIHierarchyPath::getLevelTwo() const {
    return m_level_two;
}
void OAIHierarchyPath::setLevelTwo(const OAIHierarchyPath_LevelTwo &level_two) {
    m_level_two = level_two;
    m_level_two_isSet = true;
}

bool OAIHierarchyPath::is_level_two_Set() const{
    return m_level_two_isSet;
}

bool OAIHierarchyPath::is_level_two_Valid() const{
    return m_level_two_isValid;
}

OAIHierarchyPath_LevelThree OAIHierarchyPath::getLevelThree() const {
    return m_level_three;
}
void OAIHierarchyPath::setLevelThree(const OAIHierarchyPath_LevelThree &level_three) {
    m_level_three = level_three;
    m_level_three_isSet = true;
}

bool OAIHierarchyPath::is_level_three_Set() const{
    return m_level_three_isSet;
}

bool OAIHierarchyPath::is_level_three_Valid() const{
    return m_level_three_isValid;
}

OAIHierarchyPath_LevelFour OAIHierarchyPath::getLevelFour() const {
    return m_level_four;
}
void OAIHierarchyPath::setLevelFour(const OAIHierarchyPath_LevelFour &level_four) {
    m_level_four = level_four;
    m_level_four_isSet = true;
}

bool OAIHierarchyPath::is_level_four_Set() const{
    return m_level_four_isSet;
}

bool OAIHierarchyPath::is_level_four_Valid() const{
    return m_level_four_isValid;
}

OAIHierarchyPath_LevelFive OAIHierarchyPath::getLevelFive() const {
    return m_level_five;
}
void OAIHierarchyPath::setLevelFive(const OAIHierarchyPath_LevelFive &level_five) {
    m_level_five = level_five;
    m_level_five_isSet = true;
}

bool OAIHierarchyPath::is_level_five_Set() const{
    return m_level_five_isSet;
}

bool OAIHierarchyPath::is_level_five_Valid() const{
    return m_level_five_isValid;
}

bool OAIHierarchyPath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_level_one.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_two.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_three.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_four.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_five.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHierarchyPath::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
