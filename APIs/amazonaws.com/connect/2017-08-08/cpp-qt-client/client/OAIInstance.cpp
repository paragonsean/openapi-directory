/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_identity_management_type_isSet = false;
    m_identity_management_type_isValid = false;

    m_instance_alias_isSet = false;
    m_instance_alias_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_service_role_isSet = false;
    m_service_role_isValid = false;

    m_instance_status_isSet = false;
    m_instance_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_inbound_calls_enabled_isSet = false;
    m_inbound_calls_enabled_isValid = false;

    m_outbound_calls_enabled_isSet = false;
    m_outbound_calls_enabled_isValid = false;

    m_instance_access_url_isSet = false;
    m_instance_access_url_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_identity_management_type_isValid = ::OpenAPI::fromJsonValue(m_identity_management_type, json[QString("IdentityManagementType")]);
    m_identity_management_type_isSet = !json[QString("IdentityManagementType")].isNull() && m_identity_management_type_isValid;

    m_instance_alias_isValid = ::OpenAPI::fromJsonValue(m_instance_alias, json[QString("InstanceAlias")]);
    m_instance_alias_isSet = !json[QString("InstanceAlias")].isNull() && m_instance_alias_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_service_role_isValid = ::OpenAPI::fromJsonValue(m_service_role, json[QString("ServiceRole")]);
    m_service_role_isSet = !json[QString("ServiceRole")].isNull() && m_service_role_isValid;

    m_instance_status_isValid = ::OpenAPI::fromJsonValue(m_instance_status, json[QString("InstanceStatus")]);
    m_instance_status_isSet = !json[QString("InstanceStatus")].isNull() && m_instance_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_inbound_calls_enabled_isValid = ::OpenAPI::fromJsonValue(m_inbound_calls_enabled, json[QString("InboundCallsEnabled")]);
    m_inbound_calls_enabled_isSet = !json[QString("InboundCallsEnabled")].isNull() && m_inbound_calls_enabled_isValid;

    m_outbound_calls_enabled_isValid = ::OpenAPI::fromJsonValue(m_outbound_calls_enabled, json[QString("OutboundCallsEnabled")]);
    m_outbound_calls_enabled_isSet = !json[QString("OutboundCallsEnabled")].isNull() && m_outbound_calls_enabled_isValid;

    m_instance_access_url_isValid = ::OpenAPI::fromJsonValue(m_instance_access_url, json[QString("InstanceAccessUrl")]);
    m_instance_access_url_isSet = !json[QString("InstanceAccessUrl")].isNull() && m_instance_access_url_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_identity_management_type.isSet()) {
        obj.insert(QString("IdentityManagementType"), ::OpenAPI::toJsonValue(m_identity_management_type));
    }
    if (m_instance_alias_isSet) {
        obj.insert(QString("InstanceAlias"), ::OpenAPI::toJsonValue(m_instance_alias));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_service_role_isSet) {
        obj.insert(QString("ServiceRole"), ::OpenAPI::toJsonValue(m_service_role));
    }
    if (m_instance_status.isSet()) {
        obj.insert(QString("InstanceStatus"), ::OpenAPI::toJsonValue(m_instance_status));
    }
    if (m_status_reason.isSet()) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_inbound_calls_enabled_isSet) {
        obj.insert(QString("InboundCallsEnabled"), ::OpenAPI::toJsonValue(m_inbound_calls_enabled));
    }
    if (m_outbound_calls_enabled_isSet) {
        obj.insert(QString("OutboundCallsEnabled"), ::OpenAPI::toJsonValue(m_outbound_calls_enabled));
    }
    if (m_instance_access_url_isSet) {
        obj.insert(QString("InstanceAccessUrl"), ::OpenAPI::toJsonValue(m_instance_access_url));
    }
    return obj;
}

QString OAIInstance::getId() const {
    return m_id;
}
void OAIInstance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInstance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInstance::getArn() const {
    return m_arn;
}
void OAIInstance::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIInstance::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIInstance::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIDirectoryType OAIInstance::getIdentityManagementType() const {
    return m_identity_management_type;
}
void OAIInstance::setIdentityManagementType(const OAIDirectoryType &identity_management_type) {
    m_identity_management_type = identity_management_type;
    m_identity_management_type_isSet = true;
}

bool OAIInstance::is_identity_management_type_Set() const{
    return m_identity_management_type_isSet;
}

bool OAIInstance::is_identity_management_type_Valid() const{
    return m_identity_management_type_isValid;
}

QString OAIInstance::getInstanceAlias() const {
    return m_instance_alias;
}
void OAIInstance::setInstanceAlias(const QString &instance_alias) {
    m_instance_alias = instance_alias;
    m_instance_alias_isSet = true;
}

bool OAIInstance::is_instance_alias_Set() const{
    return m_instance_alias_isSet;
}

bool OAIInstance::is_instance_alias_Valid() const{
    return m_instance_alias_isValid;
}

QDateTime OAIInstance::getCreatedTime() const {
    return m_created_time;
}
void OAIInstance::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIInstance::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIInstance::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIInstance::getServiceRole() const {
    return m_service_role;
}
void OAIInstance::setServiceRole(const QString &service_role) {
    m_service_role = service_role;
    m_service_role_isSet = true;
}

bool OAIInstance::is_service_role_Set() const{
    return m_service_role_isSet;
}

bool OAIInstance::is_service_role_Valid() const{
    return m_service_role_isValid;
}

OAIInstanceStatus OAIInstance::getInstanceStatus() const {
    return m_instance_status;
}
void OAIInstance::setInstanceStatus(const OAIInstanceStatus &instance_status) {
    m_instance_status = instance_status;
    m_instance_status_isSet = true;
}

bool OAIInstance::is_instance_status_Set() const{
    return m_instance_status_isSet;
}

bool OAIInstance::is_instance_status_Valid() const{
    return m_instance_status_isValid;
}

OAIInstance_StatusReason OAIInstance::getStatusReason() const {
    return m_status_reason;
}
void OAIInstance::setStatusReason(const OAIInstance_StatusReason &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIInstance::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIInstance::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIInstance::getInboundCallsEnabled() const {
    return m_inbound_calls_enabled;
}
void OAIInstance::setInboundCallsEnabled(const bool &inbound_calls_enabled) {
    m_inbound_calls_enabled = inbound_calls_enabled;
    m_inbound_calls_enabled_isSet = true;
}

bool OAIInstance::is_inbound_calls_enabled_Set() const{
    return m_inbound_calls_enabled_isSet;
}

bool OAIInstance::is_inbound_calls_enabled_Valid() const{
    return m_inbound_calls_enabled_isValid;
}

bool OAIInstance::getOutboundCallsEnabled() const {
    return m_outbound_calls_enabled;
}
void OAIInstance::setOutboundCallsEnabled(const bool &outbound_calls_enabled) {
    m_outbound_calls_enabled = outbound_calls_enabled;
    m_outbound_calls_enabled_isSet = true;
}

bool OAIInstance::is_outbound_calls_enabled_Set() const{
    return m_outbound_calls_enabled_isSet;
}

bool OAIInstance::is_outbound_calls_enabled_Valid() const{
    return m_outbound_calls_enabled_isValid;
}

QString OAIInstance::getInstanceAccessUrl() const {
    return m_instance_access_url;
}
void OAIInstance::setInstanceAccessUrl(const QString &instance_access_url) {
    m_instance_access_url = instance_access_url;
    m_instance_access_url_isSet = true;
}

bool OAIInstance::is_instance_access_url_Set() const{
    return m_instance_access_url_isSet;
}

bool OAIInstance::is_instance_access_url_Valid() const{
    return m_instance_access_url_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_management_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_calls_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_calls_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_access_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
