/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipantTimerConfiguration_TimerValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipantTimerConfiguration_TimerValue::OAIParticipantTimerConfiguration_TimerValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipantTimerConfiguration_TimerValue::OAIParticipantTimerConfiguration_TimerValue() {
    this->initializeModel();
}

OAIParticipantTimerConfiguration_TimerValue::~OAIParticipantTimerConfiguration_TimerValue() {}

void OAIParticipantTimerConfiguration_TimerValue::initializeModel() {

    m_participant_timer_action_isSet = false;
    m_participant_timer_action_isValid = false;

    m_participant_timer_duration_in_minutes_isSet = false;
    m_participant_timer_duration_in_minutes_isValid = false;
}

void OAIParticipantTimerConfiguration_TimerValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipantTimerConfiguration_TimerValue::fromJsonObject(QJsonObject json) {

    m_participant_timer_action_isValid = ::OpenAPI::fromJsonValue(m_participant_timer_action, json[QString("ParticipantTimerAction")]);
    m_participant_timer_action_isSet = !json[QString("ParticipantTimerAction")].isNull() && m_participant_timer_action_isValid;

    m_participant_timer_duration_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_participant_timer_duration_in_minutes, json[QString("ParticipantTimerDurationInMinutes")]);
    m_participant_timer_duration_in_minutes_isSet = !json[QString("ParticipantTimerDurationInMinutes")].isNull() && m_participant_timer_duration_in_minutes_isValid;
}

QString OAIParticipantTimerConfiguration_TimerValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipantTimerConfiguration_TimerValue::asJsonObject() const {
    QJsonObject obj;
    if (m_participant_timer_action.isSet()) {
        obj.insert(QString("ParticipantTimerAction"), ::OpenAPI::toJsonValue(m_participant_timer_action));
    }
    if (m_participant_timer_duration_in_minutes_isSet) {
        obj.insert(QString("ParticipantTimerDurationInMinutes"), ::OpenAPI::toJsonValue(m_participant_timer_duration_in_minutes));
    }
    return obj;
}

OAIParticipantTimerAction OAIParticipantTimerConfiguration_TimerValue::getParticipantTimerAction() const {
    return m_participant_timer_action;
}
void OAIParticipantTimerConfiguration_TimerValue::setParticipantTimerAction(const OAIParticipantTimerAction &participant_timer_action) {
    m_participant_timer_action = participant_timer_action;
    m_participant_timer_action_isSet = true;
}

bool OAIParticipantTimerConfiguration_TimerValue::is_participant_timer_action_Set() const{
    return m_participant_timer_action_isSet;
}

bool OAIParticipantTimerConfiguration_TimerValue::is_participant_timer_action_Valid() const{
    return m_participant_timer_action_isValid;
}

qint32 OAIParticipantTimerConfiguration_TimerValue::getParticipantTimerDurationInMinutes() const {
    return m_participant_timer_duration_in_minutes;
}
void OAIParticipantTimerConfiguration_TimerValue::setParticipantTimerDurationInMinutes(const qint32 &participant_timer_duration_in_minutes) {
    m_participant_timer_duration_in_minutes = participant_timer_duration_in_minutes;
    m_participant_timer_duration_in_minutes_isSet = true;
}

bool OAIParticipantTimerConfiguration_TimerValue::is_participant_timer_duration_in_minutes_Set() const{
    return m_participant_timer_duration_in_minutes_isSet;
}

bool OAIParticipantTimerConfiguration_TimerValue::is_participant_timer_duration_in_minutes_Valid() const{
    return m_participant_timer_duration_in_minutes_isValid;
}

bool OAIParticipantTimerConfiguration_TimerValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_participant_timer_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_timer_duration_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipantTimerConfiguration_TimerValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
