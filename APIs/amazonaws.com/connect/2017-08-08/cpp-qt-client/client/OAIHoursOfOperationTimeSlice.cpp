/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHoursOfOperationTimeSlice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHoursOfOperationTimeSlice::OAIHoursOfOperationTimeSlice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHoursOfOperationTimeSlice::OAIHoursOfOperationTimeSlice() {
    this->initializeModel();
}

OAIHoursOfOperationTimeSlice::~OAIHoursOfOperationTimeSlice() {}

void OAIHoursOfOperationTimeSlice::initializeModel() {

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_minutes_isSet = false;
    m_minutes_isValid = false;
}

void OAIHoursOfOperationTimeSlice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHoursOfOperationTimeSlice::fromJsonObject(QJsonObject json) {

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("Hours")]);
    m_hours_isSet = !json[QString("Hours")].isNull() && m_hours_isValid;

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("Minutes")]);
    m_minutes_isSet = !json[QString("Minutes")].isNull() && m_minutes_isValid;
}

QString OAIHoursOfOperationTimeSlice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHoursOfOperationTimeSlice::asJsonObject() const {
    QJsonObject obj;
    if (m_hours_isSet) {
        obj.insert(QString("Hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_minutes_isSet) {
        obj.insert(QString("Minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    return obj;
}

qint32 OAIHoursOfOperationTimeSlice::getHours() const {
    return m_hours;
}
void OAIHoursOfOperationTimeSlice::setHours(const qint32 &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAIHoursOfOperationTimeSlice::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAIHoursOfOperationTimeSlice::is_hours_Valid() const{
    return m_hours_isValid;
}

qint32 OAIHoursOfOperationTimeSlice::getMinutes() const {
    return m_minutes;
}
void OAIHoursOfOperationTimeSlice::setMinutes(const qint32 &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAIHoursOfOperationTimeSlice::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAIHoursOfOperationTimeSlice::is_minutes_Valid() const{
    return m_minutes_isValid;
}

bool OAIHoursOfOperationTimeSlice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHoursOfOperationTimeSlice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hours_isValid && m_minutes_isValid && true;
}

} // namespace OpenAPI
