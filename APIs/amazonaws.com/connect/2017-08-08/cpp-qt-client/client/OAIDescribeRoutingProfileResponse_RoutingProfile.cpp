/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRoutingProfileResponse_RoutingProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRoutingProfileResponse_RoutingProfile::OAIDescribeRoutingProfileResponse_RoutingProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRoutingProfileResponse_RoutingProfile::OAIDescribeRoutingProfileResponse_RoutingProfile() {
    this->initializeModel();
}

OAIDescribeRoutingProfileResponse_RoutingProfile::~OAIDescribeRoutingProfileResponse_RoutingProfile() {}

void OAIDescribeRoutingProfileResponse_RoutingProfile::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_routing_profile_arn_isSet = false;
    m_routing_profile_arn_isValid = false;

    m_routing_profile_id_isSet = false;
    m_routing_profile_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_media_concurrencies_isSet = false;
    m_media_concurrencies_isValid = false;

    m_default_outbound_queue_id_isSet = false;
    m_default_outbound_queue_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_number_of_associated_queues_isSet = false;
    m_number_of_associated_queues_isValid = false;

    m_number_of_associated_users_isSet = false;
    m_number_of_associated_users_isValid = false;

    m_agent_availability_timer_isSet = false;
    m_agent_availability_timer_isValid = false;
}

void OAIDescribeRoutingProfileResponse_RoutingProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRoutingProfileResponse_RoutingProfile::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_routing_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_routing_profile_arn, json[QString("RoutingProfileArn")]);
    m_routing_profile_arn_isSet = !json[QString("RoutingProfileArn")].isNull() && m_routing_profile_arn_isValid;

    m_routing_profile_id_isValid = ::OpenAPI::fromJsonValue(m_routing_profile_id, json[QString("RoutingProfileId")]);
    m_routing_profile_id_isSet = !json[QString("RoutingProfileId")].isNull() && m_routing_profile_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_media_concurrencies_isValid = ::OpenAPI::fromJsonValue(m_media_concurrencies, json[QString("MediaConcurrencies")]);
    m_media_concurrencies_isSet = !json[QString("MediaConcurrencies")].isNull() && m_media_concurrencies_isValid;

    m_default_outbound_queue_id_isValid = ::OpenAPI::fromJsonValue(m_default_outbound_queue_id, json[QString("DefaultOutboundQueueId")]);
    m_default_outbound_queue_id_isSet = !json[QString("DefaultOutboundQueueId")].isNull() && m_default_outbound_queue_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_number_of_associated_queues_isValid = ::OpenAPI::fromJsonValue(m_number_of_associated_queues, json[QString("NumberOfAssociatedQueues")]);
    m_number_of_associated_queues_isSet = !json[QString("NumberOfAssociatedQueues")].isNull() && m_number_of_associated_queues_isValid;

    m_number_of_associated_users_isValid = ::OpenAPI::fromJsonValue(m_number_of_associated_users, json[QString("NumberOfAssociatedUsers")]);
    m_number_of_associated_users_isSet = !json[QString("NumberOfAssociatedUsers")].isNull() && m_number_of_associated_users_isValid;

    m_agent_availability_timer_isValid = ::OpenAPI::fromJsonValue(m_agent_availability_timer, json[QString("AgentAvailabilityTimer")]);
    m_agent_availability_timer_isSet = !json[QString("AgentAvailabilityTimer")].isNull() && m_agent_availability_timer_isValid;
}

QString OAIDescribeRoutingProfileResponse_RoutingProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRoutingProfileResponse_RoutingProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_routing_profile_arn_isSet) {
        obj.insert(QString("RoutingProfileArn"), ::OpenAPI::toJsonValue(m_routing_profile_arn));
    }
    if (m_routing_profile_id_isSet) {
        obj.insert(QString("RoutingProfileId"), ::OpenAPI::toJsonValue(m_routing_profile_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_media_concurrencies.isSet()) {
        obj.insert(QString("MediaConcurrencies"), ::OpenAPI::toJsonValue(m_media_concurrencies));
    }
    if (m_default_outbound_queue_id_isSet) {
        obj.insert(QString("DefaultOutboundQueueId"), ::OpenAPI::toJsonValue(m_default_outbound_queue_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_number_of_associated_queues_isSet) {
        obj.insert(QString("NumberOfAssociatedQueues"), ::OpenAPI::toJsonValue(m_number_of_associated_queues));
    }
    if (m_number_of_associated_users_isSet) {
        obj.insert(QString("NumberOfAssociatedUsers"), ::OpenAPI::toJsonValue(m_number_of_associated_users));
    }
    if (m_agent_availability_timer.isSet()) {
        obj.insert(QString("AgentAvailabilityTimer"), ::OpenAPI::toJsonValue(m_agent_availability_timer));
    }
    return obj;
}

QString OAIDescribeRoutingProfileResponse_RoutingProfile::getInstanceId() const {
    return m_instance_id;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIDescribeRoutingProfileResponse_RoutingProfile::getName() const {
    return m_name;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeRoutingProfileResponse_RoutingProfile::getRoutingProfileArn() const {
    return m_routing_profile_arn;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setRoutingProfileArn(const QString &routing_profile_arn) {
    m_routing_profile_arn = routing_profile_arn;
    m_routing_profile_arn_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_routing_profile_arn_Set() const{
    return m_routing_profile_arn_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_routing_profile_arn_Valid() const{
    return m_routing_profile_arn_isValid;
}

QString OAIDescribeRoutingProfileResponse_RoutingProfile::getRoutingProfileId() const {
    return m_routing_profile_id;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setRoutingProfileId(const QString &routing_profile_id) {
    m_routing_profile_id = routing_profile_id;
    m_routing_profile_id_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_routing_profile_id_Set() const{
    return m_routing_profile_id_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_routing_profile_id_Valid() const{
    return m_routing_profile_id_isValid;
}

QString OAIDescribeRoutingProfileResponse_RoutingProfile::getDescription() const {
    return m_description;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIDescribeRoutingProfileResponse_RoutingProfile::getMediaConcurrencies() const {
    return m_media_concurrencies;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setMediaConcurrencies(const QList &media_concurrencies) {
    m_media_concurrencies = media_concurrencies;
    m_media_concurrencies_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_media_concurrencies_Set() const{
    return m_media_concurrencies_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_media_concurrencies_Valid() const{
    return m_media_concurrencies_isValid;
}

QString OAIDescribeRoutingProfileResponse_RoutingProfile::getDefaultOutboundQueueId() const {
    return m_default_outbound_queue_id;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setDefaultOutboundQueueId(const QString &default_outbound_queue_id) {
    m_default_outbound_queue_id = default_outbound_queue_id;
    m_default_outbound_queue_id_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_default_outbound_queue_id_Set() const{
    return m_default_outbound_queue_id_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_default_outbound_queue_id_Valid() const{
    return m_default_outbound_queue_id_isValid;
}

QMap OAIDescribeRoutingProfileResponse_RoutingProfile::getTags() const {
    return m_tags;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIDescribeRoutingProfileResponse_RoutingProfile::getNumberOfAssociatedQueues() const {
    return m_number_of_associated_queues;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setNumberOfAssociatedQueues(const qint32 &number_of_associated_queues) {
    m_number_of_associated_queues = number_of_associated_queues;
    m_number_of_associated_queues_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_number_of_associated_queues_Set() const{
    return m_number_of_associated_queues_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_number_of_associated_queues_Valid() const{
    return m_number_of_associated_queues_isValid;
}

qint32 OAIDescribeRoutingProfileResponse_RoutingProfile::getNumberOfAssociatedUsers() const {
    return m_number_of_associated_users;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setNumberOfAssociatedUsers(const qint32 &number_of_associated_users) {
    m_number_of_associated_users = number_of_associated_users;
    m_number_of_associated_users_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_number_of_associated_users_Set() const{
    return m_number_of_associated_users_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_number_of_associated_users_Valid() const{
    return m_number_of_associated_users_isValid;
}

OAIAgentAvailabilityTimer OAIDescribeRoutingProfileResponse_RoutingProfile::getAgentAvailabilityTimer() const {
    return m_agent_availability_timer;
}
void OAIDescribeRoutingProfileResponse_RoutingProfile::setAgentAvailabilityTimer(const OAIAgentAvailabilityTimer &agent_availability_timer) {
    m_agent_availability_timer = agent_availability_timer;
    m_agent_availability_timer_isSet = true;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_agent_availability_timer_Set() const{
    return m_agent_availability_timer_isSet;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::is_agent_availability_timer_Valid() const{
    return m_agent_availability_timer_isValid;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_concurrencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_outbound_queue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_associated_queues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_associated_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_availability_timer.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRoutingProfileResponse_RoutingProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
