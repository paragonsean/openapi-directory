/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoricalMetricResult_Dimensions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoricalMetricResult_Dimensions::OAIHistoricalMetricResult_Dimensions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoricalMetricResult_Dimensions::OAIHistoricalMetricResult_Dimensions() {
    this->initializeModel();
}

OAIHistoricalMetricResult_Dimensions::~OAIHistoricalMetricResult_Dimensions() {}

void OAIHistoricalMetricResult_Dimensions::initializeModel() {

    m_queue_isSet = false;
    m_queue_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_routing_profile_isSet = false;
    m_routing_profile_isValid = false;
}

void OAIHistoricalMetricResult_Dimensions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoricalMetricResult_Dimensions::fromJsonObject(QJsonObject json) {

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("Queue")]);
    m_queue_isSet = !json[QString("Queue")].isNull() && m_queue_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_routing_profile_isValid = ::OpenAPI::fromJsonValue(m_routing_profile, json[QString("RoutingProfile")]);
    m_routing_profile_isSet = !json[QString("RoutingProfile")].isNull() && m_routing_profile_isValid;
}

QString OAIHistoricalMetricResult_Dimensions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoricalMetricResult_Dimensions::asJsonObject() const {
    QJsonObject obj;
    if (m_queue.isSet()) {
        obj.insert(QString("Queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_routing_profile.isSet()) {
        obj.insert(QString("RoutingProfile"), ::OpenAPI::toJsonValue(m_routing_profile));
    }
    return obj;
}

OAIDimensions_Queue OAIHistoricalMetricResult_Dimensions::getQueue() const {
    return m_queue;
}
void OAIHistoricalMetricResult_Dimensions::setQueue(const OAIDimensions_Queue &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIHistoricalMetricResult_Dimensions::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIHistoricalMetricResult_Dimensions::is_queue_Valid() const{
    return m_queue_isValid;
}

OAIChannel OAIHistoricalMetricResult_Dimensions::getChannel() const {
    return m_channel;
}
void OAIHistoricalMetricResult_Dimensions::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIHistoricalMetricResult_Dimensions::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIHistoricalMetricResult_Dimensions::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIRoutingProfileReference OAIHistoricalMetricResult_Dimensions::getRoutingProfile() const {
    return m_routing_profile;
}
void OAIHistoricalMetricResult_Dimensions::setRoutingProfile(const OAIRoutingProfileReference &routing_profile) {
    m_routing_profile = routing_profile;
    m_routing_profile_isSet = true;
}

bool OAIHistoricalMetricResult_Dimensions::is_routing_profile_Set() const{
    return m_routing_profile_isSet;
}

bool OAIHistoricalMetricResult_Dimensions::is_routing_profile_Valid() const{
    return m_routing_profile_isValid;
}

bool OAIHistoricalMetricResult_Dimensions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_queue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoricalMetricResult_Dimensions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
