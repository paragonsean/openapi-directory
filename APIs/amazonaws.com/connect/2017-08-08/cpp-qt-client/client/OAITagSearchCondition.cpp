/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagSearchCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagSearchCondition::OAITagSearchCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagSearchCondition::OAITagSearchCondition() {
    this->initializeModel();
}

OAITagSearchCondition::~OAITagSearchCondition() {}

void OAITagSearchCondition::initializeModel() {

    m_tag_key_isSet = false;
    m_tag_key_isValid = false;

    m_tag_value_isSet = false;
    m_tag_value_isValid = false;

    m_tag_key_comparison_type_isSet = false;
    m_tag_key_comparison_type_isValid = false;

    m_tag_value_comparison_type_isSet = false;
    m_tag_value_comparison_type_isValid = false;
}

void OAITagSearchCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagSearchCondition::fromJsonObject(QJsonObject json) {

    m_tag_key_isValid = ::OpenAPI::fromJsonValue(m_tag_key, json[QString("tagKey")]);
    m_tag_key_isSet = !json[QString("tagKey")].isNull() && m_tag_key_isValid;

    m_tag_value_isValid = ::OpenAPI::fromJsonValue(m_tag_value, json[QString("tagValue")]);
    m_tag_value_isSet = !json[QString("tagValue")].isNull() && m_tag_value_isValid;

    m_tag_key_comparison_type_isValid = ::OpenAPI::fromJsonValue(m_tag_key_comparison_type, json[QString("tagKeyComparisonType")]);
    m_tag_key_comparison_type_isSet = !json[QString("tagKeyComparisonType")].isNull() && m_tag_key_comparison_type_isValid;

    m_tag_value_comparison_type_isValid = ::OpenAPI::fromJsonValue(m_tag_value_comparison_type, json[QString("tagValueComparisonType")]);
    m_tag_value_comparison_type_isSet = !json[QString("tagValueComparisonType")].isNull() && m_tag_value_comparison_type_isValid;
}

QString OAITagSearchCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagSearchCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_tag_key_isSet) {
        obj.insert(QString("tagKey"), ::OpenAPI::toJsonValue(m_tag_key));
    }
    if (m_tag_value_isSet) {
        obj.insert(QString("tagValue"), ::OpenAPI::toJsonValue(m_tag_value));
    }
    if (m_tag_key_comparison_type.isSet()) {
        obj.insert(QString("tagKeyComparisonType"), ::OpenAPI::toJsonValue(m_tag_key_comparison_type));
    }
    if (m_tag_value_comparison_type.isSet()) {
        obj.insert(QString("tagValueComparisonType"), ::OpenAPI::toJsonValue(m_tag_value_comparison_type));
    }
    return obj;
}

QString OAITagSearchCondition::getTagKey() const {
    return m_tag_key;
}
void OAITagSearchCondition::setTagKey(const QString &tag_key) {
    m_tag_key = tag_key;
    m_tag_key_isSet = true;
}

bool OAITagSearchCondition::is_tag_key_Set() const{
    return m_tag_key_isSet;
}

bool OAITagSearchCondition::is_tag_key_Valid() const{
    return m_tag_key_isValid;
}

QString OAITagSearchCondition::getTagValue() const {
    return m_tag_value;
}
void OAITagSearchCondition::setTagValue(const QString &tag_value) {
    m_tag_value = tag_value;
    m_tag_value_isSet = true;
}

bool OAITagSearchCondition::is_tag_value_Set() const{
    return m_tag_value_isSet;
}

bool OAITagSearchCondition::is_tag_value_Valid() const{
    return m_tag_value_isValid;
}

OAIStringComparisonType OAITagSearchCondition::getTagKeyComparisonType() const {
    return m_tag_key_comparison_type;
}
void OAITagSearchCondition::setTagKeyComparisonType(const OAIStringComparisonType &tag_key_comparison_type) {
    m_tag_key_comparison_type = tag_key_comparison_type;
    m_tag_key_comparison_type_isSet = true;
}

bool OAITagSearchCondition::is_tag_key_comparison_type_Set() const{
    return m_tag_key_comparison_type_isSet;
}

bool OAITagSearchCondition::is_tag_key_comparison_type_Valid() const{
    return m_tag_key_comparison_type_isValid;
}

OAIStringComparisonType OAITagSearchCondition::getTagValueComparisonType() const {
    return m_tag_value_comparison_type;
}
void OAITagSearchCondition::setTagValueComparisonType(const OAIStringComparisonType &tag_value_comparison_type) {
    m_tag_value_comparison_type = tag_value_comparison_type;
    m_tag_value_comparison_type_isSet = true;
}

bool OAITagSearchCondition::is_tag_value_comparison_type_Set() const{
    return m_tag_value_comparison_type_isSet;
}

bool OAITagSearchCondition::is_tag_value_comparison_type_Valid() const{
    return m_tag_value_comparison_type_isValid;
}

bool OAITagSearchCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tag_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_key_comparison_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_value_comparison_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagSearchCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
