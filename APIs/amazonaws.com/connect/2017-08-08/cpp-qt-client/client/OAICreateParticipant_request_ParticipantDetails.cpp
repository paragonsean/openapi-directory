/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateParticipant_request_ParticipantDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateParticipant_request_ParticipantDetails::OAICreateParticipant_request_ParticipantDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateParticipant_request_ParticipantDetails::OAICreateParticipant_request_ParticipantDetails() {
    this->initializeModel();
}

OAICreateParticipant_request_ParticipantDetails::~OAICreateParticipant_request_ParticipantDetails() {}

void OAICreateParticipant_request_ParticipantDetails::initializeModel() {

    m_participant_role_isSet = false;
    m_participant_role_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;
}

void OAICreateParticipant_request_ParticipantDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateParticipant_request_ParticipantDetails::fromJsonObject(QJsonObject json) {

    m_participant_role_isValid = ::OpenAPI::fromJsonValue(m_participant_role, json[QString("ParticipantRole")]);
    m_participant_role_isSet = !json[QString("ParticipantRole")].isNull() && m_participant_role_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;
}

QString OAICreateParticipant_request_ParticipantDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateParticipant_request_ParticipantDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_participant_role.isSet()) {
        obj.insert(QString("ParticipantRole"), ::OpenAPI::toJsonValue(m_participant_role));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    return obj;
}

OAIParticipantRole OAICreateParticipant_request_ParticipantDetails::getParticipantRole() const {
    return m_participant_role;
}
void OAICreateParticipant_request_ParticipantDetails::setParticipantRole(const OAIParticipantRole &participant_role) {
    m_participant_role = participant_role;
    m_participant_role_isSet = true;
}

bool OAICreateParticipant_request_ParticipantDetails::is_participant_role_Set() const{
    return m_participant_role_isSet;
}

bool OAICreateParticipant_request_ParticipantDetails::is_participant_role_Valid() const{
    return m_participant_role_isValid;
}

QString OAICreateParticipant_request_ParticipantDetails::getDisplayName() const {
    return m_display_name;
}
void OAICreateParticipant_request_ParticipantDetails::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateParticipant_request_ParticipantDetails::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateParticipant_request_ParticipantDetails::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAICreateParticipant_request_ParticipantDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_participant_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateParticipant_request_ParticipantDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
