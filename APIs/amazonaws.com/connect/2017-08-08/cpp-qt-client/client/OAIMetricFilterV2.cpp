/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricFilterV2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricFilterV2::OAIMetricFilterV2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricFilterV2::OAIMetricFilterV2() {
    this->initializeModel();
}

OAIMetricFilterV2::~OAIMetricFilterV2() {}

void OAIMetricFilterV2::initializeModel() {

    m_metric_filter_key_isSet = false;
    m_metric_filter_key_isValid = false;

    m_metric_filter_values_isSet = false;
    m_metric_filter_values_isValid = false;
}

void OAIMetricFilterV2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricFilterV2::fromJsonObject(QJsonObject json) {

    m_metric_filter_key_isValid = ::OpenAPI::fromJsonValue(m_metric_filter_key, json[QString("MetricFilterKey")]);
    m_metric_filter_key_isSet = !json[QString("MetricFilterKey")].isNull() && m_metric_filter_key_isValid;

    m_metric_filter_values_isValid = ::OpenAPI::fromJsonValue(m_metric_filter_values, json[QString("MetricFilterValues")]);
    m_metric_filter_values_isSet = !json[QString("MetricFilterValues")].isNull() && m_metric_filter_values_isValid;
}

QString OAIMetricFilterV2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricFilterV2::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_filter_key_isSet) {
        obj.insert(QString("MetricFilterKey"), ::OpenAPI::toJsonValue(m_metric_filter_key));
    }
    if (m_metric_filter_values.isSet()) {
        obj.insert(QString("MetricFilterValues"), ::OpenAPI::toJsonValue(m_metric_filter_values));
    }
    return obj;
}

QString OAIMetricFilterV2::getMetricFilterKey() const {
    return m_metric_filter_key;
}
void OAIMetricFilterV2::setMetricFilterKey(const QString &metric_filter_key) {
    m_metric_filter_key = metric_filter_key;
    m_metric_filter_key_isSet = true;
}

bool OAIMetricFilterV2::is_metric_filter_key_Set() const{
    return m_metric_filter_key_isSet;
}

bool OAIMetricFilterV2::is_metric_filter_key_Valid() const{
    return m_metric_filter_key_isValid;
}

QList OAIMetricFilterV2::getMetricFilterValues() const {
    return m_metric_filter_values;
}
void OAIMetricFilterV2::setMetricFilterValues(const QList &metric_filter_values) {
    m_metric_filter_values = metric_filter_values;
    m_metric_filter_values_isSet = true;
}

bool OAIMetricFilterV2::is_metric_filter_values_Set() const{
    return m_metric_filter_values_isSet;
}

bool OAIMetricFilterV2::is_metric_filter_values_Valid() const{
    return m_metric_filter_values_isValid;
}

bool OAIMetricFilterV2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_filter_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_filter_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricFilterV2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
