/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserData::OAIUserData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserData::OAIUserData() {
    this->initializeModel();
}

OAIUserData::~OAIUserData() {}

void OAIUserData::initializeModel() {

    m_user_isSet = false;
    m_user_isValid = false;

    m_routing_profile_isSet = false;
    m_routing_profile_isValid = false;

    m_hierarchy_path_isSet = false;
    m_hierarchy_path_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_available_slots_by_channel_isSet = false;
    m_available_slots_by_channel_isValid = false;

    m_max_slots_by_channel_isSet = false;
    m_max_slots_by_channel_isValid = false;

    m_active_slots_by_channel_isSet = false;
    m_active_slots_by_channel_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_next_status_isSet = false;
    m_next_status_isValid = false;
}

void OAIUserData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserData::fromJsonObject(QJsonObject json) {

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_routing_profile_isValid = ::OpenAPI::fromJsonValue(m_routing_profile, json[QString("RoutingProfile")]);
    m_routing_profile_isSet = !json[QString("RoutingProfile")].isNull() && m_routing_profile_isValid;

    m_hierarchy_path_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_path, json[QString("HierarchyPath")]);
    m_hierarchy_path_isSet = !json[QString("HierarchyPath")].isNull() && m_hierarchy_path_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_available_slots_by_channel_isValid = ::OpenAPI::fromJsonValue(m_available_slots_by_channel, json[QString("AvailableSlotsByChannel")]);
    m_available_slots_by_channel_isSet = !json[QString("AvailableSlotsByChannel")].isNull() && m_available_slots_by_channel_isValid;

    m_max_slots_by_channel_isValid = ::OpenAPI::fromJsonValue(m_max_slots_by_channel, json[QString("MaxSlotsByChannel")]);
    m_max_slots_by_channel_isSet = !json[QString("MaxSlotsByChannel")].isNull() && m_max_slots_by_channel_isValid;

    m_active_slots_by_channel_isValid = ::OpenAPI::fromJsonValue(m_active_slots_by_channel, json[QString("ActiveSlotsByChannel")]);
    m_active_slots_by_channel_isSet = !json[QString("ActiveSlotsByChannel")].isNull() && m_active_slots_by_channel_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("Contacts")]);
    m_contacts_isSet = !json[QString("Contacts")].isNull() && m_contacts_isValid;

    m_next_status_isValid = ::OpenAPI::fromJsonValue(m_next_status, json[QString("NextStatus")]);
    m_next_status_isSet = !json[QString("NextStatus")].isNull() && m_next_status_isValid;
}

QString OAIUserData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserData::asJsonObject() const {
    QJsonObject obj;
    if (m_user.isSet()) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_routing_profile.isSet()) {
        obj.insert(QString("RoutingProfile"), ::OpenAPI::toJsonValue(m_routing_profile));
    }
    if (m_hierarchy_path.isSet()) {
        obj.insert(QString("HierarchyPath"), ::OpenAPI::toJsonValue(m_hierarchy_path));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_available_slots_by_channel.isSet()) {
        obj.insert(QString("AvailableSlotsByChannel"), ::OpenAPI::toJsonValue(m_available_slots_by_channel));
    }
    if (m_max_slots_by_channel.isSet()) {
        obj.insert(QString("MaxSlotsByChannel"), ::OpenAPI::toJsonValue(m_max_slots_by_channel));
    }
    if (m_active_slots_by_channel.isSet()) {
        obj.insert(QString("ActiveSlotsByChannel"), ::OpenAPI::toJsonValue(m_active_slots_by_channel));
    }
    if (m_contacts.isSet()) {
        obj.insert(QString("Contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_next_status_isSet) {
        obj.insert(QString("NextStatus"), ::OpenAPI::toJsonValue(m_next_status));
    }
    return obj;
}

OAIUserData_User OAIUserData::getUser() const {
    return m_user;
}
void OAIUserData::setUser(const OAIUserData_User &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUserData::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUserData::is_user_Valid() const{
    return m_user_isValid;
}

OAIUserData_RoutingProfile OAIUserData::getRoutingProfile() const {
    return m_routing_profile;
}
void OAIUserData::setRoutingProfile(const OAIUserData_RoutingProfile &routing_profile) {
    m_routing_profile = routing_profile;
    m_routing_profile_isSet = true;
}

bool OAIUserData::is_routing_profile_Set() const{
    return m_routing_profile_isSet;
}

bool OAIUserData::is_routing_profile_Valid() const{
    return m_routing_profile_isValid;
}

OAIUserData_HierarchyPath OAIUserData::getHierarchyPath() const {
    return m_hierarchy_path;
}
void OAIUserData::setHierarchyPath(const OAIUserData_HierarchyPath &hierarchy_path) {
    m_hierarchy_path = hierarchy_path;
    m_hierarchy_path_isSet = true;
}

bool OAIUserData::is_hierarchy_path_Set() const{
    return m_hierarchy_path_isSet;
}

bool OAIUserData::is_hierarchy_path_Valid() const{
    return m_hierarchy_path_isValid;
}

OAIUserData_Status OAIUserData::getStatus() const {
    return m_status;
}
void OAIUserData::setStatus(const OAIUserData_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserData::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIUserData::getAvailableSlotsByChannel() const {
    return m_available_slots_by_channel;
}
void OAIUserData::setAvailableSlotsByChannel(const QMap &available_slots_by_channel) {
    m_available_slots_by_channel = available_slots_by_channel;
    m_available_slots_by_channel_isSet = true;
}

bool OAIUserData::is_available_slots_by_channel_Set() const{
    return m_available_slots_by_channel_isSet;
}

bool OAIUserData::is_available_slots_by_channel_Valid() const{
    return m_available_slots_by_channel_isValid;
}

QMap OAIUserData::getMaxSlotsByChannel() const {
    return m_max_slots_by_channel;
}
void OAIUserData::setMaxSlotsByChannel(const QMap &max_slots_by_channel) {
    m_max_slots_by_channel = max_slots_by_channel;
    m_max_slots_by_channel_isSet = true;
}

bool OAIUserData::is_max_slots_by_channel_Set() const{
    return m_max_slots_by_channel_isSet;
}

bool OAIUserData::is_max_slots_by_channel_Valid() const{
    return m_max_slots_by_channel_isValid;
}

QMap OAIUserData::getActiveSlotsByChannel() const {
    return m_active_slots_by_channel;
}
void OAIUserData::setActiveSlotsByChannel(const QMap &active_slots_by_channel) {
    m_active_slots_by_channel = active_slots_by_channel;
    m_active_slots_by_channel_isSet = true;
}

bool OAIUserData::is_active_slots_by_channel_Set() const{
    return m_active_slots_by_channel_isSet;
}

bool OAIUserData::is_active_slots_by_channel_Valid() const{
    return m_active_slots_by_channel_isValid;
}

QList OAIUserData::getContacts() const {
    return m_contacts;
}
void OAIUserData::setContacts(const QList &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIUserData::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIUserData::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QString OAIUserData::getNextStatus() const {
    return m_next_status;
}
void OAIUserData::setNextStatus(const QString &next_status) {
    m_next_status = next_status;
    m_next_status_isSet = true;
}

bool OAIUserData::is_next_status_Set() const{
    return m_next_status_isSet;
}

bool OAIUserData::is_next_status_Valid() const{
    return m_next_status_isValid;
}

bool OAIUserData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_slots_by_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_slots_by_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_slots_by_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
