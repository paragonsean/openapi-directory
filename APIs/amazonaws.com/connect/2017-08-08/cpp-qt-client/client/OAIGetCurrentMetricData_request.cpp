/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCurrentMetricData_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCurrentMetricData_request::OAIGetCurrentMetricData_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCurrentMetricData_request::OAIGetCurrentMetricData_request() {
    this->initializeModel();
}

OAIGetCurrentMetricData_request::~OAIGetCurrentMetricData_request() {}

void OAIGetCurrentMetricData_request::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_groupings_isSet = false;
    m_groupings_isValid = false;

    m_current_metrics_isSet = false;
    m_current_metrics_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_sort_criteria_isSet = false;
    m_sort_criteria_isValid = false;
}

void OAIGetCurrentMetricData_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCurrentMetricData_request::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_groupings_isValid = ::OpenAPI::fromJsonValue(m_groupings, json[QString("Groupings")]);
    m_groupings_isSet = !json[QString("Groupings")].isNull() && m_groupings_isValid;

    m_current_metrics_isValid = ::OpenAPI::fromJsonValue(m_current_metrics, json[QString("CurrentMetrics")]);
    m_current_metrics_isSet = !json[QString("CurrentMetrics")].isNull() && m_current_metrics_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_sort_criteria_isValid = ::OpenAPI::fromJsonValue(m_sort_criteria, json[QString("SortCriteria")]);
    m_sort_criteria_isSet = !json[QString("SortCriteria")].isNull() && m_sort_criteria_isValid;
}

QString OAIGetCurrentMetricData_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCurrentMetricData_request::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_groupings.size() > 0) {
        obj.insert(QString("Groupings"), ::OpenAPI::toJsonValue(m_groupings));
    }
    if (m_current_metrics.size() > 0) {
        obj.insert(QString("CurrentMetrics"), ::OpenAPI::toJsonValue(m_current_metrics));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_sort_criteria.size() > 0) {
        obj.insert(QString("SortCriteria"), ::OpenAPI::toJsonValue(m_sort_criteria));
    }
    return obj;
}

OAIGetCurrentMetricData_request_Filters OAIGetCurrentMetricData_request::getFilters() const {
    return m_filters;
}
void OAIGetCurrentMetricData_request::setFilters(const OAIGetCurrentMetricData_request_Filters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIGetCurrentMetricData_request::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIGetCurrentMetricData_request::is_filters_Valid() const{
    return m_filters_isValid;
}

QList<OAIGrouping> OAIGetCurrentMetricData_request::getGroupings() const {
    return m_groupings;
}
void OAIGetCurrentMetricData_request::setGroupings(const QList<OAIGrouping> &groupings) {
    m_groupings = groupings;
    m_groupings_isSet = true;
}

bool OAIGetCurrentMetricData_request::is_groupings_Set() const{
    return m_groupings_isSet;
}

bool OAIGetCurrentMetricData_request::is_groupings_Valid() const{
    return m_groupings_isValid;
}

QList<OAICurrentMetric> OAIGetCurrentMetricData_request::getCurrentMetrics() const {
    return m_current_metrics;
}
void OAIGetCurrentMetricData_request::setCurrentMetrics(const QList<OAICurrentMetric> &current_metrics) {
    m_current_metrics = current_metrics;
    m_current_metrics_isSet = true;
}

bool OAIGetCurrentMetricData_request::is_current_metrics_Set() const{
    return m_current_metrics_isSet;
}

bool OAIGetCurrentMetricData_request::is_current_metrics_Valid() const{
    return m_current_metrics_isValid;
}

QString OAIGetCurrentMetricData_request::getNextToken() const {
    return m_next_token;
}
void OAIGetCurrentMetricData_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetCurrentMetricData_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetCurrentMetricData_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetCurrentMetricData_request::getMaxResults() const {
    return m_max_results;
}
void OAIGetCurrentMetricData_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetCurrentMetricData_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetCurrentMetricData_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QList<OAICurrentMetricSortCriteria> OAIGetCurrentMetricData_request::getSortCriteria() const {
    return m_sort_criteria;
}
void OAIGetCurrentMetricData_request::setSortCriteria(const QList<OAICurrentMetricSortCriteria> &sort_criteria) {
    m_sort_criteria = sort_criteria;
    m_sort_criteria_isSet = true;
}

bool OAIGetCurrentMetricData_request::is_sort_criteria_Set() const{
    return m_sort_criteria_isSet;
}

bool OAIGetCurrentMetricData_request::is_sort_criteria_Valid() const{
    return m_sort_criteria_isValid;
}

bool OAIGetCurrentMetricData_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_groupings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_criteria.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCurrentMetricData_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filters_isValid && m_current_metrics_isValid && true;
}

} // namespace OpenAPI
