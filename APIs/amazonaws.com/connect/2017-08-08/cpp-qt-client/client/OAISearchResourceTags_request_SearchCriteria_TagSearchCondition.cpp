/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResourceTags_request_SearchCriteria_TagSearchCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::OAISearchResourceTags_request_SearchCriteria_TagSearchCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::OAISearchResourceTags_request_SearchCriteria_TagSearchCondition() {
    this->initializeModel();
}

OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::~OAISearchResourceTags_request_SearchCriteria_TagSearchCondition() {}

void OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::initializeModel() {

    m_tag_key_isSet = false;
    m_tag_key_isValid = false;

    m_tag_value_isSet = false;
    m_tag_value_isValid = false;

    m_tag_key_comparison_type_isSet = false;
    m_tag_key_comparison_type_isValid = false;

    m_tag_value_comparison_type_isSet = false;
    m_tag_value_comparison_type_isValid = false;
}

void OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::fromJsonObject(QJsonObject json) {

    m_tag_key_isValid = ::OpenAPI::fromJsonValue(m_tag_key, json[QString("tagKey")]);
    m_tag_key_isSet = !json[QString("tagKey")].isNull() && m_tag_key_isValid;

    m_tag_value_isValid = ::OpenAPI::fromJsonValue(m_tag_value, json[QString("tagValue")]);
    m_tag_value_isSet = !json[QString("tagValue")].isNull() && m_tag_value_isValid;

    m_tag_key_comparison_type_isValid = ::OpenAPI::fromJsonValue(m_tag_key_comparison_type, json[QString("tagKeyComparisonType")]);
    m_tag_key_comparison_type_isSet = !json[QString("tagKeyComparisonType")].isNull() && m_tag_key_comparison_type_isValid;

    m_tag_value_comparison_type_isValid = ::OpenAPI::fromJsonValue(m_tag_value_comparison_type, json[QString("tagValueComparisonType")]);
    m_tag_value_comparison_type_isSet = !json[QString("tagValueComparisonType")].isNull() && m_tag_value_comparison_type_isValid;
}

QString OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_tag_key_isSet) {
        obj.insert(QString("tagKey"), ::OpenAPI::toJsonValue(m_tag_key));
    }
    if (m_tag_value_isSet) {
        obj.insert(QString("tagValue"), ::OpenAPI::toJsonValue(m_tag_value));
    }
    if (m_tag_key_comparison_type.isSet()) {
        obj.insert(QString("tagKeyComparisonType"), ::OpenAPI::toJsonValue(m_tag_key_comparison_type));
    }
    if (m_tag_value_comparison_type.isSet()) {
        obj.insert(QString("tagValueComparisonType"), ::OpenAPI::toJsonValue(m_tag_value_comparison_type));
    }
    return obj;
}

QString OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::getTagKey() const {
    return m_tag_key;
}
void OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::setTagKey(const QString &tag_key) {
    m_tag_key = tag_key;
    m_tag_key_isSet = true;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::is_tag_key_Set() const{
    return m_tag_key_isSet;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::is_tag_key_Valid() const{
    return m_tag_key_isValid;
}

QString OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::getTagValue() const {
    return m_tag_value;
}
void OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::setTagValue(const QString &tag_value) {
    m_tag_value = tag_value;
    m_tag_value_isSet = true;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::is_tag_value_Set() const{
    return m_tag_value_isSet;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::is_tag_value_Valid() const{
    return m_tag_value_isValid;
}

OAIStringComparisonType OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::getTagKeyComparisonType() const {
    return m_tag_key_comparison_type;
}
void OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::setTagKeyComparisonType(const OAIStringComparisonType &tag_key_comparison_type) {
    m_tag_key_comparison_type = tag_key_comparison_type;
    m_tag_key_comparison_type_isSet = true;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::is_tag_key_comparison_type_Set() const{
    return m_tag_key_comparison_type_isSet;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::is_tag_key_comparison_type_Valid() const{
    return m_tag_key_comparison_type_isValid;
}

OAIStringComparisonType OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::getTagValueComparisonType() const {
    return m_tag_value_comparison_type;
}
void OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::setTagValueComparisonType(const OAIStringComparisonType &tag_value_comparison_type) {
    m_tag_value_comparison_type = tag_value_comparison_type;
    m_tag_value_comparison_type_isSet = true;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::is_tag_value_comparison_type_Set() const{
    return m_tag_value_comparison_type_isSet;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::is_tag_value_comparison_type_Valid() const{
    return m_tag_value_comparison_type_isValid;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tag_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_key_comparison_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_value_comparison_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResourceTags_request_SearchCriteria_TagSearchCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
