/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateParticipantRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateParticipantRequest::OAICreateParticipantRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateParticipantRequest::OAICreateParticipantRequest() {
    this->initializeModel();
}

OAICreateParticipantRequest::~OAICreateParticipantRequest() {}

void OAICreateParticipantRequest::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_participant_details_isSet = false;
    m_participant_details_isValid = false;
}

void OAICreateParticipantRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateParticipantRequest::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_participant_details_isValid = ::OpenAPI::fromJsonValue(m_participant_details, json[QString("ParticipantDetails")]);
    m_participant_details_isSet = !json[QString("ParticipantDetails")].isNull() && m_participant_details_isValid;
}

QString OAICreateParticipantRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateParticipantRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_participant_details.isSet()) {
        obj.insert(QString("ParticipantDetails"), ::OpenAPI::toJsonValue(m_participant_details));
    }
    return obj;
}

QString OAICreateParticipantRequest::getInstanceId() const {
    return m_instance_id;
}
void OAICreateParticipantRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAICreateParticipantRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAICreateParticipantRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAICreateParticipantRequest::getContactId() const {
    return m_contact_id;
}
void OAICreateParticipantRequest::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAICreateParticipantRequest::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAICreateParticipantRequest::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAICreateParticipantRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateParticipantRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateParticipantRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateParticipantRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateParticipantRequest_ParticipantDetails OAICreateParticipantRequest::getParticipantDetails() const {
    return m_participant_details;
}
void OAICreateParticipantRequest::setParticipantDetails(const OAICreateParticipantRequest_ParticipantDetails &participant_details) {
    m_participant_details = participant_details;
    m_participant_details_isSet = true;
}

bool OAICreateParticipantRequest::is_participant_details_Set() const{
    return m_participant_details_isSet;
}

bool OAICreateParticipantRequest::is_participant_details_Valid() const{
    return m_participant_details_isValid;
}

bool OAICreateParticipantRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateParticipantRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_contact_id_isValid && m_participant_details_isValid && true;
}

} // namespace OpenAPI
