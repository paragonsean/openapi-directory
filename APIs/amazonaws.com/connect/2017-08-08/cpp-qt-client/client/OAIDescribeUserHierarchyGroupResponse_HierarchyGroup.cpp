/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeUserHierarchyGroupResponse_HierarchyGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::OAIDescribeUserHierarchyGroupResponse_HierarchyGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::OAIDescribeUserHierarchyGroupResponse_HierarchyGroup() {
    this->initializeModel();
}

OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::~OAIDescribeUserHierarchyGroupResponse_HierarchyGroup() {}

void OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_level_id_isSet = false;
    m_level_id_isValid = false;

    m_hierarchy_path_isSet = false;
    m_hierarchy_path_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_level_id_isValid = ::OpenAPI::fromJsonValue(m_level_id, json[QString("LevelId")]);
    m_level_id_isSet = !json[QString("LevelId")].isNull() && m_level_id_isValid;

    m_hierarchy_path_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_path, json[QString("HierarchyPath")]);
    m_hierarchy_path_isSet = !json[QString("HierarchyPath")].isNull() && m_hierarchy_path_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_level_id_isSet) {
        obj.insert(QString("LevelId"), ::OpenAPI::toJsonValue(m_level_id));
    }
    if (m_hierarchy_path.isSet()) {
        obj.insert(QString("HierarchyPath"), ::OpenAPI::toJsonValue(m_hierarchy_path));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::getId() const {
    return m_id;
}
void OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::getArn() const {
    return m_arn;
}
void OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::getName() const {
    return m_name;
}
void OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::getLevelId() const {
    return m_level_id;
}
void OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::setLevelId(const QString &level_id) {
    m_level_id = level_id;
    m_level_id_isSet = true;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_level_id_Set() const{
    return m_level_id_isSet;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_level_id_Valid() const{
    return m_level_id_isValid;
}

OAIHierarchyGroup_HierarchyPath OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::getHierarchyPath() const {
    return m_hierarchy_path;
}
void OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::setHierarchyPath(const OAIHierarchyGroup_HierarchyPath &hierarchy_path) {
    m_hierarchy_path = hierarchy_path;
    m_hierarchy_path_isSet = true;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_hierarchy_path_Set() const{
    return m_hierarchy_path_isSet;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_hierarchy_path_Valid() const{
    return m_hierarchy_path_isValid;
}

QMap OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::getTags() const {
    return m_tags;
}
void OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeUserHierarchyGroupResponse_HierarchyGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
