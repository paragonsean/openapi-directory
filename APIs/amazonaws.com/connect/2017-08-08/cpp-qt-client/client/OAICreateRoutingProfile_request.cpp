/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRoutingProfile_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRoutingProfile_request::OAICreateRoutingProfile_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRoutingProfile_request::OAICreateRoutingProfile_request() {
    this->initializeModel();
}

OAICreateRoutingProfile_request::~OAICreateRoutingProfile_request() {}

void OAICreateRoutingProfile_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_default_outbound_queue_id_isSet = false;
    m_default_outbound_queue_id_isValid = false;

    m_queue_configs_isSet = false;
    m_queue_configs_isValid = false;

    m_media_concurrencies_isSet = false;
    m_media_concurrencies_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_agent_availability_timer_isSet = false;
    m_agent_availability_timer_isValid = false;
}

void OAICreateRoutingProfile_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRoutingProfile_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_default_outbound_queue_id_isValid = ::OpenAPI::fromJsonValue(m_default_outbound_queue_id, json[QString("DefaultOutboundQueueId")]);
    m_default_outbound_queue_id_isSet = !json[QString("DefaultOutboundQueueId")].isNull() && m_default_outbound_queue_id_isValid;

    m_queue_configs_isValid = ::OpenAPI::fromJsonValue(m_queue_configs, json[QString("QueueConfigs")]);
    m_queue_configs_isSet = !json[QString("QueueConfigs")].isNull() && m_queue_configs_isValid;

    m_media_concurrencies_isValid = ::OpenAPI::fromJsonValue(m_media_concurrencies, json[QString("MediaConcurrencies")]);
    m_media_concurrencies_isSet = !json[QString("MediaConcurrencies")].isNull() && m_media_concurrencies_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_agent_availability_timer_isValid = ::OpenAPI::fromJsonValue(m_agent_availability_timer, json[QString("AgentAvailabilityTimer")]);
    m_agent_availability_timer_isSet = !json[QString("AgentAvailabilityTimer")].isNull() && m_agent_availability_timer_isValid;
}

QString OAICreateRoutingProfile_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRoutingProfile_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_default_outbound_queue_id_isSet) {
        obj.insert(QString("DefaultOutboundQueueId"), ::OpenAPI::toJsonValue(m_default_outbound_queue_id));
    }
    if (m_queue_configs.size() > 0) {
        obj.insert(QString("QueueConfigs"), ::OpenAPI::toJsonValue(m_queue_configs));
    }
    if (m_media_concurrencies.size() > 0) {
        obj.insert(QString("MediaConcurrencies"), ::OpenAPI::toJsonValue(m_media_concurrencies));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_agent_availability_timer_isSet) {
        obj.insert(QString("AgentAvailabilityTimer"), ::OpenAPI::toJsonValue(m_agent_availability_timer));
    }
    return obj;
}

QString OAICreateRoutingProfile_request::getName() const {
    return m_name;
}
void OAICreateRoutingProfile_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRoutingProfile_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRoutingProfile_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateRoutingProfile_request::getDescription() const {
    return m_description;
}
void OAICreateRoutingProfile_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateRoutingProfile_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateRoutingProfile_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateRoutingProfile_request::getDefaultOutboundQueueId() const {
    return m_default_outbound_queue_id;
}
void OAICreateRoutingProfile_request::setDefaultOutboundQueueId(const QString &default_outbound_queue_id) {
    m_default_outbound_queue_id = default_outbound_queue_id;
    m_default_outbound_queue_id_isSet = true;
}

bool OAICreateRoutingProfile_request::is_default_outbound_queue_id_Set() const{
    return m_default_outbound_queue_id_isSet;
}

bool OAICreateRoutingProfile_request::is_default_outbound_queue_id_Valid() const{
    return m_default_outbound_queue_id_isValid;
}

QList<OAIRoutingProfileQueueConfig> OAICreateRoutingProfile_request::getQueueConfigs() const {
    return m_queue_configs;
}
void OAICreateRoutingProfile_request::setQueueConfigs(const QList<OAIRoutingProfileQueueConfig> &queue_configs) {
    m_queue_configs = queue_configs;
    m_queue_configs_isSet = true;
}

bool OAICreateRoutingProfile_request::is_queue_configs_Set() const{
    return m_queue_configs_isSet;
}

bool OAICreateRoutingProfile_request::is_queue_configs_Valid() const{
    return m_queue_configs_isValid;
}

QList<OAIMediaConcurrency> OAICreateRoutingProfile_request::getMediaConcurrencies() const {
    return m_media_concurrencies;
}
void OAICreateRoutingProfile_request::setMediaConcurrencies(const QList<OAIMediaConcurrency> &media_concurrencies) {
    m_media_concurrencies = media_concurrencies;
    m_media_concurrencies_isSet = true;
}

bool OAICreateRoutingProfile_request::is_media_concurrencies_Set() const{
    return m_media_concurrencies_isSet;
}

bool OAICreateRoutingProfile_request::is_media_concurrencies_Valid() const{
    return m_media_concurrencies_isValid;
}

QMap<QString, QString> OAICreateRoutingProfile_request::getTags() const {
    return m_tags;
}
void OAICreateRoutingProfile_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRoutingProfile_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRoutingProfile_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateRoutingProfile_request::getAgentAvailabilityTimer() const {
    return m_agent_availability_timer;
}
void OAICreateRoutingProfile_request::setAgentAvailabilityTimer(const QString &agent_availability_timer) {
    m_agent_availability_timer = agent_availability_timer;
    m_agent_availability_timer_isSet = true;
}

bool OAICreateRoutingProfile_request::is_agent_availability_timer_Set() const{
    return m_agent_availability_timer_isSet;
}

bool OAICreateRoutingProfile_request::is_agent_availability_timer_Valid() const{
    return m_agent_availability_timer_isValid;
}

bool OAICreateRoutingProfile_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_outbound_queue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_concurrencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_availability_timer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRoutingProfile_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_description_isValid && m_default_outbound_queue_id_isValid && m_media_concurrencies_isValid && true;
}

} // namespace OpenAPI
