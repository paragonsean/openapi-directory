/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeUserHierarchyStructureResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeUserHierarchyStructureResponse::OAIDescribeUserHierarchyStructureResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeUserHierarchyStructureResponse::OAIDescribeUserHierarchyStructureResponse() {
    this->initializeModel();
}

OAIDescribeUserHierarchyStructureResponse::~OAIDescribeUserHierarchyStructureResponse() {}

void OAIDescribeUserHierarchyStructureResponse::initializeModel() {

    m_hierarchy_structure_isSet = false;
    m_hierarchy_structure_isValid = false;
}

void OAIDescribeUserHierarchyStructureResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeUserHierarchyStructureResponse::fromJsonObject(QJsonObject json) {

    m_hierarchy_structure_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_structure, json[QString("HierarchyStructure")]);
    m_hierarchy_structure_isSet = !json[QString("HierarchyStructure")].isNull() && m_hierarchy_structure_isValid;
}

QString OAIDescribeUserHierarchyStructureResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeUserHierarchyStructureResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_hierarchy_structure.isSet()) {
        obj.insert(QString("HierarchyStructure"), ::OpenAPI::toJsonValue(m_hierarchy_structure));
    }
    return obj;
}

OAIDescribeUserHierarchyStructureResponse_HierarchyStructure OAIDescribeUserHierarchyStructureResponse::getHierarchyStructure() const {
    return m_hierarchy_structure;
}
void OAIDescribeUserHierarchyStructureResponse::setHierarchyStructure(const OAIDescribeUserHierarchyStructureResponse_HierarchyStructure &hierarchy_structure) {
    m_hierarchy_structure = hierarchy_structure;
    m_hierarchy_structure_isSet = true;
}

bool OAIDescribeUserHierarchyStructureResponse::is_hierarchy_structure_Set() const{
    return m_hierarchy_structure_isSet;
}

bool OAIDescribeUserHierarchyStructureResponse::is_hierarchy_structure_Valid() const{
    return m_hierarchy_structure_isValid;
}

bool OAIDescribeUserHierarchyStructureResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hierarchy_structure.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeUserHierarchyStructureResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
