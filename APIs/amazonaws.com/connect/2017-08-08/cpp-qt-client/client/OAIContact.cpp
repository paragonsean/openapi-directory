/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContact::OAIContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContact::OAIContact() {
    this->initializeModel();
}

OAIContact::~OAIContact() {}

void OAIContact::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_initial_contact_id_isSet = false;
    m_initial_contact_id_isValid = false;

    m_previous_contact_id_isSet = false;
    m_previous_contact_id_isValid = false;

    m_initiation_method_isSet = false;
    m_initiation_method_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_queue_info_isSet = false;
    m_queue_info_isValid = false;

    m_agent_info_isSet = false;
    m_agent_info_isValid = false;

    m_initiation_timestamp_isSet = false;
    m_initiation_timestamp_isValid = false;

    m_disconnect_timestamp_isSet = false;
    m_disconnect_timestamp_isValid = false;

    m_last_update_timestamp_isSet = false;
    m_last_update_timestamp_isValid = false;

    m_scheduled_timestamp_isSet = false;
    m_scheduled_timestamp_isValid = false;

    m_related_contact_id_isSet = false;
    m_related_contact_id_isValid = false;

    m_wisdom_info_isSet = false;
    m_wisdom_info_isValid = false;
}

void OAIContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContact::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_initial_contact_id_isValid = ::OpenAPI::fromJsonValue(m_initial_contact_id, json[QString("InitialContactId")]);
    m_initial_contact_id_isSet = !json[QString("InitialContactId")].isNull() && m_initial_contact_id_isValid;

    m_previous_contact_id_isValid = ::OpenAPI::fromJsonValue(m_previous_contact_id, json[QString("PreviousContactId")]);
    m_previous_contact_id_isSet = !json[QString("PreviousContactId")].isNull() && m_previous_contact_id_isValid;

    m_initiation_method_isValid = ::OpenAPI::fromJsonValue(m_initiation_method, json[QString("InitiationMethod")]);
    m_initiation_method_isSet = !json[QString("InitiationMethod")].isNull() && m_initiation_method_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_queue_info_isValid = ::OpenAPI::fromJsonValue(m_queue_info, json[QString("QueueInfo")]);
    m_queue_info_isSet = !json[QString("QueueInfo")].isNull() && m_queue_info_isValid;

    m_agent_info_isValid = ::OpenAPI::fromJsonValue(m_agent_info, json[QString("AgentInfo")]);
    m_agent_info_isSet = !json[QString("AgentInfo")].isNull() && m_agent_info_isValid;

    m_initiation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_initiation_timestamp, json[QString("InitiationTimestamp")]);
    m_initiation_timestamp_isSet = !json[QString("InitiationTimestamp")].isNull() && m_initiation_timestamp_isValid;

    m_disconnect_timestamp_isValid = ::OpenAPI::fromJsonValue(m_disconnect_timestamp, json[QString("DisconnectTimestamp")]);
    m_disconnect_timestamp_isSet = !json[QString("DisconnectTimestamp")].isNull() && m_disconnect_timestamp_isValid;

    m_last_update_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_update_timestamp, json[QString("LastUpdateTimestamp")]);
    m_last_update_timestamp_isSet = !json[QString("LastUpdateTimestamp")].isNull() && m_last_update_timestamp_isValid;

    m_scheduled_timestamp_isValid = ::OpenAPI::fromJsonValue(m_scheduled_timestamp, json[QString("ScheduledTimestamp")]);
    m_scheduled_timestamp_isSet = !json[QString("ScheduledTimestamp")].isNull() && m_scheduled_timestamp_isValid;

    m_related_contact_id_isValid = ::OpenAPI::fromJsonValue(m_related_contact_id, json[QString("RelatedContactId")]);
    m_related_contact_id_isSet = !json[QString("RelatedContactId")].isNull() && m_related_contact_id_isValid;

    m_wisdom_info_isValid = ::OpenAPI::fromJsonValue(m_wisdom_info, json[QString("WisdomInfo")]);
    m_wisdom_info_isSet = !json[QString("WisdomInfo")].isNull() && m_wisdom_info_isValid;
}

QString OAIContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContact::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_initial_contact_id_isSet) {
        obj.insert(QString("InitialContactId"), ::OpenAPI::toJsonValue(m_initial_contact_id));
    }
    if (m_previous_contact_id_isSet) {
        obj.insert(QString("PreviousContactId"), ::OpenAPI::toJsonValue(m_previous_contact_id));
    }
    if (m_initiation_method.isSet()) {
        obj.insert(QString("InitiationMethod"), ::OpenAPI::toJsonValue(m_initiation_method));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_queue_info.isSet()) {
        obj.insert(QString("QueueInfo"), ::OpenAPI::toJsonValue(m_queue_info));
    }
    if (m_agent_info.isSet()) {
        obj.insert(QString("AgentInfo"), ::OpenAPI::toJsonValue(m_agent_info));
    }
    if (m_initiation_timestamp_isSet) {
        obj.insert(QString("InitiationTimestamp"), ::OpenAPI::toJsonValue(m_initiation_timestamp));
    }
    if (m_disconnect_timestamp_isSet) {
        obj.insert(QString("DisconnectTimestamp"), ::OpenAPI::toJsonValue(m_disconnect_timestamp));
    }
    if (m_last_update_timestamp_isSet) {
        obj.insert(QString("LastUpdateTimestamp"), ::OpenAPI::toJsonValue(m_last_update_timestamp));
    }
    if (m_scheduled_timestamp_isSet) {
        obj.insert(QString("ScheduledTimestamp"), ::OpenAPI::toJsonValue(m_scheduled_timestamp));
    }
    if (m_related_contact_id_isSet) {
        obj.insert(QString("RelatedContactId"), ::OpenAPI::toJsonValue(m_related_contact_id));
    }
    if (m_wisdom_info.isSet()) {
        obj.insert(QString("WisdomInfo"), ::OpenAPI::toJsonValue(m_wisdom_info));
    }
    return obj;
}

QString OAIContact::getArn() const {
    return m_arn;
}
void OAIContact::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIContact::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIContact::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIContact::getId() const {
    return m_id;
}
void OAIContact::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContact::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContact::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIContact::getInitialContactId() const {
    return m_initial_contact_id;
}
void OAIContact::setInitialContactId(const QString &initial_contact_id) {
    m_initial_contact_id = initial_contact_id;
    m_initial_contact_id_isSet = true;
}

bool OAIContact::is_initial_contact_id_Set() const{
    return m_initial_contact_id_isSet;
}

bool OAIContact::is_initial_contact_id_Valid() const{
    return m_initial_contact_id_isValid;
}

QString OAIContact::getPreviousContactId() const {
    return m_previous_contact_id;
}
void OAIContact::setPreviousContactId(const QString &previous_contact_id) {
    m_previous_contact_id = previous_contact_id;
    m_previous_contact_id_isSet = true;
}

bool OAIContact::is_previous_contact_id_Set() const{
    return m_previous_contact_id_isSet;
}

bool OAIContact::is_previous_contact_id_Valid() const{
    return m_previous_contact_id_isValid;
}

OAIContactInitiationMethod OAIContact::getInitiationMethod() const {
    return m_initiation_method;
}
void OAIContact::setInitiationMethod(const OAIContactInitiationMethod &initiation_method) {
    m_initiation_method = initiation_method;
    m_initiation_method_isSet = true;
}

bool OAIContact::is_initiation_method_Set() const{
    return m_initiation_method_isSet;
}

bool OAIContact::is_initiation_method_Valid() const{
    return m_initiation_method_isValid;
}

QString OAIContact::getName() const {
    return m_name;
}
void OAIContact::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContact::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContact::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContact::getDescription() const {
    return m_description;
}
void OAIContact::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContact::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContact::is_description_Valid() const{
    return m_description_isValid;
}

OAIChannel OAIContact::getChannel() const {
    return m_channel;
}
void OAIContact::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIContact::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIContact::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIContact_QueueInfo OAIContact::getQueueInfo() const {
    return m_queue_info;
}
void OAIContact::setQueueInfo(const OAIContact_QueueInfo &queue_info) {
    m_queue_info = queue_info;
    m_queue_info_isSet = true;
}

bool OAIContact::is_queue_info_Set() const{
    return m_queue_info_isSet;
}

bool OAIContact::is_queue_info_Valid() const{
    return m_queue_info_isValid;
}

OAIContact_AgentInfo OAIContact::getAgentInfo() const {
    return m_agent_info;
}
void OAIContact::setAgentInfo(const OAIContact_AgentInfo &agent_info) {
    m_agent_info = agent_info;
    m_agent_info_isSet = true;
}

bool OAIContact::is_agent_info_Set() const{
    return m_agent_info_isSet;
}

bool OAIContact::is_agent_info_Valid() const{
    return m_agent_info_isValid;
}

QDateTime OAIContact::getInitiationTimestamp() const {
    return m_initiation_timestamp;
}
void OAIContact::setInitiationTimestamp(const QDateTime &initiation_timestamp) {
    m_initiation_timestamp = initiation_timestamp;
    m_initiation_timestamp_isSet = true;
}

bool OAIContact::is_initiation_timestamp_Set() const{
    return m_initiation_timestamp_isSet;
}

bool OAIContact::is_initiation_timestamp_Valid() const{
    return m_initiation_timestamp_isValid;
}

QDateTime OAIContact::getDisconnectTimestamp() const {
    return m_disconnect_timestamp;
}
void OAIContact::setDisconnectTimestamp(const QDateTime &disconnect_timestamp) {
    m_disconnect_timestamp = disconnect_timestamp;
    m_disconnect_timestamp_isSet = true;
}

bool OAIContact::is_disconnect_timestamp_Set() const{
    return m_disconnect_timestamp_isSet;
}

bool OAIContact::is_disconnect_timestamp_Valid() const{
    return m_disconnect_timestamp_isValid;
}

QDateTime OAIContact::getLastUpdateTimestamp() const {
    return m_last_update_timestamp;
}
void OAIContact::setLastUpdateTimestamp(const QDateTime &last_update_timestamp) {
    m_last_update_timestamp = last_update_timestamp;
    m_last_update_timestamp_isSet = true;
}

bool OAIContact::is_last_update_timestamp_Set() const{
    return m_last_update_timestamp_isSet;
}

bool OAIContact::is_last_update_timestamp_Valid() const{
    return m_last_update_timestamp_isValid;
}

QDateTime OAIContact::getScheduledTimestamp() const {
    return m_scheduled_timestamp;
}
void OAIContact::setScheduledTimestamp(const QDateTime &scheduled_timestamp) {
    m_scheduled_timestamp = scheduled_timestamp;
    m_scheduled_timestamp_isSet = true;
}

bool OAIContact::is_scheduled_timestamp_Set() const{
    return m_scheduled_timestamp_isSet;
}

bool OAIContact::is_scheduled_timestamp_Valid() const{
    return m_scheduled_timestamp_isValid;
}

QString OAIContact::getRelatedContactId() const {
    return m_related_contact_id;
}
void OAIContact::setRelatedContactId(const QString &related_contact_id) {
    m_related_contact_id = related_contact_id;
    m_related_contact_id_isSet = true;
}

bool OAIContact::is_related_contact_id_Set() const{
    return m_related_contact_id_isSet;
}

bool OAIContact::is_related_contact_id_Valid() const{
    return m_related_contact_id_isValid;
}

OAIContact_WisdomInfo OAIContact::getWisdomInfo() const {
    return m_wisdom_info;
}
void OAIContact::setWisdomInfo(const OAIContact_WisdomInfo &wisdom_info) {
    m_wisdom_info = wisdom_info;
    m_wisdom_info_isSet = true;
}

bool OAIContact::is_wisdom_info_Set() const{
    return m_wisdom_info_isSet;
}

bool OAIContact::is_wisdom_info_Valid() const{
    return m_wisdom_info_isValid;
}

bool OAIContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiation_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disconnect_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wisdom_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
