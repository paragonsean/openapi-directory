/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceSummary::OAIReferenceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceSummary::OAIReferenceSummary() {
    this->initializeModel();
}

OAIReferenceSummary::~OAIReferenceSummary() {}

void OAIReferenceSummary::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_string_isSet = false;
    m_string_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;
}

void OAIReferenceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceSummary::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_attachment_isValid = ::OpenAPI::fromJsonValue(m_attachment, json[QString("Attachment")]);
    m_attachment_isSet = !json[QString("Attachment")].isNull() && m_attachment_isValid;

    m_string_isValid = ::OpenAPI::fromJsonValue(m_string, json[QString("String")]);
    m_string_isSet = !json[QString("String")].isNull() && m_string_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;
}

QString OAIReferenceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_url.isSet()) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_attachment.isSet()) {
        obj.insert(QString("Attachment"), ::OpenAPI::toJsonValue(m_attachment));
    }
    if (m_string.isSet()) {
        obj.insert(QString("String"), ::OpenAPI::toJsonValue(m_string));
    }
    if (m_number.isSet()) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_date.isSet()) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_email.isSet()) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    return obj;
}

OAIReferenceSummary_Url OAIReferenceSummary::getUrl() const {
    return m_url;
}
void OAIReferenceSummary::setUrl(const OAIReferenceSummary_Url &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIReferenceSummary::is_url_Set() const{
    return m_url_isSet;
}

bool OAIReferenceSummary::is_url_Valid() const{
    return m_url_isValid;
}

OAIReferenceSummary_Attachment OAIReferenceSummary::getAttachment() const {
    return m_attachment;
}
void OAIReferenceSummary::setAttachment(const OAIReferenceSummary_Attachment &attachment) {
    m_attachment = attachment;
    m_attachment_isSet = true;
}

bool OAIReferenceSummary::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAIReferenceSummary::is_attachment_Valid() const{
    return m_attachment_isValid;
}

OAIReferenceSummary_String OAIReferenceSummary::getString() const {
    return m_string;
}
void OAIReferenceSummary::setString(const OAIReferenceSummary_String &string) {
    m_string = string;
    m_string_isSet = true;
}

bool OAIReferenceSummary::is_string_Set() const{
    return m_string_isSet;
}

bool OAIReferenceSummary::is_string_Valid() const{
    return m_string_isValid;
}

OAIReferenceSummary_Number OAIReferenceSummary::getNumber() const {
    return m_number;
}
void OAIReferenceSummary::setNumber(const OAIReferenceSummary_Number &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIReferenceSummary::is_number_Set() const{
    return m_number_isSet;
}

bool OAIReferenceSummary::is_number_Valid() const{
    return m_number_isValid;
}

OAIReferenceSummary_Date OAIReferenceSummary::getDate() const {
    return m_date;
}
void OAIReferenceSummary::setDate(const OAIReferenceSummary_Date &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReferenceSummary::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReferenceSummary::is_date_Valid() const{
    return m_date_isValid;
}

OAIReferenceSummary_Email OAIReferenceSummary::getEmail() const {
    return m_email;
}
void OAIReferenceSummary::setEmail(const OAIReferenceSummary_Email &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIReferenceSummary::is_email_Set() const{
    return m_email_isSet;
}

bool OAIReferenceSummary::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIReferenceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
