/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControlPlaneTagFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControlPlaneTagFilter::OAIControlPlaneTagFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControlPlaneTagFilter::OAIControlPlaneTagFilter() {
    this->initializeModel();
}

OAIControlPlaneTagFilter::~OAIControlPlaneTagFilter() {}

void OAIControlPlaneTagFilter::initializeModel() {

    m_or_conditions_isSet = false;
    m_or_conditions_isValid = false;

    m_and_conditions_isSet = false;
    m_and_conditions_isValid = false;

    m_tag_condition_isSet = false;
    m_tag_condition_isValid = false;
}

void OAIControlPlaneTagFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControlPlaneTagFilter::fromJsonObject(QJsonObject json) {

    m_or_conditions_isValid = ::OpenAPI::fromJsonValue(m_or_conditions, json[QString("OrConditions")]);
    m_or_conditions_isSet = !json[QString("OrConditions")].isNull() && m_or_conditions_isValid;

    m_and_conditions_isValid = ::OpenAPI::fromJsonValue(m_and_conditions, json[QString("AndConditions")]);
    m_and_conditions_isSet = !json[QString("AndConditions")].isNull() && m_and_conditions_isValid;

    m_tag_condition_isValid = ::OpenAPI::fromJsonValue(m_tag_condition, json[QString("TagCondition")]);
    m_tag_condition_isSet = !json[QString("TagCondition")].isNull() && m_tag_condition_isValid;
}

QString OAIControlPlaneTagFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControlPlaneTagFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_or_conditions.isSet()) {
        obj.insert(QString("OrConditions"), ::OpenAPI::toJsonValue(m_or_conditions));
    }
    if (m_and_conditions.isSet()) {
        obj.insert(QString("AndConditions"), ::OpenAPI::toJsonValue(m_and_conditions));
    }
    if (m_tag_condition.isSet()) {
        obj.insert(QString("TagCondition"), ::OpenAPI::toJsonValue(m_tag_condition));
    }
    return obj;
}

QList OAIControlPlaneTagFilter::getOrConditions() const {
    return m_or_conditions;
}
void OAIControlPlaneTagFilter::setOrConditions(const QList &or_conditions) {
    m_or_conditions = or_conditions;
    m_or_conditions_isSet = true;
}

bool OAIControlPlaneTagFilter::is_or_conditions_Set() const{
    return m_or_conditions_isSet;
}

bool OAIControlPlaneTagFilter::is_or_conditions_Valid() const{
    return m_or_conditions_isValid;
}

QList OAIControlPlaneTagFilter::getAndConditions() const {
    return m_and_conditions;
}
void OAIControlPlaneTagFilter::setAndConditions(const QList &and_conditions) {
    m_and_conditions = and_conditions;
    m_and_conditions_isSet = true;
}

bool OAIControlPlaneTagFilter::is_and_conditions_Set() const{
    return m_and_conditions_isSet;
}

bool OAIControlPlaneTagFilter::is_and_conditions_Valid() const{
    return m_and_conditions_isValid;
}

OAIControlPlaneTagFilter_TagCondition OAIControlPlaneTagFilter::getTagCondition() const {
    return m_tag_condition;
}
void OAIControlPlaneTagFilter::setTagCondition(const OAIControlPlaneTagFilter_TagCondition &tag_condition) {
    m_tag_condition = tag_condition;
    m_tag_condition_isSet = true;
}

bool OAIControlPlaneTagFilter::is_tag_condition_Set() const{
    return m_tag_condition_isSet;
}

bool OAIControlPlaneTagFilter::is_tag_condition_Valid() const{
    return m_tag_condition_isValid;
}

bool OAIControlPlaneTagFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_or_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_and_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControlPlaneTagFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
