/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVocabularySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVocabularySummary::OAIVocabularySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVocabularySummary::OAIVocabularySummary() {
    this->initializeModel();
}

OAIVocabularySummary::~OAIVocabularySummary() {}

void OAIVocabularySummary::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;
}

void OAIVocabularySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVocabularySummary::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;
}

QString OAIVocabularySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVocabularySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    return obj;
}

QString OAIVocabularySummary::getName() const {
    return m_name;
}
void OAIVocabularySummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVocabularySummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVocabularySummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVocabularySummary::getId() const {
    return m_id;
}
void OAIVocabularySummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVocabularySummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVocabularySummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVocabularySummary::getArn() const {
    return m_arn;
}
void OAIVocabularySummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIVocabularySummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIVocabularySummary::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIVocabularyLanguageCode OAIVocabularySummary::getLanguageCode() const {
    return m_language_code;
}
void OAIVocabularySummary::setLanguageCode(const OAIVocabularyLanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIVocabularySummary::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIVocabularySummary::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIVocabularyState OAIVocabularySummary::getState() const {
    return m_state;
}
void OAIVocabularySummary::setState(const OAIVocabularyState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVocabularySummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVocabularySummary::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIVocabularySummary::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIVocabularySummary::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIVocabularySummary::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIVocabularySummary::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIVocabularySummary::getFailureReason() const {
    return m_failure_reason;
}
void OAIVocabularySummary::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIVocabularySummary::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIVocabularySummary::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

bool OAIVocabularySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVocabularySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_id_isValid && m_arn_isValid && m_language_code_isValid && m_state_isValid && m_last_modified_time_isValid && true;
}

} // namespace OpenAPI
