/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationMetadata::OAIEvaluationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationMetadata::OAIEvaluationMetadata() {
    this->initializeModel();
}

OAIEvaluationMetadata::~OAIEvaluationMetadata() {}

void OAIEvaluationMetadata::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_evaluator_arn_isSet = false;
    m_evaluator_arn_isValid = false;

    m_contact_agent_id_isSet = false;
    m_contact_agent_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIEvaluationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationMetadata::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_evaluator_arn_isValid = ::OpenAPI::fromJsonValue(m_evaluator_arn, json[QString("EvaluatorArn")]);
    m_evaluator_arn_isSet = !json[QString("EvaluatorArn")].isNull() && m_evaluator_arn_isValid;

    m_contact_agent_id_isValid = ::OpenAPI::fromJsonValue(m_contact_agent_id, json[QString("ContactAgentId")]);
    m_contact_agent_id_isSet = !json[QString("ContactAgentId")].isNull() && m_contact_agent_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;
}

QString OAIEvaluationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_evaluator_arn_isSet) {
        obj.insert(QString("EvaluatorArn"), ::OpenAPI::toJsonValue(m_evaluator_arn));
    }
    if (m_contact_agent_id_isSet) {
        obj.insert(QString("ContactAgentId"), ::OpenAPI::toJsonValue(m_contact_agent_id));
    }
    if (m_score.isSet()) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAIEvaluationMetadata::getContactId() const {
    return m_contact_id;
}
void OAIEvaluationMetadata::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIEvaluationMetadata::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIEvaluationMetadata::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAIEvaluationMetadata::getEvaluatorArn() const {
    return m_evaluator_arn;
}
void OAIEvaluationMetadata::setEvaluatorArn(const QString &evaluator_arn) {
    m_evaluator_arn = evaluator_arn;
    m_evaluator_arn_isSet = true;
}

bool OAIEvaluationMetadata::is_evaluator_arn_Set() const{
    return m_evaluator_arn_isSet;
}

bool OAIEvaluationMetadata::is_evaluator_arn_Valid() const{
    return m_evaluator_arn_isValid;
}

QString OAIEvaluationMetadata::getContactAgentId() const {
    return m_contact_agent_id;
}
void OAIEvaluationMetadata::setContactAgentId(const QString &contact_agent_id) {
    m_contact_agent_id = contact_agent_id;
    m_contact_agent_id_isSet = true;
}

bool OAIEvaluationMetadata::is_contact_agent_id_Set() const{
    return m_contact_agent_id_isSet;
}

bool OAIEvaluationMetadata::is_contact_agent_id_Valid() const{
    return m_contact_agent_id_isValid;
}

OAIEvaluationMetadata_Score OAIEvaluationMetadata::getScore() const {
    return m_score;
}
void OAIEvaluationMetadata::setScore(const OAIEvaluationMetadata_Score &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIEvaluationMetadata::is_score_Set() const{
    return m_score_isSet;
}

bool OAIEvaluationMetadata::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIEvaluationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluator_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_agent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_id_isValid && m_evaluator_arn_isValid && true;
}

} // namespace OpenAPI
