/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTaskTemplateResponse_Constraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTaskTemplateResponse_Constraints::OAIGetTaskTemplateResponse_Constraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTaskTemplateResponse_Constraints::OAIGetTaskTemplateResponse_Constraints() {
    this->initializeModel();
}

OAIGetTaskTemplateResponse_Constraints::~OAIGetTaskTemplateResponse_Constraints() {}

void OAIGetTaskTemplateResponse_Constraints::initializeModel() {

    m_required_fields_isSet = false;
    m_required_fields_isValid = false;

    m_read_only_fields_isSet = false;
    m_read_only_fields_isValid = false;

    m_invisible_fields_isSet = false;
    m_invisible_fields_isValid = false;
}

void OAIGetTaskTemplateResponse_Constraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTaskTemplateResponse_Constraints::fromJsonObject(QJsonObject json) {

    m_required_fields_isValid = ::OpenAPI::fromJsonValue(m_required_fields, json[QString("RequiredFields")]);
    m_required_fields_isSet = !json[QString("RequiredFields")].isNull() && m_required_fields_isValid;

    m_read_only_fields_isValid = ::OpenAPI::fromJsonValue(m_read_only_fields, json[QString("ReadOnlyFields")]);
    m_read_only_fields_isSet = !json[QString("ReadOnlyFields")].isNull() && m_read_only_fields_isValid;

    m_invisible_fields_isValid = ::OpenAPI::fromJsonValue(m_invisible_fields, json[QString("InvisibleFields")]);
    m_invisible_fields_isSet = !json[QString("InvisibleFields")].isNull() && m_invisible_fields_isValid;
}

QString OAIGetTaskTemplateResponse_Constraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTaskTemplateResponse_Constraints::asJsonObject() const {
    QJsonObject obj;
    if (m_required_fields.isSet()) {
        obj.insert(QString("RequiredFields"), ::OpenAPI::toJsonValue(m_required_fields));
    }
    if (m_read_only_fields.isSet()) {
        obj.insert(QString("ReadOnlyFields"), ::OpenAPI::toJsonValue(m_read_only_fields));
    }
    if (m_invisible_fields.isSet()) {
        obj.insert(QString("InvisibleFields"), ::OpenAPI::toJsonValue(m_invisible_fields));
    }
    return obj;
}

QList OAIGetTaskTemplateResponse_Constraints::getRequiredFields() const {
    return m_required_fields;
}
void OAIGetTaskTemplateResponse_Constraints::setRequiredFields(const QList &required_fields) {
    m_required_fields = required_fields;
    m_required_fields_isSet = true;
}

bool OAIGetTaskTemplateResponse_Constraints::is_required_fields_Set() const{
    return m_required_fields_isSet;
}

bool OAIGetTaskTemplateResponse_Constraints::is_required_fields_Valid() const{
    return m_required_fields_isValid;
}

QList OAIGetTaskTemplateResponse_Constraints::getReadOnlyFields() const {
    return m_read_only_fields;
}
void OAIGetTaskTemplateResponse_Constraints::setReadOnlyFields(const QList &read_only_fields) {
    m_read_only_fields = read_only_fields;
    m_read_only_fields_isSet = true;
}

bool OAIGetTaskTemplateResponse_Constraints::is_read_only_fields_Set() const{
    return m_read_only_fields_isSet;
}

bool OAIGetTaskTemplateResponse_Constraints::is_read_only_fields_Valid() const{
    return m_read_only_fields_isValid;
}

QList OAIGetTaskTemplateResponse_Constraints::getInvisibleFields() const {
    return m_invisible_fields;
}
void OAIGetTaskTemplateResponse_Constraints::setInvisibleFields(const QList &invisible_fields) {
    m_invisible_fields = invisible_fields;
    m_invisible_fields_isSet = true;
}

bool OAIGetTaskTemplateResponse_Constraints::is_invisible_fields_Set() const{
    return m_invisible_fields_isSet;
}

bool OAIGetTaskTemplateResponse_Constraints::is_invisible_fields_Valid() const{
    return m_invisible_fields_isValid;
}

bool OAIGetTaskTemplateResponse_Constraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_required_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invisible_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTaskTemplateResponse_Constraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
