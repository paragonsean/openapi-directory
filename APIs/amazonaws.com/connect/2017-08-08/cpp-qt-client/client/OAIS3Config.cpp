/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Config::OAIS3Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Config::OAIS3Config() {
    this->initializeModel();
}

OAIS3Config::~OAIS3Config() {}

void OAIS3Config::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_prefix_isSet = false;
    m_bucket_prefix_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;
}

void OAIS3Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Config::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_prefix_isValid = ::OpenAPI::fromJsonValue(m_bucket_prefix, json[QString("BucketPrefix")]);
    m_bucket_prefix_isSet = !json[QString("BucketPrefix")].isNull() && m_bucket_prefix_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("EncryptionConfig")]);
    m_encryption_config_isSet = !json[QString("EncryptionConfig")].isNull() && m_encryption_config_isValid;
}

QString OAIS3Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Config::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_prefix_isSet) {
        obj.insert(QString("BucketPrefix"), ::OpenAPI::toJsonValue(m_bucket_prefix));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("EncryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    return obj;
}

QString OAIS3Config::getBucketName() const {
    return m_bucket_name;
}
void OAIS3Config::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIS3Config::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIS3Config::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIS3Config::getBucketPrefix() const {
    return m_bucket_prefix;
}
void OAIS3Config::setBucketPrefix(const QString &bucket_prefix) {
    m_bucket_prefix = bucket_prefix;
    m_bucket_prefix_isSet = true;
}

bool OAIS3Config::is_bucket_prefix_Set() const{
    return m_bucket_prefix_isSet;
}

bool OAIS3Config::is_bucket_prefix_Valid() const{
    return m_bucket_prefix_isValid;
}

OAIS3Config_EncryptionConfig OAIS3Config::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIS3Config::setEncryptionConfig(const OAIS3Config_EncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIS3Config::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIS3Config::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

bool OAIS3Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_name_isValid && m_bucket_prefix_isValid && true;
}

} // namespace OpenAPI
