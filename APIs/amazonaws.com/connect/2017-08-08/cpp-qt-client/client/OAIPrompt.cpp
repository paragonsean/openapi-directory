/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrompt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrompt::OAIPrompt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrompt::OAIPrompt() {
    this->initializeModel();
}

OAIPrompt::~OAIPrompt() {}

void OAIPrompt::initializeModel() {

    m_prompt_arn_isSet = false;
    m_prompt_arn_isValid = false;

    m_prompt_id_isSet = false;
    m_prompt_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPrompt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrompt::fromJsonObject(QJsonObject json) {

    m_prompt_arn_isValid = ::OpenAPI::fromJsonValue(m_prompt_arn, json[QString("PromptARN")]);
    m_prompt_arn_isSet = !json[QString("PromptARN")].isNull() && m_prompt_arn_isValid;

    m_prompt_id_isValid = ::OpenAPI::fromJsonValue(m_prompt_id, json[QString("PromptId")]);
    m_prompt_id_isSet = !json[QString("PromptId")].isNull() && m_prompt_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIPrompt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrompt::asJsonObject() const {
    QJsonObject obj;
    if (m_prompt_arn_isSet) {
        obj.insert(QString("PromptARN"), ::OpenAPI::toJsonValue(m_prompt_arn));
    }
    if (m_prompt_id_isSet) {
        obj.insert(QString("PromptId"), ::OpenAPI::toJsonValue(m_prompt_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPrompt::getPromptArn() const {
    return m_prompt_arn;
}
void OAIPrompt::setPromptArn(const QString &prompt_arn) {
    m_prompt_arn = prompt_arn;
    m_prompt_arn_isSet = true;
}

bool OAIPrompt::is_prompt_arn_Set() const{
    return m_prompt_arn_isSet;
}

bool OAIPrompt::is_prompt_arn_Valid() const{
    return m_prompt_arn_isValid;
}

QString OAIPrompt::getPromptId() const {
    return m_prompt_id;
}
void OAIPrompt::setPromptId(const QString &prompt_id) {
    m_prompt_id = prompt_id;
    m_prompt_id_isSet = true;
}

bool OAIPrompt::is_prompt_id_Set() const{
    return m_prompt_id_isSet;
}

bool OAIPrompt::is_prompt_id_Valid() const{
    return m_prompt_id_isValid;
}

QString OAIPrompt::getName() const {
    return m_name;
}
void OAIPrompt::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrompt::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrompt::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPrompt::getDescription() const {
    return m_description;
}
void OAIPrompt::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPrompt::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPrompt::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAIPrompt::getTags() const {
    return m_tags;
}
void OAIPrompt::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPrompt::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPrompt::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPrompt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prompt_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrompt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
