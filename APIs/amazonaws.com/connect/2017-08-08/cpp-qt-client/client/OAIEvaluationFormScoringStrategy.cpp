/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationFormScoringStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationFormScoringStrategy::OAIEvaluationFormScoringStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationFormScoringStrategy::OAIEvaluationFormScoringStrategy() {
    this->initializeModel();
}

OAIEvaluationFormScoringStrategy::~OAIEvaluationFormScoringStrategy() {}

void OAIEvaluationFormScoringStrategy::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIEvaluationFormScoringStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationFormScoringStrategy::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIEvaluationFormScoringStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationFormScoringStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIEvaluationFormScoringMode OAIEvaluationFormScoringStrategy::getMode() const {
    return m_mode;
}
void OAIEvaluationFormScoringStrategy::setMode(const OAIEvaluationFormScoringMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIEvaluationFormScoringStrategy::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIEvaluationFormScoringStrategy::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIEvaluationFormScoringStatus OAIEvaluationFormScoringStrategy::getStatus() const {
    return m_status;
}
void OAIEvaluationFormScoringStrategy::setStatus(const OAIEvaluationFormScoringStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEvaluationFormScoringStrategy::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEvaluationFormScoringStrategy::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEvaluationFormScoringStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationFormScoringStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mode_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
