/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeQueueResponse_Queue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeQueueResponse_Queue::OAIDescribeQueueResponse_Queue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeQueueResponse_Queue::OAIDescribeQueueResponse_Queue() {
    this->initializeModel();
}

OAIDescribeQueueResponse_Queue::~OAIDescribeQueueResponse_Queue() {}

void OAIDescribeQueueResponse_Queue::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_queue_arn_isSet = false;
    m_queue_arn_isValid = false;

    m_queue_id_isSet = false;
    m_queue_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_outbound_caller_config_isSet = false;
    m_outbound_caller_config_isValid = false;

    m_hours_of_operation_id_isSet = false;
    m_hours_of_operation_id_isValid = false;

    m_max_contacts_isSet = false;
    m_max_contacts_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeQueueResponse_Queue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeQueueResponse_Queue::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_queue_arn_isValid = ::OpenAPI::fromJsonValue(m_queue_arn, json[QString("QueueArn")]);
    m_queue_arn_isSet = !json[QString("QueueArn")].isNull() && m_queue_arn_isValid;

    m_queue_id_isValid = ::OpenAPI::fromJsonValue(m_queue_id, json[QString("QueueId")]);
    m_queue_id_isSet = !json[QString("QueueId")].isNull() && m_queue_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_outbound_caller_config_isValid = ::OpenAPI::fromJsonValue(m_outbound_caller_config, json[QString("OutboundCallerConfig")]);
    m_outbound_caller_config_isSet = !json[QString("OutboundCallerConfig")].isNull() && m_outbound_caller_config_isValid;

    m_hours_of_operation_id_isValid = ::OpenAPI::fromJsonValue(m_hours_of_operation_id, json[QString("HoursOfOperationId")]);
    m_hours_of_operation_id_isSet = !json[QString("HoursOfOperationId")].isNull() && m_hours_of_operation_id_isValid;

    m_max_contacts_isValid = ::OpenAPI::fromJsonValue(m_max_contacts, json[QString("MaxContacts")]);
    m_max_contacts_isSet = !json[QString("MaxContacts")].isNull() && m_max_contacts_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeQueueResponse_Queue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeQueueResponse_Queue::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_queue_arn_isSet) {
        obj.insert(QString("QueueArn"), ::OpenAPI::toJsonValue(m_queue_arn));
    }
    if (m_queue_id_isSet) {
        obj.insert(QString("QueueId"), ::OpenAPI::toJsonValue(m_queue_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_outbound_caller_config.isSet()) {
        obj.insert(QString("OutboundCallerConfig"), ::OpenAPI::toJsonValue(m_outbound_caller_config));
    }
    if (m_hours_of_operation_id_isSet) {
        obj.insert(QString("HoursOfOperationId"), ::OpenAPI::toJsonValue(m_hours_of_operation_id));
    }
    if (m_max_contacts_isSet) {
        obj.insert(QString("MaxContacts"), ::OpenAPI::toJsonValue(m_max_contacts));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeQueueResponse_Queue::getName() const {
    return m_name;
}
void OAIDescribeQueueResponse_Queue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeQueueResponse_Queue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeQueueResponse_Queue::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeQueueResponse_Queue::getQueueArn() const {
    return m_queue_arn;
}
void OAIDescribeQueueResponse_Queue::setQueueArn(const QString &queue_arn) {
    m_queue_arn = queue_arn;
    m_queue_arn_isSet = true;
}

bool OAIDescribeQueueResponse_Queue::is_queue_arn_Set() const{
    return m_queue_arn_isSet;
}

bool OAIDescribeQueueResponse_Queue::is_queue_arn_Valid() const{
    return m_queue_arn_isValid;
}

QString OAIDescribeQueueResponse_Queue::getQueueId() const {
    return m_queue_id;
}
void OAIDescribeQueueResponse_Queue::setQueueId(const QString &queue_id) {
    m_queue_id = queue_id;
    m_queue_id_isSet = true;
}

bool OAIDescribeQueueResponse_Queue::is_queue_id_Set() const{
    return m_queue_id_isSet;
}

bool OAIDescribeQueueResponse_Queue::is_queue_id_Valid() const{
    return m_queue_id_isValid;
}

QString OAIDescribeQueueResponse_Queue::getDescription() const {
    return m_description;
}
void OAIDescribeQueueResponse_Queue::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeQueueResponse_Queue::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeQueueResponse_Queue::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateQueueRequest_OutboundCallerConfig OAIDescribeQueueResponse_Queue::getOutboundCallerConfig() const {
    return m_outbound_caller_config;
}
void OAIDescribeQueueResponse_Queue::setOutboundCallerConfig(const OAICreateQueueRequest_OutboundCallerConfig &outbound_caller_config) {
    m_outbound_caller_config = outbound_caller_config;
    m_outbound_caller_config_isSet = true;
}

bool OAIDescribeQueueResponse_Queue::is_outbound_caller_config_Set() const{
    return m_outbound_caller_config_isSet;
}

bool OAIDescribeQueueResponse_Queue::is_outbound_caller_config_Valid() const{
    return m_outbound_caller_config_isValid;
}

QString OAIDescribeQueueResponse_Queue::getHoursOfOperationId() const {
    return m_hours_of_operation_id;
}
void OAIDescribeQueueResponse_Queue::setHoursOfOperationId(const QString &hours_of_operation_id) {
    m_hours_of_operation_id = hours_of_operation_id;
    m_hours_of_operation_id_isSet = true;
}

bool OAIDescribeQueueResponse_Queue::is_hours_of_operation_id_Set() const{
    return m_hours_of_operation_id_isSet;
}

bool OAIDescribeQueueResponse_Queue::is_hours_of_operation_id_Valid() const{
    return m_hours_of_operation_id_isValid;
}

qint32 OAIDescribeQueueResponse_Queue::getMaxContacts() const {
    return m_max_contacts;
}
void OAIDescribeQueueResponse_Queue::setMaxContacts(const qint32 &max_contacts) {
    m_max_contacts = max_contacts;
    m_max_contacts_isSet = true;
}

bool OAIDescribeQueueResponse_Queue::is_max_contacts_Set() const{
    return m_max_contacts_isSet;
}

bool OAIDescribeQueueResponse_Queue::is_max_contacts_Valid() const{
    return m_max_contacts_isValid;
}

OAIQueueStatus OAIDescribeQueueResponse_Queue::getStatus() const {
    return m_status;
}
void OAIDescribeQueueResponse_Queue::setStatus(const OAIQueueStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeQueueResponse_Queue::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeQueueResponse_Queue::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIDescribeQueueResponse_Queue::getTags() const {
    return m_tags;
}
void OAIDescribeQueueResponse_Queue::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeQueueResponse_Queue::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeQueueResponse_Queue::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeQueueResponse_Queue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_caller_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_of_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_contacts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeQueueResponse_Queue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
