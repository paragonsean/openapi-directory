/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationAnswerInput_Value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationAnswerInput_Value::OAIEvaluationAnswerInput_Value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationAnswerInput_Value::OAIEvaluationAnswerInput_Value() {
    this->initializeModel();
}

OAIEvaluationAnswerInput_Value::~OAIEvaluationAnswerInput_Value() {}

void OAIEvaluationAnswerInput_Value::initializeModel() {

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_numeric_value_isSet = false;
    m_numeric_value_isValid = false;

    m_not_applicable_isSet = false;
    m_not_applicable_isValid = false;
}

void OAIEvaluationAnswerInput_Value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationAnswerInput_Value::fromJsonObject(QJsonObject json) {

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("StringValue")]);
    m_string_value_isSet = !json[QString("StringValue")].isNull() && m_string_value_isValid;

    m_numeric_value_isValid = ::OpenAPI::fromJsonValue(m_numeric_value, json[QString("NumericValue")]);
    m_numeric_value_isSet = !json[QString("NumericValue")].isNull() && m_numeric_value_isValid;

    m_not_applicable_isValid = ::OpenAPI::fromJsonValue(m_not_applicable, json[QString("NotApplicable")]);
    m_not_applicable_isSet = !json[QString("NotApplicable")].isNull() && m_not_applicable_isValid;
}

QString OAIEvaluationAnswerInput_Value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationAnswerInput_Value::asJsonObject() const {
    QJsonObject obj;
    if (m_string_value_isSet) {
        obj.insert(QString("StringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_numeric_value_isSet) {
        obj.insert(QString("NumericValue"), ::OpenAPI::toJsonValue(m_numeric_value));
    }
    if (m_not_applicable_isSet) {
        obj.insert(QString("NotApplicable"), ::OpenAPI::toJsonValue(m_not_applicable));
    }
    return obj;
}

QString OAIEvaluationAnswerInput_Value::getStringValue() const {
    return m_string_value;
}
void OAIEvaluationAnswerInput_Value::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIEvaluationAnswerInput_Value::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIEvaluationAnswerInput_Value::is_string_value_Valid() const{
    return m_string_value_isValid;
}

double OAIEvaluationAnswerInput_Value::getNumericValue() const {
    return m_numeric_value;
}
void OAIEvaluationAnswerInput_Value::setNumericValue(const double &numeric_value) {
    m_numeric_value = numeric_value;
    m_numeric_value_isSet = true;
}

bool OAIEvaluationAnswerInput_Value::is_numeric_value_Set() const{
    return m_numeric_value_isSet;
}

bool OAIEvaluationAnswerInput_Value::is_numeric_value_Valid() const{
    return m_numeric_value_isValid;
}

bool OAIEvaluationAnswerInput_Value::getNotApplicable() const {
    return m_not_applicable;
}
void OAIEvaluationAnswerInput_Value::setNotApplicable(const bool &not_applicable) {
    m_not_applicable = not_applicable;
    m_not_applicable_isSet = true;
}

bool OAIEvaluationAnswerInput_Value::is_not_applicable_Set() const{
    return m_not_applicable_isSet;
}

bool OAIEvaluationAnswerInput_Value::is_not_applicable_Valid() const{
    return m_not_applicable_isValid;
}

bool OAIEvaluationAnswerInput_Value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_applicable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationAnswerInput_Value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
