/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficDistributionGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficDistributionGroup::OAITrafficDistributionGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficDistributionGroup::OAITrafficDistributionGroup() {
    this->initializeModel();
}

OAITrafficDistributionGroup::~OAITrafficDistributionGroup() {}

void OAITrafficDistributionGroup::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_instance_arn_isSet = false;
    m_instance_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAITrafficDistributionGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficDistributionGroup::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_instance_arn, json[QString("InstanceArn")]);
    m_instance_arn_isSet = !json[QString("InstanceArn")].isNull() && m_instance_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAITrafficDistributionGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficDistributionGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_instance_arn_isSet) {
        obj.insert(QString("InstanceArn"), ::OpenAPI::toJsonValue(m_instance_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAITrafficDistributionGroup::getId() const {
    return m_id;
}
void OAITrafficDistributionGroup::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrafficDistributionGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrafficDistributionGroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITrafficDistributionGroup::getArn() const {
    return m_arn;
}
void OAITrafficDistributionGroup::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAITrafficDistributionGroup::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAITrafficDistributionGroup::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAITrafficDistributionGroup::getName() const {
    return m_name;
}
void OAITrafficDistributionGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrafficDistributionGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrafficDistributionGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITrafficDistributionGroup::getDescription() const {
    return m_description;
}
void OAITrafficDistributionGroup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITrafficDistributionGroup::is_description_Set() const{
    return m_description_isSet;
}

bool OAITrafficDistributionGroup::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITrafficDistributionGroup::getInstanceArn() const {
    return m_instance_arn;
}
void OAITrafficDistributionGroup::setInstanceArn(const QString &instance_arn) {
    m_instance_arn = instance_arn;
    m_instance_arn_isSet = true;
}

bool OAITrafficDistributionGroup::is_instance_arn_Set() const{
    return m_instance_arn_isSet;
}

bool OAITrafficDistributionGroup::is_instance_arn_Valid() const{
    return m_instance_arn_isValid;
}

OAITrafficDistributionGroupStatus OAITrafficDistributionGroup::getStatus() const {
    return m_status;
}
void OAITrafficDistributionGroup::setStatus(const OAITrafficDistributionGroupStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITrafficDistributionGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAITrafficDistributionGroup::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAITrafficDistributionGroup::getTags() const {
    return m_tags;
}
void OAITrafficDistributionGroup::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITrafficDistributionGroup::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITrafficDistributionGroup::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAITrafficDistributionGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficDistributionGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
