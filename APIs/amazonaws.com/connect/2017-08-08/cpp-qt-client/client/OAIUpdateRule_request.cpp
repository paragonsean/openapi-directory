/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRule_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRule_request::OAIUpdateRule_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRule_request::OAIUpdateRule_request() {
    this->initializeModel();
}

OAIUpdateRule_request::~OAIUpdateRule_request() {}

void OAIUpdateRule_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_publish_status_isSet = false;
    m_publish_status_isValid = false;
}

void OAIUpdateRule_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRule_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("Function")]);
    m_function_isSet = !json[QString("Function")].isNull() && m_function_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;

    m_publish_status_isValid = ::OpenAPI::fromJsonValue(m_publish_status, json[QString("PublishStatus")]);
    m_publish_status_isSet = !json[QString("PublishStatus")].isNull() && m_publish_status_isValid;
}

QString OAIUpdateRule_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRule_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_function_isSet) {
        obj.insert(QString("Function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_actions.size() > 0) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_publish_status_isSet) {
        obj.insert(QString("PublishStatus"), ::OpenAPI::toJsonValue(m_publish_status));
    }
    return obj;
}

QString OAIUpdateRule_request::getName() const {
    return m_name;
}
void OAIUpdateRule_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateRule_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateRule_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateRule_request::getFunction() const {
    return m_function;
}
void OAIUpdateRule_request::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIUpdateRule_request::is_function_Set() const{
    return m_function_isSet;
}

bool OAIUpdateRule_request::is_function_Valid() const{
    return m_function_isValid;
}

QList<OAIRuleAction> OAIUpdateRule_request::getActions() const {
    return m_actions;
}
void OAIUpdateRule_request::setActions(const QList<OAIRuleAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIUpdateRule_request::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIUpdateRule_request::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIUpdateRule_request::getPublishStatus() const {
    return m_publish_status;
}
void OAIUpdateRule_request::setPublishStatus(const QString &publish_status) {
    m_publish_status = publish_status;
    m_publish_status_isSet = true;
}

bool OAIUpdateRule_request::is_publish_status_Set() const{
    return m_publish_status_isSet;
}

bool OAIUpdateRule_request::is_publish_status_Valid() const{
    return m_publish_status_isValid;
}

bool OAIUpdateRule_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRule_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_function_isValid && m_actions_isValid && m_publish_status_isValid && true;
}

} // namespace OpenAPI
