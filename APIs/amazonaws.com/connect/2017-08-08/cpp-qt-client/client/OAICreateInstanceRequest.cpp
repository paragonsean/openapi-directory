/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInstanceRequest::OAICreateInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInstanceRequest::OAICreateInstanceRequest() {
    this->initializeModel();
}

OAICreateInstanceRequest::~OAICreateInstanceRequest() {}

void OAICreateInstanceRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_identity_management_type_isSet = false;
    m_identity_management_type_isValid = false;

    m_instance_alias_isSet = false;
    m_instance_alias_isValid = false;

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;

    m_inbound_calls_enabled_isSet = false;
    m_inbound_calls_enabled_isValid = false;

    m_outbound_calls_enabled_isSet = false;
    m_outbound_calls_enabled_isValid = false;
}

void OAICreateInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInstanceRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_identity_management_type_isValid = ::OpenAPI::fromJsonValue(m_identity_management_type, json[QString("IdentityManagementType")]);
    m_identity_management_type_isSet = !json[QString("IdentityManagementType")].isNull() && m_identity_management_type_isValid;

    m_instance_alias_isValid = ::OpenAPI::fromJsonValue(m_instance_alias, json[QString("InstanceAlias")]);
    m_instance_alias_isSet = !json[QString("InstanceAlias")].isNull() && m_instance_alias_isValid;

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(m_directory_id, json[QString("DirectoryId")]);
    m_directory_id_isSet = !json[QString("DirectoryId")].isNull() && m_directory_id_isValid;

    m_inbound_calls_enabled_isValid = ::OpenAPI::fromJsonValue(m_inbound_calls_enabled, json[QString("InboundCallsEnabled")]);
    m_inbound_calls_enabled_isSet = !json[QString("InboundCallsEnabled")].isNull() && m_inbound_calls_enabled_isValid;

    m_outbound_calls_enabled_isValid = ::OpenAPI::fromJsonValue(m_outbound_calls_enabled, json[QString("OutboundCallsEnabled")]);
    m_outbound_calls_enabled_isSet = !json[QString("OutboundCallsEnabled")].isNull() && m_outbound_calls_enabled_isValid;
}

QString OAICreateInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_identity_management_type.isSet()) {
        obj.insert(QString("IdentityManagementType"), ::OpenAPI::toJsonValue(m_identity_management_type));
    }
    if (m_instance_alias_isSet) {
        obj.insert(QString("InstanceAlias"), ::OpenAPI::toJsonValue(m_instance_alias));
    }
    if (m_directory_id_isSet) {
        obj.insert(QString("DirectoryId"), ::OpenAPI::toJsonValue(m_directory_id));
    }
    if (m_inbound_calls_enabled_isSet) {
        obj.insert(QString("InboundCallsEnabled"), ::OpenAPI::toJsonValue(m_inbound_calls_enabled));
    }
    if (m_outbound_calls_enabled_isSet) {
        obj.insert(QString("OutboundCallsEnabled"), ::OpenAPI::toJsonValue(m_outbound_calls_enabled));
    }
    return obj;
}

QString OAICreateInstanceRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateInstanceRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateInstanceRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateInstanceRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIDirectoryType OAICreateInstanceRequest::getIdentityManagementType() const {
    return m_identity_management_type;
}
void OAICreateInstanceRequest::setIdentityManagementType(const OAIDirectoryType &identity_management_type) {
    m_identity_management_type = identity_management_type;
    m_identity_management_type_isSet = true;
}

bool OAICreateInstanceRequest::is_identity_management_type_Set() const{
    return m_identity_management_type_isSet;
}

bool OAICreateInstanceRequest::is_identity_management_type_Valid() const{
    return m_identity_management_type_isValid;
}

QString OAICreateInstanceRequest::getInstanceAlias() const {
    return m_instance_alias;
}
void OAICreateInstanceRequest::setInstanceAlias(const QString &instance_alias) {
    m_instance_alias = instance_alias;
    m_instance_alias_isSet = true;
}

bool OAICreateInstanceRequest::is_instance_alias_Set() const{
    return m_instance_alias_isSet;
}

bool OAICreateInstanceRequest::is_instance_alias_Valid() const{
    return m_instance_alias_isValid;
}

QString OAICreateInstanceRequest::getDirectoryId() const {
    return m_directory_id;
}
void OAICreateInstanceRequest::setDirectoryId(const QString &directory_id) {
    m_directory_id = directory_id;
    m_directory_id_isSet = true;
}

bool OAICreateInstanceRequest::is_directory_id_Set() const{
    return m_directory_id_isSet;
}

bool OAICreateInstanceRequest::is_directory_id_Valid() const{
    return m_directory_id_isValid;
}

bool OAICreateInstanceRequest::getInboundCallsEnabled() const {
    return m_inbound_calls_enabled;
}
void OAICreateInstanceRequest::setInboundCallsEnabled(const bool &inbound_calls_enabled) {
    m_inbound_calls_enabled = inbound_calls_enabled;
    m_inbound_calls_enabled_isSet = true;
}

bool OAICreateInstanceRequest::is_inbound_calls_enabled_Set() const{
    return m_inbound_calls_enabled_isSet;
}

bool OAICreateInstanceRequest::is_inbound_calls_enabled_Valid() const{
    return m_inbound_calls_enabled_isValid;
}

bool OAICreateInstanceRequest::getOutboundCallsEnabled() const {
    return m_outbound_calls_enabled;
}
void OAICreateInstanceRequest::setOutboundCallsEnabled(const bool &outbound_calls_enabled) {
    m_outbound_calls_enabled = outbound_calls_enabled;
    m_outbound_calls_enabled_isSet = true;
}

bool OAICreateInstanceRequest::is_outbound_calls_enabled_Set() const{
    return m_outbound_calls_enabled_isSet;
}

bool OAICreateInstanceRequest::is_outbound_calls_enabled_Valid() const{
    return m_outbound_calls_enabled_isValid;
}

bool OAICreateInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_management_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_calls_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_calls_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_management_type_isValid && m_inbound_calls_enabled_isValid && m_outbound_calls_enabled_isValid && true;
}

} // namespace OpenAPI
