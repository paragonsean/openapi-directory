/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSearchSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSearchSummary::OAIUserSearchSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSearchSummary::OAIUserSearchSummary() {
    this->initializeModel();
}

OAIUserSearchSummary::~OAIUserSearchSummary() {}

void OAIUserSearchSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_directory_user_id_isSet = false;
    m_directory_user_id_isValid = false;

    m_hierarchy_group_id_isSet = false;
    m_hierarchy_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identity_info_isSet = false;
    m_identity_info_isValid = false;

    m_phone_config_isSet = false;
    m_phone_config_isValid = false;

    m_routing_profile_id_isSet = false;
    m_routing_profile_id_isValid = false;

    m_security_profile_ids_isSet = false;
    m_security_profile_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUserSearchSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSearchSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_directory_user_id_isValid = ::OpenAPI::fromJsonValue(m_directory_user_id, json[QString("DirectoryUserId")]);
    m_directory_user_id_isSet = !json[QString("DirectoryUserId")].isNull() && m_directory_user_id_isValid;

    m_hierarchy_group_id_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_group_id, json[QString("HierarchyGroupId")]);
    m_hierarchy_group_id_isSet = !json[QString("HierarchyGroupId")].isNull() && m_hierarchy_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_identity_info_isValid = ::OpenAPI::fromJsonValue(m_identity_info, json[QString("IdentityInfo")]);
    m_identity_info_isSet = !json[QString("IdentityInfo")].isNull() && m_identity_info_isValid;

    m_phone_config_isValid = ::OpenAPI::fromJsonValue(m_phone_config, json[QString("PhoneConfig")]);
    m_phone_config_isSet = !json[QString("PhoneConfig")].isNull() && m_phone_config_isValid;

    m_routing_profile_id_isValid = ::OpenAPI::fromJsonValue(m_routing_profile_id, json[QString("RoutingProfileId")]);
    m_routing_profile_id_isSet = !json[QString("RoutingProfileId")].isNull() && m_routing_profile_id_isValid;

    m_security_profile_ids_isValid = ::OpenAPI::fromJsonValue(m_security_profile_ids, json[QString("SecurityProfileIds")]);
    m_security_profile_ids_isSet = !json[QString("SecurityProfileIds")].isNull() && m_security_profile_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;
}

QString OAIUserSearchSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSearchSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_directory_user_id_isSet) {
        obj.insert(QString("DirectoryUserId"), ::OpenAPI::toJsonValue(m_directory_user_id));
    }
    if (m_hierarchy_group_id_isSet) {
        obj.insert(QString("HierarchyGroupId"), ::OpenAPI::toJsonValue(m_hierarchy_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identity_info.isSet()) {
        obj.insert(QString("IdentityInfo"), ::OpenAPI::toJsonValue(m_identity_info));
    }
    if (m_phone_config.isSet()) {
        obj.insert(QString("PhoneConfig"), ::OpenAPI::toJsonValue(m_phone_config));
    }
    if (m_routing_profile_id_isSet) {
        obj.insert(QString("RoutingProfileId"), ::OpenAPI::toJsonValue(m_routing_profile_id));
    }
    if (m_security_profile_ids.isSet()) {
        obj.insert(QString("SecurityProfileIds"), ::OpenAPI::toJsonValue(m_security_profile_ids));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIUserSearchSummary::getArn() const {
    return m_arn;
}
void OAIUserSearchSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUserSearchSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUserSearchSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUserSearchSummary::getDirectoryUserId() const {
    return m_directory_user_id;
}
void OAIUserSearchSummary::setDirectoryUserId(const QString &directory_user_id) {
    m_directory_user_id = directory_user_id;
    m_directory_user_id_isSet = true;
}

bool OAIUserSearchSummary::is_directory_user_id_Set() const{
    return m_directory_user_id_isSet;
}

bool OAIUserSearchSummary::is_directory_user_id_Valid() const{
    return m_directory_user_id_isValid;
}

QString OAIUserSearchSummary::getHierarchyGroupId() const {
    return m_hierarchy_group_id;
}
void OAIUserSearchSummary::setHierarchyGroupId(const QString &hierarchy_group_id) {
    m_hierarchy_group_id = hierarchy_group_id;
    m_hierarchy_group_id_isSet = true;
}

bool OAIUserSearchSummary::is_hierarchy_group_id_Set() const{
    return m_hierarchy_group_id_isSet;
}

bool OAIUserSearchSummary::is_hierarchy_group_id_Valid() const{
    return m_hierarchy_group_id_isValid;
}

QString OAIUserSearchSummary::getId() const {
    return m_id;
}
void OAIUserSearchSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserSearchSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserSearchSummary::is_id_Valid() const{
    return m_id_isValid;
}

OAIUserSearchSummary_IdentityInfo OAIUserSearchSummary::getIdentityInfo() const {
    return m_identity_info;
}
void OAIUserSearchSummary::setIdentityInfo(const OAIUserSearchSummary_IdentityInfo &identity_info) {
    m_identity_info = identity_info;
    m_identity_info_isSet = true;
}

bool OAIUserSearchSummary::is_identity_info_Set() const{
    return m_identity_info_isSet;
}

bool OAIUserSearchSummary::is_identity_info_Valid() const{
    return m_identity_info_isValid;
}

OAIUserPhoneConfig OAIUserSearchSummary::getPhoneConfig() const {
    return m_phone_config;
}
void OAIUserSearchSummary::setPhoneConfig(const OAIUserPhoneConfig &phone_config) {
    m_phone_config = phone_config;
    m_phone_config_isSet = true;
}

bool OAIUserSearchSummary::is_phone_config_Set() const{
    return m_phone_config_isSet;
}

bool OAIUserSearchSummary::is_phone_config_Valid() const{
    return m_phone_config_isValid;
}

QString OAIUserSearchSummary::getRoutingProfileId() const {
    return m_routing_profile_id;
}
void OAIUserSearchSummary::setRoutingProfileId(const QString &routing_profile_id) {
    m_routing_profile_id = routing_profile_id;
    m_routing_profile_id_isSet = true;
}

bool OAIUserSearchSummary::is_routing_profile_id_Set() const{
    return m_routing_profile_id_isSet;
}

bool OAIUserSearchSummary::is_routing_profile_id_Valid() const{
    return m_routing_profile_id_isValid;
}

QList OAIUserSearchSummary::getSecurityProfileIds() const {
    return m_security_profile_ids;
}
void OAIUserSearchSummary::setSecurityProfileIds(const QList &security_profile_ids) {
    m_security_profile_ids = security_profile_ids;
    m_security_profile_ids_isSet = true;
}

bool OAIUserSearchSummary::is_security_profile_ids_Set() const{
    return m_security_profile_ids_isSet;
}

bool OAIUserSearchSummary::is_security_profile_ids_Valid() const{
    return m_security_profile_ids_isValid;
}

QMap OAIUserSearchSummary::getTags() const {
    return m_tags;
}
void OAIUserSearchSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUserSearchSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUserSearchSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIUserSearchSummary::getUsername() const {
    return m_username;
}
void OAIUserSearchSummary::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserSearchSummary::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserSearchSummary::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUserSearchSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_profile_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSearchSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
