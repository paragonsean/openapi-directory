/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRule_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRule_request::OAICreateRule_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRule_request::OAICreateRule_request() {
    this->initializeModel();
}

OAICreateRule_request::~OAICreateRule_request() {}

void OAICreateRule_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_trigger_event_source_isSet = false;
    m_trigger_event_source_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_publish_status_isSet = false;
    m_publish_status_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreateRule_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRule_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_trigger_event_source_isValid = ::OpenAPI::fromJsonValue(m_trigger_event_source, json[QString("TriggerEventSource")]);
    m_trigger_event_source_isSet = !json[QString("TriggerEventSource")].isNull() && m_trigger_event_source_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("Function")]);
    m_function_isSet = !json[QString("Function")].isNull() && m_function_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;

    m_publish_status_isValid = ::OpenAPI::fromJsonValue(m_publish_status, json[QString("PublishStatus")]);
    m_publish_status_isSet = !json[QString("PublishStatus")].isNull() && m_publish_status_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAICreateRule_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRule_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_trigger_event_source.isSet()) {
        obj.insert(QString("TriggerEventSource"), ::OpenAPI::toJsonValue(m_trigger_event_source));
    }
    if (m_function_isSet) {
        obj.insert(QString("Function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_actions.size() > 0) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_publish_status_isSet) {
        obj.insert(QString("PublishStatus"), ::OpenAPI::toJsonValue(m_publish_status));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreateRule_request::getName() const {
    return m_name;
}
void OAICreateRule_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRule_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRule_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateRule_request_TriggerEventSource OAICreateRule_request::getTriggerEventSource() const {
    return m_trigger_event_source;
}
void OAICreateRule_request::setTriggerEventSource(const OAICreateRule_request_TriggerEventSource &trigger_event_source) {
    m_trigger_event_source = trigger_event_source;
    m_trigger_event_source_isSet = true;
}

bool OAICreateRule_request::is_trigger_event_source_Set() const{
    return m_trigger_event_source_isSet;
}

bool OAICreateRule_request::is_trigger_event_source_Valid() const{
    return m_trigger_event_source_isValid;
}

QString OAICreateRule_request::getFunction() const {
    return m_function;
}
void OAICreateRule_request::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAICreateRule_request::is_function_Set() const{
    return m_function_isSet;
}

bool OAICreateRule_request::is_function_Valid() const{
    return m_function_isValid;
}

QList<OAIRuleAction> OAICreateRule_request::getActions() const {
    return m_actions;
}
void OAICreateRule_request::setActions(const QList<OAIRuleAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAICreateRule_request::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAICreateRule_request::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAICreateRule_request::getPublishStatus() const {
    return m_publish_status;
}
void OAICreateRule_request::setPublishStatus(const QString &publish_status) {
    m_publish_status = publish_status;
    m_publish_status_isSet = true;
}

bool OAICreateRule_request::is_publish_status_Set() const{
    return m_publish_status_isSet;
}

bool OAICreateRule_request::is_publish_status_Valid() const{
    return m_publish_status_isValid;
}

QString OAICreateRule_request::getClientToken() const {
    return m_client_token;
}
void OAICreateRule_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateRule_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateRule_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateRule_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_event_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRule_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_trigger_event_source_isValid && m_function_isValid && m_actions_isValid && m_publish_status_isValid && true;
}

} // namespace OpenAPI
