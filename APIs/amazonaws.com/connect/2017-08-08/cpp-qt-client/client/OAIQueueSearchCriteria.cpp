/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueSearchCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueSearchCriteria::OAIQueueSearchCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueSearchCriteria::OAIQueueSearchCriteria() {
    this->initializeModel();
}

OAIQueueSearchCriteria::~OAIQueueSearchCriteria() {}

void OAIQueueSearchCriteria::initializeModel() {

    m_or_conditions_isSet = false;
    m_or_conditions_isValid = false;

    m_and_conditions_isSet = false;
    m_and_conditions_isValid = false;

    m_string_condition_isSet = false;
    m_string_condition_isValid = false;

    m_queue_type_condition_isSet = false;
    m_queue_type_condition_isValid = false;
}

void OAIQueueSearchCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueueSearchCriteria::fromJsonObject(QJsonObject json) {

    m_or_conditions_isValid = ::OpenAPI::fromJsonValue(m_or_conditions, json[QString("OrConditions")]);
    m_or_conditions_isSet = !json[QString("OrConditions")].isNull() && m_or_conditions_isValid;

    m_and_conditions_isValid = ::OpenAPI::fromJsonValue(m_and_conditions, json[QString("AndConditions")]);
    m_and_conditions_isSet = !json[QString("AndConditions")].isNull() && m_and_conditions_isValid;

    m_string_condition_isValid = ::OpenAPI::fromJsonValue(m_string_condition, json[QString("StringCondition")]);
    m_string_condition_isSet = !json[QString("StringCondition")].isNull() && m_string_condition_isValid;

    m_queue_type_condition_isValid = ::OpenAPI::fromJsonValue(m_queue_type_condition, json[QString("QueueTypeCondition")]);
    m_queue_type_condition_isSet = !json[QString("QueueTypeCondition")].isNull() && m_queue_type_condition_isValid;
}

QString OAIQueueSearchCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueueSearchCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_or_conditions.isSet()) {
        obj.insert(QString("OrConditions"), ::OpenAPI::toJsonValue(m_or_conditions));
    }
    if (m_and_conditions.isSet()) {
        obj.insert(QString("AndConditions"), ::OpenAPI::toJsonValue(m_and_conditions));
    }
    if (m_string_condition.isSet()) {
        obj.insert(QString("StringCondition"), ::OpenAPI::toJsonValue(m_string_condition));
    }
    if (m_queue_type_condition.isSet()) {
        obj.insert(QString("QueueTypeCondition"), ::OpenAPI::toJsonValue(m_queue_type_condition));
    }
    return obj;
}

QList OAIQueueSearchCriteria::getOrConditions() const {
    return m_or_conditions;
}
void OAIQueueSearchCriteria::setOrConditions(const QList &or_conditions) {
    m_or_conditions = or_conditions;
    m_or_conditions_isSet = true;
}

bool OAIQueueSearchCriteria::is_or_conditions_Set() const{
    return m_or_conditions_isSet;
}

bool OAIQueueSearchCriteria::is_or_conditions_Valid() const{
    return m_or_conditions_isValid;
}

QList OAIQueueSearchCriteria::getAndConditions() const {
    return m_and_conditions;
}
void OAIQueueSearchCriteria::setAndConditions(const QList &and_conditions) {
    m_and_conditions = and_conditions;
    m_and_conditions_isSet = true;
}

bool OAIQueueSearchCriteria::is_and_conditions_Set() const{
    return m_and_conditions_isSet;
}

bool OAIQueueSearchCriteria::is_and_conditions_Valid() const{
    return m_and_conditions_isValid;
}

OAISearchPrompts_request_SearchCriteria_StringCondition OAIQueueSearchCriteria::getStringCondition() const {
    return m_string_condition;
}
void OAIQueueSearchCriteria::setStringCondition(const OAISearchPrompts_request_SearchCriteria_StringCondition &string_condition) {
    m_string_condition = string_condition;
    m_string_condition_isSet = true;
}

bool OAIQueueSearchCriteria::is_string_condition_Set() const{
    return m_string_condition_isSet;
}

bool OAIQueueSearchCriteria::is_string_condition_Valid() const{
    return m_string_condition_isValid;
}

OAISearchableQueueType OAIQueueSearchCriteria::getQueueTypeCondition() const {
    return m_queue_type_condition;
}
void OAIQueueSearchCriteria::setQueueTypeCondition(const OAISearchableQueueType &queue_type_condition) {
    m_queue_type_condition = queue_type_condition;
    m_queue_type_condition_isSet = true;
}

bool OAIQueueSearchCriteria::is_queue_type_condition_Set() const{
    return m_queue_type_condition_isSet;
}

bool OAIQueueSearchCriteria::is_queue_type_condition_Valid() const{
    return m_queue_type_condition_isValid;
}

bool OAIQueueSearchCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_or_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_and_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_type_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueueSearchCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
