/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRuleResponse_Rule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRuleResponse_Rule::OAIDescribeRuleResponse_Rule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRuleResponse_Rule::OAIDescribeRuleResponse_Rule() {
    this->initializeModel();
}

OAIDescribeRuleResponse_Rule::~OAIDescribeRuleResponse_Rule() {}

void OAIDescribeRuleResponse_Rule::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_rule_arn_isSet = false;
    m_rule_arn_isValid = false;

    m_trigger_event_source_isSet = false;
    m_trigger_event_source_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_publish_status_isSet = false;
    m_publish_status_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeRuleResponse_Rule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRuleResponse_Rule::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("RuleId")]);
    m_rule_id_isSet = !json[QString("RuleId")].isNull() && m_rule_id_isValid;

    m_rule_arn_isValid = ::OpenAPI::fromJsonValue(m_rule_arn, json[QString("RuleArn")]);
    m_rule_arn_isSet = !json[QString("RuleArn")].isNull() && m_rule_arn_isValid;

    m_trigger_event_source_isValid = ::OpenAPI::fromJsonValue(m_trigger_event_source, json[QString("TriggerEventSource")]);
    m_trigger_event_source_isSet = !json[QString("TriggerEventSource")].isNull() && m_trigger_event_source_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("Function")]);
    m_function_isSet = !json[QString("Function")].isNull() && m_function_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;

    m_publish_status_isValid = ::OpenAPI::fromJsonValue(m_publish_status, json[QString("PublishStatus")]);
    m_publish_status_isSet = !json[QString("PublishStatus")].isNull() && m_publish_status_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("LastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("LastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeRuleResponse_Rule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRuleResponse_Rule::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("RuleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_rule_arn_isSet) {
        obj.insert(QString("RuleArn"), ::OpenAPI::toJsonValue(m_rule_arn));
    }
    if (m_trigger_event_source.isSet()) {
        obj.insert(QString("TriggerEventSource"), ::OpenAPI::toJsonValue(m_trigger_event_source));
    }
    if (m_function_isSet) {
        obj.insert(QString("Function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_publish_status.isSet()) {
        obj.insert(QString("PublishStatus"), ::OpenAPI::toJsonValue(m_publish_status));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_last_updated_by_isSet) {
        obj.insert(QString("LastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeRuleResponse_Rule::getName() const {
    return m_name;
}
void OAIDescribeRuleResponse_Rule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeRuleResponse_Rule::getRuleId() const {
    return m_rule_id;
}
void OAIDescribeRuleResponse_Rule::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIDescribeRuleResponse_Rule::getRuleArn() const {
    return m_rule_arn;
}
void OAIDescribeRuleResponse_Rule::setRuleArn(const QString &rule_arn) {
    m_rule_arn = rule_arn;
    m_rule_arn_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_rule_arn_Set() const{
    return m_rule_arn_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_rule_arn_Valid() const{
    return m_rule_arn_isValid;
}

OAICreateRuleRequest_TriggerEventSource OAIDescribeRuleResponse_Rule::getTriggerEventSource() const {
    return m_trigger_event_source;
}
void OAIDescribeRuleResponse_Rule::setTriggerEventSource(const OAICreateRuleRequest_TriggerEventSource &trigger_event_source) {
    m_trigger_event_source = trigger_event_source;
    m_trigger_event_source_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_trigger_event_source_Set() const{
    return m_trigger_event_source_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_trigger_event_source_Valid() const{
    return m_trigger_event_source_isValid;
}

QString OAIDescribeRuleResponse_Rule::getFunction() const {
    return m_function;
}
void OAIDescribeRuleResponse_Rule::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_function_Set() const{
    return m_function_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_function_Valid() const{
    return m_function_isValid;
}

QList OAIDescribeRuleResponse_Rule::getActions() const {
    return m_actions;
}
void OAIDescribeRuleResponse_Rule::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIRulePublishStatus OAIDescribeRuleResponse_Rule::getPublishStatus() const {
    return m_publish_status;
}
void OAIDescribeRuleResponse_Rule::setPublishStatus(const OAIRulePublishStatus &publish_status) {
    m_publish_status = publish_status;
    m_publish_status_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_publish_status_Set() const{
    return m_publish_status_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_publish_status_Valid() const{
    return m_publish_status_isValid;
}

QDateTime OAIDescribeRuleResponse_Rule::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeRuleResponse_Rule::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDescribeRuleResponse_Rule::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDescribeRuleResponse_Rule::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIDescribeRuleResponse_Rule::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIDescribeRuleResponse_Rule::setLastUpdatedBy(const QString &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QMap OAIDescribeRuleResponse_Rule::getTags() const {
    return m_tags;
}
void OAIDescribeRuleResponse_Rule::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeRuleResponse_Rule::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeRuleResponse_Rule::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeRuleResponse_Rule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_event_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRuleResponse_Rule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_rule_id_isValid && m_rule_arn_isValid && m_trigger_event_source_isValid && m_function_isValid && m_actions_isValid && m_publish_status_isValid && m_created_time_isValid && m_last_updated_time_isValid && m_last_updated_by_isValid && true;
}

} // namespace OpenAPI
