/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILexBot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILexBot::OAILexBot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILexBot::OAILexBot() {
    this->initializeModel();
}

OAILexBot::~OAILexBot() {}

void OAILexBot::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_lex_region_isSet = false;
    m_lex_region_isValid = false;
}

void OAILexBot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILexBot::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_lex_region_isValid = ::OpenAPI::fromJsonValue(m_lex_region, json[QString("LexRegion")]);
    m_lex_region_isSet = !json[QString("LexRegion")].isNull() && m_lex_region_isValid;
}

QString OAILexBot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILexBot::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_lex_region_isSet) {
        obj.insert(QString("LexRegion"), ::OpenAPI::toJsonValue(m_lex_region));
    }
    return obj;
}

QString OAILexBot::getName() const {
    return m_name;
}
void OAILexBot::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILexBot::is_name_Set() const{
    return m_name_isSet;
}

bool OAILexBot::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILexBot::getLexRegion() const {
    return m_lex_region;
}
void OAILexBot::setLexRegion(const QString &lex_region) {
    m_lex_region = lex_region;
    m_lex_region_isSet = true;
}

bool OAILexBot::is_lex_region_Set() const{
    return m_lex_region_isSet;
}

bool OAILexBot::is_lex_region_Valid() const{
    return m_lex_region_isValid;
}

bool OAILexBot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lex_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILexBot::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_lex_region_isValid && true;
}

} // namespace OpenAPI
