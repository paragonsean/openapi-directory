/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeContactEvaluationResponse_Evaluation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeContactEvaluationResponse_Evaluation::OAIDescribeContactEvaluationResponse_Evaluation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeContactEvaluationResponse_Evaluation::OAIDescribeContactEvaluationResponse_Evaluation() {
    this->initializeModel();
}

OAIDescribeContactEvaluationResponse_Evaluation::~OAIDescribeContactEvaluationResponse_Evaluation() {}

void OAIDescribeContactEvaluationResponse_Evaluation::initializeModel() {

    m_evaluation_id_isSet = false;
    m_evaluation_id_isValid = false;

    m_evaluation_arn_isSet = false;
    m_evaluation_arn_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_answers_isSet = false;
    m_answers_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_scores_isSet = false;
    m_scores_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeContactEvaluationResponse_Evaluation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeContactEvaluationResponse_Evaluation::fromJsonObject(QJsonObject json) {

    m_evaluation_id_isValid = ::OpenAPI::fromJsonValue(m_evaluation_id, json[QString("EvaluationId")]);
    m_evaluation_id_isSet = !json[QString("EvaluationId")].isNull() && m_evaluation_id_isValid;

    m_evaluation_arn_isValid = ::OpenAPI::fromJsonValue(m_evaluation_arn, json[QString("EvaluationArn")]);
    m_evaluation_arn_isSet = !json[QString("EvaluationArn")].isNull() && m_evaluation_arn_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_answers_isValid = ::OpenAPI::fromJsonValue(m_answers, json[QString("Answers")]);
    m_answers_isSet = !json[QString("Answers")].isNull() && m_answers_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_scores_isValid = ::OpenAPI::fromJsonValue(m_scores, json[QString("Scores")]);
    m_scores_isSet = !json[QString("Scores")].isNull() && m_scores_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeContactEvaluationResponse_Evaluation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeContactEvaluationResponse_Evaluation::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_id_isSet) {
        obj.insert(QString("EvaluationId"), ::OpenAPI::toJsonValue(m_evaluation_id));
    }
    if (m_evaluation_arn_isSet) {
        obj.insert(QString("EvaluationArn"), ::OpenAPI::toJsonValue(m_evaluation_arn));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_answers.isSet()) {
        obj.insert(QString("Answers"), ::OpenAPI::toJsonValue(m_answers));
    }
    if (m_notes.isSet()) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_scores.isSet()) {
        obj.insert(QString("Scores"), ::OpenAPI::toJsonValue(m_scores));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeContactEvaluationResponse_Evaluation::getEvaluationId() const {
    return m_evaluation_id;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setEvaluationId(const QString &evaluation_id) {
    m_evaluation_id = evaluation_id;
    m_evaluation_id_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_evaluation_id_Set() const{
    return m_evaluation_id_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_evaluation_id_Valid() const{
    return m_evaluation_id_isValid;
}

QString OAIDescribeContactEvaluationResponse_Evaluation::getEvaluationArn() const {
    return m_evaluation_arn;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setEvaluationArn(const QString &evaluation_arn) {
    m_evaluation_arn = evaluation_arn;
    m_evaluation_arn_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_evaluation_arn_Set() const{
    return m_evaluation_arn_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_evaluation_arn_Valid() const{
    return m_evaluation_arn_isValid;
}

OAIEvaluation_Metadata OAIDescribeContactEvaluationResponse_Evaluation::getMetadata() const {
    return m_metadata;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setMetadata(const OAIEvaluation_Metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QMap OAIDescribeContactEvaluationResponse_Evaluation::getAnswers() const {
    return m_answers;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setAnswers(const QMap &answers) {
    m_answers = answers;
    m_answers_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_answers_Set() const{
    return m_answers_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_answers_Valid() const{
    return m_answers_isValid;
}

QMap OAIDescribeContactEvaluationResponse_Evaluation::getNotes() const {
    return m_notes;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setNotes(const QMap &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIEvaluationStatus OAIDescribeContactEvaluationResponse_Evaluation::getStatus() const {
    return m_status;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setStatus(const OAIEvaluationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIDescribeContactEvaluationResponse_Evaluation::getScores() const {
    return m_scores;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setScores(const QMap &scores) {
    m_scores = scores;
    m_scores_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_scores_Set() const{
    return m_scores_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_scores_Valid() const{
    return m_scores_isValid;
}

QDateTime OAIDescribeContactEvaluationResponse_Evaluation::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDescribeContactEvaluationResponse_Evaluation::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QMap OAIDescribeContactEvaluationResponse_Evaluation::getTags() const {
    return m_tags;
}
void OAIDescribeContactEvaluationResponse_Evaluation::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_answers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scores.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeContactEvaluationResponse_Evaluation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_evaluation_id_isValid && m_evaluation_arn_isValid && m_metadata_isValid && m_answers_isValid && m_notes_isValid && m_status_isValid && m_created_time_isValid && m_last_modified_time_isValid && true;
}

} // namespace OpenAPI
