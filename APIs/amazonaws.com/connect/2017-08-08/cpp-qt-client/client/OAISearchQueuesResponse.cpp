/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchQueuesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchQueuesResponse::OAISearchQueuesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchQueuesResponse::OAISearchQueuesResponse() {
    this->initializeModel();
}

OAISearchQueuesResponse::~OAISearchQueuesResponse() {}

void OAISearchQueuesResponse::initializeModel() {

    m_queues_isSet = false;
    m_queues_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_approximate_total_count_isSet = false;
    m_approximate_total_count_isValid = false;
}

void OAISearchQueuesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchQueuesResponse::fromJsonObject(QJsonObject json) {

    m_queues_isValid = ::OpenAPI::fromJsonValue(m_queues, json[QString("Queues")]);
    m_queues_isSet = !json[QString("Queues")].isNull() && m_queues_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_approximate_total_count_isValid = ::OpenAPI::fromJsonValue(m_approximate_total_count, json[QString("ApproximateTotalCount")]);
    m_approximate_total_count_isSet = !json[QString("ApproximateTotalCount")].isNull() && m_approximate_total_count_isValid;
}

QString OAISearchQueuesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchQueuesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_queues.isSet()) {
        obj.insert(QString("Queues"), ::OpenAPI::toJsonValue(m_queues));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_approximate_total_count_isSet) {
        obj.insert(QString("ApproximateTotalCount"), ::OpenAPI::toJsonValue(m_approximate_total_count));
    }
    return obj;
}

QList OAISearchQueuesResponse::getQueues() const {
    return m_queues;
}
void OAISearchQueuesResponse::setQueues(const QList &queues) {
    m_queues = queues;
    m_queues_isSet = true;
}

bool OAISearchQueuesResponse::is_queues_Set() const{
    return m_queues_isSet;
}

bool OAISearchQueuesResponse::is_queues_Valid() const{
    return m_queues_isValid;
}

QString OAISearchQueuesResponse::getNextToken() const {
    return m_next_token;
}
void OAISearchQueuesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchQueuesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchQueuesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAISearchQueuesResponse::getApproximateTotalCount() const {
    return m_approximate_total_count;
}
void OAISearchQueuesResponse::setApproximateTotalCount(const qint32 &approximate_total_count) {
    m_approximate_total_count = approximate_total_count;
    m_approximate_total_count_isSet = true;
}

bool OAISearchQueuesResponse::is_approximate_total_count_Set() const{
    return m_approximate_total_count_isSet;
}

bool OAISearchQueuesResponse::is_approximate_total_count_Valid() const{
    return m_approximate_total_count_isValid;
}

bool OAISearchQueuesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_queues.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approximate_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchQueuesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
