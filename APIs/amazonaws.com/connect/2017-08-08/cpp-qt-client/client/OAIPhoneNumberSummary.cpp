/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoneNumberSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoneNumberSummary::OAIPhoneNumberSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoneNumberSummary::OAIPhoneNumberSummary() {
    this->initializeModel();
}

OAIPhoneNumberSummary::~OAIPhoneNumberSummary() {}

void OAIPhoneNumberSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_phone_number_type_isSet = false;
    m_phone_number_type_isValid = false;

    m_phone_number_country_code_isSet = false;
    m_phone_number_country_code_isValid = false;
}

void OAIPhoneNumberSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoneNumberSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_phone_number_type_isValid = ::OpenAPI::fromJsonValue(m_phone_number_type, json[QString("PhoneNumberType")]);
    m_phone_number_type_isSet = !json[QString("PhoneNumberType")].isNull() && m_phone_number_type_isValid;

    m_phone_number_country_code_isValid = ::OpenAPI::fromJsonValue(m_phone_number_country_code, json[QString("PhoneNumberCountryCode")]);
    m_phone_number_country_code_isSet = !json[QString("PhoneNumberCountryCode")].isNull() && m_phone_number_country_code_isValid;
}

QString OAIPhoneNumberSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoneNumberSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_phone_number_type.isSet()) {
        obj.insert(QString("PhoneNumberType"), ::OpenAPI::toJsonValue(m_phone_number_type));
    }
    if (m_phone_number_country_code.isSet()) {
        obj.insert(QString("PhoneNumberCountryCode"), ::OpenAPI::toJsonValue(m_phone_number_country_code));
    }
    return obj;
}

QString OAIPhoneNumberSummary::getId() const {
    return m_id;
}
void OAIPhoneNumberSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPhoneNumberSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPhoneNumberSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPhoneNumberSummary::getArn() const {
    return m_arn;
}
void OAIPhoneNumberSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIPhoneNumberSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIPhoneNumberSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIPhoneNumberSummary::getPhoneNumber() const {
    return m_phone_number;
}
void OAIPhoneNumberSummary::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIPhoneNumberSummary::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIPhoneNumberSummary::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

OAIPhoneNumberType OAIPhoneNumberSummary::getPhoneNumberType() const {
    return m_phone_number_type;
}
void OAIPhoneNumberSummary::setPhoneNumberType(const OAIPhoneNumberType &phone_number_type) {
    m_phone_number_type = phone_number_type;
    m_phone_number_type_isSet = true;
}

bool OAIPhoneNumberSummary::is_phone_number_type_Set() const{
    return m_phone_number_type_isSet;
}

bool OAIPhoneNumberSummary::is_phone_number_type_Valid() const{
    return m_phone_number_type_isValid;
}

OAIPhoneNumberCountryCode OAIPhoneNumberSummary::getPhoneNumberCountryCode() const {
    return m_phone_number_country_code;
}
void OAIPhoneNumberSummary::setPhoneNumberCountryCode(const OAIPhoneNumberCountryCode &phone_number_country_code) {
    m_phone_number_country_code = phone_number_country_code;
    m_phone_number_country_code_isSet = true;
}

bool OAIPhoneNumberSummary::is_phone_number_country_code_Set() const{
    return m_phone_number_country_code_isSet;
}

bool OAIPhoneNumberSummary::is_phone_number_country_code_Valid() const{
    return m_phone_number_country_code_isValid;
}

bool OAIPhoneNumberSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_country_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoneNumberSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
