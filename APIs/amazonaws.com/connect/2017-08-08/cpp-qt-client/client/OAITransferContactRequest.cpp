/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferContactRequest::OAITransferContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferContactRequest::OAITransferContactRequest() {
    this->initializeModel();
}

OAITransferContactRequest::~OAITransferContactRequest() {}

void OAITransferContactRequest::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_queue_id_isSet = false;
    m_queue_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_contact_flow_id_isSet = false;
    m_contact_flow_id_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAITransferContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferContactRequest::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_queue_id_isValid = ::OpenAPI::fromJsonValue(m_queue_id, json[QString("QueueId")]);
    m_queue_id_isSet = !json[QString("QueueId")].isNull() && m_queue_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_contact_flow_id_isValid = ::OpenAPI::fromJsonValue(m_contact_flow_id, json[QString("ContactFlowId")]);
    m_contact_flow_id_isSet = !json[QString("ContactFlowId")].isNull() && m_contact_flow_id_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAITransferContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_queue_id_isSet) {
        obj.insert(QString("QueueId"), ::OpenAPI::toJsonValue(m_queue_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_contact_flow_id_isSet) {
        obj.insert(QString("ContactFlowId"), ::OpenAPI::toJsonValue(m_contact_flow_id));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAITransferContactRequest::getInstanceId() const {
    return m_instance_id;
}
void OAITransferContactRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAITransferContactRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAITransferContactRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAITransferContactRequest::getContactId() const {
    return m_contact_id;
}
void OAITransferContactRequest::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAITransferContactRequest::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAITransferContactRequest::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAITransferContactRequest::getQueueId() const {
    return m_queue_id;
}
void OAITransferContactRequest::setQueueId(const QString &queue_id) {
    m_queue_id = queue_id;
    m_queue_id_isSet = true;
}

bool OAITransferContactRequest::is_queue_id_Set() const{
    return m_queue_id_isSet;
}

bool OAITransferContactRequest::is_queue_id_Valid() const{
    return m_queue_id_isValid;
}

QString OAITransferContactRequest::getUserId() const {
    return m_user_id;
}
void OAITransferContactRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITransferContactRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITransferContactRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAITransferContactRequest::getContactFlowId() const {
    return m_contact_flow_id;
}
void OAITransferContactRequest::setContactFlowId(const QString &contact_flow_id) {
    m_contact_flow_id = contact_flow_id;
    m_contact_flow_id_isSet = true;
}

bool OAITransferContactRequest::is_contact_flow_id_Set() const{
    return m_contact_flow_id_isSet;
}

bool OAITransferContactRequest::is_contact_flow_id_Valid() const{
    return m_contact_flow_id_isValid;
}

QString OAITransferContactRequest::getClientToken() const {
    return m_client_token;
}
void OAITransferContactRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAITransferContactRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAITransferContactRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAITransferContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_flow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_contact_id_isValid && m_contact_flow_id_isValid && true;
}

} // namespace OpenAPI
