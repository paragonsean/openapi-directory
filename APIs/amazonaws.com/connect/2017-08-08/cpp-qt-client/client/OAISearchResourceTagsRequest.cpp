/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResourceTagsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResourceTagsRequest::OAISearchResourceTagsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResourceTagsRequest::OAISearchResourceTagsRequest() {
    this->initializeModel();
}

OAISearchResourceTagsRequest::~OAISearchResourceTagsRequest() {}

void OAISearchResourceTagsRequest::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_search_criteria_isSet = false;
    m_search_criteria_isValid = false;
}

void OAISearchResourceTagsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResourceTagsRequest::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_search_criteria_isValid = ::OpenAPI::fromJsonValue(m_search_criteria, json[QString("SearchCriteria")]);
    m_search_criteria_isSet = !json[QString("SearchCriteria")].isNull() && m_search_criteria_isValid;
}

QString OAISearchResourceTagsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResourceTagsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_search_criteria.isSet()) {
        obj.insert(QString("SearchCriteria"), ::OpenAPI::toJsonValue(m_search_criteria));
    }
    return obj;
}

QString OAISearchResourceTagsRequest::getInstanceId() const {
    return m_instance_id;
}
void OAISearchResourceTagsRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAISearchResourceTagsRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAISearchResourceTagsRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QList OAISearchResourceTagsRequest::getResourceTypes() const {
    return m_resource_types;
}
void OAISearchResourceTagsRequest::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAISearchResourceTagsRequest::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAISearchResourceTagsRequest::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QString OAISearchResourceTagsRequest::getNextToken() const {
    return m_next_token;
}
void OAISearchResourceTagsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchResourceTagsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchResourceTagsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAISearchResourceTagsRequest::getMaxResults() const {
    return m_max_results;
}
void OAISearchResourceTagsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchResourceTagsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchResourceTagsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAISearchResourceTagsRequest_SearchCriteria OAISearchResourceTagsRequest::getSearchCriteria() const {
    return m_search_criteria;
}
void OAISearchResourceTagsRequest::setSearchCriteria(const OAISearchResourceTagsRequest_SearchCriteria &search_criteria) {
    m_search_criteria = search_criteria;
    m_search_criteria_isSet = true;
}

bool OAISearchResourceTagsRequest::is_search_criteria_Set() const{
    return m_search_criteria_isSet;
}

bool OAISearchResourceTagsRequest::is_search_criteria_Valid() const{
    return m_search_criteria_isValid;
}

bool OAISearchResourceTagsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResourceTagsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && true;
}

} // namespace OpenAPI
