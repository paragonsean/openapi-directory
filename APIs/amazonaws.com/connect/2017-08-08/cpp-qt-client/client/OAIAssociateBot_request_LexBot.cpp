/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateBot_request_LexBot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateBot_request_LexBot::OAIAssociateBot_request_LexBot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateBot_request_LexBot::OAIAssociateBot_request_LexBot() {
    this->initializeModel();
}

OAIAssociateBot_request_LexBot::~OAIAssociateBot_request_LexBot() {}

void OAIAssociateBot_request_LexBot::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_lex_region_isSet = false;
    m_lex_region_isValid = false;
}

void OAIAssociateBot_request_LexBot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateBot_request_LexBot::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_lex_region_isValid = ::OpenAPI::fromJsonValue(m_lex_region, json[QString("LexRegion")]);
    m_lex_region_isSet = !json[QString("LexRegion")].isNull() && m_lex_region_isValid;
}

QString OAIAssociateBot_request_LexBot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateBot_request_LexBot::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_lex_region_isSet) {
        obj.insert(QString("LexRegion"), ::OpenAPI::toJsonValue(m_lex_region));
    }
    return obj;
}

QString OAIAssociateBot_request_LexBot::getName() const {
    return m_name;
}
void OAIAssociateBot_request_LexBot::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssociateBot_request_LexBot::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssociateBot_request_LexBot::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAssociateBot_request_LexBot::getLexRegion() const {
    return m_lex_region;
}
void OAIAssociateBot_request_LexBot::setLexRegion(const QString &lex_region) {
    m_lex_region = lex_region;
    m_lex_region_isSet = true;
}

bool OAIAssociateBot_request_LexBot::is_lex_region_Set() const{
    return m_lex_region_isSet;
}

bool OAIAssociateBot_request_LexBot::is_lex_region_Valid() const{
    return m_lex_region_isValid;
}

bool OAIAssociateBot_request_LexBot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lex_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateBot_request_LexBot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
