/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityKey::OAISecurityKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityKey::OAISecurityKey() {
    this->initializeModel();
}

OAISecurityKey::~OAISecurityKey() {}

void OAISecurityKey::initializeModel() {

    m_association_id_isSet = false;
    m_association_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAISecurityKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityKey::fromJsonObject(QJsonObject json) {

    m_association_id_isValid = ::OpenAPI::fromJsonValue(m_association_id, json[QString("AssociationId")]);
    m_association_id_isSet = !json[QString("AssociationId")].isNull() && m_association_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAISecurityKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityKey::asJsonObject() const {
    QJsonObject obj;
    if (m_association_id_isSet) {
        obj.insert(QString("AssociationId"), ::OpenAPI::toJsonValue(m_association_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAISecurityKey::getAssociationId() const {
    return m_association_id;
}
void OAISecurityKey::setAssociationId(const QString &association_id) {
    m_association_id = association_id;
    m_association_id_isSet = true;
}

bool OAISecurityKey::is_association_id_Set() const{
    return m_association_id_isSet;
}

bool OAISecurityKey::is_association_id_Valid() const{
    return m_association_id_isValid;
}

QString OAISecurityKey::getKey() const {
    return m_key;
}
void OAISecurityKey::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISecurityKey::is_key_Set() const{
    return m_key_isSet;
}

bool OAISecurityKey::is_key_Valid() const{
    return m_key_isValid;
}

QDateTime OAISecurityKey::getCreationTime() const {
    return m_creation_time;
}
void OAISecurityKey::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISecurityKey::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISecurityKey::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAISecurityKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
