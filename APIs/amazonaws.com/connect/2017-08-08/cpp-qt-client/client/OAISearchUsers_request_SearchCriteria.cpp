/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchUsers_request_SearchCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchUsers_request_SearchCriteria::OAISearchUsers_request_SearchCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchUsers_request_SearchCriteria::OAISearchUsers_request_SearchCriteria() {
    this->initializeModel();
}

OAISearchUsers_request_SearchCriteria::~OAISearchUsers_request_SearchCriteria() {}

void OAISearchUsers_request_SearchCriteria::initializeModel() {

    m_or_conditions_isSet = false;
    m_or_conditions_isValid = false;

    m_and_conditions_isSet = false;
    m_and_conditions_isValid = false;

    m_string_condition_isSet = false;
    m_string_condition_isValid = false;

    m_hierarchy_group_condition_isSet = false;
    m_hierarchy_group_condition_isValid = false;
}

void OAISearchUsers_request_SearchCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchUsers_request_SearchCriteria::fromJsonObject(QJsonObject json) {

    m_or_conditions_isValid = ::OpenAPI::fromJsonValue(m_or_conditions, json[QString("OrConditions")]);
    m_or_conditions_isSet = !json[QString("OrConditions")].isNull() && m_or_conditions_isValid;

    m_and_conditions_isValid = ::OpenAPI::fromJsonValue(m_and_conditions, json[QString("AndConditions")]);
    m_and_conditions_isSet = !json[QString("AndConditions")].isNull() && m_and_conditions_isValid;

    m_string_condition_isValid = ::OpenAPI::fromJsonValue(m_string_condition, json[QString("StringCondition")]);
    m_string_condition_isSet = !json[QString("StringCondition")].isNull() && m_string_condition_isValid;

    m_hierarchy_group_condition_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_group_condition, json[QString("HierarchyGroupCondition")]);
    m_hierarchy_group_condition_isSet = !json[QString("HierarchyGroupCondition")].isNull() && m_hierarchy_group_condition_isValid;
}

QString OAISearchUsers_request_SearchCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchUsers_request_SearchCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_or_conditions.isSet()) {
        obj.insert(QString("OrConditions"), ::OpenAPI::toJsonValue(m_or_conditions));
    }
    if (m_and_conditions.isSet()) {
        obj.insert(QString("AndConditions"), ::OpenAPI::toJsonValue(m_and_conditions));
    }
    if (m_string_condition.isSet()) {
        obj.insert(QString("StringCondition"), ::OpenAPI::toJsonValue(m_string_condition));
    }
    if (m_hierarchy_group_condition.isSet()) {
        obj.insert(QString("HierarchyGroupCondition"), ::OpenAPI::toJsonValue(m_hierarchy_group_condition));
    }
    return obj;
}

QList OAISearchUsers_request_SearchCriteria::getOrConditions() const {
    return m_or_conditions;
}
void OAISearchUsers_request_SearchCriteria::setOrConditions(const QList &or_conditions) {
    m_or_conditions = or_conditions;
    m_or_conditions_isSet = true;
}

bool OAISearchUsers_request_SearchCriteria::is_or_conditions_Set() const{
    return m_or_conditions_isSet;
}

bool OAISearchUsers_request_SearchCriteria::is_or_conditions_Valid() const{
    return m_or_conditions_isValid;
}

QList OAISearchUsers_request_SearchCriteria::getAndConditions() const {
    return m_and_conditions;
}
void OAISearchUsers_request_SearchCriteria::setAndConditions(const QList &and_conditions) {
    m_and_conditions = and_conditions;
    m_and_conditions_isSet = true;
}

bool OAISearchUsers_request_SearchCriteria::is_and_conditions_Set() const{
    return m_and_conditions_isSet;
}

bool OAISearchUsers_request_SearchCriteria::is_and_conditions_Valid() const{
    return m_and_conditions_isValid;
}

OAISearchPrompts_request_SearchCriteria_StringCondition OAISearchUsers_request_SearchCriteria::getStringCondition() const {
    return m_string_condition;
}
void OAISearchUsers_request_SearchCriteria::setStringCondition(const OAISearchPrompts_request_SearchCriteria_StringCondition &string_condition) {
    m_string_condition = string_condition;
    m_string_condition_isSet = true;
}

bool OAISearchUsers_request_SearchCriteria::is_string_condition_Set() const{
    return m_string_condition_isSet;
}

bool OAISearchUsers_request_SearchCriteria::is_string_condition_Valid() const{
    return m_string_condition_isValid;
}

OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition OAISearchUsers_request_SearchCriteria::getHierarchyGroupCondition() const {
    return m_hierarchy_group_condition;
}
void OAISearchUsers_request_SearchCriteria::setHierarchyGroupCondition(const OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition &hierarchy_group_condition) {
    m_hierarchy_group_condition = hierarchy_group_condition;
    m_hierarchy_group_condition_isSet = true;
}

bool OAISearchUsers_request_SearchCriteria::is_hierarchy_group_condition_Set() const{
    return m_hierarchy_group_condition_isSet;
}

bool OAISearchUsers_request_SearchCriteria::is_hierarchy_group_condition_Valid() const{
    return m_hierarchy_group_condition_isValid;
}

bool OAISearchUsers_request_SearchCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_or_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_and_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_group_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchUsers_request_SearchCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
