/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoricalMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoricalMetric::OAIHistoricalMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoricalMetric::OAIHistoricalMetric() {
    this->initializeModel();
}

OAIHistoricalMetric::~OAIHistoricalMetric() {}

void OAIHistoricalMetric::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_statistic_isSet = false;
    m_statistic_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIHistoricalMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoricalMetric::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("Threshold")]);
    m_threshold_isSet = !json[QString("Threshold")].isNull() && m_threshold_isValid;

    m_statistic_isValid = ::OpenAPI::fromJsonValue(m_statistic, json[QString("Statistic")]);
    m_statistic_isSet = !json[QString("Statistic")].isNull() && m_statistic_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAIHistoricalMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoricalMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_threshold.isSet()) {
        obj.insert(QString("Threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_statistic.isSet()) {
        obj.insert(QString("Statistic"), ::OpenAPI::toJsonValue(m_statistic));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

OAIHistoricalMetricName OAIHistoricalMetric::getName() const {
    return m_name;
}
void OAIHistoricalMetric::setName(const OAIHistoricalMetricName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHistoricalMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHistoricalMetric::is_name_Valid() const{
    return m_name_isValid;
}

OAIHistoricalMetric_Threshold OAIHistoricalMetric::getThreshold() const {
    return m_threshold;
}
void OAIHistoricalMetric::setThreshold(const OAIHistoricalMetric_Threshold &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIHistoricalMetric::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIHistoricalMetric::is_threshold_Valid() const{
    return m_threshold_isValid;
}

OAIStatistic OAIHistoricalMetric::getStatistic() const {
    return m_statistic;
}
void OAIHistoricalMetric::setStatistic(const OAIStatistic &statistic) {
    m_statistic = statistic;
    m_statistic_isSet = true;
}

bool OAIHistoricalMetric::is_statistic_Set() const{
    return m_statistic_isSet;
}

bool OAIHistoricalMetric::is_statistic_Valid() const{
    return m_statistic_isValid;
}

OAIUnit OAIHistoricalMetric::getUnit() const {
    return m_unit;
}
void OAIHistoricalMetric::setUnit(const OAIUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIHistoricalMetric::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIHistoricalMetric::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIHistoricalMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoricalMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
