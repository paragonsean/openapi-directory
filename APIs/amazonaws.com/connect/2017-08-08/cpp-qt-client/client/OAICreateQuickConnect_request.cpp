/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateQuickConnect_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateQuickConnect_request::OAICreateQuickConnect_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateQuickConnect_request::OAICreateQuickConnect_request() {
    this->initializeModel();
}

OAICreateQuickConnect_request::~OAICreateQuickConnect_request() {}

void OAICreateQuickConnect_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_quick_connect_config_isSet = false;
    m_quick_connect_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateQuickConnect_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateQuickConnect_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_quick_connect_config_isValid = ::OpenAPI::fromJsonValue(m_quick_connect_config, json[QString("QuickConnectConfig")]);
    m_quick_connect_config_isSet = !json[QString("QuickConnectConfig")].isNull() && m_quick_connect_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateQuickConnect_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateQuickConnect_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_quick_connect_config.isSet()) {
        obj.insert(QString("QuickConnectConfig"), ::OpenAPI::toJsonValue(m_quick_connect_config));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateQuickConnect_request::getName() const {
    return m_name;
}
void OAICreateQuickConnect_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateQuickConnect_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateQuickConnect_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateQuickConnect_request::getDescription() const {
    return m_description;
}
void OAICreateQuickConnect_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateQuickConnect_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateQuickConnect_request::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateQuickConnect_request_QuickConnectConfig OAICreateQuickConnect_request::getQuickConnectConfig() const {
    return m_quick_connect_config;
}
void OAICreateQuickConnect_request::setQuickConnectConfig(const OAICreateQuickConnect_request_QuickConnectConfig &quick_connect_config) {
    m_quick_connect_config = quick_connect_config;
    m_quick_connect_config_isSet = true;
}

bool OAICreateQuickConnect_request::is_quick_connect_config_Set() const{
    return m_quick_connect_config_isSet;
}

bool OAICreateQuickConnect_request::is_quick_connect_config_Valid() const{
    return m_quick_connect_config_isValid;
}

QMap<QString, QString> OAICreateQuickConnect_request::getTags() const {
    return m_tags;
}
void OAICreateQuickConnect_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateQuickConnect_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateQuickConnect_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateQuickConnect_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quick_connect_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateQuickConnect_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_quick_connect_config_isValid && true;
}

} // namespace OpenAPI
