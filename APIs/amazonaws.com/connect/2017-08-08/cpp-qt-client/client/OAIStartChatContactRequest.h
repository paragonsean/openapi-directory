/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartChatContactRequest.h
 *
 * 
 */

#ifndef OAIStartChatContactRequest_H
#define OAIStartChatContactRequest_H

#include <QJsonObject>

#include "OAIStartChatContactRequest_InitialMessage.h"
#include "OAIStartChatContactRequest_ParticipantDetails.h"
#include "OAIStartChatContactRequest_PersistentChat.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStartChatContactRequest_ParticipantDetails;
class OAIStartChatContactRequest_InitialMessage;
class OAIStartChatContactRequest_PersistentChat;

class OAIStartChatContactRequest : public OAIObject {
public:
    OAIStartChatContactRequest();
    OAIStartChatContactRequest(QString json);
    ~OAIStartChatContactRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    QString getContactFlowId() const;
    void setContactFlowId(const QString &contact_flow_id);
    bool is_contact_flow_id_Set() const;
    bool is_contact_flow_id_Valid() const;

    QMap getAttributes() const;
    void setAttributes(const QMap &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    OAIStartChatContactRequest_ParticipantDetails getParticipantDetails() const;
    void setParticipantDetails(const OAIStartChatContactRequest_ParticipantDetails &participant_details);
    bool is_participant_details_Set() const;
    bool is_participant_details_Valid() const;

    OAIStartChatContactRequest_InitialMessage getInitialMessage() const;
    void setInitialMessage(const OAIStartChatContactRequest_InitialMessage &initial_message);
    bool is_initial_message_Set() const;
    bool is_initial_message_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    qint32 getChatDurationInMinutes() const;
    void setChatDurationInMinutes(const qint32 &chat_duration_in_minutes);
    bool is_chat_duration_in_minutes_Set() const;
    bool is_chat_duration_in_minutes_Valid() const;

    QList getSupportedMessagingContentTypes() const;
    void setSupportedMessagingContentTypes(const QList &supported_messaging_content_types);
    bool is_supported_messaging_content_types_Set() const;
    bool is_supported_messaging_content_types_Valid() const;

    OAIStartChatContactRequest_PersistentChat getPersistentChat() const;
    void setPersistentChat(const OAIStartChatContactRequest_PersistentChat &persistent_chat);
    bool is_persistent_chat_Set() const;
    bool is_persistent_chat_Valid() const;

    QString getRelatedContactId() const;
    void setRelatedContactId(const QString &related_contact_id);
    bool is_related_contact_id_Set() const;
    bool is_related_contact_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    QString m_contact_flow_id;
    bool m_contact_flow_id_isSet;
    bool m_contact_flow_id_isValid;

    QMap m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    OAIStartChatContactRequest_ParticipantDetails m_participant_details;
    bool m_participant_details_isSet;
    bool m_participant_details_isValid;

    OAIStartChatContactRequest_InitialMessage m_initial_message;
    bool m_initial_message_isSet;
    bool m_initial_message_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    qint32 m_chat_duration_in_minutes;
    bool m_chat_duration_in_minutes_isSet;
    bool m_chat_duration_in_minutes_isValid;

    QList m_supported_messaging_content_types;
    bool m_supported_messaging_content_types_isSet;
    bool m_supported_messaging_content_types_isValid;

    OAIStartChatContactRequest_PersistentChat m_persistent_chat;
    bool m_persistent_chat_isSet;
    bool m_persistent_chat_isValid;

    QString m_related_contact_id;
    bool m_related_contact_id_isSet;
    bool m_related_contact_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartChatContactRequest)

#endif // OAIStartChatContactRequest_H
