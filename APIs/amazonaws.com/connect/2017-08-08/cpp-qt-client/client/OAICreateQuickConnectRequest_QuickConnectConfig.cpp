/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateQuickConnectRequest_QuickConnectConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateQuickConnectRequest_QuickConnectConfig::OAICreateQuickConnectRequest_QuickConnectConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateQuickConnectRequest_QuickConnectConfig::OAICreateQuickConnectRequest_QuickConnectConfig() {
    this->initializeModel();
}

OAICreateQuickConnectRequest_QuickConnectConfig::~OAICreateQuickConnectRequest_QuickConnectConfig() {}

void OAICreateQuickConnectRequest_QuickConnectConfig::initializeModel() {

    m_quick_connect_type_isSet = false;
    m_quick_connect_type_isValid = false;

    m_user_config_isSet = false;
    m_user_config_isValid = false;

    m_queue_config_isSet = false;
    m_queue_config_isValid = false;

    m_phone_config_isSet = false;
    m_phone_config_isValid = false;
}

void OAICreateQuickConnectRequest_QuickConnectConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateQuickConnectRequest_QuickConnectConfig::fromJsonObject(QJsonObject json) {

    m_quick_connect_type_isValid = ::OpenAPI::fromJsonValue(m_quick_connect_type, json[QString("QuickConnectType")]);
    m_quick_connect_type_isSet = !json[QString("QuickConnectType")].isNull() && m_quick_connect_type_isValid;

    m_user_config_isValid = ::OpenAPI::fromJsonValue(m_user_config, json[QString("UserConfig")]);
    m_user_config_isSet = !json[QString("UserConfig")].isNull() && m_user_config_isValid;

    m_queue_config_isValid = ::OpenAPI::fromJsonValue(m_queue_config, json[QString("QueueConfig")]);
    m_queue_config_isSet = !json[QString("QueueConfig")].isNull() && m_queue_config_isValid;

    m_phone_config_isValid = ::OpenAPI::fromJsonValue(m_phone_config, json[QString("PhoneConfig")]);
    m_phone_config_isSet = !json[QString("PhoneConfig")].isNull() && m_phone_config_isValid;
}

QString OAICreateQuickConnectRequest_QuickConnectConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateQuickConnectRequest_QuickConnectConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_quick_connect_type.isSet()) {
        obj.insert(QString("QuickConnectType"), ::OpenAPI::toJsonValue(m_quick_connect_type));
    }
    if (m_user_config.isSet()) {
        obj.insert(QString("UserConfig"), ::OpenAPI::toJsonValue(m_user_config));
    }
    if (m_queue_config.isSet()) {
        obj.insert(QString("QueueConfig"), ::OpenAPI::toJsonValue(m_queue_config));
    }
    if (m_phone_config.isSet()) {
        obj.insert(QString("PhoneConfig"), ::OpenAPI::toJsonValue(m_phone_config));
    }
    return obj;
}

OAIQuickConnectType OAICreateQuickConnectRequest_QuickConnectConfig::getQuickConnectType() const {
    return m_quick_connect_type;
}
void OAICreateQuickConnectRequest_QuickConnectConfig::setQuickConnectType(const OAIQuickConnectType &quick_connect_type) {
    m_quick_connect_type = quick_connect_type;
    m_quick_connect_type_isSet = true;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::is_quick_connect_type_Set() const{
    return m_quick_connect_type_isSet;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::is_quick_connect_type_Valid() const{
    return m_quick_connect_type_isValid;
}

OAICreateQuickConnect_request_QuickConnectConfig_UserConfig OAICreateQuickConnectRequest_QuickConnectConfig::getUserConfig() const {
    return m_user_config;
}
void OAICreateQuickConnectRequest_QuickConnectConfig::setUserConfig(const OAICreateQuickConnect_request_QuickConnectConfig_UserConfig &user_config) {
    m_user_config = user_config;
    m_user_config_isSet = true;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::is_user_config_Set() const{
    return m_user_config_isSet;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::is_user_config_Valid() const{
    return m_user_config_isValid;
}

OAICreateQuickConnect_request_QuickConnectConfig_QueueConfig OAICreateQuickConnectRequest_QuickConnectConfig::getQueueConfig() const {
    return m_queue_config;
}
void OAICreateQuickConnectRequest_QuickConnectConfig::setQueueConfig(const OAICreateQuickConnect_request_QuickConnectConfig_QueueConfig &queue_config) {
    m_queue_config = queue_config;
    m_queue_config_isSet = true;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::is_queue_config_Set() const{
    return m_queue_config_isSet;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::is_queue_config_Valid() const{
    return m_queue_config_isValid;
}

OAICreateQuickConnect_request_QuickConnectConfig_PhoneConfig OAICreateQuickConnectRequest_QuickConnectConfig::getPhoneConfig() const {
    return m_phone_config;
}
void OAICreateQuickConnectRequest_QuickConnectConfig::setPhoneConfig(const OAICreateQuickConnect_request_QuickConnectConfig_PhoneConfig &phone_config) {
    m_phone_config = phone_config;
    m_phone_config_isSet = true;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::is_phone_config_Set() const{
    return m_phone_config_isSet;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::is_phone_config_Valid() const{
    return m_phone_config_isValid;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quick_connect_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateQuickConnectRequest_QuickConnectConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quick_connect_type_isValid && true;
}

} // namespace OpenAPI
