/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeContactFlowResponse_ContactFlow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeContactFlowResponse_ContactFlow::OAIDescribeContactFlowResponse_ContactFlow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeContactFlowResponse_ContactFlow::OAIDescribeContactFlowResponse_ContactFlow() {
    this->initializeModel();
}

OAIDescribeContactFlowResponse_ContactFlow::~OAIDescribeContactFlowResponse_ContactFlow() {}

void OAIDescribeContactFlowResponse_ContactFlow::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeContactFlowResponse_ContactFlow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeContactFlowResponse_ContactFlow::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeContactFlowResponse_ContactFlow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeContactFlowResponse_ContactFlow::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeContactFlowResponse_ContactFlow::getArn() const {
    return m_arn;
}
void OAIDescribeContactFlowResponse_ContactFlow::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeContactFlowResponse_ContactFlow::getId() const {
    return m_id;
}
void OAIDescribeContactFlowResponse_ContactFlow::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDescribeContactFlowResponse_ContactFlow::getName() const {
    return m_name;
}
void OAIDescribeContactFlowResponse_ContactFlow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_name_Valid() const{
    return m_name_isValid;
}

OAIContactFlowType OAIDescribeContactFlowResponse_ContactFlow::getType() const {
    return m_type;
}
void OAIDescribeContactFlowResponse_ContactFlow::setType(const OAIContactFlowType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_type_Valid() const{
    return m_type_isValid;
}

OAIContactFlowState OAIDescribeContactFlowResponse_ContactFlow::getState() const {
    return m_state;
}
void OAIDescribeContactFlowResponse_ContactFlow::setState(const OAIContactFlowState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDescribeContactFlowResponse_ContactFlow::getDescription() const {
    return m_description;
}
void OAIDescribeContactFlowResponse_ContactFlow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeContactFlowResponse_ContactFlow::getContent() const {
    return m_content;
}
void OAIDescribeContactFlowResponse_ContactFlow::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_content_Set() const{
    return m_content_isSet;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_content_Valid() const{
    return m_content_isValid;
}

QMap OAIDescribeContactFlowResponse_ContactFlow::getTags() const {
    return m_tags;
}
void OAIDescribeContactFlowResponse_ContactFlow::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeContactFlowResponse_ContactFlow::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeContactFlowResponse_ContactFlow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeContactFlowResponse_ContactFlow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
