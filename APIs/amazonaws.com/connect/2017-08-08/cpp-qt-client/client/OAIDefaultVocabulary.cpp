/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultVocabulary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultVocabulary::OAIDefaultVocabulary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultVocabulary::OAIDefaultVocabulary() {
    this->initializeModel();
}

OAIDefaultVocabulary::~OAIDefaultVocabulary() {}

void OAIDefaultVocabulary::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_vocabulary_id_isSet = false;
    m_vocabulary_id_isValid = false;

    m_vocabulary_name_isSet = false;
    m_vocabulary_name_isValid = false;
}

void OAIDefaultVocabulary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultVocabulary::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_vocabulary_id_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_id, json[QString("VocabularyId")]);
    m_vocabulary_id_isSet = !json[QString("VocabularyId")].isNull() && m_vocabulary_id_isValid;

    m_vocabulary_name_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_name, json[QString("VocabularyName")]);
    m_vocabulary_name_isSet = !json[QString("VocabularyName")].isNull() && m_vocabulary_name_isValid;
}

QString OAIDefaultVocabulary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultVocabulary::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_vocabulary_id_isSet) {
        obj.insert(QString("VocabularyId"), ::OpenAPI::toJsonValue(m_vocabulary_id));
    }
    if (m_vocabulary_name_isSet) {
        obj.insert(QString("VocabularyName"), ::OpenAPI::toJsonValue(m_vocabulary_name));
    }
    return obj;
}

QString OAIDefaultVocabulary::getInstanceId() const {
    return m_instance_id;
}
void OAIDefaultVocabulary::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIDefaultVocabulary::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIDefaultVocabulary::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

OAIVocabularyLanguageCode OAIDefaultVocabulary::getLanguageCode() const {
    return m_language_code;
}
void OAIDefaultVocabulary::setLanguageCode(const OAIVocabularyLanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIDefaultVocabulary::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIDefaultVocabulary::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIDefaultVocabulary::getVocabularyId() const {
    return m_vocabulary_id;
}
void OAIDefaultVocabulary::setVocabularyId(const QString &vocabulary_id) {
    m_vocabulary_id = vocabulary_id;
    m_vocabulary_id_isSet = true;
}

bool OAIDefaultVocabulary::is_vocabulary_id_Set() const{
    return m_vocabulary_id_isSet;
}

bool OAIDefaultVocabulary::is_vocabulary_id_Valid() const{
    return m_vocabulary_id_isValid;
}

QString OAIDefaultVocabulary::getVocabularyName() const {
    return m_vocabulary_name;
}
void OAIDefaultVocabulary::setVocabularyName(const QString &vocabulary_name) {
    m_vocabulary_name = vocabulary_name;
    m_vocabulary_name_isSet = true;
}

bool OAIDefaultVocabulary::is_vocabulary_name_Set() const{
    return m_vocabulary_name_isSet;
}

bool OAIDefaultVocabulary::is_vocabulary_name_Valid() const{
    return m_vocabulary_name_isValid;
}

bool OAIDefaultVocabulary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultVocabulary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_language_code_isValid && m_vocabulary_id_isValid && m_vocabulary_name_isValid && true;
}

} // namespace OpenAPI
