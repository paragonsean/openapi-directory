/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactFlow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactFlow::OAIContactFlow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactFlow::OAIContactFlow() {
    this->initializeModel();
}

OAIContactFlow::~OAIContactFlow() {}

void OAIContactFlow::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIContactFlow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactFlow::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIContactFlow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactFlow::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIContactFlow::getArn() const {
    return m_arn;
}
void OAIContactFlow::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIContactFlow::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIContactFlow::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIContactFlow::getId() const {
    return m_id;
}
void OAIContactFlow::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContactFlow::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContactFlow::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIContactFlow::getName() const {
    return m_name;
}
void OAIContactFlow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContactFlow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContactFlow::is_name_Valid() const{
    return m_name_isValid;
}

OAIContactFlowType OAIContactFlow::getType() const {
    return m_type;
}
void OAIContactFlow::setType(const OAIContactFlowType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContactFlow::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContactFlow::is_type_Valid() const{
    return m_type_isValid;
}

OAIContactFlowState OAIContactFlow::getState() const {
    return m_state;
}
void OAIContactFlow::setState(const OAIContactFlowState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIContactFlow::is_state_Set() const{
    return m_state_isSet;
}

bool OAIContactFlow::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIContactFlow::getDescription() const {
    return m_description;
}
void OAIContactFlow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContactFlow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContactFlow::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIContactFlow::getContent() const {
    return m_content;
}
void OAIContactFlow::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIContactFlow::is_content_Set() const{
    return m_content_isSet;
}

bool OAIContactFlow::is_content_Valid() const{
    return m_content_isValid;
}

QMap OAIContactFlow::getTags() const {
    return m_tags;
}
void OAIContactFlow::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIContactFlow::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIContactFlow::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIContactFlow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactFlow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
