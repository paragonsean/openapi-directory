/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicateInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicateInstanceRequest::OAIReplicateInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicateInstanceRequest::OAIReplicateInstanceRequest() {
    this->initializeModel();
}

OAIReplicateInstanceRequest::~OAIReplicateInstanceRequest() {}

void OAIReplicateInstanceRequest::initializeModel() {

    m_replica_region_isSet = false;
    m_replica_region_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_replica_alias_isSet = false;
    m_replica_alias_isValid = false;
}

void OAIReplicateInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicateInstanceRequest::fromJsonObject(QJsonObject json) {

    m_replica_region_isValid = ::OpenAPI::fromJsonValue(m_replica_region, json[QString("ReplicaRegion")]);
    m_replica_region_isSet = !json[QString("ReplicaRegion")].isNull() && m_replica_region_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_replica_alias_isValid = ::OpenAPI::fromJsonValue(m_replica_alias, json[QString("ReplicaAlias")]);
    m_replica_alias_isSet = !json[QString("ReplicaAlias")].isNull() && m_replica_alias_isValid;
}

QString OAIReplicateInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicateInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_replica_region_isSet) {
        obj.insert(QString("ReplicaRegion"), ::OpenAPI::toJsonValue(m_replica_region));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_replica_alias_isSet) {
        obj.insert(QString("ReplicaAlias"), ::OpenAPI::toJsonValue(m_replica_alias));
    }
    return obj;
}

QString OAIReplicateInstanceRequest::getReplicaRegion() const {
    return m_replica_region;
}
void OAIReplicateInstanceRequest::setReplicaRegion(const QString &replica_region) {
    m_replica_region = replica_region;
    m_replica_region_isSet = true;
}

bool OAIReplicateInstanceRequest::is_replica_region_Set() const{
    return m_replica_region_isSet;
}

bool OAIReplicateInstanceRequest::is_replica_region_Valid() const{
    return m_replica_region_isValid;
}

QString OAIReplicateInstanceRequest::getClientToken() const {
    return m_client_token;
}
void OAIReplicateInstanceRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIReplicateInstanceRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIReplicateInstanceRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIReplicateInstanceRequest::getReplicaAlias() const {
    return m_replica_alias;
}
void OAIReplicateInstanceRequest::setReplicaAlias(const QString &replica_alias) {
    m_replica_alias = replica_alias;
    m_replica_alias_isSet = true;
}

bool OAIReplicateInstanceRequest::is_replica_alias_Set() const{
    return m_replica_alias_isSet;
}

bool OAIReplicateInstanceRequest::is_replica_alias_Valid() const{
    return m_replica_alias_isValid;
}

bool OAIReplicateInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_replica_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_alias_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicateInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_replica_region_isValid && m_replica_alias_isValid && true;
}

} // namespace OpenAPI
