/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMediaConcurrency.h
 *
 * Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
 */

#ifndef OAIMediaConcurrency_H
#define OAIMediaConcurrency_H

#include <QJsonObject>

#include "OAIChannel.h"
#include "OAIMediaConcurrency_CrossChannelBehavior.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMediaConcurrency_CrossChannelBehavior;

class OAIMediaConcurrency : public OAIObject {
public:
    OAIMediaConcurrency();
    OAIMediaConcurrency(QString json);
    ~OAIMediaConcurrency() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChannel getChannel() const;
    void setChannel(const OAIChannel &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    qint32 getConcurrency() const;
    void setConcurrency(const qint32 &concurrency);
    bool is_concurrency_Set() const;
    bool is_concurrency_Valid() const;

    OAIMediaConcurrency_CrossChannelBehavior getCrossChannelBehavior() const;
    void setCrossChannelBehavior(const OAIMediaConcurrency_CrossChannelBehavior &cross_channel_behavior);
    bool is_cross_channel_behavior_Set() const;
    bool is_cross_channel_behavior_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChannel m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    qint32 m_concurrency;
    bool m_concurrency_isSet;
    bool m_concurrency_isValid;

    OAIMediaConcurrency_CrossChannelBehavior m_cross_channel_behavior;
    bool m_cross_channel_behavior_isSet;
    bool m_cross_channel_behavior_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMediaConcurrency)

#endif // OAIMediaConcurrency_H
