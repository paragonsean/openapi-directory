/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationFormNumericQuestionOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationFormNumericQuestionOption::OAIEvaluationFormNumericQuestionOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationFormNumericQuestionOption::OAIEvaluationFormNumericQuestionOption() {
    this->initializeModel();
}

OAIEvaluationFormNumericQuestionOption::~OAIEvaluationFormNumericQuestionOption() {}

void OAIEvaluationFormNumericQuestionOption::initializeModel() {

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_automatic_fail_isSet = false;
    m_automatic_fail_isValid = false;
}

void OAIEvaluationFormNumericQuestionOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationFormNumericQuestionOption::fromJsonObject(QJsonObject json) {

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("MinValue")]);
    m_min_value_isSet = !json[QString("MinValue")].isNull() && m_min_value_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("MaxValue")]);
    m_max_value_isSet = !json[QString("MaxValue")].isNull() && m_max_value_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_automatic_fail_isValid = ::OpenAPI::fromJsonValue(m_automatic_fail, json[QString("AutomaticFail")]);
    m_automatic_fail_isSet = !json[QString("AutomaticFail")].isNull() && m_automatic_fail_isValid;
}

QString OAIEvaluationFormNumericQuestionOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationFormNumericQuestionOption::asJsonObject() const {
    QJsonObject obj;
    if (m_min_value_isSet) {
        obj.insert(QString("MinValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("MaxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_automatic_fail_isSet) {
        obj.insert(QString("AutomaticFail"), ::OpenAPI::toJsonValue(m_automatic_fail));
    }
    return obj;
}

qint32 OAIEvaluationFormNumericQuestionOption::getMinValue() const {
    return m_min_value;
}
void OAIEvaluationFormNumericQuestionOption::setMinValue(const qint32 &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIEvaluationFormNumericQuestionOption::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIEvaluationFormNumericQuestionOption::is_min_value_Valid() const{
    return m_min_value_isValid;
}

qint32 OAIEvaluationFormNumericQuestionOption::getMaxValue() const {
    return m_max_value;
}
void OAIEvaluationFormNumericQuestionOption::setMaxValue(const qint32 &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIEvaluationFormNumericQuestionOption::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIEvaluationFormNumericQuestionOption::is_max_value_Valid() const{
    return m_max_value_isValid;
}

qint32 OAIEvaluationFormNumericQuestionOption::getScore() const {
    return m_score;
}
void OAIEvaluationFormNumericQuestionOption::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIEvaluationFormNumericQuestionOption::is_score_Set() const{
    return m_score_isSet;
}

bool OAIEvaluationFormNumericQuestionOption::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIEvaluationFormNumericQuestionOption::getAutomaticFail() const {
    return m_automatic_fail;
}
void OAIEvaluationFormNumericQuestionOption::setAutomaticFail(const bool &automatic_fail) {
    m_automatic_fail = automatic_fail;
    m_automatic_fail_isSet = true;
}

bool OAIEvaluationFormNumericQuestionOption::is_automatic_fail_Set() const{
    return m_automatic_fail_isSet;
}

bool OAIEvaluationFormNumericQuestionOption::is_automatic_fail_Valid() const{
    return m_automatic_fail_isValid;
}

bool OAIEvaluationFormNumericQuestionOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_fail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationFormNumericQuestionOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_min_value_isValid && m_max_value_isValid && true;
}

} // namespace OpenAPI
