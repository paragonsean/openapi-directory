/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartChatContact_request_PersistentChat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartChatContact_request_PersistentChat::OAIStartChatContact_request_PersistentChat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartChatContact_request_PersistentChat::OAIStartChatContact_request_PersistentChat() {
    this->initializeModel();
}

OAIStartChatContact_request_PersistentChat::~OAIStartChatContact_request_PersistentChat() {}

void OAIStartChatContact_request_PersistentChat::initializeModel() {

    m_rehydration_type_isSet = false;
    m_rehydration_type_isValid = false;

    m_source_contact_id_isSet = false;
    m_source_contact_id_isValid = false;
}

void OAIStartChatContact_request_PersistentChat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartChatContact_request_PersistentChat::fromJsonObject(QJsonObject json) {

    m_rehydration_type_isValid = ::OpenAPI::fromJsonValue(m_rehydration_type, json[QString("RehydrationType")]);
    m_rehydration_type_isSet = !json[QString("RehydrationType")].isNull() && m_rehydration_type_isValid;

    m_source_contact_id_isValid = ::OpenAPI::fromJsonValue(m_source_contact_id, json[QString("SourceContactId")]);
    m_source_contact_id_isSet = !json[QString("SourceContactId")].isNull() && m_source_contact_id_isValid;
}

QString OAIStartChatContact_request_PersistentChat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartChatContact_request_PersistentChat::asJsonObject() const {
    QJsonObject obj;
    if (m_rehydration_type.isSet()) {
        obj.insert(QString("RehydrationType"), ::OpenAPI::toJsonValue(m_rehydration_type));
    }
    if (m_source_contact_id_isSet) {
        obj.insert(QString("SourceContactId"), ::OpenAPI::toJsonValue(m_source_contact_id));
    }
    return obj;
}

OAIRehydrationType OAIStartChatContact_request_PersistentChat::getRehydrationType() const {
    return m_rehydration_type;
}
void OAIStartChatContact_request_PersistentChat::setRehydrationType(const OAIRehydrationType &rehydration_type) {
    m_rehydration_type = rehydration_type;
    m_rehydration_type_isSet = true;
}

bool OAIStartChatContact_request_PersistentChat::is_rehydration_type_Set() const{
    return m_rehydration_type_isSet;
}

bool OAIStartChatContact_request_PersistentChat::is_rehydration_type_Valid() const{
    return m_rehydration_type_isValid;
}

QString OAIStartChatContact_request_PersistentChat::getSourceContactId() const {
    return m_source_contact_id;
}
void OAIStartChatContact_request_PersistentChat::setSourceContactId(const QString &source_contact_id) {
    m_source_contact_id = source_contact_id;
    m_source_contact_id_isSet = true;
}

bool OAIStartChatContact_request_PersistentChat::is_source_contact_id_Set() const{
    return m_source_contact_id_isSet;
}

bool OAIStartChatContact_request_PersistentChat::is_source_contact_id_Valid() const{
    return m_source_contact_id_isValid;
}

bool OAIStartChatContact_request_PersistentChat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rehydration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartChatContact_request_PersistentChat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
