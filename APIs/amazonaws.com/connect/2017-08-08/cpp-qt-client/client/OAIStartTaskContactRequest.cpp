/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTaskContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTaskContactRequest::OAIStartTaskContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTaskContactRequest::OAIStartTaskContactRequest() {
    this->initializeModel();
}

OAIStartTaskContactRequest::~OAIStartTaskContactRequest() {}

void OAIStartTaskContactRequest::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_previous_contact_id_isSet = false;
    m_previous_contact_id_isValid = false;

    m_contact_flow_id_isSet = false;
    m_contact_flow_id_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_scheduled_time_isSet = false;
    m_scheduled_time_isValid = false;

    m_task_template_id_isSet = false;
    m_task_template_id_isValid = false;

    m_quick_connect_id_isSet = false;
    m_quick_connect_id_isValid = false;

    m_related_contact_id_isSet = false;
    m_related_contact_id_isValid = false;
}

void OAIStartTaskContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTaskContactRequest::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_previous_contact_id_isValid = ::OpenAPI::fromJsonValue(m_previous_contact_id, json[QString("PreviousContactId")]);
    m_previous_contact_id_isSet = !json[QString("PreviousContactId")].isNull() && m_previous_contact_id_isValid;

    m_contact_flow_id_isValid = ::OpenAPI::fromJsonValue(m_contact_flow_id, json[QString("ContactFlowId")]);
    m_contact_flow_id_isSet = !json[QString("ContactFlowId")].isNull() && m_contact_flow_id_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("References")]);
    m_references_isSet = !json[QString("References")].isNull() && m_references_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_scheduled_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_time, json[QString("ScheduledTime")]);
    m_scheduled_time_isSet = !json[QString("ScheduledTime")].isNull() && m_scheduled_time_isValid;

    m_task_template_id_isValid = ::OpenAPI::fromJsonValue(m_task_template_id, json[QString("TaskTemplateId")]);
    m_task_template_id_isSet = !json[QString("TaskTemplateId")].isNull() && m_task_template_id_isValid;

    m_quick_connect_id_isValid = ::OpenAPI::fromJsonValue(m_quick_connect_id, json[QString("QuickConnectId")]);
    m_quick_connect_id_isSet = !json[QString("QuickConnectId")].isNull() && m_quick_connect_id_isValid;

    m_related_contact_id_isValid = ::OpenAPI::fromJsonValue(m_related_contact_id, json[QString("RelatedContactId")]);
    m_related_contact_id_isSet = !json[QString("RelatedContactId")].isNull() && m_related_contact_id_isValid;
}

QString OAIStartTaskContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTaskContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_previous_contact_id_isSet) {
        obj.insert(QString("PreviousContactId"), ::OpenAPI::toJsonValue(m_previous_contact_id));
    }
    if (m_contact_flow_id_isSet) {
        obj.insert(QString("ContactFlowId"), ::OpenAPI::toJsonValue(m_contact_flow_id));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_references.isSet()) {
        obj.insert(QString("References"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_scheduled_time_isSet) {
        obj.insert(QString("ScheduledTime"), ::OpenAPI::toJsonValue(m_scheduled_time));
    }
    if (m_task_template_id_isSet) {
        obj.insert(QString("TaskTemplateId"), ::OpenAPI::toJsonValue(m_task_template_id));
    }
    if (m_quick_connect_id_isSet) {
        obj.insert(QString("QuickConnectId"), ::OpenAPI::toJsonValue(m_quick_connect_id));
    }
    if (m_related_contact_id_isSet) {
        obj.insert(QString("RelatedContactId"), ::OpenAPI::toJsonValue(m_related_contact_id));
    }
    return obj;
}

QString OAIStartTaskContactRequest::getInstanceId() const {
    return m_instance_id;
}
void OAIStartTaskContactRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIStartTaskContactRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIStartTaskContactRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIStartTaskContactRequest::getPreviousContactId() const {
    return m_previous_contact_id;
}
void OAIStartTaskContactRequest::setPreviousContactId(const QString &previous_contact_id) {
    m_previous_contact_id = previous_contact_id;
    m_previous_contact_id_isSet = true;
}

bool OAIStartTaskContactRequest::is_previous_contact_id_Set() const{
    return m_previous_contact_id_isSet;
}

bool OAIStartTaskContactRequest::is_previous_contact_id_Valid() const{
    return m_previous_contact_id_isValid;
}

QString OAIStartTaskContactRequest::getContactFlowId() const {
    return m_contact_flow_id;
}
void OAIStartTaskContactRequest::setContactFlowId(const QString &contact_flow_id) {
    m_contact_flow_id = contact_flow_id;
    m_contact_flow_id_isSet = true;
}

bool OAIStartTaskContactRequest::is_contact_flow_id_Set() const{
    return m_contact_flow_id_isSet;
}

bool OAIStartTaskContactRequest::is_contact_flow_id_Valid() const{
    return m_contact_flow_id_isValid;
}

QMap OAIStartTaskContactRequest::getAttributes() const {
    return m_attributes;
}
void OAIStartTaskContactRequest::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIStartTaskContactRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIStartTaskContactRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIStartTaskContactRequest::getName() const {
    return m_name;
}
void OAIStartTaskContactRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartTaskContactRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartTaskContactRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAIStartTaskContactRequest::getReferences() const {
    return m_references;
}
void OAIStartTaskContactRequest::setReferences(const QMap &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIStartTaskContactRequest::is_references_Set() const{
    return m_references_isSet;
}

bool OAIStartTaskContactRequest::is_references_Valid() const{
    return m_references_isValid;
}

QString OAIStartTaskContactRequest::getDescription() const {
    return m_description;
}
void OAIStartTaskContactRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStartTaskContactRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStartTaskContactRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStartTaskContactRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartTaskContactRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartTaskContactRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartTaskContactRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QDateTime OAIStartTaskContactRequest::getScheduledTime() const {
    return m_scheduled_time;
}
void OAIStartTaskContactRequest::setScheduledTime(const QDateTime &scheduled_time) {
    m_scheduled_time = scheduled_time;
    m_scheduled_time_isSet = true;
}

bool OAIStartTaskContactRequest::is_scheduled_time_Set() const{
    return m_scheduled_time_isSet;
}

bool OAIStartTaskContactRequest::is_scheduled_time_Valid() const{
    return m_scheduled_time_isValid;
}

QString OAIStartTaskContactRequest::getTaskTemplateId() const {
    return m_task_template_id;
}
void OAIStartTaskContactRequest::setTaskTemplateId(const QString &task_template_id) {
    m_task_template_id = task_template_id;
    m_task_template_id_isSet = true;
}

bool OAIStartTaskContactRequest::is_task_template_id_Set() const{
    return m_task_template_id_isSet;
}

bool OAIStartTaskContactRequest::is_task_template_id_Valid() const{
    return m_task_template_id_isValid;
}

QString OAIStartTaskContactRequest::getQuickConnectId() const {
    return m_quick_connect_id;
}
void OAIStartTaskContactRequest::setQuickConnectId(const QString &quick_connect_id) {
    m_quick_connect_id = quick_connect_id;
    m_quick_connect_id_isSet = true;
}

bool OAIStartTaskContactRequest::is_quick_connect_id_Set() const{
    return m_quick_connect_id_isSet;
}

bool OAIStartTaskContactRequest::is_quick_connect_id_Valid() const{
    return m_quick_connect_id_isValid;
}

QString OAIStartTaskContactRequest::getRelatedContactId() const {
    return m_related_contact_id;
}
void OAIStartTaskContactRequest::setRelatedContactId(const QString &related_contact_id) {
    m_related_contact_id = related_contact_id;
    m_related_contact_id_isSet = true;
}

bool OAIStartTaskContactRequest::is_related_contact_id_Set() const{
    return m_related_contact_id_isSet;
}

bool OAIStartTaskContactRequest::is_related_contact_id_Valid() const{
    return m_related_contact_id_isValid;
}

bool OAIStartTaskContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_flow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quick_connect_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTaskContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
