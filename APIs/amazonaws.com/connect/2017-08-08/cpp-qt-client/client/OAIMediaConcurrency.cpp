/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaConcurrency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaConcurrency::OAIMediaConcurrency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaConcurrency::OAIMediaConcurrency() {
    this->initializeModel();
}

OAIMediaConcurrency::~OAIMediaConcurrency() {}

void OAIMediaConcurrency::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_concurrency_isSet = false;
    m_concurrency_isValid = false;

    m_cross_channel_behavior_isSet = false;
    m_cross_channel_behavior_isValid = false;
}

void OAIMediaConcurrency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaConcurrency::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_concurrency_isValid = ::OpenAPI::fromJsonValue(m_concurrency, json[QString("Concurrency")]);
    m_concurrency_isSet = !json[QString("Concurrency")].isNull() && m_concurrency_isValid;

    m_cross_channel_behavior_isValid = ::OpenAPI::fromJsonValue(m_cross_channel_behavior, json[QString("CrossChannelBehavior")]);
    m_cross_channel_behavior_isSet = !json[QString("CrossChannelBehavior")].isNull() && m_cross_channel_behavior_isValid;
}

QString OAIMediaConcurrency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaConcurrency::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_concurrency_isSet) {
        obj.insert(QString("Concurrency"), ::OpenAPI::toJsonValue(m_concurrency));
    }
    if (m_cross_channel_behavior.isSet()) {
        obj.insert(QString("CrossChannelBehavior"), ::OpenAPI::toJsonValue(m_cross_channel_behavior));
    }
    return obj;
}

OAIChannel OAIMediaConcurrency::getChannel() const {
    return m_channel;
}
void OAIMediaConcurrency::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIMediaConcurrency::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIMediaConcurrency::is_channel_Valid() const{
    return m_channel_isValid;
}

qint32 OAIMediaConcurrency::getConcurrency() const {
    return m_concurrency;
}
void OAIMediaConcurrency::setConcurrency(const qint32 &concurrency) {
    m_concurrency = concurrency;
    m_concurrency_isSet = true;
}

bool OAIMediaConcurrency::is_concurrency_Set() const{
    return m_concurrency_isSet;
}

bool OAIMediaConcurrency::is_concurrency_Valid() const{
    return m_concurrency_isValid;
}

OAIMediaConcurrency_CrossChannelBehavior OAIMediaConcurrency::getCrossChannelBehavior() const {
    return m_cross_channel_behavior;
}
void OAIMediaConcurrency::setCrossChannelBehavior(const OAIMediaConcurrency_CrossChannelBehavior &cross_channel_behavior) {
    m_cross_channel_behavior = cross_channel_behavior;
    m_cross_channel_behavior_isSet = true;
}

bool OAIMediaConcurrency::is_cross_channel_behavior_Set() const{
    return m_cross_channel_behavior_isSet;
}

bool OAIMediaConcurrency::is_cross_channel_behavior_Valid() const{
    return m_cross_channel_behavior_isValid;
}

bool OAIMediaConcurrency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_channel_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaConcurrency::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_concurrency_isValid && true;
}

} // namespace OpenAPI
