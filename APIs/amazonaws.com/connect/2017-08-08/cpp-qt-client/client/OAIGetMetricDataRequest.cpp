/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMetricDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMetricDataRequest::OAIGetMetricDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMetricDataRequest::OAIGetMetricDataRequest() {
    this->initializeModel();
}

OAIGetMetricDataRequest::~OAIGetMetricDataRequest() {}

void OAIGetMetricDataRequest::initializeModel() {

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_groupings_isSet = false;
    m_groupings_isValid = false;

    m_historical_metrics_isSet = false;
    m_historical_metrics_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetMetricDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMetricDataRequest::fromJsonObject(QJsonObject json) {

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_groupings_isValid = ::OpenAPI::fromJsonValue(m_groupings, json[QString("Groupings")]);
    m_groupings_isSet = !json[QString("Groupings")].isNull() && m_groupings_isValid;

    m_historical_metrics_isValid = ::OpenAPI::fromJsonValue(m_historical_metrics, json[QString("HistoricalMetrics")]);
    m_historical_metrics_isSet = !json[QString("HistoricalMetrics")].isNull() && m_historical_metrics_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetMetricDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMetricDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_groupings.isSet()) {
        obj.insert(QString("Groupings"), ::OpenAPI::toJsonValue(m_groupings));
    }
    if (m_historical_metrics.isSet()) {
        obj.insert(QString("HistoricalMetrics"), ::OpenAPI::toJsonValue(m_historical_metrics));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QDateTime OAIGetMetricDataRequest::getStartTime() const {
    return m_start_time;
}
void OAIGetMetricDataRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetMetricDataRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetMetricDataRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetMetricDataRequest::getEndTime() const {
    return m_end_time;
}
void OAIGetMetricDataRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetMetricDataRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetMetricDataRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIGetMetricDataRequest_Filters OAIGetMetricDataRequest::getFilters() const {
    return m_filters;
}
void OAIGetMetricDataRequest::setFilters(const OAIGetMetricDataRequest_Filters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIGetMetricDataRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIGetMetricDataRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

QList OAIGetMetricDataRequest::getGroupings() const {
    return m_groupings;
}
void OAIGetMetricDataRequest::setGroupings(const QList &groupings) {
    m_groupings = groupings;
    m_groupings_isSet = true;
}

bool OAIGetMetricDataRequest::is_groupings_Set() const{
    return m_groupings_isSet;
}

bool OAIGetMetricDataRequest::is_groupings_Valid() const{
    return m_groupings_isValid;
}

QList OAIGetMetricDataRequest::getHistoricalMetrics() const {
    return m_historical_metrics;
}
void OAIGetMetricDataRequest::setHistoricalMetrics(const QList &historical_metrics) {
    m_historical_metrics = historical_metrics;
    m_historical_metrics_isSet = true;
}

bool OAIGetMetricDataRequest::is_historical_metrics_Set() const{
    return m_historical_metrics_isSet;
}

bool OAIGetMetricDataRequest::is_historical_metrics_Valid() const{
    return m_historical_metrics_isValid;
}

QString OAIGetMetricDataRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetMetricDataRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetMetricDataRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetMetricDataRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetMetricDataRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetMetricDataRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetMetricDataRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetMetricDataRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetMetricDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_groupings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_historical_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMetricDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_time_isValid && m_end_time_isValid && m_filters_isValid && m_historical_metrics_isValid && true;
}

} // namespace OpenAPI
