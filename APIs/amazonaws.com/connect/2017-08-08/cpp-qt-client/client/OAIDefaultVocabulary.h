/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDefaultVocabulary.h
 *
 * Contains information about a default vocabulary.
 */

#ifndef OAIDefaultVocabulary_H
#define OAIDefaultVocabulary_H

#include <QJsonObject>

#include "OAIVocabularyLanguageCode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDefaultVocabulary : public OAIObject {
public:
    OAIDefaultVocabulary();
    OAIDefaultVocabulary(QString json);
    ~OAIDefaultVocabulary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    OAIVocabularyLanguageCode getLanguageCode() const;
    void setLanguageCode(const OAIVocabularyLanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    QString getVocabularyId() const;
    void setVocabularyId(const QString &vocabulary_id);
    bool is_vocabulary_id_Set() const;
    bool is_vocabulary_id_Valid() const;

    QString getVocabularyName() const;
    void setVocabularyName(const QString &vocabulary_name);
    bool is_vocabulary_name_Set() const;
    bool is_vocabulary_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    OAIVocabularyLanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    QString m_vocabulary_id;
    bool m_vocabulary_id_isSet;
    bool m_vocabulary_id_isValid;

    QString m_vocabulary_name;
    bool m_vocabulary_name_isSet;
    bool m_vocabulary_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDefaultVocabulary)

#endif // OAIDefaultVocabulary_H
