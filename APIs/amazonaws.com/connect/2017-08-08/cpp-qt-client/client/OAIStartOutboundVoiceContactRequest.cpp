/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartOutboundVoiceContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartOutboundVoiceContactRequest::OAIStartOutboundVoiceContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartOutboundVoiceContactRequest::OAIStartOutboundVoiceContactRequest() {
    this->initializeModel();
}

OAIStartOutboundVoiceContactRequest::~OAIStartOutboundVoiceContactRequest() {}

void OAIStartOutboundVoiceContactRequest::initializeModel() {

    m_destination_phone_number_isSet = false;
    m_destination_phone_number_isValid = false;

    m_contact_flow_id_isSet = false;
    m_contact_flow_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_source_phone_number_isSet = false;
    m_source_phone_number_isValid = false;

    m_queue_id_isSet = false;
    m_queue_id_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_answer_machine_detection_config_isSet = false;
    m_answer_machine_detection_config_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_traffic_type_isSet = false;
    m_traffic_type_isValid = false;
}

void OAIStartOutboundVoiceContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartOutboundVoiceContactRequest::fromJsonObject(QJsonObject json) {

    m_destination_phone_number_isValid = ::OpenAPI::fromJsonValue(m_destination_phone_number, json[QString("DestinationPhoneNumber")]);
    m_destination_phone_number_isSet = !json[QString("DestinationPhoneNumber")].isNull() && m_destination_phone_number_isValid;

    m_contact_flow_id_isValid = ::OpenAPI::fromJsonValue(m_contact_flow_id, json[QString("ContactFlowId")]);
    m_contact_flow_id_isSet = !json[QString("ContactFlowId")].isNull() && m_contact_flow_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_source_phone_number_isValid = ::OpenAPI::fromJsonValue(m_source_phone_number, json[QString("SourcePhoneNumber")]);
    m_source_phone_number_isSet = !json[QString("SourcePhoneNumber")].isNull() && m_source_phone_number_isValid;

    m_queue_id_isValid = ::OpenAPI::fromJsonValue(m_queue_id, json[QString("QueueId")]);
    m_queue_id_isSet = !json[QString("QueueId")].isNull() && m_queue_id_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_answer_machine_detection_config_isValid = ::OpenAPI::fromJsonValue(m_answer_machine_detection_config, json[QString("AnswerMachineDetectionConfig")]);
    m_answer_machine_detection_config_isSet = !json[QString("AnswerMachineDetectionConfig")].isNull() && m_answer_machine_detection_config_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("CampaignId")]);
    m_campaign_id_isSet = !json[QString("CampaignId")].isNull() && m_campaign_id_isValid;

    m_traffic_type_isValid = ::OpenAPI::fromJsonValue(m_traffic_type, json[QString("TrafficType")]);
    m_traffic_type_isSet = !json[QString("TrafficType")].isNull() && m_traffic_type_isValid;
}

QString OAIStartOutboundVoiceContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartOutboundVoiceContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_phone_number_isSet) {
        obj.insert(QString("DestinationPhoneNumber"), ::OpenAPI::toJsonValue(m_destination_phone_number));
    }
    if (m_contact_flow_id_isSet) {
        obj.insert(QString("ContactFlowId"), ::OpenAPI::toJsonValue(m_contact_flow_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_source_phone_number_isSet) {
        obj.insert(QString("SourcePhoneNumber"), ::OpenAPI::toJsonValue(m_source_phone_number));
    }
    if (m_queue_id_isSet) {
        obj.insert(QString("QueueId"), ::OpenAPI::toJsonValue(m_queue_id));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_answer_machine_detection_config.isSet()) {
        obj.insert(QString("AnswerMachineDetectionConfig"), ::OpenAPI::toJsonValue(m_answer_machine_detection_config));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("CampaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_traffic_type.isSet()) {
        obj.insert(QString("TrafficType"), ::OpenAPI::toJsonValue(m_traffic_type));
    }
    return obj;
}

QString OAIStartOutboundVoiceContactRequest::getDestinationPhoneNumber() const {
    return m_destination_phone_number;
}
void OAIStartOutboundVoiceContactRequest::setDestinationPhoneNumber(const QString &destination_phone_number) {
    m_destination_phone_number = destination_phone_number;
    m_destination_phone_number_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_destination_phone_number_Set() const{
    return m_destination_phone_number_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_destination_phone_number_Valid() const{
    return m_destination_phone_number_isValid;
}

QString OAIStartOutboundVoiceContactRequest::getContactFlowId() const {
    return m_contact_flow_id;
}
void OAIStartOutboundVoiceContactRequest::setContactFlowId(const QString &contact_flow_id) {
    m_contact_flow_id = contact_flow_id;
    m_contact_flow_id_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_contact_flow_id_Set() const{
    return m_contact_flow_id_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_contact_flow_id_Valid() const{
    return m_contact_flow_id_isValid;
}

QString OAIStartOutboundVoiceContactRequest::getInstanceId() const {
    return m_instance_id;
}
void OAIStartOutboundVoiceContactRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIStartOutboundVoiceContactRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartOutboundVoiceContactRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIStartOutboundVoiceContactRequest::getSourcePhoneNumber() const {
    return m_source_phone_number;
}
void OAIStartOutboundVoiceContactRequest::setSourcePhoneNumber(const QString &source_phone_number) {
    m_source_phone_number = source_phone_number;
    m_source_phone_number_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_source_phone_number_Set() const{
    return m_source_phone_number_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_source_phone_number_Valid() const{
    return m_source_phone_number_isValid;
}

QString OAIStartOutboundVoiceContactRequest::getQueueId() const {
    return m_queue_id;
}
void OAIStartOutboundVoiceContactRequest::setQueueId(const QString &queue_id) {
    m_queue_id = queue_id;
    m_queue_id_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_queue_id_Set() const{
    return m_queue_id_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_queue_id_Valid() const{
    return m_queue_id_isValid;
}

QMap OAIStartOutboundVoiceContactRequest::getAttributes() const {
    return m_attributes;
}
void OAIStartOutboundVoiceContactRequest::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIStartOutboundVoiceContactRequest_AnswerMachineDetectionConfig OAIStartOutboundVoiceContactRequest::getAnswerMachineDetectionConfig() const {
    return m_answer_machine_detection_config;
}
void OAIStartOutboundVoiceContactRequest::setAnswerMachineDetectionConfig(const OAIStartOutboundVoiceContactRequest_AnswerMachineDetectionConfig &answer_machine_detection_config) {
    m_answer_machine_detection_config = answer_machine_detection_config;
    m_answer_machine_detection_config_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_answer_machine_detection_config_Set() const{
    return m_answer_machine_detection_config_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_answer_machine_detection_config_Valid() const{
    return m_answer_machine_detection_config_isValid;
}

QString OAIStartOutboundVoiceContactRequest::getCampaignId() const {
    return m_campaign_id;
}
void OAIStartOutboundVoiceContactRequest::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

OAITrafficType OAIStartOutboundVoiceContactRequest::getTrafficType() const {
    return m_traffic_type;
}
void OAIStartOutboundVoiceContactRequest::setTrafficType(const OAITrafficType &traffic_type) {
    m_traffic_type = traffic_type;
    m_traffic_type_isSet = true;
}

bool OAIStartOutboundVoiceContactRequest::is_traffic_type_Set() const{
    return m_traffic_type_isSet;
}

bool OAIStartOutboundVoiceContactRequest::is_traffic_type_Valid() const{
    return m_traffic_type_isValid;
}

bool OAIStartOutboundVoiceContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_flow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_machine_detection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartOutboundVoiceContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_phone_number_isValid && m_contact_flow_id_isValid && m_instance_id_isValid && true;
}

} // namespace OpenAPI
