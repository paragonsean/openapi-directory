/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHoursOfOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHoursOfOperation::OAIHoursOfOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHoursOfOperation::OAIHoursOfOperation() {
    this->initializeModel();
}

OAIHoursOfOperation::~OAIHoursOfOperation() {}

void OAIHoursOfOperation::initializeModel() {

    m_hours_of_operation_id_isSet = false;
    m_hours_of_operation_id_isValid = false;

    m_hours_of_operation_arn_isSet = false;
    m_hours_of_operation_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIHoursOfOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHoursOfOperation::fromJsonObject(QJsonObject json) {

    m_hours_of_operation_id_isValid = ::OpenAPI::fromJsonValue(m_hours_of_operation_id, json[QString("HoursOfOperationId")]);
    m_hours_of_operation_id_isSet = !json[QString("HoursOfOperationId")].isNull() && m_hours_of_operation_id_isValid;

    m_hours_of_operation_arn_isValid = ::OpenAPI::fromJsonValue(m_hours_of_operation_arn, json[QString("HoursOfOperationArn")]);
    m_hours_of_operation_arn_isSet = !json[QString("HoursOfOperationArn")].isNull() && m_hours_of_operation_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("TimeZone")]);
    m_time_zone_isSet = !json[QString("TimeZone")].isNull() && m_time_zone_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("Config")]);
    m_config_isSet = !json[QString("Config")].isNull() && m_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIHoursOfOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHoursOfOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_hours_of_operation_id_isSet) {
        obj.insert(QString("HoursOfOperationId"), ::OpenAPI::toJsonValue(m_hours_of_operation_id));
    }
    if (m_hours_of_operation_arn_isSet) {
        obj.insert(QString("HoursOfOperationArn"), ::OpenAPI::toJsonValue(m_hours_of_operation_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("TimeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_config.isSet()) {
        obj.insert(QString("Config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIHoursOfOperation::getHoursOfOperationId() const {
    return m_hours_of_operation_id;
}
void OAIHoursOfOperation::setHoursOfOperationId(const QString &hours_of_operation_id) {
    m_hours_of_operation_id = hours_of_operation_id;
    m_hours_of_operation_id_isSet = true;
}

bool OAIHoursOfOperation::is_hours_of_operation_id_Set() const{
    return m_hours_of_operation_id_isSet;
}

bool OAIHoursOfOperation::is_hours_of_operation_id_Valid() const{
    return m_hours_of_operation_id_isValid;
}

QString OAIHoursOfOperation::getHoursOfOperationArn() const {
    return m_hours_of_operation_arn;
}
void OAIHoursOfOperation::setHoursOfOperationArn(const QString &hours_of_operation_arn) {
    m_hours_of_operation_arn = hours_of_operation_arn;
    m_hours_of_operation_arn_isSet = true;
}

bool OAIHoursOfOperation::is_hours_of_operation_arn_Set() const{
    return m_hours_of_operation_arn_isSet;
}

bool OAIHoursOfOperation::is_hours_of_operation_arn_Valid() const{
    return m_hours_of_operation_arn_isValid;
}

QString OAIHoursOfOperation::getName() const {
    return m_name;
}
void OAIHoursOfOperation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHoursOfOperation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHoursOfOperation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIHoursOfOperation::getDescription() const {
    return m_description;
}
void OAIHoursOfOperation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHoursOfOperation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHoursOfOperation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIHoursOfOperation::getTimeZone() const {
    return m_time_zone;
}
void OAIHoursOfOperation::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIHoursOfOperation::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIHoursOfOperation::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QList OAIHoursOfOperation::getConfig() const {
    return m_config;
}
void OAIHoursOfOperation::setConfig(const QList &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIHoursOfOperation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIHoursOfOperation::is_config_Valid() const{
    return m_config_isValid;
}

QMap OAIHoursOfOperation::getTags() const {
    return m_tags;
}
void OAIHoursOfOperation::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIHoursOfOperation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIHoursOfOperation::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIHoursOfOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hours_of_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_of_operation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHoursOfOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
