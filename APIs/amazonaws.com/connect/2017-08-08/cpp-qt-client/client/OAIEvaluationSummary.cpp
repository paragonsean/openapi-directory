/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationSummary::OAIEvaluationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationSummary::OAIEvaluationSummary() {
    this->initializeModel();
}

OAIEvaluationSummary::~OAIEvaluationSummary() {}

void OAIEvaluationSummary::initializeModel() {

    m_evaluation_id_isSet = false;
    m_evaluation_id_isValid = false;

    m_evaluation_arn_isSet = false;
    m_evaluation_arn_isValid = false;

    m_evaluation_form_title_isSet = false;
    m_evaluation_form_title_isValid = false;

    m_evaluation_form_id_isSet = false;
    m_evaluation_form_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_evaluator_arn_isSet = false;
    m_evaluator_arn_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;
}

void OAIEvaluationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationSummary::fromJsonObject(QJsonObject json) {

    m_evaluation_id_isValid = ::OpenAPI::fromJsonValue(m_evaluation_id, json[QString("EvaluationId")]);
    m_evaluation_id_isSet = !json[QString("EvaluationId")].isNull() && m_evaluation_id_isValid;

    m_evaluation_arn_isValid = ::OpenAPI::fromJsonValue(m_evaluation_arn, json[QString("EvaluationArn")]);
    m_evaluation_arn_isSet = !json[QString("EvaluationArn")].isNull() && m_evaluation_arn_isValid;

    m_evaluation_form_title_isValid = ::OpenAPI::fromJsonValue(m_evaluation_form_title, json[QString("EvaluationFormTitle")]);
    m_evaluation_form_title_isSet = !json[QString("EvaluationFormTitle")].isNull() && m_evaluation_form_title_isValid;

    m_evaluation_form_id_isValid = ::OpenAPI::fromJsonValue(m_evaluation_form_id, json[QString("EvaluationFormId")]);
    m_evaluation_form_id_isSet = !json[QString("EvaluationFormId")].isNull() && m_evaluation_form_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_evaluator_arn_isValid = ::OpenAPI::fromJsonValue(m_evaluator_arn, json[QString("EvaluatorArn")]);
    m_evaluator_arn_isSet = !json[QString("EvaluatorArn")].isNull() && m_evaluator_arn_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;
}

QString OAIEvaluationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_id_isSet) {
        obj.insert(QString("EvaluationId"), ::OpenAPI::toJsonValue(m_evaluation_id));
    }
    if (m_evaluation_arn_isSet) {
        obj.insert(QString("EvaluationArn"), ::OpenAPI::toJsonValue(m_evaluation_arn));
    }
    if (m_evaluation_form_title_isSet) {
        obj.insert(QString("EvaluationFormTitle"), ::OpenAPI::toJsonValue(m_evaluation_form_title));
    }
    if (m_evaluation_form_id_isSet) {
        obj.insert(QString("EvaluationFormId"), ::OpenAPI::toJsonValue(m_evaluation_form_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_evaluator_arn_isSet) {
        obj.insert(QString("EvaluatorArn"), ::OpenAPI::toJsonValue(m_evaluator_arn));
    }
    if (m_score.isSet()) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    return obj;
}

QString OAIEvaluationSummary::getEvaluationId() const {
    return m_evaluation_id;
}
void OAIEvaluationSummary::setEvaluationId(const QString &evaluation_id) {
    m_evaluation_id = evaluation_id;
    m_evaluation_id_isSet = true;
}

bool OAIEvaluationSummary::is_evaluation_id_Set() const{
    return m_evaluation_id_isSet;
}

bool OAIEvaluationSummary::is_evaluation_id_Valid() const{
    return m_evaluation_id_isValid;
}

QString OAIEvaluationSummary::getEvaluationArn() const {
    return m_evaluation_arn;
}
void OAIEvaluationSummary::setEvaluationArn(const QString &evaluation_arn) {
    m_evaluation_arn = evaluation_arn;
    m_evaluation_arn_isSet = true;
}

bool OAIEvaluationSummary::is_evaluation_arn_Set() const{
    return m_evaluation_arn_isSet;
}

bool OAIEvaluationSummary::is_evaluation_arn_Valid() const{
    return m_evaluation_arn_isValid;
}

QString OAIEvaluationSummary::getEvaluationFormTitle() const {
    return m_evaluation_form_title;
}
void OAIEvaluationSummary::setEvaluationFormTitle(const QString &evaluation_form_title) {
    m_evaluation_form_title = evaluation_form_title;
    m_evaluation_form_title_isSet = true;
}

bool OAIEvaluationSummary::is_evaluation_form_title_Set() const{
    return m_evaluation_form_title_isSet;
}

bool OAIEvaluationSummary::is_evaluation_form_title_Valid() const{
    return m_evaluation_form_title_isValid;
}

QString OAIEvaluationSummary::getEvaluationFormId() const {
    return m_evaluation_form_id;
}
void OAIEvaluationSummary::setEvaluationFormId(const QString &evaluation_form_id) {
    m_evaluation_form_id = evaluation_form_id;
    m_evaluation_form_id_isSet = true;
}

bool OAIEvaluationSummary::is_evaluation_form_id_Set() const{
    return m_evaluation_form_id_isSet;
}

bool OAIEvaluationSummary::is_evaluation_form_id_Valid() const{
    return m_evaluation_form_id_isValid;
}

OAIEvaluationStatus OAIEvaluationSummary::getStatus() const {
    return m_status;
}
void OAIEvaluationSummary::setStatus(const OAIEvaluationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEvaluationSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEvaluationSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEvaluationSummary::getEvaluatorArn() const {
    return m_evaluator_arn;
}
void OAIEvaluationSummary::setEvaluatorArn(const QString &evaluator_arn) {
    m_evaluator_arn = evaluator_arn;
    m_evaluator_arn_isSet = true;
}

bool OAIEvaluationSummary::is_evaluator_arn_Set() const{
    return m_evaluator_arn_isSet;
}

bool OAIEvaluationSummary::is_evaluator_arn_Valid() const{
    return m_evaluator_arn_isValid;
}

OAIEvaluationMetadata_Score OAIEvaluationSummary::getScore() const {
    return m_score;
}
void OAIEvaluationSummary::setScore(const OAIEvaluationMetadata_Score &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIEvaluationSummary::is_score_Set() const{
    return m_score_isSet;
}

bool OAIEvaluationSummary::is_score_Valid() const{
    return m_score_isValid;
}

QDateTime OAIEvaluationSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIEvaluationSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIEvaluationSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIEvaluationSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIEvaluationSummary::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIEvaluationSummary::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIEvaluationSummary::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIEvaluationSummary::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAIEvaluationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_form_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluator_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_evaluation_id_isValid && m_evaluation_arn_isValid && m_evaluation_form_title_isValid && m_evaluation_form_id_isValid && m_status_isValid && m_evaluator_arn_isValid && m_created_time_isValid && m_last_modified_time_isValid && true;
}

} // namespace OpenAPI
