/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEvaluationFormRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEvaluationFormRequest::OAICreateEvaluationFormRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEvaluationFormRequest::OAICreateEvaluationFormRequest() {
    this->initializeModel();
}

OAICreateEvaluationFormRequest::~OAICreateEvaluationFormRequest() {}

void OAICreateEvaluationFormRequest::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_scoring_strategy_isSet = false;
    m_scoring_strategy_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreateEvaluationFormRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEvaluationFormRequest::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_scoring_strategy_isValid = ::OpenAPI::fromJsonValue(m_scoring_strategy, json[QString("ScoringStrategy")]);
    m_scoring_strategy_isSet = !json[QString("ScoringStrategy")].isNull() && m_scoring_strategy_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAICreateEvaluationFormRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEvaluationFormRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_items.isSet()) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_scoring_strategy.isSet()) {
        obj.insert(QString("ScoringStrategy"), ::OpenAPI::toJsonValue(m_scoring_strategy));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreateEvaluationFormRequest::getTitle() const {
    return m_title;
}
void OAICreateEvaluationFormRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICreateEvaluationFormRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAICreateEvaluationFormRequest::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICreateEvaluationFormRequest::getDescription() const {
    return m_description;
}
void OAICreateEvaluationFormRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateEvaluationFormRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateEvaluationFormRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateEvaluationFormRequest::getItems() const {
    return m_items;
}
void OAICreateEvaluationFormRequest::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICreateEvaluationFormRequest::is_items_Set() const{
    return m_items_isSet;
}

bool OAICreateEvaluationFormRequest::is_items_Valid() const{
    return m_items_isValid;
}

OAICreateEvaluationFormRequest_ScoringStrategy OAICreateEvaluationFormRequest::getScoringStrategy() const {
    return m_scoring_strategy;
}
void OAICreateEvaluationFormRequest::setScoringStrategy(const OAICreateEvaluationFormRequest_ScoringStrategy &scoring_strategy) {
    m_scoring_strategy = scoring_strategy;
    m_scoring_strategy_isSet = true;
}

bool OAICreateEvaluationFormRequest::is_scoring_strategy_Set() const{
    return m_scoring_strategy_isSet;
}

bool OAICreateEvaluationFormRequest::is_scoring_strategy_Valid() const{
    return m_scoring_strategy_isValid;
}

QString OAICreateEvaluationFormRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateEvaluationFormRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateEvaluationFormRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateEvaluationFormRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateEvaluationFormRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEvaluationFormRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && m_items_isValid && true;
}

} // namespace OpenAPI
