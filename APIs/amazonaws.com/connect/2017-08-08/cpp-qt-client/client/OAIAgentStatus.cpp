/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentStatus::OAIAgentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentStatus::OAIAgentStatus() {
    this->initializeModel();
}

OAIAgentStatus::~OAIAgentStatus() {}

void OAIAgentStatus::initializeModel() {

    m_agent_status_arn_isSet = false;
    m_agent_status_arn_isValid = false;

    m_agent_status_id_isSet = false;
    m_agent_status_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIAgentStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentStatus::fromJsonObject(QJsonObject json) {

    m_agent_status_arn_isValid = ::OpenAPI::fromJsonValue(m_agent_status_arn, json[QString("AgentStatusARN")]);
    m_agent_status_arn_isSet = !json[QString("AgentStatusARN")].isNull() && m_agent_status_arn_isValid;

    m_agent_status_id_isValid = ::OpenAPI::fromJsonValue(m_agent_status_id, json[QString("AgentStatusId")]);
    m_agent_status_id_isSet = !json[QString("AgentStatusId")].isNull() && m_agent_status_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("DisplayOrder")]);
    m_display_order_isSet = !json[QString("DisplayOrder")].isNull() && m_display_order_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIAgentStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_status_arn_isSet) {
        obj.insert(QString("AgentStatusARN"), ::OpenAPI::toJsonValue(m_agent_status_arn));
    }
    if (m_agent_status_id_isSet) {
        obj.insert(QString("AgentStatusId"), ::OpenAPI::toJsonValue(m_agent_status_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("DisplayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIAgentStatus::getAgentStatusArn() const {
    return m_agent_status_arn;
}
void OAIAgentStatus::setAgentStatusArn(const QString &agent_status_arn) {
    m_agent_status_arn = agent_status_arn;
    m_agent_status_arn_isSet = true;
}

bool OAIAgentStatus::is_agent_status_arn_Set() const{
    return m_agent_status_arn_isSet;
}

bool OAIAgentStatus::is_agent_status_arn_Valid() const{
    return m_agent_status_arn_isValid;
}

QString OAIAgentStatus::getAgentStatusId() const {
    return m_agent_status_id;
}
void OAIAgentStatus::setAgentStatusId(const QString &agent_status_id) {
    m_agent_status_id = agent_status_id;
    m_agent_status_id_isSet = true;
}

bool OAIAgentStatus::is_agent_status_id_Set() const{
    return m_agent_status_id_isSet;
}

bool OAIAgentStatus::is_agent_status_id_Valid() const{
    return m_agent_status_id_isValid;
}

QString OAIAgentStatus::getName() const {
    return m_name;
}
void OAIAgentStatus::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAgentStatus::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAgentStatus::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAgentStatus::getDescription() const {
    return m_description;
}
void OAIAgentStatus::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAgentStatus::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAgentStatus::is_description_Valid() const{
    return m_description_isValid;
}

OAIAgentStatusType OAIAgentStatus::getType() const {
    return m_type;
}
void OAIAgentStatus::setType(const OAIAgentStatusType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAgentStatus::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAgentStatus::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIAgentStatus::getDisplayOrder() const {
    return m_display_order;
}
void OAIAgentStatus::setDisplayOrder(const qint32 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAIAgentStatus::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAIAgentStatus::is_display_order_Valid() const{
    return m_display_order_isValid;
}

OAIAgentStatusState OAIAgentStatus::getState() const {
    return m_state;
}
void OAIAgentStatus::setState(const OAIAgentStatusState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAgentStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAgentStatus::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAIAgentStatus::getTags() const {
    return m_tags;
}
void OAIAgentStatus::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAgentStatus::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAgentStatus::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIAgentStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_status_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_status_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
