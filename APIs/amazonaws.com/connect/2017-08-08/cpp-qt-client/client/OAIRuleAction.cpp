/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleAction::OAIRuleAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleAction::OAIRuleAction() {
    this->initializeModel();
}

OAIRuleAction::~OAIRuleAction() {}

void OAIRuleAction::initializeModel() {

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_task_action_isSet = false;
    m_task_action_isValid = false;

    m_event_bridge_action_isSet = false;
    m_event_bridge_action_isValid = false;

    m_assign_contact_category_action_isSet = false;
    m_assign_contact_category_action_isValid = false;

    m_send_notification_action_isSet = false;
    m_send_notification_action_isValid = false;
}

void OAIRuleAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleAction::fromJsonObject(QJsonObject json) {

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("ActionType")]);
    m_action_type_isSet = !json[QString("ActionType")].isNull() && m_action_type_isValid;

    m_task_action_isValid = ::OpenAPI::fromJsonValue(m_task_action, json[QString("TaskAction")]);
    m_task_action_isSet = !json[QString("TaskAction")].isNull() && m_task_action_isValid;

    m_event_bridge_action_isValid = ::OpenAPI::fromJsonValue(m_event_bridge_action, json[QString("EventBridgeAction")]);
    m_event_bridge_action_isSet = !json[QString("EventBridgeAction")].isNull() && m_event_bridge_action_isValid;

    m_assign_contact_category_action_isValid = ::OpenAPI::fromJsonValue(m_assign_contact_category_action, json[QString("AssignContactCategoryAction")]);
    m_assign_contact_category_action_isSet = !json[QString("AssignContactCategoryAction")].isNull() && m_assign_contact_category_action_isValid;

    m_send_notification_action_isValid = ::OpenAPI::fromJsonValue(m_send_notification_action, json[QString("SendNotificationAction")]);
    m_send_notification_action_isSet = !json[QString("SendNotificationAction")].isNull() && m_send_notification_action_isValid;
}

QString OAIRuleAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type.isSet()) {
        obj.insert(QString("ActionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_task_action.isSet()) {
        obj.insert(QString("TaskAction"), ::OpenAPI::toJsonValue(m_task_action));
    }
    if (m_event_bridge_action.isSet()) {
        obj.insert(QString("EventBridgeAction"), ::OpenAPI::toJsonValue(m_event_bridge_action));
    }
    if (m_assign_contact_category_action.isSet()) {
        obj.insert(QString("AssignContactCategoryAction"), ::OpenAPI::toJsonValue(m_assign_contact_category_action));
    }
    if (m_send_notification_action.isSet()) {
        obj.insert(QString("SendNotificationAction"), ::OpenAPI::toJsonValue(m_send_notification_action));
    }
    return obj;
}

OAIActionType OAIRuleAction::getActionType() const {
    return m_action_type;
}
void OAIRuleAction::setActionType(const OAIActionType &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIRuleAction::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIRuleAction::is_action_type_Valid() const{
    return m_action_type_isValid;
}

OAIRuleAction_TaskAction OAIRuleAction::getTaskAction() const {
    return m_task_action;
}
void OAIRuleAction::setTaskAction(const OAIRuleAction_TaskAction &task_action) {
    m_task_action = task_action;
    m_task_action_isSet = true;
}

bool OAIRuleAction::is_task_action_Set() const{
    return m_task_action_isSet;
}

bool OAIRuleAction::is_task_action_Valid() const{
    return m_task_action_isValid;
}

OAIRuleAction_EventBridgeAction OAIRuleAction::getEventBridgeAction() const {
    return m_event_bridge_action;
}
void OAIRuleAction::setEventBridgeAction(const OAIRuleAction_EventBridgeAction &event_bridge_action) {
    m_event_bridge_action = event_bridge_action;
    m_event_bridge_action_isSet = true;
}

bool OAIRuleAction::is_event_bridge_action_Set() const{
    return m_event_bridge_action_isSet;
}

bool OAIRuleAction::is_event_bridge_action_Valid() const{
    return m_event_bridge_action_isValid;
}

OAIObject OAIRuleAction::getAssignContactCategoryAction() const {
    return m_assign_contact_category_action;
}
void OAIRuleAction::setAssignContactCategoryAction(const OAIObject &assign_contact_category_action) {
    m_assign_contact_category_action = assign_contact_category_action;
    m_assign_contact_category_action_isSet = true;
}

bool OAIRuleAction::is_assign_contact_category_action_Set() const{
    return m_assign_contact_category_action_isSet;
}

bool OAIRuleAction::is_assign_contact_category_action_Valid() const{
    return m_assign_contact_category_action_isValid;
}

OAIRuleAction_SendNotificationAction OAIRuleAction::getSendNotificationAction() const {
    return m_send_notification_action;
}
void OAIRuleAction::setSendNotificationAction(const OAIRuleAction_SendNotificationAction &send_notification_action) {
    m_send_notification_action = send_notification_action;
    m_send_notification_action_isSet = true;
}

bool OAIRuleAction::is_send_notification_action_Set() const{
    return m_send_notification_action_isSet;
}

bool OAIRuleAction::is_send_notification_action_Valid() const{
    return m_send_notification_action_isValid;
}

bool OAIRuleAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bridge_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_contact_category_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_notification_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_type_isValid && true;
}

} // namespace OpenAPI
