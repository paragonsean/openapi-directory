/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFederationTokenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFederationTokenResponse::OAIGetFederationTokenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFederationTokenResponse::OAIGetFederationTokenResponse() {
    this->initializeModel();
}

OAIGetFederationTokenResponse::~OAIGetFederationTokenResponse() {}

void OAIGetFederationTokenResponse::initializeModel() {

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_sign_in_url_isSet = false;
    m_sign_in_url_isValid = false;

    m_user_arn_isSet = false;
    m_user_arn_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIGetFederationTokenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFederationTokenResponse::fromJsonObject(QJsonObject json) {

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;

    m_sign_in_url_isValid = ::OpenAPI::fromJsonValue(m_sign_in_url, json[QString("SignInUrl")]);
    m_sign_in_url_isSet = !json[QString("SignInUrl")].isNull() && m_sign_in_url_isValid;

    m_user_arn_isValid = ::OpenAPI::fromJsonValue(m_user_arn, json[QString("UserArn")]);
    m_user_arn_isSet = !json[QString("UserArn")].isNull() && m_user_arn_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIGetFederationTokenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFederationTokenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_credentials.isSet()) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_sign_in_url_isSet) {
        obj.insert(QString("SignInUrl"), ::OpenAPI::toJsonValue(m_sign_in_url));
    }
    if (m_user_arn_isSet) {
        obj.insert(QString("UserArn"), ::OpenAPI::toJsonValue(m_user_arn));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIGetFederationTokenResponse_Credentials OAIGetFederationTokenResponse::getCredentials() const {
    return m_credentials;
}
void OAIGetFederationTokenResponse::setCredentials(const OAIGetFederationTokenResponse_Credentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIGetFederationTokenResponse::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIGetFederationTokenResponse::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAIGetFederationTokenResponse::getSignInUrl() const {
    return m_sign_in_url;
}
void OAIGetFederationTokenResponse::setSignInUrl(const QString &sign_in_url) {
    m_sign_in_url = sign_in_url;
    m_sign_in_url_isSet = true;
}

bool OAIGetFederationTokenResponse::is_sign_in_url_Set() const{
    return m_sign_in_url_isSet;
}

bool OAIGetFederationTokenResponse::is_sign_in_url_Valid() const{
    return m_sign_in_url_isValid;
}

QString OAIGetFederationTokenResponse::getUserArn() const {
    return m_user_arn;
}
void OAIGetFederationTokenResponse::setUserArn(const QString &user_arn) {
    m_user_arn = user_arn;
    m_user_arn_isSet = true;
}

bool OAIGetFederationTokenResponse::is_user_arn_Set() const{
    return m_user_arn_isSet;
}

bool OAIGetFederationTokenResponse::is_user_arn_Valid() const{
    return m_user_arn_isValid;
}

QString OAIGetFederationTokenResponse::getUserId() const {
    return m_user_id;
}
void OAIGetFederationTokenResponse::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGetFederationTokenResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGetFederationTokenResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIGetFederationTokenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFederationTokenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
