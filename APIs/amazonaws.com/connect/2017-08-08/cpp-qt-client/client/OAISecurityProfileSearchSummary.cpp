/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityProfileSearchSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityProfileSearchSummary::OAISecurityProfileSearchSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityProfileSearchSummary::OAISecurityProfileSearchSummary() {
    this->initializeModel();
}

OAISecurityProfileSearchSummary::~OAISecurityProfileSearchSummary() {}

void OAISecurityProfileSearchSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_organization_resource_id_isSet = false;
    m_organization_resource_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_security_profile_name_isSet = false;
    m_security_profile_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISecurityProfileSearchSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityProfileSearchSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_organization_resource_id_isValid = ::OpenAPI::fromJsonValue(m_organization_resource_id, json[QString("OrganizationResourceId")]);
    m_organization_resource_id_isSet = !json[QString("OrganizationResourceId")].isNull() && m_organization_resource_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_security_profile_name_isValid = ::OpenAPI::fromJsonValue(m_security_profile_name, json[QString("SecurityProfileName")]);
    m_security_profile_name_isSet = !json[QString("SecurityProfileName")].isNull() && m_security_profile_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAISecurityProfileSearchSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityProfileSearchSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_organization_resource_id_isSet) {
        obj.insert(QString("OrganizationResourceId"), ::OpenAPI::toJsonValue(m_organization_resource_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_security_profile_name_isSet) {
        obj.insert(QString("SecurityProfileName"), ::OpenAPI::toJsonValue(m_security_profile_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAISecurityProfileSearchSummary::getId() const {
    return m_id;
}
void OAISecurityProfileSearchSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISecurityProfileSearchSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAISecurityProfileSearchSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISecurityProfileSearchSummary::getOrganizationResourceId() const {
    return m_organization_resource_id;
}
void OAISecurityProfileSearchSummary::setOrganizationResourceId(const QString &organization_resource_id) {
    m_organization_resource_id = organization_resource_id;
    m_organization_resource_id_isSet = true;
}

bool OAISecurityProfileSearchSummary::is_organization_resource_id_Set() const{
    return m_organization_resource_id_isSet;
}

bool OAISecurityProfileSearchSummary::is_organization_resource_id_Valid() const{
    return m_organization_resource_id_isValid;
}

QString OAISecurityProfileSearchSummary::getArn() const {
    return m_arn;
}
void OAISecurityProfileSearchSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAISecurityProfileSearchSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAISecurityProfileSearchSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAISecurityProfileSearchSummary::getSecurityProfileName() const {
    return m_security_profile_name;
}
void OAISecurityProfileSearchSummary::setSecurityProfileName(const QString &security_profile_name) {
    m_security_profile_name = security_profile_name;
    m_security_profile_name_isSet = true;
}

bool OAISecurityProfileSearchSummary::is_security_profile_name_Set() const{
    return m_security_profile_name_isSet;
}

bool OAISecurityProfileSearchSummary::is_security_profile_name_Valid() const{
    return m_security_profile_name_isValid;
}

QString OAISecurityProfileSearchSummary::getDescription() const {
    return m_description;
}
void OAISecurityProfileSearchSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISecurityProfileSearchSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAISecurityProfileSearchSummary::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAISecurityProfileSearchSummary::getTags() const {
    return m_tags;
}
void OAISecurityProfileSearchSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISecurityProfileSearchSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISecurityProfileSearchSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISecurityProfileSearchSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityProfileSearchSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
