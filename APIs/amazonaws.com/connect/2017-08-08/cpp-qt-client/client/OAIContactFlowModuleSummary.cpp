/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactFlowModuleSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactFlowModuleSummary::OAIContactFlowModuleSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactFlowModuleSummary::OAIContactFlowModuleSummary() {
    this->initializeModel();
}

OAIContactFlowModuleSummary::~OAIContactFlowModuleSummary() {}

void OAIContactFlowModuleSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIContactFlowModuleSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactFlowModuleSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIContactFlowModuleSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactFlowModuleSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIContactFlowModuleSummary::getId() const {
    return m_id;
}
void OAIContactFlowModuleSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContactFlowModuleSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContactFlowModuleSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIContactFlowModuleSummary::getArn() const {
    return m_arn;
}
void OAIContactFlowModuleSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIContactFlowModuleSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIContactFlowModuleSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIContactFlowModuleSummary::getName() const {
    return m_name;
}
void OAIContactFlowModuleSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContactFlowModuleSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContactFlowModuleSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIContactFlowModuleState OAIContactFlowModuleSummary::getState() const {
    return m_state;
}
void OAIContactFlowModuleSummary::setState(const OAIContactFlowModuleState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIContactFlowModuleSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIContactFlowModuleSummary::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIContactFlowModuleSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactFlowModuleSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
