/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition() {
    this->initializeModel();
}

OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::~OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition() {}

void OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_hierarchy_group_match_type_isSet = false;
    m_hierarchy_group_match_type_isValid = false;
}

void OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_hierarchy_group_match_type_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_group_match_type, json[QString("HierarchyGroupMatchType")]);
    m_hierarchy_group_match_type_isSet = !json[QString("HierarchyGroupMatchType")].isNull() && m_hierarchy_group_match_type_isValid;
}

QString OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_hierarchy_group_match_type.isSet()) {
        obj.insert(QString("HierarchyGroupMatchType"), ::OpenAPI::toJsonValue(m_hierarchy_group_match_type));
    }
    return obj;
}

QString OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::getValue() const {
    return m_value;
}
void OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::is_value_Set() const{
    return m_value_isSet;
}

bool OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::is_value_Valid() const{
    return m_value_isValid;
}

OAIHierarchyGroupMatchType OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::getHierarchyGroupMatchType() const {
    return m_hierarchy_group_match_type;
}
void OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::setHierarchyGroupMatchType(const OAIHierarchyGroupMatchType &hierarchy_group_match_type) {
    m_hierarchy_group_match_type = hierarchy_group_match_type;
    m_hierarchy_group_match_type_isSet = true;
}

bool OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::is_hierarchy_group_match_type_Set() const{
    return m_hierarchy_group_match_type_isSet;
}

bool OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::is_hierarchy_group_match_type_Valid() const{
    return m_hierarchy_group_match_type_isValid;
}

bool OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_group_match_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchUsers_request_SearchCriteria_HierarchyGroupCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
