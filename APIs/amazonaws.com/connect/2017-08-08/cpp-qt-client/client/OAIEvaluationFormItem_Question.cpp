/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationFormItem_Question.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationFormItem_Question::OAIEvaluationFormItem_Question(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationFormItem_Question::OAIEvaluationFormItem_Question() {
    this->initializeModel();
}

OAIEvaluationFormItem_Question::~OAIEvaluationFormItem_Question() {}

void OAIEvaluationFormItem_Question::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_not_applicable_enabled_isSet = false;
    m_not_applicable_enabled_isValid = false;

    m_question_type_isSet = false;
    m_question_type_isValid = false;

    m_question_type_properties_isSet = false;
    m_question_type_properties_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIEvaluationFormItem_Question::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationFormItem_Question::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("Instructions")]);
    m_instructions_isSet = !json[QString("Instructions")].isNull() && m_instructions_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("RefId")]);
    m_ref_id_isSet = !json[QString("RefId")].isNull() && m_ref_id_isValid;

    m_not_applicable_enabled_isValid = ::OpenAPI::fromJsonValue(m_not_applicable_enabled, json[QString("NotApplicableEnabled")]);
    m_not_applicable_enabled_isSet = !json[QString("NotApplicableEnabled")].isNull() && m_not_applicable_enabled_isValid;

    m_question_type_isValid = ::OpenAPI::fromJsonValue(m_question_type, json[QString("QuestionType")]);
    m_question_type_isSet = !json[QString("QuestionType")].isNull() && m_question_type_isValid;

    m_question_type_properties_isValid = ::OpenAPI::fromJsonValue(m_question_type_properties, json[QString("QuestionTypeProperties")]);
    m_question_type_properties_isSet = !json[QString("QuestionTypeProperties")].isNull() && m_question_type_properties_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAIEvaluationFormItem_Question::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationFormItem_Question::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("Instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("RefId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_not_applicable_enabled_isSet) {
        obj.insert(QString("NotApplicableEnabled"), ::OpenAPI::toJsonValue(m_not_applicable_enabled));
    }
    if (m_question_type.isSet()) {
        obj.insert(QString("QuestionType"), ::OpenAPI::toJsonValue(m_question_type));
    }
    if (m_question_type_properties.isSet()) {
        obj.insert(QString("QuestionTypeProperties"), ::OpenAPI::toJsonValue(m_question_type_properties));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIEvaluationFormItem_Question::getTitle() const {
    return m_title;
}
void OAIEvaluationFormItem_Question::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEvaluationFormItem_Question::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEvaluationFormItem_Question::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIEvaluationFormItem_Question::getInstructions() const {
    return m_instructions;
}
void OAIEvaluationFormItem_Question::setInstructions(const QString &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIEvaluationFormItem_Question::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIEvaluationFormItem_Question::is_instructions_Valid() const{
    return m_instructions_isValid;
}

QString OAIEvaluationFormItem_Question::getRefId() const {
    return m_ref_id;
}
void OAIEvaluationFormItem_Question::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAIEvaluationFormItem_Question::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIEvaluationFormItem_Question::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

bool OAIEvaluationFormItem_Question::getNotApplicableEnabled() const {
    return m_not_applicable_enabled;
}
void OAIEvaluationFormItem_Question::setNotApplicableEnabled(const bool &not_applicable_enabled) {
    m_not_applicable_enabled = not_applicable_enabled;
    m_not_applicable_enabled_isSet = true;
}

bool OAIEvaluationFormItem_Question::is_not_applicable_enabled_Set() const{
    return m_not_applicable_enabled_isSet;
}

bool OAIEvaluationFormItem_Question::is_not_applicable_enabled_Valid() const{
    return m_not_applicable_enabled_isValid;
}

OAIEvaluationFormQuestionType OAIEvaluationFormItem_Question::getQuestionType() const {
    return m_question_type;
}
void OAIEvaluationFormItem_Question::setQuestionType(const OAIEvaluationFormQuestionType &question_type) {
    m_question_type = question_type;
    m_question_type_isSet = true;
}

bool OAIEvaluationFormItem_Question::is_question_type_Set() const{
    return m_question_type_isSet;
}

bool OAIEvaluationFormItem_Question::is_question_type_Valid() const{
    return m_question_type_isValid;
}

OAIEvaluationFormQuestion_QuestionTypeProperties OAIEvaluationFormItem_Question::getQuestionTypeProperties() const {
    return m_question_type_properties;
}
void OAIEvaluationFormItem_Question::setQuestionTypeProperties(const OAIEvaluationFormQuestion_QuestionTypeProperties &question_type_properties) {
    m_question_type_properties = question_type_properties;
    m_question_type_properties_isSet = true;
}

bool OAIEvaluationFormItem_Question::is_question_type_properties_Set() const{
    return m_question_type_properties_isSet;
}

bool OAIEvaluationFormItem_Question::is_question_type_properties_Valid() const{
    return m_question_type_properties_isValid;
}

double OAIEvaluationFormItem_Question::getWeight() const {
    return m_weight;
}
void OAIEvaluationFormItem_Question::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIEvaluationFormItem_Question::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIEvaluationFormItem_Question::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIEvaluationFormItem_Question::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_applicable_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_type_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationFormItem_Question::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && m_ref_id_isValid && m_question_type_isValid && true;
}

} // namespace OpenAPI
