/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCurrentMetricDataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCurrentMetricDataResponse::OAIGetCurrentMetricDataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCurrentMetricDataResponse::OAIGetCurrentMetricDataResponse() {
    this->initializeModel();
}

OAIGetCurrentMetricDataResponse::~OAIGetCurrentMetricDataResponse() {}

void OAIGetCurrentMetricDataResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_metric_results_isSet = false;
    m_metric_results_isValid = false;

    m_data_snapshot_time_isSet = false;
    m_data_snapshot_time_isValid = false;

    m_approximate_total_count_isSet = false;
    m_approximate_total_count_isValid = false;
}

void OAIGetCurrentMetricDataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCurrentMetricDataResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_metric_results_isValid = ::OpenAPI::fromJsonValue(m_metric_results, json[QString("MetricResults")]);
    m_metric_results_isSet = !json[QString("MetricResults")].isNull() && m_metric_results_isValid;

    m_data_snapshot_time_isValid = ::OpenAPI::fromJsonValue(m_data_snapshot_time, json[QString("DataSnapshotTime")]);
    m_data_snapshot_time_isSet = !json[QString("DataSnapshotTime")].isNull() && m_data_snapshot_time_isValid;

    m_approximate_total_count_isValid = ::OpenAPI::fromJsonValue(m_approximate_total_count, json[QString("ApproximateTotalCount")]);
    m_approximate_total_count_isSet = !json[QString("ApproximateTotalCount")].isNull() && m_approximate_total_count_isValid;
}

QString OAIGetCurrentMetricDataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCurrentMetricDataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_metric_results.isSet()) {
        obj.insert(QString("MetricResults"), ::OpenAPI::toJsonValue(m_metric_results));
    }
    if (m_data_snapshot_time_isSet) {
        obj.insert(QString("DataSnapshotTime"), ::OpenAPI::toJsonValue(m_data_snapshot_time));
    }
    if (m_approximate_total_count_isSet) {
        obj.insert(QString("ApproximateTotalCount"), ::OpenAPI::toJsonValue(m_approximate_total_count));
    }
    return obj;
}

QString OAIGetCurrentMetricDataResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetCurrentMetricDataResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetCurrentMetricDataResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetCurrentMetricDataResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIGetCurrentMetricDataResponse::getMetricResults() const {
    return m_metric_results;
}
void OAIGetCurrentMetricDataResponse::setMetricResults(const QList &metric_results) {
    m_metric_results = metric_results;
    m_metric_results_isSet = true;
}

bool OAIGetCurrentMetricDataResponse::is_metric_results_Set() const{
    return m_metric_results_isSet;
}

bool OAIGetCurrentMetricDataResponse::is_metric_results_Valid() const{
    return m_metric_results_isValid;
}

QDateTime OAIGetCurrentMetricDataResponse::getDataSnapshotTime() const {
    return m_data_snapshot_time;
}
void OAIGetCurrentMetricDataResponse::setDataSnapshotTime(const QDateTime &data_snapshot_time) {
    m_data_snapshot_time = data_snapshot_time;
    m_data_snapshot_time_isSet = true;
}

bool OAIGetCurrentMetricDataResponse::is_data_snapshot_time_Set() const{
    return m_data_snapshot_time_isSet;
}

bool OAIGetCurrentMetricDataResponse::is_data_snapshot_time_Valid() const{
    return m_data_snapshot_time_isValid;
}

qint32 OAIGetCurrentMetricDataResponse::getApproximateTotalCount() const {
    return m_approximate_total_count;
}
void OAIGetCurrentMetricDataResponse::setApproximateTotalCount(const qint32 &approximate_total_count) {
    m_approximate_total_count = approximate_total_count;
    m_approximate_total_count_isSet = true;
}

bool OAIGetCurrentMetricDataResponse::is_approximate_total_count_Set() const{
    return m_approximate_total_count_isSet;
}

bool OAIGetCurrentMetricDataResponse::is_approximate_total_count_Valid() const{
    return m_approximate_total_count_isValid;
}

bool OAIGetCurrentMetricDataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_snapshot_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approximate_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCurrentMetricDataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
