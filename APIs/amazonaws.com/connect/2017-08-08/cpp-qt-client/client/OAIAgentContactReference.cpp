/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentContactReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentContactReference::OAIAgentContactReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentContactReference::OAIAgentContactReference() {
    this->initializeModel();
}

OAIAgentContactReference::~OAIAgentContactReference() {}

void OAIAgentContactReference::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_initiation_method_isSet = false;
    m_initiation_method_isValid = false;

    m_agent_contact_state_isSet = false;
    m_agent_contact_state_isValid = false;

    m_state_start_timestamp_isSet = false;
    m_state_start_timestamp_isValid = false;

    m_connected_to_agent_timestamp_isSet = false;
    m_connected_to_agent_timestamp_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;
}

void OAIAgentContactReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentContactReference::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_initiation_method_isValid = ::OpenAPI::fromJsonValue(m_initiation_method, json[QString("InitiationMethod")]);
    m_initiation_method_isSet = !json[QString("InitiationMethod")].isNull() && m_initiation_method_isValid;

    m_agent_contact_state_isValid = ::OpenAPI::fromJsonValue(m_agent_contact_state, json[QString("AgentContactState")]);
    m_agent_contact_state_isSet = !json[QString("AgentContactState")].isNull() && m_agent_contact_state_isValid;

    m_state_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_state_start_timestamp, json[QString("StateStartTimestamp")]);
    m_state_start_timestamp_isSet = !json[QString("StateStartTimestamp")].isNull() && m_state_start_timestamp_isValid;

    m_connected_to_agent_timestamp_isValid = ::OpenAPI::fromJsonValue(m_connected_to_agent_timestamp, json[QString("ConnectedToAgentTimestamp")]);
    m_connected_to_agent_timestamp_isSet = !json[QString("ConnectedToAgentTimestamp")].isNull() && m_connected_to_agent_timestamp_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("Queue")]);
    m_queue_isSet = !json[QString("Queue")].isNull() && m_queue_isValid;
}

QString OAIAgentContactReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentContactReference::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_initiation_method.isSet()) {
        obj.insert(QString("InitiationMethod"), ::OpenAPI::toJsonValue(m_initiation_method));
    }
    if (m_agent_contact_state.isSet()) {
        obj.insert(QString("AgentContactState"), ::OpenAPI::toJsonValue(m_agent_contact_state));
    }
    if (m_state_start_timestamp_isSet) {
        obj.insert(QString("StateStartTimestamp"), ::OpenAPI::toJsonValue(m_state_start_timestamp));
    }
    if (m_connected_to_agent_timestamp_isSet) {
        obj.insert(QString("ConnectedToAgentTimestamp"), ::OpenAPI::toJsonValue(m_connected_to_agent_timestamp));
    }
    if (m_queue.isSet()) {
        obj.insert(QString("Queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    return obj;
}

QString OAIAgentContactReference::getContactId() const {
    return m_contact_id;
}
void OAIAgentContactReference::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIAgentContactReference::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIAgentContactReference::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

OAIChannel OAIAgentContactReference::getChannel() const {
    return m_channel;
}
void OAIAgentContactReference::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIAgentContactReference::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIAgentContactReference::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIContactInitiationMethod OAIAgentContactReference::getInitiationMethod() const {
    return m_initiation_method;
}
void OAIAgentContactReference::setInitiationMethod(const OAIContactInitiationMethod &initiation_method) {
    m_initiation_method = initiation_method;
    m_initiation_method_isSet = true;
}

bool OAIAgentContactReference::is_initiation_method_Set() const{
    return m_initiation_method_isSet;
}

bool OAIAgentContactReference::is_initiation_method_Valid() const{
    return m_initiation_method_isValid;
}

OAIContactState OAIAgentContactReference::getAgentContactState() const {
    return m_agent_contact_state;
}
void OAIAgentContactReference::setAgentContactState(const OAIContactState &agent_contact_state) {
    m_agent_contact_state = agent_contact_state;
    m_agent_contact_state_isSet = true;
}

bool OAIAgentContactReference::is_agent_contact_state_Set() const{
    return m_agent_contact_state_isSet;
}

bool OAIAgentContactReference::is_agent_contact_state_Valid() const{
    return m_agent_contact_state_isValid;
}

QDateTime OAIAgentContactReference::getStateStartTimestamp() const {
    return m_state_start_timestamp;
}
void OAIAgentContactReference::setStateStartTimestamp(const QDateTime &state_start_timestamp) {
    m_state_start_timestamp = state_start_timestamp;
    m_state_start_timestamp_isSet = true;
}

bool OAIAgentContactReference::is_state_start_timestamp_Set() const{
    return m_state_start_timestamp_isSet;
}

bool OAIAgentContactReference::is_state_start_timestamp_Valid() const{
    return m_state_start_timestamp_isValid;
}

QDateTime OAIAgentContactReference::getConnectedToAgentTimestamp() const {
    return m_connected_to_agent_timestamp;
}
void OAIAgentContactReference::setConnectedToAgentTimestamp(const QDateTime &connected_to_agent_timestamp) {
    m_connected_to_agent_timestamp = connected_to_agent_timestamp;
    m_connected_to_agent_timestamp_isSet = true;
}

bool OAIAgentContactReference::is_connected_to_agent_timestamp_Set() const{
    return m_connected_to_agent_timestamp_isSet;
}

bool OAIAgentContactReference::is_connected_to_agent_timestamp_Valid() const{
    return m_connected_to_agent_timestamp_isValid;
}

OAIQueueReference OAIAgentContactReference::getQueue() const {
    return m_queue;
}
void OAIAgentContactReference::setQueue(const OAIQueueReference &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIAgentContactReference::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIAgentContactReference::is_queue_Valid() const{
    return m_queue_isValid;
}

bool OAIAgentContactReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiation_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_contact_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_to_agent_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentContactReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
