/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateQueue_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateQueue_request::OAICreateQueue_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateQueue_request::OAICreateQueue_request() {
    this->initializeModel();
}

OAICreateQueue_request::~OAICreateQueue_request() {}

void OAICreateQueue_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_outbound_caller_config_isSet = false;
    m_outbound_caller_config_isValid = false;

    m_hours_of_operation_id_isSet = false;
    m_hours_of_operation_id_isValid = false;

    m_max_contacts_isSet = false;
    m_max_contacts_isValid = false;

    m_quick_connect_ids_isSet = false;
    m_quick_connect_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateQueue_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateQueue_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_outbound_caller_config_isValid = ::OpenAPI::fromJsonValue(m_outbound_caller_config, json[QString("OutboundCallerConfig")]);
    m_outbound_caller_config_isSet = !json[QString("OutboundCallerConfig")].isNull() && m_outbound_caller_config_isValid;

    m_hours_of_operation_id_isValid = ::OpenAPI::fromJsonValue(m_hours_of_operation_id, json[QString("HoursOfOperationId")]);
    m_hours_of_operation_id_isSet = !json[QString("HoursOfOperationId")].isNull() && m_hours_of_operation_id_isValid;

    m_max_contacts_isValid = ::OpenAPI::fromJsonValue(m_max_contacts, json[QString("MaxContacts")]);
    m_max_contacts_isSet = !json[QString("MaxContacts")].isNull() && m_max_contacts_isValid;

    m_quick_connect_ids_isValid = ::OpenAPI::fromJsonValue(m_quick_connect_ids, json[QString("QuickConnectIds")]);
    m_quick_connect_ids_isSet = !json[QString("QuickConnectIds")].isNull() && m_quick_connect_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateQueue_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateQueue_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_outbound_caller_config.isSet()) {
        obj.insert(QString("OutboundCallerConfig"), ::OpenAPI::toJsonValue(m_outbound_caller_config));
    }
    if (m_hours_of_operation_id_isSet) {
        obj.insert(QString("HoursOfOperationId"), ::OpenAPI::toJsonValue(m_hours_of_operation_id));
    }
    if (m_max_contacts_isSet) {
        obj.insert(QString("MaxContacts"), ::OpenAPI::toJsonValue(m_max_contacts));
    }
    if (m_quick_connect_ids.size() > 0) {
        obj.insert(QString("QuickConnectIds"), ::OpenAPI::toJsonValue(m_quick_connect_ids));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateQueue_request::getName() const {
    return m_name;
}
void OAICreateQueue_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateQueue_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateQueue_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateQueue_request::getDescription() const {
    return m_description;
}
void OAICreateQueue_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateQueue_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateQueue_request::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateQueue_request_OutboundCallerConfig OAICreateQueue_request::getOutboundCallerConfig() const {
    return m_outbound_caller_config;
}
void OAICreateQueue_request::setOutboundCallerConfig(const OAICreateQueue_request_OutboundCallerConfig &outbound_caller_config) {
    m_outbound_caller_config = outbound_caller_config;
    m_outbound_caller_config_isSet = true;
}

bool OAICreateQueue_request::is_outbound_caller_config_Set() const{
    return m_outbound_caller_config_isSet;
}

bool OAICreateQueue_request::is_outbound_caller_config_Valid() const{
    return m_outbound_caller_config_isValid;
}

QString OAICreateQueue_request::getHoursOfOperationId() const {
    return m_hours_of_operation_id;
}
void OAICreateQueue_request::setHoursOfOperationId(const QString &hours_of_operation_id) {
    m_hours_of_operation_id = hours_of_operation_id;
    m_hours_of_operation_id_isSet = true;
}

bool OAICreateQueue_request::is_hours_of_operation_id_Set() const{
    return m_hours_of_operation_id_isSet;
}

bool OAICreateQueue_request::is_hours_of_operation_id_Valid() const{
    return m_hours_of_operation_id_isValid;
}

qint32 OAICreateQueue_request::getMaxContacts() const {
    return m_max_contacts;
}
void OAICreateQueue_request::setMaxContacts(const qint32 &max_contacts) {
    m_max_contacts = max_contacts;
    m_max_contacts_isSet = true;
}

bool OAICreateQueue_request::is_max_contacts_Set() const{
    return m_max_contacts_isSet;
}

bool OAICreateQueue_request::is_max_contacts_Valid() const{
    return m_max_contacts_isValid;
}

QList<QString> OAICreateQueue_request::getQuickConnectIds() const {
    return m_quick_connect_ids;
}
void OAICreateQueue_request::setQuickConnectIds(const QList<QString> &quick_connect_ids) {
    m_quick_connect_ids = quick_connect_ids;
    m_quick_connect_ids_isSet = true;
}

bool OAICreateQueue_request::is_quick_connect_ids_Set() const{
    return m_quick_connect_ids_isSet;
}

bool OAICreateQueue_request::is_quick_connect_ids_Valid() const{
    return m_quick_connect_ids_isValid;
}

QMap<QString, QString> OAICreateQueue_request::getTags() const {
    return m_tags;
}
void OAICreateQueue_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateQueue_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateQueue_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateQueue_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_caller_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_of_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_contacts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quick_connect_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateQueue_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_hours_of_operation_id_isValid && true;
}

} // namespace OpenAPI
