/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipantTimerConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipantTimerConfiguration::OAIParticipantTimerConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipantTimerConfiguration::OAIParticipantTimerConfiguration() {
    this->initializeModel();
}

OAIParticipantTimerConfiguration::~OAIParticipantTimerConfiguration() {}

void OAIParticipantTimerConfiguration::initializeModel() {

    m_participant_role_isSet = false;
    m_participant_role_isValid = false;

    m_timer_type_isSet = false;
    m_timer_type_isValid = false;

    m_timer_value_isSet = false;
    m_timer_value_isValid = false;
}

void OAIParticipantTimerConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipantTimerConfiguration::fromJsonObject(QJsonObject json) {

    m_participant_role_isValid = ::OpenAPI::fromJsonValue(m_participant_role, json[QString("ParticipantRole")]);
    m_participant_role_isSet = !json[QString("ParticipantRole")].isNull() && m_participant_role_isValid;

    m_timer_type_isValid = ::OpenAPI::fromJsonValue(m_timer_type, json[QString("TimerType")]);
    m_timer_type_isSet = !json[QString("TimerType")].isNull() && m_timer_type_isValid;

    m_timer_value_isValid = ::OpenAPI::fromJsonValue(m_timer_value, json[QString("TimerValue")]);
    m_timer_value_isSet = !json[QString("TimerValue")].isNull() && m_timer_value_isValid;
}

QString OAIParticipantTimerConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipantTimerConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_participant_role.isSet()) {
        obj.insert(QString("ParticipantRole"), ::OpenAPI::toJsonValue(m_participant_role));
    }
    if (m_timer_type.isSet()) {
        obj.insert(QString("TimerType"), ::OpenAPI::toJsonValue(m_timer_type));
    }
    if (m_timer_value.isSet()) {
        obj.insert(QString("TimerValue"), ::OpenAPI::toJsonValue(m_timer_value));
    }
    return obj;
}

OAITimerEligibleParticipantRoles OAIParticipantTimerConfiguration::getParticipantRole() const {
    return m_participant_role;
}
void OAIParticipantTimerConfiguration::setParticipantRole(const OAITimerEligibleParticipantRoles &participant_role) {
    m_participant_role = participant_role;
    m_participant_role_isSet = true;
}

bool OAIParticipantTimerConfiguration::is_participant_role_Set() const{
    return m_participant_role_isSet;
}

bool OAIParticipantTimerConfiguration::is_participant_role_Valid() const{
    return m_participant_role_isValid;
}

OAIParticipantTimerType OAIParticipantTimerConfiguration::getTimerType() const {
    return m_timer_type;
}
void OAIParticipantTimerConfiguration::setTimerType(const OAIParticipantTimerType &timer_type) {
    m_timer_type = timer_type;
    m_timer_type_isSet = true;
}

bool OAIParticipantTimerConfiguration::is_timer_type_Set() const{
    return m_timer_type_isSet;
}

bool OAIParticipantTimerConfiguration::is_timer_type_Valid() const{
    return m_timer_type_isValid;
}

OAIParticipantTimerConfiguration_TimerValue OAIParticipantTimerConfiguration::getTimerValue() const {
    return m_timer_value;
}
void OAIParticipantTimerConfiguration::setTimerValue(const OAIParticipantTimerConfiguration_TimerValue &timer_value) {
    m_timer_value = timer_value;
    m_timer_value_isSet = true;
}

bool OAIParticipantTimerConfiguration::is_timer_value_Set() const{
    return m_timer_value_isSet;
}

bool OAIParticipantTimerConfiguration::is_timer_value_Valid() const{
    return m_timer_value_isValid;
}

bool OAIParticipantTimerConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_participant_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipantTimerConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_participant_role_isValid && m_timer_type_isValid && m_timer_value_isValid && true;
}

} // namespace OpenAPI
