/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationFormQuestion_QuestionTypeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationFormQuestion_QuestionTypeProperties::OAIEvaluationFormQuestion_QuestionTypeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationFormQuestion_QuestionTypeProperties::OAIEvaluationFormQuestion_QuestionTypeProperties() {
    this->initializeModel();
}

OAIEvaluationFormQuestion_QuestionTypeProperties::~OAIEvaluationFormQuestion_QuestionTypeProperties() {}

void OAIEvaluationFormQuestion_QuestionTypeProperties::initializeModel() {

    m_numeric_isSet = false;
    m_numeric_isValid = false;

    m_single_select_isSet = false;
    m_single_select_isValid = false;
}

void OAIEvaluationFormQuestion_QuestionTypeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationFormQuestion_QuestionTypeProperties::fromJsonObject(QJsonObject json) {

    m_numeric_isValid = ::OpenAPI::fromJsonValue(m_numeric, json[QString("Numeric")]);
    m_numeric_isSet = !json[QString("Numeric")].isNull() && m_numeric_isValid;

    m_single_select_isValid = ::OpenAPI::fromJsonValue(m_single_select, json[QString("SingleSelect")]);
    m_single_select_isSet = !json[QString("SingleSelect")].isNull() && m_single_select_isValid;
}

QString OAIEvaluationFormQuestion_QuestionTypeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationFormQuestion_QuestionTypeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_numeric.isSet()) {
        obj.insert(QString("Numeric"), ::OpenAPI::toJsonValue(m_numeric));
    }
    if (m_single_select.isSet()) {
        obj.insert(QString("SingleSelect"), ::OpenAPI::toJsonValue(m_single_select));
    }
    return obj;
}

OAIEvaluationFormQuestionTypeProperties_Numeric OAIEvaluationFormQuestion_QuestionTypeProperties::getNumeric() const {
    return m_numeric;
}
void OAIEvaluationFormQuestion_QuestionTypeProperties::setNumeric(const OAIEvaluationFormQuestionTypeProperties_Numeric &numeric) {
    m_numeric = numeric;
    m_numeric_isSet = true;
}

bool OAIEvaluationFormQuestion_QuestionTypeProperties::is_numeric_Set() const{
    return m_numeric_isSet;
}

bool OAIEvaluationFormQuestion_QuestionTypeProperties::is_numeric_Valid() const{
    return m_numeric_isValid;
}

OAIEvaluationFormQuestionTypeProperties_SingleSelect OAIEvaluationFormQuestion_QuestionTypeProperties::getSingleSelect() const {
    return m_single_select;
}
void OAIEvaluationFormQuestion_QuestionTypeProperties::setSingleSelect(const OAIEvaluationFormQuestionTypeProperties_SingleSelect &single_select) {
    m_single_select = single_select;
    m_single_select_isSet = true;
}

bool OAIEvaluationFormQuestion_QuestionTypeProperties::is_single_select_Set() const{
    return m_single_select_isSet;
}

bool OAIEvaluationFormQuestion_QuestionTypeProperties::is_single_select_Valid() const{
    return m_single_select_isValid;
}

bool OAIEvaluationFormQuestion_QuestionTypeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_numeric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_select.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationFormQuestion_QuestionTypeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
