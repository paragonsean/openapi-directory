/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutingProfileQueueConfigSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutingProfileQueueConfigSummary::OAIRoutingProfileQueueConfigSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutingProfileQueueConfigSummary::OAIRoutingProfileQueueConfigSummary() {
    this->initializeModel();
}

OAIRoutingProfileQueueConfigSummary::~OAIRoutingProfileQueueConfigSummary() {}

void OAIRoutingProfileQueueConfigSummary::initializeModel() {

    m_queue_id_isSet = false;
    m_queue_id_isValid = false;

    m_queue_arn_isSet = false;
    m_queue_arn_isValid = false;

    m_queue_name_isSet = false;
    m_queue_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_delay_isSet = false;
    m_delay_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;
}

void OAIRoutingProfileQueueConfigSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutingProfileQueueConfigSummary::fromJsonObject(QJsonObject json) {

    m_queue_id_isValid = ::OpenAPI::fromJsonValue(m_queue_id, json[QString("QueueId")]);
    m_queue_id_isSet = !json[QString("QueueId")].isNull() && m_queue_id_isValid;

    m_queue_arn_isValid = ::OpenAPI::fromJsonValue(m_queue_arn, json[QString("QueueArn")]);
    m_queue_arn_isSet = !json[QString("QueueArn")].isNull() && m_queue_arn_isValid;

    m_queue_name_isValid = ::OpenAPI::fromJsonValue(m_queue_name, json[QString("QueueName")]);
    m_queue_name_isSet = !json[QString("QueueName")].isNull() && m_queue_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_delay_isValid = ::OpenAPI::fromJsonValue(m_delay, json[QString("Delay")]);
    m_delay_isSet = !json[QString("Delay")].isNull() && m_delay_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;
}

QString OAIRoutingProfileQueueConfigSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutingProfileQueueConfigSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_queue_id_isSet) {
        obj.insert(QString("QueueId"), ::OpenAPI::toJsonValue(m_queue_id));
    }
    if (m_queue_arn_isSet) {
        obj.insert(QString("QueueArn"), ::OpenAPI::toJsonValue(m_queue_arn));
    }
    if (m_queue_name_isSet) {
        obj.insert(QString("QueueName"), ::OpenAPI::toJsonValue(m_queue_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_delay_isSet) {
        obj.insert(QString("Delay"), ::OpenAPI::toJsonValue(m_delay));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    return obj;
}

QString OAIRoutingProfileQueueConfigSummary::getQueueId() const {
    return m_queue_id;
}
void OAIRoutingProfileQueueConfigSummary::setQueueId(const QString &queue_id) {
    m_queue_id = queue_id;
    m_queue_id_isSet = true;
}

bool OAIRoutingProfileQueueConfigSummary::is_queue_id_Set() const{
    return m_queue_id_isSet;
}

bool OAIRoutingProfileQueueConfigSummary::is_queue_id_Valid() const{
    return m_queue_id_isValid;
}

QString OAIRoutingProfileQueueConfigSummary::getQueueArn() const {
    return m_queue_arn;
}
void OAIRoutingProfileQueueConfigSummary::setQueueArn(const QString &queue_arn) {
    m_queue_arn = queue_arn;
    m_queue_arn_isSet = true;
}

bool OAIRoutingProfileQueueConfigSummary::is_queue_arn_Set() const{
    return m_queue_arn_isSet;
}

bool OAIRoutingProfileQueueConfigSummary::is_queue_arn_Valid() const{
    return m_queue_arn_isValid;
}

QString OAIRoutingProfileQueueConfigSummary::getQueueName() const {
    return m_queue_name;
}
void OAIRoutingProfileQueueConfigSummary::setQueueName(const QString &queue_name) {
    m_queue_name = queue_name;
    m_queue_name_isSet = true;
}

bool OAIRoutingProfileQueueConfigSummary::is_queue_name_Set() const{
    return m_queue_name_isSet;
}

bool OAIRoutingProfileQueueConfigSummary::is_queue_name_Valid() const{
    return m_queue_name_isValid;
}

qint32 OAIRoutingProfileQueueConfigSummary::getPriority() const {
    return m_priority;
}
void OAIRoutingProfileQueueConfigSummary::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIRoutingProfileQueueConfigSummary::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIRoutingProfileQueueConfigSummary::is_priority_Valid() const{
    return m_priority_isValid;
}

qint32 OAIRoutingProfileQueueConfigSummary::getDelay() const {
    return m_delay;
}
void OAIRoutingProfileQueueConfigSummary::setDelay(const qint32 &delay) {
    m_delay = delay;
    m_delay_isSet = true;
}

bool OAIRoutingProfileQueueConfigSummary::is_delay_Set() const{
    return m_delay_isSet;
}

bool OAIRoutingProfileQueueConfigSummary::is_delay_Valid() const{
    return m_delay_isValid;
}

OAIChannel OAIRoutingProfileQueueConfigSummary::getChannel() const {
    return m_channel;
}
void OAIRoutingProfileQueueConfigSummary::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIRoutingProfileQueueConfigSummary::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIRoutingProfileQueueConfigSummary::is_channel_Valid() const{
    return m_channel_isValid;
}

bool OAIRoutingProfileQueueConfigSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_queue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutingProfileQueueConfigSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_queue_id_isValid && m_queue_arn_isValid && m_queue_name_isValid && m_priority_isValid && m_delay_isValid && m_channel_isValid && true;
}

} // namespace OpenAPI
