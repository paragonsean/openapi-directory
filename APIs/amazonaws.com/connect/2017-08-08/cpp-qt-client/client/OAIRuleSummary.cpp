/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleSummary::OAIRuleSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleSummary::OAIRuleSummary() {
    this->initializeModel();
}

OAIRuleSummary::~OAIRuleSummary() {}

void OAIRuleSummary::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_rule_arn_isSet = false;
    m_rule_arn_isValid = false;

    m_event_source_name_isSet = false;
    m_event_source_name_isValid = false;

    m_publish_status_isSet = false;
    m_publish_status_isValid = false;

    m_action_summaries_isSet = false;
    m_action_summaries_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIRuleSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleSummary::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("RuleId")]);
    m_rule_id_isSet = !json[QString("RuleId")].isNull() && m_rule_id_isValid;

    m_rule_arn_isValid = ::OpenAPI::fromJsonValue(m_rule_arn, json[QString("RuleArn")]);
    m_rule_arn_isSet = !json[QString("RuleArn")].isNull() && m_rule_arn_isValid;

    m_event_source_name_isValid = ::OpenAPI::fromJsonValue(m_event_source_name, json[QString("EventSourceName")]);
    m_event_source_name_isSet = !json[QString("EventSourceName")].isNull() && m_event_source_name_isValid;

    m_publish_status_isValid = ::OpenAPI::fromJsonValue(m_publish_status, json[QString("PublishStatus")]);
    m_publish_status_isSet = !json[QString("PublishStatus")].isNull() && m_publish_status_isValid;

    m_action_summaries_isValid = ::OpenAPI::fromJsonValue(m_action_summaries, json[QString("ActionSummaries")]);
    m_action_summaries_isSet = !json[QString("ActionSummaries")].isNull() && m_action_summaries_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIRuleSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("RuleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_rule_arn_isSet) {
        obj.insert(QString("RuleArn"), ::OpenAPI::toJsonValue(m_rule_arn));
    }
    if (m_event_source_name.isSet()) {
        obj.insert(QString("EventSourceName"), ::OpenAPI::toJsonValue(m_event_source_name));
    }
    if (m_publish_status.isSet()) {
        obj.insert(QString("PublishStatus"), ::OpenAPI::toJsonValue(m_publish_status));
    }
    if (m_action_summaries.isSet()) {
        obj.insert(QString("ActionSummaries"), ::OpenAPI::toJsonValue(m_action_summaries));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAIRuleSummary::getName() const {
    return m_name;
}
void OAIRuleSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRuleSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRuleSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRuleSummary::getRuleId() const {
    return m_rule_id;
}
void OAIRuleSummary::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIRuleSummary::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIRuleSummary::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIRuleSummary::getRuleArn() const {
    return m_rule_arn;
}
void OAIRuleSummary::setRuleArn(const QString &rule_arn) {
    m_rule_arn = rule_arn;
    m_rule_arn_isSet = true;
}

bool OAIRuleSummary::is_rule_arn_Set() const{
    return m_rule_arn_isSet;
}

bool OAIRuleSummary::is_rule_arn_Valid() const{
    return m_rule_arn_isValid;
}

OAIEventSourceName OAIRuleSummary::getEventSourceName() const {
    return m_event_source_name;
}
void OAIRuleSummary::setEventSourceName(const OAIEventSourceName &event_source_name) {
    m_event_source_name = event_source_name;
    m_event_source_name_isSet = true;
}

bool OAIRuleSummary::is_event_source_name_Set() const{
    return m_event_source_name_isSet;
}

bool OAIRuleSummary::is_event_source_name_Valid() const{
    return m_event_source_name_isValid;
}

OAIRulePublishStatus OAIRuleSummary::getPublishStatus() const {
    return m_publish_status;
}
void OAIRuleSummary::setPublishStatus(const OAIRulePublishStatus &publish_status) {
    m_publish_status = publish_status;
    m_publish_status_isSet = true;
}

bool OAIRuleSummary::is_publish_status_Set() const{
    return m_publish_status_isSet;
}

bool OAIRuleSummary::is_publish_status_Valid() const{
    return m_publish_status_isValid;
}

QList OAIRuleSummary::getActionSummaries() const {
    return m_action_summaries;
}
void OAIRuleSummary::setActionSummaries(const QList &action_summaries) {
    m_action_summaries = action_summaries;
    m_action_summaries_isSet = true;
}

bool OAIRuleSummary::is_action_summaries_Set() const{
    return m_action_summaries_isSet;
}

bool OAIRuleSummary::is_action_summaries_Valid() const{
    return m_action_summaries_isValid;
}

QDateTime OAIRuleSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIRuleSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIRuleSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIRuleSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIRuleSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIRuleSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIRuleSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIRuleSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIRuleSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_rule_id_isValid && m_rule_arn_isValid && m_event_source_name_isValid && m_publish_status_isValid && m_action_summaries_isValid && m_created_time_isValid && m_last_updated_time_isValid && true;
}

} // namespace OpenAPI
