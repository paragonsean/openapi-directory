/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUser_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUser_request::OAICreateUser_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUser_request::OAICreateUser_request() {
    this->initializeModel();
}

OAICreateUser_request::~OAICreateUser_request() {}

void OAICreateUser_request::initializeModel() {

    m_username_isSet = false;
    m_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_identity_info_isSet = false;
    m_identity_info_isValid = false;

    m_phone_config_isSet = false;
    m_phone_config_isValid = false;

    m_directory_user_id_isSet = false;
    m_directory_user_id_isValid = false;

    m_security_profile_ids_isSet = false;
    m_security_profile_ids_isValid = false;

    m_routing_profile_id_isSet = false;
    m_routing_profile_id_isValid = false;

    m_hierarchy_group_id_isSet = false;
    m_hierarchy_group_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateUser_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUser_request::fromJsonObject(QJsonObject json) {

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_identity_info_isValid = ::OpenAPI::fromJsonValue(m_identity_info, json[QString("IdentityInfo")]);
    m_identity_info_isSet = !json[QString("IdentityInfo")].isNull() && m_identity_info_isValid;

    m_phone_config_isValid = ::OpenAPI::fromJsonValue(m_phone_config, json[QString("PhoneConfig")]);
    m_phone_config_isSet = !json[QString("PhoneConfig")].isNull() && m_phone_config_isValid;

    m_directory_user_id_isValid = ::OpenAPI::fromJsonValue(m_directory_user_id, json[QString("DirectoryUserId")]);
    m_directory_user_id_isSet = !json[QString("DirectoryUserId")].isNull() && m_directory_user_id_isValid;

    m_security_profile_ids_isValid = ::OpenAPI::fromJsonValue(m_security_profile_ids, json[QString("SecurityProfileIds")]);
    m_security_profile_ids_isSet = !json[QString("SecurityProfileIds")].isNull() && m_security_profile_ids_isValid;

    m_routing_profile_id_isValid = ::OpenAPI::fromJsonValue(m_routing_profile_id, json[QString("RoutingProfileId")]);
    m_routing_profile_id_isSet = !json[QString("RoutingProfileId")].isNull() && m_routing_profile_id_isValid;

    m_hierarchy_group_id_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_group_id, json[QString("HierarchyGroupId")]);
    m_hierarchy_group_id_isSet = !json[QString("HierarchyGroupId")].isNull() && m_hierarchy_group_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateUser_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUser_request::asJsonObject() const {
    QJsonObject obj;
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_identity_info.isSet()) {
        obj.insert(QString("IdentityInfo"), ::OpenAPI::toJsonValue(m_identity_info));
    }
    if (m_phone_config.isSet()) {
        obj.insert(QString("PhoneConfig"), ::OpenAPI::toJsonValue(m_phone_config));
    }
    if (m_directory_user_id_isSet) {
        obj.insert(QString("DirectoryUserId"), ::OpenAPI::toJsonValue(m_directory_user_id));
    }
    if (m_security_profile_ids.size() > 0) {
        obj.insert(QString("SecurityProfileIds"), ::OpenAPI::toJsonValue(m_security_profile_ids));
    }
    if (m_routing_profile_id_isSet) {
        obj.insert(QString("RoutingProfileId"), ::OpenAPI::toJsonValue(m_routing_profile_id));
    }
    if (m_hierarchy_group_id_isSet) {
        obj.insert(QString("HierarchyGroupId"), ::OpenAPI::toJsonValue(m_hierarchy_group_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateUser_request::getUsername() const {
    return m_username;
}
void OAICreateUser_request::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAICreateUser_request::is_username_Set() const{
    return m_username_isSet;
}

bool OAICreateUser_request::is_username_Valid() const{
    return m_username_isValid;
}

QString OAICreateUser_request::getPassword() const {
    return m_password;
}
void OAICreateUser_request::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICreateUser_request::is_password_Set() const{
    return m_password_isSet;
}

bool OAICreateUser_request::is_password_Valid() const{
    return m_password_isValid;
}

OAICreateUser_request_IdentityInfo OAICreateUser_request::getIdentityInfo() const {
    return m_identity_info;
}
void OAICreateUser_request::setIdentityInfo(const OAICreateUser_request_IdentityInfo &identity_info) {
    m_identity_info = identity_info;
    m_identity_info_isSet = true;
}

bool OAICreateUser_request::is_identity_info_Set() const{
    return m_identity_info_isSet;
}

bool OAICreateUser_request::is_identity_info_Valid() const{
    return m_identity_info_isValid;
}

OAICreateUser_request_PhoneConfig OAICreateUser_request::getPhoneConfig() const {
    return m_phone_config;
}
void OAICreateUser_request::setPhoneConfig(const OAICreateUser_request_PhoneConfig &phone_config) {
    m_phone_config = phone_config;
    m_phone_config_isSet = true;
}

bool OAICreateUser_request::is_phone_config_Set() const{
    return m_phone_config_isSet;
}

bool OAICreateUser_request::is_phone_config_Valid() const{
    return m_phone_config_isValid;
}

QString OAICreateUser_request::getDirectoryUserId() const {
    return m_directory_user_id;
}
void OAICreateUser_request::setDirectoryUserId(const QString &directory_user_id) {
    m_directory_user_id = directory_user_id;
    m_directory_user_id_isSet = true;
}

bool OAICreateUser_request::is_directory_user_id_Set() const{
    return m_directory_user_id_isSet;
}

bool OAICreateUser_request::is_directory_user_id_Valid() const{
    return m_directory_user_id_isValid;
}

QList<QString> OAICreateUser_request::getSecurityProfileIds() const {
    return m_security_profile_ids;
}
void OAICreateUser_request::setSecurityProfileIds(const QList<QString> &security_profile_ids) {
    m_security_profile_ids = security_profile_ids;
    m_security_profile_ids_isSet = true;
}

bool OAICreateUser_request::is_security_profile_ids_Set() const{
    return m_security_profile_ids_isSet;
}

bool OAICreateUser_request::is_security_profile_ids_Valid() const{
    return m_security_profile_ids_isValid;
}

QString OAICreateUser_request::getRoutingProfileId() const {
    return m_routing_profile_id;
}
void OAICreateUser_request::setRoutingProfileId(const QString &routing_profile_id) {
    m_routing_profile_id = routing_profile_id;
    m_routing_profile_id_isSet = true;
}

bool OAICreateUser_request::is_routing_profile_id_Set() const{
    return m_routing_profile_id_isSet;
}

bool OAICreateUser_request::is_routing_profile_id_Valid() const{
    return m_routing_profile_id_isValid;
}

QString OAICreateUser_request::getHierarchyGroupId() const {
    return m_hierarchy_group_id;
}
void OAICreateUser_request::setHierarchyGroupId(const QString &hierarchy_group_id) {
    m_hierarchy_group_id = hierarchy_group_id;
    m_hierarchy_group_id_isSet = true;
}

bool OAICreateUser_request::is_hierarchy_group_id_Set() const{
    return m_hierarchy_group_id_isSet;
}

bool OAICreateUser_request::is_hierarchy_group_id_Valid() const{
    return m_hierarchy_group_id_isValid;
}

QMap<QString, QString> OAICreateUser_request::getTags() const {
    return m_tags;
}
void OAICreateUser_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateUser_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateUser_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateUser_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_profile_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUser_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_username_isValid && m_phone_config_isValid && m_security_profile_ids_isValid && m_routing_profile_id_isValid && true;
}

} // namespace OpenAPI
