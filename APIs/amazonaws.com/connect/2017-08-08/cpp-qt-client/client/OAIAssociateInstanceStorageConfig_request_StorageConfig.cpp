/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateInstanceStorageConfig_request_StorageConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateInstanceStorageConfig_request_StorageConfig::OAIAssociateInstanceStorageConfig_request_StorageConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateInstanceStorageConfig_request_StorageConfig::OAIAssociateInstanceStorageConfig_request_StorageConfig() {
    this->initializeModel();
}

OAIAssociateInstanceStorageConfig_request_StorageConfig::~OAIAssociateInstanceStorageConfig_request_StorageConfig() {}

void OAIAssociateInstanceStorageConfig_request_StorageConfig::initializeModel() {

    m_association_id_isSet = false;
    m_association_id_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_s3_config_isSet = false;
    m_s3_config_isValid = false;

    m_kinesis_video_stream_config_isSet = false;
    m_kinesis_video_stream_config_isValid = false;

    m_kinesis_stream_config_isSet = false;
    m_kinesis_stream_config_isValid = false;

    m_kinesis_firehose_config_isSet = false;
    m_kinesis_firehose_config_isValid = false;
}

void OAIAssociateInstanceStorageConfig_request_StorageConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateInstanceStorageConfig_request_StorageConfig::fromJsonObject(QJsonObject json) {

    m_association_id_isValid = ::OpenAPI::fromJsonValue(m_association_id, json[QString("AssociationId")]);
    m_association_id_isSet = !json[QString("AssociationId")].isNull() && m_association_id_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_s3_config_isValid = ::OpenAPI::fromJsonValue(m_s3_config, json[QString("S3Config")]);
    m_s3_config_isSet = !json[QString("S3Config")].isNull() && m_s3_config_isValid;

    m_kinesis_video_stream_config_isValid = ::OpenAPI::fromJsonValue(m_kinesis_video_stream_config, json[QString("KinesisVideoStreamConfig")]);
    m_kinesis_video_stream_config_isSet = !json[QString("KinesisVideoStreamConfig")].isNull() && m_kinesis_video_stream_config_isValid;

    m_kinesis_stream_config_isValid = ::OpenAPI::fromJsonValue(m_kinesis_stream_config, json[QString("KinesisStreamConfig")]);
    m_kinesis_stream_config_isSet = !json[QString("KinesisStreamConfig")].isNull() && m_kinesis_stream_config_isValid;

    m_kinesis_firehose_config_isValid = ::OpenAPI::fromJsonValue(m_kinesis_firehose_config, json[QString("KinesisFirehoseConfig")]);
    m_kinesis_firehose_config_isSet = !json[QString("KinesisFirehoseConfig")].isNull() && m_kinesis_firehose_config_isValid;
}

QString OAIAssociateInstanceStorageConfig_request_StorageConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateInstanceStorageConfig_request_StorageConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_association_id_isSet) {
        obj.insert(QString("AssociationId"), ::OpenAPI::toJsonValue(m_association_id));
    }
    if (m_storage_type.isSet()) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_s3_config.isSet()) {
        obj.insert(QString("S3Config"), ::OpenAPI::toJsonValue(m_s3_config));
    }
    if (m_kinesis_video_stream_config.isSet()) {
        obj.insert(QString("KinesisVideoStreamConfig"), ::OpenAPI::toJsonValue(m_kinesis_video_stream_config));
    }
    if (m_kinesis_stream_config.isSet()) {
        obj.insert(QString("KinesisStreamConfig"), ::OpenAPI::toJsonValue(m_kinesis_stream_config));
    }
    if (m_kinesis_firehose_config.isSet()) {
        obj.insert(QString("KinesisFirehoseConfig"), ::OpenAPI::toJsonValue(m_kinesis_firehose_config));
    }
    return obj;
}

QString OAIAssociateInstanceStorageConfig_request_StorageConfig::getAssociationId() const {
    return m_association_id;
}
void OAIAssociateInstanceStorageConfig_request_StorageConfig::setAssociationId(const QString &association_id) {
    m_association_id = association_id;
    m_association_id_isSet = true;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_association_id_Set() const{
    return m_association_id_isSet;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_association_id_Valid() const{
    return m_association_id_isValid;
}

OAIStorageType OAIAssociateInstanceStorageConfig_request_StorageConfig::getStorageType() const {
    return m_storage_type;
}
void OAIAssociateInstanceStorageConfig_request_StorageConfig::setStorageType(const OAIStorageType &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

OAIAssociateInstanceStorageConfig_request_StorageConfig_S3Config OAIAssociateInstanceStorageConfig_request_StorageConfig::getS3Config() const {
    return m_s3_config;
}
void OAIAssociateInstanceStorageConfig_request_StorageConfig::setS3Config(const OAIAssociateInstanceStorageConfig_request_StorageConfig_S3Config &s3_config) {
    m_s3_config = s3_config;
    m_s3_config_isSet = true;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_s3_config_Set() const{
    return m_s3_config_isSet;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_s3_config_Valid() const{
    return m_s3_config_isValid;
}

OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisVideoStreamConfig OAIAssociateInstanceStorageConfig_request_StorageConfig::getKinesisVideoStreamConfig() const {
    return m_kinesis_video_stream_config;
}
void OAIAssociateInstanceStorageConfig_request_StorageConfig::setKinesisVideoStreamConfig(const OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisVideoStreamConfig &kinesis_video_stream_config) {
    m_kinesis_video_stream_config = kinesis_video_stream_config;
    m_kinesis_video_stream_config_isSet = true;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_kinesis_video_stream_config_Set() const{
    return m_kinesis_video_stream_config_isSet;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_kinesis_video_stream_config_Valid() const{
    return m_kinesis_video_stream_config_isValid;
}

OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig OAIAssociateInstanceStorageConfig_request_StorageConfig::getKinesisStreamConfig() const {
    return m_kinesis_stream_config;
}
void OAIAssociateInstanceStorageConfig_request_StorageConfig::setKinesisStreamConfig(const OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig &kinesis_stream_config) {
    m_kinesis_stream_config = kinesis_stream_config;
    m_kinesis_stream_config_isSet = true;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_kinesis_stream_config_Set() const{
    return m_kinesis_stream_config_isSet;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_kinesis_stream_config_Valid() const{
    return m_kinesis_stream_config_isValid;
}

OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisFirehoseConfig OAIAssociateInstanceStorageConfig_request_StorageConfig::getKinesisFirehoseConfig() const {
    return m_kinesis_firehose_config;
}
void OAIAssociateInstanceStorageConfig_request_StorageConfig::setKinesisFirehoseConfig(const OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisFirehoseConfig &kinesis_firehose_config) {
    m_kinesis_firehose_config = kinesis_firehose_config;
    m_kinesis_firehose_config_isSet = true;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_kinesis_firehose_config_Set() const{
    return m_kinesis_firehose_config_isSet;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::is_kinesis_firehose_config_Valid() const{
    return m_kinesis_firehose_config_isValid;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_video_stream_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_stream_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_firehose_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
