/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchAvailablePhoneNumbers_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchAvailablePhoneNumbers_request::OAISearchAvailablePhoneNumbers_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchAvailablePhoneNumbers_request::OAISearchAvailablePhoneNumbers_request() {
    this->initializeModel();
}

OAISearchAvailablePhoneNumbers_request::~OAISearchAvailablePhoneNumbers_request() {}

void OAISearchAvailablePhoneNumbers_request::initializeModel() {

    m_target_arn_isSet = false;
    m_target_arn_isValid = false;

    m_phone_number_country_code_isSet = false;
    m_phone_number_country_code_isValid = false;

    m_phone_number_type_isSet = false;
    m_phone_number_type_isValid = false;

    m_phone_number_prefix_isSet = false;
    m_phone_number_prefix_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAISearchAvailablePhoneNumbers_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchAvailablePhoneNumbers_request::fromJsonObject(QJsonObject json) {

    m_target_arn_isValid = ::OpenAPI::fromJsonValue(m_target_arn, json[QString("TargetArn")]);
    m_target_arn_isSet = !json[QString("TargetArn")].isNull() && m_target_arn_isValid;

    m_phone_number_country_code_isValid = ::OpenAPI::fromJsonValue(m_phone_number_country_code, json[QString("PhoneNumberCountryCode")]);
    m_phone_number_country_code_isSet = !json[QString("PhoneNumberCountryCode")].isNull() && m_phone_number_country_code_isValid;

    m_phone_number_type_isValid = ::OpenAPI::fromJsonValue(m_phone_number_type, json[QString("PhoneNumberType")]);
    m_phone_number_type_isSet = !json[QString("PhoneNumberType")].isNull() && m_phone_number_type_isValid;

    m_phone_number_prefix_isValid = ::OpenAPI::fromJsonValue(m_phone_number_prefix, json[QString("PhoneNumberPrefix")]);
    m_phone_number_prefix_isSet = !json[QString("PhoneNumberPrefix")].isNull() && m_phone_number_prefix_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAISearchAvailablePhoneNumbers_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchAvailablePhoneNumbers_request::asJsonObject() const {
    QJsonObject obj;
    if (m_target_arn_isSet) {
        obj.insert(QString("TargetArn"), ::OpenAPI::toJsonValue(m_target_arn));
    }
    if (m_phone_number_country_code_isSet) {
        obj.insert(QString("PhoneNumberCountryCode"), ::OpenAPI::toJsonValue(m_phone_number_country_code));
    }
    if (m_phone_number_type_isSet) {
        obj.insert(QString("PhoneNumberType"), ::OpenAPI::toJsonValue(m_phone_number_type));
    }
    if (m_phone_number_prefix_isSet) {
        obj.insert(QString("PhoneNumberPrefix"), ::OpenAPI::toJsonValue(m_phone_number_prefix));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAISearchAvailablePhoneNumbers_request::getTargetArn() const {
    return m_target_arn;
}
void OAISearchAvailablePhoneNumbers_request::setTargetArn(const QString &target_arn) {
    m_target_arn = target_arn;
    m_target_arn_isSet = true;
}

bool OAISearchAvailablePhoneNumbers_request::is_target_arn_Set() const{
    return m_target_arn_isSet;
}

bool OAISearchAvailablePhoneNumbers_request::is_target_arn_Valid() const{
    return m_target_arn_isValid;
}

QString OAISearchAvailablePhoneNumbers_request::getPhoneNumberCountryCode() const {
    return m_phone_number_country_code;
}
void OAISearchAvailablePhoneNumbers_request::setPhoneNumberCountryCode(const QString &phone_number_country_code) {
    m_phone_number_country_code = phone_number_country_code;
    m_phone_number_country_code_isSet = true;
}

bool OAISearchAvailablePhoneNumbers_request::is_phone_number_country_code_Set() const{
    return m_phone_number_country_code_isSet;
}

bool OAISearchAvailablePhoneNumbers_request::is_phone_number_country_code_Valid() const{
    return m_phone_number_country_code_isValid;
}

QString OAISearchAvailablePhoneNumbers_request::getPhoneNumberType() const {
    return m_phone_number_type;
}
void OAISearchAvailablePhoneNumbers_request::setPhoneNumberType(const QString &phone_number_type) {
    m_phone_number_type = phone_number_type;
    m_phone_number_type_isSet = true;
}

bool OAISearchAvailablePhoneNumbers_request::is_phone_number_type_Set() const{
    return m_phone_number_type_isSet;
}

bool OAISearchAvailablePhoneNumbers_request::is_phone_number_type_Valid() const{
    return m_phone_number_type_isValid;
}

QString OAISearchAvailablePhoneNumbers_request::getPhoneNumberPrefix() const {
    return m_phone_number_prefix;
}
void OAISearchAvailablePhoneNumbers_request::setPhoneNumberPrefix(const QString &phone_number_prefix) {
    m_phone_number_prefix = phone_number_prefix;
    m_phone_number_prefix_isSet = true;
}

bool OAISearchAvailablePhoneNumbers_request::is_phone_number_prefix_Set() const{
    return m_phone_number_prefix_isSet;
}

bool OAISearchAvailablePhoneNumbers_request::is_phone_number_prefix_Valid() const{
    return m_phone_number_prefix_isValid;
}

qint32 OAISearchAvailablePhoneNumbers_request::getMaxResults() const {
    return m_max_results;
}
void OAISearchAvailablePhoneNumbers_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchAvailablePhoneNumbers_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchAvailablePhoneNumbers_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAISearchAvailablePhoneNumbers_request::getNextToken() const {
    return m_next_token;
}
void OAISearchAvailablePhoneNumbers_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchAvailablePhoneNumbers_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchAvailablePhoneNumbers_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAISearchAvailablePhoneNumbers_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchAvailablePhoneNumbers_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_arn_isValid && m_phone_number_country_code_isValid && m_phone_number_type_isValid && true;
}

} // namespace OpenAPI
