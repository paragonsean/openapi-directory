/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVocabularyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVocabularyRequest::OAICreateVocabularyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVocabularyRequest::OAICreateVocabularyRequest() {
    this->initializeModel();
}

OAICreateVocabularyRequest::~OAICreateVocabularyRequest() {}

void OAICreateVocabularyRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_vocabulary_name_isSet = false;
    m_vocabulary_name_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateVocabularyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVocabularyRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_vocabulary_name_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_name, json[QString("VocabularyName")]);
    m_vocabulary_name_isSet = !json[QString("VocabularyName")].isNull() && m_vocabulary_name_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateVocabularyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVocabularyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_vocabulary_name_isSet) {
        obj.insert(QString("VocabularyName"), ::OpenAPI::toJsonValue(m_vocabulary_name));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateVocabularyRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateVocabularyRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateVocabularyRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateVocabularyRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateVocabularyRequest::getVocabularyName() const {
    return m_vocabulary_name;
}
void OAICreateVocabularyRequest::setVocabularyName(const QString &vocabulary_name) {
    m_vocabulary_name = vocabulary_name;
    m_vocabulary_name_isSet = true;
}

bool OAICreateVocabularyRequest::is_vocabulary_name_Set() const{
    return m_vocabulary_name_isSet;
}

bool OAICreateVocabularyRequest::is_vocabulary_name_Valid() const{
    return m_vocabulary_name_isValid;
}

OAIVocabularyLanguageCode OAICreateVocabularyRequest::getLanguageCode() const {
    return m_language_code;
}
void OAICreateVocabularyRequest::setLanguageCode(const OAIVocabularyLanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAICreateVocabularyRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAICreateVocabularyRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAICreateVocabularyRequest::getContent() const {
    return m_content;
}
void OAICreateVocabularyRequest::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICreateVocabularyRequest::is_content_Set() const{
    return m_content_isSet;
}

bool OAICreateVocabularyRequest::is_content_Valid() const{
    return m_content_isValid;
}

QMap OAICreateVocabularyRequest::getTags() const {
    return m_tags;
}
void OAICreateVocabularyRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVocabularyRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVocabularyRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateVocabularyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVocabularyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vocabulary_name_isValid && m_language_code_isValid && m_content_isValid && true;
}

} // namespace OpenAPI
