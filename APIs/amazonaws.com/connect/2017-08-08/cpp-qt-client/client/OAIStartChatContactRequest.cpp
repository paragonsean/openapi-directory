/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartChatContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartChatContactRequest::OAIStartChatContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartChatContactRequest::OAIStartChatContactRequest() {
    this->initializeModel();
}

OAIStartChatContactRequest::~OAIStartChatContactRequest() {}

void OAIStartChatContactRequest::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_contact_flow_id_isSet = false;
    m_contact_flow_id_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_participant_details_isSet = false;
    m_participant_details_isValid = false;

    m_initial_message_isSet = false;
    m_initial_message_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_chat_duration_in_minutes_isSet = false;
    m_chat_duration_in_minutes_isValid = false;

    m_supported_messaging_content_types_isSet = false;
    m_supported_messaging_content_types_isValid = false;

    m_persistent_chat_isSet = false;
    m_persistent_chat_isValid = false;

    m_related_contact_id_isSet = false;
    m_related_contact_id_isValid = false;
}

void OAIStartChatContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartChatContactRequest::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_contact_flow_id_isValid = ::OpenAPI::fromJsonValue(m_contact_flow_id, json[QString("ContactFlowId")]);
    m_contact_flow_id_isSet = !json[QString("ContactFlowId")].isNull() && m_contact_flow_id_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_participant_details_isValid = ::OpenAPI::fromJsonValue(m_participant_details, json[QString("ParticipantDetails")]);
    m_participant_details_isSet = !json[QString("ParticipantDetails")].isNull() && m_participant_details_isValid;

    m_initial_message_isValid = ::OpenAPI::fromJsonValue(m_initial_message, json[QString("InitialMessage")]);
    m_initial_message_isSet = !json[QString("InitialMessage")].isNull() && m_initial_message_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_chat_duration_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_chat_duration_in_minutes, json[QString("ChatDurationInMinutes")]);
    m_chat_duration_in_minutes_isSet = !json[QString("ChatDurationInMinutes")].isNull() && m_chat_duration_in_minutes_isValid;

    m_supported_messaging_content_types_isValid = ::OpenAPI::fromJsonValue(m_supported_messaging_content_types, json[QString("SupportedMessagingContentTypes")]);
    m_supported_messaging_content_types_isSet = !json[QString("SupportedMessagingContentTypes")].isNull() && m_supported_messaging_content_types_isValid;

    m_persistent_chat_isValid = ::OpenAPI::fromJsonValue(m_persistent_chat, json[QString("PersistentChat")]);
    m_persistent_chat_isSet = !json[QString("PersistentChat")].isNull() && m_persistent_chat_isValid;

    m_related_contact_id_isValid = ::OpenAPI::fromJsonValue(m_related_contact_id, json[QString("RelatedContactId")]);
    m_related_contact_id_isSet = !json[QString("RelatedContactId")].isNull() && m_related_contact_id_isValid;
}

QString OAIStartChatContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartChatContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_contact_flow_id_isSet) {
        obj.insert(QString("ContactFlowId"), ::OpenAPI::toJsonValue(m_contact_flow_id));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_participant_details.isSet()) {
        obj.insert(QString("ParticipantDetails"), ::OpenAPI::toJsonValue(m_participant_details));
    }
    if (m_initial_message.isSet()) {
        obj.insert(QString("InitialMessage"), ::OpenAPI::toJsonValue(m_initial_message));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_chat_duration_in_minutes_isSet) {
        obj.insert(QString("ChatDurationInMinutes"), ::OpenAPI::toJsonValue(m_chat_duration_in_minutes));
    }
    if (m_supported_messaging_content_types.isSet()) {
        obj.insert(QString("SupportedMessagingContentTypes"), ::OpenAPI::toJsonValue(m_supported_messaging_content_types));
    }
    if (m_persistent_chat.isSet()) {
        obj.insert(QString("PersistentChat"), ::OpenAPI::toJsonValue(m_persistent_chat));
    }
    if (m_related_contact_id_isSet) {
        obj.insert(QString("RelatedContactId"), ::OpenAPI::toJsonValue(m_related_contact_id));
    }
    return obj;
}

QString OAIStartChatContactRequest::getInstanceId() const {
    return m_instance_id;
}
void OAIStartChatContactRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIStartChatContactRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIStartChatContactRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIStartChatContactRequest::getContactFlowId() const {
    return m_contact_flow_id;
}
void OAIStartChatContactRequest::setContactFlowId(const QString &contact_flow_id) {
    m_contact_flow_id = contact_flow_id;
    m_contact_flow_id_isSet = true;
}

bool OAIStartChatContactRequest::is_contact_flow_id_Set() const{
    return m_contact_flow_id_isSet;
}

bool OAIStartChatContactRequest::is_contact_flow_id_Valid() const{
    return m_contact_flow_id_isValid;
}

QMap OAIStartChatContactRequest::getAttributes() const {
    return m_attributes;
}
void OAIStartChatContactRequest::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIStartChatContactRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIStartChatContactRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIStartChatContactRequest_ParticipantDetails OAIStartChatContactRequest::getParticipantDetails() const {
    return m_participant_details;
}
void OAIStartChatContactRequest::setParticipantDetails(const OAIStartChatContactRequest_ParticipantDetails &participant_details) {
    m_participant_details = participant_details;
    m_participant_details_isSet = true;
}

bool OAIStartChatContactRequest::is_participant_details_Set() const{
    return m_participant_details_isSet;
}

bool OAIStartChatContactRequest::is_participant_details_Valid() const{
    return m_participant_details_isValid;
}

OAIStartChatContactRequest_InitialMessage OAIStartChatContactRequest::getInitialMessage() const {
    return m_initial_message;
}
void OAIStartChatContactRequest::setInitialMessage(const OAIStartChatContactRequest_InitialMessage &initial_message) {
    m_initial_message = initial_message;
    m_initial_message_isSet = true;
}

bool OAIStartChatContactRequest::is_initial_message_Set() const{
    return m_initial_message_isSet;
}

bool OAIStartChatContactRequest::is_initial_message_Valid() const{
    return m_initial_message_isValid;
}

QString OAIStartChatContactRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartChatContactRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartChatContactRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartChatContactRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

qint32 OAIStartChatContactRequest::getChatDurationInMinutes() const {
    return m_chat_duration_in_minutes;
}
void OAIStartChatContactRequest::setChatDurationInMinutes(const qint32 &chat_duration_in_minutes) {
    m_chat_duration_in_minutes = chat_duration_in_minutes;
    m_chat_duration_in_minutes_isSet = true;
}

bool OAIStartChatContactRequest::is_chat_duration_in_minutes_Set() const{
    return m_chat_duration_in_minutes_isSet;
}

bool OAIStartChatContactRequest::is_chat_duration_in_minutes_Valid() const{
    return m_chat_duration_in_minutes_isValid;
}

QList OAIStartChatContactRequest::getSupportedMessagingContentTypes() const {
    return m_supported_messaging_content_types;
}
void OAIStartChatContactRequest::setSupportedMessagingContentTypes(const QList &supported_messaging_content_types) {
    m_supported_messaging_content_types = supported_messaging_content_types;
    m_supported_messaging_content_types_isSet = true;
}

bool OAIStartChatContactRequest::is_supported_messaging_content_types_Set() const{
    return m_supported_messaging_content_types_isSet;
}

bool OAIStartChatContactRequest::is_supported_messaging_content_types_Valid() const{
    return m_supported_messaging_content_types_isValid;
}

OAIStartChatContactRequest_PersistentChat OAIStartChatContactRequest::getPersistentChat() const {
    return m_persistent_chat;
}
void OAIStartChatContactRequest::setPersistentChat(const OAIStartChatContactRequest_PersistentChat &persistent_chat) {
    m_persistent_chat = persistent_chat;
    m_persistent_chat_isSet = true;
}

bool OAIStartChatContactRequest::is_persistent_chat_Set() const{
    return m_persistent_chat_isSet;
}

bool OAIStartChatContactRequest::is_persistent_chat_Valid() const{
    return m_persistent_chat_isValid;
}

QString OAIStartChatContactRequest::getRelatedContactId() const {
    return m_related_contact_id;
}
void OAIStartChatContactRequest::setRelatedContactId(const QString &related_contact_id) {
    m_related_contact_id = related_contact_id;
    m_related_contact_id_isSet = true;
}

bool OAIStartChatContactRequest::is_related_contact_id_Set() const{
    return m_related_contact_id_isSet;
}

bool OAIStartChatContactRequest::is_related_contact_id_Valid() const{
    return m_related_contact_id_isValid;
}

bool OAIStartChatContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_flow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_duration_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_messaging_content_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_chat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartChatContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_contact_flow_id_isValid && m_participant_details_isValid && true;
}

} // namespace OpenAPI
