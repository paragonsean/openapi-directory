/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchVocabularies_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchVocabularies_request::OAISearchVocabularies_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchVocabularies_request::OAISearchVocabularies_request() {
    this->initializeModel();
}

OAISearchVocabularies_request::~OAISearchVocabularies_request() {}

void OAISearchVocabularies_request::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_name_starts_with_isSet = false;
    m_name_starts_with_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;
}

void OAISearchVocabularies_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchVocabularies_request::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_name_starts_with_isValid = ::OpenAPI::fromJsonValue(m_name_starts_with, json[QString("NameStartsWith")]);
    m_name_starts_with_isSet = !json[QString("NameStartsWith")].isNull() && m_name_starts_with_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;
}

QString OAISearchVocabularies_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchVocabularies_request::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_name_starts_with_isSet) {
        obj.insert(QString("NameStartsWith"), ::OpenAPI::toJsonValue(m_name_starts_with));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    return obj;
}

qint32 OAISearchVocabularies_request::getMaxResults() const {
    return m_max_results;
}
void OAISearchVocabularies_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchVocabularies_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchVocabularies_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAISearchVocabularies_request::getNextToken() const {
    return m_next_token;
}
void OAISearchVocabularies_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchVocabularies_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchVocabularies_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAISearchVocabularies_request::getState() const {
    return m_state;
}
void OAISearchVocabularies_request::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISearchVocabularies_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAISearchVocabularies_request::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISearchVocabularies_request::getNameStartsWith() const {
    return m_name_starts_with;
}
void OAISearchVocabularies_request::setNameStartsWith(const QString &name_starts_with) {
    m_name_starts_with = name_starts_with;
    m_name_starts_with_isSet = true;
}

bool OAISearchVocabularies_request::is_name_starts_with_Set() const{
    return m_name_starts_with_isSet;
}

bool OAISearchVocabularies_request::is_name_starts_with_Valid() const{
    return m_name_starts_with_isValid;
}

QString OAISearchVocabularies_request::getLanguageCode() const {
    return m_language_code;
}
void OAISearchVocabularies_request::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAISearchVocabularies_request::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAISearchVocabularies_request::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAISearchVocabularies_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_starts_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchVocabularies_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
