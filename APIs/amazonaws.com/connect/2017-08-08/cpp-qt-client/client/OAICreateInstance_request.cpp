/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInstance_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInstance_request::OAICreateInstance_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInstance_request::OAICreateInstance_request() {
    this->initializeModel();
}

OAICreateInstance_request::~OAICreateInstance_request() {}

void OAICreateInstance_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_identity_management_type_isSet = false;
    m_identity_management_type_isValid = false;

    m_instance_alias_isSet = false;
    m_instance_alias_isValid = false;

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;

    m_inbound_calls_enabled_isSet = false;
    m_inbound_calls_enabled_isValid = false;

    m_outbound_calls_enabled_isSet = false;
    m_outbound_calls_enabled_isValid = false;
}

void OAICreateInstance_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInstance_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_identity_management_type_isValid = ::OpenAPI::fromJsonValue(m_identity_management_type, json[QString("IdentityManagementType")]);
    m_identity_management_type_isSet = !json[QString("IdentityManagementType")].isNull() && m_identity_management_type_isValid;

    m_instance_alias_isValid = ::OpenAPI::fromJsonValue(m_instance_alias, json[QString("InstanceAlias")]);
    m_instance_alias_isSet = !json[QString("InstanceAlias")].isNull() && m_instance_alias_isValid;

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(m_directory_id, json[QString("DirectoryId")]);
    m_directory_id_isSet = !json[QString("DirectoryId")].isNull() && m_directory_id_isValid;

    m_inbound_calls_enabled_isValid = ::OpenAPI::fromJsonValue(m_inbound_calls_enabled, json[QString("InboundCallsEnabled")]);
    m_inbound_calls_enabled_isSet = !json[QString("InboundCallsEnabled")].isNull() && m_inbound_calls_enabled_isValid;

    m_outbound_calls_enabled_isValid = ::OpenAPI::fromJsonValue(m_outbound_calls_enabled, json[QString("OutboundCallsEnabled")]);
    m_outbound_calls_enabled_isSet = !json[QString("OutboundCallsEnabled")].isNull() && m_outbound_calls_enabled_isValid;
}

QString OAICreateInstance_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInstance_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_identity_management_type_isSet) {
        obj.insert(QString("IdentityManagementType"), ::OpenAPI::toJsonValue(m_identity_management_type));
    }
    if (m_instance_alias_isSet) {
        obj.insert(QString("InstanceAlias"), ::OpenAPI::toJsonValue(m_instance_alias));
    }
    if (m_directory_id_isSet) {
        obj.insert(QString("DirectoryId"), ::OpenAPI::toJsonValue(m_directory_id));
    }
    if (m_inbound_calls_enabled_isSet) {
        obj.insert(QString("InboundCallsEnabled"), ::OpenAPI::toJsonValue(m_inbound_calls_enabled));
    }
    if (m_outbound_calls_enabled_isSet) {
        obj.insert(QString("OutboundCallsEnabled"), ::OpenAPI::toJsonValue(m_outbound_calls_enabled));
    }
    return obj;
}

QString OAICreateInstance_request::getClientToken() const {
    return m_client_token;
}
void OAICreateInstance_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateInstance_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateInstance_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateInstance_request::getIdentityManagementType() const {
    return m_identity_management_type;
}
void OAICreateInstance_request::setIdentityManagementType(const QString &identity_management_type) {
    m_identity_management_type = identity_management_type;
    m_identity_management_type_isSet = true;
}

bool OAICreateInstance_request::is_identity_management_type_Set() const{
    return m_identity_management_type_isSet;
}

bool OAICreateInstance_request::is_identity_management_type_Valid() const{
    return m_identity_management_type_isValid;
}

QString OAICreateInstance_request::getInstanceAlias() const {
    return m_instance_alias;
}
void OAICreateInstance_request::setInstanceAlias(const QString &instance_alias) {
    m_instance_alias = instance_alias;
    m_instance_alias_isSet = true;
}

bool OAICreateInstance_request::is_instance_alias_Set() const{
    return m_instance_alias_isSet;
}

bool OAICreateInstance_request::is_instance_alias_Valid() const{
    return m_instance_alias_isValid;
}

QString OAICreateInstance_request::getDirectoryId() const {
    return m_directory_id;
}
void OAICreateInstance_request::setDirectoryId(const QString &directory_id) {
    m_directory_id = directory_id;
    m_directory_id_isSet = true;
}

bool OAICreateInstance_request::is_directory_id_Set() const{
    return m_directory_id_isSet;
}

bool OAICreateInstance_request::is_directory_id_Valid() const{
    return m_directory_id_isValid;
}

bool OAICreateInstance_request::isInboundCallsEnabled() const {
    return m_inbound_calls_enabled;
}
void OAICreateInstance_request::setInboundCallsEnabled(const bool &inbound_calls_enabled) {
    m_inbound_calls_enabled = inbound_calls_enabled;
    m_inbound_calls_enabled_isSet = true;
}

bool OAICreateInstance_request::is_inbound_calls_enabled_Set() const{
    return m_inbound_calls_enabled_isSet;
}

bool OAICreateInstance_request::is_inbound_calls_enabled_Valid() const{
    return m_inbound_calls_enabled_isValid;
}

bool OAICreateInstance_request::isOutboundCallsEnabled() const {
    return m_outbound_calls_enabled;
}
void OAICreateInstance_request::setOutboundCallsEnabled(const bool &outbound_calls_enabled) {
    m_outbound_calls_enabled = outbound_calls_enabled;
    m_outbound_calls_enabled_isSet = true;
}

bool OAICreateInstance_request::is_outbound_calls_enabled_Set() const{
    return m_outbound_calls_enabled_isSet;
}

bool OAICreateInstance_request::is_outbound_calls_enabled_Valid() const{
    return m_outbound_calls_enabled_isValid;
}

bool OAICreateInstance_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_calls_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_calls_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInstance_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_management_type_isValid && m_inbound_calls_enabled_isValid && m_outbound_calls_enabled_isValid && true;
}

} // namespace OpenAPI
