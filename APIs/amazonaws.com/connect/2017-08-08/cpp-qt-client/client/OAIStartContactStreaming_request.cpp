/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartContactStreaming_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartContactStreaming_request::OAIStartContactStreaming_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartContactStreaming_request::OAIStartContactStreaming_request() {
    this->initializeModel();
}

OAIStartContactStreaming_request::~OAIStartContactStreaming_request() {}

void OAIStartContactStreaming_request::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_chat_streaming_configuration_isSet = false;
    m_chat_streaming_configuration_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAIStartContactStreaming_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartContactStreaming_request::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_chat_streaming_configuration_isValid = ::OpenAPI::fromJsonValue(m_chat_streaming_configuration, json[QString("ChatStreamingConfiguration")]);
    m_chat_streaming_configuration_isSet = !json[QString("ChatStreamingConfiguration")].isNull() && m_chat_streaming_configuration_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAIStartContactStreaming_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartContactStreaming_request::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_chat_streaming_configuration.isSet()) {
        obj.insert(QString("ChatStreamingConfiguration"), ::OpenAPI::toJsonValue(m_chat_streaming_configuration));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAIStartContactStreaming_request::getInstanceId() const {
    return m_instance_id;
}
void OAIStartContactStreaming_request::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIStartContactStreaming_request::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIStartContactStreaming_request::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIStartContactStreaming_request::getContactId() const {
    return m_contact_id;
}
void OAIStartContactStreaming_request::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIStartContactStreaming_request::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIStartContactStreaming_request::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

OAIStartContactStreaming_request_ChatStreamingConfiguration OAIStartContactStreaming_request::getChatStreamingConfiguration() const {
    return m_chat_streaming_configuration;
}
void OAIStartContactStreaming_request::setChatStreamingConfiguration(const OAIStartContactStreaming_request_ChatStreamingConfiguration &chat_streaming_configuration) {
    m_chat_streaming_configuration = chat_streaming_configuration;
    m_chat_streaming_configuration_isSet = true;
}

bool OAIStartContactStreaming_request::is_chat_streaming_configuration_Set() const{
    return m_chat_streaming_configuration_isSet;
}

bool OAIStartContactStreaming_request::is_chat_streaming_configuration_Valid() const{
    return m_chat_streaming_configuration_isValid;
}

QString OAIStartContactStreaming_request::getClientToken() const {
    return m_client_token;
}
void OAIStartContactStreaming_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartContactStreaming_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartContactStreaming_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIStartContactStreaming_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_streaming_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartContactStreaming_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_contact_id_isValid && m_chat_streaming_configuration_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
