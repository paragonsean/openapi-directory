/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIntegrationAssociation_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIntegrationAssociation_request::OAICreateIntegrationAssociation_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIntegrationAssociation_request::OAICreateIntegrationAssociation_request() {
    this->initializeModel();
}

OAICreateIntegrationAssociation_request::~OAICreateIntegrationAssociation_request() {}

void OAICreateIntegrationAssociation_request::initializeModel() {

    m_integration_type_isSet = false;
    m_integration_type_isValid = false;

    m_integration_arn_isSet = false;
    m_integration_arn_isValid = false;

    m_source_application_url_isSet = false;
    m_source_application_url_isValid = false;

    m_source_application_name_isSet = false;
    m_source_application_name_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateIntegrationAssociation_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIntegrationAssociation_request::fromJsonObject(QJsonObject json) {

    m_integration_type_isValid = ::OpenAPI::fromJsonValue(m_integration_type, json[QString("IntegrationType")]);
    m_integration_type_isSet = !json[QString("IntegrationType")].isNull() && m_integration_type_isValid;

    m_integration_arn_isValid = ::OpenAPI::fromJsonValue(m_integration_arn, json[QString("IntegrationArn")]);
    m_integration_arn_isSet = !json[QString("IntegrationArn")].isNull() && m_integration_arn_isValid;

    m_source_application_url_isValid = ::OpenAPI::fromJsonValue(m_source_application_url, json[QString("SourceApplicationUrl")]);
    m_source_application_url_isSet = !json[QString("SourceApplicationUrl")].isNull() && m_source_application_url_isValid;

    m_source_application_name_isValid = ::OpenAPI::fromJsonValue(m_source_application_name, json[QString("SourceApplicationName")]);
    m_source_application_name_isSet = !json[QString("SourceApplicationName")].isNull() && m_source_application_name_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateIntegrationAssociation_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIntegrationAssociation_request::asJsonObject() const {
    QJsonObject obj;
    if (m_integration_type_isSet) {
        obj.insert(QString("IntegrationType"), ::OpenAPI::toJsonValue(m_integration_type));
    }
    if (m_integration_arn_isSet) {
        obj.insert(QString("IntegrationArn"), ::OpenAPI::toJsonValue(m_integration_arn));
    }
    if (m_source_application_url_isSet) {
        obj.insert(QString("SourceApplicationUrl"), ::OpenAPI::toJsonValue(m_source_application_url));
    }
    if (m_source_application_name_isSet) {
        obj.insert(QString("SourceApplicationName"), ::OpenAPI::toJsonValue(m_source_application_name));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateIntegrationAssociation_request::getIntegrationType() const {
    return m_integration_type;
}
void OAICreateIntegrationAssociation_request::setIntegrationType(const QString &integration_type) {
    m_integration_type = integration_type;
    m_integration_type_isSet = true;
}

bool OAICreateIntegrationAssociation_request::is_integration_type_Set() const{
    return m_integration_type_isSet;
}

bool OAICreateIntegrationAssociation_request::is_integration_type_Valid() const{
    return m_integration_type_isValid;
}

QString OAICreateIntegrationAssociation_request::getIntegrationArn() const {
    return m_integration_arn;
}
void OAICreateIntegrationAssociation_request::setIntegrationArn(const QString &integration_arn) {
    m_integration_arn = integration_arn;
    m_integration_arn_isSet = true;
}

bool OAICreateIntegrationAssociation_request::is_integration_arn_Set() const{
    return m_integration_arn_isSet;
}

bool OAICreateIntegrationAssociation_request::is_integration_arn_Valid() const{
    return m_integration_arn_isValid;
}

QString OAICreateIntegrationAssociation_request::getSourceApplicationUrl() const {
    return m_source_application_url;
}
void OAICreateIntegrationAssociation_request::setSourceApplicationUrl(const QString &source_application_url) {
    m_source_application_url = source_application_url;
    m_source_application_url_isSet = true;
}

bool OAICreateIntegrationAssociation_request::is_source_application_url_Set() const{
    return m_source_application_url_isSet;
}

bool OAICreateIntegrationAssociation_request::is_source_application_url_Valid() const{
    return m_source_application_url_isValid;
}

QString OAICreateIntegrationAssociation_request::getSourceApplicationName() const {
    return m_source_application_name;
}
void OAICreateIntegrationAssociation_request::setSourceApplicationName(const QString &source_application_name) {
    m_source_application_name = source_application_name;
    m_source_application_name_isSet = true;
}

bool OAICreateIntegrationAssociation_request::is_source_application_name_Set() const{
    return m_source_application_name_isSet;
}

bool OAICreateIntegrationAssociation_request::is_source_application_name_Valid() const{
    return m_source_application_name_isValid;
}

QString OAICreateIntegrationAssociation_request::getSourceType() const {
    return m_source_type;
}
void OAICreateIntegrationAssociation_request::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAICreateIntegrationAssociation_request::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAICreateIntegrationAssociation_request::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QMap<QString, QString> OAICreateIntegrationAssociation_request::getTags() const {
    return m_tags;
}
void OAICreateIntegrationAssociation_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateIntegrationAssociation_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateIntegrationAssociation_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateIntegrationAssociation_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_integration_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_application_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIntegrationAssociation_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_integration_type_isValid && m_integration_arn_isValid && true;
}

} // namespace OpenAPI
