/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig() {
    this->initializeModel();
}

OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::~OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig() {}

void OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::initializeModel() {

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;
}

void OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::fromJsonObject(QJsonObject json) {

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamArn")]);
    m_stream_arn_isSet = !json[QString("StreamArn")].isNull() && m_stream_arn_isValid;
}

QString OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamArn"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    return obj;
}

QString OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::getStreamArn() const {
    return m_stream_arn;
}
void OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateInstanceStorageConfig_request_StorageConfig_KinesisStreamConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stream_arn_isValid && true;
}

} // namespace OpenAPI
