/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPhoneNumbersV2_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPhoneNumbersV2_request::OAIListPhoneNumbersV2_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPhoneNumbersV2_request::OAIListPhoneNumbersV2_request() {
    this->initializeModel();
}

OAIListPhoneNumbersV2_request::~OAIListPhoneNumbersV2_request() {}

void OAIListPhoneNumbersV2_request::initializeModel() {

    m_target_arn_isSet = false;
    m_target_arn_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_phone_number_country_codes_isSet = false;
    m_phone_number_country_codes_isValid = false;

    m_phone_number_types_isSet = false;
    m_phone_number_types_isValid = false;

    m_phone_number_prefix_isSet = false;
    m_phone_number_prefix_isValid = false;
}

void OAIListPhoneNumbersV2_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPhoneNumbersV2_request::fromJsonObject(QJsonObject json) {

    m_target_arn_isValid = ::OpenAPI::fromJsonValue(m_target_arn, json[QString("TargetArn")]);
    m_target_arn_isSet = !json[QString("TargetArn")].isNull() && m_target_arn_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_phone_number_country_codes_isValid = ::OpenAPI::fromJsonValue(m_phone_number_country_codes, json[QString("PhoneNumberCountryCodes")]);
    m_phone_number_country_codes_isSet = !json[QString("PhoneNumberCountryCodes")].isNull() && m_phone_number_country_codes_isValid;

    m_phone_number_types_isValid = ::OpenAPI::fromJsonValue(m_phone_number_types, json[QString("PhoneNumberTypes")]);
    m_phone_number_types_isSet = !json[QString("PhoneNumberTypes")].isNull() && m_phone_number_types_isValid;

    m_phone_number_prefix_isValid = ::OpenAPI::fromJsonValue(m_phone_number_prefix, json[QString("PhoneNumberPrefix")]);
    m_phone_number_prefix_isSet = !json[QString("PhoneNumberPrefix")].isNull() && m_phone_number_prefix_isValid;
}

QString OAIListPhoneNumbersV2_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPhoneNumbersV2_request::asJsonObject() const {
    QJsonObject obj;
    if (m_target_arn_isSet) {
        obj.insert(QString("TargetArn"), ::OpenAPI::toJsonValue(m_target_arn));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_phone_number_country_codes.size() > 0) {
        obj.insert(QString("PhoneNumberCountryCodes"), ::OpenAPI::toJsonValue(m_phone_number_country_codes));
    }
    if (m_phone_number_types.size() > 0) {
        obj.insert(QString("PhoneNumberTypes"), ::OpenAPI::toJsonValue(m_phone_number_types));
    }
    if (m_phone_number_prefix_isSet) {
        obj.insert(QString("PhoneNumberPrefix"), ::OpenAPI::toJsonValue(m_phone_number_prefix));
    }
    return obj;
}

QString OAIListPhoneNumbersV2_request::getTargetArn() const {
    return m_target_arn;
}
void OAIListPhoneNumbersV2_request::setTargetArn(const QString &target_arn) {
    m_target_arn = target_arn;
    m_target_arn_isSet = true;
}

bool OAIListPhoneNumbersV2_request::is_target_arn_Set() const{
    return m_target_arn_isSet;
}

bool OAIListPhoneNumbersV2_request::is_target_arn_Valid() const{
    return m_target_arn_isValid;
}

qint32 OAIListPhoneNumbersV2_request::getMaxResults() const {
    return m_max_results;
}
void OAIListPhoneNumbersV2_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPhoneNumbersV2_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPhoneNumbersV2_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListPhoneNumbersV2_request::getNextToken() const {
    return m_next_token;
}
void OAIListPhoneNumbersV2_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPhoneNumbersV2_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPhoneNumbersV2_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList<OAIPhoneNumberCountryCode> OAIListPhoneNumbersV2_request::getPhoneNumberCountryCodes() const {
    return m_phone_number_country_codes;
}
void OAIListPhoneNumbersV2_request::setPhoneNumberCountryCodes(const QList<OAIPhoneNumberCountryCode> &phone_number_country_codes) {
    m_phone_number_country_codes = phone_number_country_codes;
    m_phone_number_country_codes_isSet = true;
}

bool OAIListPhoneNumbersV2_request::is_phone_number_country_codes_Set() const{
    return m_phone_number_country_codes_isSet;
}

bool OAIListPhoneNumbersV2_request::is_phone_number_country_codes_Valid() const{
    return m_phone_number_country_codes_isValid;
}

QList<OAIPhoneNumberType> OAIListPhoneNumbersV2_request::getPhoneNumberTypes() const {
    return m_phone_number_types;
}
void OAIListPhoneNumbersV2_request::setPhoneNumberTypes(const QList<OAIPhoneNumberType> &phone_number_types) {
    m_phone_number_types = phone_number_types;
    m_phone_number_types_isSet = true;
}

bool OAIListPhoneNumbersV2_request::is_phone_number_types_Set() const{
    return m_phone_number_types_isSet;
}

bool OAIListPhoneNumbersV2_request::is_phone_number_types_Valid() const{
    return m_phone_number_types_isValid;
}

QString OAIListPhoneNumbersV2_request::getPhoneNumberPrefix() const {
    return m_phone_number_prefix;
}
void OAIListPhoneNumbersV2_request::setPhoneNumberPrefix(const QString &phone_number_prefix) {
    m_phone_number_prefix = phone_number_prefix;
    m_phone_number_prefix_isSet = true;
}

bool OAIListPhoneNumbersV2_request::is_phone_number_prefix_Set() const{
    return m_phone_number_prefix_isSet;
}

bool OAIListPhoneNumbersV2_request::is_phone_number_prefix_Valid() const{
    return m_phone_number_prefix_isValid;
}

bool OAIListPhoneNumbersV2_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_country_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPhoneNumbersV2_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
