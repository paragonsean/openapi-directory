/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaConcurrency_CrossChannelBehavior.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaConcurrency_CrossChannelBehavior::OAIMediaConcurrency_CrossChannelBehavior(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaConcurrency_CrossChannelBehavior::OAIMediaConcurrency_CrossChannelBehavior() {
    this->initializeModel();
}

OAIMediaConcurrency_CrossChannelBehavior::~OAIMediaConcurrency_CrossChannelBehavior() {}

void OAIMediaConcurrency_CrossChannelBehavior::initializeModel() {

    m_behavior_type_isSet = false;
    m_behavior_type_isValid = false;
}

void OAIMediaConcurrency_CrossChannelBehavior::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaConcurrency_CrossChannelBehavior::fromJsonObject(QJsonObject json) {

    m_behavior_type_isValid = ::OpenAPI::fromJsonValue(m_behavior_type, json[QString("BehaviorType")]);
    m_behavior_type_isSet = !json[QString("BehaviorType")].isNull() && m_behavior_type_isValid;
}

QString OAIMediaConcurrency_CrossChannelBehavior::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaConcurrency_CrossChannelBehavior::asJsonObject() const {
    QJsonObject obj;
    if (m_behavior_type.isSet()) {
        obj.insert(QString("BehaviorType"), ::OpenAPI::toJsonValue(m_behavior_type));
    }
    return obj;
}

OAIBehaviorType OAIMediaConcurrency_CrossChannelBehavior::getBehaviorType() const {
    return m_behavior_type;
}
void OAIMediaConcurrency_CrossChannelBehavior::setBehaviorType(const OAIBehaviorType &behavior_type) {
    m_behavior_type = behavior_type;
    m_behavior_type_isSet = true;
}

bool OAIMediaConcurrency_CrossChannelBehavior::is_behavior_type_Set() const{
    return m_behavior_type_isSet;
}

bool OAIMediaConcurrency_CrossChannelBehavior::is_behavior_type_Valid() const{
    return m_behavior_type_isValid;
}

bool OAIMediaConcurrency_CrossChannelBehavior::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_behavior_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaConcurrency_CrossChannelBehavior::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_behavior_type_isValid && true;
}

} // namespace OpenAPI
