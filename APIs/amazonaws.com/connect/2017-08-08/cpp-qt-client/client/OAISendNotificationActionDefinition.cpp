/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendNotificationActionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendNotificationActionDefinition::OAISendNotificationActionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendNotificationActionDefinition::OAISendNotificationActionDefinition() {
    this->initializeModel();
}

OAISendNotificationActionDefinition::~OAISendNotificationActionDefinition() {}

void OAISendNotificationActionDefinition::initializeModel() {

    m_delivery_method_isSet = false;
    m_delivery_method_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;
}

void OAISendNotificationActionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendNotificationActionDefinition::fromJsonObject(QJsonObject json) {

    m_delivery_method_isValid = ::OpenAPI::fromJsonValue(m_delivery_method, json[QString("DeliveryMethod")]);
    m_delivery_method_isSet = !json[QString("DeliveryMethod")].isNull() && m_delivery_method_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("Recipient")]);
    m_recipient_isSet = !json[QString("Recipient")].isNull() && m_recipient_isValid;
}

QString OAISendNotificationActionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendNotificationActionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_method.isSet()) {
        obj.insert(QString("DeliveryMethod"), ::OpenAPI::toJsonValue(m_delivery_method));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_type.isSet()) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("Recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    return obj;
}

OAINotificationDeliveryType OAISendNotificationActionDefinition::getDeliveryMethod() const {
    return m_delivery_method;
}
void OAISendNotificationActionDefinition::setDeliveryMethod(const OAINotificationDeliveryType &delivery_method) {
    m_delivery_method = delivery_method;
    m_delivery_method_isSet = true;
}

bool OAISendNotificationActionDefinition::is_delivery_method_Set() const{
    return m_delivery_method_isSet;
}

bool OAISendNotificationActionDefinition::is_delivery_method_Valid() const{
    return m_delivery_method_isValid;
}

QString OAISendNotificationActionDefinition::getSubject() const {
    return m_subject;
}
void OAISendNotificationActionDefinition::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAISendNotificationActionDefinition::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAISendNotificationActionDefinition::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAISendNotificationActionDefinition::getContent() const {
    return m_content;
}
void OAISendNotificationActionDefinition::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAISendNotificationActionDefinition::is_content_Set() const{
    return m_content_isSet;
}

bool OAISendNotificationActionDefinition::is_content_Valid() const{
    return m_content_isValid;
}

OAINotificationContentType OAISendNotificationActionDefinition::getContentType() const {
    return m_content_type;
}
void OAISendNotificationActionDefinition::setContentType(const OAINotificationContentType &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAISendNotificationActionDefinition::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAISendNotificationActionDefinition::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAISendNotificationActionDefinition_Recipient OAISendNotificationActionDefinition::getRecipient() const {
    return m_recipient;
}
void OAISendNotificationActionDefinition::setRecipient(const OAISendNotificationActionDefinition_Recipient &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAISendNotificationActionDefinition::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAISendNotificationActionDefinition::is_recipient_Valid() const{
    return m_recipient_isValid;
}

bool OAISendNotificationActionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendNotificationActionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_method_isValid && m_content_isValid && m_content_type_isValid && m_recipient_isValid && true;
}

} // namespace OpenAPI
