/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationFormSingleSelectQuestionOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationFormSingleSelectQuestionOption::OAIEvaluationFormSingleSelectQuestionOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationFormSingleSelectQuestionOption::OAIEvaluationFormSingleSelectQuestionOption() {
    this->initializeModel();
}

OAIEvaluationFormSingleSelectQuestionOption::~OAIEvaluationFormSingleSelectQuestionOption() {}

void OAIEvaluationFormSingleSelectQuestionOption::initializeModel() {

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_automatic_fail_isSet = false;
    m_automatic_fail_isValid = false;
}

void OAIEvaluationFormSingleSelectQuestionOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationFormSingleSelectQuestionOption::fromJsonObject(QJsonObject json) {

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("RefId")]);
    m_ref_id_isSet = !json[QString("RefId")].isNull() && m_ref_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_automatic_fail_isValid = ::OpenAPI::fromJsonValue(m_automatic_fail, json[QString("AutomaticFail")]);
    m_automatic_fail_isSet = !json[QString("AutomaticFail")].isNull() && m_automatic_fail_isValid;
}

QString OAIEvaluationFormSingleSelectQuestionOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationFormSingleSelectQuestionOption::asJsonObject() const {
    QJsonObject obj;
    if (m_ref_id_isSet) {
        obj.insert(QString("RefId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_automatic_fail_isSet) {
        obj.insert(QString("AutomaticFail"), ::OpenAPI::toJsonValue(m_automatic_fail));
    }
    return obj;
}

QString OAIEvaluationFormSingleSelectQuestionOption::getRefId() const {
    return m_ref_id;
}
void OAIEvaluationFormSingleSelectQuestionOption::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAIEvaluationFormSingleSelectQuestionOption::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIEvaluationFormSingleSelectQuestionOption::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

QString OAIEvaluationFormSingleSelectQuestionOption::getText() const {
    return m_text;
}
void OAIEvaluationFormSingleSelectQuestionOption::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIEvaluationFormSingleSelectQuestionOption::is_text_Set() const{
    return m_text_isSet;
}

bool OAIEvaluationFormSingleSelectQuestionOption::is_text_Valid() const{
    return m_text_isValid;
}

qint32 OAIEvaluationFormSingleSelectQuestionOption::getScore() const {
    return m_score;
}
void OAIEvaluationFormSingleSelectQuestionOption::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIEvaluationFormSingleSelectQuestionOption::is_score_Set() const{
    return m_score_isSet;
}

bool OAIEvaluationFormSingleSelectQuestionOption::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIEvaluationFormSingleSelectQuestionOption::getAutomaticFail() const {
    return m_automatic_fail;
}
void OAIEvaluationFormSingleSelectQuestionOption::setAutomaticFail(const bool &automatic_fail) {
    m_automatic_fail = automatic_fail;
    m_automatic_fail_isSet = true;
}

bool OAIEvaluationFormSingleSelectQuestionOption::is_automatic_fail_Set() const{
    return m_automatic_fail_isSet;
}

bool OAIEvaluationFormSingleSelectQuestionOption::is_automatic_fail_Valid() const{
    return m_automatic_fail_isValid;
}

bool OAIEvaluationFormSingleSelectQuestionOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_fail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationFormSingleSelectQuestionOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ref_id_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
