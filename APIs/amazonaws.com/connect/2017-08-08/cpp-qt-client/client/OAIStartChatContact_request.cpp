/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartChatContact_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartChatContact_request::OAIStartChatContact_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartChatContact_request::OAIStartChatContact_request() {
    this->initializeModel();
}

OAIStartChatContact_request::~OAIStartChatContact_request() {}

void OAIStartChatContact_request::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_contact_flow_id_isSet = false;
    m_contact_flow_id_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_participant_details_isSet = false;
    m_participant_details_isValid = false;

    m_initial_message_isSet = false;
    m_initial_message_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_chat_duration_in_minutes_isSet = false;
    m_chat_duration_in_minutes_isValid = false;

    m_supported_messaging_content_types_isSet = false;
    m_supported_messaging_content_types_isValid = false;

    m_persistent_chat_isSet = false;
    m_persistent_chat_isValid = false;

    m_related_contact_id_isSet = false;
    m_related_contact_id_isValid = false;
}

void OAIStartChatContact_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartChatContact_request::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_contact_flow_id_isValid = ::OpenAPI::fromJsonValue(m_contact_flow_id, json[QString("ContactFlowId")]);
    m_contact_flow_id_isSet = !json[QString("ContactFlowId")].isNull() && m_contact_flow_id_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_participant_details_isValid = ::OpenAPI::fromJsonValue(m_participant_details, json[QString("ParticipantDetails")]);
    m_participant_details_isSet = !json[QString("ParticipantDetails")].isNull() && m_participant_details_isValid;

    m_initial_message_isValid = ::OpenAPI::fromJsonValue(m_initial_message, json[QString("InitialMessage")]);
    m_initial_message_isSet = !json[QString("InitialMessage")].isNull() && m_initial_message_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_chat_duration_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_chat_duration_in_minutes, json[QString("ChatDurationInMinutes")]);
    m_chat_duration_in_minutes_isSet = !json[QString("ChatDurationInMinutes")].isNull() && m_chat_duration_in_minutes_isValid;

    m_supported_messaging_content_types_isValid = ::OpenAPI::fromJsonValue(m_supported_messaging_content_types, json[QString("SupportedMessagingContentTypes")]);
    m_supported_messaging_content_types_isSet = !json[QString("SupportedMessagingContentTypes")].isNull() && m_supported_messaging_content_types_isValid;

    m_persistent_chat_isValid = ::OpenAPI::fromJsonValue(m_persistent_chat, json[QString("PersistentChat")]);
    m_persistent_chat_isSet = !json[QString("PersistentChat")].isNull() && m_persistent_chat_isValid;

    m_related_contact_id_isValid = ::OpenAPI::fromJsonValue(m_related_contact_id, json[QString("RelatedContactId")]);
    m_related_contact_id_isSet = !json[QString("RelatedContactId")].isNull() && m_related_contact_id_isValid;
}

QString OAIStartChatContact_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartChatContact_request::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_contact_flow_id_isSet) {
        obj.insert(QString("ContactFlowId"), ::OpenAPI::toJsonValue(m_contact_flow_id));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_participant_details.isSet()) {
        obj.insert(QString("ParticipantDetails"), ::OpenAPI::toJsonValue(m_participant_details));
    }
    if (m_initial_message.isSet()) {
        obj.insert(QString("InitialMessage"), ::OpenAPI::toJsonValue(m_initial_message));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_chat_duration_in_minutes_isSet) {
        obj.insert(QString("ChatDurationInMinutes"), ::OpenAPI::toJsonValue(m_chat_duration_in_minutes));
    }
    if (m_supported_messaging_content_types.size() > 0) {
        obj.insert(QString("SupportedMessagingContentTypes"), ::OpenAPI::toJsonValue(m_supported_messaging_content_types));
    }
    if (m_persistent_chat.isSet()) {
        obj.insert(QString("PersistentChat"), ::OpenAPI::toJsonValue(m_persistent_chat));
    }
    if (m_related_contact_id_isSet) {
        obj.insert(QString("RelatedContactId"), ::OpenAPI::toJsonValue(m_related_contact_id));
    }
    return obj;
}

QString OAIStartChatContact_request::getInstanceId() const {
    return m_instance_id;
}
void OAIStartChatContact_request::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIStartChatContact_request::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIStartChatContact_request::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIStartChatContact_request::getContactFlowId() const {
    return m_contact_flow_id;
}
void OAIStartChatContact_request::setContactFlowId(const QString &contact_flow_id) {
    m_contact_flow_id = contact_flow_id;
    m_contact_flow_id_isSet = true;
}

bool OAIStartChatContact_request::is_contact_flow_id_Set() const{
    return m_contact_flow_id_isSet;
}

bool OAIStartChatContact_request::is_contact_flow_id_Valid() const{
    return m_contact_flow_id_isValid;
}

QMap<QString, QString> OAIStartChatContact_request::getAttributes() const {
    return m_attributes;
}
void OAIStartChatContact_request::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIStartChatContact_request::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIStartChatContact_request::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIStartChatContact_request_ParticipantDetails OAIStartChatContact_request::getParticipantDetails() const {
    return m_participant_details;
}
void OAIStartChatContact_request::setParticipantDetails(const OAIStartChatContact_request_ParticipantDetails &participant_details) {
    m_participant_details = participant_details;
    m_participant_details_isSet = true;
}

bool OAIStartChatContact_request::is_participant_details_Set() const{
    return m_participant_details_isSet;
}

bool OAIStartChatContact_request::is_participant_details_Valid() const{
    return m_participant_details_isValid;
}

OAIStartChatContact_request_InitialMessage OAIStartChatContact_request::getInitialMessage() const {
    return m_initial_message;
}
void OAIStartChatContact_request::setInitialMessage(const OAIStartChatContact_request_InitialMessage &initial_message) {
    m_initial_message = initial_message;
    m_initial_message_isSet = true;
}

bool OAIStartChatContact_request::is_initial_message_Set() const{
    return m_initial_message_isSet;
}

bool OAIStartChatContact_request::is_initial_message_Valid() const{
    return m_initial_message_isValid;
}

QString OAIStartChatContact_request::getClientToken() const {
    return m_client_token;
}
void OAIStartChatContact_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartChatContact_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartChatContact_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

qint32 OAIStartChatContact_request::getChatDurationInMinutes() const {
    return m_chat_duration_in_minutes;
}
void OAIStartChatContact_request::setChatDurationInMinutes(const qint32 &chat_duration_in_minutes) {
    m_chat_duration_in_minutes = chat_duration_in_minutes;
    m_chat_duration_in_minutes_isSet = true;
}

bool OAIStartChatContact_request::is_chat_duration_in_minutes_Set() const{
    return m_chat_duration_in_minutes_isSet;
}

bool OAIStartChatContact_request::is_chat_duration_in_minutes_Valid() const{
    return m_chat_duration_in_minutes_isValid;
}

QList<QString> OAIStartChatContact_request::getSupportedMessagingContentTypes() const {
    return m_supported_messaging_content_types;
}
void OAIStartChatContact_request::setSupportedMessagingContentTypes(const QList<QString> &supported_messaging_content_types) {
    m_supported_messaging_content_types = supported_messaging_content_types;
    m_supported_messaging_content_types_isSet = true;
}

bool OAIStartChatContact_request::is_supported_messaging_content_types_Set() const{
    return m_supported_messaging_content_types_isSet;
}

bool OAIStartChatContact_request::is_supported_messaging_content_types_Valid() const{
    return m_supported_messaging_content_types_isValid;
}

OAIStartChatContact_request_PersistentChat OAIStartChatContact_request::getPersistentChat() const {
    return m_persistent_chat;
}
void OAIStartChatContact_request::setPersistentChat(const OAIStartChatContact_request_PersistentChat &persistent_chat) {
    m_persistent_chat = persistent_chat;
    m_persistent_chat_isSet = true;
}

bool OAIStartChatContact_request::is_persistent_chat_Set() const{
    return m_persistent_chat_isSet;
}

bool OAIStartChatContact_request::is_persistent_chat_Valid() const{
    return m_persistent_chat_isValid;
}

QString OAIStartChatContact_request::getRelatedContactId() const {
    return m_related_contact_id;
}
void OAIStartChatContact_request::setRelatedContactId(const QString &related_contact_id) {
    m_related_contact_id = related_contact_id;
    m_related_contact_id_isSet = true;
}

bool OAIStartChatContact_request::is_related_contact_id_Set() const{
    return m_related_contact_id_isSet;
}

bool OAIStartChatContact_request::is_related_contact_id_Valid() const{
    return m_related_contact_id_isValid;
}

bool OAIStartChatContact_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_flow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_duration_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_messaging_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_chat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartChatContact_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_contact_flow_id_isValid && m_participant_details_isValid && true;
}

} // namespace OpenAPI
