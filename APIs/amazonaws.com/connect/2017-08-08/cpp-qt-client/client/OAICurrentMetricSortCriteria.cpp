/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrentMetricSortCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrentMetricSortCriteria::OAICurrentMetricSortCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrentMetricSortCriteria::OAICurrentMetricSortCriteria() {
    this->initializeModel();
}

OAICurrentMetricSortCriteria::~OAICurrentMetricSortCriteria() {}

void OAICurrentMetricSortCriteria::initializeModel() {

    m_sort_by_metric_isSet = false;
    m_sort_by_metric_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAICurrentMetricSortCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrentMetricSortCriteria::fromJsonObject(QJsonObject json) {

    m_sort_by_metric_isValid = ::OpenAPI::fromJsonValue(m_sort_by_metric, json[QString("SortByMetric")]);
    m_sort_by_metric_isSet = !json[QString("SortByMetric")].isNull() && m_sort_by_metric_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;
}

QString OAICurrentMetricSortCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrentMetricSortCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_sort_by_metric.isSet()) {
        obj.insert(QString("SortByMetric"), ::OpenAPI::toJsonValue(m_sort_by_metric));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

OAICurrentMetricName OAICurrentMetricSortCriteria::getSortByMetric() const {
    return m_sort_by_metric;
}
void OAICurrentMetricSortCriteria::setSortByMetric(const OAICurrentMetricName &sort_by_metric) {
    m_sort_by_metric = sort_by_metric;
    m_sort_by_metric_isSet = true;
}

bool OAICurrentMetricSortCriteria::is_sort_by_metric_Set() const{
    return m_sort_by_metric_isSet;
}

bool OAICurrentMetricSortCriteria::is_sort_by_metric_Valid() const{
    return m_sort_by_metric_isValid;
}

OAISortOrder OAICurrentMetricSortCriteria::getSortOrder() const {
    return m_sort_order;
}
void OAICurrentMetricSortCriteria::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAICurrentMetricSortCriteria::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAICurrentMetricSortCriteria::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAICurrentMetricSortCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sort_by_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrentMetricSortCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
