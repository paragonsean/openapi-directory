/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactFlowSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactFlowSummary::OAIContactFlowSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactFlowSummary::OAIContactFlowSummary() {
    this->initializeModel();
}

OAIContactFlowSummary::~OAIContactFlowSummary() {}

void OAIContactFlowSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_contact_flow_type_isSet = false;
    m_contact_flow_type_isValid = false;

    m_contact_flow_state_isSet = false;
    m_contact_flow_state_isValid = false;
}

void OAIContactFlowSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactFlowSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_contact_flow_type_isValid = ::OpenAPI::fromJsonValue(m_contact_flow_type, json[QString("ContactFlowType")]);
    m_contact_flow_type_isSet = !json[QString("ContactFlowType")].isNull() && m_contact_flow_type_isValid;

    m_contact_flow_state_isValid = ::OpenAPI::fromJsonValue(m_contact_flow_state, json[QString("ContactFlowState")]);
    m_contact_flow_state_isSet = !json[QString("ContactFlowState")].isNull() && m_contact_flow_state_isValid;
}

QString OAIContactFlowSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactFlowSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_contact_flow_type.isSet()) {
        obj.insert(QString("ContactFlowType"), ::OpenAPI::toJsonValue(m_contact_flow_type));
    }
    if (m_contact_flow_state.isSet()) {
        obj.insert(QString("ContactFlowState"), ::OpenAPI::toJsonValue(m_contact_flow_state));
    }
    return obj;
}

QString OAIContactFlowSummary::getId() const {
    return m_id;
}
void OAIContactFlowSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContactFlowSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContactFlowSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIContactFlowSummary::getArn() const {
    return m_arn;
}
void OAIContactFlowSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIContactFlowSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIContactFlowSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIContactFlowSummary::getName() const {
    return m_name;
}
void OAIContactFlowSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContactFlowSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContactFlowSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIContactFlowType OAIContactFlowSummary::getContactFlowType() const {
    return m_contact_flow_type;
}
void OAIContactFlowSummary::setContactFlowType(const OAIContactFlowType &contact_flow_type) {
    m_contact_flow_type = contact_flow_type;
    m_contact_flow_type_isSet = true;
}

bool OAIContactFlowSummary::is_contact_flow_type_Set() const{
    return m_contact_flow_type_isSet;
}

bool OAIContactFlowSummary::is_contact_flow_type_Valid() const{
    return m_contact_flow_type_isValid;
}

OAIContactFlowState OAIContactFlowSummary::getContactFlowState() const {
    return m_contact_flow_state;
}
void OAIContactFlowSummary::setContactFlowState(const OAIContactFlowState &contact_flow_state) {
    m_contact_flow_state = contact_flow_state;
    m_contact_flow_state_isSet = true;
}

bool OAIContactFlowSummary::is_contact_flow_state_Set() const{
    return m_contact_flow_state_isSet;
}

bool OAIContactFlowSummary::is_contact_flow_state_Valid() const{
    return m_contact_flow_state_isValid;
}

bool OAIContactFlowSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_flow_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_flow_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactFlowSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
