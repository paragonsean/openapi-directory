/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserData_Status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserData_Status::OAIUserData_Status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserData_Status::OAIUserData_Status() {
    this->initializeModel();
}

OAIUserData_Status::~OAIUserData_Status() {}

void OAIUserData_Status::initializeModel() {

    m_status_start_timestamp_isSet = false;
    m_status_start_timestamp_isValid = false;

    m_status_arn_isSet = false;
    m_status_arn_isValid = false;

    m_status_name_isSet = false;
    m_status_name_isValid = false;
}

void OAIUserData_Status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserData_Status::fromJsonObject(QJsonObject json) {

    m_status_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_status_start_timestamp, json[QString("StatusStartTimestamp")]);
    m_status_start_timestamp_isSet = !json[QString("StatusStartTimestamp")].isNull() && m_status_start_timestamp_isValid;

    m_status_arn_isValid = ::OpenAPI::fromJsonValue(m_status_arn, json[QString("StatusArn")]);
    m_status_arn_isSet = !json[QString("StatusArn")].isNull() && m_status_arn_isValid;

    m_status_name_isValid = ::OpenAPI::fromJsonValue(m_status_name, json[QString("StatusName")]);
    m_status_name_isSet = !json[QString("StatusName")].isNull() && m_status_name_isValid;
}

QString OAIUserData_Status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserData_Status::asJsonObject() const {
    QJsonObject obj;
    if (m_status_start_timestamp_isSet) {
        obj.insert(QString("StatusStartTimestamp"), ::OpenAPI::toJsonValue(m_status_start_timestamp));
    }
    if (m_status_arn_isSet) {
        obj.insert(QString("StatusArn"), ::OpenAPI::toJsonValue(m_status_arn));
    }
    if (m_status_name_isSet) {
        obj.insert(QString("StatusName"), ::OpenAPI::toJsonValue(m_status_name));
    }
    return obj;
}

QDateTime OAIUserData_Status::getStatusStartTimestamp() const {
    return m_status_start_timestamp;
}
void OAIUserData_Status::setStatusStartTimestamp(const QDateTime &status_start_timestamp) {
    m_status_start_timestamp = status_start_timestamp;
    m_status_start_timestamp_isSet = true;
}

bool OAIUserData_Status::is_status_start_timestamp_Set() const{
    return m_status_start_timestamp_isSet;
}

bool OAIUserData_Status::is_status_start_timestamp_Valid() const{
    return m_status_start_timestamp_isValid;
}

QString OAIUserData_Status::getStatusArn() const {
    return m_status_arn;
}
void OAIUserData_Status::setStatusArn(const QString &status_arn) {
    m_status_arn = status_arn;
    m_status_arn_isSet = true;
}

bool OAIUserData_Status::is_status_arn_Set() const{
    return m_status_arn_isSet;
}

bool OAIUserData_Status::is_status_arn_Valid() const{
    return m_status_arn_isValid;
}

QString OAIUserData_Status::getStatusName() const {
    return m_status_name;
}
void OAIUserData_Status::setStatusName(const QString &status_name) {
    m_status_name = status_name;
    m_status_name_isSet = true;
}

bool OAIUserData_Status::is_status_name_Set() const{
    return m_status_name_isSet;
}

bool OAIUserData_Status::is_status_name_Valid() const{
    return m_status_name_isValid;
}

bool OAIUserData_Status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserData_Status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
