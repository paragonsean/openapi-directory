/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoricalMetric_Threshold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoricalMetric_Threshold::OAIHistoricalMetric_Threshold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoricalMetric_Threshold::OAIHistoricalMetric_Threshold() {
    this->initializeModel();
}

OAIHistoricalMetric_Threshold::~OAIHistoricalMetric_Threshold() {}

void OAIHistoricalMetric_Threshold::initializeModel() {

    m_comparison_isSet = false;
    m_comparison_isValid = false;

    m_threshold_value_isSet = false;
    m_threshold_value_isValid = false;
}

void OAIHistoricalMetric_Threshold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoricalMetric_Threshold::fromJsonObject(QJsonObject json) {

    m_comparison_isValid = ::OpenAPI::fromJsonValue(m_comparison, json[QString("Comparison")]);
    m_comparison_isSet = !json[QString("Comparison")].isNull() && m_comparison_isValid;

    m_threshold_value_isValid = ::OpenAPI::fromJsonValue(m_threshold_value, json[QString("ThresholdValue")]);
    m_threshold_value_isSet = !json[QString("ThresholdValue")].isNull() && m_threshold_value_isValid;
}

QString OAIHistoricalMetric_Threshold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoricalMetric_Threshold::asJsonObject() const {
    QJsonObject obj;
    if (m_comparison.isSet()) {
        obj.insert(QString("Comparison"), ::OpenAPI::toJsonValue(m_comparison));
    }
    if (m_threshold_value_isSet) {
        obj.insert(QString("ThresholdValue"), ::OpenAPI::toJsonValue(m_threshold_value));
    }
    return obj;
}

OAIComparison OAIHistoricalMetric_Threshold::getComparison() const {
    return m_comparison;
}
void OAIHistoricalMetric_Threshold::setComparison(const OAIComparison &comparison) {
    m_comparison = comparison;
    m_comparison_isSet = true;
}

bool OAIHistoricalMetric_Threshold::is_comparison_Set() const{
    return m_comparison_isSet;
}

bool OAIHistoricalMetric_Threshold::is_comparison_Valid() const{
    return m_comparison_isValid;
}

double OAIHistoricalMetric_Threshold::getThresholdValue() const {
    return m_threshold_value;
}
void OAIHistoricalMetric_Threshold::setThresholdValue(const double &threshold_value) {
    m_threshold_value = threshold_value;
    m_threshold_value_isSet = true;
}

bool OAIHistoricalMetric_Threshold::is_threshold_value_Set() const{
    return m_threshold_value_isSet;
}

bool OAIHistoricalMetric_Threshold::is_threshold_value_Valid() const{
    return m_threshold_value_isValid;
}

bool OAIHistoricalMetric_Threshold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparison.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoricalMetric_Threshold::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
