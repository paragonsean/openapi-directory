/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResourceTags_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResourceTags_request::OAISearchResourceTags_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResourceTags_request::OAISearchResourceTags_request() {
    this->initializeModel();
}

OAISearchResourceTags_request::~OAISearchResourceTags_request() {}

void OAISearchResourceTags_request::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_search_criteria_isSet = false;
    m_search_criteria_isValid = false;
}

void OAISearchResourceTags_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResourceTags_request::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_search_criteria_isValid = ::OpenAPI::fromJsonValue(m_search_criteria, json[QString("SearchCriteria")]);
    m_search_criteria_isSet = !json[QString("SearchCriteria")].isNull() && m_search_criteria_isValid;
}

QString OAISearchResourceTags_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResourceTags_request::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_resource_types.size() > 0) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_search_criteria.isSet()) {
        obj.insert(QString("SearchCriteria"), ::OpenAPI::toJsonValue(m_search_criteria));
    }
    return obj;
}

QString OAISearchResourceTags_request::getInstanceId() const {
    return m_instance_id;
}
void OAISearchResourceTags_request::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAISearchResourceTags_request::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAISearchResourceTags_request::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QList<QString> OAISearchResourceTags_request::getResourceTypes() const {
    return m_resource_types;
}
void OAISearchResourceTags_request::setResourceTypes(const QList<QString> &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAISearchResourceTags_request::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAISearchResourceTags_request::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QString OAISearchResourceTags_request::getNextToken() const {
    return m_next_token;
}
void OAISearchResourceTags_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchResourceTags_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchResourceTags_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAISearchResourceTags_request::getMaxResults() const {
    return m_max_results;
}
void OAISearchResourceTags_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchResourceTags_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchResourceTags_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAISearchResourceTags_request_SearchCriteria OAISearchResourceTags_request::getSearchCriteria() const {
    return m_search_criteria;
}
void OAISearchResourceTags_request::setSearchCriteria(const OAISearchResourceTags_request_SearchCriteria &search_criteria) {
    m_search_criteria = search_criteria;
    m_search_criteria_isSet = true;
}

bool OAISearchResourceTags_request::is_search_criteria_Set() const{
    return m_search_criteria_isSet;
}

bool OAISearchResourceTags_request::is_search_criteria_Valid() const{
    return m_search_criteria_isValid;
}

bool OAISearchResourceTags_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResourceTags_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && true;
}

} // namespace OpenAPI
