/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationAssociationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationAssociationSummary::OAIIntegrationAssociationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationAssociationSummary::OAIIntegrationAssociationSummary() {
    this->initializeModel();
}

OAIIntegrationAssociationSummary::~OAIIntegrationAssociationSummary() {}

void OAIIntegrationAssociationSummary::initializeModel() {

    m_integration_association_id_isSet = false;
    m_integration_association_id_isValid = false;

    m_integration_association_arn_isSet = false;
    m_integration_association_arn_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_integration_type_isSet = false;
    m_integration_type_isValid = false;

    m_integration_arn_isSet = false;
    m_integration_arn_isValid = false;

    m_source_application_url_isSet = false;
    m_source_application_url_isValid = false;

    m_source_application_name_isSet = false;
    m_source_application_name_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAIIntegrationAssociationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationAssociationSummary::fromJsonObject(QJsonObject json) {

    m_integration_association_id_isValid = ::OpenAPI::fromJsonValue(m_integration_association_id, json[QString("IntegrationAssociationId")]);
    m_integration_association_id_isSet = !json[QString("IntegrationAssociationId")].isNull() && m_integration_association_id_isValid;

    m_integration_association_arn_isValid = ::OpenAPI::fromJsonValue(m_integration_association_arn, json[QString("IntegrationAssociationArn")]);
    m_integration_association_arn_isSet = !json[QString("IntegrationAssociationArn")].isNull() && m_integration_association_arn_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_integration_type_isValid = ::OpenAPI::fromJsonValue(m_integration_type, json[QString("IntegrationType")]);
    m_integration_type_isSet = !json[QString("IntegrationType")].isNull() && m_integration_type_isValid;

    m_integration_arn_isValid = ::OpenAPI::fromJsonValue(m_integration_arn, json[QString("IntegrationArn")]);
    m_integration_arn_isSet = !json[QString("IntegrationArn")].isNull() && m_integration_arn_isValid;

    m_source_application_url_isValid = ::OpenAPI::fromJsonValue(m_source_application_url, json[QString("SourceApplicationUrl")]);
    m_source_application_url_isSet = !json[QString("SourceApplicationUrl")].isNull() && m_source_application_url_isValid;

    m_source_application_name_isValid = ::OpenAPI::fromJsonValue(m_source_application_name, json[QString("SourceApplicationName")]);
    m_source_application_name_isSet = !json[QString("SourceApplicationName")].isNull() && m_source_application_name_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;
}

QString OAIIntegrationAssociationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationAssociationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_integration_association_id_isSet) {
        obj.insert(QString("IntegrationAssociationId"), ::OpenAPI::toJsonValue(m_integration_association_id));
    }
    if (m_integration_association_arn_isSet) {
        obj.insert(QString("IntegrationAssociationArn"), ::OpenAPI::toJsonValue(m_integration_association_arn));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_integration_type.isSet()) {
        obj.insert(QString("IntegrationType"), ::OpenAPI::toJsonValue(m_integration_type));
    }
    if (m_integration_arn_isSet) {
        obj.insert(QString("IntegrationArn"), ::OpenAPI::toJsonValue(m_integration_arn));
    }
    if (m_source_application_url_isSet) {
        obj.insert(QString("SourceApplicationUrl"), ::OpenAPI::toJsonValue(m_source_application_url));
    }
    if (m_source_application_name_isSet) {
        obj.insert(QString("SourceApplicationName"), ::OpenAPI::toJsonValue(m_source_application_name));
    }
    if (m_source_type.isSet()) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

QString OAIIntegrationAssociationSummary::getIntegrationAssociationId() const {
    return m_integration_association_id;
}
void OAIIntegrationAssociationSummary::setIntegrationAssociationId(const QString &integration_association_id) {
    m_integration_association_id = integration_association_id;
    m_integration_association_id_isSet = true;
}

bool OAIIntegrationAssociationSummary::is_integration_association_id_Set() const{
    return m_integration_association_id_isSet;
}

bool OAIIntegrationAssociationSummary::is_integration_association_id_Valid() const{
    return m_integration_association_id_isValid;
}

QString OAIIntegrationAssociationSummary::getIntegrationAssociationArn() const {
    return m_integration_association_arn;
}
void OAIIntegrationAssociationSummary::setIntegrationAssociationArn(const QString &integration_association_arn) {
    m_integration_association_arn = integration_association_arn;
    m_integration_association_arn_isSet = true;
}

bool OAIIntegrationAssociationSummary::is_integration_association_arn_Set() const{
    return m_integration_association_arn_isSet;
}

bool OAIIntegrationAssociationSummary::is_integration_association_arn_Valid() const{
    return m_integration_association_arn_isValid;
}

QString OAIIntegrationAssociationSummary::getInstanceId() const {
    return m_instance_id;
}
void OAIIntegrationAssociationSummary::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIIntegrationAssociationSummary::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIIntegrationAssociationSummary::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

OAIIntegrationType OAIIntegrationAssociationSummary::getIntegrationType() const {
    return m_integration_type;
}
void OAIIntegrationAssociationSummary::setIntegrationType(const OAIIntegrationType &integration_type) {
    m_integration_type = integration_type;
    m_integration_type_isSet = true;
}

bool OAIIntegrationAssociationSummary::is_integration_type_Set() const{
    return m_integration_type_isSet;
}

bool OAIIntegrationAssociationSummary::is_integration_type_Valid() const{
    return m_integration_type_isValid;
}

QString OAIIntegrationAssociationSummary::getIntegrationArn() const {
    return m_integration_arn;
}
void OAIIntegrationAssociationSummary::setIntegrationArn(const QString &integration_arn) {
    m_integration_arn = integration_arn;
    m_integration_arn_isSet = true;
}

bool OAIIntegrationAssociationSummary::is_integration_arn_Set() const{
    return m_integration_arn_isSet;
}

bool OAIIntegrationAssociationSummary::is_integration_arn_Valid() const{
    return m_integration_arn_isValid;
}

QString OAIIntegrationAssociationSummary::getSourceApplicationUrl() const {
    return m_source_application_url;
}
void OAIIntegrationAssociationSummary::setSourceApplicationUrl(const QString &source_application_url) {
    m_source_application_url = source_application_url;
    m_source_application_url_isSet = true;
}

bool OAIIntegrationAssociationSummary::is_source_application_url_Set() const{
    return m_source_application_url_isSet;
}

bool OAIIntegrationAssociationSummary::is_source_application_url_Valid() const{
    return m_source_application_url_isValid;
}

QString OAIIntegrationAssociationSummary::getSourceApplicationName() const {
    return m_source_application_name;
}
void OAIIntegrationAssociationSummary::setSourceApplicationName(const QString &source_application_name) {
    m_source_application_name = source_application_name;
    m_source_application_name_isSet = true;
}

bool OAIIntegrationAssociationSummary::is_source_application_name_Set() const{
    return m_source_application_name_isSet;
}

bool OAIIntegrationAssociationSummary::is_source_application_name_Valid() const{
    return m_source_application_name_isValid;
}

OAISourceType OAIIntegrationAssociationSummary::getSourceType() const {
    return m_source_type;
}
void OAIIntegrationAssociationSummary::setSourceType(const OAISourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIIntegrationAssociationSummary::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIIntegrationAssociationSummary::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAIIntegrationAssociationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_integration_association_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_association_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_application_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationAssociationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
