# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_user_request_identity_info import CreateUserRequestIdentityInfo
from openapi_server.models.create_user_request_phone_config import CreateUserRequestPhoneConfig
import re
from openapi_server import util


class CreateUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, password: str=None, identity_info: CreateUserRequestIdentityInfo=None, phone_config: CreateUserRequestPhoneConfig=None, directory_user_id: str=None, security_profile_ids: List[str]=None, routing_profile_id: str=None, hierarchy_group_id: str=None, tags: Dict[str, str]=None):
        """CreateUserRequest - a model defined in OpenAPI

        :param username: The username of this CreateUserRequest.
        :param password: The password of this CreateUserRequest.
        :param identity_info: The identity_info of this CreateUserRequest.
        :param phone_config: The phone_config of this CreateUserRequest.
        :param directory_user_id: The directory_user_id of this CreateUserRequest.
        :param security_profile_ids: The security_profile_ids of this CreateUserRequest.
        :param routing_profile_id: The routing_profile_id of this CreateUserRequest.
        :param hierarchy_group_id: The hierarchy_group_id of this CreateUserRequest.
        :param tags: The tags of this CreateUserRequest.
        """
        self.openapi_types = {
            'username': str,
            'password': str,
            'identity_info': CreateUserRequestIdentityInfo,
            'phone_config': CreateUserRequestPhoneConfig,
            'directory_user_id': str,
            'security_profile_ids': List[str],
            'routing_profile_id': str,
            'hierarchy_group_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'username': 'Username',
            'password': 'Password',
            'identity_info': 'IdentityInfo',
            'phone_config': 'PhoneConfig',
            'directory_user_id': 'DirectoryUserId',
            'security_profile_ids': 'SecurityProfileIds',
            'routing_profile_id': 'RoutingProfileId',
            'hierarchy_group_id': 'HierarchyGroupId',
            'tags': 'Tags'
        }

        self._username = username
        self._password = password
        self._identity_info = identity_info
        self._phone_config = phone_config
        self._directory_user_id = directory_user_id
        self._security_profile_ids = security_profile_ids
        self._routing_profile_id = routing_profile_id
        self._hierarchy_group_id = hierarchy_group_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUser_request of this CreateUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this CreateUserRequest.

        The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from [a-zA-Z0-9_-.\\@]+.

        :return: The username of this CreateUserRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateUserRequest.

        The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from [a-zA-Z0-9_-.\\@]+.

        :param username: The username of this CreateUserRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 100:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `100`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")

        self._username = username

    @property
    def password(self):
        """Gets the password of this CreateUserRequest.

        The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.

        :return: The password of this CreateUserRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateUserRequest.

        The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.

        :param password: The password of this CreateUserRequest.
        :type password: str
        """
        if password is not None and not re.search(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d\S]{8,64}$', password):
            raise ValueError("Invalid value for `password`, must be a follow pattern or equal to `/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d\S]{8,64}$/`")

        self._password = password

    @property
    def identity_info(self):
        """Gets the identity_info of this CreateUserRequest.


        :return: The identity_info of this CreateUserRequest.
        :rtype: CreateUserRequestIdentityInfo
        """
        return self._identity_info

    @identity_info.setter
    def identity_info(self, identity_info):
        """Sets the identity_info of this CreateUserRequest.


        :param identity_info: The identity_info of this CreateUserRequest.
        :type identity_info: CreateUserRequestIdentityInfo
        """

        self._identity_info = identity_info

    @property
    def phone_config(self):
        """Gets the phone_config of this CreateUserRequest.


        :return: The phone_config of this CreateUserRequest.
        :rtype: CreateUserRequestPhoneConfig
        """
        return self._phone_config

    @phone_config.setter
    def phone_config(self, phone_config):
        """Sets the phone_config of this CreateUserRequest.


        :param phone_config: The phone_config of this CreateUserRequest.
        :type phone_config: CreateUserRequestPhoneConfig
        """
        if phone_config is None:
            raise ValueError("Invalid value for `phone_config`, must not be `None`")

        self._phone_config = phone_config

    @property
    def directory_user_id(self):
        """Gets the directory_user_id of this CreateUserRequest.

        <p>The identifier of the user account in the directory used for identity management. If Amazon Connect cannot access the directory, you can specify this identifier to authenticate users. If you include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity information is used to authenticate users from your directory.</p> <p>This parameter is required if you are using an existing directory for identity management in Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for identity management and include this parameter, an error is returned.</p>

        :return: The directory_user_id of this CreateUserRequest.
        :rtype: str
        """
        return self._directory_user_id

    @directory_user_id.setter
    def directory_user_id(self, directory_user_id):
        """Sets the directory_user_id of this CreateUserRequest.

        <p>The identifier of the user account in the directory used for identity management. If Amazon Connect cannot access the directory, you can specify this identifier to authenticate users. If you include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity information is used to authenticate users from your directory.</p> <p>This parameter is required if you are using an existing directory for identity management in Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for identity management and include this parameter, an error is returned.</p>

        :param directory_user_id: The directory_user_id of this CreateUserRequest.
        :type directory_user_id: str
        """

        self._directory_user_id = directory_user_id

    @property
    def security_profile_ids(self):
        """Gets the security_profile_ids of this CreateUserRequest.

        The identifier of the security profile for the user.

        :return: The security_profile_ids of this CreateUserRequest.
        :rtype: List[str]
        """
        return self._security_profile_ids

    @security_profile_ids.setter
    def security_profile_ids(self, security_profile_ids):
        """Sets the security_profile_ids of this CreateUserRequest.

        The identifier of the security profile for the user.

        :param security_profile_ids: The security_profile_ids of this CreateUserRequest.
        :type security_profile_ids: List[str]
        """
        if security_profile_ids is None:
            raise ValueError("Invalid value for `security_profile_ids`, must not be `None`")
        if security_profile_ids is not None and len(security_profile_ids) > 10:
            raise ValueError("Invalid value for `security_profile_ids`, number of items must be less than or equal to `10`")
        if security_profile_ids is not None and len(security_profile_ids) < 1:
            raise ValueError("Invalid value for `security_profile_ids`, number of items must be greater than or equal to `1`")

        self._security_profile_ids = security_profile_ids

    @property
    def routing_profile_id(self):
        """Gets the routing_profile_id of this CreateUserRequest.

        The identifier of the routing profile for the user.

        :return: The routing_profile_id of this CreateUserRequest.
        :rtype: str
        """
        return self._routing_profile_id

    @routing_profile_id.setter
    def routing_profile_id(self, routing_profile_id):
        """Sets the routing_profile_id of this CreateUserRequest.

        The identifier of the routing profile for the user.

        :param routing_profile_id: The routing_profile_id of this CreateUserRequest.
        :type routing_profile_id: str
        """
        if routing_profile_id is None:
            raise ValueError("Invalid value for `routing_profile_id`, must not be `None`")

        self._routing_profile_id = routing_profile_id

    @property
    def hierarchy_group_id(self):
        """Gets the hierarchy_group_id of this CreateUserRequest.

        The identifier of the hierarchy group for the user.

        :return: The hierarchy_group_id of this CreateUserRequest.
        :rtype: str
        """
        return self._hierarchy_group_id

    @hierarchy_group_id.setter
    def hierarchy_group_id(self, hierarchy_group_id):
        """Sets the hierarchy_group_id of this CreateUserRequest.

        The identifier of the hierarchy group for the user.

        :param hierarchy_group_id: The hierarchy_group_id of this CreateUserRequest.
        :type hierarchy_group_id: str
        """

        self._hierarchy_group_id = hierarchy_group_id

    @property
    def tags(self):
        """Gets the tags of this CreateUserRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateUserRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateUserRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateUserRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
