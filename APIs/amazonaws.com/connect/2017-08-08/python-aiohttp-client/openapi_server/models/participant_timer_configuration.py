# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_timer_configuration_timer_value import ParticipantTimerConfigurationTimerValue
from openapi_server.models.participant_timer_type import ParticipantTimerType
from openapi_server.models.timer_eligible_participant_roles import TimerEligibleParticipantRoles
from openapi_server import util


class ParticipantTimerConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, participant_role: TimerEligibleParticipantRoles=None, timer_type: ParticipantTimerType=None, timer_value: ParticipantTimerConfigurationTimerValue=None):
        """ParticipantTimerConfiguration - a model defined in OpenAPI

        :param participant_role: The participant_role of this ParticipantTimerConfiguration.
        :param timer_type: The timer_type of this ParticipantTimerConfiguration.
        :param timer_value: The timer_value of this ParticipantTimerConfiguration.
        """
        self.openapi_types = {
            'participant_role': TimerEligibleParticipantRoles,
            'timer_type': ParticipantTimerType,
            'timer_value': ParticipantTimerConfigurationTimerValue
        }

        self.attribute_map = {
            'participant_role': 'ParticipantRole',
            'timer_type': 'TimerType',
            'timer_value': 'TimerValue'
        }

        self._participant_role = participant_role
        self._timer_type = timer_type
        self._timer_value = timer_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParticipantTimerConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParticipantTimerConfiguration of this ParticipantTimerConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def participant_role(self):
        """Gets the participant_role of this ParticipantTimerConfiguration.


        :return: The participant_role of this ParticipantTimerConfiguration.
        :rtype: TimerEligibleParticipantRoles
        """
        return self._participant_role

    @participant_role.setter
    def participant_role(self, participant_role):
        """Sets the participant_role of this ParticipantTimerConfiguration.


        :param participant_role: The participant_role of this ParticipantTimerConfiguration.
        :type participant_role: TimerEligibleParticipantRoles
        """
        if participant_role is None:
            raise ValueError("Invalid value for `participant_role`, must not be `None`")

        self._participant_role = participant_role

    @property
    def timer_type(self):
        """Gets the timer_type of this ParticipantTimerConfiguration.


        :return: The timer_type of this ParticipantTimerConfiguration.
        :rtype: ParticipantTimerType
        """
        return self._timer_type

    @timer_type.setter
    def timer_type(self, timer_type):
        """Sets the timer_type of this ParticipantTimerConfiguration.


        :param timer_type: The timer_type of this ParticipantTimerConfiguration.
        :type timer_type: ParticipantTimerType
        """
        if timer_type is None:
            raise ValueError("Invalid value for `timer_type`, must not be `None`")

        self._timer_type = timer_type

    @property
    def timer_value(self):
        """Gets the timer_value of this ParticipantTimerConfiguration.


        :return: The timer_value of this ParticipantTimerConfiguration.
        :rtype: ParticipantTimerConfigurationTimerValue
        """
        return self._timer_value

    @timer_value.setter
    def timer_value(self, timer_value):
        """Sets the timer_value of this ParticipantTimerConfiguration.


        :param timer_value: The timer_value of this ParticipantTimerConfiguration.
        :type timer_value: ParticipantTimerConfigurationTimerValue
        """
        if timer_value is None:
            raise ValueError("Invalid value for `timer_value`, must not be `None`")

        self._timer_value = timer_value
