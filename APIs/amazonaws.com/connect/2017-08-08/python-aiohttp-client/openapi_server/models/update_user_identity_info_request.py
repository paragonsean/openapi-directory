# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_user_request_identity_info import CreateUserRequestIdentityInfo
from openapi_server import util


class UpdateUserIdentityInfoRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_info: CreateUserRequestIdentityInfo=None):
        """UpdateUserIdentityInfoRequest - a model defined in OpenAPI

        :param identity_info: The identity_info of this UpdateUserIdentityInfoRequest.
        """
        self.openapi_types = {
            'identity_info': CreateUserRequestIdentityInfo
        }

        self.attribute_map = {
            'identity_info': 'IdentityInfo'
        }

        self._identity_info = identity_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUserIdentityInfoRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUserIdentityInfo_request of this UpdateUserIdentityInfoRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_info(self):
        """Gets the identity_info of this UpdateUserIdentityInfoRequest.


        :return: The identity_info of this UpdateUserIdentityInfoRequest.
        :rtype: CreateUserRequestIdentityInfo
        """
        return self._identity_info

    @identity_info.setter
    def identity_info(self, identity_info):
        """Sets the identity_info of this UpdateUserIdentityInfoRequest.


        :param identity_info: The identity_info of this UpdateUserIdentityInfoRequest.
        :type identity_info: CreateUserRequestIdentityInfo
        """
        if identity_info is None:
            raise ValueError("Invalid value for `identity_info`, must not be `None`")

        self._identity_info = identity_info
