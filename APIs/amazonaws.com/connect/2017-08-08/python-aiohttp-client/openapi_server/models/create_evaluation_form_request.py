# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_evaluation_form_request_scoring_strategy import CreateEvaluationFormRequestScoringStrategy
from openapi_server.models.evaluation_form_item import EvaluationFormItem
from openapi_server import util


class CreateEvaluationFormRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, description: str=None, items: List[EvaluationFormItem]=None, scoring_strategy: CreateEvaluationFormRequestScoringStrategy=None, client_token: str=None):
        """CreateEvaluationFormRequest - a model defined in OpenAPI

        :param title: The title of this CreateEvaluationFormRequest.
        :param description: The description of this CreateEvaluationFormRequest.
        :param items: The items of this CreateEvaluationFormRequest.
        :param scoring_strategy: The scoring_strategy of this CreateEvaluationFormRequest.
        :param client_token: The client_token of this CreateEvaluationFormRequest.
        """
        self.openapi_types = {
            'title': str,
            'description': str,
            'items': List[EvaluationFormItem],
            'scoring_strategy': CreateEvaluationFormRequestScoringStrategy,
            'client_token': str
        }

        self.attribute_map = {
            'title': 'Title',
            'description': 'Description',
            'items': 'Items',
            'scoring_strategy': 'ScoringStrategy',
            'client_token': 'ClientToken'
        }

        self._title = title
        self._description = description
        self._items = items
        self._scoring_strategy = scoring_strategy
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEvaluationFormRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEvaluationForm_request of this CreateEvaluationFormRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this CreateEvaluationFormRequest.

        A title of the evaluation form.

        :return: The title of this CreateEvaluationFormRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateEvaluationFormRequest.

        A title of the evaluation form.

        :param title: The title of this CreateEvaluationFormRequest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 128:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `128`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def description(self):
        """Gets the description of this CreateEvaluationFormRequest.

        The description of the evaluation form.

        :return: The description of this CreateEvaluationFormRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEvaluationFormRequest.

        The description of the evaluation form.

        :param description: The description of this CreateEvaluationFormRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def items(self):
        """Gets the items of this CreateEvaluationFormRequest.

        Items that are part of the evaluation form. The total number of sections and questions must not exceed 100 each. Questions must be contained in a section.

        :return: The items of this CreateEvaluationFormRequest.
        :rtype: List[EvaluationFormItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CreateEvaluationFormRequest.

        Items that are part of the evaluation form. The total number of sections and questions must not exceed 100 each. Questions must be contained in a section.

        :param items: The items of this CreateEvaluationFormRequest.
        :type items: List[EvaluationFormItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) > 100:
            raise ValueError("Invalid value for `items`, number of items must be less than or equal to `100`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def scoring_strategy(self):
        """Gets the scoring_strategy of this CreateEvaluationFormRequest.


        :return: The scoring_strategy of this CreateEvaluationFormRequest.
        :rtype: CreateEvaluationFormRequestScoringStrategy
        """
        return self._scoring_strategy

    @scoring_strategy.setter
    def scoring_strategy(self, scoring_strategy):
        """Sets the scoring_strategy of this CreateEvaluationFormRequest.


        :param scoring_strategy: The scoring_strategy of this CreateEvaluationFormRequest.
        :type scoring_strategy: CreateEvaluationFormRequestScoringStrategy
        """

        self._scoring_strategy = scoring_strategy

    @property
    def client_token(self):
        """Gets the client_token of this CreateEvaluationFormRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this CreateEvaluationFormRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateEvaluationFormRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this CreateEvaluationFormRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token
