# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_status_state import AgentStatusState
from openapi_server.models.agent_status_type import AgentStatusType
from openapi_server import util


class AgentStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_status_arn: str=None, agent_status_id: str=None, name: str=None, description: str=None, type: AgentStatusType=None, display_order: int=None, state: AgentStatusState=None, tags: Dict=None):
        """AgentStatus - a model defined in OpenAPI

        :param agent_status_arn: The agent_status_arn of this AgentStatus.
        :param agent_status_id: The agent_status_id of this AgentStatus.
        :param name: The name of this AgentStatus.
        :param description: The description of this AgentStatus.
        :param type: The type of this AgentStatus.
        :param display_order: The display_order of this AgentStatus.
        :param state: The state of this AgentStatus.
        :param tags: The tags of this AgentStatus.
        """
        self.openapi_types = {
            'agent_status_arn': str,
            'agent_status_id': str,
            'name': str,
            'description': str,
            'type': AgentStatusType,
            'display_order': int,
            'state': AgentStatusState,
            'tags': Dict
        }

        self.attribute_map = {
            'agent_status_arn': 'AgentStatusARN',
            'agent_status_id': 'AgentStatusId',
            'name': 'Name',
            'description': 'Description',
            'type': 'Type',
            'display_order': 'DisplayOrder',
            'state': 'State',
            'tags': 'Tags'
        }

        self._agent_status_arn = agent_status_arn
        self._agent_status_id = agent_status_id
        self._name = name
        self._description = description
        self._type = type
        self._display_order = display_order
        self._state = state
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentStatus of this AgentStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_status_arn(self):
        """Gets the agent_status_arn of this AgentStatus.


        :return: The agent_status_arn of this AgentStatus.
        :rtype: str
        """
        return self._agent_status_arn

    @agent_status_arn.setter
    def agent_status_arn(self, agent_status_arn):
        """Sets the agent_status_arn of this AgentStatus.


        :param agent_status_arn: The agent_status_arn of this AgentStatus.
        :type agent_status_arn: str
        """

        self._agent_status_arn = agent_status_arn

    @property
    def agent_status_id(self):
        """Gets the agent_status_id of this AgentStatus.


        :return: The agent_status_id of this AgentStatus.
        :rtype: str
        """
        return self._agent_status_id

    @agent_status_id.setter
    def agent_status_id(self, agent_status_id):
        """Sets the agent_status_id of this AgentStatus.


        :param agent_status_id: The agent_status_id of this AgentStatus.
        :type agent_status_id: str
        """

        self._agent_status_id = agent_status_id

    @property
    def name(self):
        """Gets the name of this AgentStatus.


        :return: The name of this AgentStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AgentStatus.


        :param name: The name of this AgentStatus.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AgentStatus.


        :return: The description of this AgentStatus.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AgentStatus.


        :param description: The description of this AgentStatus.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this AgentStatus.


        :return: The type of this AgentStatus.
        :rtype: AgentStatusType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AgentStatus.


        :param type: The type of this AgentStatus.
        :type type: AgentStatusType
        """

        self._type = type

    @property
    def display_order(self):
        """Gets the display_order of this AgentStatus.


        :return: The display_order of this AgentStatus.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this AgentStatus.


        :param display_order: The display_order of this AgentStatus.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def state(self):
        """Gets the state of this AgentStatus.


        :return: The state of this AgentStatus.
        :rtype: AgentStatusState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AgentStatus.


        :param state: The state of this AgentStatus.
        :type state: AgentStatusState
        """

        self._state = state

    @property
    def tags(self):
        """Gets the tags of this AgentStatus.


        :return: The tags of this AgentStatus.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AgentStatus.


        :param tags: The tags of this AgentStatus.
        :type tags: Dict
        """

        self._tags = tags
