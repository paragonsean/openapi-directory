# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateVocabularyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, vocabulary_name: str=None, language_code: str=None, content: str=None, tags: Dict[str, str]=None):
        """CreateVocabularyRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateVocabularyRequest.
        :param vocabulary_name: The vocabulary_name of this CreateVocabularyRequest.
        :param language_code: The language_code of this CreateVocabularyRequest.
        :param content: The content of this CreateVocabularyRequest.
        :param tags: The tags of this CreateVocabularyRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'vocabulary_name': str,
            'language_code': str,
            'content': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'vocabulary_name': 'VocabularyName',
            'language_code': 'LanguageCode',
            'content': 'Content',
            'tags': 'Tags'
        }

        self._client_token = client_token
        self._vocabulary_name = vocabulary_name
        self._language_code = language_code
        self._content = content
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVocabularyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVocabulary_request of this CreateVocabularyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateVocabularyRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>. If a create request is received more than once with same client token, subsequent requests return the previous response without creating a vocabulary again.

        :return: The client_token of this CreateVocabularyRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateVocabularyRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>. If a create request is received more than once with same client token, subsequent requests return the previous response without creating a vocabulary again.

        :param client_token: The client_token of this CreateVocabularyRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token

    @property
    def vocabulary_name(self):
        """Gets the vocabulary_name of this CreateVocabularyRequest.

        A unique name of the custom vocabulary.

        :return: The vocabulary_name of this CreateVocabularyRequest.
        :rtype: str
        """
        return self._vocabulary_name

    @vocabulary_name.setter
    def vocabulary_name(self, vocabulary_name):
        """Sets the vocabulary_name of this CreateVocabularyRequest.

        A unique name of the custom vocabulary.

        :param vocabulary_name: The vocabulary_name of this CreateVocabularyRequest.
        :type vocabulary_name: str
        """
        if vocabulary_name is None:
            raise ValueError("Invalid value for `vocabulary_name`, must not be `None`")
        if vocabulary_name is not None and len(vocabulary_name) > 140:
            raise ValueError("Invalid value for `vocabulary_name`, length must be less than or equal to `140`")
        if vocabulary_name is not None and len(vocabulary_name) < 1:
            raise ValueError("Invalid value for `vocabulary_name`, length must be greater than or equal to `1`")
        if vocabulary_name is not None and not re.search(r'^[0-9a-zA-Z._-]+', vocabulary_name):
            raise ValueError("Invalid value for `vocabulary_name`, must be a follow pattern or equal to `/^[0-9a-zA-Z._-]+/`")

        self._vocabulary_name = vocabulary_name

    @property
    def language_code(self):
        """Gets the language_code of this CreateVocabularyRequest.

        The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html\">What is Amazon Transcribe?</a> 

        :return: The language_code of this CreateVocabularyRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this CreateVocabularyRequest.

        The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html\">What is Amazon Transcribe?</a> 

        :param language_code: The language_code of this CreateVocabularyRequest.
        :type language_code: str
        """
        allowed_values = ["ar-AE", "de-CH", "de-DE", "en-AB", "en-AU", "en-GB", "en-IE", "en-IN", "en-US", "en-WL", "es-ES", "es-US", "fr-CA", "fr-FR", "hi-IN", "it-IT", "ja-JP", "ko-KR", "pt-BR", "pt-PT", "zh-CN", "en-NZ", "en-ZA"]  # noqa: E501
        if language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `language_code` ({0}), must be one of {1}"
                .format(language_code, allowed_values)
            )

        self._language_code = language_code

    @property
    def content(self):
        """Gets the content of this CreateVocabularyRequest.

        The content of the custom vocabulary in plain-text format with a table of values. Each row in the table represents a word or a phrase, described with <code>Phrase</code>, <code>IPA</code>, <code>SoundsLike</code>, and <code>DisplayAs</code> fields. Separate the fields with TAB characters. The size limit is 50KB. For more information, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html#create-vocabulary-table\">Create a custom vocabulary using a table</a>.

        :return: The content of this CreateVocabularyRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateVocabularyRequest.

        The content of the custom vocabulary in plain-text format with a table of values. Each row in the table represents a word or a phrase, described with <code>Phrase</code>, <code>IPA</code>, <code>SoundsLike</code>, and <code>DisplayAs</code> fields. Separate the fields with TAB characters. The size limit is 50KB. For more information, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html#create-vocabulary-table\">Create a custom vocabulary using a table</a>.

        :param content: The content of this CreateVocabularyRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) > 60000:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `60000`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def tags(self):
        """Gets the tags of this CreateVocabularyRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateVocabularyRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateVocabularyRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateVocabularyRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
