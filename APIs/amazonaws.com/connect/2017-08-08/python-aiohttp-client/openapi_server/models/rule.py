# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_request_trigger_event_source import CreateRuleRequestTriggerEventSource
from openapi_server.models.rule_publish_status import RulePublishStatus
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, rule_id: str=None, rule_arn: str=None, trigger_event_source: CreateRuleRequestTriggerEventSource=None, function: str=None, actions: List=None, publish_status: RulePublishStatus=None, created_time: datetime=None, last_updated_time: datetime=None, last_updated_by: str=None, tags: Dict=None):
        """Rule - a model defined in OpenAPI

        :param name: The name of this Rule.
        :param rule_id: The rule_id of this Rule.
        :param rule_arn: The rule_arn of this Rule.
        :param trigger_event_source: The trigger_event_source of this Rule.
        :param function: The function of this Rule.
        :param actions: The actions of this Rule.
        :param publish_status: The publish_status of this Rule.
        :param created_time: The created_time of this Rule.
        :param last_updated_time: The last_updated_time of this Rule.
        :param last_updated_by: The last_updated_by of this Rule.
        :param tags: The tags of this Rule.
        """
        self.openapi_types = {
            'name': str,
            'rule_id': str,
            'rule_arn': str,
            'trigger_event_source': CreateRuleRequestTriggerEventSource,
            'function': str,
            'actions': List,
            'publish_status': RulePublishStatus,
            'created_time': datetime,
            'last_updated_time': datetime,
            'last_updated_by': str,
            'tags': Dict
        }

        self.attribute_map = {
            'name': 'Name',
            'rule_id': 'RuleId',
            'rule_arn': 'RuleArn',
            'trigger_event_source': 'TriggerEventSource',
            'function': 'Function',
            'actions': 'Actions',
            'publish_status': 'PublishStatus',
            'created_time': 'CreatedTime',
            'last_updated_time': 'LastUpdatedTime',
            'last_updated_by': 'LastUpdatedBy',
            'tags': 'Tags'
        }

        self._name = name
        self._rule_id = rule_id
        self._rule_arn = rule_arn
        self._trigger_event_source = trigger_event_source
        self._function = function
        self._actions = actions
        self._publish_status = publish_status
        self._created_time = created_time
        self._last_updated_time = last_updated_time
        self._last_updated_by = last_updated_by
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Rule.


        :return: The name of this Rule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rule.


        :param name: The name of this Rule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rule_id(self):
        """Gets the rule_id of this Rule.


        :return: The rule_id of this Rule.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this Rule.


        :param rule_id: The rule_id of this Rule.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def rule_arn(self):
        """Gets the rule_arn of this Rule.


        :return: The rule_arn of this Rule.
        :rtype: str
        """
        return self._rule_arn

    @rule_arn.setter
    def rule_arn(self, rule_arn):
        """Sets the rule_arn of this Rule.


        :param rule_arn: The rule_arn of this Rule.
        :type rule_arn: str
        """
        if rule_arn is None:
            raise ValueError("Invalid value for `rule_arn`, must not be `None`")

        self._rule_arn = rule_arn

    @property
    def trigger_event_source(self):
        """Gets the trigger_event_source of this Rule.


        :return: The trigger_event_source of this Rule.
        :rtype: CreateRuleRequestTriggerEventSource
        """
        return self._trigger_event_source

    @trigger_event_source.setter
    def trigger_event_source(self, trigger_event_source):
        """Sets the trigger_event_source of this Rule.


        :param trigger_event_source: The trigger_event_source of this Rule.
        :type trigger_event_source: CreateRuleRequestTriggerEventSource
        """
        if trigger_event_source is None:
            raise ValueError("Invalid value for `trigger_event_source`, must not be `None`")

        self._trigger_event_source = trigger_event_source

    @property
    def function(self):
        """Gets the function of this Rule.


        :return: The function of this Rule.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this Rule.


        :param function: The function of this Rule.
        :type function: str
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")

        self._function = function

    @property
    def actions(self):
        """Gets the actions of this Rule.


        :return: The actions of this Rule.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Rule.


        :param actions: The actions of this Rule.
        :type actions: List
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def publish_status(self):
        """Gets the publish_status of this Rule.


        :return: The publish_status of this Rule.
        :rtype: RulePublishStatus
        """
        return self._publish_status

    @publish_status.setter
    def publish_status(self, publish_status):
        """Sets the publish_status of this Rule.


        :param publish_status: The publish_status of this Rule.
        :type publish_status: RulePublishStatus
        """
        if publish_status is None:
            raise ValueError("Invalid value for `publish_status`, must not be `None`")

        self._publish_status = publish_status

    @property
    def created_time(self):
        """Gets the created_time of this Rule.


        :return: The created_time of this Rule.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Rule.


        :param created_time: The created_time of this Rule.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this Rule.


        :return: The last_updated_time of this Rule.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this Rule.


        :param last_updated_time: The last_updated_time of this Rule.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this Rule.


        :return: The last_updated_by of this Rule.
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this Rule.


        :param last_updated_by: The last_updated_by of this Rule.
        :type last_updated_by: str
        """
        if last_updated_by is None:
            raise ValueError("Invalid value for `last_updated_by`, must not be `None`")

        self._last_updated_by = last_updated_by

    @property
    def tags(self):
        """Gets the tags of this Rule.


        :return: The tags of this Rule.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Rule.


        :param tags: The tags of this Rule.
        :type tags: Dict
        """

        self._tags = tags
