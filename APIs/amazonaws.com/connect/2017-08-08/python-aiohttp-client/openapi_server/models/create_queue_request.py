# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_queue_request_outbound_caller_config import CreateQueueRequestOutboundCallerConfig
from openapi_server import util


class CreateQueueRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, outbound_caller_config: CreateQueueRequestOutboundCallerConfig=None, hours_of_operation_id: str=None, max_contacts: int=None, quick_connect_ids: List[str]=None, tags: Dict[str, str]=None):
        """CreateQueueRequest - a model defined in OpenAPI

        :param name: The name of this CreateQueueRequest.
        :param description: The description of this CreateQueueRequest.
        :param outbound_caller_config: The outbound_caller_config of this CreateQueueRequest.
        :param hours_of_operation_id: The hours_of_operation_id of this CreateQueueRequest.
        :param max_contacts: The max_contacts of this CreateQueueRequest.
        :param quick_connect_ids: The quick_connect_ids of this CreateQueueRequest.
        :param tags: The tags of this CreateQueueRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'outbound_caller_config': CreateQueueRequestOutboundCallerConfig,
            'hours_of_operation_id': str,
            'max_contacts': int,
            'quick_connect_ids': List[str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'outbound_caller_config': 'OutboundCallerConfig',
            'hours_of_operation_id': 'HoursOfOperationId',
            'max_contacts': 'MaxContacts',
            'quick_connect_ids': 'QuickConnectIds',
            'tags': 'Tags'
        }

        self._name = name
        self._description = description
        self._outbound_caller_config = outbound_caller_config
        self._hours_of_operation_id = hours_of_operation_id
        self._max_contacts = max_contacts
        self._quick_connect_ids = quick_connect_ids
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateQueueRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateQueue_request of this CreateQueueRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateQueueRequest.

        The name of the queue.

        :return: The name of this CreateQueueRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateQueueRequest.

        The name of the queue.

        :param name: The name of this CreateQueueRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateQueueRequest.

        The description of the queue.

        :return: The description of this CreateQueueRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateQueueRequest.

        The description of the queue.

        :param description: The description of this CreateQueueRequest.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def outbound_caller_config(self):
        """Gets the outbound_caller_config of this CreateQueueRequest.


        :return: The outbound_caller_config of this CreateQueueRequest.
        :rtype: CreateQueueRequestOutboundCallerConfig
        """
        return self._outbound_caller_config

    @outbound_caller_config.setter
    def outbound_caller_config(self, outbound_caller_config):
        """Sets the outbound_caller_config of this CreateQueueRequest.


        :param outbound_caller_config: The outbound_caller_config of this CreateQueueRequest.
        :type outbound_caller_config: CreateQueueRequestOutboundCallerConfig
        """

        self._outbound_caller_config = outbound_caller_config

    @property
    def hours_of_operation_id(self):
        """Gets the hours_of_operation_id of this CreateQueueRequest.

        The identifier for the hours of operation.

        :return: The hours_of_operation_id of this CreateQueueRequest.
        :rtype: str
        """
        return self._hours_of_operation_id

    @hours_of_operation_id.setter
    def hours_of_operation_id(self, hours_of_operation_id):
        """Sets the hours_of_operation_id of this CreateQueueRequest.

        The identifier for the hours of operation.

        :param hours_of_operation_id: The hours_of_operation_id of this CreateQueueRequest.
        :type hours_of_operation_id: str
        """
        if hours_of_operation_id is None:
            raise ValueError("Invalid value for `hours_of_operation_id`, must not be `None`")

        self._hours_of_operation_id = hours_of_operation_id

    @property
    def max_contacts(self):
        """Gets the max_contacts of this CreateQueueRequest.

        The maximum number of contacts that can be in the queue before it is considered full.

        :return: The max_contacts of this CreateQueueRequest.
        :rtype: int
        """
        return self._max_contacts

    @max_contacts.setter
    def max_contacts(self, max_contacts):
        """Sets the max_contacts of this CreateQueueRequest.

        The maximum number of contacts that can be in the queue before it is considered full.

        :param max_contacts: The max_contacts of this CreateQueueRequest.
        :type max_contacts: int
        """
        if max_contacts is not None and max_contacts < 0:
            raise ValueError("Invalid value for `max_contacts`, must be a value greater than or equal to `0`")

        self._max_contacts = max_contacts

    @property
    def quick_connect_ids(self):
        """Gets the quick_connect_ids of this CreateQueueRequest.

        The quick connects available to agents who are working the queue.

        :return: The quick_connect_ids of this CreateQueueRequest.
        :rtype: List[str]
        """
        return self._quick_connect_ids

    @quick_connect_ids.setter
    def quick_connect_ids(self, quick_connect_ids):
        """Sets the quick_connect_ids of this CreateQueueRequest.

        The quick connects available to agents who are working the queue.

        :param quick_connect_ids: The quick_connect_ids of this CreateQueueRequest.
        :type quick_connect_ids: List[str]
        """
        if quick_connect_ids is not None and len(quick_connect_ids) > 50:
            raise ValueError("Invalid value for `quick_connect_ids`, number of items must be less than or equal to `50`")
        if quick_connect_ids is not None and len(quick_connect_ids) < 1:
            raise ValueError("Invalid value for `quick_connect_ids`, number of items must be greater than or equal to `1`")

        self._quick_connect_ids = quick_connect_ids

    @property
    def tags(self):
        """Gets the tags of this CreateQueueRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateQueueRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateQueueRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateQueueRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
