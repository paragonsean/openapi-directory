# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_answer_input import EvaluationAnswerInput
from openapi_server.models.evaluation_note import EvaluationNote
from openapi_server import util


class UpdateContactEvaluationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answers: Dict[str, EvaluationAnswerInput]=None, notes: Dict[str, EvaluationNote]=None):
        """UpdateContactEvaluationRequest - a model defined in OpenAPI

        :param answers: The answers of this UpdateContactEvaluationRequest.
        :param notes: The notes of this UpdateContactEvaluationRequest.
        """
        self.openapi_types = {
            'answers': Dict[str, EvaluationAnswerInput],
            'notes': Dict[str, EvaluationNote]
        }

        self.attribute_map = {
            'answers': 'Answers',
            'notes': 'Notes'
        }

        self._answers = answers
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContactEvaluationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContactEvaluation_request of this UpdateContactEvaluationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answers(self):
        """Gets the answers of this UpdateContactEvaluationRequest.

        A map of question identifiers to answer value.

        :return: The answers of this UpdateContactEvaluationRequest.
        :rtype: Dict[str, EvaluationAnswerInput]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this UpdateContactEvaluationRequest.

        A map of question identifiers to answer value.

        :param answers: The answers of this UpdateContactEvaluationRequest.
        :type answers: Dict[str, EvaluationAnswerInput]
        """
        if answers is not None and len(answers) > 100:
            raise ValueError("Invalid value for `answers`, number of items must be less than or equal to `100`")

        self._answers = answers

    @property
    def notes(self):
        """Gets the notes of this UpdateContactEvaluationRequest.

        A map of question identifiers to note value.

        :return: The notes of this UpdateContactEvaluationRequest.
        :rtype: Dict[str, EvaluationNote]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateContactEvaluationRequest.

        A map of question identifiers to note value.

        :param notes: The notes of this UpdateContactEvaluationRequest.
        :type notes: Dict[str, EvaluationNote]
        """
        if notes is not None and len(notes) > 100:
            raise ValueError("Invalid value for `notes`, number of items must be less than or equal to `100`")

        self._notes = notes
