# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_chat_contact_request_initial_message import StartChatContactRequestInitialMessage
from openapi_server.models.start_chat_contact_request_participant_details import StartChatContactRequestParticipantDetails
from openapi_server.models.start_chat_contact_request_persistent_chat import StartChatContactRequestPersistentChat
from openapi_server import util


class StartChatContactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, contact_flow_id: str=None, attributes: Dict[str, str]=None, participant_details: StartChatContactRequestParticipantDetails=None, initial_message: StartChatContactRequestInitialMessage=None, client_token: str=None, chat_duration_in_minutes: int=None, supported_messaging_content_types: List[str]=None, persistent_chat: StartChatContactRequestPersistentChat=None, related_contact_id: str=None):
        """StartChatContactRequest - a model defined in OpenAPI

        :param instance_id: The instance_id of this StartChatContactRequest.
        :param contact_flow_id: The contact_flow_id of this StartChatContactRequest.
        :param attributes: The attributes of this StartChatContactRequest.
        :param participant_details: The participant_details of this StartChatContactRequest.
        :param initial_message: The initial_message of this StartChatContactRequest.
        :param client_token: The client_token of this StartChatContactRequest.
        :param chat_duration_in_minutes: The chat_duration_in_minutes of this StartChatContactRequest.
        :param supported_messaging_content_types: The supported_messaging_content_types of this StartChatContactRequest.
        :param persistent_chat: The persistent_chat of this StartChatContactRequest.
        :param related_contact_id: The related_contact_id of this StartChatContactRequest.
        """
        self.openapi_types = {
            'instance_id': str,
            'contact_flow_id': str,
            'attributes': Dict[str, str],
            'participant_details': StartChatContactRequestParticipantDetails,
            'initial_message': StartChatContactRequestInitialMessage,
            'client_token': str,
            'chat_duration_in_minutes': int,
            'supported_messaging_content_types': List[str],
            'persistent_chat': StartChatContactRequestPersistentChat,
            'related_contact_id': str
        }

        self.attribute_map = {
            'instance_id': 'InstanceId',
            'contact_flow_id': 'ContactFlowId',
            'attributes': 'Attributes',
            'participant_details': 'ParticipantDetails',
            'initial_message': 'InitialMessage',
            'client_token': 'ClientToken',
            'chat_duration_in_minutes': 'ChatDurationInMinutes',
            'supported_messaging_content_types': 'SupportedMessagingContentTypes',
            'persistent_chat': 'PersistentChat',
            'related_contact_id': 'RelatedContactId'
        }

        self._instance_id = instance_id
        self._contact_flow_id = contact_flow_id
        self._attributes = attributes
        self._participant_details = participant_details
        self._initial_message = initial_message
        self._client_token = client_token
        self._chat_duration_in_minutes = chat_duration_in_minutes
        self._supported_messaging_content_types = supported_messaging_content_types
        self._persistent_chat = persistent_chat
        self._related_contact_id = related_contact_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartChatContactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartChatContact_request of this StartChatContactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this StartChatContactRequest.

        The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.

        :return: The instance_id of this StartChatContactRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this StartChatContactRequest.

        The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.

        :param instance_id: The instance_id of this StartChatContactRequest.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")
        if instance_id is not None and len(instance_id) > 100:
            raise ValueError("Invalid value for `instance_id`, length must be less than or equal to `100`")
        if instance_id is not None and len(instance_id) < 1:
            raise ValueError("Invalid value for `instance_id`, length must be greater than or equal to `1`")

        self._instance_id = instance_id

    @property
    def contact_flow_id(self):
        """Gets the contact_flow_id of this StartChatContactRequest.

        <p>The identifier of the flow for initiating the chat. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing</b>, <b>Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold: </p> <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>846ec553-a005-41c0-8341-xxxxxxxxxxxx</b> </p>

        :return: The contact_flow_id of this StartChatContactRequest.
        :rtype: str
        """
        return self._contact_flow_id

    @contact_flow_id.setter
    def contact_flow_id(self, contact_flow_id):
        """Sets the contact_flow_id of this StartChatContactRequest.

        <p>The identifier of the flow for initiating the chat. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing</b>, <b>Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold: </p> <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>846ec553-a005-41c0-8341-xxxxxxxxxxxx</b> </p>

        :param contact_flow_id: The contact_flow_id of this StartChatContactRequest.
        :type contact_flow_id: str
        """
        if contact_flow_id is None:
            raise ValueError("Invalid value for `contact_flow_id`, must not be `None`")
        if contact_flow_id is not None and len(contact_flow_id) > 500:
            raise ValueError("Invalid value for `contact_flow_id`, length must be less than or equal to `500`")

        self._contact_flow_id = contact_flow_id

    @property
    def attributes(self):
        """Gets the attributes of this StartChatContactRequest.

        <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows just like any other contact attributes. </p> <p>There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>

        :return: The attributes of this StartChatContactRequest.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this StartChatContactRequest.

        <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows just like any other contact attributes. </p> <p>There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>

        :param attributes: The attributes of this StartChatContactRequest.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def participant_details(self):
        """Gets the participant_details of this StartChatContactRequest.


        :return: The participant_details of this StartChatContactRequest.
        :rtype: StartChatContactRequestParticipantDetails
        """
        return self._participant_details

    @participant_details.setter
    def participant_details(self, participant_details):
        """Sets the participant_details of this StartChatContactRequest.


        :param participant_details: The participant_details of this StartChatContactRequest.
        :type participant_details: StartChatContactRequestParticipantDetails
        """
        if participant_details is None:
            raise ValueError("Invalid value for `participant_details`, must not be `None`")

        self._participant_details = participant_details

    @property
    def initial_message(self):
        """Gets the initial_message of this StartChatContactRequest.


        :return: The initial_message of this StartChatContactRequest.
        :rtype: StartChatContactRequestInitialMessage
        """
        return self._initial_message

    @initial_message.setter
    def initial_message(self, initial_message):
        """Sets the initial_message of this StartChatContactRequest.


        :param initial_message: The initial_message of this StartChatContactRequest.
        :type initial_message: StartChatContactRequestInitialMessage
        """

        self._initial_message = initial_message

    @property
    def client_token(self):
        """Gets the client_token of this StartChatContactRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this StartChatContactRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartChatContactRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this StartChatContactRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token

    @property
    def chat_duration_in_minutes(self):
        """Gets the chat_duration_in_minutes of this StartChatContactRequest.

        The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).

        :return: The chat_duration_in_minutes of this StartChatContactRequest.
        :rtype: int
        """
        return self._chat_duration_in_minutes

    @chat_duration_in_minutes.setter
    def chat_duration_in_minutes(self, chat_duration_in_minutes):
        """Sets the chat_duration_in_minutes of this StartChatContactRequest.

        The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).

        :param chat_duration_in_minutes: The chat_duration_in_minutes of this StartChatContactRequest.
        :type chat_duration_in_minutes: int
        """
        if chat_duration_in_minutes is not None and chat_duration_in_minutes > 10080:
            raise ValueError("Invalid value for `chat_duration_in_minutes`, must be a value less than or equal to `10080`")
        if chat_duration_in_minutes is not None and chat_duration_in_minutes < 60:
            raise ValueError("Invalid value for `chat_duration_in_minutes`, must be a value greater than or equal to `60`")

        self._chat_duration_in_minutes = chat_duration_in_minutes

    @property
    def supported_messaging_content_types(self):
        """Gets the supported_messaging_content_types of this StartChatContactRequest.

        <p>The supported chat message content types. Supported types are <code>text/plain</code>, <code>text/markdown</code>, <code>application/json</code>, <code>application/vnd.amazonaws.connect.message.interactive</code>, and <code>application/vnd.amazonaws.connect.message.interactive.response</code>. </p> <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>: <code>[text/plain, text/markdown, application/json]</code>, <code>[text/markdown, text/plain]</code>, <code>[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response]</code>. </p> <note> <p>The type <code>application/vnd.amazonaws.connect.message.interactive</code> is required to use the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/show-view-block.html\">Show view</a> flow block.</p> </note>

        :return: The supported_messaging_content_types of this StartChatContactRequest.
        :rtype: List[str]
        """
        return self._supported_messaging_content_types

    @supported_messaging_content_types.setter
    def supported_messaging_content_types(self, supported_messaging_content_types):
        """Sets the supported_messaging_content_types of this StartChatContactRequest.

        <p>The supported chat message content types. Supported types are <code>text/plain</code>, <code>text/markdown</code>, <code>application/json</code>, <code>application/vnd.amazonaws.connect.message.interactive</code>, and <code>application/vnd.amazonaws.connect.message.interactive.response</code>. </p> <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>: <code>[text/plain, text/markdown, application/json]</code>, <code>[text/markdown, text/plain]</code>, <code>[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response]</code>. </p> <note> <p>The type <code>application/vnd.amazonaws.connect.message.interactive</code> is required to use the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/show-view-block.html\">Show view</a> flow block.</p> </note>

        :param supported_messaging_content_types: The supported_messaging_content_types of this StartChatContactRequest.
        :type supported_messaging_content_types: List[str]
        """

        self._supported_messaging_content_types = supported_messaging_content_types

    @property
    def persistent_chat(self):
        """Gets the persistent_chat of this StartChatContactRequest.


        :return: The persistent_chat of this StartChatContactRequest.
        :rtype: StartChatContactRequestPersistentChat
        """
        return self._persistent_chat

    @persistent_chat.setter
    def persistent_chat(self, persistent_chat):
        """Sets the persistent_chat of this StartChatContactRequest.


        :param persistent_chat: The persistent_chat of this StartChatContactRequest.
        :type persistent_chat: StartChatContactRequestPersistentChat
        """

        self._persistent_chat = persistent_chat

    @property
    def related_contact_id(self):
        """Gets the related_contact_id of this StartChatContactRequest.

        <p>The unique identifier for an Amazon Connect contact. This identifier is related to the chat starting.</p> <note> <p>You cannot provide data for both RelatedContactId and PersistentChat. </p> </note>

        :return: The related_contact_id of this StartChatContactRequest.
        :rtype: str
        """
        return self._related_contact_id

    @related_contact_id.setter
    def related_contact_id(self, related_contact_id):
        """Sets the related_contact_id of this StartChatContactRequest.

        <p>The unique identifier for an Amazon Connect contact. This identifier is related to the chat starting.</p> <note> <p>You cannot provide data for both RelatedContactId and PersistentChat. </p> </note>

        :param related_contact_id: The related_contact_id of this StartChatContactRequest.
        :type related_contact_id: str
        """
        if related_contact_id is not None and len(related_contact_id) > 256:
            raise ValueError("Invalid value for `related_contact_id`, length must be less than or equal to `256`")
        if related_contact_id is not None and len(related_contact_id) < 1:
            raise ValueError("Invalid value for `related_contact_id`, length must be greater than or equal to `1`")

        self._related_contact_id = related_contact_id
