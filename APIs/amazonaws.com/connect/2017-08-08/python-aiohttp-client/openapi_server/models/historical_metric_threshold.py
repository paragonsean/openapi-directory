# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comparison import Comparison
from openapi_server import util


class HistoricalMetricThreshold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison: Comparison=None, threshold_value: float=None):
        """HistoricalMetricThreshold - a model defined in OpenAPI

        :param comparison: The comparison of this HistoricalMetricThreshold.
        :param threshold_value: The threshold_value of this HistoricalMetricThreshold.
        """
        self.openapi_types = {
            'comparison': Comparison,
            'threshold_value': float
        }

        self.attribute_map = {
            'comparison': 'Comparison',
            'threshold_value': 'ThresholdValue'
        }

        self._comparison = comparison
        self._threshold_value = threshold_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoricalMetricThreshold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoricalMetric_Threshold of this HistoricalMetricThreshold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison(self):
        """Gets the comparison of this HistoricalMetricThreshold.


        :return: The comparison of this HistoricalMetricThreshold.
        :rtype: Comparison
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this HistoricalMetricThreshold.


        :param comparison: The comparison of this HistoricalMetricThreshold.
        :type comparison: Comparison
        """

        self._comparison = comparison

    @property
    def threshold_value(self):
        """Gets the threshold_value of this HistoricalMetricThreshold.


        :return: The threshold_value of this HistoricalMetricThreshold.
        :rtype: float
        """
        return self._threshold_value

    @threshold_value.setter
    def threshold_value(self, threshold_value):
        """Sets the threshold_value of this HistoricalMetricThreshold.


        :param threshold_value: The threshold_value of this HistoricalMetricThreshold.
        :type threshold_value: float
        """

        self._threshold_value = threshold_value
