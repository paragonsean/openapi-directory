# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateDefaultVocabularyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vocabulary_id: str=None):
        """AssociateDefaultVocabularyRequest - a model defined in OpenAPI

        :param vocabulary_id: The vocabulary_id of this AssociateDefaultVocabularyRequest.
        """
        self.openapi_types = {
            'vocabulary_id': str
        }

        self.attribute_map = {
            'vocabulary_id': 'VocabularyId'
        }

        self._vocabulary_id = vocabulary_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateDefaultVocabularyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateDefaultVocabulary_request of this AssociateDefaultVocabularyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vocabulary_id(self):
        """Gets the vocabulary_id of this AssociateDefaultVocabularyRequest.

        The identifier of the custom vocabulary. If this is empty, the default is set to none.

        :return: The vocabulary_id of this AssociateDefaultVocabularyRequest.
        :rtype: str
        """
        return self._vocabulary_id

    @vocabulary_id.setter
    def vocabulary_id(self, vocabulary_id):
        """Sets the vocabulary_id of this AssociateDefaultVocabularyRequest.

        The identifier of the custom vocabulary. If this is empty, the default is set to none.

        :param vocabulary_id: The vocabulary_id of this AssociateDefaultVocabularyRequest.
        :type vocabulary_id: str
        """
        if vocabulary_id is not None and len(vocabulary_id) > 500:
            raise ValueError("Invalid value for `vocabulary_id`, length must be less than or equal to `500`")
        if vocabulary_id is not None and len(vocabulary_id) < 1:
            raise ValueError("Invalid value for `vocabulary_id`, length must be greater than or equal to `1`")

        self._vocabulary_id = vocabulary_id
