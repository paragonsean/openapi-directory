# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateUseCaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, use_case_type: str=None, tags: Dict[str, str]=None):
        """CreateUseCaseRequest - a model defined in OpenAPI

        :param use_case_type: The use_case_type of this CreateUseCaseRequest.
        :param tags: The tags of this CreateUseCaseRequest.
        """
        self.openapi_types = {
            'use_case_type': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'use_case_type': 'UseCaseType',
            'tags': 'Tags'
        }

        self._use_case_type = use_case_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUseCaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUseCase_request of this CreateUseCaseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def use_case_type(self):
        """Gets the use_case_type of this CreateUseCaseRequest.

        The type of use case to associate to the integration association. Each integration association can have only one of each use case type.

        :return: The use_case_type of this CreateUseCaseRequest.
        :rtype: str
        """
        return self._use_case_type

    @use_case_type.setter
    def use_case_type(self, use_case_type):
        """Sets the use_case_type of this CreateUseCaseRequest.

        The type of use case to associate to the integration association. Each integration association can have only one of each use case type.

        :param use_case_type: The use_case_type of this CreateUseCaseRequest.
        :type use_case_type: str
        """
        allowed_values = ["RULES_EVALUATION", "CONNECT_CAMPAIGNS"]  # noqa: E501
        if use_case_type not in allowed_values:
            raise ValueError(
                "Invalid value for `use_case_type` ({0}), must be one of {1}"
                .format(use_case_type, allowed_values)
            )

        self._use_case_type = use_case_type

    @property
    def tags(self):
        """Gets the tags of this CreateUseCaseRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateUseCaseRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateUseCaseRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateUseCaseRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
