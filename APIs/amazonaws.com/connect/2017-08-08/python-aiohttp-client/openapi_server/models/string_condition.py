# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.string_comparison_type import StringComparisonType
from openapi_server import util


class StringCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_name: str=None, value: str=None, comparison_type: StringComparisonType=None):
        """StringCondition - a model defined in OpenAPI

        :param field_name: The field_name of this StringCondition.
        :param value: The value of this StringCondition.
        :param comparison_type: The comparison_type of this StringCondition.
        """
        self.openapi_types = {
            'field_name': str,
            'value': str,
            'comparison_type': StringComparisonType
        }

        self.attribute_map = {
            'field_name': 'FieldName',
            'value': 'Value',
            'comparison_type': 'ComparisonType'
        }

        self._field_name = field_name
        self._value = value
        self._comparison_type = comparison_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StringCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StringCondition of this StringCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_name(self):
        """Gets the field_name of this StringCondition.


        :return: The field_name of this StringCondition.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this StringCondition.


        :param field_name: The field_name of this StringCondition.
        :type field_name: str
        """

        self._field_name = field_name

    @property
    def value(self):
        """Gets the value of this StringCondition.


        :return: The value of this StringCondition.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this StringCondition.


        :param value: The value of this StringCondition.
        :type value: str
        """

        self._value = value

    @property
    def comparison_type(self):
        """Gets the comparison_type of this StringCondition.


        :return: The comparison_type of this StringCondition.
        :rtype: StringComparisonType
        """
        return self._comparison_type

    @comparison_type.setter
    def comparison_type(self, comparison_type):
        """Sets the comparison_type of this StringCondition.


        :param comparison_type: The comparison_type of this StringCondition.
        :type comparison_type: StringComparisonType
        """

        self._comparison_type = comparison_type
