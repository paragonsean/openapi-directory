# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel import Channel
from openapi_server.models.media_concurrency_cross_channel_behavior import MediaConcurrencyCrossChannelBehavior
from openapi_server import util


class MediaConcurrency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: Channel=None, concurrency: int=None, cross_channel_behavior: MediaConcurrencyCrossChannelBehavior=None):
        """MediaConcurrency - a model defined in OpenAPI

        :param channel: The channel of this MediaConcurrency.
        :param concurrency: The concurrency of this MediaConcurrency.
        :param cross_channel_behavior: The cross_channel_behavior of this MediaConcurrency.
        """
        self.openapi_types = {
            'channel': Channel,
            'concurrency': int,
            'cross_channel_behavior': MediaConcurrencyCrossChannelBehavior
        }

        self.attribute_map = {
            'channel': 'Channel',
            'concurrency': 'Concurrency',
            'cross_channel_behavior': 'CrossChannelBehavior'
        }

        self._channel = channel
        self._concurrency = concurrency
        self._cross_channel_behavior = cross_channel_behavior

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaConcurrency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaConcurrency of this MediaConcurrency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this MediaConcurrency.


        :return: The channel of this MediaConcurrency.
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MediaConcurrency.


        :param channel: The channel of this MediaConcurrency.
        :type channel: Channel
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def concurrency(self):
        """Gets the concurrency of this MediaConcurrency.


        :return: The concurrency of this MediaConcurrency.
        :rtype: int
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this MediaConcurrency.


        :param concurrency: The concurrency of this MediaConcurrency.
        :type concurrency: int
        """
        if concurrency is None:
            raise ValueError("Invalid value for `concurrency`, must not be `None`")

        self._concurrency = concurrency

    @property
    def cross_channel_behavior(self):
        """Gets the cross_channel_behavior of this MediaConcurrency.


        :return: The cross_channel_behavior of this MediaConcurrency.
        :rtype: MediaConcurrencyCrossChannelBehavior
        """
        return self._cross_channel_behavior

    @cross_channel_behavior.setter
    def cross_channel_behavior(self, cross_channel_behavior):
        """Sets the cross_channel_behavior of this MediaConcurrency.


        :param cross_channel_behavior: The cross_channel_behavior of this MediaConcurrency.
        :type cross_channel_behavior: MediaConcurrencyCrossChannelBehavior
        """

        self._cross_channel_behavior = cross_channel_behavior
