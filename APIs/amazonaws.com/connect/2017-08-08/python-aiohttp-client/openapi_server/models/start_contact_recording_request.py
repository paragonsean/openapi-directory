# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_contact_recording_request_voice_recording_configuration import StartContactRecordingRequestVoiceRecordingConfiguration
from openapi_server import util


class StartContactRecordingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, contact_id: str=None, initial_contact_id: str=None, voice_recording_configuration: StartContactRecordingRequestVoiceRecordingConfiguration=None):
        """StartContactRecordingRequest - a model defined in OpenAPI

        :param instance_id: The instance_id of this StartContactRecordingRequest.
        :param contact_id: The contact_id of this StartContactRecordingRequest.
        :param initial_contact_id: The initial_contact_id of this StartContactRecordingRequest.
        :param voice_recording_configuration: The voice_recording_configuration of this StartContactRecordingRequest.
        """
        self.openapi_types = {
            'instance_id': str,
            'contact_id': str,
            'initial_contact_id': str,
            'voice_recording_configuration': StartContactRecordingRequestVoiceRecordingConfiguration
        }

        self.attribute_map = {
            'instance_id': 'InstanceId',
            'contact_id': 'ContactId',
            'initial_contact_id': 'InitialContactId',
            'voice_recording_configuration': 'VoiceRecordingConfiguration'
        }

        self._instance_id = instance_id
        self._contact_id = contact_id
        self._initial_contact_id = initial_contact_id
        self._voice_recording_configuration = voice_recording_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartContactRecordingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartContactRecording_request of this StartContactRecordingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this StartContactRecordingRequest.

        The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.

        :return: The instance_id of this StartContactRecordingRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this StartContactRecordingRequest.

        The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.

        :param instance_id: The instance_id of this StartContactRecordingRequest.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")
        if instance_id is not None and len(instance_id) > 100:
            raise ValueError("Invalid value for `instance_id`, length must be less than or equal to `100`")
        if instance_id is not None and len(instance_id) < 1:
            raise ValueError("Invalid value for `instance_id`, length must be greater than or equal to `1`")

        self._instance_id = instance_id

    @property
    def contact_id(self):
        """Gets the contact_id of this StartContactRecordingRequest.

        The identifier of the contact.

        :return: The contact_id of this StartContactRecordingRequest.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this StartContactRecordingRequest.

        The identifier of the contact.

        :param contact_id: The contact_id of this StartContactRecordingRequest.
        :type contact_id: str
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")
        if contact_id is not None and len(contact_id) > 256:
            raise ValueError("Invalid value for `contact_id`, length must be less than or equal to `256`")
        if contact_id is not None and len(contact_id) < 1:
            raise ValueError("Invalid value for `contact_id`, length must be greater than or equal to `1`")

        self._contact_id = contact_id

    @property
    def initial_contact_id(self):
        """Gets the initial_contact_id of this StartContactRecordingRequest.

        The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.

        :return: The initial_contact_id of this StartContactRecordingRequest.
        :rtype: str
        """
        return self._initial_contact_id

    @initial_contact_id.setter
    def initial_contact_id(self, initial_contact_id):
        """Sets the initial_contact_id of this StartContactRecordingRequest.

        The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.

        :param initial_contact_id: The initial_contact_id of this StartContactRecordingRequest.
        :type initial_contact_id: str
        """
        if initial_contact_id is None:
            raise ValueError("Invalid value for `initial_contact_id`, must not be `None`")
        if initial_contact_id is not None and len(initial_contact_id) > 256:
            raise ValueError("Invalid value for `initial_contact_id`, length must be less than or equal to `256`")
        if initial_contact_id is not None and len(initial_contact_id) < 1:
            raise ValueError("Invalid value for `initial_contact_id`, length must be greater than or equal to `1`")

        self._initial_contact_id = initial_contact_id

    @property
    def voice_recording_configuration(self):
        """Gets the voice_recording_configuration of this StartContactRecordingRequest.


        :return: The voice_recording_configuration of this StartContactRecordingRequest.
        :rtype: StartContactRecordingRequestVoiceRecordingConfiguration
        """
        return self._voice_recording_configuration

    @voice_recording_configuration.setter
    def voice_recording_configuration(self, voice_recording_configuration):
        """Sets the voice_recording_configuration of this StartContactRecordingRequest.


        :param voice_recording_configuration: The voice_recording_configuration of this StartContactRecordingRequest.
        :type voice_recording_configuration: StartContactRecordingRequestVoiceRecordingConfiguration
        """
        if voice_recording_configuration is None:
            raise ValueError("Invalid value for `voice_recording_configuration`, must not be `None`")

        self._voice_recording_configuration = voice_recording_configuration
