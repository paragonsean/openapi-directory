# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitor_capability import MonitorCapability
from openapi_server import util


class MonitorContactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, contact_id: str=None, user_id: str=None, allowed_monitor_capabilities: List[MonitorCapability]=None, client_token: str=None):
        """MonitorContactRequest - a model defined in OpenAPI

        :param instance_id: The instance_id of this MonitorContactRequest.
        :param contact_id: The contact_id of this MonitorContactRequest.
        :param user_id: The user_id of this MonitorContactRequest.
        :param allowed_monitor_capabilities: The allowed_monitor_capabilities of this MonitorContactRequest.
        :param client_token: The client_token of this MonitorContactRequest.
        """
        self.openapi_types = {
            'instance_id': str,
            'contact_id': str,
            'user_id': str,
            'allowed_monitor_capabilities': List[MonitorCapability],
            'client_token': str
        }

        self.attribute_map = {
            'instance_id': 'InstanceId',
            'contact_id': 'ContactId',
            'user_id': 'UserId',
            'allowed_monitor_capabilities': 'AllowedMonitorCapabilities',
            'client_token': 'ClientToken'
        }

        self._instance_id = instance_id
        self._contact_id = contact_id
        self._user_id = user_id
        self._allowed_monitor_capabilities = allowed_monitor_capabilities
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorContactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitorContact_request of this MonitorContactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this MonitorContactRequest.

        The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

        :return: The instance_id of this MonitorContactRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this MonitorContactRequest.

        The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

        :param instance_id: The instance_id of this MonitorContactRequest.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")
        if instance_id is not None and len(instance_id) > 100:
            raise ValueError("Invalid value for `instance_id`, length must be less than or equal to `100`")
        if instance_id is not None and len(instance_id) < 1:
            raise ValueError("Invalid value for `instance_id`, length must be greater than or equal to `1`")

        self._instance_id = instance_id

    @property
    def contact_id(self):
        """Gets the contact_id of this MonitorContactRequest.

        The identifier of the contact.

        :return: The contact_id of this MonitorContactRequest.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this MonitorContactRequest.

        The identifier of the contact.

        :param contact_id: The contact_id of this MonitorContactRequest.
        :type contact_id: str
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")
        if contact_id is not None and len(contact_id) > 256:
            raise ValueError("Invalid value for `contact_id`, length must be less than or equal to `256`")
        if contact_id is not None and len(contact_id) < 1:
            raise ValueError("Invalid value for `contact_id`, length must be greater than or equal to `1`")

        self._contact_id = contact_id

    @property
    def user_id(self):
        """Gets the user_id of this MonitorContactRequest.

        The identifier of the user account.

        :return: The user_id of this MonitorContactRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MonitorContactRequest.

        The identifier of the user account.

        :param user_id: The user_id of this MonitorContactRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and len(user_id) > 256:
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `256`")
        if user_id is not None and len(user_id) < 1:
            raise ValueError("Invalid value for `user_id`, length must be greater than or equal to `1`")

        self._user_id = user_id

    @property
    def allowed_monitor_capabilities(self):
        """Gets the allowed_monitor_capabilities of this MonitorContactRequest.

        Specify which monitoring actions the user is allowed to take. For example, whether the user is allowed to escalate from silent monitoring to barge.

        :return: The allowed_monitor_capabilities of this MonitorContactRequest.
        :rtype: List[MonitorCapability]
        """
        return self._allowed_monitor_capabilities

    @allowed_monitor_capabilities.setter
    def allowed_monitor_capabilities(self, allowed_monitor_capabilities):
        """Sets the allowed_monitor_capabilities of this MonitorContactRequest.

        Specify which monitoring actions the user is allowed to take. For example, whether the user is allowed to escalate from silent monitoring to barge.

        :param allowed_monitor_capabilities: The allowed_monitor_capabilities of this MonitorContactRequest.
        :type allowed_monitor_capabilities: List[MonitorCapability]
        """
        if allowed_monitor_capabilities is not None and len(allowed_monitor_capabilities) > 2:
            raise ValueError("Invalid value for `allowed_monitor_capabilities`, number of items must be less than or equal to `2`")

        self._allowed_monitor_capabilities = allowed_monitor_capabilities

    @property
    def client_token(self):
        """Gets the client_token of this MonitorContactRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this MonitorContactRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this MonitorContactRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this MonitorContactRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token
