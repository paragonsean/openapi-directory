# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ClaimPhoneNumberRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_arn: str=None, phone_number: str=None, phone_number_description: str=None, tags: Dict[str, str]=None, client_token: str=None):
        """ClaimPhoneNumberRequest - a model defined in OpenAPI

        :param target_arn: The target_arn of this ClaimPhoneNumberRequest.
        :param phone_number: The phone_number of this ClaimPhoneNumberRequest.
        :param phone_number_description: The phone_number_description of this ClaimPhoneNumberRequest.
        :param tags: The tags of this ClaimPhoneNumberRequest.
        :param client_token: The client_token of this ClaimPhoneNumberRequest.
        """
        self.openapi_types = {
            'target_arn': str,
            'phone_number': str,
            'phone_number_description': str,
            'tags': Dict[str, str],
            'client_token': str
        }

        self.attribute_map = {
            'target_arn': 'TargetArn',
            'phone_number': 'PhoneNumber',
            'phone_number_description': 'PhoneNumberDescription',
            'tags': 'Tags',
            'client_token': 'ClientToken'
        }

        self._target_arn = target_arn
        self._phone_number = phone_number
        self._phone_number_description = phone_number_description
        self._tags = tags
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClaimPhoneNumberRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClaimPhoneNumber_request of this ClaimPhoneNumberRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_arn(self):
        """Gets the target_arn of this ClaimPhoneNumberRequest.

        The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to.

        :return: The target_arn of this ClaimPhoneNumberRequest.
        :rtype: str
        """
        return self._target_arn

    @target_arn.setter
    def target_arn(self, target_arn):
        """Sets the target_arn of this ClaimPhoneNumberRequest.

        The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to.

        :param target_arn: The target_arn of this ClaimPhoneNumberRequest.
        :type target_arn: str
        """
        if target_arn is None:
            raise ValueError("Invalid value for `target_arn`, must not be `None`")

        self._target_arn = target_arn

    @property
    def phone_number(self):
        """Gets the phone_number of this ClaimPhoneNumberRequest.

        The phone number you want to claim. Phone numbers are formatted <code>[+] [country code] [subscriber number including area code]</code>.

        :return: The phone_number of this ClaimPhoneNumberRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ClaimPhoneNumberRequest.

        The phone number you want to claim. Phone numbers are formatted <code>[+] [country code] [subscriber number including area code]</code>.

        :param phone_number: The phone_number of this ClaimPhoneNumberRequest.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")
        if phone_number is not None and not re.search(r'\\+[1-9]\\d{1,14}$', phone_number):
            raise ValueError("Invalid value for `phone_number`, must be a follow pattern or equal to `/\\+[1-9]\\d{1,14}$/`")

        self._phone_number = phone_number

    @property
    def phone_number_description(self):
        """Gets the phone_number_description of this ClaimPhoneNumberRequest.

        The description of the phone number.

        :return: The phone_number_description of this ClaimPhoneNumberRequest.
        :rtype: str
        """
        return self._phone_number_description

    @phone_number_description.setter
    def phone_number_description(self, phone_number_description):
        """Sets the phone_number_description of this ClaimPhoneNumberRequest.

        The description of the phone number.

        :param phone_number_description: The phone_number_description of this ClaimPhoneNumberRequest.
        :type phone_number_description: str
        """
        if phone_number_description is not None and len(phone_number_description) > 500:
            raise ValueError("Invalid value for `phone_number_description`, length must be less than or equal to `500`")
        if phone_number_description is not None and len(phone_number_description) < 0:
            raise ValueError("Invalid value for `phone_number_description`, length must be greater than or equal to `0`")
        if phone_number_description is not None and not re.search(r'^[\W\S_]*', phone_number_description):
            raise ValueError("Invalid value for `phone_number_description`, must be a follow pattern or equal to `/^[\W\S_]*/`")

        self._phone_number_description = phone_number_description

    @property
    def tags(self):
        """Gets the tags of this ClaimPhoneNumberRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this ClaimPhoneNumberRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ClaimPhoneNumberRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this ClaimPhoneNumberRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def client_token(self):
        """Gets the client_token of this ClaimPhoneNumberRequest.

        <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.</p> <p>Pattern: <code>^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$</code> </p>

        :return: The client_token of this ClaimPhoneNumberRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this ClaimPhoneNumberRequest.

        <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.</p> <p>Pattern: <code>^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$</code> </p>

        :param client_token: The client_token of this ClaimPhoneNumberRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token
