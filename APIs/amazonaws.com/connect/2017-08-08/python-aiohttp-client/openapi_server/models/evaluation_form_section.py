# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvaluationFormSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, ref_id: str=None, instructions: str=None, items: List=None, weight: float=None):
        """EvaluationFormSection - a model defined in OpenAPI

        :param title: The title of this EvaluationFormSection.
        :param ref_id: The ref_id of this EvaluationFormSection.
        :param instructions: The instructions of this EvaluationFormSection.
        :param items: The items of this EvaluationFormSection.
        :param weight: The weight of this EvaluationFormSection.
        """
        self.openapi_types = {
            'title': str,
            'ref_id': str,
            'instructions': str,
            'items': List,
            'weight': float
        }

        self.attribute_map = {
            'title': 'Title',
            'ref_id': 'RefId',
            'instructions': 'Instructions',
            'items': 'Items',
            'weight': 'Weight'
        }

        self._title = title
        self._ref_id = ref_id
        self._instructions = instructions
        self._items = items
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationFormSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationFormSection of this EvaluationFormSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this EvaluationFormSection.


        :return: The title of this EvaluationFormSection.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EvaluationFormSection.


        :param title: The title of this EvaluationFormSection.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def ref_id(self):
        """Gets the ref_id of this EvaluationFormSection.


        :return: The ref_id of this EvaluationFormSection.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this EvaluationFormSection.


        :param ref_id: The ref_id of this EvaluationFormSection.
        :type ref_id: str
        """
        if ref_id is None:
            raise ValueError("Invalid value for `ref_id`, must not be `None`")

        self._ref_id = ref_id

    @property
    def instructions(self):
        """Gets the instructions of this EvaluationFormSection.


        :return: The instructions of this EvaluationFormSection.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this EvaluationFormSection.


        :param instructions: The instructions of this EvaluationFormSection.
        :type instructions: str
        """

        self._instructions = instructions

    @property
    def items(self):
        """Gets the items of this EvaluationFormSection.


        :return: The items of this EvaluationFormSection.
        :rtype: List
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this EvaluationFormSection.


        :param items: The items of this EvaluationFormSection.
        :type items: List
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def weight(self):
        """Gets the weight of this EvaluationFormSection.


        :return: The weight of this EvaluationFormSection.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this EvaluationFormSection.


        :param weight: The weight of this EvaluationFormSection.
        :type weight: float
        """

        self._weight = weight
