# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_concurrency import MediaConcurrency
from openapi_server.models.routing_profile_queue_config import RoutingProfileQueueConfig
from openapi_server import util


class CreateRoutingProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, default_outbound_queue_id: str=None, queue_configs: List[RoutingProfileQueueConfig]=None, media_concurrencies: List[MediaConcurrency]=None, tags: Dict[str, str]=None, agent_availability_timer: str=None):
        """CreateRoutingProfileRequest - a model defined in OpenAPI

        :param name: The name of this CreateRoutingProfileRequest.
        :param description: The description of this CreateRoutingProfileRequest.
        :param default_outbound_queue_id: The default_outbound_queue_id of this CreateRoutingProfileRequest.
        :param queue_configs: The queue_configs of this CreateRoutingProfileRequest.
        :param media_concurrencies: The media_concurrencies of this CreateRoutingProfileRequest.
        :param tags: The tags of this CreateRoutingProfileRequest.
        :param agent_availability_timer: The agent_availability_timer of this CreateRoutingProfileRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'default_outbound_queue_id': str,
            'queue_configs': List[RoutingProfileQueueConfig],
            'media_concurrencies': List[MediaConcurrency],
            'tags': Dict[str, str],
            'agent_availability_timer': str
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'default_outbound_queue_id': 'DefaultOutboundQueueId',
            'queue_configs': 'QueueConfigs',
            'media_concurrencies': 'MediaConcurrencies',
            'tags': 'Tags',
            'agent_availability_timer': 'AgentAvailabilityTimer'
        }

        self._name = name
        self._description = description
        self._default_outbound_queue_id = default_outbound_queue_id
        self._queue_configs = queue_configs
        self._media_concurrencies = media_concurrencies
        self._tags = tags
        self._agent_availability_timer = agent_availability_timer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRoutingProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRoutingProfile_request of this CreateRoutingProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRoutingProfileRequest.

        The name of the routing profile. Must not be more than 127 characters.

        :return: The name of this CreateRoutingProfileRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRoutingProfileRequest.

        The name of the routing profile. Must not be more than 127 characters.

        :param name: The name of this CreateRoutingProfileRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateRoutingProfileRequest.

        Description of the routing profile. Must not be more than 250 characters.

        :return: The description of this CreateRoutingProfileRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateRoutingProfileRequest.

        Description of the routing profile. Must not be more than 250 characters.

        :param description: The description of this CreateRoutingProfileRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def default_outbound_queue_id(self):
        """Gets the default_outbound_queue_id of this CreateRoutingProfileRequest.

        The default outbound queue for the routing profile.

        :return: The default_outbound_queue_id of this CreateRoutingProfileRequest.
        :rtype: str
        """
        return self._default_outbound_queue_id

    @default_outbound_queue_id.setter
    def default_outbound_queue_id(self, default_outbound_queue_id):
        """Sets the default_outbound_queue_id of this CreateRoutingProfileRequest.

        The default outbound queue for the routing profile.

        :param default_outbound_queue_id: The default_outbound_queue_id of this CreateRoutingProfileRequest.
        :type default_outbound_queue_id: str
        """
        if default_outbound_queue_id is None:
            raise ValueError("Invalid value for `default_outbound_queue_id`, must not be `None`")

        self._default_outbound_queue_id = default_outbound_queue_id

    @property
    def queue_configs(self):
        """Gets the queue_configs of this CreateRoutingProfileRequest.

        <p>The inbound queues associated with the routing profile. If no queue is added, the agent can make only outbound calls.</p> <p>The limit of 10 array members applies to the maximum number of <code>RoutingProfileQueueConfig</code> objects that can be passed during a CreateRoutingProfile API request. It is different from the quota of 50 queues per routing profile per instance that is listed in <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect service quotas</a>. </p>

        :return: The queue_configs of this CreateRoutingProfileRequest.
        :rtype: List[RoutingProfileQueueConfig]
        """
        return self._queue_configs

    @queue_configs.setter
    def queue_configs(self, queue_configs):
        """Sets the queue_configs of this CreateRoutingProfileRequest.

        <p>The inbound queues associated with the routing profile. If no queue is added, the agent can make only outbound calls.</p> <p>The limit of 10 array members applies to the maximum number of <code>RoutingProfileQueueConfig</code> objects that can be passed during a CreateRoutingProfile API request. It is different from the quota of 50 queues per routing profile per instance that is listed in <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect service quotas</a>. </p>

        :param queue_configs: The queue_configs of this CreateRoutingProfileRequest.
        :type queue_configs: List[RoutingProfileQueueConfig]
        """
        if queue_configs is not None and len(queue_configs) > 10:
            raise ValueError("Invalid value for `queue_configs`, number of items must be less than or equal to `10`")
        if queue_configs is not None and len(queue_configs) < 1:
            raise ValueError("Invalid value for `queue_configs`, number of items must be greater than or equal to `1`")

        self._queue_configs = queue_configs

    @property
    def media_concurrencies(self):
        """Gets the media_concurrencies of this CreateRoutingProfileRequest.

        The channels that agents can handle in the Contact Control Panel (CCP) for this routing profile.

        :return: The media_concurrencies of this CreateRoutingProfileRequest.
        :rtype: List[MediaConcurrency]
        """
        return self._media_concurrencies

    @media_concurrencies.setter
    def media_concurrencies(self, media_concurrencies):
        """Sets the media_concurrencies of this CreateRoutingProfileRequest.

        The channels that agents can handle in the Contact Control Panel (CCP) for this routing profile.

        :param media_concurrencies: The media_concurrencies of this CreateRoutingProfileRequest.
        :type media_concurrencies: List[MediaConcurrency]
        """
        if media_concurrencies is None:
            raise ValueError("Invalid value for `media_concurrencies`, must not be `None`")

        self._media_concurrencies = media_concurrencies

    @property
    def tags(self):
        """Gets the tags of this CreateRoutingProfileRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateRoutingProfileRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRoutingProfileRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateRoutingProfileRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def agent_availability_timer(self):
        """Gets the agent_availability_timer of this CreateRoutingProfileRequest.

        Whether agents with this routing profile will have their routing order calculated based on <i>time since their last inbound contact</i> or <i>longest idle time</i>. 

        :return: The agent_availability_timer of this CreateRoutingProfileRequest.
        :rtype: str
        """
        return self._agent_availability_timer

    @agent_availability_timer.setter
    def agent_availability_timer(self, agent_availability_timer):
        """Sets the agent_availability_timer of this CreateRoutingProfileRequest.

        Whether agents with this routing profile will have their routing order calculated based on <i>time since their last inbound contact</i> or <i>longest idle time</i>. 

        :param agent_availability_timer: The agent_availability_timer of this CreateRoutingProfileRequest.
        :type agent_availability_timer: str
        """
        allowed_values = ["TIME_SINCE_LAST_ACTIVITY", "TIME_SINCE_LAST_INBOUND"]  # noqa: E501
        if agent_availability_timer not in allowed_values:
            raise ValueError(
                "Invalid value for `agent_availability_timer` ({0}), must be one of {1}"
                .format(agent_availability_timer, allowed_values)
            )

        self._agent_availability_timer = agent_availability_timer
