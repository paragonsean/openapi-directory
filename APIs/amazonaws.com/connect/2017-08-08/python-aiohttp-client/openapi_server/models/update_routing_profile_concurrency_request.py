# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_concurrency import MediaConcurrency
from openapi_server import util


class UpdateRoutingProfileConcurrencyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_concurrencies: List[MediaConcurrency]=None):
        """UpdateRoutingProfileConcurrencyRequest - a model defined in OpenAPI

        :param media_concurrencies: The media_concurrencies of this UpdateRoutingProfileConcurrencyRequest.
        """
        self.openapi_types = {
            'media_concurrencies': List[MediaConcurrency]
        }

        self.attribute_map = {
            'media_concurrencies': 'MediaConcurrencies'
        }

        self._media_concurrencies = media_concurrencies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRoutingProfileConcurrencyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRoutingProfileConcurrency_request of this UpdateRoutingProfileConcurrencyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_concurrencies(self):
        """Gets the media_concurrencies of this UpdateRoutingProfileConcurrencyRequest.

        The channels that agents can handle in the Contact Control Panel (CCP).

        :return: The media_concurrencies of this UpdateRoutingProfileConcurrencyRequest.
        :rtype: List[MediaConcurrency]
        """
        return self._media_concurrencies

    @media_concurrencies.setter
    def media_concurrencies(self, media_concurrencies):
        """Sets the media_concurrencies of this UpdateRoutingProfileConcurrencyRequest.

        The channels that agents can handle in the Contact Control Panel (CCP).

        :param media_concurrencies: The media_concurrencies of this UpdateRoutingProfileConcurrencyRequest.
        :type media_concurrencies: List[MediaConcurrency]
        """
        if media_concurrencies is None:
            raise ValueError("Invalid value for `media_concurrencies`, must not be `None`")

        self._media_concurrencies = media_concurrencies
