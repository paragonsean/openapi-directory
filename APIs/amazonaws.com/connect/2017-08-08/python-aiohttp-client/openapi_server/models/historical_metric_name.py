# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HistoricalMetricName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CONTACTS_QUEUED = 'CONTACTS_QUEUED'
    CONTACTS_HANDLED = 'CONTACTS_HANDLED'
    CONTACTS_ABANDONED = 'CONTACTS_ABANDONED'
    CONTACTS_CONSULTED = 'CONTACTS_CONSULTED'
    CONTACTS_AGENT_HUNG_UP_FIRST = 'CONTACTS_AGENT_HUNG_UP_FIRST'
    CONTACTS_HANDLED_INCOMING = 'CONTACTS_HANDLED_INCOMING'
    CONTACTS_HANDLED_OUTBOUND = 'CONTACTS_HANDLED_OUTBOUND'
    CONTACTS_HOLD_ABANDONS = 'CONTACTS_HOLD_ABANDONS'
    CONTACTS_TRANSFERRED_IN = 'CONTACTS_TRANSFERRED_IN'
    CONTACTS_TRANSFERRED_OUT = 'CONTACTS_TRANSFERRED_OUT'
    CONTACTS_TRANSFERRED_IN_FROM_QUEUE = 'CONTACTS_TRANSFERRED_IN_FROM_QUEUE'
    CONTACTS_TRANSFERRED_OUT_FROM_QUEUE = 'CONTACTS_TRANSFERRED_OUT_FROM_QUEUE'
    CONTACTS_MISSED = 'CONTACTS_MISSED'
    CALLBACK_CONTACTS_HANDLED = 'CALLBACK_CONTACTS_HANDLED'
    API_CONTACTS_HANDLED = 'API_CONTACTS_HANDLED'
    OCCUPANCY = 'OCCUPANCY'
    HANDLE_TIME = 'HANDLE_TIME'
    AFTER_CONTACT_WORK_TIME = 'AFTER_CONTACT_WORK_TIME'
    QUEUED_TIME = 'QUEUED_TIME'
    ABANDON_TIME = 'ABANDON_TIME'
    QUEUE_ANSWER_TIME = 'QUEUE_ANSWER_TIME'
    HOLD_TIME = 'HOLD_TIME'
    INTERACTION_TIME = 'INTERACTION_TIME'
    INTERACTION_AND_HOLD_TIME = 'INTERACTION_AND_HOLD_TIME'
    SERVICE_LEVEL = 'SERVICE_LEVEL'

    def __init__(self):
        """HistoricalMetricName - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoricalMetricName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoricalMetricName of this HistoricalMetricName.
        """
        return util.deserialize_model(dikt, cls)
