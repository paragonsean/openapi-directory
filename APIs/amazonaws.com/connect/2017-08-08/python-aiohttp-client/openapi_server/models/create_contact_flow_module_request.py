# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateContactFlowModuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, content: str=None, tags: Dict[str, str]=None, client_token: str=None):
        """CreateContactFlowModuleRequest - a model defined in OpenAPI

        :param name: The name of this CreateContactFlowModuleRequest.
        :param description: The description of this CreateContactFlowModuleRequest.
        :param content: The content of this CreateContactFlowModuleRequest.
        :param tags: The tags of this CreateContactFlowModuleRequest.
        :param client_token: The client_token of this CreateContactFlowModuleRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'content': str,
            'tags': Dict[str, str],
            'client_token': str
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'content': 'Content',
            'tags': 'Tags',
            'client_token': 'ClientToken'
        }

        self._name = name
        self._description = description
        self._content = content
        self._tags = tags
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateContactFlowModuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateContactFlowModule_request of this CreateContactFlowModuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateContactFlowModuleRequest.

        The name of the flow module.

        :return: The name of this CreateContactFlowModuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateContactFlowModuleRequest.

        The name of the flow module.

        :param name: The name of this CreateContactFlowModuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'.*\S.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*\S.*/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateContactFlowModuleRequest.

        The description of the flow module. 

        :return: The description of this CreateContactFlowModuleRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateContactFlowModuleRequest.

        The description of the flow module. 

        :param description: The description of this CreateContactFlowModuleRequest.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'.*\S.*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/.*\S.*/`")

        self._description = description

    @property
    def content(self):
        """Gets the content of this CreateContactFlowModuleRequest.

        The content of the flow module.

        :return: The content of this CreateContactFlowModuleRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateContactFlowModuleRequest.

        The content of the flow module.

        :param content: The content of this CreateContactFlowModuleRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) > 256000:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `256000`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def tags(self):
        """Gets the tags of this CreateContactFlowModuleRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateContactFlowModuleRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateContactFlowModuleRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateContactFlowModuleRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def client_token(self):
        """Gets the client_token of this CreateContactFlowModuleRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this CreateContactFlowModuleRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateContactFlowModuleRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this CreateContactFlowModuleRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token
