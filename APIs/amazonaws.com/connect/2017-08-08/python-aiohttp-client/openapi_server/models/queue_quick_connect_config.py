# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueueQuickConnectConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queue_id: str=None, contact_flow_id: str=None):
        """QueueQuickConnectConfig - a model defined in OpenAPI

        :param queue_id: The queue_id of this QueueQuickConnectConfig.
        :param contact_flow_id: The contact_flow_id of this QueueQuickConnectConfig.
        """
        self.openapi_types = {
            'queue_id': str,
            'contact_flow_id': str
        }

        self.attribute_map = {
            'queue_id': 'QueueId',
            'contact_flow_id': 'ContactFlowId'
        }

        self._queue_id = queue_id
        self._contact_flow_id = contact_flow_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueueQuickConnectConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueueQuickConnectConfig of this QueueQuickConnectConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queue_id(self):
        """Gets the queue_id of this QueueQuickConnectConfig.


        :return: The queue_id of this QueueQuickConnectConfig.
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this QueueQuickConnectConfig.


        :param queue_id: The queue_id of this QueueQuickConnectConfig.
        :type queue_id: str
        """
        if queue_id is None:
            raise ValueError("Invalid value for `queue_id`, must not be `None`")

        self._queue_id = queue_id

    @property
    def contact_flow_id(self):
        """Gets the contact_flow_id of this QueueQuickConnectConfig.


        :return: The contact_flow_id of this QueueQuickConnectConfig.
        :rtype: str
        """
        return self._contact_flow_id

    @contact_flow_id.setter
    def contact_flow_id(self, contact_flow_id):
        """Sets the contact_flow_id of this QueueQuickConnectConfig.


        :param contact_flow_id: The contact_flow_id of this QueueQuickConnectConfig.
        :type contact_flow_id: str
        """
        if contact_flow_id is None:
            raise ValueError("Invalid value for `contact_flow_id`, must not be `None`")

        self._contact_flow_id = contact_flow_id
