# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_bot_request_lex_bot import AssociateBotRequestLexBot
from openapi_server import util


class AssociateLexBotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lex_bot: AssociateBotRequestLexBot=None):
        """AssociateLexBotRequest - a model defined in OpenAPI

        :param lex_bot: The lex_bot of this AssociateLexBotRequest.
        """
        self.openapi_types = {
            'lex_bot': AssociateBotRequestLexBot
        }

        self.attribute_map = {
            'lex_bot': 'LexBot'
        }

        self._lex_bot = lex_bot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateLexBotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateLexBot_request of this AssociateLexBotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lex_bot(self):
        """Gets the lex_bot of this AssociateLexBotRequest.


        :return: The lex_bot of this AssociateLexBotRequest.
        :rtype: AssociateBotRequestLexBot
        """
        return self._lex_bot

    @lex_bot.setter
    def lex_bot(self, lex_bot):
        """Sets the lex_bot of this AssociateLexBotRequest.


        :param lex_bot: The lex_bot of this AssociateLexBotRequest.
        :type lex_bot: AssociateBotRequestLexBot
        """
        if lex_bot is None:
            raise ValueError("Invalid value for `lex_bot`, must not be `None`")

        self._lex_bot = lex_bot
