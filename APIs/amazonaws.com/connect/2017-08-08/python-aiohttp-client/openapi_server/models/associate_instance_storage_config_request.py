# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_instance_storage_config_request_storage_config import AssociateInstanceStorageConfigRequestStorageConfig
from openapi_server import util


class AssociateInstanceStorageConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_type: str=None, storage_config: AssociateInstanceStorageConfigRequestStorageConfig=None):
        """AssociateInstanceStorageConfigRequest - a model defined in OpenAPI

        :param resource_type: The resource_type of this AssociateInstanceStorageConfigRequest.
        :param storage_config: The storage_config of this AssociateInstanceStorageConfigRequest.
        """
        self.openapi_types = {
            'resource_type': str,
            'storage_config': AssociateInstanceStorageConfigRequestStorageConfig
        }

        self.attribute_map = {
            'resource_type': 'ResourceType',
            'storage_config': 'StorageConfig'
        }

        self._resource_type = resource_type
        self._storage_config = storage_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateInstanceStorageConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateInstanceStorageConfig_request of this AssociateInstanceStorageConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_type(self):
        """Gets the resource_type of this AssociateInstanceStorageConfigRequest.

        A valid resource type.

        :return: The resource_type of this AssociateInstanceStorageConfigRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AssociateInstanceStorageConfigRequest.

        A valid resource type.

        :param resource_type: The resource_type of this AssociateInstanceStorageConfigRequest.
        :type resource_type: str
        """
        allowed_values = ["CHAT_TRANSCRIPTS", "CALL_RECORDINGS", "SCHEDULED_REPORTS", "MEDIA_STREAMS", "CONTACT_TRACE_RECORDS", "AGENT_EVENTS", "REAL_TIME_CONTACT_ANALYSIS_SEGMENTS", "ATTACHMENTS", "CONTACT_EVALUATIONS", "SCREEN_RECORDINGS"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def storage_config(self):
        """Gets the storage_config of this AssociateInstanceStorageConfigRequest.


        :return: The storage_config of this AssociateInstanceStorageConfigRequest.
        :rtype: AssociateInstanceStorageConfigRequestStorageConfig
        """
        return self._storage_config

    @storage_config.setter
    def storage_config(self, storage_config):
        """Sets the storage_config of this AssociateInstanceStorageConfigRequest.


        :param storage_config: The storage_config of this AssociateInstanceStorageConfigRequest.
        :type storage_config: AssociateInstanceStorageConfigRequestStorageConfig
        """
        if storage_config is None:
            raise ValueError("Invalid value for `storage_config`, must not be `None`")

        self._storage_config = storage_config
