# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_form_question_question_type_properties import EvaluationFormQuestionQuestionTypeProperties
from openapi_server.models.evaluation_form_question_type import EvaluationFormQuestionType
from openapi_server import util


class EvaluationFormItemQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, instructions: str=None, ref_id: str=None, not_applicable_enabled: bool=None, question_type: EvaluationFormQuestionType=None, question_type_properties: EvaluationFormQuestionQuestionTypeProperties=None, weight: float=None):
        """EvaluationFormItemQuestion - a model defined in OpenAPI

        :param title: The title of this EvaluationFormItemQuestion.
        :param instructions: The instructions of this EvaluationFormItemQuestion.
        :param ref_id: The ref_id of this EvaluationFormItemQuestion.
        :param not_applicable_enabled: The not_applicable_enabled of this EvaluationFormItemQuestion.
        :param question_type: The question_type of this EvaluationFormItemQuestion.
        :param question_type_properties: The question_type_properties of this EvaluationFormItemQuestion.
        :param weight: The weight of this EvaluationFormItemQuestion.
        """
        self.openapi_types = {
            'title': str,
            'instructions': str,
            'ref_id': str,
            'not_applicable_enabled': bool,
            'question_type': EvaluationFormQuestionType,
            'question_type_properties': EvaluationFormQuestionQuestionTypeProperties,
            'weight': float
        }

        self.attribute_map = {
            'title': 'Title',
            'instructions': 'Instructions',
            'ref_id': 'RefId',
            'not_applicable_enabled': 'NotApplicableEnabled',
            'question_type': 'QuestionType',
            'question_type_properties': 'QuestionTypeProperties',
            'weight': 'Weight'
        }

        self._title = title
        self._instructions = instructions
        self._ref_id = ref_id
        self._not_applicable_enabled = not_applicable_enabled
        self._question_type = question_type
        self._question_type_properties = question_type_properties
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationFormItemQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationFormItem_Question of this EvaluationFormItemQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this EvaluationFormItemQuestion.


        :return: The title of this EvaluationFormItemQuestion.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EvaluationFormItemQuestion.


        :param title: The title of this EvaluationFormItemQuestion.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def instructions(self):
        """Gets the instructions of this EvaluationFormItemQuestion.


        :return: The instructions of this EvaluationFormItemQuestion.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this EvaluationFormItemQuestion.


        :param instructions: The instructions of this EvaluationFormItemQuestion.
        :type instructions: str
        """

        self._instructions = instructions

    @property
    def ref_id(self):
        """Gets the ref_id of this EvaluationFormItemQuestion.


        :return: The ref_id of this EvaluationFormItemQuestion.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this EvaluationFormItemQuestion.


        :param ref_id: The ref_id of this EvaluationFormItemQuestion.
        :type ref_id: str
        """
        if ref_id is None:
            raise ValueError("Invalid value for `ref_id`, must not be `None`")

        self._ref_id = ref_id

    @property
    def not_applicable_enabled(self):
        """Gets the not_applicable_enabled of this EvaluationFormItemQuestion.


        :return: The not_applicable_enabled of this EvaluationFormItemQuestion.
        :rtype: bool
        """
        return self._not_applicable_enabled

    @not_applicable_enabled.setter
    def not_applicable_enabled(self, not_applicable_enabled):
        """Sets the not_applicable_enabled of this EvaluationFormItemQuestion.


        :param not_applicable_enabled: The not_applicable_enabled of this EvaluationFormItemQuestion.
        :type not_applicable_enabled: bool
        """

        self._not_applicable_enabled = not_applicable_enabled

    @property
    def question_type(self):
        """Gets the question_type of this EvaluationFormItemQuestion.


        :return: The question_type of this EvaluationFormItemQuestion.
        :rtype: EvaluationFormQuestionType
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this EvaluationFormItemQuestion.


        :param question_type: The question_type of this EvaluationFormItemQuestion.
        :type question_type: EvaluationFormQuestionType
        """
        if question_type is None:
            raise ValueError("Invalid value for `question_type`, must not be `None`")

        self._question_type = question_type

    @property
    def question_type_properties(self):
        """Gets the question_type_properties of this EvaluationFormItemQuestion.


        :return: The question_type_properties of this EvaluationFormItemQuestion.
        :rtype: EvaluationFormQuestionQuestionTypeProperties
        """
        return self._question_type_properties

    @question_type_properties.setter
    def question_type_properties(self, question_type_properties):
        """Sets the question_type_properties of this EvaluationFormItemQuestion.


        :param question_type_properties: The question_type_properties of this EvaluationFormItemQuestion.
        :type question_type_properties: EvaluationFormQuestionQuestionTypeProperties
        """

        self._question_type_properties = question_type_properties

    @property
    def weight(self):
        """Gets the weight of this EvaluationFormItemQuestion.


        :return: The weight of this EvaluationFormItemQuestion.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this EvaluationFormItemQuestion.


        :param weight: The weight of this EvaluationFormItemQuestion.
        :type weight: float
        """

        self._weight = weight
