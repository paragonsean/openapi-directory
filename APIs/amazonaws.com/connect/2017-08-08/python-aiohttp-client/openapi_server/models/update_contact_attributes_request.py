# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateContactAttributesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, initial_contact_id: str=None, instance_id: str=None, attributes: Dict[str, str]=None):
        """UpdateContactAttributesRequest - a model defined in OpenAPI

        :param initial_contact_id: The initial_contact_id of this UpdateContactAttributesRequest.
        :param instance_id: The instance_id of this UpdateContactAttributesRequest.
        :param attributes: The attributes of this UpdateContactAttributesRequest.
        """
        self.openapi_types = {
            'initial_contact_id': str,
            'instance_id': str,
            'attributes': Dict[str, str]
        }

        self.attribute_map = {
            'initial_contact_id': 'InitialContactId',
            'instance_id': 'InstanceId',
            'attributes': 'Attributes'
        }

        self._initial_contact_id = initial_contact_id
        self._instance_id = instance_id
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContactAttributesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContactAttributes_request of this UpdateContactAttributesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def initial_contact_id(self):
        """Gets the initial_contact_id of this UpdateContactAttributesRequest.

        The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.

        :return: The initial_contact_id of this UpdateContactAttributesRequest.
        :rtype: str
        """
        return self._initial_contact_id

    @initial_contact_id.setter
    def initial_contact_id(self, initial_contact_id):
        """Sets the initial_contact_id of this UpdateContactAttributesRequest.

        The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.

        :param initial_contact_id: The initial_contact_id of this UpdateContactAttributesRequest.
        :type initial_contact_id: str
        """
        if initial_contact_id is None:
            raise ValueError("Invalid value for `initial_contact_id`, must not be `None`")
        if initial_contact_id is not None and len(initial_contact_id) > 256:
            raise ValueError("Invalid value for `initial_contact_id`, length must be less than or equal to `256`")
        if initial_contact_id is not None and len(initial_contact_id) < 1:
            raise ValueError("Invalid value for `initial_contact_id`, length must be greater than or equal to `1`")

        self._initial_contact_id = initial_contact_id

    @property
    def instance_id(self):
        """Gets the instance_id of this UpdateContactAttributesRequest.

        The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.

        :return: The instance_id of this UpdateContactAttributesRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this UpdateContactAttributesRequest.

        The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.

        :param instance_id: The instance_id of this UpdateContactAttributesRequest.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")
        if instance_id is not None and len(instance_id) > 100:
            raise ValueError("Invalid value for `instance_id`, length must be less than or equal to `100`")
        if instance_id is not None and len(instance_id) < 1:
            raise ValueError("Invalid value for `instance_id`, length must be greater than or equal to `1`")

        self._instance_id = instance_id

    @property
    def attributes(self):
        """Gets the attributes of this UpdateContactAttributesRequest.

        <p>The Amazon Connect attributes. These attributes can be accessed in flows just like any other contact attributes.</p> <p>You can have up to 32,768 UTF-8 bytes across all attributes for a contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>

        :return: The attributes of this UpdateContactAttributesRequest.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this UpdateContactAttributesRequest.

        <p>The Amazon Connect attributes. These attributes can be accessed in flows just like any other contact attributes.</p> <p>You can have up to 32,768 UTF-8 bytes across all attributes for a contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>

        :param attributes: The attributes of this UpdateContactAttributesRequest.
        :type attributes: Dict[str, str]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes
