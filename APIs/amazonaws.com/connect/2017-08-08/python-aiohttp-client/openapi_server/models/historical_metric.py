# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.historical_metric_name import HistoricalMetricName
from openapi_server.models.historical_metric_threshold import HistoricalMetricThreshold
from openapi_server.models.statistic import Statistic
from openapi_server.models.unit import Unit
from openapi_server import util


class HistoricalMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: HistoricalMetricName=None, threshold: HistoricalMetricThreshold=None, statistic: Statistic=None, unit: Unit=None):
        """HistoricalMetric - a model defined in OpenAPI

        :param name: The name of this HistoricalMetric.
        :param threshold: The threshold of this HistoricalMetric.
        :param statistic: The statistic of this HistoricalMetric.
        :param unit: The unit of this HistoricalMetric.
        """
        self.openapi_types = {
            'name': HistoricalMetricName,
            'threshold': HistoricalMetricThreshold,
            'statistic': Statistic,
            'unit': Unit
        }

        self.attribute_map = {
            'name': 'Name',
            'threshold': 'Threshold',
            'statistic': 'Statistic',
            'unit': 'Unit'
        }

        self._name = name
        self._threshold = threshold
        self._statistic = statistic
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoricalMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoricalMetric of this HistoricalMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this HistoricalMetric.


        :return: The name of this HistoricalMetric.
        :rtype: HistoricalMetricName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HistoricalMetric.


        :param name: The name of this HistoricalMetric.
        :type name: HistoricalMetricName
        """

        self._name = name

    @property
    def threshold(self):
        """Gets the threshold of this HistoricalMetric.


        :return: The threshold of this HistoricalMetric.
        :rtype: HistoricalMetricThreshold
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this HistoricalMetric.


        :param threshold: The threshold of this HistoricalMetric.
        :type threshold: HistoricalMetricThreshold
        """

        self._threshold = threshold

    @property
    def statistic(self):
        """Gets the statistic of this HistoricalMetric.


        :return: The statistic of this HistoricalMetric.
        :rtype: Statistic
        """
        return self._statistic

    @statistic.setter
    def statistic(self, statistic):
        """Sets the statistic of this HistoricalMetric.


        :param statistic: The statistic of this HistoricalMetric.
        :type statistic: Statistic
        """

        self._statistic = statistic

    @property
    def unit(self):
        """Gets the unit of this HistoricalMetric.


        :return: The unit of this HistoricalMetric.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this HistoricalMetric.


        :param unit: The unit of this HistoricalMetric.
        :type unit: Unit
        """

        self._unit = unit
