# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAgentStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, state: str=None, display_order: int=None, tags: Dict[str, str]=None):
        """CreateAgentStatusRequest - a model defined in OpenAPI

        :param name: The name of this CreateAgentStatusRequest.
        :param description: The description of this CreateAgentStatusRequest.
        :param state: The state of this CreateAgentStatusRequest.
        :param display_order: The display_order of this CreateAgentStatusRequest.
        :param tags: The tags of this CreateAgentStatusRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'state': str,
            'display_order': int,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'state': 'State',
            'display_order': 'DisplayOrder',
            'tags': 'Tags'
        }

        self._name = name
        self._description = description
        self._state = state
        self._display_order = display_order
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAgentStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAgentStatus_request of this CreateAgentStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateAgentStatusRequest.

        The name of the status.

        :return: The name of this CreateAgentStatusRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAgentStatusRequest.

        The name of the status.

        :param name: The name of this CreateAgentStatusRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateAgentStatusRequest.

        The description of the status.

        :return: The description of this CreateAgentStatusRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAgentStatusRequest.

        The description of the status.

        :param description: The description of this CreateAgentStatusRequest.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def state(self):
        """Gets the state of this CreateAgentStatusRequest.

        The state of the status.

        :return: The state of this CreateAgentStatusRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateAgentStatusRequest.

        The state of the status.

        :param state: The state of this CreateAgentStatusRequest.
        :type state: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def display_order(self):
        """Gets the display_order of this CreateAgentStatusRequest.

        The display order of the status.

        :return: The display_order of this CreateAgentStatusRequest.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this CreateAgentStatusRequest.

        The display order of the status.

        :param display_order: The display_order of this CreateAgentStatusRequest.
        :type display_order: int
        """
        if display_order is not None and display_order > 50:
            raise ValueError("Invalid value for `display_order`, must be a value less than or equal to `50`")
        if display_order is not None and display_order < 1:
            raise ValueError("Invalid value for `display_order`, must be a value greater than or equal to `1`")

        self._display_order = display_order

    @property
    def tags(self):
        """Gets the tags of this CreateAgentStatusRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateAgentStatusRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAgentStatusRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateAgentStatusRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
