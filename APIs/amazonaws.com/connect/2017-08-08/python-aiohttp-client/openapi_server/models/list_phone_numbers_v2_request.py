# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.phone_number_country_code import PhoneNumberCountryCode
from openapi_server.models.phone_number_type import PhoneNumberType
import re
from openapi_server import util


class ListPhoneNumbersV2Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_arn: str=None, max_results: int=None, next_token: str=None, phone_number_country_codes: List[PhoneNumberCountryCode]=None, phone_number_types: List[PhoneNumberType]=None, phone_number_prefix: str=None):
        """ListPhoneNumbersV2Request - a model defined in OpenAPI

        :param target_arn: The target_arn of this ListPhoneNumbersV2Request.
        :param max_results: The max_results of this ListPhoneNumbersV2Request.
        :param next_token: The next_token of this ListPhoneNumbersV2Request.
        :param phone_number_country_codes: The phone_number_country_codes of this ListPhoneNumbersV2Request.
        :param phone_number_types: The phone_number_types of this ListPhoneNumbersV2Request.
        :param phone_number_prefix: The phone_number_prefix of this ListPhoneNumbersV2Request.
        """
        self.openapi_types = {
            'target_arn': str,
            'max_results': int,
            'next_token': str,
            'phone_number_country_codes': List[PhoneNumberCountryCode],
            'phone_number_types': List[PhoneNumberType],
            'phone_number_prefix': str
        }

        self.attribute_map = {
            'target_arn': 'TargetArn',
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'phone_number_country_codes': 'PhoneNumberCountryCodes',
            'phone_number_types': 'PhoneNumberTypes',
            'phone_number_prefix': 'PhoneNumberPrefix'
        }

        self._target_arn = target_arn
        self._max_results = max_results
        self._next_token = next_token
        self._phone_number_country_codes = phone_number_country_codes
        self._phone_number_types = phone_number_types
        self._phone_number_prefix = phone_number_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPhoneNumbersV2Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPhoneNumbersV2_request of this ListPhoneNumbersV2Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_arn(self):
        """Gets the target_arn of this ListPhoneNumbersV2Request.

        The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to. If <code>TargetArn</code> input is not provided, this API lists numbers claimed to all the Amazon Connect instances belonging to your account in the same Amazon Web Services Region as the request.

        :return: The target_arn of this ListPhoneNumbersV2Request.
        :rtype: str
        """
        return self._target_arn

    @target_arn.setter
    def target_arn(self, target_arn):
        """Sets the target_arn of this ListPhoneNumbersV2Request.

        The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to. If <code>TargetArn</code> input is not provided, this API lists numbers claimed to all the Amazon Connect instances belonging to your account in the same Amazon Web Services Region as the request.

        :param target_arn: The target_arn of this ListPhoneNumbersV2Request.
        :type target_arn: str
        """

        self._target_arn = target_arn

    @property
    def max_results(self):
        """Gets the max_results of this ListPhoneNumbersV2Request.

        The maximum number of results to return per page.

        :return: The max_results of this ListPhoneNumbersV2Request.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListPhoneNumbersV2Request.

        The maximum number of results to return per page.

        :param max_results: The max_results of this ListPhoneNumbersV2Request.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListPhoneNumbersV2Request.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :return: The next_token of this ListPhoneNumbersV2Request.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListPhoneNumbersV2Request.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :param next_token: The next_token of this ListPhoneNumbersV2Request.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 100000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `100000`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token

    @property
    def phone_number_country_codes(self):
        """Gets the phone_number_country_codes of this ListPhoneNumbersV2Request.

        The ISO country code.

        :return: The phone_number_country_codes of this ListPhoneNumbersV2Request.
        :rtype: List[PhoneNumberCountryCode]
        """
        return self._phone_number_country_codes

    @phone_number_country_codes.setter
    def phone_number_country_codes(self, phone_number_country_codes):
        """Sets the phone_number_country_codes of this ListPhoneNumbersV2Request.

        The ISO country code.

        :param phone_number_country_codes: The phone_number_country_codes of this ListPhoneNumbersV2Request.
        :type phone_number_country_codes: List[PhoneNumberCountryCode]
        """
        if phone_number_country_codes is not None and len(phone_number_country_codes) > 10:
            raise ValueError("Invalid value for `phone_number_country_codes`, number of items must be less than or equal to `10`")

        self._phone_number_country_codes = phone_number_country_codes

    @property
    def phone_number_types(self):
        """Gets the phone_number_types of this ListPhoneNumbersV2Request.

        The type of phone number.

        :return: The phone_number_types of this ListPhoneNumbersV2Request.
        :rtype: List[PhoneNumberType]
        """
        return self._phone_number_types

    @phone_number_types.setter
    def phone_number_types(self, phone_number_types):
        """Sets the phone_number_types of this ListPhoneNumbersV2Request.

        The type of phone number.

        :param phone_number_types: The phone_number_types of this ListPhoneNumbersV2Request.
        :type phone_number_types: List[PhoneNumberType]
        """
        if phone_number_types is not None and len(phone_number_types) > 6:
            raise ValueError("Invalid value for `phone_number_types`, number of items must be less than or equal to `6`")

        self._phone_number_types = phone_number_types

    @property
    def phone_number_prefix(self):
        """Gets the phone_number_prefix of this ListPhoneNumbersV2Request.

        The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.

        :return: The phone_number_prefix of this ListPhoneNumbersV2Request.
        :rtype: str
        """
        return self._phone_number_prefix

    @phone_number_prefix.setter
    def phone_number_prefix(self, phone_number_prefix):
        """Sets the phone_number_prefix of this ListPhoneNumbersV2Request.

        The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.

        :param phone_number_prefix: The phone_number_prefix of this ListPhoneNumbersV2Request.
        :type phone_number_prefix: str
        """
        if phone_number_prefix is not None and not re.search(r'\\+?[0-9]{1,11}', phone_number_prefix):
            raise ValueError("Invalid value for `phone_number_prefix`, must be a follow pattern or equal to `/\\+?[0-9]{1,11}/`")

        self._phone_number_prefix = phone_number_prefix
