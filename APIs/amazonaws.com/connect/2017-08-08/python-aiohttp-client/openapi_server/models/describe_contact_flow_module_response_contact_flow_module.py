# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_flow_module_state import ContactFlowModuleState
from openapi_server.models.contact_flow_module_status import ContactFlowModuleStatus
from openapi_server import util


class DescribeContactFlowModuleResponseContactFlowModule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, id: str=None, name: str=None, content: str=None, description: str=None, state: ContactFlowModuleState=None, status: ContactFlowModuleStatus=None, tags: Dict=None):
        """DescribeContactFlowModuleResponseContactFlowModule - a model defined in OpenAPI

        :param arn: The arn of this DescribeContactFlowModuleResponseContactFlowModule.
        :param id: The id of this DescribeContactFlowModuleResponseContactFlowModule.
        :param name: The name of this DescribeContactFlowModuleResponseContactFlowModule.
        :param content: The content of this DescribeContactFlowModuleResponseContactFlowModule.
        :param description: The description of this DescribeContactFlowModuleResponseContactFlowModule.
        :param state: The state of this DescribeContactFlowModuleResponseContactFlowModule.
        :param status: The status of this DescribeContactFlowModuleResponseContactFlowModule.
        :param tags: The tags of this DescribeContactFlowModuleResponseContactFlowModule.
        """
        self.openapi_types = {
            'arn': str,
            'id': str,
            'name': str,
            'content': str,
            'description': str,
            'state': ContactFlowModuleState,
            'status': ContactFlowModuleStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'Arn',
            'id': 'Id',
            'name': 'Name',
            'content': 'Content',
            'description': 'Description',
            'state': 'State',
            'status': 'Status',
            'tags': 'Tags'
        }

        self._arn = arn
        self._id = id
        self._name = name
        self._content = content
        self._description = description
        self._state = state
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeContactFlowModuleResponseContactFlowModule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeContactFlowModuleResponse_ContactFlowModule of this DescribeContactFlowModuleResponseContactFlowModule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this DescribeContactFlowModuleResponseContactFlowModule.


        :return: The arn of this DescribeContactFlowModuleResponseContactFlowModule.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DescribeContactFlowModuleResponseContactFlowModule.


        :param arn: The arn of this DescribeContactFlowModuleResponseContactFlowModule.
        :type arn: str
        """

        self._arn = arn

    @property
    def id(self):
        """Gets the id of this DescribeContactFlowModuleResponseContactFlowModule.


        :return: The id of this DescribeContactFlowModuleResponseContactFlowModule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DescribeContactFlowModuleResponseContactFlowModule.


        :param id: The id of this DescribeContactFlowModuleResponseContactFlowModule.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DescribeContactFlowModuleResponseContactFlowModule.


        :return: The name of this DescribeContactFlowModuleResponseContactFlowModule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescribeContactFlowModuleResponseContactFlowModule.


        :param name: The name of this DescribeContactFlowModuleResponseContactFlowModule.
        :type name: str
        """

        self._name = name

    @property
    def content(self):
        """Gets the content of this DescribeContactFlowModuleResponseContactFlowModule.


        :return: The content of this DescribeContactFlowModuleResponseContactFlowModule.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DescribeContactFlowModuleResponseContactFlowModule.


        :param content: The content of this DescribeContactFlowModuleResponseContactFlowModule.
        :type content: str
        """

        self._content = content

    @property
    def description(self):
        """Gets the description of this DescribeContactFlowModuleResponseContactFlowModule.


        :return: The description of this DescribeContactFlowModuleResponseContactFlowModule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DescribeContactFlowModuleResponseContactFlowModule.


        :param description: The description of this DescribeContactFlowModuleResponseContactFlowModule.
        :type description: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this DescribeContactFlowModuleResponseContactFlowModule.


        :return: The state of this DescribeContactFlowModuleResponseContactFlowModule.
        :rtype: ContactFlowModuleState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DescribeContactFlowModuleResponseContactFlowModule.


        :param state: The state of this DescribeContactFlowModuleResponseContactFlowModule.
        :type state: ContactFlowModuleState
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this DescribeContactFlowModuleResponseContactFlowModule.


        :return: The status of this DescribeContactFlowModuleResponseContactFlowModule.
        :rtype: ContactFlowModuleStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeContactFlowModuleResponseContactFlowModule.


        :param status: The status of this DescribeContactFlowModuleResponseContactFlowModule.
        :type status: ContactFlowModuleStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this DescribeContactFlowModuleResponseContactFlowModule.


        :return: The tags of this DescribeContactFlowModuleResponseContactFlowModule.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribeContactFlowModuleResponseContactFlowModule.


        :param tags: The tags of this DescribeContactFlowModuleResponseContactFlowModule.
        :type tags: Dict
        """

        self._tags = tags
