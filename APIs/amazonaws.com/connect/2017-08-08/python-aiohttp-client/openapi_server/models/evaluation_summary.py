# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_metadata_score import EvaluationMetadataScore
from openapi_server.models.evaluation_status import EvaluationStatus
from openapi_server import util


class EvaluationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_id: str=None, evaluation_arn: str=None, evaluation_form_title: str=None, evaluation_form_id: str=None, status: EvaluationStatus=None, evaluator_arn: str=None, score: EvaluationMetadataScore=None, created_time: datetime=None, last_modified_time: datetime=None):
        """EvaluationSummary - a model defined in OpenAPI

        :param evaluation_id: The evaluation_id of this EvaluationSummary.
        :param evaluation_arn: The evaluation_arn of this EvaluationSummary.
        :param evaluation_form_title: The evaluation_form_title of this EvaluationSummary.
        :param evaluation_form_id: The evaluation_form_id of this EvaluationSummary.
        :param status: The status of this EvaluationSummary.
        :param evaluator_arn: The evaluator_arn of this EvaluationSummary.
        :param score: The score of this EvaluationSummary.
        :param created_time: The created_time of this EvaluationSummary.
        :param last_modified_time: The last_modified_time of this EvaluationSummary.
        """
        self.openapi_types = {
            'evaluation_id': str,
            'evaluation_arn': str,
            'evaluation_form_title': str,
            'evaluation_form_id': str,
            'status': EvaluationStatus,
            'evaluator_arn': str,
            'score': EvaluationMetadataScore,
            'created_time': datetime,
            'last_modified_time': datetime
        }

        self.attribute_map = {
            'evaluation_id': 'EvaluationId',
            'evaluation_arn': 'EvaluationArn',
            'evaluation_form_title': 'EvaluationFormTitle',
            'evaluation_form_id': 'EvaluationFormId',
            'status': 'Status',
            'evaluator_arn': 'EvaluatorArn',
            'score': 'Score',
            'created_time': 'CreatedTime',
            'last_modified_time': 'LastModifiedTime'
        }

        self._evaluation_id = evaluation_id
        self._evaluation_arn = evaluation_arn
        self._evaluation_form_title = evaluation_form_title
        self._evaluation_form_id = evaluation_form_id
        self._status = status
        self._evaluator_arn = evaluator_arn
        self._score = score
        self._created_time = created_time
        self._last_modified_time = last_modified_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationSummary of this EvaluationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_id(self):
        """Gets the evaluation_id of this EvaluationSummary.


        :return: The evaluation_id of this EvaluationSummary.
        :rtype: str
        """
        return self._evaluation_id

    @evaluation_id.setter
    def evaluation_id(self, evaluation_id):
        """Sets the evaluation_id of this EvaluationSummary.


        :param evaluation_id: The evaluation_id of this EvaluationSummary.
        :type evaluation_id: str
        """
        if evaluation_id is None:
            raise ValueError("Invalid value for `evaluation_id`, must not be `None`")

        self._evaluation_id = evaluation_id

    @property
    def evaluation_arn(self):
        """Gets the evaluation_arn of this EvaluationSummary.


        :return: The evaluation_arn of this EvaluationSummary.
        :rtype: str
        """
        return self._evaluation_arn

    @evaluation_arn.setter
    def evaluation_arn(self, evaluation_arn):
        """Sets the evaluation_arn of this EvaluationSummary.


        :param evaluation_arn: The evaluation_arn of this EvaluationSummary.
        :type evaluation_arn: str
        """
        if evaluation_arn is None:
            raise ValueError("Invalid value for `evaluation_arn`, must not be `None`")

        self._evaluation_arn = evaluation_arn

    @property
    def evaluation_form_title(self):
        """Gets the evaluation_form_title of this EvaluationSummary.


        :return: The evaluation_form_title of this EvaluationSummary.
        :rtype: str
        """
        return self._evaluation_form_title

    @evaluation_form_title.setter
    def evaluation_form_title(self, evaluation_form_title):
        """Sets the evaluation_form_title of this EvaluationSummary.


        :param evaluation_form_title: The evaluation_form_title of this EvaluationSummary.
        :type evaluation_form_title: str
        """
        if evaluation_form_title is None:
            raise ValueError("Invalid value for `evaluation_form_title`, must not be `None`")

        self._evaluation_form_title = evaluation_form_title

    @property
    def evaluation_form_id(self):
        """Gets the evaluation_form_id of this EvaluationSummary.


        :return: The evaluation_form_id of this EvaluationSummary.
        :rtype: str
        """
        return self._evaluation_form_id

    @evaluation_form_id.setter
    def evaluation_form_id(self, evaluation_form_id):
        """Sets the evaluation_form_id of this EvaluationSummary.


        :param evaluation_form_id: The evaluation_form_id of this EvaluationSummary.
        :type evaluation_form_id: str
        """
        if evaluation_form_id is None:
            raise ValueError("Invalid value for `evaluation_form_id`, must not be `None`")

        self._evaluation_form_id = evaluation_form_id

    @property
    def status(self):
        """Gets the status of this EvaluationSummary.


        :return: The status of this EvaluationSummary.
        :rtype: EvaluationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EvaluationSummary.


        :param status: The status of this EvaluationSummary.
        :type status: EvaluationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def evaluator_arn(self):
        """Gets the evaluator_arn of this EvaluationSummary.


        :return: The evaluator_arn of this EvaluationSummary.
        :rtype: str
        """
        return self._evaluator_arn

    @evaluator_arn.setter
    def evaluator_arn(self, evaluator_arn):
        """Sets the evaluator_arn of this EvaluationSummary.


        :param evaluator_arn: The evaluator_arn of this EvaluationSummary.
        :type evaluator_arn: str
        """
        if evaluator_arn is None:
            raise ValueError("Invalid value for `evaluator_arn`, must not be `None`")

        self._evaluator_arn = evaluator_arn

    @property
    def score(self):
        """Gets the score of this EvaluationSummary.


        :return: The score of this EvaluationSummary.
        :rtype: EvaluationMetadataScore
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this EvaluationSummary.


        :param score: The score of this EvaluationSummary.
        :type score: EvaluationMetadataScore
        """

        self._score = score

    @property
    def created_time(self):
        """Gets the created_time of this EvaluationSummary.


        :return: The created_time of this EvaluationSummary.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this EvaluationSummary.


        :param created_time: The created_time of this EvaluationSummary.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this EvaluationSummary.


        :return: The last_modified_time of this EvaluationSummary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this EvaluationSummary.


        :param last_modified_time: The last_modified_time of this EvaluationSummary.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time
