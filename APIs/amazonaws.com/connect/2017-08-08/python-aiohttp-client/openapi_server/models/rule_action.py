# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_type import ActionType
from openapi_server.models.rule_action_event_bridge_action import RuleActionEventBridgeAction
from openapi_server.models.rule_action_send_notification_action import RuleActionSendNotificationAction
from openapi_server.models.rule_action_task_action import RuleActionTaskAction
from openapi_server import util


class RuleAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: ActionType=None, task_action: RuleActionTaskAction=None, event_bridge_action: RuleActionEventBridgeAction=None, assign_contact_category_action: object=None, send_notification_action: RuleActionSendNotificationAction=None):
        """RuleAction - a model defined in OpenAPI

        :param action_type: The action_type of this RuleAction.
        :param task_action: The task_action of this RuleAction.
        :param event_bridge_action: The event_bridge_action of this RuleAction.
        :param assign_contact_category_action: The assign_contact_category_action of this RuleAction.
        :param send_notification_action: The send_notification_action of this RuleAction.
        """
        self.openapi_types = {
            'action_type': ActionType,
            'task_action': RuleActionTaskAction,
            'event_bridge_action': RuleActionEventBridgeAction,
            'assign_contact_category_action': object,
            'send_notification_action': RuleActionSendNotificationAction
        }

        self.attribute_map = {
            'action_type': 'ActionType',
            'task_action': 'TaskAction',
            'event_bridge_action': 'EventBridgeAction',
            'assign_contact_category_action': 'AssignContactCategoryAction',
            'send_notification_action': 'SendNotificationAction'
        }

        self._action_type = action_type
        self._task_action = task_action
        self._event_bridge_action = event_bridge_action
        self._assign_contact_category_action = assign_contact_category_action
        self._send_notification_action = send_notification_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleAction of this RuleAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this RuleAction.


        :return: The action_type of this RuleAction.
        :rtype: ActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this RuleAction.


        :param action_type: The action_type of this RuleAction.
        :type action_type: ActionType
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")

        self._action_type = action_type

    @property
    def task_action(self):
        """Gets the task_action of this RuleAction.


        :return: The task_action of this RuleAction.
        :rtype: RuleActionTaskAction
        """
        return self._task_action

    @task_action.setter
    def task_action(self, task_action):
        """Sets the task_action of this RuleAction.


        :param task_action: The task_action of this RuleAction.
        :type task_action: RuleActionTaskAction
        """

        self._task_action = task_action

    @property
    def event_bridge_action(self):
        """Gets the event_bridge_action of this RuleAction.


        :return: The event_bridge_action of this RuleAction.
        :rtype: RuleActionEventBridgeAction
        """
        return self._event_bridge_action

    @event_bridge_action.setter
    def event_bridge_action(self, event_bridge_action):
        """Sets the event_bridge_action of this RuleAction.


        :param event_bridge_action: The event_bridge_action of this RuleAction.
        :type event_bridge_action: RuleActionEventBridgeAction
        """

        self._event_bridge_action = event_bridge_action

    @property
    def assign_contact_category_action(self):
        """Gets the assign_contact_category_action of this RuleAction.


        :return: The assign_contact_category_action of this RuleAction.
        :rtype: object
        """
        return self._assign_contact_category_action

    @assign_contact_category_action.setter
    def assign_contact_category_action(self, assign_contact_category_action):
        """Sets the assign_contact_category_action of this RuleAction.


        :param assign_contact_category_action: The assign_contact_category_action of this RuleAction.
        :type assign_contact_category_action: object
        """

        self._assign_contact_category_action = assign_contact_category_action

    @property
    def send_notification_action(self):
        """Gets the send_notification_action of this RuleAction.


        :return: The send_notification_action of this RuleAction.
        :rtype: RuleActionSendNotificationAction
        """
        return self._send_notification_action

    @send_notification_action.setter
    def send_notification_action(self, send_notification_action):
        """Sets the send_notification_action of this RuleAction.


        :param send_notification_action: The send_notification_action of this RuleAction.
        :type send_notification_action: RuleActionSendNotificationAction
        """

        self._send_notification_action = send_notification_action
