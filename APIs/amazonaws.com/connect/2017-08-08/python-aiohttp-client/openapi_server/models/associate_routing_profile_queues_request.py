# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.routing_profile_queue_config import RoutingProfileQueueConfig
from openapi_server import util


class AssociateRoutingProfileQueuesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queue_configs: List[RoutingProfileQueueConfig]=None):
        """AssociateRoutingProfileQueuesRequest - a model defined in OpenAPI

        :param queue_configs: The queue_configs of this AssociateRoutingProfileQueuesRequest.
        """
        self.openapi_types = {
            'queue_configs': List[RoutingProfileQueueConfig]
        }

        self.attribute_map = {
            'queue_configs': 'QueueConfigs'
        }

        self._queue_configs = queue_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateRoutingProfileQueuesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateRoutingProfileQueues_request of this AssociateRoutingProfileQueuesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queue_configs(self):
        """Gets the queue_configs of this AssociateRoutingProfileQueuesRequest.

        The queues to associate with this routing profile.

        :return: The queue_configs of this AssociateRoutingProfileQueuesRequest.
        :rtype: List[RoutingProfileQueueConfig]
        """
        return self._queue_configs

    @queue_configs.setter
    def queue_configs(self, queue_configs):
        """Sets the queue_configs of this AssociateRoutingProfileQueuesRequest.

        The queues to associate with this routing profile.

        :param queue_configs: The queue_configs of this AssociateRoutingProfileQueuesRequest.
        :type queue_configs: List[RoutingProfileQueueConfig]
        """
        if queue_configs is None:
            raise ValueError("Invalid value for `queue_configs`, must not be `None`")
        if queue_configs is not None and len(queue_configs) > 10:
            raise ValueError("Invalid value for `queue_configs`, number of items must be less than or equal to `10`")
        if queue_configs is not None and len(queue_configs) < 1:
            raise ValueError("Invalid value for `queue_configs`, number of items must be greater than or equal to `1`")

        self._queue_configs = queue_configs
