# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListDefaultVocabulariesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, max_results: int=None, next_token: str=None):
        """ListDefaultVocabulariesRequest - a model defined in OpenAPI

        :param language_code: The language_code of this ListDefaultVocabulariesRequest.
        :param max_results: The max_results of this ListDefaultVocabulariesRequest.
        :param next_token: The next_token of this ListDefaultVocabulariesRequest.
        """
        self.openapi_types = {
            'language_code': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'language_code': 'LanguageCode',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._language_code = language_code
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDefaultVocabulariesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDefaultVocabularies_request of this ListDefaultVocabulariesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this ListDefaultVocabulariesRequest.

        The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html\">What is Amazon Transcribe?</a> 

        :return: The language_code of this ListDefaultVocabulariesRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this ListDefaultVocabulariesRequest.

        The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html\">What is Amazon Transcribe?</a> 

        :param language_code: The language_code of this ListDefaultVocabulariesRequest.
        :type language_code: str
        """
        allowed_values = ["ar-AE", "de-CH", "de-DE", "en-AB", "en-AU", "en-GB", "en-IE", "en-IN", "en-US", "en-WL", "es-ES", "es-US", "fr-CA", "fr-FR", "hi-IN", "it-IT", "ja-JP", "ko-KR", "pt-BR", "pt-PT", "zh-CN", "en-NZ", "en-ZA"]  # noqa: E501
        if language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `language_code` ({0}), must be one of {1}"
                .format(language_code, allowed_values)
            )

        self._language_code = language_code

    @property
    def max_results(self):
        """Gets the max_results of this ListDefaultVocabulariesRequest.

        The maximum number of results to return per page.

        :return: The max_results of this ListDefaultVocabulariesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListDefaultVocabulariesRequest.

        The maximum number of results to return per page.

        :param max_results: The max_results of this ListDefaultVocabulariesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListDefaultVocabulariesRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :return: The next_token of this ListDefaultVocabulariesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListDefaultVocabulariesRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :param next_token: The next_token of this ListDefaultVocabulariesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 131070:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `131070`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'.*\S.*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._next_token = next_token
