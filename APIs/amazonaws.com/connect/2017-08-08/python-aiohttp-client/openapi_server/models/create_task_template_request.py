# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_task_template_request_constraints import CreateTaskTemplateRequestConstraints
from openapi_server.models.create_task_template_request_defaults import CreateTaskTemplateRequestDefaults
from openapi_server.models.task_template_field import TaskTemplateField
from openapi_server import util


class CreateTaskTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, contact_flow_id: str=None, constraints: CreateTaskTemplateRequestConstraints=None, defaults: CreateTaskTemplateRequestDefaults=None, status: str=None, fields: List[TaskTemplateField]=None, client_token: str=None):
        """CreateTaskTemplateRequest - a model defined in OpenAPI

        :param name: The name of this CreateTaskTemplateRequest.
        :param description: The description of this CreateTaskTemplateRequest.
        :param contact_flow_id: The contact_flow_id of this CreateTaskTemplateRequest.
        :param constraints: The constraints of this CreateTaskTemplateRequest.
        :param defaults: The defaults of this CreateTaskTemplateRequest.
        :param status: The status of this CreateTaskTemplateRequest.
        :param fields: The fields of this CreateTaskTemplateRequest.
        :param client_token: The client_token of this CreateTaskTemplateRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'contact_flow_id': str,
            'constraints': CreateTaskTemplateRequestConstraints,
            'defaults': CreateTaskTemplateRequestDefaults,
            'status': str,
            'fields': List[TaskTemplateField],
            'client_token': str
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'contact_flow_id': 'ContactFlowId',
            'constraints': 'Constraints',
            'defaults': 'Defaults',
            'status': 'Status',
            'fields': 'Fields',
            'client_token': 'ClientToken'
        }

        self._name = name
        self._description = description
        self._contact_flow_id = contact_flow_id
        self._constraints = constraints
        self._defaults = defaults
        self._status = status
        self._fields = fields
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTaskTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTaskTemplate_request of this CreateTaskTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateTaskTemplateRequest.

        The name of the task template.

        :return: The name of this CreateTaskTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTaskTemplateRequest.

        The name of the task template.

        :param name: The name of this CreateTaskTemplateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateTaskTemplateRequest.

        The description of the task template.

        :return: The description of this CreateTaskTemplateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTaskTemplateRequest.

        The description of the task template.

        :param description: The description of this CreateTaskTemplateRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def contact_flow_id(self):
        """Gets the contact_flow_id of this CreateTaskTemplateRequest.

        The identifier of the flow that runs by default when a task is created by referencing this template.

        :return: The contact_flow_id of this CreateTaskTemplateRequest.
        :rtype: str
        """
        return self._contact_flow_id

    @contact_flow_id.setter
    def contact_flow_id(self, contact_flow_id):
        """Sets the contact_flow_id of this CreateTaskTemplateRequest.

        The identifier of the flow that runs by default when a task is created by referencing this template.

        :param contact_flow_id: The contact_flow_id of this CreateTaskTemplateRequest.
        :type contact_flow_id: str
        """
        if contact_flow_id is not None and len(contact_flow_id) > 500:
            raise ValueError("Invalid value for `contact_flow_id`, length must be less than or equal to `500`")

        self._contact_flow_id = contact_flow_id

    @property
    def constraints(self):
        """Gets the constraints of this CreateTaskTemplateRequest.


        :return: The constraints of this CreateTaskTemplateRequest.
        :rtype: CreateTaskTemplateRequestConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this CreateTaskTemplateRequest.


        :param constraints: The constraints of this CreateTaskTemplateRequest.
        :type constraints: CreateTaskTemplateRequestConstraints
        """

        self._constraints = constraints

    @property
    def defaults(self):
        """Gets the defaults of this CreateTaskTemplateRequest.


        :return: The defaults of this CreateTaskTemplateRequest.
        :rtype: CreateTaskTemplateRequestDefaults
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this CreateTaskTemplateRequest.


        :param defaults: The defaults of this CreateTaskTemplateRequest.
        :type defaults: CreateTaskTemplateRequestDefaults
        """

        self._defaults = defaults

    @property
    def status(self):
        """Gets the status of this CreateTaskTemplateRequest.

        Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created. 

        :return: The status of this CreateTaskTemplateRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateTaskTemplateRequest.

        Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created. 

        :param status: The status of this CreateTaskTemplateRequest.
        :type status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def fields(self):
        """Gets the fields of this CreateTaskTemplateRequest.

        Fields that are part of the template.

        :return: The fields of this CreateTaskTemplateRequest.
        :rtype: List[TaskTemplateField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this CreateTaskTemplateRequest.

        Fields that are part of the template.

        :param fields: The fields of this CreateTaskTemplateRequest.
        :type fields: List[TaskTemplateField]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def client_token(self):
        """Gets the client_token of this CreateTaskTemplateRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this CreateTaskTemplateRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateTaskTemplateRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this CreateTaskTemplateRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token
