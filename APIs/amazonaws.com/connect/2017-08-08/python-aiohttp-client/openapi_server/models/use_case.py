# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.use_case_type import UseCaseType
from openapi_server import util


class UseCase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, use_case_id: str=None, use_case_arn: str=None, use_case_type: UseCaseType=None):
        """UseCase - a model defined in OpenAPI

        :param use_case_id: The use_case_id of this UseCase.
        :param use_case_arn: The use_case_arn of this UseCase.
        :param use_case_type: The use_case_type of this UseCase.
        """
        self.openapi_types = {
            'use_case_id': str,
            'use_case_arn': str,
            'use_case_type': UseCaseType
        }

        self.attribute_map = {
            'use_case_id': 'UseCaseId',
            'use_case_arn': 'UseCaseArn',
            'use_case_type': 'UseCaseType'
        }

        self._use_case_id = use_case_id
        self._use_case_arn = use_case_arn
        self._use_case_type = use_case_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UseCase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UseCase of this UseCase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def use_case_id(self):
        """Gets the use_case_id of this UseCase.


        :return: The use_case_id of this UseCase.
        :rtype: str
        """
        return self._use_case_id

    @use_case_id.setter
    def use_case_id(self, use_case_id):
        """Sets the use_case_id of this UseCase.


        :param use_case_id: The use_case_id of this UseCase.
        :type use_case_id: str
        """

        self._use_case_id = use_case_id

    @property
    def use_case_arn(self):
        """Gets the use_case_arn of this UseCase.


        :return: The use_case_arn of this UseCase.
        :rtype: str
        """
        return self._use_case_arn

    @use_case_arn.setter
    def use_case_arn(self, use_case_arn):
        """Sets the use_case_arn of this UseCase.


        :param use_case_arn: The use_case_arn of this UseCase.
        :type use_case_arn: str
        """

        self._use_case_arn = use_case_arn

    @property
    def use_case_type(self):
        """Gets the use_case_type of this UseCase.


        :return: The use_case_type of this UseCase.
        :rtype: UseCaseType
        """
        return self._use_case_type

    @use_case_type.setter
    def use_case_type(self, use_case_type):
        """Sets the use_case_type of this UseCase.


        :param use_case_type: The use_case_type of this UseCase.
        :type use_case_type: UseCaseType
        """

        self._use_case_type = use_case_type
