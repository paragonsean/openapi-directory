# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_form_numeric_question_properties_automation import EvaluationFormNumericQuestionPropertiesAutomation
from openapi_server import util


class EvaluationFormQuestionTypePropertiesNumeric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_value: int=None, max_value: int=None, options: List=None, automation: EvaluationFormNumericQuestionPropertiesAutomation=None):
        """EvaluationFormQuestionTypePropertiesNumeric - a model defined in OpenAPI

        :param min_value: The min_value of this EvaluationFormQuestionTypePropertiesNumeric.
        :param max_value: The max_value of this EvaluationFormQuestionTypePropertiesNumeric.
        :param options: The options of this EvaluationFormQuestionTypePropertiesNumeric.
        :param automation: The automation of this EvaluationFormQuestionTypePropertiesNumeric.
        """
        self.openapi_types = {
            'min_value': int,
            'max_value': int,
            'options': List,
            'automation': EvaluationFormNumericQuestionPropertiesAutomation
        }

        self.attribute_map = {
            'min_value': 'MinValue',
            'max_value': 'MaxValue',
            'options': 'Options',
            'automation': 'Automation'
        }

        self._min_value = min_value
        self._max_value = max_value
        self._options = options
        self._automation = automation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationFormQuestionTypePropertiesNumeric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationFormQuestionTypeProperties_Numeric of this EvaluationFormQuestionTypePropertiesNumeric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_value(self):
        """Gets the min_value of this EvaluationFormQuestionTypePropertiesNumeric.


        :return: The min_value of this EvaluationFormQuestionTypePropertiesNumeric.
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this EvaluationFormQuestionTypePropertiesNumeric.


        :param min_value: The min_value of this EvaluationFormQuestionTypePropertiesNumeric.
        :type min_value: int
        """
        if min_value is None:
            raise ValueError("Invalid value for `min_value`, must not be `None`")

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this EvaluationFormQuestionTypePropertiesNumeric.


        :return: The max_value of this EvaluationFormQuestionTypePropertiesNumeric.
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this EvaluationFormQuestionTypePropertiesNumeric.


        :param max_value: The max_value of this EvaluationFormQuestionTypePropertiesNumeric.
        :type max_value: int
        """
        if max_value is None:
            raise ValueError("Invalid value for `max_value`, must not be `None`")

        self._max_value = max_value

    @property
    def options(self):
        """Gets the options of this EvaluationFormQuestionTypePropertiesNumeric.


        :return: The options of this EvaluationFormQuestionTypePropertiesNumeric.
        :rtype: List
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EvaluationFormQuestionTypePropertiesNumeric.


        :param options: The options of this EvaluationFormQuestionTypePropertiesNumeric.
        :type options: List
        """

        self._options = options

    @property
    def automation(self):
        """Gets the automation of this EvaluationFormQuestionTypePropertiesNumeric.


        :return: The automation of this EvaluationFormQuestionTypePropertiesNumeric.
        :rtype: EvaluationFormNumericQuestionPropertiesAutomation
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this EvaluationFormQuestionTypePropertiesNumeric.


        :param automation: The automation of this EvaluationFormQuestionTypePropertiesNumeric.
        :type automation: EvaluationFormNumericQuestionPropertiesAutomation
        """

        self._automation = automation
