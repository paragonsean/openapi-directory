# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskActionDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, contact_flow_id: str=None, references: Dict=None):
        """TaskActionDefinition - a model defined in OpenAPI

        :param name: The name of this TaskActionDefinition.
        :param description: The description of this TaskActionDefinition.
        :param contact_flow_id: The contact_flow_id of this TaskActionDefinition.
        :param references: The references of this TaskActionDefinition.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'contact_flow_id': str,
            'references': Dict
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'contact_flow_id': 'ContactFlowId',
            'references': 'References'
        }

        self._name = name
        self._description = description
        self._contact_flow_id = contact_flow_id
        self._references = references

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskActionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskActionDefinition of this TaskActionDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TaskActionDefinition.


        :return: The name of this TaskActionDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskActionDefinition.


        :param name: The name of this TaskActionDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this TaskActionDefinition.


        :return: The description of this TaskActionDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskActionDefinition.


        :param description: The description of this TaskActionDefinition.
        :type description: str
        """

        self._description = description

    @property
    def contact_flow_id(self):
        """Gets the contact_flow_id of this TaskActionDefinition.


        :return: The contact_flow_id of this TaskActionDefinition.
        :rtype: str
        """
        return self._contact_flow_id

    @contact_flow_id.setter
    def contact_flow_id(self, contact_flow_id):
        """Sets the contact_flow_id of this TaskActionDefinition.


        :param contact_flow_id: The contact_flow_id of this TaskActionDefinition.
        :type contact_flow_id: str
        """
        if contact_flow_id is None:
            raise ValueError("Invalid value for `contact_flow_id`, must not be `None`")

        self._contact_flow_id = contact_flow_id

    @property
    def references(self):
        """Gets the references of this TaskActionDefinition.


        :return: The references of this TaskActionDefinition.
        :rtype: Dict
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this TaskActionDefinition.


        :param references: The references of this TaskActionDefinition.
        :type references: Dict
        """

        self._references = references
