# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hours_of_operation_config import HoursOfOperationConfig
from openapi_server import util


class UpdateHoursOfOperationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, time_zone: str=None, config: List[HoursOfOperationConfig]=None):
        """UpdateHoursOfOperationRequest - a model defined in OpenAPI

        :param name: The name of this UpdateHoursOfOperationRequest.
        :param description: The description of this UpdateHoursOfOperationRequest.
        :param time_zone: The time_zone of this UpdateHoursOfOperationRequest.
        :param config: The config of this UpdateHoursOfOperationRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'time_zone': str,
            'config': List[HoursOfOperationConfig]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'time_zone': 'TimeZone',
            'config': 'Config'
        }

        self._name = name
        self._description = description
        self._time_zone = time_zone
        self._config = config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateHoursOfOperationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateHoursOfOperation_request of this UpdateHoursOfOperationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateHoursOfOperationRequest.

        The name of the hours of operation.

        :return: The name of this UpdateHoursOfOperationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateHoursOfOperationRequest.

        The name of the hours of operation.

        :param name: The name of this UpdateHoursOfOperationRequest.
        :type name: str
        """
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateHoursOfOperationRequest.

        The description of the hours of operation.

        :return: The description of this UpdateHoursOfOperationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateHoursOfOperationRequest.

        The description of the hours of operation.

        :param description: The description of this UpdateHoursOfOperationRequest.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def time_zone(self):
        """Gets the time_zone of this UpdateHoursOfOperationRequest.

        The time zone of the hours of operation.

        :return: The time_zone of this UpdateHoursOfOperationRequest.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this UpdateHoursOfOperationRequest.

        The time zone of the hours of operation.

        :param time_zone: The time_zone of this UpdateHoursOfOperationRequest.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def config(self):
        """Gets the config of this UpdateHoursOfOperationRequest.

        Configuration information of the hours of operation.

        :return: The config of this UpdateHoursOfOperationRequest.
        :rtype: List[HoursOfOperationConfig]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this UpdateHoursOfOperationRequest.

        Configuration information of the hours of operation.

        :param config: The config of this UpdateHoursOfOperationRequest.
        :type config: List[HoursOfOperationConfig]
        """
        if config is not None and len(config) > 100:
            raise ValueError("Invalid value for `config`, number of items must be less than or equal to `100`")
        if config is not None and len(config) < 0:
            raise ValueError("Invalid value for `config`, number of items must be greater than or equal to `0`")

        self._config = config
