# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_form_single_select_question_display_mode import EvaluationFormSingleSelectQuestionDisplayMode
from openapi_server.models.evaluation_form_single_select_question_properties_automation import EvaluationFormSingleSelectQuestionPropertiesAutomation
from openapi_server import util


class EvaluationFormSingleSelectQuestionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: List=None, display_as: EvaluationFormSingleSelectQuestionDisplayMode=None, automation: EvaluationFormSingleSelectQuestionPropertiesAutomation=None):
        """EvaluationFormSingleSelectQuestionProperties - a model defined in OpenAPI

        :param options: The options of this EvaluationFormSingleSelectQuestionProperties.
        :param display_as: The display_as of this EvaluationFormSingleSelectQuestionProperties.
        :param automation: The automation of this EvaluationFormSingleSelectQuestionProperties.
        """
        self.openapi_types = {
            'options': List,
            'display_as': EvaluationFormSingleSelectQuestionDisplayMode,
            'automation': EvaluationFormSingleSelectQuestionPropertiesAutomation
        }

        self.attribute_map = {
            'options': 'Options',
            'display_as': 'DisplayAs',
            'automation': 'Automation'
        }

        self._options = options
        self._display_as = display_as
        self._automation = automation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationFormSingleSelectQuestionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationFormSingleSelectQuestionProperties of this EvaluationFormSingleSelectQuestionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this EvaluationFormSingleSelectQuestionProperties.


        :return: The options of this EvaluationFormSingleSelectQuestionProperties.
        :rtype: List
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EvaluationFormSingleSelectQuestionProperties.


        :param options: The options of this EvaluationFormSingleSelectQuestionProperties.
        :type options: List
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def display_as(self):
        """Gets the display_as of this EvaluationFormSingleSelectQuestionProperties.


        :return: The display_as of this EvaluationFormSingleSelectQuestionProperties.
        :rtype: EvaluationFormSingleSelectQuestionDisplayMode
        """
        return self._display_as

    @display_as.setter
    def display_as(self, display_as):
        """Sets the display_as of this EvaluationFormSingleSelectQuestionProperties.


        :param display_as: The display_as of this EvaluationFormSingleSelectQuestionProperties.
        :type display_as: EvaluationFormSingleSelectQuestionDisplayMode
        """

        self._display_as = display_as

    @property
    def automation(self):
        """Gets the automation of this EvaluationFormSingleSelectQuestionProperties.


        :return: The automation of this EvaluationFormSingleSelectQuestionProperties.
        :rtype: EvaluationFormSingleSelectQuestionPropertiesAutomation
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this EvaluationFormSingleSelectQuestionProperties.


        :param automation: The automation of this EvaluationFormSingleSelectQuestionProperties.
        :type automation: EvaluationFormSingleSelectQuestionPropertiesAutomation
        """

        self._automation = automation
