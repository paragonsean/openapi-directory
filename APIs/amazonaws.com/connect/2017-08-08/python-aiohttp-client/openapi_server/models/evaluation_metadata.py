# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_metadata_score import EvaluationMetadataScore
from openapi_server import util


class EvaluationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, evaluator_arn: str=None, contact_agent_id: str=None, score: EvaluationMetadataScore=None):
        """EvaluationMetadata - a model defined in OpenAPI

        :param contact_id: The contact_id of this EvaluationMetadata.
        :param evaluator_arn: The evaluator_arn of this EvaluationMetadata.
        :param contact_agent_id: The contact_agent_id of this EvaluationMetadata.
        :param score: The score of this EvaluationMetadata.
        """
        self.openapi_types = {
            'contact_id': str,
            'evaluator_arn': str,
            'contact_agent_id': str,
            'score': EvaluationMetadataScore
        }

        self.attribute_map = {
            'contact_id': 'ContactId',
            'evaluator_arn': 'EvaluatorArn',
            'contact_agent_id': 'ContactAgentId',
            'score': 'Score'
        }

        self._contact_id = contact_id
        self._evaluator_arn = evaluator_arn
        self._contact_agent_id = contact_agent_id
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Evaluation_Metadata of this EvaluationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this EvaluationMetadata.


        :return: The contact_id of this EvaluationMetadata.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this EvaluationMetadata.


        :param contact_id: The contact_id of this EvaluationMetadata.
        :type contact_id: str
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")

        self._contact_id = contact_id

    @property
    def evaluator_arn(self):
        """Gets the evaluator_arn of this EvaluationMetadata.


        :return: The evaluator_arn of this EvaluationMetadata.
        :rtype: str
        """
        return self._evaluator_arn

    @evaluator_arn.setter
    def evaluator_arn(self, evaluator_arn):
        """Sets the evaluator_arn of this EvaluationMetadata.


        :param evaluator_arn: The evaluator_arn of this EvaluationMetadata.
        :type evaluator_arn: str
        """
        if evaluator_arn is None:
            raise ValueError("Invalid value for `evaluator_arn`, must not be `None`")

        self._evaluator_arn = evaluator_arn

    @property
    def contact_agent_id(self):
        """Gets the contact_agent_id of this EvaluationMetadata.


        :return: The contact_agent_id of this EvaluationMetadata.
        :rtype: str
        """
        return self._contact_agent_id

    @contact_agent_id.setter
    def contact_agent_id(self, contact_agent_id):
        """Sets the contact_agent_id of this EvaluationMetadata.


        :param contact_agent_id: The contact_agent_id of this EvaluationMetadata.
        :type contact_agent_id: str
        """

        self._contact_agent_id = contact_agent_id

    @property
    def score(self):
        """Gets the score of this EvaluationMetadata.


        :return: The score of this EvaluationMetadata.
        :rtype: EvaluationMetadataScore
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this EvaluationMetadata.


        :param score: The score of this EvaluationMetadata.
        :type score: EvaluationMetadataScore
        """

        self._score = score
