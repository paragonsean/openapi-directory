# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateContactFlowMetadataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, contact_flow_state: str=None):
        """UpdateContactFlowMetadataRequest - a model defined in OpenAPI

        :param name: The name of this UpdateContactFlowMetadataRequest.
        :param description: The description of this UpdateContactFlowMetadataRequest.
        :param contact_flow_state: The contact_flow_state of this UpdateContactFlowMetadataRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'contact_flow_state': str
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'contact_flow_state': 'ContactFlowState'
        }

        self._name = name
        self._description = description
        self._contact_flow_state = contact_flow_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContactFlowMetadataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContactFlowMetadata_request of this UpdateContactFlowMetadataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateContactFlowMetadataRequest.

        The name of the flow.

        :return: The name of this UpdateContactFlowMetadataRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateContactFlowMetadataRequest.

        The name of the flow.

        :param name: The name of this UpdateContactFlowMetadataRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateContactFlowMetadataRequest.

        The description of the flow.

        :return: The description of this UpdateContactFlowMetadataRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateContactFlowMetadataRequest.

        The description of the flow.

        :param description: The description of this UpdateContactFlowMetadataRequest.
        :type description: str
        """

        self._description = description

    @property
    def contact_flow_state(self):
        """Gets the contact_flow_state of this UpdateContactFlowMetadataRequest.

        The state of flow.

        :return: The contact_flow_state of this UpdateContactFlowMetadataRequest.
        :rtype: str
        """
        return self._contact_flow_state

    @contact_flow_state.setter
    def contact_flow_state(self, contact_flow_state):
        """Sets the contact_flow_state of this UpdateContactFlowMetadataRequest.

        The state of flow.

        :param contact_flow_state: The contact_flow_state of this UpdateContactFlowMetadataRequest.
        :type contact_flow_state: str
        """
        allowed_values = ["ACTIVE", "ARCHIVED"]  # noqa: E501
        if contact_flow_state not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_flow_state` ({0}), must be one of {1}"
                .format(contact_flow_state, allowed_values)
            )

        self._contact_flow_state = contact_flow_state
