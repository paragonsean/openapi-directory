# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vocabulary_language_code import VocabularyLanguageCode
from openapi_server import util


class DefaultVocabulary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, language_code: VocabularyLanguageCode=None, vocabulary_id: str=None, vocabulary_name: str=None):
        """DefaultVocabulary - a model defined in OpenAPI

        :param instance_id: The instance_id of this DefaultVocabulary.
        :param language_code: The language_code of this DefaultVocabulary.
        :param vocabulary_id: The vocabulary_id of this DefaultVocabulary.
        :param vocabulary_name: The vocabulary_name of this DefaultVocabulary.
        """
        self.openapi_types = {
            'instance_id': str,
            'language_code': VocabularyLanguageCode,
            'vocabulary_id': str,
            'vocabulary_name': str
        }

        self.attribute_map = {
            'instance_id': 'InstanceId',
            'language_code': 'LanguageCode',
            'vocabulary_id': 'VocabularyId',
            'vocabulary_name': 'VocabularyName'
        }

        self._instance_id = instance_id
        self._language_code = language_code
        self._vocabulary_id = vocabulary_id
        self._vocabulary_name = vocabulary_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefaultVocabulary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefaultVocabulary of this DefaultVocabulary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this DefaultVocabulary.


        :return: The instance_id of this DefaultVocabulary.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DefaultVocabulary.


        :param instance_id: The instance_id of this DefaultVocabulary.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def language_code(self):
        """Gets the language_code of this DefaultVocabulary.


        :return: The language_code of this DefaultVocabulary.
        :rtype: VocabularyLanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this DefaultVocabulary.


        :param language_code: The language_code of this DefaultVocabulary.
        :type language_code: VocabularyLanguageCode
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def vocabulary_id(self):
        """Gets the vocabulary_id of this DefaultVocabulary.


        :return: The vocabulary_id of this DefaultVocabulary.
        :rtype: str
        """
        return self._vocabulary_id

    @vocabulary_id.setter
    def vocabulary_id(self, vocabulary_id):
        """Sets the vocabulary_id of this DefaultVocabulary.


        :param vocabulary_id: The vocabulary_id of this DefaultVocabulary.
        :type vocabulary_id: str
        """
        if vocabulary_id is None:
            raise ValueError("Invalid value for `vocabulary_id`, must not be `None`")

        self._vocabulary_id = vocabulary_id

    @property
    def vocabulary_name(self):
        """Gets the vocabulary_name of this DefaultVocabulary.


        :return: The vocabulary_name of this DefaultVocabulary.
        :rtype: str
        """
        return self._vocabulary_name

    @vocabulary_name.setter
    def vocabulary_name(self, vocabulary_name):
        """Sets the vocabulary_name of this DefaultVocabulary.


        :param vocabulary_name: The vocabulary_name of this DefaultVocabulary.
        :type vocabulary_name: str
        """
        if vocabulary_name is None:
            raise ValueError("Invalid value for `vocabulary_name`, must not be `None`")

        self._vocabulary_name = vocabulary_name
