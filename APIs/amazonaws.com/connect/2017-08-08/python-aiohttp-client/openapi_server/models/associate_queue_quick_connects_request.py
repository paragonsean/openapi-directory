# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateQueueQuickConnectsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quick_connect_ids: List[str]=None):
        """AssociateQueueQuickConnectsRequest - a model defined in OpenAPI

        :param quick_connect_ids: The quick_connect_ids of this AssociateQueueQuickConnectsRequest.
        """
        self.openapi_types = {
            'quick_connect_ids': List[str]
        }

        self.attribute_map = {
            'quick_connect_ids': 'QuickConnectIds'
        }

        self._quick_connect_ids = quick_connect_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateQueueQuickConnectsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateQueueQuickConnects_request of this AssociateQueueQuickConnectsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quick_connect_ids(self):
        """Gets the quick_connect_ids of this AssociateQueueQuickConnectsRequest.

        The quick connects to associate with this queue.

        :return: The quick_connect_ids of this AssociateQueueQuickConnectsRequest.
        :rtype: List[str]
        """
        return self._quick_connect_ids

    @quick_connect_ids.setter
    def quick_connect_ids(self, quick_connect_ids):
        """Sets the quick_connect_ids of this AssociateQueueQuickConnectsRequest.

        The quick connects to associate with this queue.

        :param quick_connect_ids: The quick_connect_ids of this AssociateQueueQuickConnectsRequest.
        :type quick_connect_ids: List[str]
        """
        if quick_connect_ids is None:
            raise ValueError("Invalid value for `quick_connect_ids`, must not be `None`")
        if quick_connect_ids is not None and len(quick_connect_ids) > 50:
            raise ValueError("Invalid value for `quick_connect_ids`, number of items must be less than or equal to `50`")
        if quick_connect_ids is not None and len(quick_connect_ids) < 1:
            raise ValueError("Invalid value for `quick_connect_ids`, number of items must be greater than or equal to `1`")

        self._quick_connect_ids = quick_connect_ids
