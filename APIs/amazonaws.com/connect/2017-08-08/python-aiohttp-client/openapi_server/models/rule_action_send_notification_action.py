# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_content_type import NotificationContentType
from openapi_server.models.notification_delivery_type import NotificationDeliveryType
from openapi_server.models.send_notification_action_definition_recipient import SendNotificationActionDefinitionRecipient
from openapi_server import util


class RuleActionSendNotificationAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_method: NotificationDeliveryType=None, subject: str=None, content: str=None, content_type: NotificationContentType=None, recipient: SendNotificationActionDefinitionRecipient=None):
        """RuleActionSendNotificationAction - a model defined in OpenAPI

        :param delivery_method: The delivery_method of this RuleActionSendNotificationAction.
        :param subject: The subject of this RuleActionSendNotificationAction.
        :param content: The content of this RuleActionSendNotificationAction.
        :param content_type: The content_type of this RuleActionSendNotificationAction.
        :param recipient: The recipient of this RuleActionSendNotificationAction.
        """
        self.openapi_types = {
            'delivery_method': NotificationDeliveryType,
            'subject': str,
            'content': str,
            'content_type': NotificationContentType,
            'recipient': SendNotificationActionDefinitionRecipient
        }

        self.attribute_map = {
            'delivery_method': 'DeliveryMethod',
            'subject': 'Subject',
            'content': 'Content',
            'content_type': 'ContentType',
            'recipient': 'Recipient'
        }

        self._delivery_method = delivery_method
        self._subject = subject
        self._content = content
        self._content_type = content_type
        self._recipient = recipient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleActionSendNotificationAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleAction_SendNotificationAction of this RuleActionSendNotificationAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_method(self):
        """Gets the delivery_method of this RuleActionSendNotificationAction.


        :return: The delivery_method of this RuleActionSendNotificationAction.
        :rtype: NotificationDeliveryType
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this RuleActionSendNotificationAction.


        :param delivery_method: The delivery_method of this RuleActionSendNotificationAction.
        :type delivery_method: NotificationDeliveryType
        """
        if delivery_method is None:
            raise ValueError("Invalid value for `delivery_method`, must not be `None`")

        self._delivery_method = delivery_method

    @property
    def subject(self):
        """Gets the subject of this RuleActionSendNotificationAction.


        :return: The subject of this RuleActionSendNotificationAction.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this RuleActionSendNotificationAction.


        :param subject: The subject of this RuleActionSendNotificationAction.
        :type subject: str
        """

        self._subject = subject

    @property
    def content(self):
        """Gets the content of this RuleActionSendNotificationAction.


        :return: The content of this RuleActionSendNotificationAction.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this RuleActionSendNotificationAction.


        :param content: The content of this RuleActionSendNotificationAction.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this RuleActionSendNotificationAction.


        :return: The content_type of this RuleActionSendNotificationAction.
        :rtype: NotificationContentType
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this RuleActionSendNotificationAction.


        :param content_type: The content_type of this RuleActionSendNotificationAction.
        :type content_type: NotificationContentType
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def recipient(self):
        """Gets the recipient of this RuleActionSendNotificationAction.


        :return: The recipient of this RuleActionSendNotificationAction.
        :rtype: SendNotificationActionDefinitionRecipient
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this RuleActionSendNotificationAction.


        :param recipient: The recipient of this RuleActionSendNotificationAction.
        :type recipient: SendNotificationActionDefinitionRecipient
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")

        self._recipient = recipient
