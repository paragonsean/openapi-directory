# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vocabulary_language_code import VocabularyLanguageCode
from openapi_server.models.vocabulary_state import VocabularyState
from openapi_server import util


class DescribeVocabularyResponseVocabulary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, id: str=None, arn: str=None, language_code: VocabularyLanguageCode=None, state: VocabularyState=None, last_modified_time: datetime=None, failure_reason: str=None, content: str=None, tags: Dict=None):
        """DescribeVocabularyResponseVocabulary - a model defined in OpenAPI

        :param name: The name of this DescribeVocabularyResponseVocabulary.
        :param id: The id of this DescribeVocabularyResponseVocabulary.
        :param arn: The arn of this DescribeVocabularyResponseVocabulary.
        :param language_code: The language_code of this DescribeVocabularyResponseVocabulary.
        :param state: The state of this DescribeVocabularyResponseVocabulary.
        :param last_modified_time: The last_modified_time of this DescribeVocabularyResponseVocabulary.
        :param failure_reason: The failure_reason of this DescribeVocabularyResponseVocabulary.
        :param content: The content of this DescribeVocabularyResponseVocabulary.
        :param tags: The tags of this DescribeVocabularyResponseVocabulary.
        """
        self.openapi_types = {
            'name': str,
            'id': str,
            'arn': str,
            'language_code': VocabularyLanguageCode,
            'state': VocabularyState,
            'last_modified_time': datetime,
            'failure_reason': str,
            'content': str,
            'tags': Dict
        }

        self.attribute_map = {
            'name': 'Name',
            'id': 'Id',
            'arn': 'Arn',
            'language_code': 'LanguageCode',
            'state': 'State',
            'last_modified_time': 'LastModifiedTime',
            'failure_reason': 'FailureReason',
            'content': 'Content',
            'tags': 'Tags'
        }

        self._name = name
        self._id = id
        self._arn = arn
        self._language_code = language_code
        self._state = state
        self._last_modified_time = last_modified_time
        self._failure_reason = failure_reason
        self._content = content
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeVocabularyResponseVocabulary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeVocabularyResponse_Vocabulary of this DescribeVocabularyResponseVocabulary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DescribeVocabularyResponseVocabulary.


        :return: The name of this DescribeVocabularyResponseVocabulary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescribeVocabularyResponseVocabulary.


        :param name: The name of this DescribeVocabularyResponseVocabulary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def id(self):
        """Gets the id of this DescribeVocabularyResponseVocabulary.


        :return: The id of this DescribeVocabularyResponseVocabulary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DescribeVocabularyResponseVocabulary.


        :param id: The id of this DescribeVocabularyResponseVocabulary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this DescribeVocabularyResponseVocabulary.


        :return: The arn of this DescribeVocabularyResponseVocabulary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DescribeVocabularyResponseVocabulary.


        :param arn: The arn of this DescribeVocabularyResponseVocabulary.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def language_code(self):
        """Gets the language_code of this DescribeVocabularyResponseVocabulary.


        :return: The language_code of this DescribeVocabularyResponseVocabulary.
        :rtype: VocabularyLanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this DescribeVocabularyResponseVocabulary.


        :param language_code: The language_code of this DescribeVocabularyResponseVocabulary.
        :type language_code: VocabularyLanguageCode
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def state(self):
        """Gets the state of this DescribeVocabularyResponseVocabulary.


        :return: The state of this DescribeVocabularyResponseVocabulary.
        :rtype: VocabularyState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DescribeVocabularyResponseVocabulary.


        :param state: The state of this DescribeVocabularyResponseVocabulary.
        :type state: VocabularyState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DescribeVocabularyResponseVocabulary.


        :return: The last_modified_time of this DescribeVocabularyResponseVocabulary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DescribeVocabularyResponseVocabulary.


        :param last_modified_time: The last_modified_time of this DescribeVocabularyResponseVocabulary.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def failure_reason(self):
        """Gets the failure_reason of this DescribeVocabularyResponseVocabulary.


        :return: The failure_reason of this DescribeVocabularyResponseVocabulary.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this DescribeVocabularyResponseVocabulary.


        :param failure_reason: The failure_reason of this DescribeVocabularyResponseVocabulary.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def content(self):
        """Gets the content of this DescribeVocabularyResponseVocabulary.


        :return: The content of this DescribeVocabularyResponseVocabulary.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DescribeVocabularyResponseVocabulary.


        :param content: The content of this DescribeVocabularyResponseVocabulary.
        :type content: str
        """

        self._content = content

    @property
    def tags(self):
        """Gets the tags of this DescribeVocabularyResponseVocabulary.


        :return: The tags of this DescribeVocabularyResponseVocabulary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribeVocabularyResponseVocabulary.


        :param tags: The tags of this DescribeVocabularyResponseVocabulary.
        :type tags: Dict
        """

        self._tags = tags
