# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vocabulary_state import VocabularyState
from openapi_server import util


class CreateVocabularyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vocabulary_arn: str=None, vocabulary_id: str=None, state: VocabularyState=None):
        """CreateVocabularyResponse - a model defined in OpenAPI

        :param vocabulary_arn: The vocabulary_arn of this CreateVocabularyResponse.
        :param vocabulary_id: The vocabulary_id of this CreateVocabularyResponse.
        :param state: The state of this CreateVocabularyResponse.
        """
        self.openapi_types = {
            'vocabulary_arn': str,
            'vocabulary_id': str,
            'state': VocabularyState
        }

        self.attribute_map = {
            'vocabulary_arn': 'VocabularyArn',
            'vocabulary_id': 'VocabularyId',
            'state': 'State'
        }

        self._vocabulary_arn = vocabulary_arn
        self._vocabulary_id = vocabulary_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVocabularyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVocabularyResponse of this CreateVocabularyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vocabulary_arn(self):
        """Gets the vocabulary_arn of this CreateVocabularyResponse.


        :return: The vocabulary_arn of this CreateVocabularyResponse.
        :rtype: str
        """
        return self._vocabulary_arn

    @vocabulary_arn.setter
    def vocabulary_arn(self, vocabulary_arn):
        """Sets the vocabulary_arn of this CreateVocabularyResponse.


        :param vocabulary_arn: The vocabulary_arn of this CreateVocabularyResponse.
        :type vocabulary_arn: str
        """
        if vocabulary_arn is None:
            raise ValueError("Invalid value for `vocabulary_arn`, must not be `None`")

        self._vocabulary_arn = vocabulary_arn

    @property
    def vocabulary_id(self):
        """Gets the vocabulary_id of this CreateVocabularyResponse.


        :return: The vocabulary_id of this CreateVocabularyResponse.
        :rtype: str
        """
        return self._vocabulary_id

    @vocabulary_id.setter
    def vocabulary_id(self, vocabulary_id):
        """Sets the vocabulary_id of this CreateVocabularyResponse.


        :param vocabulary_id: The vocabulary_id of this CreateVocabularyResponse.
        :type vocabulary_id: str
        """
        if vocabulary_id is None:
            raise ValueError("Invalid value for `vocabulary_id`, must not be `None`")

        self._vocabulary_id = vocabulary_id

    @property
    def state(self):
        """Gets the state of this CreateVocabularyResponse.


        :return: The state of this CreateVocabularyResponse.
        :rtype: VocabularyState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateVocabularyResponse.


        :param state: The state of this CreateVocabularyResponse.
        :type state: VocabularyState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
