# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_template_field_id import TaskTemplateFieldId
from openapi_server.models.task_template_field_type import TaskTemplateFieldType
from openapi_server import util


class TaskTemplateField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: TaskTemplateFieldId=None, description: str=None, type: TaskTemplateFieldType=None, single_select_options: List=None):
        """TaskTemplateField - a model defined in OpenAPI

        :param id: The id of this TaskTemplateField.
        :param description: The description of this TaskTemplateField.
        :param type: The type of this TaskTemplateField.
        :param single_select_options: The single_select_options of this TaskTemplateField.
        """
        self.openapi_types = {
            'id': TaskTemplateFieldId,
            'description': str,
            'type': TaskTemplateFieldType,
            'single_select_options': List
        }

        self.attribute_map = {
            'id': 'Id',
            'description': 'Description',
            'type': 'Type',
            'single_select_options': 'SingleSelectOptions'
        }

        self._id = id
        self._description = description
        self._type = type
        self._single_select_options = single_select_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskTemplateField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskTemplateField of this TaskTemplateField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TaskTemplateField.


        :return: The id of this TaskTemplateField.
        :rtype: TaskTemplateFieldId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskTemplateField.


        :param id: The id of this TaskTemplateField.
        :type id: TaskTemplateFieldId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def description(self):
        """Gets the description of this TaskTemplateField.


        :return: The description of this TaskTemplateField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskTemplateField.


        :param description: The description of this TaskTemplateField.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this TaskTemplateField.


        :return: The type of this TaskTemplateField.
        :rtype: TaskTemplateFieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaskTemplateField.


        :param type: The type of this TaskTemplateField.
        :type type: TaskTemplateFieldType
        """

        self._type = type

    @property
    def single_select_options(self):
        """Gets the single_select_options of this TaskTemplateField.


        :return: The single_select_options of this TaskTemplateField.
        :rtype: List
        """
        return self._single_select_options

    @single_select_options.setter
    def single_select_options(self, single_select_options):
        """Sets the single_select_options of this TaskTemplateField.


        :param single_select_options: The single_select_options of this TaskTemplateField.
        :type single_select_options: List
        """

        self._single_select_options = single_select_options
