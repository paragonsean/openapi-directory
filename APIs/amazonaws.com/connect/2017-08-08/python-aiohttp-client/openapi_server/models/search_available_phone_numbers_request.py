# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SearchAvailablePhoneNumbersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_arn: str=None, phone_number_country_code: str=None, phone_number_type: str=None, phone_number_prefix: str=None, max_results: int=None, next_token: str=None):
        """SearchAvailablePhoneNumbersRequest - a model defined in OpenAPI

        :param target_arn: The target_arn of this SearchAvailablePhoneNumbersRequest.
        :param phone_number_country_code: The phone_number_country_code of this SearchAvailablePhoneNumbersRequest.
        :param phone_number_type: The phone_number_type of this SearchAvailablePhoneNumbersRequest.
        :param phone_number_prefix: The phone_number_prefix of this SearchAvailablePhoneNumbersRequest.
        :param max_results: The max_results of this SearchAvailablePhoneNumbersRequest.
        :param next_token: The next_token of this SearchAvailablePhoneNumbersRequest.
        """
        self.openapi_types = {
            'target_arn': str,
            'phone_number_country_code': str,
            'phone_number_type': str,
            'phone_number_prefix': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'target_arn': 'TargetArn',
            'phone_number_country_code': 'PhoneNumberCountryCode',
            'phone_number_type': 'PhoneNumberType',
            'phone_number_prefix': 'PhoneNumberPrefix',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._target_arn = target_arn
        self._phone_number_country_code = phone_number_country_code
        self._phone_number_type = phone_number_type
        self._phone_number_prefix = phone_number_prefix
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchAvailablePhoneNumbersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchAvailablePhoneNumbers_request of this SearchAvailablePhoneNumbersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_arn(self):
        """Gets the target_arn of this SearchAvailablePhoneNumbersRequest.

        The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to.

        :return: The target_arn of this SearchAvailablePhoneNumbersRequest.
        :rtype: str
        """
        return self._target_arn

    @target_arn.setter
    def target_arn(self, target_arn):
        """Sets the target_arn of this SearchAvailablePhoneNumbersRequest.

        The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to.

        :param target_arn: The target_arn of this SearchAvailablePhoneNumbersRequest.
        :type target_arn: str
        """
        if target_arn is None:
            raise ValueError("Invalid value for `target_arn`, must not be `None`")

        self._target_arn = target_arn

    @property
    def phone_number_country_code(self):
        """Gets the phone_number_country_code of this SearchAvailablePhoneNumbersRequest.

        The ISO country code.

        :return: The phone_number_country_code of this SearchAvailablePhoneNumbersRequest.
        :rtype: str
        """
        return self._phone_number_country_code

    @phone_number_country_code.setter
    def phone_number_country_code(self, phone_number_country_code):
        """Sets the phone_number_country_code of this SearchAvailablePhoneNumbersRequest.

        The ISO country code.

        :param phone_number_country_code: The phone_number_country_code of this SearchAvailablePhoneNumbersRequest.
        :type phone_number_country_code: str
        """
        allowed_values = ["AF", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AT", "AZ", "BS", "BH", "BD", "BB", "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BA", "BW", "BR", "IO", "VG", "BN", "BG", "BF", "BI", "KH", "CM", "CA", "CV", "KY", "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM", "CK", "CR", "HR", "CU", "CW", "CY", "CZ", "CD", "DK", "DJ", "DM", "DO", "TL", "EC", "EG", "SV", "GQ", "ER", "EE", "ET", "FK", "FO", "FJ", "FI", "FR", "PF", "GA", "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GU", "GT", "GG", "GN", "GW", "GY", "HT", "HN", "HK", "HU", "IS", "IN", "ID", "IR", "IQ", "IE", "IM", "IL", "IT", "CI", "JM", "JP", "JE", "JO", "KZ", "KE", "KI", "KW", "KG", "LA", "LV", "LB", "LS", "LR", "LY", "LI", "LT", "LU", "MO", "MK", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MR", "MU", "YT", "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "NL", "AN", "NC", "NZ", "NI", "NE", "NG", "NU", "KP", "MP", "NO", "OM", "PK", "PW", "PA", "PG", "PY", "PE", "PH", "PN", "PL", "PT", "PR", "QA", "CG", "RE", "RO", "RU", "RW", "BL", "SH", "KN", "LC", "MF", "PM", "VC", "WS", "SM", "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SK", "SI", "SB", "SO", "ZA", "KR", "ES", "LK", "SD", "SR", "SJ", "SZ", "SE", "CH", "SY", "TW", "TJ", "TZ", "TH", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV", "VI", "UG", "UA", "AE", "GB", "US", "UY", "UZ", "VU", "VA", "VE", "VN", "WF", "EH", "YE", "ZM", "ZW"]  # noqa: E501
        if phone_number_country_code not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_number_country_code` ({0}), must be one of {1}"
                .format(phone_number_country_code, allowed_values)
            )

        self._phone_number_country_code = phone_number_country_code

    @property
    def phone_number_type(self):
        """Gets the phone_number_type of this SearchAvailablePhoneNumbersRequest.

        The type of phone number.

        :return: The phone_number_type of this SearchAvailablePhoneNumbersRequest.
        :rtype: str
        """
        return self._phone_number_type

    @phone_number_type.setter
    def phone_number_type(self, phone_number_type):
        """Sets the phone_number_type of this SearchAvailablePhoneNumbersRequest.

        The type of phone number.

        :param phone_number_type: The phone_number_type of this SearchAvailablePhoneNumbersRequest.
        :type phone_number_type: str
        """
        allowed_values = ["TOLL_FREE", "DID", "UIFN", "SHARED", "THIRD_PARTY_TF", "THIRD_PARTY_DID"]  # noqa: E501
        if phone_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_number_type` ({0}), must be one of {1}"
                .format(phone_number_type, allowed_values)
            )

        self._phone_number_type = phone_number_type

    @property
    def phone_number_prefix(self):
        """Gets the phone_number_prefix of this SearchAvailablePhoneNumbersRequest.

        The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.

        :return: The phone_number_prefix of this SearchAvailablePhoneNumbersRequest.
        :rtype: str
        """
        return self._phone_number_prefix

    @phone_number_prefix.setter
    def phone_number_prefix(self, phone_number_prefix):
        """Sets the phone_number_prefix of this SearchAvailablePhoneNumbersRequest.

        The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.

        :param phone_number_prefix: The phone_number_prefix of this SearchAvailablePhoneNumbersRequest.
        :type phone_number_prefix: str
        """
        if phone_number_prefix is not None and not re.search(r'\\+?[0-9]{1,11}', phone_number_prefix):
            raise ValueError("Invalid value for `phone_number_prefix`, must be a follow pattern or equal to `/\\+?[0-9]{1,11}/`")

        self._phone_number_prefix = phone_number_prefix

    @property
    def max_results(self):
        """Gets the max_results of this SearchAvailablePhoneNumbersRequest.

        The maximum number of results to return per page.

        :return: The max_results of this SearchAvailablePhoneNumbersRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchAvailablePhoneNumbersRequest.

        The maximum number of results to return per page.

        :param max_results: The max_results of this SearchAvailablePhoneNumbersRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 10:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `10`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this SearchAvailablePhoneNumbersRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :return: The next_token of this SearchAvailablePhoneNumbersRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchAvailablePhoneNumbersRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :param next_token: The next_token of this SearchAvailablePhoneNumbersRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 100000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `100000`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token
