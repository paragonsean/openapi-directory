# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel import Channel
from openapi_server import util


class RoutingProfileQueueConfigSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queue_id: str=None, queue_arn: str=None, queue_name: str=None, priority: int=None, delay: int=None, channel: Channel=None):
        """RoutingProfileQueueConfigSummary - a model defined in OpenAPI

        :param queue_id: The queue_id of this RoutingProfileQueueConfigSummary.
        :param queue_arn: The queue_arn of this RoutingProfileQueueConfigSummary.
        :param queue_name: The queue_name of this RoutingProfileQueueConfigSummary.
        :param priority: The priority of this RoutingProfileQueueConfigSummary.
        :param delay: The delay of this RoutingProfileQueueConfigSummary.
        :param channel: The channel of this RoutingProfileQueueConfigSummary.
        """
        self.openapi_types = {
            'queue_id': str,
            'queue_arn': str,
            'queue_name': str,
            'priority': int,
            'delay': int,
            'channel': Channel
        }

        self.attribute_map = {
            'queue_id': 'QueueId',
            'queue_arn': 'QueueArn',
            'queue_name': 'QueueName',
            'priority': 'Priority',
            'delay': 'Delay',
            'channel': 'Channel'
        }

        self._queue_id = queue_id
        self._queue_arn = queue_arn
        self._queue_name = queue_name
        self._priority = priority
        self._delay = delay
        self._channel = channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutingProfileQueueConfigSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutingProfileQueueConfigSummary of this RoutingProfileQueueConfigSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queue_id(self):
        """Gets the queue_id of this RoutingProfileQueueConfigSummary.


        :return: The queue_id of this RoutingProfileQueueConfigSummary.
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this RoutingProfileQueueConfigSummary.


        :param queue_id: The queue_id of this RoutingProfileQueueConfigSummary.
        :type queue_id: str
        """
        if queue_id is None:
            raise ValueError("Invalid value for `queue_id`, must not be `None`")

        self._queue_id = queue_id

    @property
    def queue_arn(self):
        """Gets the queue_arn of this RoutingProfileQueueConfigSummary.


        :return: The queue_arn of this RoutingProfileQueueConfigSummary.
        :rtype: str
        """
        return self._queue_arn

    @queue_arn.setter
    def queue_arn(self, queue_arn):
        """Sets the queue_arn of this RoutingProfileQueueConfigSummary.


        :param queue_arn: The queue_arn of this RoutingProfileQueueConfigSummary.
        :type queue_arn: str
        """
        if queue_arn is None:
            raise ValueError("Invalid value for `queue_arn`, must not be `None`")

        self._queue_arn = queue_arn

    @property
    def queue_name(self):
        """Gets the queue_name of this RoutingProfileQueueConfigSummary.


        :return: The queue_name of this RoutingProfileQueueConfigSummary.
        :rtype: str
        """
        return self._queue_name

    @queue_name.setter
    def queue_name(self, queue_name):
        """Sets the queue_name of this RoutingProfileQueueConfigSummary.


        :param queue_name: The queue_name of this RoutingProfileQueueConfigSummary.
        :type queue_name: str
        """
        if queue_name is None:
            raise ValueError("Invalid value for `queue_name`, must not be `None`")

        self._queue_name = queue_name

    @property
    def priority(self):
        """Gets the priority of this RoutingProfileQueueConfigSummary.


        :return: The priority of this RoutingProfileQueueConfigSummary.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RoutingProfileQueueConfigSummary.


        :param priority: The priority of this RoutingProfileQueueConfigSummary.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def delay(self):
        """Gets the delay of this RoutingProfileQueueConfigSummary.


        :return: The delay of this RoutingProfileQueueConfigSummary.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this RoutingProfileQueueConfigSummary.


        :param delay: The delay of this RoutingProfileQueueConfigSummary.
        :type delay: int
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")

        self._delay = delay

    @property
    def channel(self):
        """Gets the channel of this RoutingProfileQueueConfigSummary.


        :return: The channel of this RoutingProfileQueueConfigSummary.
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this RoutingProfileQueueConfigSummary.


        :param channel: The channel of this RoutingProfileQueueConfigSummary.
        :type channel: Channel
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel
