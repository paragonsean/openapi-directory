# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateTrafficDistributionGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, instance_id: str=None, client_token: str=None, tags: Dict[str, str]=None):
        """CreateTrafficDistributionGroupRequest - a model defined in OpenAPI

        :param name: The name of this CreateTrafficDistributionGroupRequest.
        :param description: The description of this CreateTrafficDistributionGroupRequest.
        :param instance_id: The instance_id of this CreateTrafficDistributionGroupRequest.
        :param client_token: The client_token of this CreateTrafficDistributionGroupRequest.
        :param tags: The tags of this CreateTrafficDistributionGroupRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'instance_id': str,
            'client_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'instance_id': 'InstanceId',
            'client_token': 'ClientToken',
            'tags': 'Tags'
        }

        self._name = name
        self._description = description
        self._instance_id = instance_id
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTrafficDistributionGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTrafficDistributionGroup_request of this CreateTrafficDistributionGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateTrafficDistributionGroupRequest.

        The name for the traffic distribution group. 

        :return: The name of this CreateTrafficDistributionGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTrafficDistributionGroupRequest.

        The name for the traffic distribution group. 

        :param name: The name of this CreateTrafficDistributionGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'(^[\S].*[\S]$)|(^[\S]$)', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/(^[\S].*[\S]$)|(^[\S]$)/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateTrafficDistributionGroupRequest.

        A description for the traffic distribution group.

        :return: The description of this CreateTrafficDistributionGroupRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTrafficDistributionGroupRequest.

        A description for the traffic distribution group.

        :param description: The description of this CreateTrafficDistributionGroupRequest.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'(^[\S].*[\S]$)|(^[\S]$)', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/(^[\S].*[\S]$)|(^[\S]$)/`")

        self._description = description

    @property
    def instance_id(self):
        """Gets the instance_id of this CreateTrafficDistributionGroupRequest.

        The identifier of the Amazon Connect instance that has been replicated. You can find the <code>instanceId</code> in the ARN of the instance.

        :return: The instance_id of this CreateTrafficDistributionGroupRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this CreateTrafficDistributionGroupRequest.

        The identifier of the Amazon Connect instance that has been replicated. You can find the <code>instanceId</code> in the ARN of the instance.

        :param instance_id: The instance_id of this CreateTrafficDistributionGroupRequest.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")
        if instance_id is not None and len(instance_id) > 250:
            raise ValueError("Invalid value for `instance_id`, length must be less than or equal to `250`")
        if instance_id is not None and len(instance_id) < 1:
            raise ValueError("Invalid value for `instance_id`, length must be greater than or equal to `1`")
        if instance_id is not None and not re.search(r'^(arn:(aws|aws-us-gov):connect:[a-z]{2}-[a-z]+-[0-9]{1}:[0-9]{1,20}:instance\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', instance_id):
            raise ValueError("Invalid value for `instance_id`, must be a follow pattern or equal to `/^(arn:(aws|aws-us-gov):connect:[a-z]{2}-[a-z]+-[0-9]{1}:[0-9]{1,20}:instance\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._instance_id = instance_id

    @property
    def client_token(self):
        """Gets the client_token of this CreateTrafficDistributionGroupRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this CreateTrafficDistributionGroupRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateTrafficDistributionGroupRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this CreateTrafficDistributionGroupRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateTrafficDistributionGroupRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateTrafficDistributionGroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateTrafficDistributionGroupRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateTrafficDistributionGroupRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
