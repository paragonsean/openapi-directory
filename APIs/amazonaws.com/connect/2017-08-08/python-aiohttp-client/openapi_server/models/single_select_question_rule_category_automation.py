# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.single_select_question_rule_category_automation_condition import SingleSelectQuestionRuleCategoryAutomationCondition
from openapi_server import util


class SingleSelectQuestionRuleCategoryAutomation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, condition: SingleSelectQuestionRuleCategoryAutomationCondition=None, option_ref_id: str=None):
        """SingleSelectQuestionRuleCategoryAutomation - a model defined in OpenAPI

        :param category: The category of this SingleSelectQuestionRuleCategoryAutomation.
        :param condition: The condition of this SingleSelectQuestionRuleCategoryAutomation.
        :param option_ref_id: The option_ref_id of this SingleSelectQuestionRuleCategoryAutomation.
        """
        self.openapi_types = {
            'category': str,
            'condition': SingleSelectQuestionRuleCategoryAutomationCondition,
            'option_ref_id': str
        }

        self.attribute_map = {
            'category': 'Category',
            'condition': 'Condition',
            'option_ref_id': 'OptionRefId'
        }

        self._category = category
        self._condition = condition
        self._option_ref_id = option_ref_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SingleSelectQuestionRuleCategoryAutomation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SingleSelectQuestionRuleCategoryAutomation of this SingleSelectQuestionRuleCategoryAutomation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this SingleSelectQuestionRuleCategoryAutomation.


        :return: The category of this SingleSelectQuestionRuleCategoryAutomation.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SingleSelectQuestionRuleCategoryAutomation.


        :param category: The category of this SingleSelectQuestionRuleCategoryAutomation.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def condition(self):
        """Gets the condition of this SingleSelectQuestionRuleCategoryAutomation.


        :return: The condition of this SingleSelectQuestionRuleCategoryAutomation.
        :rtype: SingleSelectQuestionRuleCategoryAutomationCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this SingleSelectQuestionRuleCategoryAutomation.


        :param condition: The condition of this SingleSelectQuestionRuleCategoryAutomation.
        :type condition: SingleSelectQuestionRuleCategoryAutomationCondition
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition

    @property
    def option_ref_id(self):
        """Gets the option_ref_id of this SingleSelectQuestionRuleCategoryAutomation.


        :return: The option_ref_id of this SingleSelectQuestionRuleCategoryAutomation.
        :rtype: str
        """
        return self._option_ref_id

    @option_ref_id.setter
    def option_ref_id(self, option_ref_id):
        """Sets the option_ref_id of this SingleSelectQuestionRuleCategoryAutomation.


        :param option_ref_id: The option_ref_id of this SingleSelectQuestionRuleCategoryAutomation.
        :type option_ref_id: str
        """
        if option_ref_id is None:
            raise ValueError("Invalid value for `option_ref_id`, must not be `None`")

        self._option_ref_id = option_ref_id
