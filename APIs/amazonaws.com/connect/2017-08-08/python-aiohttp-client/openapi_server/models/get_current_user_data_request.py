# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_current_user_data_request_filters import GetCurrentUserDataRequestFilters
from openapi_server import util


class GetCurrentUserDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: GetCurrentUserDataRequestFilters=None, next_token: str=None, max_results: int=None):
        """GetCurrentUserDataRequest - a model defined in OpenAPI

        :param filters: The filters of this GetCurrentUserDataRequest.
        :param next_token: The next_token of this GetCurrentUserDataRequest.
        :param max_results: The max_results of this GetCurrentUserDataRequest.
        """
        self.openapi_types = {
            'filters': GetCurrentUserDataRequestFilters,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'filters': 'Filters',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._filters = filters
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCurrentUserDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCurrentUserData_request of this GetCurrentUserDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this GetCurrentUserDataRequest.


        :return: The filters of this GetCurrentUserDataRequest.
        :rtype: GetCurrentUserDataRequestFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this GetCurrentUserDataRequest.


        :param filters: The filters of this GetCurrentUserDataRequest.
        :type filters: GetCurrentUserDataRequestFilters
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")

        self._filters = filters

    @property
    def next_token(self):
        """Gets the next_token of this GetCurrentUserDataRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :return: The next_token of this GetCurrentUserDataRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetCurrentUserDataRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :param next_token: The next_token of this GetCurrentUserDataRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this GetCurrentUserDataRequest.

        The maximum number of results to return per page.

        :return: The max_results of this GetCurrentUserDataRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetCurrentUserDataRequest.

        The maximum number of results to return per page.

        :param max_results: The max_results of this GetCurrentUserDataRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
