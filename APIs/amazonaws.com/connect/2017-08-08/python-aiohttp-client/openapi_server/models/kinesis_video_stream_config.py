# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kinesis_video_stream_config_encryption_config import KinesisVideoStreamConfigEncryptionConfig
from openapi_server import util


class KinesisVideoStreamConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prefix: str=None, retention_period_hours: int=None, encryption_config: KinesisVideoStreamConfigEncryptionConfig=None):
        """KinesisVideoStreamConfig - a model defined in OpenAPI

        :param prefix: The prefix of this KinesisVideoStreamConfig.
        :param retention_period_hours: The retention_period_hours of this KinesisVideoStreamConfig.
        :param encryption_config: The encryption_config of this KinesisVideoStreamConfig.
        """
        self.openapi_types = {
            'prefix': str,
            'retention_period_hours': int,
            'encryption_config': KinesisVideoStreamConfigEncryptionConfig
        }

        self.attribute_map = {
            'prefix': 'Prefix',
            'retention_period_hours': 'RetentionPeriodHours',
            'encryption_config': 'EncryptionConfig'
        }

        self._prefix = prefix
        self._retention_period_hours = retention_period_hours
        self._encryption_config = encryption_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KinesisVideoStreamConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KinesisVideoStreamConfig of this KinesisVideoStreamConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prefix(self):
        """Gets the prefix of this KinesisVideoStreamConfig.


        :return: The prefix of this KinesisVideoStreamConfig.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this KinesisVideoStreamConfig.


        :param prefix: The prefix of this KinesisVideoStreamConfig.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def retention_period_hours(self):
        """Gets the retention_period_hours of this KinesisVideoStreamConfig.


        :return: The retention_period_hours of this KinesisVideoStreamConfig.
        :rtype: int
        """
        return self._retention_period_hours

    @retention_period_hours.setter
    def retention_period_hours(self, retention_period_hours):
        """Sets the retention_period_hours of this KinesisVideoStreamConfig.


        :param retention_period_hours: The retention_period_hours of this KinesisVideoStreamConfig.
        :type retention_period_hours: int
        """
        if retention_period_hours is None:
            raise ValueError("Invalid value for `retention_period_hours`, must not be `None`")

        self._retention_period_hours = retention_period_hours

    @property
    def encryption_config(self):
        """Gets the encryption_config of this KinesisVideoStreamConfig.


        :return: The encryption_config of this KinesisVideoStreamConfig.
        :rtype: KinesisVideoStreamConfigEncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this KinesisVideoStreamConfig.


        :param encryption_config: The encryption_config of this KinesisVideoStreamConfig.
        :type encryption_config: KinesisVideoStreamConfigEncryptionConfig
        """
        if encryption_config is None:
            raise ValueError("Invalid value for `encryption_config`, must not be `None`")

        self._encryption_config = encryption_config
