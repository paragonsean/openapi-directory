# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, identity_management_type: str=None, instance_alias: str=None, directory_id: str=None, inbound_calls_enabled: bool=None, outbound_calls_enabled: bool=None):
        """CreateInstanceRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateInstanceRequest.
        :param identity_management_type: The identity_management_type of this CreateInstanceRequest.
        :param instance_alias: The instance_alias of this CreateInstanceRequest.
        :param directory_id: The directory_id of this CreateInstanceRequest.
        :param inbound_calls_enabled: The inbound_calls_enabled of this CreateInstanceRequest.
        :param outbound_calls_enabled: The outbound_calls_enabled of this CreateInstanceRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'identity_management_type': str,
            'instance_alias': str,
            'directory_id': str,
            'inbound_calls_enabled': bool,
            'outbound_calls_enabled': bool
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'identity_management_type': 'IdentityManagementType',
            'instance_alias': 'InstanceAlias',
            'directory_id': 'DirectoryId',
            'inbound_calls_enabled': 'InboundCallsEnabled',
            'outbound_calls_enabled': 'OutboundCallsEnabled'
        }

        self._client_token = client_token
        self._identity_management_type = identity_management_type
        self._instance_alias = instance_alias
        self._directory_id = directory_id
        self._inbound_calls_enabled = inbound_calls_enabled
        self._outbound_calls_enabled = outbound_calls_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateInstance_request of this CreateInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateInstanceRequest.

        The idempotency token.

        :return: The client_token of this CreateInstanceRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateInstanceRequest.

        The idempotency token.

        :param client_token: The client_token of this CreateInstanceRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token

    @property
    def identity_management_type(self):
        """Gets the identity_management_type of this CreateInstanceRequest.

        The type of identity management for your Amazon Connect users.

        :return: The identity_management_type of this CreateInstanceRequest.
        :rtype: str
        """
        return self._identity_management_type

    @identity_management_type.setter
    def identity_management_type(self, identity_management_type):
        """Sets the identity_management_type of this CreateInstanceRequest.

        The type of identity management for your Amazon Connect users.

        :param identity_management_type: The identity_management_type of this CreateInstanceRequest.
        :type identity_management_type: str
        """
        allowed_values = ["SAML", "CONNECT_MANAGED", "EXISTING_DIRECTORY"]  # noqa: E501
        if identity_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `identity_management_type` ({0}), must be one of {1}"
                .format(identity_management_type, allowed_values)
            )

        self._identity_management_type = identity_management_type

    @property
    def instance_alias(self):
        """Gets the instance_alias of this CreateInstanceRequest.

        The name for your instance.

        :return: The instance_alias of this CreateInstanceRequest.
        :rtype: str
        """
        return self._instance_alias

    @instance_alias.setter
    def instance_alias(self, instance_alias):
        """Sets the instance_alias of this CreateInstanceRequest.

        The name for your instance.

        :param instance_alias: The instance_alias of this CreateInstanceRequest.
        :type instance_alias: str
        """
        if instance_alias is not None and len(instance_alias) > 45:
            raise ValueError("Invalid value for `instance_alias`, length must be less than or equal to `45`")
        if instance_alias is not None and len(instance_alias) < 1:
            raise ValueError("Invalid value for `instance_alias`, length must be greater than or equal to `1`")
        if instance_alias is not None and not re.search(r'^(?!d-)([\da-zA-Z]+)([-]*[\da-zA-Z])*$', instance_alias):
            raise ValueError("Invalid value for `instance_alias`, must be a follow pattern or equal to `/^(?!d-)([\da-zA-Z]+)([-]*[\da-zA-Z])*$/`")

        self._instance_alias = instance_alias

    @property
    def directory_id(self):
        """Gets the directory_id of this CreateInstanceRequest.

        The identifier for the directory.

        :return: The directory_id of this CreateInstanceRequest.
        :rtype: str
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this CreateInstanceRequest.

        The identifier for the directory.

        :param directory_id: The directory_id of this CreateInstanceRequest.
        :type directory_id: str
        """
        if directory_id is not None and len(directory_id) > 12:
            raise ValueError("Invalid value for `directory_id`, length must be less than or equal to `12`")
        if directory_id is not None and len(directory_id) < 12:
            raise ValueError("Invalid value for `directory_id`, length must be greater than or equal to `12`")
        if directory_id is not None and not re.search(r'^d-[0-9a-f]{10}$', directory_id):
            raise ValueError("Invalid value for `directory_id`, must be a follow pattern or equal to `/^d-[0-9a-f]{10}$/`")

        self._directory_id = directory_id

    @property
    def inbound_calls_enabled(self):
        """Gets the inbound_calls_enabled of this CreateInstanceRequest.

        Your contact center handles incoming contacts.

        :return: The inbound_calls_enabled of this CreateInstanceRequest.
        :rtype: bool
        """
        return self._inbound_calls_enabled

    @inbound_calls_enabled.setter
    def inbound_calls_enabled(self, inbound_calls_enabled):
        """Sets the inbound_calls_enabled of this CreateInstanceRequest.

        Your contact center handles incoming contacts.

        :param inbound_calls_enabled: The inbound_calls_enabled of this CreateInstanceRequest.
        :type inbound_calls_enabled: bool
        """
        if inbound_calls_enabled is None:
            raise ValueError("Invalid value for `inbound_calls_enabled`, must not be `None`")

        self._inbound_calls_enabled = inbound_calls_enabled

    @property
    def outbound_calls_enabled(self):
        """Gets the outbound_calls_enabled of this CreateInstanceRequest.

        Your contact center allows outbound calls.

        :return: The outbound_calls_enabled of this CreateInstanceRequest.
        :rtype: bool
        """
        return self._outbound_calls_enabled

    @outbound_calls_enabled.setter
    def outbound_calls_enabled(self, outbound_calls_enabled):
        """Sets the outbound_calls_enabled of this CreateInstanceRequest.

        Your contact center allows outbound calls.

        :param outbound_calls_enabled: The outbound_calls_enabled of this CreateInstanceRequest.
        :type outbound_calls_enabled: bool
        """
        if outbound_calls_enabled is None:
            raise ValueError("Invalid value for `outbound_calls_enabled`, must not be `None`")

        self._outbound_calls_enabled = outbound_calls_enabled
