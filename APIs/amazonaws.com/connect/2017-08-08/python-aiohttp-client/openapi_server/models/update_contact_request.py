# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reference import Reference
from openapi_server import util


class UpdateContactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, references: Dict[str, Reference]=None):
        """UpdateContactRequest - a model defined in OpenAPI

        :param name: The name of this UpdateContactRequest.
        :param description: The description of this UpdateContactRequest.
        :param references: The references of this UpdateContactRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'references': Dict[str, Reference]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'references': 'References'
        }

        self._name = name
        self._description = description
        self._references = references

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContact_request of this UpdateContactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateContactRequest.

        The name of the contact.

        :return: The name of this UpdateContactRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateContactRequest.

        The name of the contact.

        :param name: The name of this UpdateContactRequest.
        :type name: str
        """
        if name is not None and len(name) > 512:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `512`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateContactRequest.

        The description of the contact.

        :return: The description of this UpdateContactRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateContactRequest.

        The description of the contact.

        :param description: The description of this UpdateContactRequest.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def references(self):
        """Gets the references of this UpdateContactRequest.

        Well-formed data on contact, shown to agents on Contact Control Panel (CCP).

        :return: The references of this UpdateContactRequest.
        :rtype: Dict[str, Reference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this UpdateContactRequest.

        Well-formed data on contact, shown to agents on Contact Control Panel (CCP).

        :param references: The references of this UpdateContactRequest.
        :type references: Dict[str, Reference]
        """

        self._references = references
