# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvaluationAnswerInputValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, string_value: str=None, numeric_value: float=None, not_applicable: bool=None):
        """EvaluationAnswerInputValue - a model defined in OpenAPI

        :param string_value: The string_value of this EvaluationAnswerInputValue.
        :param numeric_value: The numeric_value of this EvaluationAnswerInputValue.
        :param not_applicable: The not_applicable of this EvaluationAnswerInputValue.
        """
        self.openapi_types = {
            'string_value': str,
            'numeric_value': float,
            'not_applicable': bool
        }

        self.attribute_map = {
            'string_value': 'StringValue',
            'numeric_value': 'NumericValue',
            'not_applicable': 'NotApplicable'
        }

        self._string_value = string_value
        self._numeric_value = numeric_value
        self._not_applicable = not_applicable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationAnswerInputValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationAnswerInput_Value of this EvaluationAnswerInputValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def string_value(self):
        """Gets the string_value of this EvaluationAnswerInputValue.


        :return: The string_value of this EvaluationAnswerInputValue.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this EvaluationAnswerInputValue.


        :param string_value: The string_value of this EvaluationAnswerInputValue.
        :type string_value: str
        """

        self._string_value = string_value

    @property
    def numeric_value(self):
        """Gets the numeric_value of this EvaluationAnswerInputValue.


        :return: The numeric_value of this EvaluationAnswerInputValue.
        :rtype: float
        """
        return self._numeric_value

    @numeric_value.setter
    def numeric_value(self, numeric_value):
        """Sets the numeric_value of this EvaluationAnswerInputValue.


        :param numeric_value: The numeric_value of this EvaluationAnswerInputValue.
        :type numeric_value: float
        """

        self._numeric_value = numeric_value

    @property
    def not_applicable(self):
        """Gets the not_applicable of this EvaluationAnswerInputValue.


        :return: The not_applicable of this EvaluationAnswerInputValue.
        :rtype: bool
        """
        return self._not_applicable

    @not_applicable.setter
    def not_applicable(self, not_applicable):
        """Sets the not_applicable of this EvaluationAnswerInputValue.


        :param not_applicable: The not_applicable of this EvaluationAnswerInputValue.
        :type not_applicable: bool
        """

        self._not_applicable = not_applicable
