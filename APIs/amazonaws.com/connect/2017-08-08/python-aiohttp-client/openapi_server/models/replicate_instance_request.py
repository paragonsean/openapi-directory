# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ReplicateInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replica_region: str=None, client_token: str=None, replica_alias: str=None):
        """ReplicateInstanceRequest - a model defined in OpenAPI

        :param replica_region: The replica_region of this ReplicateInstanceRequest.
        :param client_token: The client_token of this ReplicateInstanceRequest.
        :param replica_alias: The replica_alias of this ReplicateInstanceRequest.
        """
        self.openapi_types = {
            'replica_region': str,
            'client_token': str,
            'replica_alias': str
        }

        self.attribute_map = {
            'replica_region': 'ReplicaRegion',
            'client_token': 'ClientToken',
            'replica_alias': 'ReplicaAlias'
        }

        self._replica_region = replica_region
        self._client_token = client_token
        self._replica_alias = replica_alias

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicateInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicateInstance_request of this ReplicateInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replica_region(self):
        """Gets the replica_region of this ReplicateInstanceRequest.

        The Amazon Web Services Region where to replicate the Amazon Connect instance.

        :return: The replica_region of this ReplicateInstanceRequest.
        :rtype: str
        """
        return self._replica_region

    @replica_region.setter
    def replica_region(self, replica_region):
        """Sets the replica_region of this ReplicateInstanceRequest.

        The Amazon Web Services Region where to replicate the Amazon Connect instance.

        :param replica_region: The replica_region of this ReplicateInstanceRequest.
        :type replica_region: str
        """
        if replica_region is None:
            raise ValueError("Invalid value for `replica_region`, must not be `None`")
        if replica_region is not None and len(replica_region) > 31:
            raise ValueError("Invalid value for `replica_region`, length must be less than or equal to `31`")
        if replica_region is not None and len(replica_region) < 8:
            raise ValueError("Invalid value for `replica_region`, length must be greater than or equal to `8`")
        if replica_region is not None and not re.search(r'[a-z]{2}(-[a-z]+){1,2}(-[0-9])?', replica_region):
            raise ValueError("Invalid value for `replica_region`, must be a follow pattern or equal to `/[a-z]{2}(-[a-z]+){1,2}(-[0-9])?/`")

        self._replica_region = replica_region

    @property
    def client_token(self):
        """Gets the client_token of this ReplicateInstanceRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this ReplicateInstanceRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this ReplicateInstanceRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this ReplicateInstanceRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token

    @property
    def replica_alias(self):
        """Gets the replica_alias of this ReplicateInstanceRequest.

        The alias for the replicated instance. The <code>ReplicaAlias</code> must be unique.

        :return: The replica_alias of this ReplicateInstanceRequest.
        :rtype: str
        """
        return self._replica_alias

    @replica_alias.setter
    def replica_alias(self, replica_alias):
        """Sets the replica_alias of this ReplicateInstanceRequest.

        The alias for the replicated instance. The <code>ReplicaAlias</code> must be unique.

        :param replica_alias: The replica_alias of this ReplicateInstanceRequest.
        :type replica_alias: str
        """
        if replica_alias is None:
            raise ValueError("Invalid value for `replica_alias`, must not be `None`")
        if replica_alias is not None and len(replica_alias) > 45:
            raise ValueError("Invalid value for `replica_alias`, length must be less than or equal to `45`")
        if replica_alias is not None and len(replica_alias) < 1:
            raise ValueError("Invalid value for `replica_alias`, length must be greater than or equal to `1`")
        if replica_alias is not None and not re.search(r'^(?!d-)([\da-zA-Z]+)([-]*[\da-zA-Z])*$', replica_alias):
            raise ValueError("Invalid value for `replica_alias`, must be a follow pattern or equal to `/^(?!d-)([\da-zA-Z]+)([-]*[\da-zA-Z])*$/`")

        self._replica_alias = replica_alias
