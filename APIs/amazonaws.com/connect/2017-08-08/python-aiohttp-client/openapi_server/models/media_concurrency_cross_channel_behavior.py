# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.behavior_type import BehaviorType
from openapi_server import util


class MediaConcurrencyCrossChannelBehavior(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, behavior_type: BehaviorType=None):
        """MediaConcurrencyCrossChannelBehavior - a model defined in OpenAPI

        :param behavior_type: The behavior_type of this MediaConcurrencyCrossChannelBehavior.
        """
        self.openapi_types = {
            'behavior_type': BehaviorType
        }

        self.attribute_map = {
            'behavior_type': 'BehaviorType'
        }

        self._behavior_type = behavior_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaConcurrencyCrossChannelBehavior':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaConcurrency_CrossChannelBehavior of this MediaConcurrencyCrossChannelBehavior.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def behavior_type(self):
        """Gets the behavior_type of this MediaConcurrencyCrossChannelBehavior.


        :return: The behavior_type of this MediaConcurrencyCrossChannelBehavior.
        :rtype: BehaviorType
        """
        return self._behavior_type

    @behavior_type.setter
    def behavior_type(self, behavior_type):
        """Sets the behavior_type of this MediaConcurrencyCrossChannelBehavior.


        :param behavior_type: The behavior_type of this MediaConcurrencyCrossChannelBehavior.
        :type behavior_type: BehaviorType
        """
        if behavior_type is None:
            raise ValueError("Invalid value for `behavior_type`, must not be `None`")

        self._behavior_type = behavior_type
