# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateUserHierarchyGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, parent_group_id: str=None, tags: Dict[str, str]=None):
        """CreateUserHierarchyGroupRequest - a model defined in OpenAPI

        :param name: The name of this CreateUserHierarchyGroupRequest.
        :param parent_group_id: The parent_group_id of this CreateUserHierarchyGroupRequest.
        :param tags: The tags of this CreateUserHierarchyGroupRequest.
        """
        self.openapi_types = {
            'name': str,
            'parent_group_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'Name',
            'parent_group_id': 'ParentGroupId',
            'tags': 'Tags'
        }

        self._name = name
        self._parent_group_id = parent_group_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserHierarchyGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserHierarchyGroup_request of this CreateUserHierarchyGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateUserHierarchyGroupRequest.

        The name of the user hierarchy group. Must not be more than 100 characters.

        :return: The name of this CreateUserHierarchyGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUserHierarchyGroupRequest.

        The name of the user hierarchy group. Must not be more than 100 characters.

        :param name: The name of this CreateUserHierarchyGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_group_id(self):
        """Gets the parent_group_id of this CreateUserHierarchyGroupRequest.

        The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.

        :return: The parent_group_id of this CreateUserHierarchyGroupRequest.
        :rtype: str
        """
        return self._parent_group_id

    @parent_group_id.setter
    def parent_group_id(self, parent_group_id):
        """Sets the parent_group_id of this CreateUserHierarchyGroupRequest.

        The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.

        :param parent_group_id: The parent_group_id of this CreateUserHierarchyGroupRequest.
        :type parent_group_id: str
        """

        self._parent_group_id = parent_group_id

    @property
    def tags(self):
        """Gets the tags of this CreateUserHierarchyGroupRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateUserHierarchyGroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateUserHierarchyGroupRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateUserHierarchyGroupRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
