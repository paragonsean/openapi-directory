# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvaluationMetadataScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percentage: float=None, not_applicable: bool=None, automatic_fail: bool=None):
        """EvaluationMetadataScore - a model defined in OpenAPI

        :param percentage: The percentage of this EvaluationMetadataScore.
        :param not_applicable: The not_applicable of this EvaluationMetadataScore.
        :param automatic_fail: The automatic_fail of this EvaluationMetadataScore.
        """
        self.openapi_types = {
            'percentage': float,
            'not_applicable': bool,
            'automatic_fail': bool
        }

        self.attribute_map = {
            'percentage': 'Percentage',
            'not_applicable': 'NotApplicable',
            'automatic_fail': 'AutomaticFail'
        }

        self._percentage = percentage
        self._not_applicable = not_applicable
        self._automatic_fail = automatic_fail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationMetadataScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationMetadata_Score of this EvaluationMetadataScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentage(self):
        """Gets the percentage of this EvaluationMetadataScore.


        :return: The percentage of this EvaluationMetadataScore.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this EvaluationMetadataScore.


        :param percentage: The percentage of this EvaluationMetadataScore.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def not_applicable(self):
        """Gets the not_applicable of this EvaluationMetadataScore.


        :return: The not_applicable of this EvaluationMetadataScore.
        :rtype: bool
        """
        return self._not_applicable

    @not_applicable.setter
    def not_applicable(self, not_applicable):
        """Sets the not_applicable of this EvaluationMetadataScore.


        :param not_applicable: The not_applicable of this EvaluationMetadataScore.
        :type not_applicable: bool
        """

        self._not_applicable = not_applicable

    @property
    def automatic_fail(self):
        """Gets the automatic_fail of this EvaluationMetadataScore.


        :return: The automatic_fail of this EvaluationMetadataScore.
        :rtype: bool
        """
        return self._automatic_fail

    @automatic_fail.setter
    def automatic_fail(self, automatic_fail):
        """Sets the automatic_fail of this EvaluationMetadataScore.


        :param automatic_fail: The automatic_fail of this EvaluationMetadataScore.
        :type automatic_fail: bool
        """

        self._automatic_fail = automatic_fail
