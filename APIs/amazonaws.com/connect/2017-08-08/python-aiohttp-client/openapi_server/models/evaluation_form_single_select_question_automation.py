# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvaluationFormSingleSelectQuestionAutomation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: List=None, default_option_ref_id: str=None):
        """EvaluationFormSingleSelectQuestionAutomation - a model defined in OpenAPI

        :param options: The options of this EvaluationFormSingleSelectQuestionAutomation.
        :param default_option_ref_id: The default_option_ref_id of this EvaluationFormSingleSelectQuestionAutomation.
        """
        self.openapi_types = {
            'options': List,
            'default_option_ref_id': str
        }

        self.attribute_map = {
            'options': 'Options',
            'default_option_ref_id': 'DefaultOptionRefId'
        }

        self._options = options
        self._default_option_ref_id = default_option_ref_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationFormSingleSelectQuestionAutomation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationFormSingleSelectQuestionAutomation of this EvaluationFormSingleSelectQuestionAutomation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this EvaluationFormSingleSelectQuestionAutomation.


        :return: The options of this EvaluationFormSingleSelectQuestionAutomation.
        :rtype: List
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EvaluationFormSingleSelectQuestionAutomation.


        :param options: The options of this EvaluationFormSingleSelectQuestionAutomation.
        :type options: List
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def default_option_ref_id(self):
        """Gets the default_option_ref_id of this EvaluationFormSingleSelectQuestionAutomation.


        :return: The default_option_ref_id of this EvaluationFormSingleSelectQuestionAutomation.
        :rtype: str
        """
        return self._default_option_ref_id

    @default_option_ref_id.setter
    def default_option_ref_id(self, default_option_ref_id):
        """Sets the default_option_ref_id of this EvaluationFormSingleSelectQuestionAutomation.


        :param default_option_ref_id: The default_option_ref_id of this EvaluationFormSingleSelectQuestionAutomation.
        :type default_option_ref_id: str
        """

        self._default_option_ref_id = default_option_ref_id
