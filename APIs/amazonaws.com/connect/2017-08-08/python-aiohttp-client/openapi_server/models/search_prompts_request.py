# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_hours_of_operations_request_search_filter import SearchHoursOfOperationsRequestSearchFilter
from openapi_server.models.search_prompts_request_search_criteria import SearchPromptsRequestSearchCriteria
from openapi_server import util


class SearchPromptsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, next_token: str=None, max_results: int=None, search_filter: SearchHoursOfOperationsRequestSearchFilter=None, search_criteria: SearchPromptsRequestSearchCriteria=None):
        """SearchPromptsRequest - a model defined in OpenAPI

        :param instance_id: The instance_id of this SearchPromptsRequest.
        :param next_token: The next_token of this SearchPromptsRequest.
        :param max_results: The max_results of this SearchPromptsRequest.
        :param search_filter: The search_filter of this SearchPromptsRequest.
        :param search_criteria: The search_criteria of this SearchPromptsRequest.
        """
        self.openapi_types = {
            'instance_id': str,
            'next_token': str,
            'max_results': int,
            'search_filter': SearchHoursOfOperationsRequestSearchFilter,
            'search_criteria': SearchPromptsRequestSearchCriteria
        }

        self.attribute_map = {
            'instance_id': 'InstanceId',
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'search_filter': 'SearchFilter',
            'search_criteria': 'SearchCriteria'
        }

        self._instance_id = instance_id
        self._next_token = next_token
        self._max_results = max_results
        self._search_filter = search_filter
        self._search_criteria = search_criteria

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchPromptsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchPrompts_request of this SearchPromptsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this SearchPromptsRequest.

        The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.

        :return: The instance_id of this SearchPromptsRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SearchPromptsRequest.

        The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.

        :param instance_id: The instance_id of this SearchPromptsRequest.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")
        if instance_id is not None and len(instance_id) > 100:
            raise ValueError("Invalid value for `instance_id`, length must be less than or equal to `100`")
        if instance_id is not None and len(instance_id) < 1:
            raise ValueError("Invalid value for `instance_id`, length must be greater than or equal to `1`")

        self._instance_id = instance_id

    @property
    def next_token(self):
        """Gets the next_token of this SearchPromptsRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :return: The next_token of this SearchPromptsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchPromptsRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :param next_token: The next_token of this SearchPromptsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2500:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2500`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this SearchPromptsRequest.

        The maximum number of results to return per page.

        :return: The max_results of this SearchPromptsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchPromptsRequest.

        The maximum number of results to return per page.

        :param max_results: The max_results of this SearchPromptsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def search_filter(self):
        """Gets the search_filter of this SearchPromptsRequest.


        :return: The search_filter of this SearchPromptsRequest.
        :rtype: SearchHoursOfOperationsRequestSearchFilter
        """
        return self._search_filter

    @search_filter.setter
    def search_filter(self, search_filter):
        """Sets the search_filter of this SearchPromptsRequest.


        :param search_filter: The search_filter of this SearchPromptsRequest.
        :type search_filter: SearchHoursOfOperationsRequestSearchFilter
        """

        self._search_filter = search_filter

    @property
    def search_criteria(self):
        """Gets the search_criteria of this SearchPromptsRequest.


        :return: The search_criteria of this SearchPromptsRequest.
        :rtype: SearchPromptsRequestSearchCriteria
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria):
        """Sets the search_criteria of this SearchPromptsRequest.


        :param search_criteria: The search_criteria of this SearchPromptsRequest.
        :type search_criteria: SearchPromptsRequestSearchCriteria
        """

        self._search_criteria = search_criteria
