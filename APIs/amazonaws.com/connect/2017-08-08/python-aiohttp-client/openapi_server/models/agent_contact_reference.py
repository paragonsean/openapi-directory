# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel import Channel
from openapi_server.models.contact_initiation_method import ContactInitiationMethod
from openapi_server.models.contact_state import ContactState
from openapi_server.models.queue_reference import QueueReference
from openapi_server import util


class AgentContactReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, channel: Channel=None, initiation_method: ContactInitiationMethod=None, agent_contact_state: ContactState=None, state_start_timestamp: datetime=None, connected_to_agent_timestamp: datetime=None, queue: QueueReference=None):
        """AgentContactReference - a model defined in OpenAPI

        :param contact_id: The contact_id of this AgentContactReference.
        :param channel: The channel of this AgentContactReference.
        :param initiation_method: The initiation_method of this AgentContactReference.
        :param agent_contact_state: The agent_contact_state of this AgentContactReference.
        :param state_start_timestamp: The state_start_timestamp of this AgentContactReference.
        :param connected_to_agent_timestamp: The connected_to_agent_timestamp of this AgentContactReference.
        :param queue: The queue of this AgentContactReference.
        """
        self.openapi_types = {
            'contact_id': str,
            'channel': Channel,
            'initiation_method': ContactInitiationMethod,
            'agent_contact_state': ContactState,
            'state_start_timestamp': datetime,
            'connected_to_agent_timestamp': datetime,
            'queue': QueueReference
        }

        self.attribute_map = {
            'contact_id': 'ContactId',
            'channel': 'Channel',
            'initiation_method': 'InitiationMethod',
            'agent_contact_state': 'AgentContactState',
            'state_start_timestamp': 'StateStartTimestamp',
            'connected_to_agent_timestamp': 'ConnectedToAgentTimestamp',
            'queue': 'Queue'
        }

        self._contact_id = contact_id
        self._channel = channel
        self._initiation_method = initiation_method
        self._agent_contact_state = agent_contact_state
        self._state_start_timestamp = state_start_timestamp
        self._connected_to_agent_timestamp = connected_to_agent_timestamp
        self._queue = queue

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentContactReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentContactReference of this AgentContactReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this AgentContactReference.


        :return: The contact_id of this AgentContactReference.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this AgentContactReference.


        :param contact_id: The contact_id of this AgentContactReference.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def channel(self):
        """Gets the channel of this AgentContactReference.


        :return: The channel of this AgentContactReference.
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AgentContactReference.


        :param channel: The channel of this AgentContactReference.
        :type channel: Channel
        """

        self._channel = channel

    @property
    def initiation_method(self):
        """Gets the initiation_method of this AgentContactReference.


        :return: The initiation_method of this AgentContactReference.
        :rtype: ContactInitiationMethod
        """
        return self._initiation_method

    @initiation_method.setter
    def initiation_method(self, initiation_method):
        """Sets the initiation_method of this AgentContactReference.


        :param initiation_method: The initiation_method of this AgentContactReference.
        :type initiation_method: ContactInitiationMethod
        """

        self._initiation_method = initiation_method

    @property
    def agent_contact_state(self):
        """Gets the agent_contact_state of this AgentContactReference.


        :return: The agent_contact_state of this AgentContactReference.
        :rtype: ContactState
        """
        return self._agent_contact_state

    @agent_contact_state.setter
    def agent_contact_state(self, agent_contact_state):
        """Sets the agent_contact_state of this AgentContactReference.


        :param agent_contact_state: The agent_contact_state of this AgentContactReference.
        :type agent_contact_state: ContactState
        """

        self._agent_contact_state = agent_contact_state

    @property
    def state_start_timestamp(self):
        """Gets the state_start_timestamp of this AgentContactReference.


        :return: The state_start_timestamp of this AgentContactReference.
        :rtype: datetime
        """
        return self._state_start_timestamp

    @state_start_timestamp.setter
    def state_start_timestamp(self, state_start_timestamp):
        """Sets the state_start_timestamp of this AgentContactReference.


        :param state_start_timestamp: The state_start_timestamp of this AgentContactReference.
        :type state_start_timestamp: datetime
        """

        self._state_start_timestamp = state_start_timestamp

    @property
    def connected_to_agent_timestamp(self):
        """Gets the connected_to_agent_timestamp of this AgentContactReference.


        :return: The connected_to_agent_timestamp of this AgentContactReference.
        :rtype: datetime
        """
        return self._connected_to_agent_timestamp

    @connected_to_agent_timestamp.setter
    def connected_to_agent_timestamp(self, connected_to_agent_timestamp):
        """Sets the connected_to_agent_timestamp of this AgentContactReference.


        :param connected_to_agent_timestamp: The connected_to_agent_timestamp of this AgentContactReference.
        :type connected_to_agent_timestamp: datetime
        """

        self._connected_to_agent_timestamp = connected_to_agent_timestamp

    @property
    def queue(self):
        """Gets the queue of this AgentContactReference.


        :return: The queue of this AgentContactReference.
        :rtype: QueueReference
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this AgentContactReference.


        :param queue: The queue of this AgentContactReference.
        :type queue: QueueReference
        """

        self._queue = queue
