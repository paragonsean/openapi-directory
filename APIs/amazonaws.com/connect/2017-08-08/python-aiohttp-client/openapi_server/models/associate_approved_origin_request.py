# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateApprovedOriginRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, origin: str=None):
        """AssociateApprovedOriginRequest - a model defined in OpenAPI

        :param origin: The origin of this AssociateApprovedOriginRequest.
        """
        self.openapi_types = {
            'origin': str
        }

        self.attribute_map = {
            'origin': 'Origin'
        }

        self._origin = origin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateApprovedOriginRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateApprovedOrigin_request of this AssociateApprovedOriginRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin(self):
        """Gets the origin of this AssociateApprovedOriginRequest.

        The domain to add to your allow list.

        :return: The origin of this AssociateApprovedOriginRequest.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this AssociateApprovedOriginRequest.

        The domain to add to your allow list.

        :param origin: The origin of this AssociateApprovedOriginRequest.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")
        if origin is not None and len(origin) > 267:
            raise ValueError("Invalid value for `origin`, length must be less than or equal to `267`")

        self._origin = origin
