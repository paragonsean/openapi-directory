# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_type import EncryptionType
from openapi_server import util


class KinesisVideoStreamConfigEncryptionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_type: EncryptionType=None, key_id: str=None):
        """KinesisVideoStreamConfigEncryptionConfig - a model defined in OpenAPI

        :param encryption_type: The encryption_type of this KinesisVideoStreamConfigEncryptionConfig.
        :param key_id: The key_id of this KinesisVideoStreamConfigEncryptionConfig.
        """
        self.openapi_types = {
            'encryption_type': EncryptionType,
            'key_id': str
        }

        self.attribute_map = {
            'encryption_type': 'EncryptionType',
            'key_id': 'KeyId'
        }

        self._encryption_type = encryption_type
        self._key_id = key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KinesisVideoStreamConfigEncryptionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KinesisVideoStreamConfig_EncryptionConfig of this KinesisVideoStreamConfigEncryptionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_type(self):
        """Gets the encryption_type of this KinesisVideoStreamConfigEncryptionConfig.


        :return: The encryption_type of this KinesisVideoStreamConfigEncryptionConfig.
        :rtype: EncryptionType
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """Sets the encryption_type of this KinesisVideoStreamConfigEncryptionConfig.


        :param encryption_type: The encryption_type of this KinesisVideoStreamConfigEncryptionConfig.
        :type encryption_type: EncryptionType
        """
        if encryption_type is None:
            raise ValueError("Invalid value for `encryption_type`, must not be `None`")

        self._encryption_type = encryption_type

    @property
    def key_id(self):
        """Gets the key_id of this KinesisVideoStreamConfigEncryptionConfig.


        :return: The key_id of this KinesisVideoStreamConfigEncryptionConfig.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this KinesisVideoStreamConfigEncryptionConfig.


        :param key_id: The key_id of this KinesisVideoStreamConfigEncryptionConfig.
        :type key_id: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")

        self._key_id = key_id
