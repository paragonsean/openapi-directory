# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_instance_storage_config_request_storage_config_kinesis_firehose_config import AssociateInstanceStorageConfigRequestStorageConfigKinesisFirehoseConfig
from openapi_server.models.associate_instance_storage_config_request_storage_config_kinesis_stream_config import AssociateInstanceStorageConfigRequestStorageConfigKinesisStreamConfig
from openapi_server.models.associate_instance_storage_config_request_storage_config_kinesis_video_stream_config import AssociateInstanceStorageConfigRequestStorageConfigKinesisVideoStreamConfig
from openapi_server.models.associate_instance_storage_config_request_storage_config_s3_config import AssociateInstanceStorageConfigRequestStorageConfigS3Config
from openapi_server.models.storage_type import StorageType
from openapi_server import util


class InstanceStorageConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, association_id: str=None, storage_type: StorageType=None, s3_config: AssociateInstanceStorageConfigRequestStorageConfigS3Config=None, kinesis_video_stream_config: AssociateInstanceStorageConfigRequestStorageConfigKinesisVideoStreamConfig=None, kinesis_stream_config: AssociateInstanceStorageConfigRequestStorageConfigKinesisStreamConfig=None, kinesis_firehose_config: AssociateInstanceStorageConfigRequestStorageConfigKinesisFirehoseConfig=None):
        """InstanceStorageConfig - a model defined in OpenAPI

        :param association_id: The association_id of this InstanceStorageConfig.
        :param storage_type: The storage_type of this InstanceStorageConfig.
        :param s3_config: The s3_config of this InstanceStorageConfig.
        :param kinesis_video_stream_config: The kinesis_video_stream_config of this InstanceStorageConfig.
        :param kinesis_stream_config: The kinesis_stream_config of this InstanceStorageConfig.
        :param kinesis_firehose_config: The kinesis_firehose_config of this InstanceStorageConfig.
        """
        self.openapi_types = {
            'association_id': str,
            'storage_type': StorageType,
            's3_config': AssociateInstanceStorageConfigRequestStorageConfigS3Config,
            'kinesis_video_stream_config': AssociateInstanceStorageConfigRequestStorageConfigKinesisVideoStreamConfig,
            'kinesis_stream_config': AssociateInstanceStorageConfigRequestStorageConfigKinesisStreamConfig,
            'kinesis_firehose_config': AssociateInstanceStorageConfigRequestStorageConfigKinesisFirehoseConfig
        }

        self.attribute_map = {
            'association_id': 'AssociationId',
            'storage_type': 'StorageType',
            's3_config': 'S3Config',
            'kinesis_video_stream_config': 'KinesisVideoStreamConfig',
            'kinesis_stream_config': 'KinesisStreamConfig',
            'kinesis_firehose_config': 'KinesisFirehoseConfig'
        }

        self._association_id = association_id
        self._storage_type = storage_type
        self._s3_config = s3_config
        self._kinesis_video_stream_config = kinesis_video_stream_config
        self._kinesis_stream_config = kinesis_stream_config
        self._kinesis_firehose_config = kinesis_firehose_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceStorageConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceStorageConfig of this InstanceStorageConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def association_id(self):
        """Gets the association_id of this InstanceStorageConfig.


        :return: The association_id of this InstanceStorageConfig.
        :rtype: str
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id):
        """Sets the association_id of this InstanceStorageConfig.


        :param association_id: The association_id of this InstanceStorageConfig.
        :type association_id: str
        """

        self._association_id = association_id

    @property
    def storage_type(self):
        """Gets the storage_type of this InstanceStorageConfig.


        :return: The storage_type of this InstanceStorageConfig.
        :rtype: StorageType
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this InstanceStorageConfig.


        :param storage_type: The storage_type of this InstanceStorageConfig.
        :type storage_type: StorageType
        """
        if storage_type is None:
            raise ValueError("Invalid value for `storage_type`, must not be `None`")

        self._storage_type = storage_type

    @property
    def s3_config(self):
        """Gets the s3_config of this InstanceStorageConfig.


        :return: The s3_config of this InstanceStorageConfig.
        :rtype: AssociateInstanceStorageConfigRequestStorageConfigS3Config
        """
        return self._s3_config

    @s3_config.setter
    def s3_config(self, s3_config):
        """Sets the s3_config of this InstanceStorageConfig.


        :param s3_config: The s3_config of this InstanceStorageConfig.
        :type s3_config: AssociateInstanceStorageConfigRequestStorageConfigS3Config
        """

        self._s3_config = s3_config

    @property
    def kinesis_video_stream_config(self):
        """Gets the kinesis_video_stream_config of this InstanceStorageConfig.


        :return: The kinesis_video_stream_config of this InstanceStorageConfig.
        :rtype: AssociateInstanceStorageConfigRequestStorageConfigKinesisVideoStreamConfig
        """
        return self._kinesis_video_stream_config

    @kinesis_video_stream_config.setter
    def kinesis_video_stream_config(self, kinesis_video_stream_config):
        """Sets the kinesis_video_stream_config of this InstanceStorageConfig.


        :param kinesis_video_stream_config: The kinesis_video_stream_config of this InstanceStorageConfig.
        :type kinesis_video_stream_config: AssociateInstanceStorageConfigRequestStorageConfigKinesisVideoStreamConfig
        """

        self._kinesis_video_stream_config = kinesis_video_stream_config

    @property
    def kinesis_stream_config(self):
        """Gets the kinesis_stream_config of this InstanceStorageConfig.


        :return: The kinesis_stream_config of this InstanceStorageConfig.
        :rtype: AssociateInstanceStorageConfigRequestStorageConfigKinesisStreamConfig
        """
        return self._kinesis_stream_config

    @kinesis_stream_config.setter
    def kinesis_stream_config(self, kinesis_stream_config):
        """Sets the kinesis_stream_config of this InstanceStorageConfig.


        :param kinesis_stream_config: The kinesis_stream_config of this InstanceStorageConfig.
        :type kinesis_stream_config: AssociateInstanceStorageConfigRequestStorageConfigKinesisStreamConfig
        """

        self._kinesis_stream_config = kinesis_stream_config

    @property
    def kinesis_firehose_config(self):
        """Gets the kinesis_firehose_config of this InstanceStorageConfig.


        :return: The kinesis_firehose_config of this InstanceStorageConfig.
        :rtype: AssociateInstanceStorageConfigRequestStorageConfigKinesisFirehoseConfig
        """
        return self._kinesis_firehose_config

    @kinesis_firehose_config.setter
    def kinesis_firehose_config(self, kinesis_firehose_config):
        """Sets the kinesis_firehose_config of this InstanceStorageConfig.


        :param kinesis_firehose_config: The kinesis_firehose_config of this InstanceStorageConfig.
        :type kinesis_firehose_config: AssociateInstanceStorageConfigRequestStorageConfigKinesisFirehoseConfig
        """

        self._kinesis_firehose_config = kinesis_firehose_config
