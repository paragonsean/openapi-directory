# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSecurityProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, permissions: List[str]=None, allowed_access_control_tags: Dict[str, str]=None, tag_restricted_resources: List[str]=None):
        """UpdateSecurityProfileRequest - a model defined in OpenAPI

        :param description: The description of this UpdateSecurityProfileRequest.
        :param permissions: The permissions of this UpdateSecurityProfileRequest.
        :param allowed_access_control_tags: The allowed_access_control_tags of this UpdateSecurityProfileRequest.
        :param tag_restricted_resources: The tag_restricted_resources of this UpdateSecurityProfileRequest.
        """
        self.openapi_types = {
            'description': str,
            'permissions': List[str],
            'allowed_access_control_tags': Dict[str, str],
            'tag_restricted_resources': List[str]
        }

        self.attribute_map = {
            'description': 'Description',
            'permissions': 'Permissions',
            'allowed_access_control_tags': 'AllowedAccessControlTags',
            'tag_restricted_resources': 'TagRestrictedResources'
        }

        self._description = description
        self._permissions = permissions
        self._allowed_access_control_tags = allowed_access_control_tags
        self._tag_restricted_resources = tag_restricted_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSecurityProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSecurityProfile_request of this UpdateSecurityProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateSecurityProfileRequest.

        The description of the security profile.

        :return: The description of this UpdateSecurityProfileRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSecurityProfileRequest.

        The description of the security profile.

        :param description: The description of this UpdateSecurityProfileRequest.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")

        self._description = description

    @property
    def permissions(self):
        """Gets the permissions of this UpdateSecurityProfileRequest.

        The permissions granted to a security profile. For a list of valid permissions, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-list.html\">List of security profile permissions</a>.

        :return: The permissions of this UpdateSecurityProfileRequest.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UpdateSecurityProfileRequest.

        The permissions granted to a security profile. For a list of valid permissions, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-list.html\">List of security profile permissions</a>.

        :param permissions: The permissions of this UpdateSecurityProfileRequest.
        :type permissions: List[str]
        """
        if permissions is not None and len(permissions) > 500:
            raise ValueError("Invalid value for `permissions`, number of items must be less than or equal to `500`")

        self._permissions = permissions

    @property
    def allowed_access_control_tags(self):
        """Gets the allowed_access_control_tags of this UpdateSecurityProfileRequest.

        The list of tags that a security profile uses to restrict access to resources in Amazon Connect.

        :return: The allowed_access_control_tags of this UpdateSecurityProfileRequest.
        :rtype: Dict[str, str]
        """
        return self._allowed_access_control_tags

    @allowed_access_control_tags.setter
    def allowed_access_control_tags(self, allowed_access_control_tags):
        """Sets the allowed_access_control_tags of this UpdateSecurityProfileRequest.

        The list of tags that a security profile uses to restrict access to resources in Amazon Connect.

        :param allowed_access_control_tags: The allowed_access_control_tags of this UpdateSecurityProfileRequest.
        :type allowed_access_control_tags: Dict[str, str]
        """
        if allowed_access_control_tags is not None and len(allowed_access_control_tags) > 2:
            raise ValueError("Invalid value for `allowed_access_control_tags`, number of items must be less than or equal to `2`")

        self._allowed_access_control_tags = allowed_access_control_tags

    @property
    def tag_restricted_resources(self):
        """Gets the tag_restricted_resources of this UpdateSecurityProfileRequest.

        The list of resources that a security profile applies tag restrictions to in Amazon Connect.

        :return: The tag_restricted_resources of this UpdateSecurityProfileRequest.
        :rtype: List[str]
        """
        return self._tag_restricted_resources

    @tag_restricted_resources.setter
    def tag_restricted_resources(self, tag_restricted_resources):
        """Sets the tag_restricted_resources of this UpdateSecurityProfileRequest.

        The list of resources that a security profile applies tag restrictions to in Amazon Connect.

        :param tag_restricted_resources: The tag_restricted_resources of this UpdateSecurityProfileRequest.
        :type tag_restricted_resources: List[str]
        """
        if tag_restricted_resources is not None and len(tag_restricted_resources) > 10:
            raise ValueError("Invalid value for `tag_restricted_resources`, number of items must be less than or equal to `10`")

        self._tag_restricted_resources = tag_restricted_resources
