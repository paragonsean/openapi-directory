# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_form_scoring_mode import EvaluationFormScoringMode
from openapi_server.models.evaluation_form_scoring_status import EvaluationFormScoringStatus
from openapi_server import util


class EvaluationFormScoringStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode: EvaluationFormScoringMode=None, status: EvaluationFormScoringStatus=None):
        """EvaluationFormScoringStrategy - a model defined in OpenAPI

        :param mode: The mode of this EvaluationFormScoringStrategy.
        :param status: The status of this EvaluationFormScoringStrategy.
        """
        self.openapi_types = {
            'mode': EvaluationFormScoringMode,
            'status': EvaluationFormScoringStatus
        }

        self.attribute_map = {
            'mode': 'Mode',
            'status': 'Status'
        }

        self._mode = mode
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationFormScoringStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationFormScoringStrategy of this EvaluationFormScoringStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this EvaluationFormScoringStrategy.


        :return: The mode of this EvaluationFormScoringStrategy.
        :rtype: EvaluationFormScoringMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this EvaluationFormScoringStrategy.


        :param mode: The mode of this EvaluationFormScoringStrategy.
        :type mode: EvaluationFormScoringMode
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def status(self):
        """Gets the status of this EvaluationFormScoringStrategy.


        :return: The status of this EvaluationFormScoringStrategy.
        :rtype: EvaluationFormScoringStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EvaluationFormScoringStrategy.


        :param status: The status of this EvaluationFormScoringStrategy.
        :type status: EvaluationFormScoringStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
