# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_resource_tags_request_search_criteria import SearchResourceTagsRequestSearchCriteria
import re
from openapi_server import util


class SearchResourceTagsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, resource_types: List[str]=None, next_token: str=None, max_results: int=None, search_criteria: SearchResourceTagsRequestSearchCriteria=None):
        """SearchResourceTagsRequest - a model defined in OpenAPI

        :param instance_id: The instance_id of this SearchResourceTagsRequest.
        :param resource_types: The resource_types of this SearchResourceTagsRequest.
        :param next_token: The next_token of this SearchResourceTagsRequest.
        :param max_results: The max_results of this SearchResourceTagsRequest.
        :param search_criteria: The search_criteria of this SearchResourceTagsRequest.
        """
        self.openapi_types = {
            'instance_id': str,
            'resource_types': List[str],
            'next_token': str,
            'max_results': int,
            'search_criteria': SearchResourceTagsRequestSearchCriteria
        }

        self.attribute_map = {
            'instance_id': 'InstanceId',
            'resource_types': 'ResourceTypes',
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'search_criteria': 'SearchCriteria'
        }

        self._instance_id = instance_id
        self._resource_types = resource_types
        self._next_token = next_token
        self._max_results = max_results
        self._search_criteria = search_criteria

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResourceTagsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResourceTags_request of this SearchResourceTagsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this SearchResourceTagsRequest.

        The identifier of the Amazon Connect instance. You can find the instanceId in the Amazon Resource Name (ARN) of the instance.

        :return: The instance_id of this SearchResourceTagsRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SearchResourceTagsRequest.

        The identifier of the Amazon Connect instance. You can find the instanceId in the Amazon Resource Name (ARN) of the instance.

        :param instance_id: The instance_id of this SearchResourceTagsRequest.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")
        if instance_id is not None and len(instance_id) > 250:
            raise ValueError("Invalid value for `instance_id`, length must be less than or equal to `250`")
        if instance_id is not None and len(instance_id) < 1:
            raise ValueError("Invalid value for `instance_id`, length must be greater than or equal to `1`")
        if instance_id is not None and not re.search(r'^(arn:(aws|aws-us-gov):connect:[a-z]{2}-[a-z]+-[0-9]{1}:[0-9]{1,20}:instance\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', instance_id):
            raise ValueError("Invalid value for `instance_id`, must be a follow pattern or equal to `/^(arn:(aws|aws-us-gov):connect:[a-z]{2}-[a-z]+-[0-9]{1}:[0-9]{1,20}:instance\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._instance_id = instance_id

    @property
    def resource_types(self):
        """Gets the resource_types of this SearchResourceTagsRequest.

        The list of resource types to be used to search tags from. If not provided or if any empty list is provided, this API will search from all supported resource types.

        :return: The resource_types of this SearchResourceTagsRequest.
        :rtype: List[str]
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this SearchResourceTagsRequest.

        The list of resource types to be used to search tags from. If not provided or if any empty list is provided, this API will search from all supported resource types.

        :param resource_types: The resource_types of this SearchResourceTagsRequest.
        :type resource_types: List[str]
        """

        self._resource_types = resource_types

    @property
    def next_token(self):
        """Gets the next_token of this SearchResourceTagsRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :return: The next_token of this SearchResourceTagsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchResourceTagsRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :param next_token: The next_token of this SearchResourceTagsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2500:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2500`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this SearchResourceTagsRequest.

        The maximum number of results to return per page.

        :return: The max_results of this SearchResourceTagsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchResourceTagsRequest.

        The maximum number of results to return per page.

        :param max_results: The max_results of this SearchResourceTagsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def search_criteria(self):
        """Gets the search_criteria of this SearchResourceTagsRequest.


        :return: The search_criteria of this SearchResourceTagsRequest.
        :rtype: SearchResourceTagsRequestSearchCriteria
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria):
        """Sets the search_criteria of this SearchResourceTagsRequest.


        :param search_criteria: The search_criteria of this SearchResourceTagsRequest.
        :type search_criteria: SearchResourceTagsRequestSearchCriteria
        """

        self._search_criteria = search_criteria
