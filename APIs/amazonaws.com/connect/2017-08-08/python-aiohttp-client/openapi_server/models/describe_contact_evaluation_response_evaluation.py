# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_metadata import EvaluationMetadata
from openapi_server.models.evaluation_status import EvaluationStatus
from openapi_server import util


class DescribeContactEvaluationResponseEvaluation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_id: str=None, evaluation_arn: str=None, metadata: EvaluationMetadata=None, answers: Dict=None, notes: Dict=None, status: EvaluationStatus=None, scores: Dict=None, created_time: datetime=None, last_modified_time: datetime=None, tags: Dict=None):
        """DescribeContactEvaluationResponseEvaluation - a model defined in OpenAPI

        :param evaluation_id: The evaluation_id of this DescribeContactEvaluationResponseEvaluation.
        :param evaluation_arn: The evaluation_arn of this DescribeContactEvaluationResponseEvaluation.
        :param metadata: The metadata of this DescribeContactEvaluationResponseEvaluation.
        :param answers: The answers of this DescribeContactEvaluationResponseEvaluation.
        :param notes: The notes of this DescribeContactEvaluationResponseEvaluation.
        :param status: The status of this DescribeContactEvaluationResponseEvaluation.
        :param scores: The scores of this DescribeContactEvaluationResponseEvaluation.
        :param created_time: The created_time of this DescribeContactEvaluationResponseEvaluation.
        :param last_modified_time: The last_modified_time of this DescribeContactEvaluationResponseEvaluation.
        :param tags: The tags of this DescribeContactEvaluationResponseEvaluation.
        """
        self.openapi_types = {
            'evaluation_id': str,
            'evaluation_arn': str,
            'metadata': EvaluationMetadata,
            'answers': Dict,
            'notes': Dict,
            'status': EvaluationStatus,
            'scores': Dict,
            'created_time': datetime,
            'last_modified_time': datetime,
            'tags': Dict
        }

        self.attribute_map = {
            'evaluation_id': 'EvaluationId',
            'evaluation_arn': 'EvaluationArn',
            'metadata': 'Metadata',
            'answers': 'Answers',
            'notes': 'Notes',
            'status': 'Status',
            'scores': 'Scores',
            'created_time': 'CreatedTime',
            'last_modified_time': 'LastModifiedTime',
            'tags': 'Tags'
        }

        self._evaluation_id = evaluation_id
        self._evaluation_arn = evaluation_arn
        self._metadata = metadata
        self._answers = answers
        self._notes = notes
        self._status = status
        self._scores = scores
        self._created_time = created_time
        self._last_modified_time = last_modified_time
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeContactEvaluationResponseEvaluation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeContactEvaluationResponse_Evaluation of this DescribeContactEvaluationResponseEvaluation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_id(self):
        """Gets the evaluation_id of this DescribeContactEvaluationResponseEvaluation.


        :return: The evaluation_id of this DescribeContactEvaluationResponseEvaluation.
        :rtype: str
        """
        return self._evaluation_id

    @evaluation_id.setter
    def evaluation_id(self, evaluation_id):
        """Sets the evaluation_id of this DescribeContactEvaluationResponseEvaluation.


        :param evaluation_id: The evaluation_id of this DescribeContactEvaluationResponseEvaluation.
        :type evaluation_id: str
        """
        if evaluation_id is None:
            raise ValueError("Invalid value for `evaluation_id`, must not be `None`")

        self._evaluation_id = evaluation_id

    @property
    def evaluation_arn(self):
        """Gets the evaluation_arn of this DescribeContactEvaluationResponseEvaluation.


        :return: The evaluation_arn of this DescribeContactEvaluationResponseEvaluation.
        :rtype: str
        """
        return self._evaluation_arn

    @evaluation_arn.setter
    def evaluation_arn(self, evaluation_arn):
        """Sets the evaluation_arn of this DescribeContactEvaluationResponseEvaluation.


        :param evaluation_arn: The evaluation_arn of this DescribeContactEvaluationResponseEvaluation.
        :type evaluation_arn: str
        """
        if evaluation_arn is None:
            raise ValueError("Invalid value for `evaluation_arn`, must not be `None`")

        self._evaluation_arn = evaluation_arn

    @property
    def metadata(self):
        """Gets the metadata of this DescribeContactEvaluationResponseEvaluation.


        :return: The metadata of this DescribeContactEvaluationResponseEvaluation.
        :rtype: EvaluationMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DescribeContactEvaluationResponseEvaluation.


        :param metadata: The metadata of this DescribeContactEvaluationResponseEvaluation.
        :type metadata: EvaluationMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def answers(self):
        """Gets the answers of this DescribeContactEvaluationResponseEvaluation.


        :return: The answers of this DescribeContactEvaluationResponseEvaluation.
        :rtype: Dict
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this DescribeContactEvaluationResponseEvaluation.


        :param answers: The answers of this DescribeContactEvaluationResponseEvaluation.
        :type answers: Dict
        """
        if answers is None:
            raise ValueError("Invalid value for `answers`, must not be `None`")

        self._answers = answers

    @property
    def notes(self):
        """Gets the notes of this DescribeContactEvaluationResponseEvaluation.


        :return: The notes of this DescribeContactEvaluationResponseEvaluation.
        :rtype: Dict
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DescribeContactEvaluationResponseEvaluation.


        :param notes: The notes of this DescribeContactEvaluationResponseEvaluation.
        :type notes: Dict
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")

        self._notes = notes

    @property
    def status(self):
        """Gets the status of this DescribeContactEvaluationResponseEvaluation.


        :return: The status of this DescribeContactEvaluationResponseEvaluation.
        :rtype: EvaluationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeContactEvaluationResponseEvaluation.


        :param status: The status of this DescribeContactEvaluationResponseEvaluation.
        :type status: EvaluationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def scores(self):
        """Gets the scores of this DescribeContactEvaluationResponseEvaluation.


        :return: The scores of this DescribeContactEvaluationResponseEvaluation.
        :rtype: Dict
        """
        return self._scores

    @scores.setter
    def scores(self, scores):
        """Sets the scores of this DescribeContactEvaluationResponseEvaluation.


        :param scores: The scores of this DescribeContactEvaluationResponseEvaluation.
        :type scores: Dict
        """

        self._scores = scores

    @property
    def created_time(self):
        """Gets the created_time of this DescribeContactEvaluationResponseEvaluation.


        :return: The created_time of this DescribeContactEvaluationResponseEvaluation.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this DescribeContactEvaluationResponseEvaluation.


        :param created_time: The created_time of this DescribeContactEvaluationResponseEvaluation.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DescribeContactEvaluationResponseEvaluation.


        :return: The last_modified_time of this DescribeContactEvaluationResponseEvaluation.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DescribeContactEvaluationResponseEvaluation.


        :param last_modified_time: The last_modified_time of this DescribeContactEvaluationResponseEvaluation.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def tags(self):
        """Gets the tags of this DescribeContactEvaluationResponseEvaluation.


        :return: The tags of this DescribeContactEvaluationResponseEvaluation.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribeContactEvaluationResponseEvaluation.


        :param tags: The tags of this DescribeContactEvaluationResponseEvaluation.
        :type tags: Dict
        """

        self._tags = tags
