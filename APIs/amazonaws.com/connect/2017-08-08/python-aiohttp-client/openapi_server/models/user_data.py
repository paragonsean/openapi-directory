# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_data_hierarchy_path import UserDataHierarchyPath
from openapi_server.models.user_data_routing_profile import UserDataRoutingProfile
from openapi_server.models.user_data_status import UserDataStatus
from openapi_server.models.user_data_user import UserDataUser
from openapi_server import util


class UserData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user: UserDataUser=None, routing_profile: UserDataRoutingProfile=None, hierarchy_path: UserDataHierarchyPath=None, status: UserDataStatus=None, available_slots_by_channel: Dict=None, max_slots_by_channel: Dict=None, active_slots_by_channel: Dict=None, contacts: List=None, next_status: str=None):
        """UserData - a model defined in OpenAPI

        :param user: The user of this UserData.
        :param routing_profile: The routing_profile of this UserData.
        :param hierarchy_path: The hierarchy_path of this UserData.
        :param status: The status of this UserData.
        :param available_slots_by_channel: The available_slots_by_channel of this UserData.
        :param max_slots_by_channel: The max_slots_by_channel of this UserData.
        :param active_slots_by_channel: The active_slots_by_channel of this UserData.
        :param contacts: The contacts of this UserData.
        :param next_status: The next_status of this UserData.
        """
        self.openapi_types = {
            'user': UserDataUser,
            'routing_profile': UserDataRoutingProfile,
            'hierarchy_path': UserDataHierarchyPath,
            'status': UserDataStatus,
            'available_slots_by_channel': Dict,
            'max_slots_by_channel': Dict,
            'active_slots_by_channel': Dict,
            'contacts': List,
            'next_status': str
        }

        self.attribute_map = {
            'user': 'User',
            'routing_profile': 'RoutingProfile',
            'hierarchy_path': 'HierarchyPath',
            'status': 'Status',
            'available_slots_by_channel': 'AvailableSlotsByChannel',
            'max_slots_by_channel': 'MaxSlotsByChannel',
            'active_slots_by_channel': 'ActiveSlotsByChannel',
            'contacts': 'Contacts',
            'next_status': 'NextStatus'
        }

        self._user = user
        self._routing_profile = routing_profile
        self._hierarchy_path = hierarchy_path
        self._status = status
        self._available_slots_by_channel = available_slots_by_channel
        self._max_slots_by_channel = max_slots_by_channel
        self._active_slots_by_channel = active_slots_by_channel
        self._contacts = contacts
        self._next_status = next_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserData of this UserData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self):
        """Gets the user of this UserData.


        :return: The user of this UserData.
        :rtype: UserDataUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserData.


        :param user: The user of this UserData.
        :type user: UserDataUser
        """

        self._user = user

    @property
    def routing_profile(self):
        """Gets the routing_profile of this UserData.


        :return: The routing_profile of this UserData.
        :rtype: UserDataRoutingProfile
        """
        return self._routing_profile

    @routing_profile.setter
    def routing_profile(self, routing_profile):
        """Sets the routing_profile of this UserData.


        :param routing_profile: The routing_profile of this UserData.
        :type routing_profile: UserDataRoutingProfile
        """

        self._routing_profile = routing_profile

    @property
    def hierarchy_path(self):
        """Gets the hierarchy_path of this UserData.


        :return: The hierarchy_path of this UserData.
        :rtype: UserDataHierarchyPath
        """
        return self._hierarchy_path

    @hierarchy_path.setter
    def hierarchy_path(self, hierarchy_path):
        """Sets the hierarchy_path of this UserData.


        :param hierarchy_path: The hierarchy_path of this UserData.
        :type hierarchy_path: UserDataHierarchyPath
        """

        self._hierarchy_path = hierarchy_path

    @property
    def status(self):
        """Gets the status of this UserData.


        :return: The status of this UserData.
        :rtype: UserDataStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserData.


        :param status: The status of this UserData.
        :type status: UserDataStatus
        """

        self._status = status

    @property
    def available_slots_by_channel(self):
        """Gets the available_slots_by_channel of this UserData.


        :return: The available_slots_by_channel of this UserData.
        :rtype: Dict
        """
        return self._available_slots_by_channel

    @available_slots_by_channel.setter
    def available_slots_by_channel(self, available_slots_by_channel):
        """Sets the available_slots_by_channel of this UserData.


        :param available_slots_by_channel: The available_slots_by_channel of this UserData.
        :type available_slots_by_channel: Dict
        """

        self._available_slots_by_channel = available_slots_by_channel

    @property
    def max_slots_by_channel(self):
        """Gets the max_slots_by_channel of this UserData.


        :return: The max_slots_by_channel of this UserData.
        :rtype: Dict
        """
        return self._max_slots_by_channel

    @max_slots_by_channel.setter
    def max_slots_by_channel(self, max_slots_by_channel):
        """Sets the max_slots_by_channel of this UserData.


        :param max_slots_by_channel: The max_slots_by_channel of this UserData.
        :type max_slots_by_channel: Dict
        """

        self._max_slots_by_channel = max_slots_by_channel

    @property
    def active_slots_by_channel(self):
        """Gets the active_slots_by_channel of this UserData.


        :return: The active_slots_by_channel of this UserData.
        :rtype: Dict
        """
        return self._active_slots_by_channel

    @active_slots_by_channel.setter
    def active_slots_by_channel(self, active_slots_by_channel):
        """Sets the active_slots_by_channel of this UserData.


        :param active_slots_by_channel: The active_slots_by_channel of this UserData.
        :type active_slots_by_channel: Dict
        """

        self._active_slots_by_channel = active_slots_by_channel

    @property
    def contacts(self):
        """Gets the contacts of this UserData.


        :return: The contacts of this UserData.
        :rtype: List
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this UserData.


        :param contacts: The contacts of this UserData.
        :type contacts: List
        """

        self._contacts = contacts

    @property
    def next_status(self):
        """Gets the next_status of this UserData.


        :return: The next_status of this UserData.
        :rtype: str
        """
        return self._next_status

    @next_status.setter
    def next_status(self, next_status):
        """Sets the next_status of this UserData.


        :param next_status: The next_status of this UserData.
        :type next_status: str
        """

        self._next_status = next_status
