# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateIntegrationAssociationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, integration_type: str=None, integration_arn: str=None, source_application_url: str=None, source_application_name: str=None, source_type: str=None, tags: Dict[str, str]=None):
        """CreateIntegrationAssociationRequest - a model defined in OpenAPI

        :param integration_type: The integration_type of this CreateIntegrationAssociationRequest.
        :param integration_arn: The integration_arn of this CreateIntegrationAssociationRequest.
        :param source_application_url: The source_application_url of this CreateIntegrationAssociationRequest.
        :param source_application_name: The source_application_name of this CreateIntegrationAssociationRequest.
        :param source_type: The source_type of this CreateIntegrationAssociationRequest.
        :param tags: The tags of this CreateIntegrationAssociationRequest.
        """
        self.openapi_types = {
            'integration_type': str,
            'integration_arn': str,
            'source_application_url': str,
            'source_application_name': str,
            'source_type': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'integration_type': 'IntegrationType',
            'integration_arn': 'IntegrationArn',
            'source_application_url': 'SourceApplicationUrl',
            'source_application_name': 'SourceApplicationName',
            'source_type': 'SourceType',
            'tags': 'Tags'
        }

        self._integration_type = integration_type
        self._integration_arn = integration_arn
        self._source_application_url = source_application_url
        self._source_application_name = source_application_name
        self._source_type = source_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIntegrationAssociationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIntegrationAssociation_request of this CreateIntegrationAssociationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def integration_type(self):
        """Gets the integration_type of this CreateIntegrationAssociationRequest.

        The type of information to be ingested.

        :return: The integration_type of this CreateIntegrationAssociationRequest.
        :rtype: str
        """
        return self._integration_type

    @integration_type.setter
    def integration_type(self, integration_type):
        """Sets the integration_type of this CreateIntegrationAssociationRequest.

        The type of information to be ingested.

        :param integration_type: The integration_type of this CreateIntegrationAssociationRequest.
        :type integration_type: str
        """
        allowed_values = ["EVENT", "VOICE_ID", "PINPOINT_APP", "WISDOM_ASSISTANT", "WISDOM_KNOWLEDGE_BASE", "CASES_DOMAIN"]  # noqa: E501
        if integration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `integration_type` ({0}), must be one of {1}"
                .format(integration_type, allowed_values)
            )

        self._integration_type = integration_type

    @property
    def integration_arn(self):
        """Gets the integration_arn of this CreateIntegrationAssociationRequest.

        <p>The Amazon Resource Name (ARN) of the integration.</p> <note> <p>When integrating with Amazon Pinpoint, the Amazon Connect and Amazon Pinpoint instances must be in the same account.</p> </note>

        :return: The integration_arn of this CreateIntegrationAssociationRequest.
        :rtype: str
        """
        return self._integration_arn

    @integration_arn.setter
    def integration_arn(self, integration_arn):
        """Sets the integration_arn of this CreateIntegrationAssociationRequest.

        <p>The Amazon Resource Name (ARN) of the integration.</p> <note> <p>When integrating with Amazon Pinpoint, the Amazon Connect and Amazon Pinpoint instances must be in the same account.</p> </note>

        :param integration_arn: The integration_arn of this CreateIntegrationAssociationRequest.
        :type integration_arn: str
        """
        if integration_arn is None:
            raise ValueError("Invalid value for `integration_arn`, must not be `None`")

        self._integration_arn = integration_arn

    @property
    def source_application_url(self):
        """Gets the source_application_url of this CreateIntegrationAssociationRequest.

        The URL for the external application. This field is only required for the EVENT integration type.

        :return: The source_application_url of this CreateIntegrationAssociationRequest.
        :rtype: str
        """
        return self._source_application_url

    @source_application_url.setter
    def source_application_url(self, source_application_url):
        """Sets the source_application_url of this CreateIntegrationAssociationRequest.

        The URL for the external application. This field is only required for the EVENT integration type.

        :param source_application_url: The source_application_url of this CreateIntegrationAssociationRequest.
        :type source_application_url: str
        """
        if source_application_url is not None and len(source_application_url) > 2000:
            raise ValueError("Invalid value for `source_application_url`, length must be less than or equal to `2000`")
        if source_application_url is not None and len(source_application_url) < 1:
            raise ValueError("Invalid value for `source_application_url`, length must be greater than or equal to `1`")

        self._source_application_url = source_application_url

    @property
    def source_application_name(self):
        """Gets the source_application_name of this CreateIntegrationAssociationRequest.

        The name of the external application. This field is only required for the EVENT integration type.

        :return: The source_application_name of this CreateIntegrationAssociationRequest.
        :rtype: str
        """
        return self._source_application_name

    @source_application_name.setter
    def source_application_name(self, source_application_name):
        """Sets the source_application_name of this CreateIntegrationAssociationRequest.

        The name of the external application. This field is only required for the EVENT integration type.

        :param source_application_name: The source_application_name of this CreateIntegrationAssociationRequest.
        :type source_application_name: str
        """
        if source_application_name is not None and len(source_application_name) > 100:
            raise ValueError("Invalid value for `source_application_name`, length must be less than or equal to `100`")
        if source_application_name is not None and len(source_application_name) < 1:
            raise ValueError("Invalid value for `source_application_name`, length must be greater than or equal to `1`")
        if source_application_name is not None and not re.search(r'^[a-zA-Z0-9_ -]+$', source_application_name):
            raise ValueError("Invalid value for `source_application_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_ -]+$/`")

        self._source_application_name = source_application_name

    @property
    def source_type(self):
        """Gets the source_type of this CreateIntegrationAssociationRequest.

        The type of the data source. This field is only required for the EVENT integration type.

        :return: The source_type of this CreateIntegrationAssociationRequest.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CreateIntegrationAssociationRequest.

        The type of the data source. This field is only required for the EVENT integration type.

        :param source_type: The source_type of this CreateIntegrationAssociationRequest.
        :type source_type: str
        """
        allowed_values = ["SALESFORCE", "ZENDESK"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def tags(self):
        """Gets the tags of this CreateIntegrationAssociationRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateIntegrationAssociationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateIntegrationAssociationRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateIntegrationAssociationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
