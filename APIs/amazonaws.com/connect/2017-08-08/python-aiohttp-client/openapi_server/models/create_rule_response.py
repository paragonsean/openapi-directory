# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateRuleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_arn: str=None, rule_id: str=None):
        """CreateRuleResponse - a model defined in OpenAPI

        :param rule_arn: The rule_arn of this CreateRuleResponse.
        :param rule_id: The rule_id of this CreateRuleResponse.
        """
        self.openapi_types = {
            'rule_arn': str,
            'rule_id': str
        }

        self.attribute_map = {
            'rule_arn': 'RuleArn',
            'rule_id': 'RuleId'
        }

        self._rule_arn = rule_arn
        self._rule_id = rule_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRuleResponse of this CreateRuleResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_arn(self):
        """Gets the rule_arn of this CreateRuleResponse.


        :return: The rule_arn of this CreateRuleResponse.
        :rtype: str
        """
        return self._rule_arn

    @rule_arn.setter
    def rule_arn(self, rule_arn):
        """Sets the rule_arn of this CreateRuleResponse.


        :param rule_arn: The rule_arn of this CreateRuleResponse.
        :type rule_arn: str
        """
        if rule_arn is None:
            raise ValueError("Invalid value for `rule_arn`, must not be `None`")

        self._rule_arn = rule_arn

    @property
    def rule_id(self):
        """Gets the rule_id of this CreateRuleResponse.


        :return: The rule_id of this CreateRuleResponse.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this CreateRuleResponse.


        :param rule_id: The rule_id of this CreateRuleResponse.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id
