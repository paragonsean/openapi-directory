# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SearchVocabulariesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, next_token: str=None, state: str=None, name_starts_with: str=None, language_code: str=None):
        """SearchVocabulariesRequest - a model defined in OpenAPI

        :param max_results: The max_results of this SearchVocabulariesRequest.
        :param next_token: The next_token of this SearchVocabulariesRequest.
        :param state: The state of this SearchVocabulariesRequest.
        :param name_starts_with: The name_starts_with of this SearchVocabulariesRequest.
        :param language_code: The language_code of this SearchVocabulariesRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'next_token': str,
            'state': str,
            'name_starts_with': str,
            'language_code': str
        }

        self.attribute_map = {
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'state': 'State',
            'name_starts_with': 'NameStartsWith',
            'language_code': 'LanguageCode'
        }

        self._max_results = max_results
        self._next_token = next_token
        self._state = state
        self._name_starts_with = name_starts_with
        self._language_code = language_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchVocabulariesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchVocabularies_request of this SearchVocabulariesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this SearchVocabulariesRequest.

        The maximum number of results to return per page.

        :return: The max_results of this SearchVocabulariesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchVocabulariesRequest.

        The maximum number of results to return per page.

        :param max_results: The max_results of this SearchVocabulariesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this SearchVocabulariesRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :return: The next_token of this SearchVocabulariesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchVocabulariesRequest.

        The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

        :param next_token: The next_token of this SearchVocabulariesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 131070:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `131070`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'.*\S.*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._next_token = next_token

    @property
    def state(self):
        """Gets the state of this SearchVocabulariesRequest.

        The current state of the custom vocabulary.

        :return: The state of this SearchVocabulariesRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SearchVocabulariesRequest.

        The current state of the custom vocabulary.

        :param state: The state of this SearchVocabulariesRequest.
        :type state: str
        """
        allowed_values = ["CREATION_IN_PROGRESS", "ACTIVE", "CREATION_FAILED", "DELETE_IN_PROGRESS"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def name_starts_with(self):
        """Gets the name_starts_with of this SearchVocabulariesRequest.

        The starting pattern of the name of the vocabulary.

        :return: The name_starts_with of this SearchVocabulariesRequest.
        :rtype: str
        """
        return self._name_starts_with

    @name_starts_with.setter
    def name_starts_with(self, name_starts_with):
        """Sets the name_starts_with of this SearchVocabulariesRequest.

        The starting pattern of the name of the vocabulary.

        :param name_starts_with: The name_starts_with of this SearchVocabulariesRequest.
        :type name_starts_with: str
        """
        if name_starts_with is not None and len(name_starts_with) > 140:
            raise ValueError("Invalid value for `name_starts_with`, length must be less than or equal to `140`")
        if name_starts_with is not None and len(name_starts_with) < 1:
            raise ValueError("Invalid value for `name_starts_with`, length must be greater than or equal to `1`")
        if name_starts_with is not None and not re.search(r'^[0-9a-zA-Z._-]+', name_starts_with):
            raise ValueError("Invalid value for `name_starts_with`, must be a follow pattern or equal to `/^[0-9a-zA-Z._-]+/`")

        self._name_starts_with = name_starts_with

    @property
    def language_code(self):
        """Gets the language_code of this SearchVocabulariesRequest.

        The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html\">What is Amazon Transcribe?</a> 

        :return: The language_code of this SearchVocabulariesRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this SearchVocabulariesRequest.

        The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html\">What is Amazon Transcribe?</a> 

        :param language_code: The language_code of this SearchVocabulariesRequest.
        :type language_code: str
        """
        allowed_values = ["ar-AE", "de-CH", "de-DE", "en-AB", "en-AU", "en-GB", "en-IE", "en-IN", "en-US", "en-WL", "es-ES", "es-US", "fr-CA", "fr-FR", "hi-IN", "it-IT", "ja-JP", "ko-KR", "pt-BR", "pt-PT", "zh-CN", "en-NZ", "en-ZA"]  # noqa: E501
        if language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `language_code` ({0}), must be one of {1}"
                .format(language_code, allowed_values)
            )

        self._language_code = language_code
