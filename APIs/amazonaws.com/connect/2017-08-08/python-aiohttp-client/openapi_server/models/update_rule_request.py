# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_action import RuleAction
import re
from openapi_server import util


class UpdateRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, function: str=None, actions: List[RuleAction]=None, publish_status: str=None):
        """UpdateRuleRequest - a model defined in OpenAPI

        :param name: The name of this UpdateRuleRequest.
        :param function: The function of this UpdateRuleRequest.
        :param actions: The actions of this UpdateRuleRequest.
        :param publish_status: The publish_status of this UpdateRuleRequest.
        """
        self.openapi_types = {
            'name': str,
            'function': str,
            'actions': List[RuleAction],
            'publish_status': str
        }

        self.attribute_map = {
            'name': 'Name',
            'function': 'Function',
            'actions': 'Actions',
            'publish_status': 'PublishStatus'
        }

        self._name = name
        self._function = function
        self._actions = actions
        self._publish_status = publish_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRule_request of this UpdateRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateRuleRequest.

        The name of the rule. You can change the name only if <code>TriggerEventSource</code> is one of the following values: <code>OnZendeskTicketCreate</code> | <code>OnZendeskTicketStatusUpdate</code> | <code>OnSalesforceCaseCreate</code> 

        :return: The name of this UpdateRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateRuleRequest.

        The name of the rule. You can change the name only if <code>TriggerEventSource</code> is one of the following values: <code>OnZendeskTicketCreate</code> | <code>OnZendeskTicketStatusUpdate</code> | <code>OnSalesforceCaseCreate</code> 

        :param name: The name of this UpdateRuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[0-9a-zA-Z._-]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[0-9a-zA-Z._-]+/`")

        self._name = name

    @property
    def function(self):
        """Gets the function of this UpdateRuleRequest.

        The conditions of the rule.

        :return: The function of this UpdateRuleRequest.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this UpdateRuleRequest.

        The conditions of the rule.

        :param function: The function of this UpdateRuleRequest.
        :type function: str
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")

        self._function = function

    @property
    def actions(self):
        """Gets the actions of this UpdateRuleRequest.

        A list of actions to be run when the rule is triggered.

        :return: The actions of this UpdateRuleRequest.
        :rtype: List[RuleAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this UpdateRuleRequest.

        A list of actions to be run when the rule is triggered.

        :param actions: The actions of this UpdateRuleRequest.
        :type actions: List[RuleAction]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def publish_status(self):
        """Gets the publish_status of this UpdateRuleRequest.

        The publish status of the rule.

        :return: The publish_status of this UpdateRuleRequest.
        :rtype: str
        """
        return self._publish_status

    @publish_status.setter
    def publish_status(self, publish_status):
        """Sets the publish_status of this UpdateRuleRequest.

        The publish status of the rule.

        :param publish_status: The publish_status of this UpdateRuleRequest.
        :type publish_status: str
        """
        allowed_values = ["DRAFT", "PUBLISHED"]  # noqa: E501
        if publish_status not in allowed_values:
            raise ValueError(
                "Invalid value for `publish_status` ({0}), must be one of {1}"
                .format(publish_status, allowed_values)
            )

        self._publish_status = publish_status
