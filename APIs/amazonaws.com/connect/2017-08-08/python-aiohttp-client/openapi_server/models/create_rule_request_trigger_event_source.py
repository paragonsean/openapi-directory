# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_source_name import EventSourceName
from openapi_server import util


class CreateRuleRequestTriggerEventSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_source_name: EventSourceName=None, integration_association_id: str=None):
        """CreateRuleRequestTriggerEventSource - a model defined in OpenAPI

        :param event_source_name: The event_source_name of this CreateRuleRequestTriggerEventSource.
        :param integration_association_id: The integration_association_id of this CreateRuleRequestTriggerEventSource.
        """
        self.openapi_types = {
            'event_source_name': EventSourceName,
            'integration_association_id': str
        }

        self.attribute_map = {
            'event_source_name': 'EventSourceName',
            'integration_association_id': 'IntegrationAssociationId'
        }

        self._event_source_name = event_source_name
        self._integration_association_id = integration_association_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleRequestTriggerEventSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRuleRequest_TriggerEventSource of this CreateRuleRequestTriggerEventSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_source_name(self):
        """Gets the event_source_name of this CreateRuleRequestTriggerEventSource.


        :return: The event_source_name of this CreateRuleRequestTriggerEventSource.
        :rtype: EventSourceName
        """
        return self._event_source_name

    @event_source_name.setter
    def event_source_name(self, event_source_name):
        """Sets the event_source_name of this CreateRuleRequestTriggerEventSource.


        :param event_source_name: The event_source_name of this CreateRuleRequestTriggerEventSource.
        :type event_source_name: EventSourceName
        """
        if event_source_name is None:
            raise ValueError("Invalid value for `event_source_name`, must not be `None`")

        self._event_source_name = event_source_name

    @property
    def integration_association_id(self):
        """Gets the integration_association_id of this CreateRuleRequestTriggerEventSource.


        :return: The integration_association_id of this CreateRuleRequestTriggerEventSource.
        :rtype: str
        """
        return self._integration_association_id

    @integration_association_id.setter
    def integration_association_id(self, integration_association_id):
        """Sets the integration_association_id of this CreateRuleRequestTriggerEventSource.


        :param integration_association_id: The integration_association_id of this CreateRuleRequestTriggerEventSource.
        :type integration_association_id: str
        """

        self._integration_association_id = integration_association_id
