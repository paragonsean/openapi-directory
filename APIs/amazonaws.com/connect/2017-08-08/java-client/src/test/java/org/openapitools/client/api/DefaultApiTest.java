/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivateEvaluationFormRequest;
import org.openapitools.client.model.ActivateEvaluationFormResponse;
import org.openapitools.client.model.AgentStatusType;
import org.openapitools.client.model.AssociateApprovedOriginRequest;
import org.openapitools.client.model.AssociateBotRequest;
import org.openapitools.client.model.AssociateDefaultVocabularyRequest;
import org.openapitools.client.model.AssociateInstanceStorageConfigRequest;
import org.openapitools.client.model.AssociateInstanceStorageConfigResponse;
import org.openapitools.client.model.AssociateLambdaFunctionRequest;
import org.openapitools.client.model.AssociateLexBotRequest;
import org.openapitools.client.model.AssociatePhoneNumberContactFlowRequest;
import org.openapitools.client.model.AssociateQueueQuickConnectsRequest;
import org.openapitools.client.model.AssociateRoutingProfileQueuesRequest;
import org.openapitools.client.model.AssociateSecurityKeyRequest;
import org.openapitools.client.model.AssociateSecurityKeyResponse;
import org.openapitools.client.model.ClaimPhoneNumberRequest;
import org.openapitools.client.model.ClaimPhoneNumberResponse;
import org.openapitools.client.model.ContactFlowType;
import org.openapitools.client.model.CreateAgentStatusRequest;
import org.openapitools.client.model.CreateAgentStatusResponse;
import org.openapitools.client.model.CreateContactFlowModuleRequest;
import org.openapitools.client.model.CreateContactFlowModuleResponse;
import org.openapitools.client.model.CreateContactFlowRequest;
import org.openapitools.client.model.CreateContactFlowResponse;
import org.openapitools.client.model.CreateEvaluationFormRequest;
import org.openapitools.client.model.CreateEvaluationFormResponse;
import org.openapitools.client.model.CreateHoursOfOperationRequest;
import org.openapitools.client.model.CreateHoursOfOperationResponse;
import org.openapitools.client.model.CreateInstanceRequest;
import org.openapitools.client.model.CreateInstanceResponse;
import org.openapitools.client.model.CreateIntegrationAssociationRequest;
import org.openapitools.client.model.CreateIntegrationAssociationResponse;
import org.openapitools.client.model.CreateParticipantRequest;
import org.openapitools.client.model.CreateParticipantResponse;
import org.openapitools.client.model.CreatePromptRequest;
import org.openapitools.client.model.CreatePromptResponse;
import org.openapitools.client.model.CreateQueueRequest;
import org.openapitools.client.model.CreateQueueResponse;
import org.openapitools.client.model.CreateQuickConnectRequest;
import org.openapitools.client.model.CreateQuickConnectResponse;
import org.openapitools.client.model.CreateRoutingProfileRequest;
import org.openapitools.client.model.CreateRoutingProfileResponse;
import org.openapitools.client.model.CreateRuleRequest;
import org.openapitools.client.model.CreateRuleResponse;
import org.openapitools.client.model.CreateSecurityProfileRequest;
import org.openapitools.client.model.CreateSecurityProfileResponse;
import org.openapitools.client.model.CreateTaskTemplateRequest;
import org.openapitools.client.model.CreateTaskTemplateResponse;
import org.openapitools.client.model.CreateTrafficDistributionGroupRequest;
import org.openapitools.client.model.CreateTrafficDistributionGroupResponse;
import org.openapitools.client.model.CreateUseCaseRequest;
import org.openapitools.client.model.CreateUseCaseResponse;
import org.openapitools.client.model.CreateUserHierarchyGroupRequest;
import org.openapitools.client.model.CreateUserHierarchyGroupResponse;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.CreateVocabularyRequest;
import org.openapitools.client.model.CreateVocabularyResponse;
import org.openapitools.client.model.DeactivateEvaluationFormRequest;
import org.openapitools.client.model.DeactivateEvaluationFormResponse;
import org.openapitools.client.model.DeleteVocabularyResponse;
import org.openapitools.client.model.DescribeAgentStatusResponse;
import org.openapitools.client.model.DescribeContactEvaluationResponse;
import org.openapitools.client.model.DescribeContactFlowModuleResponse;
import org.openapitools.client.model.DescribeContactFlowResponse;
import org.openapitools.client.model.DescribeContactResponse;
import org.openapitools.client.model.DescribeEvaluationFormResponse;
import org.openapitools.client.model.DescribeHoursOfOperationResponse;
import org.openapitools.client.model.DescribeInstanceAttributeResponse;
import org.openapitools.client.model.DescribeInstanceResponse;
import org.openapitools.client.model.DescribeInstanceStorageConfigResponse;
import org.openapitools.client.model.DescribePhoneNumberResponse;
import org.openapitools.client.model.DescribePromptResponse;
import org.openapitools.client.model.DescribeQueueResponse;
import org.openapitools.client.model.DescribeQuickConnectResponse;
import org.openapitools.client.model.DescribeRoutingProfileResponse;
import org.openapitools.client.model.DescribeRuleResponse;
import org.openapitools.client.model.DescribeSecurityProfileResponse;
import org.openapitools.client.model.DescribeTrafficDistributionGroupResponse;
import org.openapitools.client.model.DescribeUserHierarchyGroupResponse;
import org.openapitools.client.model.DescribeUserHierarchyStructureResponse;
import org.openapitools.client.model.DescribeUserResponse;
import org.openapitools.client.model.DescribeVocabularyResponse;
import org.openapitools.client.model.DisassociateQueueQuickConnectsRequest;
import org.openapitools.client.model.DisassociateRoutingProfileQueuesRequest;
import org.openapitools.client.model.DismissUserContactRequest;
import org.openapitools.client.model.GetContactAttributesResponse;
import org.openapitools.client.model.GetCurrentMetricDataRequest;
import org.openapitools.client.model.GetCurrentMetricDataResponse;
import org.openapitools.client.model.GetCurrentUserDataRequest;
import org.openapitools.client.model.GetCurrentUserDataResponse;
import org.openapitools.client.model.GetFederationTokenResponse;
import org.openapitools.client.model.GetMetricDataRequest;
import org.openapitools.client.model.GetMetricDataResponse;
import org.openapitools.client.model.GetMetricDataV2Request;
import org.openapitools.client.model.GetMetricDataV2Response;
import org.openapitools.client.model.GetPromptFileResponse;
import org.openapitools.client.model.GetTaskTemplateResponse;
import org.openapitools.client.model.GetTrafficDistributionResponse;
import org.openapitools.client.model.ListAgentStatusResponse;
import org.openapitools.client.model.ListApprovedOriginsResponse;
import org.openapitools.client.model.ListBotsResponse;
import org.openapitools.client.model.ListContactEvaluationsResponse;
import org.openapitools.client.model.ListContactFlowModulesResponse;
import org.openapitools.client.model.ListContactFlowsResponse;
import org.openapitools.client.model.ListContactReferencesResponse;
import org.openapitools.client.model.ListDefaultVocabulariesRequest;
import org.openapitools.client.model.ListDefaultVocabulariesResponse;
import org.openapitools.client.model.ListEvaluationFormVersionsResponse;
import org.openapitools.client.model.ListEvaluationFormsResponse;
import org.openapitools.client.model.ListHoursOfOperationsResponse;
import org.openapitools.client.model.ListInstanceAttributesResponse;
import org.openapitools.client.model.ListInstanceStorageConfigsResponse;
import org.openapitools.client.model.ListInstancesResponse;
import org.openapitools.client.model.ListIntegrationAssociationsResponse;
import org.openapitools.client.model.ListLambdaFunctionsResponse;
import org.openapitools.client.model.ListLexBotsResponse;
import org.openapitools.client.model.ListPhoneNumbersResponse;
import org.openapitools.client.model.ListPhoneNumbersV2Request;
import org.openapitools.client.model.ListPhoneNumbersV2Response;
import org.openapitools.client.model.ListPromptsResponse;
import org.openapitools.client.model.ListQueueQuickConnectsResponse;
import org.openapitools.client.model.ListQueuesResponse;
import org.openapitools.client.model.ListQuickConnectsResponse;
import org.openapitools.client.model.ListRoutingProfileQueuesResponse;
import org.openapitools.client.model.ListRoutingProfilesResponse;
import org.openapitools.client.model.ListRulesResponse;
import org.openapitools.client.model.ListSecurityKeysResponse;
import org.openapitools.client.model.ListSecurityProfilePermissionsResponse;
import org.openapitools.client.model.ListSecurityProfilesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTaskTemplatesResponse;
import org.openapitools.client.model.ListTrafficDistributionGroupsResponse;
import org.openapitools.client.model.ListUseCasesResponse;
import org.openapitools.client.model.ListUserHierarchyGroupsResponse;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.MonitorContactRequest;
import org.openapitools.client.model.MonitorContactResponse;
import org.openapitools.client.model.PhoneNumberCountryCode;
import org.openapitools.client.model.PhoneNumberType;
import org.openapitools.client.model.PutUserStatusRequest;
import org.openapitools.client.model.QueueType;
import org.openapitools.client.model.QuickConnectType;
import org.openapitools.client.model.ReferenceType;
import org.openapitools.client.model.ReplicateInstanceRequest;
import org.openapitools.client.model.ReplicateInstanceResponse;
import org.openapitools.client.model.ResumeContactRecordingRequest;
import org.openapitools.client.model.SearchAvailablePhoneNumbersRequest;
import org.openapitools.client.model.SearchAvailablePhoneNumbersResponse;
import org.openapitools.client.model.SearchHoursOfOperationsRequest;
import org.openapitools.client.model.SearchHoursOfOperationsResponse;
import org.openapitools.client.model.SearchPromptsRequest;
import org.openapitools.client.model.SearchPromptsResponse;
import org.openapitools.client.model.SearchQueuesRequest;
import org.openapitools.client.model.SearchQueuesResponse;
import org.openapitools.client.model.SearchQuickConnectsRequest;
import org.openapitools.client.model.SearchQuickConnectsResponse;
import org.openapitools.client.model.SearchResourceTagsRequest;
import org.openapitools.client.model.SearchResourceTagsResponse;
import org.openapitools.client.model.SearchRoutingProfilesRequest;
import org.openapitools.client.model.SearchRoutingProfilesResponse;
import org.openapitools.client.model.SearchSecurityProfilesRequest;
import org.openapitools.client.model.SearchSecurityProfilesResponse;
import org.openapitools.client.model.SearchUsersRequest;
import org.openapitools.client.model.SearchUsersResponse;
import org.openapitools.client.model.SearchVocabulariesRequest;
import org.openapitools.client.model.SearchVocabulariesResponse;
import org.openapitools.client.model.StartChatContactRequest;
import org.openapitools.client.model.StartChatContactResponse;
import org.openapitools.client.model.StartContactEvaluationRequest;
import org.openapitools.client.model.StartContactEvaluationResponse;
import org.openapitools.client.model.StartContactRecordingRequest;
import org.openapitools.client.model.StartContactStreamingRequest;
import org.openapitools.client.model.StartContactStreamingResponse;
import org.openapitools.client.model.StartOutboundVoiceContactRequest;
import org.openapitools.client.model.StartOutboundVoiceContactResponse;
import org.openapitools.client.model.StartTaskContactRequest;
import org.openapitools.client.model.StartTaskContactResponse;
import org.openapitools.client.model.StopContactRequest;
import org.openapitools.client.model.StopContactStreamingRequest;
import org.openapitools.client.model.SubmitContactEvaluationResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TransferContactRequest;
import org.openapitools.client.model.TransferContactResponse;
import org.openapitools.client.model.UpdateAgentStatusRequest;
import org.openapitools.client.model.UpdateContactAttributesRequest;
import org.openapitools.client.model.UpdateContactEvaluationRequest;
import org.openapitools.client.model.UpdateContactEvaluationResponse;
import org.openapitools.client.model.UpdateContactFlowContentRequest;
import org.openapitools.client.model.UpdateContactFlowMetadataRequest;
import org.openapitools.client.model.UpdateContactFlowModuleContentRequest;
import org.openapitools.client.model.UpdateContactFlowModuleMetadataRequest;
import org.openapitools.client.model.UpdateContactFlowNameRequest;
import org.openapitools.client.model.UpdateContactRequest;
import org.openapitools.client.model.UpdateContactScheduleRequest;
import org.openapitools.client.model.UpdateEvaluationFormRequest;
import org.openapitools.client.model.UpdateEvaluationFormResponse;
import org.openapitools.client.model.UpdateHoursOfOperationRequest;
import org.openapitools.client.model.UpdateInstanceAttributeRequest;
import org.openapitools.client.model.UpdateInstanceStorageConfigRequest;
import org.openapitools.client.model.UpdateParticipantRoleConfigRequest;
import org.openapitools.client.model.UpdatePhoneNumberRequest;
import org.openapitools.client.model.UpdatePhoneNumberResponse;
import org.openapitools.client.model.UpdatePromptRequest;
import org.openapitools.client.model.UpdatePromptResponse;
import org.openapitools.client.model.UpdateQueueHoursOfOperationRequest;
import org.openapitools.client.model.UpdateQueueMaxContactsRequest;
import org.openapitools.client.model.UpdateQueueNameRequest;
import org.openapitools.client.model.UpdateQueueOutboundCallerConfigRequest;
import org.openapitools.client.model.UpdateQueueStatusRequest;
import org.openapitools.client.model.UpdateQuickConnectConfigRequest;
import org.openapitools.client.model.UpdateQuickConnectNameRequest;
import org.openapitools.client.model.UpdateRoutingProfileAgentAvailabilityTimerRequest;
import org.openapitools.client.model.UpdateRoutingProfileConcurrencyRequest;
import org.openapitools.client.model.UpdateRoutingProfileDefaultOutboundQueueRequest;
import org.openapitools.client.model.UpdateRoutingProfileNameRequest;
import org.openapitools.client.model.UpdateRoutingProfileQueuesRequest;
import org.openapitools.client.model.UpdateRuleRequest;
import org.openapitools.client.model.UpdateSecurityProfileRequest;
import org.openapitools.client.model.UpdateTaskTemplateRequest;
import org.openapitools.client.model.UpdateTaskTemplateResponse;
import org.openapitools.client.model.UpdateTrafficDistributionRequest;
import org.openapitools.client.model.UpdateUserHierarchyGroupNameRequest;
import org.openapitools.client.model.UpdateUserHierarchyRequest;
import org.openapitools.client.model.UpdateUserHierarchyStructureRequest;
import org.openapitools.client.model.UpdateUserIdentityInfoRequest;
import org.openapitools.client.model.UpdateUserPhoneConfigRequest;
import org.openapitools.client.model.UpdateUserRoutingProfileRequest;
import org.openapitools.client.model.UpdateUserSecurityProfilesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Activates an evaluation form in the specified Amazon Connect instance. After the evaluation form is activated, it is available to start new evaluations based on the form. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateEvaluationFormTest() throws ApiException {
        String instanceId = null;
        String evaluationFormId = null;
        ActivateEvaluationFormRequest activateEvaluationFormRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ActivateEvaluationFormResponse response = api.activateEvaluationForm(instanceId, evaluationFormId, activateEvaluationFormRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Associates an approved origin to an Amazon Connect instance.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateApprovedOriginTest() throws ApiException {
        String instanceId = null;
        AssociateApprovedOriginRequest associateApprovedOriginRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateApprovedOrigin(instanceId, associateApprovedOriginRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Allows the specified Amazon Connect instance to access the specified Amazon Lex or Amazon Lex V2 bot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateBotTest() throws ApiException {
        String instanceId = null;
        AssociateBotRequest associateBotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateBot(instanceId, associateBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates an existing vocabulary as the default. Contact Lens for Amazon Connect uses the vocabulary in post-call and real-time analysis sessions for the given language.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateDefaultVocabularyTest() throws ApiException {
        String instanceId = null;
        String languageCode = null;
        AssociateDefaultVocabularyRequest associateDefaultVocabularyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateDefaultVocabulary(instanceId, languageCode, associateDefaultVocabularyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Associates a storage resource type for the first time. You can only associate one type of storage configuration in a single call. This means, for example, that you can&#39;t define an instance with multiple S3 buckets for storing chat transcripts.&lt;/p&gt; &lt;p&gt;This API does not create a resource that doesn&#39;t exist. It only associates it to the instance. Ensure that the resource being specified in the storage configuration, like an S3 bucket, exists when being used for association.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateInstanceStorageConfigTest() throws ApiException {
        String instanceId = null;
        AssociateInstanceStorageConfigRequest associateInstanceStorageConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateInstanceStorageConfigResponse response = api.associateInstanceStorageConfig(instanceId, associateInstanceStorageConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Allows the specified Amazon Connect instance to access the specified Lambda function.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateLambdaFunctionTest() throws ApiException {
        String instanceId = null;
        AssociateLambdaFunctionRequest associateLambdaFunctionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateLambdaFunction(instanceId, associateLambdaFunctionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Allows the specified Amazon Connect instance to access the specified Amazon Lex V1 bot. This API only supports the association of Amazon Lex V1 bots.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateLexBotTest() throws ApiException {
        String instanceId = null;
        AssociateLexBotRequest associateLexBotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateLexBot(instanceId, associateLexBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates a flow with a phone number claimed to your Amazon Connect instance.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the number is claimed to a traffic distribution group, and you are calling this API using an instance in the Amazon Web Services Region where the traffic distribution group was created, you can use either a full phone number ARN or UUID value for the &lt;code&gt;PhoneNumberId&lt;/code&gt; URI request parameter. However, if the number is claimed to a traffic distribution group and you are calling this API using an instance in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associatePhoneNumberContactFlowTest() throws ApiException {
        String phoneNumberId = null;
        AssociatePhoneNumberContactFlowRequest associatePhoneNumberContactFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associatePhoneNumberContactFlow(phoneNumberId, associatePhoneNumberContactFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Associates a set of quick connects with a queue.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateQueueQuickConnectsTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        AssociateQueueQuickConnectsRequest associateQueueQuickConnectsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateQueueQuickConnects(instanceId, queueId, associateQueueQuickConnectsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a set of queues with a routing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateRoutingProfileQueuesTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        AssociateRoutingProfileQueuesRequest associateRoutingProfileQueuesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateRoutingProfileQueues(instanceId, routingProfileId, associateRoutingProfileQueuesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Associates a security key to the instance.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateSecurityKeyTest() throws ApiException {
        String instanceId = null;
        AssociateSecurityKeyRequest associateSecurityKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateSecurityKeyResponse response = api.associateSecurityKey(instanceId, associateSecurityKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Claims an available phone number to your Amazon Connect instance or traffic distribution group. You can call this API only in the same Amazon Web Services Region where the Amazon Connect instance or traffic distribution group was created.&lt;/p&gt; &lt;p&gt;For more information about how to use this operation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/claim-phone-number.html\&quot;&gt;Claim a phone number in your country&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/claim-phone-numbers-traffic-distribution-groups.html\&quot;&gt;Claim phone numbers to traffic distribution groups&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_SearchAvailablePhoneNumbers.html\&quot;&gt;SearchAvailablePhoneNumbers&lt;/a&gt; API for available phone numbers that you can claim. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_DescribePhoneNumber.html\&quot;&gt;DescribePhoneNumber&lt;/a&gt; API to verify the status of a previous &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimPhoneNumber.html\&quot;&gt;ClaimPhoneNumber&lt;/a&gt; operation.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you plan to claim and release numbers frequently during a 30 day period, contact us for a service quota exception. Otherwise, it is possible you will be blocked from claiming and releasing any more numbers until 30 days past the oldest number released has expired.&lt;/p&gt; &lt;p&gt;By default you can claim and release up to 200% of your maximum number of active phone numbers during any 30 day period. If you claim and release phone numbers using the UI or API during a rolling 30 day cycle that exceeds 200% of your phone number service level quota, you will be blocked from claiming any more numbers until 30 days past the oldest number released has expired. &lt;/p&gt; &lt;p&gt;For example, if you already have 99 claimed numbers and a service level quota of 99 phone numbers, and in any 30 day period you release 99, claim 99, and then release 99, you will have exceeded the 200% limit. At that point you are blocked from claiming any more numbers until you open an Amazon Web Services support ticket.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimPhoneNumberTest() throws ApiException {
        ClaimPhoneNumberRequest claimPhoneNumberRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ClaimPhoneNumberResponse response = api.claimPhoneNumber(claimPhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Creates an agent status for the specified Amazon Connect instance.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAgentStatusTest() throws ApiException {
        String instanceId = null;
        CreateAgentStatusRequest createAgentStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAgentStatusResponse response = api.createAgentStatus(instanceId, createAgentStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a flow for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;You can also create and update flows using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\&quot;&gt;Amazon Connect Flow language&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactFlowTest() throws ApiException {
        String instanceId = null;
        CreateContactFlowRequest createContactFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContactFlowResponse response = api.createContactFlow(instanceId, createContactFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a flow module for the specified Amazon Connect instance. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactFlowModuleTest() throws ApiException {
        String instanceId = null;
        CreateContactFlowModuleRequest createContactFlowModuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContactFlowModuleResponse response = api.createContactFlowModule(instanceId, createContactFlowModuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an evaluation form in the specified Amazon Connect instance. The form can be used to define questions related to agent performance, and create sections to organize such questions. Question and section identifiers cannot be duplicated within the same evaluation form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEvaluationFormTest() throws ApiException {
        String instanceId = null;
        CreateEvaluationFormRequest createEvaluationFormRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEvaluationFormResponse response = api.createEvaluationForm(instanceId, createEvaluationFormRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Creates hours of operation. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHoursOfOperationTest() throws ApiException {
        String instanceId = null;
        CreateHoursOfOperationRequest createHoursOfOperationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateHoursOfOperationResponse response = api.createHoursOfOperation(instanceId, createHoursOfOperationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Initiates an Amazon Connect instance with all the supported channels enabled. It does not attach any storage, such as Amazon Simple Storage Service (Amazon S3) or Amazon Kinesis. It also does not allow for any configurations on features, such as Contact Lens for Amazon Connect. &lt;/p&gt; &lt;p&gt;Amazon Connect enforces a limit on the total number of instances that you can create or delete in 30 days. If you exceed this limit, you will get an error message indicating there has been an excessive number of attempts at creating or deleting instances. You must wait 30 days before you can restart creating and deleting instances in your account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInstanceTest() throws ApiException {
        CreateInstanceRequest createInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInstanceResponse response = api.createInstance(createInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Amazon Web Services resource association with an Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIntegrationAssociationTest() throws ApiException {
        String instanceId = null;
        CreateIntegrationAssociationRequest createIntegrationAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIntegrationAssociationResponse response = api.createIntegrationAssociation(instanceId, createIntegrationAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a new participant into an on-going chat contact. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/chat-customize-flow.html\&quot;&gt;Customize chat flow experiences by integrating custom participants&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createParticipantTest() throws ApiException {
        CreateParticipantRequest createParticipantRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateParticipantResponse response = api.createParticipant(createParticipantRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a prompt. For more information about prompts, such as supported file types and maximum length, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/prompts.html\&quot;&gt;Create prompts&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator&#39;s Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPromptTest() throws ApiException {
        String instanceId = null;
        CreatePromptRequest createPromptRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePromptResponse response = api.createPrompt(instanceId, createPromptRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Creates a new queue for the specified Amazon Connect instance.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the number being used in the input is claimed to a traffic distribution group, and you are calling this API using an instance in the Amazon Web Services Region where the traffic distribution group was created, you can use either a full phone number ARN or UUID value for the &lt;code&gt;OutboundCallerIdNumberId&lt;/code&gt; value of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_OutboundCallerConfig\&quot;&gt;OutboundCallerConfig&lt;/a&gt; request body parameter. However, if the number is claimed to a traffic distribution group and you are calling this API using an instance in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Only use the phone number ARN format that doesn&#39;t contain &lt;code&gt;instance&lt;/code&gt; in the path, for example, &lt;code&gt;arn:aws:connect:us-east-1:1234567890:phone-number/uuid&lt;/code&gt;. This is the same ARN format that is returned when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html\&quot;&gt;ListPhoneNumbersV2&lt;/a&gt; API.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQueueTest() throws ApiException {
        String instanceId = null;
        CreateQueueRequest createQueueRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateQueueResponse response = api.createQueue(instanceId, createQueueRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a quick connect for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQuickConnectTest() throws ApiException {
        String instanceId = null;
        CreateQuickConnectRequest createQuickConnectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateQuickConnectResponse response = api.createQuickConnect(instanceId, createQuickConnectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new routing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRoutingProfileTest() throws ApiException {
        String instanceId = null;
        CreateRoutingProfileRequest createRoutingProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRoutingProfileResponse response = api.createRoutingProfile(instanceId, createRoutingProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a rule for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/connect-rules-language.html\&quot;&gt;Rules Function language&lt;/a&gt; to code conditions for the rule. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRuleTest() throws ApiException {
        String instanceId = null;
        CreateRuleRequest createRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRuleResponse response = api.createRule(instanceId, createRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Creates a security profile.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSecurityProfileTest() throws ApiException {
        String instanceId = null;
        CreateSecurityProfileRequest createSecurityProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSecurityProfileResponse response = api.createSecurityProfile(instanceId, createSecurityProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new task template in the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskTemplateTest() throws ApiException {
        String instanceId = null;
        CreateTaskTemplateRequest createTaskTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTaskTemplateResponse response = api.createTaskTemplate(instanceId, createTaskTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a traffic distribution group given an Amazon Connect instance that has been replicated. &lt;/p&gt; &lt;p&gt;For more information about creating traffic distribution groups, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/setup-traffic-distribution-groups.html\&quot;&gt;Set up traffic distribution groups&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrafficDistributionGroupTest() throws ApiException {
        CreateTrafficDistributionGroupRequest createTrafficDistributionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTrafficDistributionGroupResponse response = api.createTrafficDistributionGroup(createTrafficDistributionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a use case for an integration association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUseCaseTest() throws ApiException {
        String instanceId = null;
        String integrationAssociationId = null;
        CreateUseCaseRequest createUseCaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUseCaseResponse response = api.createUseCase(instanceId, integrationAssociationId, createUseCaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a user account for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;For information about how to create user accounts using the Amazon Connect console, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/user-management.html\&quot;&gt;Add Users&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String instanceId = null;
        CreateUserRequest createUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserResponse response = api.createUser(instanceId, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new user hierarchy group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserHierarchyGroupTest() throws ApiException {
        String instanceId = null;
        CreateUserHierarchyGroupRequest createUserHierarchyGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserHierarchyGroupResponse response = api.createUserHierarchyGroup(instanceId, createUserHierarchyGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a custom vocabulary associated with your Amazon Connect instance. You can set a custom vocabulary to be your default vocabulary for a given language. Contact Lens for Amazon Connect uses the default vocabulary in post-call and real-time contact analysis sessions for that language.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVocabularyTest() throws ApiException {
        String instanceId = null;
        CreateVocabularyRequest createVocabularyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVocabularyResponse response = api.createVocabulary(instanceId, createVocabularyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deactivates an evaluation form in the specified Amazon Connect instance. After a form is deactivated, it is no longer available for users to start new evaluations based on the form. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateEvaluationFormTest() throws ApiException {
        String instanceId = null;
        String evaluationFormId = null;
        DeactivateEvaluationFormRequest deactivateEvaluationFormRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeactivateEvaluationFormResponse response = api.deactivateEvaluationForm(instanceId, evaluationFormId, deactivateEvaluationFormRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a contact evaluation in the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactEvaluationTest() throws ApiException {
        String instanceId = null;
        String evaluationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteContactEvaluation(instanceId, evaluationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a flow for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactFlowTest() throws ApiException {
        String instanceId = null;
        String contactFlowId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContactFlow(instanceId, contactFlowId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified flow module.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactFlowModuleTest() throws ApiException {
        String instanceId = null;
        String contactFlowModuleId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContactFlowModule(instanceId, contactFlowModuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an evaluation form in the specified Amazon Connect instance. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the version property is provided, only the specified version of the evaluation form is deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If no version is provided, then the full form (all versions) is deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEvaluationFormTest() throws ApiException {
        String instanceId = null;
        String evaluationFormId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer version = null;
        api.deleteEvaluationForm(instanceId, evaluationFormId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Deletes an hours of operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHoursOfOperationTest() throws ApiException {
        String instanceId = null;
        String hoursOfOperationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteHoursOfOperation(instanceId, hoursOfOperationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Deletes the Amazon Connect instance.&lt;/p&gt; &lt;p&gt;Amazon Connect enforces a limit on the total number of instances that you can create or delete in 30 days. If you exceed this limit, you will get an error message indicating there has been an excessive number of attempts at creating or deleting instances. You must wait 30 days before you can restart creating and deleting instances in your account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInstanceTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteInstance(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon Web Services resource association from an Amazon Connect instance. The association must not have any use cases associated with it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIntegrationAssociationTest() throws ApiException {
        String instanceId = null;
        String integrationAssociationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteIntegrationAssociation(instanceId, integrationAssociationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a prompt.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePromptTest() throws ApiException {
        String instanceId = null;
        String promptId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deletePrompt(instanceId, promptId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteQueueTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteQueue(instanceId, queueId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a quick connect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteQuickConnectTest() throws ApiException {
        String instanceId = null;
        String quickConnectId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteQuickConnect(instanceId, quickConnectId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a routing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRoutingProfileTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRoutingProfile(instanceId, routingProfileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a rule for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRuleTest() throws ApiException {
        String instanceId = null;
        String ruleId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRule(instanceId, ruleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Deletes a security profile.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSecurityProfileTest() throws ApiException {
        String instanceId = null;
        String securityProfileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSecurityProfile(instanceId, securityProfileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the task template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTaskTemplateTest() throws ApiException {
        String instanceId = null;
        String taskTemplateId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTaskTemplate(instanceId, taskTemplateId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a traffic distribution group. This API can be called only in the Region where the traffic distribution group is created.&lt;/p&gt; &lt;p&gt;For more information about deleting traffic distribution groups, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/delete-traffic-distribution-groups.html\&quot;&gt;Delete traffic distribution groups&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrafficDistributionGroupTest() throws ApiException {
        String trafficDistributionGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTrafficDistributionGroup(trafficDistributionGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a use case from an integration association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUseCaseTest() throws ApiException {
        String instanceId = null;
        String integrationAssociationId = null;
        String useCaseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUseCase(instanceId, integrationAssociationId, useCaseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a user account from the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;For information about what happens to a user&#39;s data when their account is deleted, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/delete-users.html\&quot;&gt;Delete Users from Your Amazon Connect Instance&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String instanceId = null;
        String userId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUser(instanceId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing user hierarchy group. It must not be associated with any agents or have any active child groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserHierarchyGroupTest() throws ApiException {
        String hierarchyGroupId = null;
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUserHierarchyGroup(hierarchyGroupId, instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the vocabulary that has the given identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVocabularyTest() throws ApiException {
        String instanceId = null;
        String vocabularyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteVocabularyResponse response = api.deleteVocabulary(instanceId, vocabularyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Describes an agent status.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAgentStatusTest() throws ApiException {
        String instanceId = null;
        String agentStatusId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAgentStatusResponse response = api.describeAgentStatus(instanceId, agentStatusId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Describes the specified contact. &lt;/p&gt; &lt;important&gt; &lt;p&gt;Contact information remains available in Amazon Connect for 24 months, and then it is deleted.&lt;/p&gt; &lt;p&gt;Only data from November 12, 2021, and later is returned by this API.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeContactTest() throws ApiException {
        String instanceId = null;
        String contactId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeContactResponse response = api.describeContact(instanceId, contactId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a contact evaluation in the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeContactEvaluationTest() throws ApiException {
        String instanceId = null;
        String evaluationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeContactEvaluationResponse response = api.describeContactEvaluation(instanceId, evaluationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the specified flow.&lt;/p&gt; &lt;p&gt;You can also create and update flows using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\&quot;&gt;Amazon Connect Flow language&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeContactFlowTest() throws ApiException {
        String instanceId = null;
        String contactFlowId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeContactFlowResponse response = api.describeContactFlow(instanceId, contactFlowId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified flow module.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeContactFlowModuleTest() throws ApiException {
        String instanceId = null;
        String contactFlowModuleId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeContactFlowModuleResponse response = api.describeContactFlowModule(instanceId, contactFlowModuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an evaluation form in the specified Amazon Connect instance. If the version property is not provided, the latest version of the evaluation form is described.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEvaluationFormTest() throws ApiException {
        String instanceId = null;
        String evaluationFormId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer version = null;
        DescribeEvaluationFormResponse response = api.describeEvaluationForm(instanceId, evaluationFormId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Describes the hours of operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeHoursOfOperationTest() throws ApiException {
        String instanceId = null;
        String hoursOfOperationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeHoursOfOperationResponse response = api.describeHoursOfOperation(instanceId, hoursOfOperationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Returns the current state of the specified instance identifier. It tracks the instance while it is being created and returns an error status, if applicable. &lt;/p&gt; &lt;p&gt;If an instance is not created successfully, the instance status reason field returns details relevant to the reason. The instance in a failed state is returned only for 24 hours after the CreateInstance API was invoked.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInstanceTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInstanceResponse response = api.describeInstance(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Describes the specified instance attribute.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInstanceAttributeTest() throws ApiException {
        String instanceId = null;
        String attributeType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInstanceAttributeResponse response = api.describeInstanceAttribute(instanceId, attributeType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Retrieves the current storage configurations for the specified resource type, association ID, and instance ID.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInstanceStorageConfigTest() throws ApiException {
        String instanceId = null;
        String associationId = null;
        String resourceType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInstanceStorageConfigResponse response = api.describeInstanceStorageConfig(instanceId, associationId, resourceType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets details and status of a phone number that’s claimed to your Amazon Connect instance or traffic distribution group.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the number is claimed to a traffic distribution group, and you are calling in the Amazon Web Services Region where the traffic distribution group was created, you can use either a phone number ARN or UUID value for the &lt;code&gt;PhoneNumberId&lt;/code&gt; URI request parameter. However, if the number is claimed to a traffic distribution group and you are calling this API in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePhoneNumberTest() throws ApiException {
        String phoneNumberId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePhoneNumberResponse response = api.describePhoneNumber(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the prompt.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePromptTest() throws ApiException {
        String instanceId = null;
        String promptId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePromptResponse response = api.describePrompt(instanceId, promptId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Describes the specified queue.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeQueueTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeQueueResponse response = api.describeQueue(instanceId, queueId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the quick connect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeQuickConnectTest() throws ApiException {
        String instanceId = null;
        String quickConnectId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeQuickConnectResponse response = api.describeQuickConnect(instanceId, quickConnectId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified routing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRoutingProfileTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRoutingProfileResponse response = api.describeRoutingProfile(instanceId, routingProfileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a rule for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRuleTest() throws ApiException {
        String instanceId = null;
        String ruleId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRuleResponse response = api.describeRule(instanceId, ruleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Gets basic information about the security profle.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSecurityProfileTest() throws ApiException {
        String securityProfileId = null;
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSecurityProfileResponse response = api.describeSecurityProfile(securityProfileId, instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details and status of a traffic distribution group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTrafficDistributionGroupTest() throws ApiException {
        String trafficDistributionGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTrafficDistributionGroupResponse response = api.describeTrafficDistributionGroup(trafficDistributionGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified user account. You can &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\&quot;&gt;find the instance ID in the Amazon Connect console&lt;/a&gt; (it’s the final part of the ARN). The console does not display the user IDs. Instead, list the users and note the IDs provided in the output.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserTest() throws ApiException {
        String userId = null;
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserResponse response = api.describeUser(userId, instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified hierarchy group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserHierarchyGroupTest() throws ApiException {
        String hierarchyGroupId = null;
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserHierarchyGroupResponse response = api.describeUserHierarchyGroup(hierarchyGroupId, instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the hierarchy structure of the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserHierarchyStructureTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserHierarchyStructureResponse response = api.describeUserHierarchyStructure(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified vocabulary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVocabularyTest() throws ApiException {
        String instanceId = null;
        String vocabularyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeVocabularyResponse response = api.describeVocabulary(instanceId, vocabularyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Revokes access to integrated applications from Amazon Connect.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateApprovedOriginTest() throws ApiException {
        String instanceId = null;
        String origin = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateApprovedOrigin(instanceId, origin, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Revokes authorization from the specified instance to access the specified Amazon Lex or Amazon Lex V2 bot. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateBotTest() throws ApiException {
        String instanceId = null;
        AssociateBotRequest associateBotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateBot(instanceId, associateBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Removes the storage type configurations for the specified resource type and association ID.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateInstanceStorageConfigTest() throws ApiException {
        String instanceId = null;
        String associationId = null;
        String resourceType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateInstanceStorageConfig(instanceId, associationId, resourceType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Remove the Lambda function from the dropdown options available in the relevant flow blocks.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateLambdaFunctionTest() throws ApiException {
        String instanceId = null;
        String functionArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateLambdaFunction(instanceId, functionArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Revokes authorization from the specified instance to access the specified Amazon Lex bot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateLexBotTest() throws ApiException {
        String instanceId = null;
        String botName = null;
        String lexRegion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateLexBot(instanceId, botName, lexRegion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes the flow association from a phone number claimed to your Amazon Connect instance.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the number is claimed to a traffic distribution group, and you are calling this API using an instance in the Amazon Web Services Region where the traffic distribution group was created, you can use either a full phone number ARN or UUID value for the &lt;code&gt;PhoneNumberId&lt;/code&gt; URI request parameter. However, if the number is claimed to a traffic distribution group and you are calling this API using an instance in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociatePhoneNumberContactFlowTest() throws ApiException {
        String phoneNumberId = null;
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociatePhoneNumberContactFlow(phoneNumberId, instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Disassociates a set of quick connects from a queue.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateQueueQuickConnectsTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        DisassociateQueueQuickConnectsRequest disassociateQueueQuickConnectsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateQueueQuickConnects(instanceId, queueId, disassociateQueueQuickConnectsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a set of queues from a routing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateRoutingProfileQueuesTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        DisassociateRoutingProfileQueuesRequest disassociateRoutingProfileQueuesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateRoutingProfileQueues(instanceId, routingProfileId, disassociateRoutingProfileQueuesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Deletes the specified security key.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateSecurityKeyTest() throws ApiException {
        String instanceId = null;
        String associationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateSecurityKey(instanceId, associationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Dismisses contacts from an agent’s CCP and returns the agent to an available state, which allows the agent to receive a new routed contact. Contacts can only be dismissed if they are in a &lt;code&gt;MISSED&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;ENDED&lt;/code&gt;, or &lt;code&gt;REJECTED&lt;/code&gt; state in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/about-contact-states.html\&quot;&gt;Agent Event Stream&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dismissUserContactTest() throws ApiException {
        String userId = null;
        String instanceId = null;
        DismissUserContactRequest dismissUserContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.dismissUserContact(userId, instanceId, dismissUserContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the contact attributes for the specified contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactAttributesTest() throws ApiException {
        String instanceId = null;
        String initialContactId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContactAttributesResponse response = api.getContactAttributes(instanceId, initialContactId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the real-time metric data from the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;For a description of each metric, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html\&quot;&gt;Real-time Metrics Definitions&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentMetricDataTest() throws ApiException {
        String instanceId = null;
        GetCurrentMetricDataRequest getCurrentMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetCurrentMetricDataResponse response = api.getCurrentMetricData(instanceId, getCurrentMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the real-time active user data from the specified Amazon Connect instance. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserDataTest() throws ApiException {
        String instanceId = null;
        GetCurrentUserDataRequest getCurrentUserDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetCurrentUserDataResponse response = api.getCurrentUserData(instanceId, getCurrentUserDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a token for federation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API doesn&#39;t support root users. If you try to invoke GetFederationToken with root credentials, an error message similar to the following one appears: &lt;/p&gt; &lt;p&gt; &lt;code&gt;Provided identity: Principal: .... User: .... cannot be used for federation with Amazon Connect&lt;/code&gt; &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFederationTokenTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFederationTokenResponse response = api.getFederationToken(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets historical metric data from the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;For a description of each historical metric, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html\&quot;&gt;Historical Metrics Definitions&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetricDataTest() throws ApiException {
        String instanceId = null;
        GetMetricDataRequest getMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetMetricDataResponse response = api.getMetricData(instanceId, getMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets metric data from the specified Amazon Connect instance. &lt;/p&gt; &lt;p&gt; &lt;code&gt;GetMetricDataV2&lt;/code&gt; offers more features than &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt;, the previous version of this API. It has new metrics, offers filtering at a metric level, and offers the ability to filter and group data by channels, queues, routing profiles, agents, and agent hierarchy levels. It can retrieve historical data for the last 35 days, in 24-hour intervals.&lt;/p&gt; &lt;p&gt;For a description of the historical metrics that are supported by &lt;code&gt;GetMetricDataV2&lt;/code&gt; and &lt;code&gt;GetMetricData&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html\&quot;&gt;Historical metrics definitions&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator&#39;s Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetricDataV2Test() throws ApiException {
        GetMetricDataV2Request getMetricDataV2Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetMetricDataV2Response response = api.getMetricDataV2(getMetricDataV2Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the prompt file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPromptFileTest() throws ApiException {
        String instanceId = null;
        String promptId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPromptFileResponse response = api.getPromptFile(instanceId, promptId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details about a specific task template in the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskTemplateTest() throws ApiException {
        String instanceId = null;
        String taskTemplateId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String snapshotVersion = null;
        GetTaskTemplateResponse response = api.getTaskTemplate(instanceId, taskTemplateId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snapshotVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the current traffic distribution for a given traffic distribution group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrafficDistributionTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTrafficDistributionResponse response = api.getTrafficDistribution(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Lists agent statuses.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAgentStatusesTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        List<AgentStatusType> agentStatusTypes = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListAgentStatusResponse response = api.listAgentStatuses(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, agentStatusTypes, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Returns a paginated list of all approved origins associated with the instance.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApprovedOriginsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListApprovedOriginsResponse response = api.listApprovedOrigins(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;For the specified version of Amazon Lex, returns a paginated list of all the Amazon Lex bots currently associated with the instance. Use this API to returns both Amazon Lex V1 and V2 bots.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBotsTest() throws ApiException {
        String instanceId = null;
        String lexVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListBotsResponse response = api.listBots(instanceId, lexVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists contact evaluations in the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactEvaluationsTest() throws ApiException {
        String instanceId = null;
        String contactId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String nextToken2 = null;
        ListContactEvaluationsResponse response = api.listContactEvaluations(instanceId, contactId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, nextToken2);
        // TODO: test validations
    }

    /**
     * Provides information about the flow modules for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactFlowModulesTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String state = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListContactFlowModulesResponse response = api.listContactFlowModules(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, state, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides information about the flows for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;You can also create and update flows using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\&quot;&gt;Amazon Connect Flow language&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about flows, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/concepts-contact-flows.html\&quot;&gt;Flows&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactFlowsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<ContactFlowType> contactFlowTypes = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListContactFlowsResponse response = api.listContactFlows(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, contactFlowTypes, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;For the specified &lt;code&gt;referenceTypes&lt;/code&gt;, returns a list of references associated with the contact. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactReferencesTest() throws ApiException {
        String instanceId = null;
        String contactId = null;
        List<ReferenceType> referenceTypes = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String nextToken2 = null;
        ListContactReferencesResponse response = api.listContactReferences(instanceId, contactId, referenceTypes, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the default vocabularies for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDefaultVocabulariesTest() throws ApiException {
        String instanceId = null;
        ListDefaultVocabulariesRequest listDefaultVocabulariesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDefaultVocabulariesResponse response = api.listDefaultVocabularies(instanceId, listDefaultVocabulariesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists versions of an evaluation form in the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEvaluationFormVersionsTest() throws ApiException {
        String instanceId = null;
        String evaluationFormId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListEvaluationFormVersionsResponse response = api.listEvaluationFormVersions(instanceId, evaluationFormId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists evaluation forms in the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEvaluationFormsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListEvaluationFormsResponse response = api.listEvaluationForms(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides information about the hours of operation for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;For more information about hours of operation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/set-hours-operation.html\&quot;&gt;Set the Hours of Operation for a Queue&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHoursOfOperationsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListHoursOfOperationsResponse response = api.listHoursOfOperations(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Returns a paginated list of all attribute types for the given instance.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstanceAttributesTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListInstanceAttributesResponse response = api.listInstanceAttributes(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Returns a paginated list of storage configs for the identified instance and resource type.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstanceStorageConfigsTest() throws ApiException {
        String instanceId = null;
        String resourceType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListInstanceStorageConfigsResponse response = api.listInstanceStorageConfigs(instanceId, resourceType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Return a list of instances which are in active state, creation-in-progress state, and failed state. Instances that aren&#39;t successfully created (they are in a failed state) are returned only for 24 hours after the CreateInstance API was invoked.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstancesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListInstancesResponse response = api.listInstances(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Provides summary information about the Amazon Web Services resource associations for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIntegrationAssociationsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String integrationType = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListIntegrationAssociationsResponse response = api.listIntegrationAssociations(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, integrationType, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Returns a paginated list of all Lambda functions that display in the dropdown options in the relevant flow blocks.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLambdaFunctionsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListLambdaFunctionsResponse response = api.listLambdaFunctions(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Returns a paginated list of all the Amazon Lex V1 bots currently associated with the instance. To return both Amazon Lex V1 and V2 bots, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_ListBots.html\&quot;&gt;ListBots&lt;/a&gt; API. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLexBotsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListLexBotsResponse response = api.listLexBots(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides information about the phone numbers for the specified Amazon Connect instance. &lt;/p&gt; &lt;p&gt;For more information about phone numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/contact-center-phone-number.html\&quot;&gt;Set Up Phone Numbers for Your Contact Center&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The phone number &lt;code&gt;Arn&lt;/code&gt; value that is returned from each of the items in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbers.html#connect-ListPhoneNumbers-response-PhoneNumberSummaryList\&quot;&gt;PhoneNumberSummaryList&lt;/a&gt; cannot be used to tag phone number resources. It will fail with a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. Instead, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html\&quot;&gt;ListPhoneNumbersV2&lt;/a&gt; API. It returns the new phone number ARN that can be used to tag phone number resources.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPhoneNumbersTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<PhoneNumberType> phoneNumberTypes = null;
        List<PhoneNumberCountryCode> phoneNumberCountryCodes = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListPhoneNumbersResponse response = api.listPhoneNumbers(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, phoneNumberTypes, phoneNumberCountryCodes, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists phone numbers claimed to your Amazon Connect instance or traffic distribution group. If the provided &lt;code&gt;TargetArn&lt;/code&gt; is a traffic distribution group, you can call this API in both Amazon Web Services Regions associated with traffic distribution group.&lt;/p&gt; &lt;p&gt;For more information about phone numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/contact-center-phone-number.html\&quot;&gt;Set Up Phone Numbers for Your Contact Center&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPhoneNumbersV2Test() throws ApiException {
        ListPhoneNumbersV2Request listPhoneNumbersV2Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPhoneNumbersV2Response response = api.listPhoneNumbersV2(listPhoneNumbersV2Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Provides information about the prompts for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPromptsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListPromptsResponse response = api.listPrompts(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Lists the quick connects associated with a queue.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listQueueQuickConnectsTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListQueueQuickConnectsResponse response = api.listQueueQuickConnects(instanceId, queueId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides information about the queues for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;If you do not specify a &lt;code&gt;QueueTypes&lt;/code&gt; parameter, both standard and agent queues are returned. This might cause an unexpected truncation of results if you have more than 1000 agents and you limit the number of results of the API call in code.&lt;/p&gt; &lt;p&gt;For more information about queues, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/concepts-queues-standard-and-agent.html\&quot;&gt;Queues: Standard and Agent&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listQueuesTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<QueueType> queueTypes = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListQueuesResponse response = api.listQueues(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queueTypes, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Provides information about the quick connects for the specified Amazon Connect instance. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listQuickConnectsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        List<QuickConnectType> quickConnectTypes = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListQuickConnectsResponse response = api.listQuickConnects(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, quickConnectTypes, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the queues associated with a routing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoutingProfileQueuesTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListRoutingProfileQueuesResponse response = api.listRoutingProfileQueues(instanceId, routingProfileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides summary information about the routing profiles for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;For more information about routing profiles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing.html\&quot;&gt;Routing Profiles&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/routing-profiles.html\&quot;&gt;Create a Routing Profile&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoutingProfilesTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListRoutingProfilesResponse response = api.listRoutingProfiles(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List all rules for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRulesTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String publishStatus = null;
        String eventSourceName = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListRulesResponse response = api.listRules(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishStatus, eventSourceName, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Returns a paginated list of all security keys associated with the instance.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSecurityKeysTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListSecurityKeysResponse response = api.listSecurityKeys(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Lists the permissions granted to a security profile.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSecurityProfilePermissionsTest() throws ApiException {
        String securityProfileId = null;
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListSecurityProfilePermissionsResponse response = api.listSecurityProfilePermissions(securityProfileId, instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides summary information about the security profiles for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;For more information about security profiles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/connect-security-profiles.html\&quot;&gt;Security Profiles&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSecurityProfilesTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListSecurityProfilesResponse response = api.listSecurityProfiles(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the tags for the specified resource.&lt;/p&gt; &lt;p&gt;For sample policies that use tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/security_iam_id-based-policy-examples.html\&quot;&gt;Amazon Connect Identity-Based Policy Examples&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists task templates for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTaskTemplatesTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String status = null;
        String name = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListTaskTemplatesResponse response = api.listTaskTemplates(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, status, name, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists traffic distribution groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrafficDistributionGroupsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String instanceId = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListTrafficDistributionGroupsResponse response = api.listTrafficDistributionGroups(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, instanceId, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the use cases for the integration association. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUseCasesTest() throws ApiException {
        String instanceId = null;
        String integrationAssociationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListUseCasesResponse response = api.listUseCases(instanceId, integrationAssociationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides summary information about the hierarchy groups for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;For more information about agent hierarchies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/agent-hierarchy.html\&quot;&gt;Set Up Agent Hierarchies&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserHierarchyGroupsTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListUserHierarchyGroupsResponse response = api.listUserHierarchyGroups(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Provides summary information about the users for the specified Amazon Connect instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String instanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListUsersResponse response = api.listUsers(instanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Initiates silent monitoring of a contact. The Contact Control Panel (CCP) of the user specified by &lt;i&gt;userId&lt;/i&gt; will be set to silent monitoring mode on the contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitorContactTest() throws ApiException {
        MonitorContactRequest monitorContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MonitorContactResponse response = api.monitorContact(monitorContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Changes the current status of a user or agent in Amazon Connect. If the agent is currently handling a contact, this sets the agent&#39;s next status.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/metrics-agent-status.html\&quot;&gt;Agent status&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/set-next-status.html\&quot;&gt;Set your next status&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putUserStatusTest() throws ApiException {
        String userId = null;
        String instanceId = null;
        PutUserStatusRequest putUserStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putUserStatus(userId, instanceId, putUserStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Releases a phone number previously claimed to an Amazon Connect instance or traffic distribution group. You can call this API only in the Amazon Web Services Region where the number was claimed.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To release phone numbers from a traffic distribution group, use the &lt;code&gt;ReleasePhoneNumber&lt;/code&gt; API, not the Amazon Connect console.&lt;/p&gt; &lt;p&gt;After releasing a phone number, the phone number enters into a cooldown period of 30 days. It cannot be searched for or claimed again until the period has ended. If you accidentally release a phone number, contact Amazon Web Services Support.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you plan to claim and release numbers frequently during a 30 day period, contact us for a service quota exception. Otherwise, it is possible you will be blocked from claiming and releasing any more numbers until 30 days past the oldest number released has expired.&lt;/p&gt; &lt;p&gt;By default you can claim and release up to 200% of your maximum number of active phone numbers during any 30 day period. If you claim and release phone numbers using the UI or API during a rolling 30 day cycle that exceeds 200% of your phone number service level quota, you will be blocked from claiming any more numbers until 30 days past the oldest number released has expired. &lt;/p&gt; &lt;p&gt;For example, if you already have 99 claimed numbers and a service level quota of 99 phone numbers, and in any 30 day period you release 99, claim 99, and then release 99, you will have exceeded the 200% limit. At that point you are blocked from claiming any more numbers until you open an Amazon Web Services support ticket.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasePhoneNumberTest() throws ApiException {
        String phoneNumberId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        api.releasePhoneNumber(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Replicates an Amazon Connect instance in the specified Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;For more information about replicating an Amazon Connect instance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/create-replica-connect-instance.html\&quot;&gt;Create a replica of your existing Amazon Connect instance&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicateInstanceTest() throws ApiException {
        String instanceId = null;
        ReplicateInstanceRequest replicateInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ReplicateInstanceResponse response = api.replicateInstance(instanceId, replicateInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;When a contact is being recorded, and the recording has been suspended using SuspendContactRecording, this API resumes recording the call or screen.&lt;/p&gt; &lt;p&gt;Voice and screen recordings are supported.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeContactRecordingTest() throws ApiException {
        ResumeContactRecordingRequest resumeContactRecordingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.resumeContactRecording(resumeContactRecordingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Searches for available phone numbers that you can claim to your Amazon Connect instance or traffic distribution group. If the provided &lt;code&gt;TargetArn&lt;/code&gt; is a traffic distribution group, you can call this API in both Amazon Web Services Regions associated with the traffic distribution group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAvailablePhoneNumbersTest() throws ApiException {
        SearchAvailablePhoneNumbersRequest searchAvailablePhoneNumbersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchAvailablePhoneNumbersResponse response = api.searchAvailablePhoneNumbers(searchAvailablePhoneNumbersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches the hours of operation in an Amazon Connect instance, with optional filtering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchHoursOfOperationsTest() throws ApiException {
        SearchHoursOfOperationsRequest searchHoursOfOperationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchHoursOfOperationsResponse response = api.searchHoursOfOperations(searchHoursOfOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches prompts in an Amazon Connect instance, with optional filtering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPromptsTest() throws ApiException {
        SearchPromptsRequest searchPromptsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchPromptsResponse response = api.searchPrompts(searchPromptsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches queues in an Amazon Connect instance, with optional filtering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchQueuesTest() throws ApiException {
        SearchQueuesRequest searchQueuesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchQueuesResponse response = api.searchQueues(searchQueuesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches quick connects in an Amazon Connect instance, with optional filtering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchQuickConnectsTest() throws ApiException {
        SearchQuickConnectsRequest searchQuickConnectsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchQuickConnectsResponse response = api.searchQuickConnects(searchQuickConnectsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches tags used in an Amazon Connect instance using optional search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchResourceTagsTest() throws ApiException {
        SearchResourceTagsRequest searchResourceTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchResourceTagsResponse response = api.searchResourceTags(searchResourceTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches routing profiles in an Amazon Connect instance, with optional filtering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchRoutingProfilesTest() throws ApiException {
        SearchRoutingProfilesRequest searchRoutingProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchRoutingProfilesResponse response = api.searchRoutingProfiles(searchRoutingProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches security profiles in an Amazon Connect instance, with optional filtering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSecurityProfilesTest() throws ApiException {
        SearchSecurityProfilesRequest searchSecurityProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchSecurityProfilesResponse response = api.searchSecurityProfiles(searchSecurityProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Searches users in an Amazon Connect instance, with optional filtering.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;AfterContactWorkTimeLimit&lt;/code&gt; is returned in milliseconds. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUsersTest() throws ApiException {
        SearchUsersRequest searchUsersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchUsersResponse response = api.searchUsers(searchUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches for vocabularies within a specific Amazon Connect instance using &lt;code&gt;State&lt;/code&gt;, &lt;code&gt;NameStartsWith&lt;/code&gt;, and &lt;code&gt;LanguageCode&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchVocabulariesTest() throws ApiException {
        String instanceId = null;
        SearchVocabulariesRequest searchVocabulariesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchVocabulariesResponse response = api.searchVocabularies(instanceId, searchVocabulariesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Initiates a flow to start a new chat for the customer. Response of this API provides a token required to obtain credentials from the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html\&quot;&gt;CreateParticipantConnection&lt;/a&gt; API in the Amazon Connect Participant Service.&lt;/p&gt; &lt;p&gt;When a new chat contact is successfully created, clients must subscribe to the participant’s connection for the created chat within 5 minutes. This is achieved by invoking &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html\&quot;&gt;CreateParticipantConnection&lt;/a&gt; with WEBSOCKET and CONNECTION_CREDENTIALS. &lt;/p&gt; &lt;p&gt;A 429 error occurs in the following situations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;API rate limit is exceeded. API TPS throttling returns a &lt;code&gt;TooManyRequests&lt;/code&gt; exception.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\&quot;&gt;quota for concurrent active chats&lt;/a&gt; is exceeded. Active chat throttling returns a &lt;code&gt;LimitExceededException&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you use the &lt;code&gt;ChatDurationInMinutes&lt;/code&gt; parameter and receive a 400 error, your account may not support the ability to configure custom chat durations. For more information, contact Amazon Web Services Support. &lt;/p&gt; &lt;p&gt;For more information about chat, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/chat.html\&quot;&gt;Chat&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startChatContactTest() throws ApiException {
        StartChatContactRequest startChatContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartChatContactResponse response = api.startChatContact(startChatContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts an empty evaluation in the specified Amazon Connect instance, using the given evaluation form for the particular contact. The evaluation form version used for the contact evaluation corresponds to the currently activated version. If no version is activated for the evaluation form, the contact evaluation cannot be started. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Evaluations created through the public API do not contain answer values suggested from automation.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startContactEvaluationTest() throws ApiException {
        String instanceId = null;
        StartContactEvaluationRequest startContactEvaluationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartContactEvaluationResponse response = api.startContactEvaluation(instanceId, startContactEvaluationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts recording the contact: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the API is called &lt;i&gt;before&lt;/i&gt; the agent joins the call, recording starts when the agent joins the call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the API is called &lt;i&gt;after&lt;/i&gt; the agent joins the call, recording starts at the time of the API call.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;StartContactRecording is a one-time action. For example, if you use StopContactRecording to stop recording an ongoing call, you can&#39;t use StartContactRecording to restart it. For scenarios where the recording has started and you want to suspend and resume it, such as when collecting sensitive information (for example, a credit card number), use SuspendContactRecording and ResumeContactRecording.&lt;/p&gt; &lt;p&gt;You can use this API to override the recording behavior configured in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/set-recording-behavior.html\&quot;&gt;Set recording behavior&lt;/a&gt; block.&lt;/p&gt; &lt;p&gt;Only voice recordings are supported at this time.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startContactRecordingTest() throws ApiException {
        StartContactRecordingRequest startContactRecordingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startContactRecording(startContactRecordingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Initiates real-time message streaming for a new chat contact.&lt;/p&gt; &lt;p&gt; For more information about message streaming, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/chat-message-streaming.html\&quot;&gt;Enable real-time chat message streaming&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startContactStreamingTest() throws ApiException {
        StartContactStreamingRequest startContactStreamingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartContactStreamingResponse response = api.startContactStreaming(startContactStreamingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Places an outbound call to a contact, and then initiates the flow. It performs the actions in the flow that&#39;s specified (in &lt;code&gt;ContactFlowId&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Agents do not initiate the outbound API, which means that they do not dial the contact. If the flow places an outbound call to a contact, and then puts the contact in queue, the call is then routed to the agent, like any other inbound case.&lt;/p&gt; &lt;p&gt;There is a 60-second dialing timeout for this operation. If the call is not connected after 60 seconds, it fails.&lt;/p&gt; &lt;note&gt; &lt;p&gt;UK numbers with a 447 prefix are not allowed by default. Before you can dial these UK mobile numbers, you must submit a service quota increase request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\&quot;&gt;Amazon Connect Service Quotas&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Campaign calls are not allowed by default. Before you can make a call with &lt;code&gt;TrafficType&lt;/code&gt; &#x3D; &lt;code&gt;CAMPAIGN&lt;/code&gt;, you must submit a service quota increase request to the quota &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#outbound-communications-quotas\&quot;&gt;Amazon Connect campaigns&lt;/a&gt;. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startOutboundVoiceContactTest() throws ApiException {
        StartOutboundVoiceContactRequest startOutboundVoiceContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartOutboundVoiceContactResponse response = api.startOutboundVoiceContact(startOutboundVoiceContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Initiates a flow to start a new task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTaskContactTest() throws ApiException {
        StartTaskContactRequest startTaskContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartTaskContactResponse response = api.startTaskContact(startTaskContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Ends the specified contact. This call does not work for the following initiation methods:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;DISCONNECT&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;TRANSFER&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;QUEUE_TRANSFER&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopContactTest() throws ApiException {
        StopContactRequest stopContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopContact(stopContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops recording a call when a contact is being recorded. StopContactRecording is a one-time action. If you use StopContactRecording to stop recording an ongoing call, you can&#39;t use StartContactRecording to restart it. For scenarios where the recording has started and you want to suspend it for sensitive information (for example, to collect a credit card number), and then restart it, use SuspendContactRecording and ResumeContactRecording.&lt;/p&gt; &lt;p&gt;Only voice recordings are supported at this time.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopContactRecordingTest() throws ApiException {
        ResumeContactRecordingRequest resumeContactRecordingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopContactRecording(resumeContactRecordingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Ends message streaming on a specified contact. To restart message streaming on that contact, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_StartContactStreaming.html\&quot;&gt;StartContactStreaming&lt;/a&gt; API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopContactStreamingTest() throws ApiException {
        StopContactStreamingRequest stopContactStreamingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopContactStreaming(stopContactStreamingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Submits a contact evaluation in the specified Amazon Connect instance. Answers included in the request are merged with existing answers for the given evaluation. If no answers or notes are passed, the evaluation is submitted with the existing answers and notes. You can delete an answer or note by passing an empty object (&lt;code&gt;{}&lt;/code&gt;) to the question identifier. &lt;/p&gt; &lt;p&gt;If a contact evaluation is already in submitted state, this operation will trigger a resubmission.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitContactEvaluationTest() throws ApiException {
        String instanceId = null;
        String evaluationId = null;
        UpdateContactEvaluationRequest updateContactEvaluationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SubmitContactEvaluationResponse response = api.submitContactEvaluation(instanceId, evaluationId, updateContactEvaluationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;When a contact is being recorded, this API suspends recording the call or screen. For example, you might suspend the call or screen recording while collecting sensitive information, such as a credit card number. Then use ResumeContactRecording to restart recording.&lt;/p&gt; &lt;p&gt;The period of time that the recording is suspended is filled with silence in the final recording.&lt;/p&gt; &lt;p&gt;Voice and screen recordings are supported.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendContactRecordingTest() throws ApiException {
        ResumeContactRecordingRequest resumeContactRecordingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.suspendContactRecording(resumeContactRecordingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds the specified tags to the specified resource.&lt;/p&gt; &lt;p&gt;Some of the supported resource types are agents, routing profiles, queues, quick connects, contact flows, agent statuses, hours of operation, phone numbers, security profiles, and task templates. For a complete list, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/tagging.html\&quot;&gt;Tagging resources in Amazon Connect&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For sample policies that use tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/security_iam_id-based-policy-examples.html\&quot;&gt;Amazon Connect Identity-Based Policy Examples&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Transfers contacts from one agent or queue to another agent or queue at any point after a contact is created. You can transfer a contact to another queue by providing the flow which orchestrates the contact to the destination queue. This gives you more control over contact handling and helps you adhere to the service level agreement (SLA) guaranteed to your customers.&lt;/p&gt; &lt;p&gt;Note the following requirements:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Transfer is supported for only &lt;code&gt;TASK&lt;/code&gt; contacts.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Do not use both &lt;code&gt;QueueId&lt;/code&gt; and &lt;code&gt;UserId&lt;/code&gt; in the same call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following flow types are supported: Inbound flow, Transfer to agent flow, and Transfer to queue flow.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;TransferContact&lt;/code&gt; API can be called only on active contacts.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A contact cannot be transferred more than 11 times.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferContactTest() throws ApiException {
        TransferContactRequest transferContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TransferContactResponse response = api.transferContact(transferContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified tags from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates agent status.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAgentStatusTest() throws ApiException {
        String instanceId = null;
        String agentStatusId = null;
        UpdateAgentStatusRequest updateAgentStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateAgentStatus(instanceId, agentStatusId, updateAgentStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Adds or updates user-defined contact information associated with the specified contact. At least one field to be updated must be present in the request.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You can add or update user-defined contact information for both ongoing and completed contacts.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String instanceId = null;
        String contactId = null;
        UpdateContactRequest updateContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContact(instanceId, contactId, updateContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates user-defined contact attributes associated with the specified contact.&lt;/p&gt; &lt;p&gt;You can create or update user-defined attributes for both ongoing and completed contacts. For example, while the call is active, you can update the customer&#39;s name or the reason the customer called. You can add notes about steps that the agent took during the call that display to the next agent that takes the call. You can also update attributes for a contact using data from your CRM application and save the data with the contact in Amazon Connect. You could also flag calls for additional analysis, such as legal review or to identify abusive callers.&lt;/p&gt; &lt;p&gt;Contact attributes are available in Amazon Connect for 24 months, and are then deleted. For information about contact record retention and the maximum size of the contact record attributes section, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits\&quot;&gt;Feature specifications&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactAttributesTest() throws ApiException {
        UpdateContactAttributesRequest updateContactAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContactAttributes(updateContactAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates details about a contact evaluation in the specified Amazon Connect instance. A contact evaluation must be in draft state. Answers included in the request are merged with existing answers for the given evaluation. An answer or note can be deleted by passing an empty object (&lt;code&gt;{}&lt;/code&gt;) to the question identifier. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactEvaluationTest() throws ApiException {
        String instanceId = null;
        String evaluationId = null;
        UpdateContactEvaluationRequest updateContactEvaluationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateContactEvaluationResponse response = api.updateContactEvaluation(instanceId, evaluationId, updateContactEvaluationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified flow.&lt;/p&gt; &lt;p&gt;You can also create and update flows using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\&quot;&gt;Amazon Connect Flow language&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactFlowContentTest() throws ApiException {
        String instanceId = null;
        String contactFlowId = null;
        UpdateContactFlowContentRequest updateContactFlowContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContactFlowContent(instanceId, contactFlowId, updateContactFlowContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates metadata about specified flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactFlowMetadataTest() throws ApiException {
        String instanceId = null;
        String contactFlowId = null;
        UpdateContactFlowMetadataRequest updateContactFlowMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContactFlowMetadata(instanceId, contactFlowId, updateContactFlowMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates specified flow module for the specified Amazon Connect instance. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactFlowModuleContentTest() throws ApiException {
        String instanceId = null;
        String contactFlowModuleId = null;
        UpdateContactFlowModuleContentRequest updateContactFlowModuleContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContactFlowModuleContent(instanceId, contactFlowModuleId, updateContactFlowModuleContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates metadata about specified flow module.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactFlowModuleMetadataTest() throws ApiException {
        String instanceId = null;
        String contactFlowModuleId = null;
        UpdateContactFlowModuleMetadataRequest updateContactFlowModuleMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContactFlowModuleMetadata(instanceId, contactFlowModuleId, updateContactFlowModuleMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The name of the flow.&lt;/p&gt; &lt;p&gt;You can also create and update flows using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\&quot;&gt;Amazon Connect Flow language&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactFlowNameTest() throws ApiException {
        String instanceId = null;
        String contactFlowId = null;
        UpdateContactFlowNameRequest updateContactFlowNameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContactFlowName(instanceId, contactFlowId, updateContactFlowNameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the scheduled time of a task contact that is already scheduled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactScheduleTest() throws ApiException {
        UpdateContactScheduleRequest updateContactScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContactSchedule(updateContactScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates details about a specific evaluation form version in the specified Amazon Connect instance. Question and section identifiers cannot be duplicated within the same evaluation form.&lt;/p&gt; &lt;p&gt;This operation does not support partial updates. Instead it does a full update of evaluation form content.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEvaluationFormTest() throws ApiException {
        String instanceId = null;
        String evaluationFormId = null;
        UpdateEvaluationFormRequest updateEvaluationFormRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEvaluationFormResponse response = api.updateEvaluationForm(instanceId, evaluationFormId, updateEvaluationFormRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates the hours of operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHoursOfOperationTest() throws ApiException {
        String instanceId = null;
        String hoursOfOperationId = null;
        UpdateHoursOfOperationRequest updateHoursOfOperationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateHoursOfOperation(instanceId, hoursOfOperationId, updateHoursOfOperationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates the value for the specified attribute type.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstanceAttributeTest() throws ApiException {
        String instanceId = null;
        String attributeType = null;
        UpdateInstanceAttributeRequest updateInstanceAttributeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateInstanceAttribute(instanceId, attributeType, updateInstanceAttributeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates an existing configuration for a resource type. This API is idempotent.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstanceStorageConfigTest() throws ApiException {
        String instanceId = null;
        String associationId = null;
        String resourceType = null;
        UpdateInstanceStorageConfigRequest updateInstanceStorageConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateInstanceStorageConfig(instanceId, associationId, resourceType, updateInstanceStorageConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates timeouts for when human chat participants are to be considered idle, and when agents are automatically disconnected from a chat due to idleness. You can set four timers:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Customer idle timeout&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Customer auto-disconnect timeout&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Agent idle timeout&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Agent auto-disconnect timeout&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how chat timeouts work, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/setup-chat-timeouts.html\&quot;&gt;Set up chat timeouts for human participants&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateParticipantRoleConfigTest() throws ApiException {
        String instanceId = null;
        String contactId = null;
        UpdateParticipantRoleConfigRequest updateParticipantRoleConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateParticipantRoleConfig(instanceId, contactId, updateParticipantRoleConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates your claimed phone number from its current Amazon Connect instance or traffic distribution group to another Amazon Connect instance or traffic distribution group in the same Amazon Web Services Region.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After using this API, you must verify that the phone number is attached to the correct flow in the target instance or traffic distribution group. You need to do this because the API switches only the phone number to a new instance or traffic distribution group. It doesn&#39;t migrate the flow configuration of the phone number, too.&lt;/p&gt; &lt;p&gt;You can call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_DescribePhoneNumber.html\&quot;&gt;DescribePhoneNumber&lt;/a&gt; API to verify the status of a previous &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html\&quot;&gt;UpdatePhoneNumber&lt;/a&gt; operation.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePhoneNumberTest() throws ApiException {
        String phoneNumberId = null;
        UpdatePhoneNumberRequest updatePhoneNumberRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePhoneNumberResponse response = api.updatePhoneNumber(phoneNumberId, updatePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a prompt.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePromptTest() throws ApiException {
        String instanceId = null;
        String promptId = null;
        UpdatePromptRequest updatePromptRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePromptResponse response = api.updatePrompt(instanceId, promptId, updatePromptRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates the hours of operation for the specified queue.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQueueHoursOfOperationTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        UpdateQueueHoursOfOperationRequest updateQueueHoursOfOperationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateQueueHoursOfOperation(instanceId, queueId, updateQueueHoursOfOperationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates the maximum number of contacts allowed in a queue before it is considered full.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQueueMaxContactsTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        UpdateQueueMaxContactsRequest updateQueueMaxContactsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateQueueMaxContacts(instanceId, queueId, updateQueueMaxContactsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates the name and description of a queue. At least &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;Description&lt;/code&gt; must be provided.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQueueNameTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        UpdateQueueNameRequest updateQueueNameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateQueueName(instanceId, queueId, updateQueueNameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates the outbound caller ID name, number, and outbound whisper flow for a specified queue.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the number being used in the input is claimed to a traffic distribution group, and you are calling this API using an instance in the Amazon Web Services Region where the traffic distribution group was created, you can use either a full phone number ARN or UUID value for the &lt;code&gt;OutboundCallerIdNumberId&lt;/code&gt; value of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_OutboundCallerConfig\&quot;&gt;OutboundCallerConfig&lt;/a&gt; request body parameter. However, if the number is claimed to a traffic distribution group and you are calling this API using an instance in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Only use the phone number ARN format that doesn&#39;t contain &lt;code&gt;instance&lt;/code&gt; in the path, for example, &lt;code&gt;arn:aws:connect:us-east-1:1234567890:phone-number/uuid&lt;/code&gt;. This is the same ARN format that is returned when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html\&quot;&gt;ListPhoneNumbersV2&lt;/a&gt; API.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQueueOutboundCallerConfigTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        UpdateQueueOutboundCallerConfigRequest updateQueueOutboundCallerConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateQueueOutboundCallerConfig(instanceId, queueId, updateQueueOutboundCallerConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates the status of the queue.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQueueStatusTest() throws ApiException {
        String instanceId = null;
        String queueId = null;
        UpdateQueueStatusRequest updateQueueStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateQueueStatus(instanceId, queueId, updateQueueStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration settings for the specified quick connect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQuickConnectConfigTest() throws ApiException {
        String instanceId = null;
        String quickConnectId = null;
        UpdateQuickConnectConfigRequest updateQuickConnectConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateQuickConnectConfig(instanceId, quickConnectId, updateQuickConnectConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the name and description of a quick connect. The request accepts the following data in JSON format. At least &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;Description&lt;/code&gt; must be provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQuickConnectNameTest() throws ApiException {
        String instanceId = null;
        String quickConnectId = null;
        UpdateQuickConnectNameRequest updateQuickConnectNameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateQuickConnectName(instanceId, quickConnectId, updateQuickConnectNameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Whether agents with this routing profile will have their routing order calculated based on &lt;i&gt;time since their last inbound contact&lt;/i&gt; or &lt;i&gt;longest idle time&lt;/i&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoutingProfileAgentAvailabilityTimerTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        UpdateRoutingProfileAgentAvailabilityTimerRequest updateRoutingProfileAgentAvailabilityTimerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateRoutingProfileAgentAvailabilityTimer(instanceId, routingProfileId, updateRoutingProfileAgentAvailabilityTimerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the channels that agents can handle in the Contact Control Panel (CCP) for a routing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoutingProfileConcurrencyTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        UpdateRoutingProfileConcurrencyRequest updateRoutingProfileConcurrencyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateRoutingProfileConcurrency(instanceId, routingProfileId, updateRoutingProfileConcurrencyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the default outbound queue of a routing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoutingProfileDefaultOutboundQueueTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        UpdateRoutingProfileDefaultOutboundQueueRequest updateRoutingProfileDefaultOutboundQueueRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateRoutingProfileDefaultOutboundQueue(instanceId, routingProfileId, updateRoutingProfileDefaultOutboundQueueRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the name and description of a routing profile. The request accepts the following data in JSON format. At least &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;Description&lt;/code&gt; must be provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoutingProfileNameTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        UpdateRoutingProfileNameRequest updateRoutingProfileNameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateRoutingProfileName(instanceId, routingProfileId, updateRoutingProfileNameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the properties associated with a set of queues for a routing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoutingProfileQueuesTest() throws ApiException {
        String instanceId = null;
        String routingProfileId = null;
        UpdateRoutingProfileQueuesRequest updateRoutingProfileQueuesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateRoutingProfileQueues(instanceId, routingProfileId, updateRoutingProfileQueuesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a rule for the specified Amazon Connect instance.&lt;/p&gt; &lt;p&gt;Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/connect-rules-language.html\&quot;&gt;Rules Function language&lt;/a&gt; to code conditions for the rule. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRuleTest() throws ApiException {
        String ruleId = null;
        String instanceId = null;
        UpdateRuleRequest updateRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateRule(ruleId, instanceId, updateRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This API is in preview release for Amazon Connect and is subject to change.&lt;/p&gt; &lt;p&gt;Updates a security profile.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSecurityProfileTest() throws ApiException {
        String securityProfileId = null;
        String instanceId = null;
        UpdateSecurityProfileRequest updateSecurityProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateSecurityProfile(securityProfileId, instanceId, updateSecurityProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates details about a specific task template in the specified Amazon Connect instance. This operation does not support partial updates. Instead it does a full update of template content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaskTemplateTest() throws ApiException {
        String taskTemplateId = null;
        String instanceId = null;
        UpdateTaskTemplateRequest updateTaskTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTaskTemplateResponse response = api.updateTaskTemplate(taskTemplateId, instanceId, updateTaskTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the traffic distribution for a given traffic distribution group. &lt;/p&gt; &lt;p&gt;For more information about updating a traffic distribution group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/update-telephony-traffic-distribution.html\&quot;&gt;Update telephony traffic distribution across Amazon Web Services Regions &lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrafficDistributionTest() throws ApiException {
        String id = null;
        UpdateTrafficDistributionRequest updateTrafficDistributionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateTrafficDistribution(id, updateTrafficDistributionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Assigns the specified hierarchy group to the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserHierarchyTest() throws ApiException {
        String userId = null;
        String instanceId = null;
        UpdateUserHierarchyRequest updateUserHierarchyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateUserHierarchy(userId, instanceId, updateUserHierarchyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the name of the user hierarchy group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserHierarchyGroupNameTest() throws ApiException {
        String hierarchyGroupId = null;
        String instanceId = null;
        UpdateUserHierarchyGroupNameRequest updateUserHierarchyGroupNameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateUserHierarchyGroupName(hierarchyGroupId, instanceId, updateUserHierarchyGroupNameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the user hierarchy structure: add, remove, and rename user hierarchy levels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserHierarchyStructureTest() throws ApiException {
        String instanceId = null;
        UpdateUserHierarchyStructureRequest updateUserHierarchyStructureRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateUserHierarchyStructure(instanceId, updateUserHierarchyStructureRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the identity information for the specified user.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We strongly recommend limiting who has the ability to invoke &lt;code&gt;UpdateUserIdentityInfo&lt;/code&gt;. Someone with that ability can change the login credentials of other users by changing their email address. This poses a security risk to your organization. They can change the email address of a user to the attacker&#39;s email address, and then reset the password through email. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html\&quot;&gt;Best Practices for Security Profiles&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserIdentityInfoTest() throws ApiException {
        String userId = null;
        String instanceId = null;
        UpdateUserIdentityInfoRequest updateUserIdentityInfoRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateUserIdentityInfo(userId, instanceId, updateUserIdentityInfoRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the phone configuration settings for the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserPhoneConfigTest() throws ApiException {
        String userId = null;
        String instanceId = null;
        UpdateUserPhoneConfigRequest updateUserPhoneConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateUserPhoneConfig(userId, instanceId, updateUserPhoneConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Assigns the specified routing profile to the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserRoutingProfileTest() throws ApiException {
        String userId = null;
        String instanceId = null;
        UpdateUserRoutingProfileRequest updateUserRoutingProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateUserRoutingProfile(userId, instanceId, updateUserRoutingProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Assigns the specified security profiles to the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserSecurityProfilesTest() throws ApiException {
        String userId = null;
        String instanceId = null;
        UpdateUserSecurityProfilesRequest updateUserSecurityProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateUserSecurityProfiles(userId, instanceId, updateUserSecurityProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
