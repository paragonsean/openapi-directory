/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.UserDataHierarchyPath;
import org.openapitools.client.model.UserDataRoutingProfile;
import org.openapitools.client.model.UserDataStatus;
import org.openapitools.client.model.UserDataUser;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UserData
 */
public class UserDataTest {
    private final UserData model = new UserData();

    /**
     * Model tests for UserData
     */
    @Test
    public void testUserData() {
        // TODO: test UserData
    }

    /**
     * Test the property 'user'
     */
    @Test
    public void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'routingProfile'
     */
    @Test
    public void routingProfileTest() {
        // TODO: test routingProfile
    }

    /**
     * Test the property 'hierarchyPath'
     */
    @Test
    public void hierarchyPathTest() {
        // TODO: test hierarchyPath
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'availableSlotsByChannel'
     */
    @Test
    public void availableSlotsByChannelTest() {
        // TODO: test availableSlotsByChannel
    }

    /**
     * Test the property 'maxSlotsByChannel'
     */
    @Test
    public void maxSlotsByChannelTest() {
        // TODO: test maxSlotsByChannel
    }

    /**
     * Test the property 'activeSlotsByChannel'
     */
    @Test
    public void activeSlotsByChannelTest() {
        // TODO: test activeSlotsByChannel
    }

    /**
     * Test the property 'contacts'
     */
    @Test
    public void contactsTest() {
        // TODO: test contacts
    }

    /**
     * Test the property 'nextStatus'
     */
    @Test
    public void nextStatusTest() {
        // TODO: test nextStatus
    }

}
