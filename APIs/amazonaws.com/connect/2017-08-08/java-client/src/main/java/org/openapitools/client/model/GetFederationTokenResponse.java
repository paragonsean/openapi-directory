/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetFederationTokenResponseCredentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetFederationTokenResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetFederationTokenResponse {
  public static final String SERIALIZED_NAME_CREDENTIALS = "Credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private GetFederationTokenResponseCredentials credentials;

  public static final String SERIALIZED_NAME_SIGN_IN_URL = "SignInUrl";
  @SerializedName(SERIALIZED_NAME_SIGN_IN_URL)
  private String signInUrl;

  public static final String SERIALIZED_NAME_USER_ARN = "UserArn";
  @SerializedName(SERIALIZED_NAME_USER_ARN)
  private String userArn;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public GetFederationTokenResponse() {
  }

  public GetFederationTokenResponse credentials(GetFederationTokenResponseCredentials credentials) {
    this.credentials = credentials;
    return this;
  }

  /**
   * Get credentials
   * @return credentials
   */
  @javax.annotation.Nullable
  public GetFederationTokenResponseCredentials getCredentials() {
    return credentials;
  }

  public void setCredentials(GetFederationTokenResponseCredentials credentials) {
    this.credentials = credentials;
  }


  public GetFederationTokenResponse signInUrl(String signInUrl) {
    this.signInUrl = signInUrl;
    return this;
  }

  /**
   * Get signInUrl
   * @return signInUrl
   */
  @javax.annotation.Nullable
  public String getSignInUrl() {
    return signInUrl;
  }

  public void setSignInUrl(String signInUrl) {
    this.signInUrl = signInUrl;
  }


  public GetFederationTokenResponse userArn(String userArn) {
    this.userArn = userArn;
    return this;
  }

  /**
   * Get userArn
   * @return userArn
   */
  @javax.annotation.Nullable
  public String getUserArn() {
    return userArn;
  }

  public void setUserArn(String userArn) {
    this.userArn = userArn;
  }


  public GetFederationTokenResponse userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFederationTokenResponse getFederationTokenResponse = (GetFederationTokenResponse) o;
    return Objects.equals(this.credentials, getFederationTokenResponse.credentials) &&
        Objects.equals(this.signInUrl, getFederationTokenResponse.signInUrl) &&
        Objects.equals(this.userArn, getFederationTokenResponse.userArn) &&
        Objects.equals(this.userId, getFederationTokenResponse.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentials, signInUrl, userArn, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFederationTokenResponse {\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    signInUrl: ").append(toIndentedString(signInUrl)).append("\n");
    sb.append("    userArn: ").append(toIndentedString(userArn)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Credentials");
    openapiFields.add("SignInUrl");
    openapiFields.add("UserArn");
    openapiFields.add("UserId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetFederationTokenResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetFederationTokenResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetFederationTokenResponse is not found in the empty JSON string", GetFederationTokenResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetFederationTokenResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetFederationTokenResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Credentials`
      if (jsonObj.get("Credentials") != null && !jsonObj.get("Credentials").isJsonNull()) {
        GetFederationTokenResponseCredentials.validateJsonElement(jsonObj.get("Credentials"));
      }
      // validate the optional field `SignInUrl`
      if (jsonObj.get("SignInUrl") != null && !jsonObj.get("SignInUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SignInUrl"));
      }
      // validate the optional field `UserArn`
      if (jsonObj.get("UserArn") != null && !jsonObj.get("UserArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserArn"));
      }
      // validate the optional field `UserId`
      if (jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetFederationTokenResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetFederationTokenResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetFederationTokenResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetFederationTokenResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetFederationTokenResponse>() {
           @Override
           public void write(JsonWriter out, GetFederationTokenResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetFederationTokenResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetFederationTokenResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetFederationTokenResponse
   * @throws IOException if the JSON string is invalid with respect to GetFederationTokenResponse
   */
  public static GetFederationTokenResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetFederationTokenResponse.class);
  }

  /**
   * Convert an instance of GetFederationTokenResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

