/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MediaConcurrency;
import org.openapitools.client.model.RoutingProfileQueueConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRoutingProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRoutingProfileRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEFAULT_OUTBOUND_QUEUE_ID = "DefaultOutboundQueueId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_OUTBOUND_QUEUE_ID)
  private String defaultOutboundQueueId;

  public static final String SERIALIZED_NAME_QUEUE_CONFIGS = "QueueConfigs";
  @SerializedName(SERIALIZED_NAME_QUEUE_CONFIGS)
  private List<RoutingProfileQueueConfig> queueConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_CONCURRENCIES = "MediaConcurrencies";
  @SerializedName(SERIALIZED_NAME_MEDIA_CONCURRENCIES)
  private List<MediaConcurrency> mediaConcurrencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  /**
   * Whether agents with this routing profile will have their routing order calculated based on &lt;i&gt;time since their last inbound contact&lt;/i&gt; or &lt;i&gt;longest idle time&lt;/i&gt;. 
   */
  @JsonAdapter(AgentAvailabilityTimerEnum.Adapter.class)
  public enum AgentAvailabilityTimerEnum {
    ACTIVITY("TIME_SINCE_LAST_ACTIVITY"),
    
    INBOUND("TIME_SINCE_LAST_INBOUND");

    private String value;

    AgentAvailabilityTimerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgentAvailabilityTimerEnum fromValue(String value) {
      for (AgentAvailabilityTimerEnum b : AgentAvailabilityTimerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgentAvailabilityTimerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgentAvailabilityTimerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgentAvailabilityTimerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgentAvailabilityTimerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AgentAvailabilityTimerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGENT_AVAILABILITY_TIMER = "AgentAvailabilityTimer";
  @SerializedName(SERIALIZED_NAME_AGENT_AVAILABILITY_TIMER)
  private AgentAvailabilityTimerEnum agentAvailabilityTimer;

  public CreateRoutingProfileRequest() {
  }

  public CreateRoutingProfileRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the routing profile. Must not be more than 127 characters.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateRoutingProfileRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the routing profile. Must not be more than 250 characters.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateRoutingProfileRequest defaultOutboundQueueId(String defaultOutboundQueueId) {
    this.defaultOutboundQueueId = defaultOutboundQueueId;
    return this;
  }

  /**
   * The default outbound queue for the routing profile.
   * @return defaultOutboundQueueId
   */
  @javax.annotation.Nonnull
  public String getDefaultOutboundQueueId() {
    return defaultOutboundQueueId;
  }

  public void setDefaultOutboundQueueId(String defaultOutboundQueueId) {
    this.defaultOutboundQueueId = defaultOutboundQueueId;
  }


  public CreateRoutingProfileRequest queueConfigs(List<RoutingProfileQueueConfig> queueConfigs) {
    this.queueConfigs = queueConfigs;
    return this;
  }

  public CreateRoutingProfileRequest addQueueConfigsItem(RoutingProfileQueueConfig queueConfigsItem) {
    if (this.queueConfigs == null) {
      this.queueConfigs = new ArrayList<>();
    }
    this.queueConfigs.add(queueConfigsItem);
    return this;
  }

  /**
   * &lt;p&gt;The inbound queues associated with the routing profile. If no queue is added, the agent can make only outbound calls.&lt;/p&gt; &lt;p&gt;The limit of 10 array members applies to the maximum number of &lt;code&gt;RoutingProfileQueueConfig&lt;/code&gt; objects that can be passed during a CreateRoutingProfile API request. It is different from the quota of 50 queues per routing profile per instance that is listed in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\&quot;&gt;Amazon Connect service quotas&lt;/a&gt;. &lt;/p&gt;
   * @return queueConfigs
   */
  @javax.annotation.Nullable
  public List<RoutingProfileQueueConfig> getQueueConfigs() {
    return queueConfigs;
  }

  public void setQueueConfigs(List<RoutingProfileQueueConfig> queueConfigs) {
    this.queueConfigs = queueConfigs;
  }


  public CreateRoutingProfileRequest mediaConcurrencies(List<MediaConcurrency> mediaConcurrencies) {
    this.mediaConcurrencies = mediaConcurrencies;
    return this;
  }

  public CreateRoutingProfileRequest addMediaConcurrenciesItem(MediaConcurrency mediaConcurrenciesItem) {
    if (this.mediaConcurrencies == null) {
      this.mediaConcurrencies = new ArrayList<>();
    }
    this.mediaConcurrencies.add(mediaConcurrenciesItem);
    return this;
  }

  /**
   * The channels that agents can handle in the Contact Control Panel (CCP) for this routing profile.
   * @return mediaConcurrencies
   */
  @javax.annotation.Nonnull
  public List<MediaConcurrency> getMediaConcurrencies() {
    return mediaConcurrencies;
  }

  public void setMediaConcurrencies(List<MediaConcurrency> mediaConcurrencies) {
    this.mediaConcurrencies = mediaConcurrencies;
  }


  public CreateRoutingProfileRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateRoutingProfileRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags used to organize, track, or control access for this resource. For example, { \&quot;tags\&quot;: {\&quot;key1\&quot;:\&quot;value1\&quot;, \&quot;key2\&quot;:\&quot;value2\&quot;} }.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateRoutingProfileRequest agentAvailabilityTimer(AgentAvailabilityTimerEnum agentAvailabilityTimer) {
    this.agentAvailabilityTimer = agentAvailabilityTimer;
    return this;
  }

  /**
   * Whether agents with this routing profile will have their routing order calculated based on &lt;i&gt;time since their last inbound contact&lt;/i&gt; or &lt;i&gt;longest idle time&lt;/i&gt;. 
   * @return agentAvailabilityTimer
   */
  @javax.annotation.Nullable
  public AgentAvailabilityTimerEnum getAgentAvailabilityTimer() {
    return agentAvailabilityTimer;
  }

  public void setAgentAvailabilityTimer(AgentAvailabilityTimerEnum agentAvailabilityTimer) {
    this.agentAvailabilityTimer = agentAvailabilityTimer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRoutingProfileRequest createRoutingProfileRequest = (CreateRoutingProfileRequest) o;
    return Objects.equals(this.name, createRoutingProfileRequest.name) &&
        Objects.equals(this.description, createRoutingProfileRequest.description) &&
        Objects.equals(this.defaultOutboundQueueId, createRoutingProfileRequest.defaultOutboundQueueId) &&
        Objects.equals(this.queueConfigs, createRoutingProfileRequest.queueConfigs) &&
        Objects.equals(this.mediaConcurrencies, createRoutingProfileRequest.mediaConcurrencies) &&
        Objects.equals(this.tags, createRoutingProfileRequest.tags) &&
        Objects.equals(this.agentAvailabilityTimer, createRoutingProfileRequest.agentAvailabilityTimer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, defaultOutboundQueueId, queueConfigs, mediaConcurrencies, tags, agentAvailabilityTimer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRoutingProfileRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    defaultOutboundQueueId: ").append(toIndentedString(defaultOutboundQueueId)).append("\n");
    sb.append("    queueConfigs: ").append(toIndentedString(queueConfigs)).append("\n");
    sb.append("    mediaConcurrencies: ").append(toIndentedString(mediaConcurrencies)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    agentAvailabilityTimer: ").append(toIndentedString(agentAvailabilityTimer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("DefaultOutboundQueueId");
    openapiFields.add("QueueConfigs");
    openapiFields.add("MediaConcurrencies");
    openapiFields.add("Tags");
    openapiFields.add("AgentAvailabilityTimer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("DefaultOutboundQueueId");
    openapiRequiredFields.add("MediaConcurrencies");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRoutingProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRoutingProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRoutingProfileRequest is not found in the empty JSON string", CreateRoutingProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRoutingProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRoutingProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRoutingProfileRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("DefaultOutboundQueueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultOutboundQueueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultOutboundQueueId").toString()));
      }
      if (jsonObj.get("QueueConfigs") != null && !jsonObj.get("QueueConfigs").isJsonNull()) {
        JsonArray jsonArrayqueueConfigs = jsonObj.getAsJsonArray("QueueConfigs");
        if (jsonArrayqueueConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("QueueConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `QueueConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("QueueConfigs").toString()));
          }

          // validate the optional field `QueueConfigs` (array)
          for (int i = 0; i < jsonArrayqueueConfigs.size(); i++) {
            RoutingProfileQueueConfig.validateJsonElement(jsonArrayqueueConfigs.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("MediaConcurrencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MediaConcurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("MediaConcurrencies").toString()));
      }

      JsonArray jsonArraymediaConcurrencies = jsonObj.getAsJsonArray("MediaConcurrencies");
      // validate the required field `MediaConcurrencies` (array)
      for (int i = 0; i < jsonArraymediaConcurrencies.size(); i++) {
        MediaConcurrency.validateJsonElement(jsonArraymediaConcurrencies.get(i));
      };
      if ((jsonObj.get("AgentAvailabilityTimer") != null && !jsonObj.get("AgentAvailabilityTimer").isJsonNull()) && !jsonObj.get("AgentAvailabilityTimer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgentAvailabilityTimer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgentAvailabilityTimer").toString()));
      }
      // validate the optional field `AgentAvailabilityTimer`
      if (jsonObj.get("AgentAvailabilityTimer") != null && !jsonObj.get("AgentAvailabilityTimer").isJsonNull()) {
        AgentAvailabilityTimerEnum.validateJsonElement(jsonObj.get("AgentAvailabilityTimer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRoutingProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRoutingProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRoutingProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRoutingProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRoutingProfileRequest>() {
           @Override
           public void write(JsonWriter out, CreateRoutingProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRoutingProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRoutingProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRoutingProfileRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRoutingProfileRequest
   */
  public static CreateRoutingProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRoutingProfileRequest.class);
  }

  /**
   * Convert an instance of CreateRoutingProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

