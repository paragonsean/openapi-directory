/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.UserIdentityInfo;
import org.openapitools.client.model.UserPhoneConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a user account for an Amazon Connect instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_IDENTITY_INFO = "IdentityInfo";
  @SerializedName(SERIALIZED_NAME_IDENTITY_INFO)
  private UserIdentityInfo identityInfo;

  public static final String SERIALIZED_NAME_PHONE_CONFIG = "PhoneConfig";
  @SerializedName(SERIALIZED_NAME_PHONE_CONFIG)
  private UserPhoneConfig phoneConfig;

  public static final String SERIALIZED_NAME_DIRECTORY_USER_ID = "DirectoryUserId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_USER_ID)
  private String directoryUserId;

  public static final String SERIALIZED_NAME_SECURITY_PROFILE_IDS = "SecurityProfileIds";
  @SerializedName(SERIALIZED_NAME_SECURITY_PROFILE_IDS)
  private List securityProfileIds;

  public static final String SERIALIZED_NAME_ROUTING_PROFILE_ID = "RoutingProfileId";
  @SerializedName(SERIALIZED_NAME_ROUTING_PROFILE_ID)
  private String routingProfileId;

  public static final String SERIALIZED_NAME_HIERARCHY_GROUP_ID = "HierarchyGroupId";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_GROUP_ID)
  private String hierarchyGroupId;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public User() {
  }

  public User id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public User arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public User username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public User identityInfo(UserIdentityInfo identityInfo) {
    this.identityInfo = identityInfo;
    return this;
  }

  /**
   * Get identityInfo
   * @return identityInfo
   */
  @javax.annotation.Nullable
  public UserIdentityInfo getIdentityInfo() {
    return identityInfo;
  }

  public void setIdentityInfo(UserIdentityInfo identityInfo) {
    this.identityInfo = identityInfo;
  }


  public User phoneConfig(UserPhoneConfig phoneConfig) {
    this.phoneConfig = phoneConfig;
    return this;
  }

  /**
   * Get phoneConfig
   * @return phoneConfig
   */
  @javax.annotation.Nullable
  public UserPhoneConfig getPhoneConfig() {
    return phoneConfig;
  }

  public void setPhoneConfig(UserPhoneConfig phoneConfig) {
    this.phoneConfig = phoneConfig;
  }


  public User directoryUserId(String directoryUserId) {
    this.directoryUserId = directoryUserId;
    return this;
  }

  /**
   * Get directoryUserId
   * @return directoryUserId
   */
  @javax.annotation.Nullable
  public String getDirectoryUserId() {
    return directoryUserId;
  }

  public void setDirectoryUserId(String directoryUserId) {
    this.directoryUserId = directoryUserId;
  }


  public User securityProfileIds(List securityProfileIds) {
    this.securityProfileIds = securityProfileIds;
    return this;
  }

  /**
   * Get securityProfileIds
   * @return securityProfileIds
   */
  @javax.annotation.Nullable
  public List getSecurityProfileIds() {
    return securityProfileIds;
  }

  public void setSecurityProfileIds(List securityProfileIds) {
    this.securityProfileIds = securityProfileIds;
  }


  public User routingProfileId(String routingProfileId) {
    this.routingProfileId = routingProfileId;
    return this;
  }

  /**
   * Get routingProfileId
   * @return routingProfileId
   */
  @javax.annotation.Nullable
  public String getRoutingProfileId() {
    return routingProfileId;
  }

  public void setRoutingProfileId(String routingProfileId) {
    this.routingProfileId = routingProfileId;
  }


  public User hierarchyGroupId(String hierarchyGroupId) {
    this.hierarchyGroupId = hierarchyGroupId;
    return this;
  }

  /**
   * Get hierarchyGroupId
   * @return hierarchyGroupId
   */
  @javax.annotation.Nullable
  public String getHierarchyGroupId() {
    return hierarchyGroupId;
  }

  public void setHierarchyGroupId(String hierarchyGroupId) {
    this.hierarchyGroupId = hierarchyGroupId;
  }


  public User tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.arn, user.arn) &&
        Objects.equals(this.username, user.username) &&
        Objects.equals(this.identityInfo, user.identityInfo) &&
        Objects.equals(this.phoneConfig, user.phoneConfig) &&
        Objects.equals(this.directoryUserId, user.directoryUserId) &&
        Objects.equals(this.securityProfileIds, user.securityProfileIds) &&
        Objects.equals(this.routingProfileId, user.routingProfileId) &&
        Objects.equals(this.hierarchyGroupId, user.hierarchyGroupId) &&
        Objects.equals(this.tags, user.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, username, identityInfo, phoneConfig, directoryUserId, securityProfileIds, routingProfileId, hierarchyGroupId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    identityInfo: ").append(toIndentedString(identityInfo)).append("\n");
    sb.append("    phoneConfig: ").append(toIndentedString(phoneConfig)).append("\n");
    sb.append("    directoryUserId: ").append(toIndentedString(directoryUserId)).append("\n");
    sb.append("    securityProfileIds: ").append(toIndentedString(securityProfileIds)).append("\n");
    sb.append("    routingProfileId: ").append(toIndentedString(routingProfileId)).append("\n");
    sb.append("    hierarchyGroupId: ").append(toIndentedString(hierarchyGroupId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Arn");
    openapiFields.add("Username");
    openapiFields.add("IdentityInfo");
    openapiFields.add("PhoneConfig");
    openapiFields.add("DirectoryUserId");
    openapiFields.add("SecurityProfileIds");
    openapiFields.add("RoutingProfileId");
    openapiFields.add("HierarchyGroupId");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Username`
      if (jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Username"));
      }
      // validate the optional field `IdentityInfo`
      if (jsonObj.get("IdentityInfo") != null && !jsonObj.get("IdentityInfo").isJsonNull()) {
        UserIdentityInfo.validateJsonElement(jsonObj.get("IdentityInfo"));
      }
      // validate the optional field `PhoneConfig`
      if (jsonObj.get("PhoneConfig") != null && !jsonObj.get("PhoneConfig").isJsonNull()) {
        UserPhoneConfig.validateJsonElement(jsonObj.get("PhoneConfig"));
      }
      // validate the optional field `DirectoryUserId`
      if (jsonObj.get("DirectoryUserId") != null && !jsonObj.get("DirectoryUserId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DirectoryUserId"));
      }
      // validate the optional field `SecurityProfileIds`
      if (jsonObj.get("SecurityProfileIds") != null && !jsonObj.get("SecurityProfileIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityProfileIds"));
      }
      // validate the optional field `RoutingProfileId`
      if (jsonObj.get("RoutingProfileId") != null && !jsonObj.get("RoutingProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoutingProfileId"));
      }
      // validate the optional field `HierarchyGroupId`
      if (jsonObj.get("HierarchyGroupId") != null && !jsonObj.get("HierarchyGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HierarchyGroupId"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

