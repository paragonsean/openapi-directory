/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateRuleRequestTriggerEventSource;
import org.openapitools.client.model.RuleAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRuleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRuleRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TRIGGER_EVENT_SOURCE = "TriggerEventSource";
  @SerializedName(SERIALIZED_NAME_TRIGGER_EVENT_SOURCE)
  private CreateRuleRequestTriggerEventSource triggerEventSource;

  public static final String SERIALIZED_NAME_FUNCTION = "Function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  private String function;

  public static final String SERIALIZED_NAME_ACTIONS = "Actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<RuleAction> actions = new ArrayList<>();

  /**
   * The publish status of the rule.
   */
  @JsonAdapter(PublishStatusEnum.Adapter.class)
  public enum PublishStatusEnum {
    DRAFT("DRAFT"),
    
    PUBLISHED("PUBLISHED");

    private String value;

    PublishStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublishStatusEnum fromValue(String value) {
      for (PublishStatusEnum b : PublishStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublishStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublishStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublishStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublishStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PublishStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUBLISH_STATUS = "PublishStatus";
  @SerializedName(SERIALIZED_NAME_PUBLISH_STATUS)
  private PublishStatusEnum publishStatus;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public CreateRuleRequest() {
  }

  public CreateRuleRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A unique name for the rule.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateRuleRequest triggerEventSource(CreateRuleRequestTriggerEventSource triggerEventSource) {
    this.triggerEventSource = triggerEventSource;
    return this;
  }

  /**
   * Get triggerEventSource
   * @return triggerEventSource
   */
  @javax.annotation.Nonnull
  public CreateRuleRequestTriggerEventSource getTriggerEventSource() {
    return triggerEventSource;
  }

  public void setTriggerEventSource(CreateRuleRequestTriggerEventSource triggerEventSource) {
    this.triggerEventSource = triggerEventSource;
  }


  public CreateRuleRequest function(String function) {
    this.function = function;
    return this;
  }

  /**
   * The conditions of the rule.
   * @return function
   */
  @javax.annotation.Nonnull
  public String getFunction() {
    return function;
  }

  public void setFunction(String function) {
    this.function = function;
  }


  public CreateRuleRequest actions(List<RuleAction> actions) {
    this.actions = actions;
    return this;
  }

  public CreateRuleRequest addActionsItem(RuleAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * A list of actions to be run when the rule is triggered.
   * @return actions
   */
  @javax.annotation.Nonnull
  public List<RuleAction> getActions() {
    return actions;
  }

  public void setActions(List<RuleAction> actions) {
    this.actions = actions;
  }


  public CreateRuleRequest publishStatus(PublishStatusEnum publishStatus) {
    this.publishStatus = publishStatus;
    return this;
  }

  /**
   * The publish status of the rule.
   * @return publishStatus
   */
  @javax.annotation.Nonnull
  public PublishStatusEnum getPublishStatus() {
    return publishStatus;
  }

  public void setPublishStatus(PublishStatusEnum publishStatus) {
    this.publishStatus = publishStatus;
  }


  public CreateRuleRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\&quot;&gt;Making retries safe with idempotent APIs&lt;/a&gt;.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRuleRequest createRuleRequest = (CreateRuleRequest) o;
    return Objects.equals(this.name, createRuleRequest.name) &&
        Objects.equals(this.triggerEventSource, createRuleRequest.triggerEventSource) &&
        Objects.equals(this.function, createRuleRequest.function) &&
        Objects.equals(this.actions, createRuleRequest.actions) &&
        Objects.equals(this.publishStatus, createRuleRequest.publishStatus) &&
        Objects.equals(this.clientToken, createRuleRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, triggerEventSource, function, actions, publishStatus, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRuleRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    triggerEventSource: ").append(toIndentedString(triggerEventSource)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    publishStatus: ").append(toIndentedString(publishStatus)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("TriggerEventSource");
    openapiFields.add("Function");
    openapiFields.add("Actions");
    openapiFields.add("PublishStatus");
    openapiFields.add("ClientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("TriggerEventSource");
    openapiRequiredFields.add("Function");
    openapiRequiredFields.add("Actions");
    openapiRequiredFields.add("PublishStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRuleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRuleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRuleRequest is not found in the empty JSON string", CreateRuleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRuleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRuleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRuleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the required field `TriggerEventSource`
      CreateRuleRequestTriggerEventSource.validateJsonElement(jsonObj.get("TriggerEventSource"));
      if (!jsonObj.get("Function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Function").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Actions` to be an array in the JSON string but got `%s`", jsonObj.get("Actions").toString()));
      }

      JsonArray jsonArrayactions = jsonObj.getAsJsonArray("Actions");
      // validate the required field `Actions` (array)
      for (int i = 0; i < jsonArrayactions.size(); i++) {
        RuleAction.validateJsonElement(jsonArrayactions.get(i));
      };
      if (!jsonObj.get("PublishStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PublishStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PublishStatus").toString()));
      }
      // validate the required field `PublishStatus`
      PublishStatusEnum.validateJsonElement(jsonObj.get("PublishStatus"));
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRuleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRuleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRuleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRuleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRuleRequest>() {
           @Override
           public void write(JsonWriter out, CreateRuleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRuleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRuleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRuleRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRuleRequest
   */
  public static CreateRuleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRuleRequest.class);
  }

  /**
   * Convert an instance of CreateRuleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

