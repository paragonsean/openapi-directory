/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.StartOutboundVoiceContactRequestAnswerMachineDetectionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartOutboundVoiceContactRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartOutboundVoiceContactRequest {
  public static final String SERIALIZED_NAME_DESTINATION_PHONE_NUMBER = "DestinationPhoneNumber";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PHONE_NUMBER)
  private String destinationPhoneNumber;

  public static final String SERIALIZED_NAME_CONTACT_FLOW_ID = "ContactFlowId";
  @SerializedName(SERIALIZED_NAME_CONTACT_FLOW_ID)
  private String contactFlowId;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_SOURCE_PHONE_NUMBER = "SourcePhoneNumber";
  @SerializedName(SERIALIZED_NAME_SOURCE_PHONE_NUMBER)
  private String sourcePhoneNumber;

  public static final String SERIALIZED_NAME_QUEUE_ID = "QueueId";
  @SerializedName(SERIALIZED_NAME_QUEUE_ID)
  private String queueId;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_ANSWER_MACHINE_DETECTION_CONFIG = "AnswerMachineDetectionConfig";
  @SerializedName(SERIALIZED_NAME_ANSWER_MACHINE_DETECTION_CONFIG)
  private StartOutboundVoiceContactRequestAnswerMachineDetectionConfig answerMachineDetectionConfig;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "CampaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  /**
   * Denotes the class of traffic. Calls with different traffic types are handled differently by Amazon Connect. The default value is &lt;code&gt;GENERAL&lt;/code&gt;. Use &lt;code&gt;CAMPAIGN&lt;/code&gt; if &lt;code&gt;EnableAnswerMachineDetection&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. For all other cases, use &lt;code&gt;GENERAL&lt;/code&gt;. 
   */
  @JsonAdapter(TrafficTypeEnum.Adapter.class)
  public enum TrafficTypeEnum {
    GENERAL("GENERAL"),
    
    CAMPAIGN("CAMPAIGN");

    private String value;

    TrafficTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrafficTypeEnum fromValue(String value) {
      for (TrafficTypeEnum b : TrafficTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrafficTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrafficTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrafficTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrafficTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrafficTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAFFIC_TYPE = "TrafficType";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_TYPE)
  private TrafficTypeEnum trafficType;

  public StartOutboundVoiceContactRequest() {
  }

  public StartOutboundVoiceContactRequest destinationPhoneNumber(String destinationPhoneNumber) {
    this.destinationPhoneNumber = destinationPhoneNumber;
    return this;
  }

  /**
   * The phone number of the customer, in E.164 format.
   * @return destinationPhoneNumber
   */
  @javax.annotation.Nonnull
  public String getDestinationPhoneNumber() {
    return destinationPhoneNumber;
  }

  public void setDestinationPhoneNumber(String destinationPhoneNumber) {
    this.destinationPhoneNumber = destinationPhoneNumber;
  }


  public StartOutboundVoiceContactRequest contactFlowId(String contactFlowId) {
    this.contactFlowId = contactFlowId;
    return this;
  }

  /**
   * &lt;p&gt;The identifier of the flow for the outbound call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to &lt;b&gt;Routing&lt;/b&gt;, &lt;b&gt;Contact Flows&lt;/b&gt;. Choose the flow. On the flow page, under the name of the flow, choose &lt;b&gt;Show additional flow information&lt;/b&gt;. The ContactFlowId is the last part of the ARN, shown here in bold: &lt;/p&gt; &lt;p&gt;arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/&lt;b&gt;846ec553-a005-41c0-8341-xxxxxxxxxxxx&lt;/b&gt; &lt;/p&gt;
   * @return contactFlowId
   */
  @javax.annotation.Nonnull
  public String getContactFlowId() {
    return contactFlowId;
  }

  public void setContactFlowId(String contactFlowId) {
    this.contactFlowId = contactFlowId;
  }


  public StartOutboundVoiceContactRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * The identifier of the Amazon Connect instance. You can &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\&quot;&gt;find the instance ID&lt;/a&gt; in the Amazon Resource Name (ARN) of the instance.
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public StartOutboundVoiceContactRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\&quot;&gt;Making retries safe with idempotent APIs&lt;/a&gt;. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned. 
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public StartOutboundVoiceContactRequest sourcePhoneNumber(String sourcePhoneNumber) {
    this.sourcePhoneNumber = sourcePhoneNumber;
    return this;
  }

  /**
   * The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
   * @return sourcePhoneNumber
   */
  @javax.annotation.Nullable
  public String getSourcePhoneNumber() {
    return sourcePhoneNumber;
  }

  public void setSourcePhoneNumber(String sourcePhoneNumber) {
    this.sourcePhoneNumber = sourcePhoneNumber;
  }


  public StartOutboundVoiceContactRequest queueId(String queueId) {
    this.queueId = queueId;
    return this;
  }

  /**
   * The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the flow is used. If you do not specify a queue, you must specify a source phone number.
   * @return queueId
   */
  @javax.annotation.Nullable
  public String getQueueId() {
    return queueId;
  }

  public void setQueueId(String queueId) {
    this.queueId = queueId;
  }


  public StartOutboundVoiceContactRequest attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public StartOutboundVoiceContactRequest putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * &lt;p&gt;A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.&lt;/p&gt; &lt;p&gt;There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.&lt;/p&gt;
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public StartOutboundVoiceContactRequest answerMachineDetectionConfig(StartOutboundVoiceContactRequestAnswerMachineDetectionConfig answerMachineDetectionConfig) {
    this.answerMachineDetectionConfig = answerMachineDetectionConfig;
    return this;
  }

  /**
   * Get answerMachineDetectionConfig
   * @return answerMachineDetectionConfig
   */
  @javax.annotation.Nullable
  public StartOutboundVoiceContactRequestAnswerMachineDetectionConfig getAnswerMachineDetectionConfig() {
    return answerMachineDetectionConfig;
  }

  public void setAnswerMachineDetectionConfig(StartOutboundVoiceContactRequestAnswerMachineDetectionConfig answerMachineDetectionConfig) {
    this.answerMachineDetectionConfig = answerMachineDetectionConfig;
  }


  public StartOutboundVoiceContactRequest campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * The campaign identifier of the outbound communication.
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public StartOutboundVoiceContactRequest trafficType(TrafficTypeEnum trafficType) {
    this.trafficType = trafficType;
    return this;
  }

  /**
   * Denotes the class of traffic. Calls with different traffic types are handled differently by Amazon Connect. The default value is &lt;code&gt;GENERAL&lt;/code&gt;. Use &lt;code&gt;CAMPAIGN&lt;/code&gt; if &lt;code&gt;EnableAnswerMachineDetection&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. For all other cases, use &lt;code&gt;GENERAL&lt;/code&gt;. 
   * @return trafficType
   */
  @javax.annotation.Nullable
  public TrafficTypeEnum getTrafficType() {
    return trafficType;
  }

  public void setTrafficType(TrafficTypeEnum trafficType) {
    this.trafficType = trafficType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartOutboundVoiceContactRequest startOutboundVoiceContactRequest = (StartOutboundVoiceContactRequest) o;
    return Objects.equals(this.destinationPhoneNumber, startOutboundVoiceContactRequest.destinationPhoneNumber) &&
        Objects.equals(this.contactFlowId, startOutboundVoiceContactRequest.contactFlowId) &&
        Objects.equals(this.instanceId, startOutboundVoiceContactRequest.instanceId) &&
        Objects.equals(this.clientToken, startOutboundVoiceContactRequest.clientToken) &&
        Objects.equals(this.sourcePhoneNumber, startOutboundVoiceContactRequest.sourcePhoneNumber) &&
        Objects.equals(this.queueId, startOutboundVoiceContactRequest.queueId) &&
        Objects.equals(this.attributes, startOutboundVoiceContactRequest.attributes) &&
        Objects.equals(this.answerMachineDetectionConfig, startOutboundVoiceContactRequest.answerMachineDetectionConfig) &&
        Objects.equals(this.campaignId, startOutboundVoiceContactRequest.campaignId) &&
        Objects.equals(this.trafficType, startOutboundVoiceContactRequest.trafficType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationPhoneNumber, contactFlowId, instanceId, clientToken, sourcePhoneNumber, queueId, attributes, answerMachineDetectionConfig, campaignId, trafficType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartOutboundVoiceContactRequest {\n");
    sb.append("    destinationPhoneNumber: ").append(toIndentedString(destinationPhoneNumber)).append("\n");
    sb.append("    contactFlowId: ").append(toIndentedString(contactFlowId)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    sourcePhoneNumber: ").append(toIndentedString(sourcePhoneNumber)).append("\n");
    sb.append("    queueId: ").append(toIndentedString(queueId)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    answerMachineDetectionConfig: ").append(toIndentedString(answerMachineDetectionConfig)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    trafficType: ").append(toIndentedString(trafficType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DestinationPhoneNumber");
    openapiFields.add("ContactFlowId");
    openapiFields.add("InstanceId");
    openapiFields.add("ClientToken");
    openapiFields.add("SourcePhoneNumber");
    openapiFields.add("QueueId");
    openapiFields.add("Attributes");
    openapiFields.add("AnswerMachineDetectionConfig");
    openapiFields.add("CampaignId");
    openapiFields.add("TrafficType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DestinationPhoneNumber");
    openapiRequiredFields.add("ContactFlowId");
    openapiRequiredFields.add("InstanceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartOutboundVoiceContactRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartOutboundVoiceContactRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartOutboundVoiceContactRequest is not found in the empty JSON string", StartOutboundVoiceContactRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartOutboundVoiceContactRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartOutboundVoiceContactRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartOutboundVoiceContactRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DestinationPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DestinationPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DestinationPhoneNumber").toString()));
      }
      if (!jsonObj.get("ContactFlowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactFlowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactFlowId").toString()));
      }
      if (!jsonObj.get("InstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceId").toString()));
      }
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if ((jsonObj.get("SourcePhoneNumber") != null && !jsonObj.get("SourcePhoneNumber").isJsonNull()) && !jsonObj.get("SourcePhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourcePhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourcePhoneNumber").toString()));
      }
      if ((jsonObj.get("QueueId") != null && !jsonObj.get("QueueId").isJsonNull()) && !jsonObj.get("QueueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueueId").toString()));
      }
      // validate the optional field `AnswerMachineDetectionConfig`
      if (jsonObj.get("AnswerMachineDetectionConfig") != null && !jsonObj.get("AnswerMachineDetectionConfig").isJsonNull()) {
        StartOutboundVoiceContactRequestAnswerMachineDetectionConfig.validateJsonElement(jsonObj.get("AnswerMachineDetectionConfig"));
      }
      if ((jsonObj.get("CampaignId") != null && !jsonObj.get("CampaignId").isJsonNull()) && !jsonObj.get("CampaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CampaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CampaignId").toString()));
      }
      if ((jsonObj.get("TrafficType") != null && !jsonObj.get("TrafficType").isJsonNull()) && !jsonObj.get("TrafficType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrafficType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrafficType").toString()));
      }
      // validate the optional field `TrafficType`
      if (jsonObj.get("TrafficType") != null && !jsonObj.get("TrafficType").isJsonNull()) {
        TrafficTypeEnum.validateJsonElement(jsonObj.get("TrafficType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartOutboundVoiceContactRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartOutboundVoiceContactRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartOutboundVoiceContactRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartOutboundVoiceContactRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartOutboundVoiceContactRequest>() {
           @Override
           public void write(JsonWriter out, StartOutboundVoiceContactRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartOutboundVoiceContactRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartOutboundVoiceContactRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartOutboundVoiceContactRequest
   * @throws IOException if the JSON string is invalid with respect to StartOutboundVoiceContactRequest
   */
  public static StartOutboundVoiceContactRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartOutboundVoiceContactRequest.class);
  }

  /**
   * Convert an instance of StartOutboundVoiceContactRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

