/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HistoricalMetricName;
import org.openapitools.client.model.HistoricalMetricThreshold;
import org.openapitools.client.model.Statistic;
import org.openapitools.client.model.Unit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistoricalMetricDataMetric
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoricalMetricDataMetric {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private HistoricalMetricName name;

  public static final String SERIALIZED_NAME_THRESHOLD = "Threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private HistoricalMetricThreshold threshold;

  public static final String SERIALIZED_NAME_STATISTIC = "Statistic";
  @SerializedName(SERIALIZED_NAME_STATISTIC)
  private Statistic statistic;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private Unit unit;

  public HistoricalMetricDataMetric() {
  }

  public HistoricalMetricDataMetric name(HistoricalMetricName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public HistoricalMetricName getName() {
    return name;
  }

  public void setName(HistoricalMetricName name) {
    this.name = name;
  }


  public HistoricalMetricDataMetric threshold(HistoricalMetricThreshold threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nullable
  public HistoricalMetricThreshold getThreshold() {
    return threshold;
  }

  public void setThreshold(HistoricalMetricThreshold threshold) {
    this.threshold = threshold;
  }


  public HistoricalMetricDataMetric statistic(Statistic statistic) {
    this.statistic = statistic;
    return this;
  }

  /**
   * Get statistic
   * @return statistic
   */
  @javax.annotation.Nullable
  public Statistic getStatistic() {
    return statistic;
  }

  public void setStatistic(Statistic statistic) {
    this.statistic = statistic;
  }


  public HistoricalMetricDataMetric unit(Unit unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public Unit getUnit() {
    return unit;
  }

  public void setUnit(Unit unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoricalMetricDataMetric historicalMetricDataMetric = (HistoricalMetricDataMetric) o;
    return Objects.equals(this.name, historicalMetricDataMetric.name) &&
        Objects.equals(this.threshold, historicalMetricDataMetric.threshold) &&
        Objects.equals(this.statistic, historicalMetricDataMetric.statistic) &&
        Objects.equals(this.unit, historicalMetricDataMetric.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, threshold, statistic, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoricalMetricDataMetric {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    statistic: ").append(toIndentedString(statistic)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Threshold");
    openapiFields.add("Statistic");
    openapiFields.add("Unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoricalMetricDataMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoricalMetricDataMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoricalMetricDataMetric is not found in the empty JSON string", HistoricalMetricDataMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoricalMetricDataMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoricalMetricDataMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        HistoricalMetricName.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Threshold`
      if (jsonObj.get("Threshold") != null && !jsonObj.get("Threshold").isJsonNull()) {
        HistoricalMetricThreshold.validateJsonElement(jsonObj.get("Threshold"));
      }
      // validate the optional field `Statistic`
      if (jsonObj.get("Statistic") != null && !jsonObj.get("Statistic").isJsonNull()) {
        Statistic.validateJsonElement(jsonObj.get("Statistic"));
      }
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        Unit.validateJsonElement(jsonObj.get("Unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoricalMetricDataMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoricalMetricDataMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoricalMetricDataMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoricalMetricDataMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoricalMetricDataMetric>() {
           @Override
           public void write(JsonWriter out, HistoricalMetricDataMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoricalMetricDataMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoricalMetricDataMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoricalMetricDataMetric
   * @throws IOException if the JSON string is invalid with respect to HistoricalMetricDataMetric
   */
  public static HistoricalMetricDataMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoricalMetricDataMetric.class);
  }

  /**
   * Convert an instance of HistoricalMetricDataMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

