/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DirectoryType;
import org.openapitools.client.model.InstanceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceSummary {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_IDENTITY_MANAGEMENT_TYPE = "IdentityManagementType";
  @SerializedName(SERIALIZED_NAME_IDENTITY_MANAGEMENT_TYPE)
  private DirectoryType identityManagementType;

  public static final String SERIALIZED_NAME_INSTANCE_ALIAS = "InstanceAlias";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ALIAS)
  private String instanceAlias;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_SERVICE_ROLE = "ServiceRole";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE)
  private String serviceRole;

  public static final String SERIALIZED_NAME_INSTANCE_STATUS = "InstanceStatus";
  @SerializedName(SERIALIZED_NAME_INSTANCE_STATUS)
  private InstanceStatus instanceStatus;

  public static final String SERIALIZED_NAME_INBOUND_CALLS_ENABLED = "InboundCallsEnabled";
  @SerializedName(SERIALIZED_NAME_INBOUND_CALLS_ENABLED)
  private Boolean inboundCallsEnabled;

  public static final String SERIALIZED_NAME_OUTBOUND_CALLS_ENABLED = "OutboundCallsEnabled";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_CALLS_ENABLED)
  private Boolean outboundCallsEnabled;

  public static final String SERIALIZED_NAME_INSTANCE_ACCESS_URL = "InstanceAccessUrl";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ACCESS_URL)
  private String instanceAccessUrl;

  public InstanceSummary() {
  }

  public InstanceSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InstanceSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public InstanceSummary identityManagementType(DirectoryType identityManagementType) {
    this.identityManagementType = identityManagementType;
    return this;
  }

  /**
   * Get identityManagementType
   * @return identityManagementType
   */
  @javax.annotation.Nullable
  public DirectoryType getIdentityManagementType() {
    return identityManagementType;
  }

  public void setIdentityManagementType(DirectoryType identityManagementType) {
    this.identityManagementType = identityManagementType;
  }


  public InstanceSummary instanceAlias(String instanceAlias) {
    this.instanceAlias = instanceAlias;
    return this;
  }

  /**
   * Get instanceAlias
   * @return instanceAlias
   */
  @javax.annotation.Nullable
  public String getInstanceAlias() {
    return instanceAlias;
  }

  public void setInstanceAlias(String instanceAlias) {
    this.instanceAlias = instanceAlias;
  }


  public InstanceSummary createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public InstanceSummary serviceRole(String serviceRole) {
    this.serviceRole = serviceRole;
    return this;
  }

  /**
   * Get serviceRole
   * @return serviceRole
   */
  @javax.annotation.Nullable
  public String getServiceRole() {
    return serviceRole;
  }

  public void setServiceRole(String serviceRole) {
    this.serviceRole = serviceRole;
  }


  public InstanceSummary instanceStatus(InstanceStatus instanceStatus) {
    this.instanceStatus = instanceStatus;
    return this;
  }

  /**
   * Get instanceStatus
   * @return instanceStatus
   */
  @javax.annotation.Nullable
  public InstanceStatus getInstanceStatus() {
    return instanceStatus;
  }

  public void setInstanceStatus(InstanceStatus instanceStatus) {
    this.instanceStatus = instanceStatus;
  }


  public InstanceSummary inboundCallsEnabled(Boolean inboundCallsEnabled) {
    this.inboundCallsEnabled = inboundCallsEnabled;
    return this;
  }

  /**
   * Get inboundCallsEnabled
   * @return inboundCallsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getInboundCallsEnabled() {
    return inboundCallsEnabled;
  }

  public void setInboundCallsEnabled(Boolean inboundCallsEnabled) {
    this.inboundCallsEnabled = inboundCallsEnabled;
  }


  public InstanceSummary outboundCallsEnabled(Boolean outboundCallsEnabled) {
    this.outboundCallsEnabled = outboundCallsEnabled;
    return this;
  }

  /**
   * Get outboundCallsEnabled
   * @return outboundCallsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getOutboundCallsEnabled() {
    return outboundCallsEnabled;
  }

  public void setOutboundCallsEnabled(Boolean outboundCallsEnabled) {
    this.outboundCallsEnabled = outboundCallsEnabled;
  }


  public InstanceSummary instanceAccessUrl(String instanceAccessUrl) {
    this.instanceAccessUrl = instanceAccessUrl;
    return this;
  }

  /**
   * Get instanceAccessUrl
   * @return instanceAccessUrl
   */
  @javax.annotation.Nullable
  public String getInstanceAccessUrl() {
    return instanceAccessUrl;
  }

  public void setInstanceAccessUrl(String instanceAccessUrl) {
    this.instanceAccessUrl = instanceAccessUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceSummary instanceSummary = (InstanceSummary) o;
    return Objects.equals(this.id, instanceSummary.id) &&
        Objects.equals(this.arn, instanceSummary.arn) &&
        Objects.equals(this.identityManagementType, instanceSummary.identityManagementType) &&
        Objects.equals(this.instanceAlias, instanceSummary.instanceAlias) &&
        Objects.equals(this.createdTime, instanceSummary.createdTime) &&
        Objects.equals(this.serviceRole, instanceSummary.serviceRole) &&
        Objects.equals(this.instanceStatus, instanceSummary.instanceStatus) &&
        Objects.equals(this.inboundCallsEnabled, instanceSummary.inboundCallsEnabled) &&
        Objects.equals(this.outboundCallsEnabled, instanceSummary.outboundCallsEnabled) &&
        Objects.equals(this.instanceAccessUrl, instanceSummary.instanceAccessUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, identityManagementType, instanceAlias, createdTime, serviceRole, instanceStatus, inboundCallsEnabled, outboundCallsEnabled, instanceAccessUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    identityManagementType: ").append(toIndentedString(identityManagementType)).append("\n");
    sb.append("    instanceAlias: ").append(toIndentedString(instanceAlias)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    serviceRole: ").append(toIndentedString(serviceRole)).append("\n");
    sb.append("    instanceStatus: ").append(toIndentedString(instanceStatus)).append("\n");
    sb.append("    inboundCallsEnabled: ").append(toIndentedString(inboundCallsEnabled)).append("\n");
    sb.append("    outboundCallsEnabled: ").append(toIndentedString(outboundCallsEnabled)).append("\n");
    sb.append("    instanceAccessUrl: ").append(toIndentedString(instanceAccessUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Arn");
    openapiFields.add("IdentityManagementType");
    openapiFields.add("InstanceAlias");
    openapiFields.add("CreatedTime");
    openapiFields.add("ServiceRole");
    openapiFields.add("InstanceStatus");
    openapiFields.add("InboundCallsEnabled");
    openapiFields.add("OutboundCallsEnabled");
    openapiFields.add("InstanceAccessUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceSummary is not found in the empty JSON string", InstanceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `IdentityManagementType`
      if (jsonObj.get("IdentityManagementType") != null && !jsonObj.get("IdentityManagementType").isJsonNull()) {
        DirectoryType.validateJsonElement(jsonObj.get("IdentityManagementType"));
      }
      // validate the optional field `InstanceAlias`
      if (jsonObj.get("InstanceAlias") != null && !jsonObj.get("InstanceAlias").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceAlias"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `ServiceRole`
      if (jsonObj.get("ServiceRole") != null && !jsonObj.get("ServiceRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceRole"));
      }
      // validate the optional field `InstanceStatus`
      if (jsonObj.get("InstanceStatus") != null && !jsonObj.get("InstanceStatus").isJsonNull()) {
        InstanceStatus.validateJsonElement(jsonObj.get("InstanceStatus"));
      }
      // validate the optional field `InboundCallsEnabled`
      if (jsonObj.get("InboundCallsEnabled") != null && !jsonObj.get("InboundCallsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("InboundCallsEnabled"));
      }
      // validate the optional field `OutboundCallsEnabled`
      if (jsonObj.get("OutboundCallsEnabled") != null && !jsonObj.get("OutboundCallsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("OutboundCallsEnabled"));
      }
      // validate the optional field `InstanceAccessUrl`
      if (jsonObj.get("InstanceAccessUrl") != null && !jsonObj.get("InstanceAccessUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceAccessUrl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceSummary>() {
           @Override
           public void write(JsonWriter out, InstanceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceSummary
   * @throws IOException if the JSON string is invalid with respect to InstanceSummary
   */
  public static InstanceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceSummary.class);
  }

  /**
   * Convert an instance of InstanceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

