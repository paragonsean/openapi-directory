/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateQueueRequestOutboundCallerConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateQueueRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateQueueRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_OUTBOUND_CALLER_CONFIG = "OutboundCallerConfig";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_CALLER_CONFIG)
  private CreateQueueRequestOutboundCallerConfig outboundCallerConfig;

  public static final String SERIALIZED_NAME_HOURS_OF_OPERATION_ID = "HoursOfOperationId";
  @SerializedName(SERIALIZED_NAME_HOURS_OF_OPERATION_ID)
  private String hoursOfOperationId;

  public static final String SERIALIZED_NAME_MAX_CONTACTS = "MaxContacts";
  @SerializedName(SERIALIZED_NAME_MAX_CONTACTS)
  private Integer maxContacts;

  public static final String SERIALIZED_NAME_QUICK_CONNECT_IDS = "QuickConnectIds";
  @SerializedName(SERIALIZED_NAME_QUICK_CONNECT_IDS)
  private List<String> quickConnectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateQueueRequest() {
  }

  public CreateQueueRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the queue.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateQueueRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the queue.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateQueueRequest outboundCallerConfig(CreateQueueRequestOutboundCallerConfig outboundCallerConfig) {
    this.outboundCallerConfig = outboundCallerConfig;
    return this;
  }

  /**
   * Get outboundCallerConfig
   * @return outboundCallerConfig
   */
  @javax.annotation.Nullable
  public CreateQueueRequestOutboundCallerConfig getOutboundCallerConfig() {
    return outboundCallerConfig;
  }

  public void setOutboundCallerConfig(CreateQueueRequestOutboundCallerConfig outboundCallerConfig) {
    this.outboundCallerConfig = outboundCallerConfig;
  }


  public CreateQueueRequest hoursOfOperationId(String hoursOfOperationId) {
    this.hoursOfOperationId = hoursOfOperationId;
    return this;
  }

  /**
   * The identifier for the hours of operation.
   * @return hoursOfOperationId
   */
  @javax.annotation.Nonnull
  public String getHoursOfOperationId() {
    return hoursOfOperationId;
  }

  public void setHoursOfOperationId(String hoursOfOperationId) {
    this.hoursOfOperationId = hoursOfOperationId;
  }


  public CreateQueueRequest maxContacts(Integer maxContacts) {
    this.maxContacts = maxContacts;
    return this;
  }

  /**
   * The maximum number of contacts that can be in the queue before it is considered full.
   * minimum: 0
   * @return maxContacts
   */
  @javax.annotation.Nullable
  public Integer getMaxContacts() {
    return maxContacts;
  }

  public void setMaxContacts(Integer maxContacts) {
    this.maxContacts = maxContacts;
  }


  public CreateQueueRequest quickConnectIds(List<String> quickConnectIds) {
    this.quickConnectIds = quickConnectIds;
    return this;
  }

  public CreateQueueRequest addQuickConnectIdsItem(String quickConnectIdsItem) {
    if (this.quickConnectIds == null) {
      this.quickConnectIds = new ArrayList<>();
    }
    this.quickConnectIds.add(quickConnectIdsItem);
    return this;
  }

  /**
   * The quick connects available to agents who are working the queue.
   * @return quickConnectIds
   */
  @javax.annotation.Nullable
  public List<String> getQuickConnectIds() {
    return quickConnectIds;
  }

  public void setQuickConnectIds(List<String> quickConnectIds) {
    this.quickConnectIds = quickConnectIds;
  }


  public CreateQueueRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateQueueRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags used to organize, track, or control access for this resource. For example, { \&quot;tags\&quot;: {\&quot;key1\&quot;:\&quot;value1\&quot;, \&quot;key2\&quot;:\&quot;value2\&quot;} }.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateQueueRequest createQueueRequest = (CreateQueueRequest) o;
    return Objects.equals(this.name, createQueueRequest.name) &&
        Objects.equals(this.description, createQueueRequest.description) &&
        Objects.equals(this.outboundCallerConfig, createQueueRequest.outboundCallerConfig) &&
        Objects.equals(this.hoursOfOperationId, createQueueRequest.hoursOfOperationId) &&
        Objects.equals(this.maxContacts, createQueueRequest.maxContacts) &&
        Objects.equals(this.quickConnectIds, createQueueRequest.quickConnectIds) &&
        Objects.equals(this.tags, createQueueRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, outboundCallerConfig, hoursOfOperationId, maxContacts, quickConnectIds, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateQueueRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    outboundCallerConfig: ").append(toIndentedString(outboundCallerConfig)).append("\n");
    sb.append("    hoursOfOperationId: ").append(toIndentedString(hoursOfOperationId)).append("\n");
    sb.append("    maxContacts: ").append(toIndentedString(maxContacts)).append("\n");
    sb.append("    quickConnectIds: ").append(toIndentedString(quickConnectIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("OutboundCallerConfig");
    openapiFields.add("HoursOfOperationId");
    openapiFields.add("MaxContacts");
    openapiFields.add("QuickConnectIds");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("HoursOfOperationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateQueueRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateQueueRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateQueueRequest is not found in the empty JSON string", CreateQueueRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateQueueRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateQueueRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateQueueRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `OutboundCallerConfig`
      if (jsonObj.get("OutboundCallerConfig") != null && !jsonObj.get("OutboundCallerConfig").isJsonNull()) {
        CreateQueueRequestOutboundCallerConfig.validateJsonElement(jsonObj.get("OutboundCallerConfig"));
      }
      if (!jsonObj.get("HoursOfOperationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HoursOfOperationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HoursOfOperationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("QuickConnectIds") != null && !jsonObj.get("QuickConnectIds").isJsonNull() && !jsonObj.get("QuickConnectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuickConnectIds` to be an array in the JSON string but got `%s`", jsonObj.get("QuickConnectIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateQueueRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateQueueRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateQueueRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateQueueRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateQueueRequest>() {
           @Override
           public void write(JsonWriter out, CreateQueueRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateQueueRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateQueueRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateQueueRequest
   * @throws IOException if the JSON string is invalid with respect to CreateQueueRequest
   */
  public static CreateQueueRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateQueueRequest.class);
  }

  /**
   * Convert an instance of CreateQueueRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

