/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateEvaluationFormRequestScoringStrategy;
import org.openapitools.client.model.EvaluationFormItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateEvaluationFormRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateEvaluationFormRequest {
  public static final String SERIALIZED_NAME_EVALUATION_FORM_VERSION = "EvaluationFormVersion";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FORM_VERSION)
  private Integer evaluationFormVersion;

  public static final String SERIALIZED_NAME_CREATE_NEW_VERSION = "CreateNewVersion";
  @SerializedName(SERIALIZED_NAME_CREATE_NEW_VERSION)
  private Boolean createNewVersion;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<EvaluationFormItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORING_STRATEGY = "ScoringStrategy";
  @SerializedName(SERIALIZED_NAME_SCORING_STRATEGY)
  private CreateEvaluationFormRequestScoringStrategy scoringStrategy;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public UpdateEvaluationFormRequest() {
  }

  public UpdateEvaluationFormRequest evaluationFormVersion(Integer evaluationFormVersion) {
    this.evaluationFormVersion = evaluationFormVersion;
    return this;
  }

  /**
   * A version of the evaluation form to update.
   * minimum: 1
   * @return evaluationFormVersion
   */
  @javax.annotation.Nonnull
  public Integer getEvaluationFormVersion() {
    return evaluationFormVersion;
  }

  public void setEvaluationFormVersion(Integer evaluationFormVersion) {
    this.evaluationFormVersion = evaluationFormVersion;
  }


  public UpdateEvaluationFormRequest createNewVersion(Boolean createNewVersion) {
    this.createNewVersion = createNewVersion;
    return this;
  }

  /**
   * A flag indicating whether the operation must create a new version.
   * @return createNewVersion
   */
  @javax.annotation.Nullable
  public Boolean getCreateNewVersion() {
    return createNewVersion;
  }

  public void setCreateNewVersion(Boolean createNewVersion) {
    this.createNewVersion = createNewVersion;
  }


  public UpdateEvaluationFormRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A title of the evaluation form.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public UpdateEvaluationFormRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the evaluation form.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateEvaluationFormRequest items(List<EvaluationFormItem> items) {
    this.items = items;
    return this;
  }

  public UpdateEvaluationFormRequest addItemsItem(EvaluationFormItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Items that are part of the evaluation form. The total number of sections and questions must not exceed 100 each. Questions must be contained in a section.
   * @return items
   */
  @javax.annotation.Nonnull
  public List<EvaluationFormItem> getItems() {
    return items;
  }

  public void setItems(List<EvaluationFormItem> items) {
    this.items = items;
  }


  public UpdateEvaluationFormRequest scoringStrategy(CreateEvaluationFormRequestScoringStrategy scoringStrategy) {
    this.scoringStrategy = scoringStrategy;
    return this;
  }

  /**
   * Get scoringStrategy
   * @return scoringStrategy
   */
  @javax.annotation.Nullable
  public CreateEvaluationFormRequestScoringStrategy getScoringStrategy() {
    return scoringStrategy;
  }

  public void setScoringStrategy(CreateEvaluationFormRequestScoringStrategy scoringStrategy) {
    this.scoringStrategy = scoringStrategy;
  }


  public UpdateEvaluationFormRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\&quot;&gt;Making retries safe with idempotent APIs&lt;/a&gt;.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEvaluationFormRequest updateEvaluationFormRequest = (UpdateEvaluationFormRequest) o;
    return Objects.equals(this.evaluationFormVersion, updateEvaluationFormRequest.evaluationFormVersion) &&
        Objects.equals(this.createNewVersion, updateEvaluationFormRequest.createNewVersion) &&
        Objects.equals(this.title, updateEvaluationFormRequest.title) &&
        Objects.equals(this.description, updateEvaluationFormRequest.description) &&
        Objects.equals(this.items, updateEvaluationFormRequest.items) &&
        Objects.equals(this.scoringStrategy, updateEvaluationFormRequest.scoringStrategy) &&
        Objects.equals(this.clientToken, updateEvaluationFormRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluationFormVersion, createNewVersion, title, description, items, scoringStrategy, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEvaluationFormRequest {\n");
    sb.append("    evaluationFormVersion: ").append(toIndentedString(evaluationFormVersion)).append("\n");
    sb.append("    createNewVersion: ").append(toIndentedString(createNewVersion)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    scoringStrategy: ").append(toIndentedString(scoringStrategy)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EvaluationFormVersion");
    openapiFields.add("CreateNewVersion");
    openapiFields.add("Title");
    openapiFields.add("Description");
    openapiFields.add("Items");
    openapiFields.add("ScoringStrategy");
    openapiFields.add("ClientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EvaluationFormVersion");
    openapiRequiredFields.add("Title");
    openapiRequiredFields.add("Items");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateEvaluationFormRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateEvaluationFormRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEvaluationFormRequest is not found in the empty JSON string", UpdateEvaluationFormRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateEvaluationFormRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEvaluationFormRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateEvaluationFormRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Items` to be an array in the JSON string but got `%s`", jsonObj.get("Items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("Items");
      // validate the required field `Items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        EvaluationFormItem.validateJsonElement(jsonArrayitems.get(i));
      };
      // validate the optional field `ScoringStrategy`
      if (jsonObj.get("ScoringStrategy") != null && !jsonObj.get("ScoringStrategy").isJsonNull()) {
        CreateEvaluationFormRequestScoringStrategy.validateJsonElement(jsonObj.get("ScoringStrategy"));
      }
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEvaluationFormRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEvaluationFormRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEvaluationFormRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEvaluationFormRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEvaluationFormRequest>() {
           @Override
           public void write(JsonWriter out, UpdateEvaluationFormRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEvaluationFormRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateEvaluationFormRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateEvaluationFormRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateEvaluationFormRequest
   */
  public static UpdateEvaluationFormRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEvaluationFormRequest.class);
  }

  /**
   * Convert an instance of UpdateEvaluationFormRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

