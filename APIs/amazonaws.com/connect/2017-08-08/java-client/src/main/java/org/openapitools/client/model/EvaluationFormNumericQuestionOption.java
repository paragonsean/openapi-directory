/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the option range used for scoring in numeric questions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluationFormNumericQuestionOption {
  public static final String SERIALIZED_NAME_MIN_VALUE = "MinValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Integer minValue;

  public static final String SERIALIZED_NAME_MAX_VALUE = "MaxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Integer maxValue;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_AUTOMATIC_FAIL = "AutomaticFail";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_FAIL)
  private Boolean automaticFail;

  public EvaluationFormNumericQuestionOption() {
  }

  public EvaluationFormNumericQuestionOption minValue(Integer minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Get minValue
   * @return minValue
   */
  @javax.annotation.Nonnull
  public Integer getMinValue() {
    return minValue;
  }

  public void setMinValue(Integer minValue) {
    this.minValue = minValue;
  }


  public EvaluationFormNumericQuestionOption maxValue(Integer maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Get maxValue
   * @return maxValue
   */
  @javax.annotation.Nonnull
  public Integer getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(Integer maxValue) {
    this.maxValue = maxValue;
  }


  public EvaluationFormNumericQuestionOption score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public EvaluationFormNumericQuestionOption automaticFail(Boolean automaticFail) {
    this.automaticFail = automaticFail;
    return this;
  }

  /**
   * Get automaticFail
   * @return automaticFail
   */
  @javax.annotation.Nullable
  public Boolean getAutomaticFail() {
    return automaticFail;
  }

  public void setAutomaticFail(Boolean automaticFail) {
    this.automaticFail = automaticFail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluationFormNumericQuestionOption evaluationFormNumericQuestionOption = (EvaluationFormNumericQuestionOption) o;
    return Objects.equals(this.minValue, evaluationFormNumericQuestionOption.minValue) &&
        Objects.equals(this.maxValue, evaluationFormNumericQuestionOption.maxValue) &&
        Objects.equals(this.score, evaluationFormNumericQuestionOption.score) &&
        Objects.equals(this.automaticFail, evaluationFormNumericQuestionOption.automaticFail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minValue, maxValue, score, automaticFail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluationFormNumericQuestionOption {\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    automaticFail: ").append(toIndentedString(automaticFail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MinValue");
    openapiFields.add("MaxValue");
    openapiFields.add("Score");
    openapiFields.add("AutomaticFail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MinValue");
    openapiRequiredFields.add("MaxValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluationFormNumericQuestionOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluationFormNumericQuestionOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluationFormNumericQuestionOption is not found in the empty JSON string", EvaluationFormNumericQuestionOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluationFormNumericQuestionOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluationFormNumericQuestionOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EvaluationFormNumericQuestionOption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `MinValue`
      Integer.validateJsonElement(jsonObj.get("MinValue"));
      // validate the required field `MaxValue`
      Integer.validateJsonElement(jsonObj.get("MaxValue"));
      // validate the optional field `Score`
      if (jsonObj.get("Score") != null && !jsonObj.get("Score").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Score"));
      }
      // validate the optional field `AutomaticFail`
      if (jsonObj.get("AutomaticFail") != null && !jsonObj.get("AutomaticFail").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutomaticFail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluationFormNumericQuestionOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluationFormNumericQuestionOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluationFormNumericQuestionOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluationFormNumericQuestionOption.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluationFormNumericQuestionOption>() {
           @Override
           public void write(JsonWriter out, EvaluationFormNumericQuestionOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluationFormNumericQuestionOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluationFormNumericQuestionOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluationFormNumericQuestionOption
   * @throws IOException if the JSON string is invalid with respect to EvaluationFormNumericQuestionOption
   */
  public static EvaluationFormNumericQuestionOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluationFormNumericQuestionOption.class);
  }

  /**
   * Convert an instance of EvaluationFormNumericQuestionOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

