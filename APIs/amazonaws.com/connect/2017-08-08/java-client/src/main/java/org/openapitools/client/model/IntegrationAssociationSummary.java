/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IntegrationType;
import org.openapitools.client.model.SourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains summary information about the associated AppIntegrations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegrationAssociationSummary {
  public static final String SERIALIZED_NAME_INTEGRATION_ASSOCIATION_ID = "IntegrationAssociationId";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_ASSOCIATION_ID)
  private String integrationAssociationId;

  public static final String SERIALIZED_NAME_INTEGRATION_ASSOCIATION_ARN = "IntegrationAssociationArn";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_ASSOCIATION_ARN)
  private String integrationAssociationArn;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INTEGRATION_TYPE = "IntegrationType";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_TYPE)
  private IntegrationType integrationType;

  public static final String SERIALIZED_NAME_INTEGRATION_ARN = "IntegrationArn";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_ARN)
  private String integrationArn;

  public static final String SERIALIZED_NAME_SOURCE_APPLICATION_URL = "SourceApplicationUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_APPLICATION_URL)
  private String sourceApplicationUrl;

  public static final String SERIALIZED_NAME_SOURCE_APPLICATION_NAME = "SourceApplicationName";
  @SerializedName(SERIALIZED_NAME_SOURCE_APPLICATION_NAME)
  private String sourceApplicationName;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceType sourceType;

  public IntegrationAssociationSummary() {
  }

  public IntegrationAssociationSummary integrationAssociationId(String integrationAssociationId) {
    this.integrationAssociationId = integrationAssociationId;
    return this;
  }

  /**
   * Get integrationAssociationId
   * @return integrationAssociationId
   */
  @javax.annotation.Nullable
  public String getIntegrationAssociationId() {
    return integrationAssociationId;
  }

  public void setIntegrationAssociationId(String integrationAssociationId) {
    this.integrationAssociationId = integrationAssociationId;
  }


  public IntegrationAssociationSummary integrationAssociationArn(String integrationAssociationArn) {
    this.integrationAssociationArn = integrationAssociationArn;
    return this;
  }

  /**
   * Get integrationAssociationArn
   * @return integrationAssociationArn
   */
  @javax.annotation.Nullable
  public String getIntegrationAssociationArn() {
    return integrationAssociationArn;
  }

  public void setIntegrationAssociationArn(String integrationAssociationArn) {
    this.integrationAssociationArn = integrationAssociationArn;
  }


  public IntegrationAssociationSummary instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public IntegrationAssociationSummary integrationType(IntegrationType integrationType) {
    this.integrationType = integrationType;
    return this;
  }

  /**
   * Get integrationType
   * @return integrationType
   */
  @javax.annotation.Nullable
  public IntegrationType getIntegrationType() {
    return integrationType;
  }

  public void setIntegrationType(IntegrationType integrationType) {
    this.integrationType = integrationType;
  }


  public IntegrationAssociationSummary integrationArn(String integrationArn) {
    this.integrationArn = integrationArn;
    return this;
  }

  /**
   * Get integrationArn
   * @return integrationArn
   */
  @javax.annotation.Nullable
  public String getIntegrationArn() {
    return integrationArn;
  }

  public void setIntegrationArn(String integrationArn) {
    this.integrationArn = integrationArn;
  }


  public IntegrationAssociationSummary sourceApplicationUrl(String sourceApplicationUrl) {
    this.sourceApplicationUrl = sourceApplicationUrl;
    return this;
  }

  /**
   * Get sourceApplicationUrl
   * @return sourceApplicationUrl
   */
  @javax.annotation.Nullable
  public String getSourceApplicationUrl() {
    return sourceApplicationUrl;
  }

  public void setSourceApplicationUrl(String sourceApplicationUrl) {
    this.sourceApplicationUrl = sourceApplicationUrl;
  }


  public IntegrationAssociationSummary sourceApplicationName(String sourceApplicationName) {
    this.sourceApplicationName = sourceApplicationName;
    return this;
  }

  /**
   * Get sourceApplicationName
   * @return sourceApplicationName
   */
  @javax.annotation.Nullable
  public String getSourceApplicationName() {
    return sourceApplicationName;
  }

  public void setSourceApplicationName(String sourceApplicationName) {
    this.sourceApplicationName = sourceApplicationName;
  }


  public IntegrationAssociationSummary sourceType(SourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceType getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceType sourceType) {
    this.sourceType = sourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationAssociationSummary integrationAssociationSummary = (IntegrationAssociationSummary) o;
    return Objects.equals(this.integrationAssociationId, integrationAssociationSummary.integrationAssociationId) &&
        Objects.equals(this.integrationAssociationArn, integrationAssociationSummary.integrationAssociationArn) &&
        Objects.equals(this.instanceId, integrationAssociationSummary.instanceId) &&
        Objects.equals(this.integrationType, integrationAssociationSummary.integrationType) &&
        Objects.equals(this.integrationArn, integrationAssociationSummary.integrationArn) &&
        Objects.equals(this.sourceApplicationUrl, integrationAssociationSummary.sourceApplicationUrl) &&
        Objects.equals(this.sourceApplicationName, integrationAssociationSummary.sourceApplicationName) &&
        Objects.equals(this.sourceType, integrationAssociationSummary.sourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integrationAssociationId, integrationAssociationArn, instanceId, integrationType, integrationArn, sourceApplicationUrl, sourceApplicationName, sourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationAssociationSummary {\n");
    sb.append("    integrationAssociationId: ").append(toIndentedString(integrationAssociationId)).append("\n");
    sb.append("    integrationAssociationArn: ").append(toIndentedString(integrationAssociationArn)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    integrationType: ").append(toIndentedString(integrationType)).append("\n");
    sb.append("    integrationArn: ").append(toIndentedString(integrationArn)).append("\n");
    sb.append("    sourceApplicationUrl: ").append(toIndentedString(sourceApplicationUrl)).append("\n");
    sb.append("    sourceApplicationName: ").append(toIndentedString(sourceApplicationName)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntegrationAssociationId");
    openapiFields.add("IntegrationAssociationArn");
    openapiFields.add("InstanceId");
    openapiFields.add("IntegrationType");
    openapiFields.add("IntegrationArn");
    openapiFields.add("SourceApplicationUrl");
    openapiFields.add("SourceApplicationName");
    openapiFields.add("SourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegrationAssociationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegrationAssociationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationAssociationSummary is not found in the empty JSON string", IntegrationAssociationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegrationAssociationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationAssociationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IntegrationAssociationId`
      if (jsonObj.get("IntegrationAssociationId") != null && !jsonObj.get("IntegrationAssociationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationAssociationId"));
      }
      // validate the optional field `IntegrationAssociationArn`
      if (jsonObj.get("IntegrationAssociationArn") != null && !jsonObj.get("IntegrationAssociationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationAssociationArn"));
      }
      // validate the optional field `InstanceId`
      if (jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceId"));
      }
      // validate the optional field `IntegrationType`
      if (jsonObj.get("IntegrationType") != null && !jsonObj.get("IntegrationType").isJsonNull()) {
        IntegrationType.validateJsonElement(jsonObj.get("IntegrationType"));
      }
      // validate the optional field `IntegrationArn`
      if (jsonObj.get("IntegrationArn") != null && !jsonObj.get("IntegrationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationArn"));
      }
      // validate the optional field `SourceApplicationUrl`
      if (jsonObj.get("SourceApplicationUrl") != null && !jsonObj.get("SourceApplicationUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceApplicationUrl"));
      }
      // validate the optional field `SourceApplicationName`
      if (jsonObj.get("SourceApplicationName") != null && !jsonObj.get("SourceApplicationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceApplicationName"));
      }
      // validate the optional field `SourceType`
      if (jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) {
        SourceType.validateJsonElement(jsonObj.get("SourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationAssociationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationAssociationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationAssociationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationAssociationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationAssociationSummary>() {
           @Override
           public void write(JsonWriter out, IntegrationAssociationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationAssociationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegrationAssociationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegrationAssociationSummary
   * @throws IOException if the JSON string is invalid with respect to IntegrationAssociationSummary
   */
  public static IntegrationAssociationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationAssociationSummary.class);
  }

  /**
   * Convert an instance of IntegrationAssociationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

