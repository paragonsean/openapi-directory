/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Reference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartTaskContactRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartTaskContactRequest {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_PREVIOUS_CONTACT_ID = "PreviousContactId";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_CONTACT_ID)
  private String previousContactId;

  public static final String SERIALIZED_NAME_CONTACT_FLOW_ID = "ContactFlowId";
  @SerializedName(SERIALIZED_NAME_CONTACT_FLOW_ID)
  private String contactFlowId;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REFERENCES = "References";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private Map<String, Reference> references = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "ScheduledTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private OffsetDateTime scheduledTime;

  public static final String SERIALIZED_NAME_TASK_TEMPLATE_ID = "TaskTemplateId";
  @SerializedName(SERIALIZED_NAME_TASK_TEMPLATE_ID)
  private String taskTemplateId;

  public static final String SERIALIZED_NAME_QUICK_CONNECT_ID = "QuickConnectId";
  @SerializedName(SERIALIZED_NAME_QUICK_CONNECT_ID)
  private String quickConnectId;

  public static final String SERIALIZED_NAME_RELATED_CONTACT_ID = "RelatedContactId";
  @SerializedName(SERIALIZED_NAME_RELATED_CONTACT_ID)
  private String relatedContactId;

  public StartTaskContactRequest() {
  }

  public StartTaskContactRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * The identifier of the Amazon Connect instance. You can &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\&quot;&gt;find the instance ID&lt;/a&gt; in the Amazon Resource Name (ARN) of the instance.
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public StartTaskContactRequest previousContactId(String previousContactId) {
    this.previousContactId = previousContactId;
    return this;
  }

  /**
   * The identifier of the previous chat, voice, or task contact. 
   * @return previousContactId
   */
  @javax.annotation.Nullable
  public String getPreviousContactId() {
    return previousContactId;
  }

  public void setPreviousContactId(String previousContactId) {
    this.previousContactId = previousContactId;
  }


  public StartTaskContactRequest contactFlowId(String contactFlowId) {
    this.contactFlowId = contactFlowId;
    return this;
  }

  /**
   * &lt;p&gt;The identifier of the flow for initiating the tasks. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to &lt;b&gt;Routing&lt;/b&gt;, &lt;b&gt;Contact Flows&lt;/b&gt;. Choose the flow. On the flow page, under the name of the flow, choose &lt;b&gt;Show additional flow information&lt;/b&gt;. The ContactFlowId is the last part of the ARN, shown here in bold: &lt;/p&gt; &lt;p&gt;arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/&lt;b&gt;846ec553-a005-41c0-8341-xxxxxxxxxxxx&lt;/b&gt; &lt;/p&gt;
   * @return contactFlowId
   */
  @javax.annotation.Nullable
  public String getContactFlowId() {
    return contactFlowId;
  }

  public void setContactFlowId(String contactFlowId) {
    this.contactFlowId = contactFlowId;
  }


  public StartTaskContactRequest attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public StartTaskContactRequest putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * &lt;p&gt;A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.&lt;/p&gt; &lt;p&gt;There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.&lt;/p&gt;
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public StartTaskContactRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of a task that is shown to an agent in the Contact Control Panel (CCP).
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StartTaskContactRequest references(Map<String, Reference> references) {
    this.references = references;
    return this;
  }

  public StartTaskContactRequest putReferencesItem(String key, Reference referencesItem) {
    if (this.references == null) {
      this.references = new HashMap<>();
    }
    this.references.put(key, referencesItem);
    return this;
  }

  /**
   * A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
   * @return references
   */
  @javax.annotation.Nullable
  public Map<String, Reference> getReferences() {
    return references;
  }

  public void setReferences(Map<String, Reference> references) {
    this.references = references;
  }


  public StartTaskContactRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the task that is shown to an agent in the Contact Control Panel (CCP).
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public StartTaskContactRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\&quot;&gt;Making retries safe with idempotent APIs&lt;/a&gt;.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public StartTaskContactRequest scheduledTime(OffsetDateTime scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * The timestamp, in Unix Epoch seconds format, at which to start running the inbound flow. The scheduled time cannot be in the past. It must be within up to 6 days in future. 
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(OffsetDateTime scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public StartTaskContactRequest taskTemplateId(String taskTemplateId) {
    this.taskTemplateId = taskTemplateId;
    return this;
  }

  /**
   * A unique identifier for the task template.
   * @return taskTemplateId
   */
  @javax.annotation.Nullable
  public String getTaskTemplateId() {
    return taskTemplateId;
  }

  public void setTaskTemplateId(String taskTemplateId) {
    this.taskTemplateId = taskTemplateId;
  }


  public StartTaskContactRequest quickConnectId(String quickConnectId) {
    this.quickConnectId = quickConnectId;
    return this;
  }

  /**
   * The identifier for the quick connect.
   * @return quickConnectId
   */
  @javax.annotation.Nullable
  public String getQuickConnectId() {
    return quickConnectId;
  }

  public void setQuickConnectId(String quickConnectId) {
    this.quickConnectId = quickConnectId;
  }


  public StartTaskContactRequest relatedContactId(String relatedContactId) {
    this.relatedContactId = relatedContactId;
    return this;
  }

  /**
   * The contactId that is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/tasks.html#linked-tasks\&quot;&gt;related&lt;/a&gt; to this contact.
   * @return relatedContactId
   */
  @javax.annotation.Nullable
  public String getRelatedContactId() {
    return relatedContactId;
  }

  public void setRelatedContactId(String relatedContactId) {
    this.relatedContactId = relatedContactId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTaskContactRequest startTaskContactRequest = (StartTaskContactRequest) o;
    return Objects.equals(this.instanceId, startTaskContactRequest.instanceId) &&
        Objects.equals(this.previousContactId, startTaskContactRequest.previousContactId) &&
        Objects.equals(this.contactFlowId, startTaskContactRequest.contactFlowId) &&
        Objects.equals(this.attributes, startTaskContactRequest.attributes) &&
        Objects.equals(this.name, startTaskContactRequest.name) &&
        Objects.equals(this.references, startTaskContactRequest.references) &&
        Objects.equals(this.description, startTaskContactRequest.description) &&
        Objects.equals(this.clientToken, startTaskContactRequest.clientToken) &&
        Objects.equals(this.scheduledTime, startTaskContactRequest.scheduledTime) &&
        Objects.equals(this.taskTemplateId, startTaskContactRequest.taskTemplateId) &&
        Objects.equals(this.quickConnectId, startTaskContactRequest.quickConnectId) &&
        Objects.equals(this.relatedContactId, startTaskContactRequest.relatedContactId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, previousContactId, contactFlowId, attributes, name, references, description, clientToken, scheduledTime, taskTemplateId, quickConnectId, relatedContactId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTaskContactRequest {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    previousContactId: ").append(toIndentedString(previousContactId)).append("\n");
    sb.append("    contactFlowId: ").append(toIndentedString(contactFlowId)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    taskTemplateId: ").append(toIndentedString(taskTemplateId)).append("\n");
    sb.append("    quickConnectId: ").append(toIndentedString(quickConnectId)).append("\n");
    sb.append("    relatedContactId: ").append(toIndentedString(relatedContactId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstanceId");
    openapiFields.add("PreviousContactId");
    openapiFields.add("ContactFlowId");
    openapiFields.add("Attributes");
    openapiFields.add("Name");
    openapiFields.add("References");
    openapiFields.add("Description");
    openapiFields.add("ClientToken");
    openapiFields.add("ScheduledTime");
    openapiFields.add("TaskTemplateId");
    openapiFields.add("QuickConnectId");
    openapiFields.add("RelatedContactId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InstanceId");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartTaskContactRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartTaskContactRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartTaskContactRequest is not found in the empty JSON string", StartTaskContactRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartTaskContactRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartTaskContactRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartTaskContactRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("InstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceId").toString()));
      }
      if ((jsonObj.get("PreviousContactId") != null && !jsonObj.get("PreviousContactId").isJsonNull()) && !jsonObj.get("PreviousContactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreviousContactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreviousContactId").toString()));
      }
      if ((jsonObj.get("ContactFlowId") != null && !jsonObj.get("ContactFlowId").isJsonNull()) && !jsonObj.get("ContactFlowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactFlowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactFlowId").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if ((jsonObj.get("TaskTemplateId") != null && !jsonObj.get("TaskTemplateId").isJsonNull()) && !jsonObj.get("TaskTemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskTemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskTemplateId").toString()));
      }
      if ((jsonObj.get("QuickConnectId") != null && !jsonObj.get("QuickConnectId").isJsonNull()) && !jsonObj.get("QuickConnectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuickConnectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuickConnectId").toString()));
      }
      if ((jsonObj.get("RelatedContactId") != null && !jsonObj.get("RelatedContactId").isJsonNull()) && !jsonObj.get("RelatedContactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RelatedContactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RelatedContactId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartTaskContactRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartTaskContactRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartTaskContactRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartTaskContactRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartTaskContactRequest>() {
           @Override
           public void write(JsonWriter out, StartTaskContactRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartTaskContactRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartTaskContactRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartTaskContactRequest
   * @throws IOException if the JSON string is invalid with respect to StartTaskContactRequest
   */
  public static StartTaskContactRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartTaskContactRequest.class);
  }

  /**
   * Convert an instance of StartTaskContactRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

