/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets NumericQuestionPropertyAutomationLabel
 */
@JsonAdapter(NumericQuestionPropertyAutomationLabel.Adapter.class)
public enum NumericQuestionPropertyAutomationLabel {
  
  OVERALL_CUSTOMER_SENTIMENT_SCORE("OVERALL_CUSTOMER_SENTIMENT_SCORE"),
  
  OVERALL_AGENT_SENTIMENT_SCORE("OVERALL_AGENT_SENTIMENT_SCORE"),
  
  NON_TALK_TIME("NON_TALK_TIME"),
  
  NON_TALK_TIME_PERCENTAGE("NON_TALK_TIME_PERCENTAGE"),
  
  NUMBER_OF_INTERRUPTIONS("NUMBER_OF_INTERRUPTIONS"),
  
  CONTACT_DURATION("CONTACT_DURATION"),
  
  AGENT_INTERACTION_DURATION("AGENT_INTERACTION_DURATION"),
  
  CUSTOMER_HOLD_TIME("CUSTOMER_HOLD_TIME");

  private String value;

  NumericQuestionPropertyAutomationLabel(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static NumericQuestionPropertyAutomationLabel fromValue(String value) {
    for (NumericQuestionPropertyAutomationLabel b : NumericQuestionPropertyAutomationLabel.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<NumericQuestionPropertyAutomationLabel> {
    @Override
    public void write(final JsonWriter jsonWriter, final NumericQuestionPropertyAutomationLabel enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public NumericQuestionPropertyAutomationLabel read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return NumericQuestionPropertyAutomationLabel.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    NumericQuestionPropertyAutomationLabel.fromValue(value);
  }
}

