/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HierarchyPathLevelFive;
import org.openapitools.client.model.HierarchyPathLevelFour;
import org.openapitools.client.model.HierarchyPathLevelOne;
import org.openapitools.client.model.HierarchyPathLevelThree;
import org.openapitools.client.model.HierarchyPathLevelTwo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the levels of a hierarchy group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HierarchyPath {
  public static final String SERIALIZED_NAME_LEVEL_ONE = "LevelOne";
  @SerializedName(SERIALIZED_NAME_LEVEL_ONE)
  private HierarchyPathLevelOne levelOne;

  public static final String SERIALIZED_NAME_LEVEL_TWO = "LevelTwo";
  @SerializedName(SERIALIZED_NAME_LEVEL_TWO)
  private HierarchyPathLevelTwo levelTwo;

  public static final String SERIALIZED_NAME_LEVEL_THREE = "LevelThree";
  @SerializedName(SERIALIZED_NAME_LEVEL_THREE)
  private HierarchyPathLevelThree levelThree;

  public static final String SERIALIZED_NAME_LEVEL_FOUR = "LevelFour";
  @SerializedName(SERIALIZED_NAME_LEVEL_FOUR)
  private HierarchyPathLevelFour levelFour;

  public static final String SERIALIZED_NAME_LEVEL_FIVE = "LevelFive";
  @SerializedName(SERIALIZED_NAME_LEVEL_FIVE)
  private HierarchyPathLevelFive levelFive;

  public HierarchyPath() {
  }

  public HierarchyPath levelOne(HierarchyPathLevelOne levelOne) {
    this.levelOne = levelOne;
    return this;
  }

  /**
   * Get levelOne
   * @return levelOne
   */
  @javax.annotation.Nullable
  public HierarchyPathLevelOne getLevelOne() {
    return levelOne;
  }

  public void setLevelOne(HierarchyPathLevelOne levelOne) {
    this.levelOne = levelOne;
  }


  public HierarchyPath levelTwo(HierarchyPathLevelTwo levelTwo) {
    this.levelTwo = levelTwo;
    return this;
  }

  /**
   * Get levelTwo
   * @return levelTwo
   */
  @javax.annotation.Nullable
  public HierarchyPathLevelTwo getLevelTwo() {
    return levelTwo;
  }

  public void setLevelTwo(HierarchyPathLevelTwo levelTwo) {
    this.levelTwo = levelTwo;
  }


  public HierarchyPath levelThree(HierarchyPathLevelThree levelThree) {
    this.levelThree = levelThree;
    return this;
  }

  /**
   * Get levelThree
   * @return levelThree
   */
  @javax.annotation.Nullable
  public HierarchyPathLevelThree getLevelThree() {
    return levelThree;
  }

  public void setLevelThree(HierarchyPathLevelThree levelThree) {
    this.levelThree = levelThree;
  }


  public HierarchyPath levelFour(HierarchyPathLevelFour levelFour) {
    this.levelFour = levelFour;
    return this;
  }

  /**
   * Get levelFour
   * @return levelFour
   */
  @javax.annotation.Nullable
  public HierarchyPathLevelFour getLevelFour() {
    return levelFour;
  }

  public void setLevelFour(HierarchyPathLevelFour levelFour) {
    this.levelFour = levelFour;
  }


  public HierarchyPath levelFive(HierarchyPathLevelFive levelFive) {
    this.levelFive = levelFive;
    return this;
  }

  /**
   * Get levelFive
   * @return levelFive
   */
  @javax.annotation.Nullable
  public HierarchyPathLevelFive getLevelFive() {
    return levelFive;
  }

  public void setLevelFive(HierarchyPathLevelFive levelFive) {
    this.levelFive = levelFive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HierarchyPath hierarchyPath = (HierarchyPath) o;
    return Objects.equals(this.levelOne, hierarchyPath.levelOne) &&
        Objects.equals(this.levelTwo, hierarchyPath.levelTwo) &&
        Objects.equals(this.levelThree, hierarchyPath.levelThree) &&
        Objects.equals(this.levelFour, hierarchyPath.levelFour) &&
        Objects.equals(this.levelFive, hierarchyPath.levelFive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(levelOne, levelTwo, levelThree, levelFour, levelFive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HierarchyPath {\n");
    sb.append("    levelOne: ").append(toIndentedString(levelOne)).append("\n");
    sb.append("    levelTwo: ").append(toIndentedString(levelTwo)).append("\n");
    sb.append("    levelThree: ").append(toIndentedString(levelThree)).append("\n");
    sb.append("    levelFour: ").append(toIndentedString(levelFour)).append("\n");
    sb.append("    levelFive: ").append(toIndentedString(levelFive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LevelOne");
    openapiFields.add("LevelTwo");
    openapiFields.add("LevelThree");
    openapiFields.add("LevelFour");
    openapiFields.add("LevelFive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HierarchyPath
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HierarchyPath.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HierarchyPath is not found in the empty JSON string", HierarchyPath.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HierarchyPath.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HierarchyPath` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LevelOne`
      if (jsonObj.get("LevelOne") != null && !jsonObj.get("LevelOne").isJsonNull()) {
        HierarchyPathLevelOne.validateJsonElement(jsonObj.get("LevelOne"));
      }
      // validate the optional field `LevelTwo`
      if (jsonObj.get("LevelTwo") != null && !jsonObj.get("LevelTwo").isJsonNull()) {
        HierarchyPathLevelTwo.validateJsonElement(jsonObj.get("LevelTwo"));
      }
      // validate the optional field `LevelThree`
      if (jsonObj.get("LevelThree") != null && !jsonObj.get("LevelThree").isJsonNull()) {
        HierarchyPathLevelThree.validateJsonElement(jsonObj.get("LevelThree"));
      }
      // validate the optional field `LevelFour`
      if (jsonObj.get("LevelFour") != null && !jsonObj.get("LevelFour").isJsonNull()) {
        HierarchyPathLevelFour.validateJsonElement(jsonObj.get("LevelFour"));
      }
      // validate the optional field `LevelFive`
      if (jsonObj.get("LevelFive") != null && !jsonObj.get("LevelFive").isJsonNull()) {
        HierarchyPathLevelFive.validateJsonElement(jsonObj.get("LevelFive"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HierarchyPath.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HierarchyPath' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HierarchyPath> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HierarchyPath.class));

       return (TypeAdapter<T>) new TypeAdapter<HierarchyPath>() {
           @Override
           public void write(JsonWriter out, HierarchyPath value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HierarchyPath read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HierarchyPath given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HierarchyPath
   * @throws IOException if the JSON string is invalid with respect to HierarchyPath
   */
  public static HierarchyPath fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HierarchyPath.class);
  }

  /**
   * Convert an instance of HierarchyPath to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

