/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PhoneNumberCountryCode;
import org.openapitools.client.model.PhoneNumberType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListPhoneNumbersV2Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListPhoneNumbersV2Request {
  public static final String SERIALIZED_NAME_TARGET_ARN = "TargetArn";
  @SerializedName(SERIALIZED_NAME_TARGET_ARN)
  private String targetArn;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_COUNTRY_CODES = "PhoneNumberCountryCodes";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_COUNTRY_CODES)
  private List<PhoneNumberCountryCode> phoneNumberCountryCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBER_TYPES = "PhoneNumberTypes";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_TYPES)
  private List<PhoneNumberType> phoneNumberTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBER_PREFIX = "PhoneNumberPrefix";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_PREFIX)
  private String phoneNumberPrefix;

  public ListPhoneNumbersV2Request() {
  }

  public ListPhoneNumbersV2Request targetArn(String targetArn) {
    this.targetArn = targetArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to. If &lt;code&gt;TargetArn&lt;/code&gt; input is not provided, this API lists numbers claimed to all the Amazon Connect instances belonging to your account in the same Amazon Web Services Region as the request.
   * @return targetArn
   */
  @javax.annotation.Nullable
  public String getTargetArn() {
    return targetArn;
  }

  public void setTargetArn(String targetArn) {
    this.targetArn = targetArn;
  }


  public ListPhoneNumbersV2Request maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return per page.
   * minimum: 1
   * maximum: 1000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListPhoneNumbersV2Request nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListPhoneNumbersV2Request phoneNumberCountryCodes(List<PhoneNumberCountryCode> phoneNumberCountryCodes) {
    this.phoneNumberCountryCodes = phoneNumberCountryCodes;
    return this;
  }

  public ListPhoneNumbersV2Request addPhoneNumberCountryCodesItem(PhoneNumberCountryCode phoneNumberCountryCodesItem) {
    if (this.phoneNumberCountryCodes == null) {
      this.phoneNumberCountryCodes = new ArrayList<>();
    }
    this.phoneNumberCountryCodes.add(phoneNumberCountryCodesItem);
    return this;
  }

  /**
   * The ISO country code.
   * @return phoneNumberCountryCodes
   */
  @javax.annotation.Nullable
  public List<PhoneNumberCountryCode> getPhoneNumberCountryCodes() {
    return phoneNumberCountryCodes;
  }

  public void setPhoneNumberCountryCodes(List<PhoneNumberCountryCode> phoneNumberCountryCodes) {
    this.phoneNumberCountryCodes = phoneNumberCountryCodes;
  }


  public ListPhoneNumbersV2Request phoneNumberTypes(List<PhoneNumberType> phoneNumberTypes) {
    this.phoneNumberTypes = phoneNumberTypes;
    return this;
  }

  public ListPhoneNumbersV2Request addPhoneNumberTypesItem(PhoneNumberType phoneNumberTypesItem) {
    if (this.phoneNumberTypes == null) {
      this.phoneNumberTypes = new ArrayList<>();
    }
    this.phoneNumberTypes.add(phoneNumberTypesItem);
    return this;
  }

  /**
   * The type of phone number.
   * @return phoneNumberTypes
   */
  @javax.annotation.Nullable
  public List<PhoneNumberType> getPhoneNumberTypes() {
    return phoneNumberTypes;
  }

  public void setPhoneNumberTypes(List<PhoneNumberType> phoneNumberTypes) {
    this.phoneNumberTypes = phoneNumberTypes;
  }


  public ListPhoneNumbersV2Request phoneNumberPrefix(String phoneNumberPrefix) {
    this.phoneNumberPrefix = phoneNumberPrefix;
    return this;
  }

  /**
   * The prefix of the phone number. If provided, it must contain &lt;code&gt;+&lt;/code&gt; as part of the country code.
   * @return phoneNumberPrefix
   */
  @javax.annotation.Nullable
  public String getPhoneNumberPrefix() {
    return phoneNumberPrefix;
  }

  public void setPhoneNumberPrefix(String phoneNumberPrefix) {
    this.phoneNumberPrefix = phoneNumberPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPhoneNumbersV2Request listPhoneNumbersV2Request = (ListPhoneNumbersV2Request) o;
    return Objects.equals(this.targetArn, listPhoneNumbersV2Request.targetArn) &&
        Objects.equals(this.maxResults, listPhoneNumbersV2Request.maxResults) &&
        Objects.equals(this.nextToken, listPhoneNumbersV2Request.nextToken) &&
        Objects.equals(this.phoneNumberCountryCodes, listPhoneNumbersV2Request.phoneNumberCountryCodes) &&
        Objects.equals(this.phoneNumberTypes, listPhoneNumbersV2Request.phoneNumberTypes) &&
        Objects.equals(this.phoneNumberPrefix, listPhoneNumbersV2Request.phoneNumberPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetArn, maxResults, nextToken, phoneNumberCountryCodes, phoneNumberTypes, phoneNumberPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPhoneNumbersV2Request {\n");
    sb.append("    targetArn: ").append(toIndentedString(targetArn)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    phoneNumberCountryCodes: ").append(toIndentedString(phoneNumberCountryCodes)).append("\n");
    sb.append("    phoneNumberTypes: ").append(toIndentedString(phoneNumberTypes)).append("\n");
    sb.append("    phoneNumberPrefix: ").append(toIndentedString(phoneNumberPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TargetArn");
    openapiFields.add("MaxResults");
    openapiFields.add("NextToken");
    openapiFields.add("PhoneNumberCountryCodes");
    openapiFields.add("PhoneNumberTypes");
    openapiFields.add("PhoneNumberPrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPhoneNumbersV2Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPhoneNumbersV2Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPhoneNumbersV2Request is not found in the empty JSON string", ListPhoneNumbersV2Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPhoneNumbersV2Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPhoneNumbersV2Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("TargetArn") != null && !jsonObj.get("TargetArn").isJsonNull()) && !jsonObj.get("TargetArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetArn").toString()));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PhoneNumberCountryCodes") != null && !jsonObj.get("PhoneNumberCountryCodes").isJsonNull() && !jsonObj.get("PhoneNumberCountryCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumberCountryCodes` to be an array in the JSON string but got `%s`", jsonObj.get("PhoneNumberCountryCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PhoneNumberTypes") != null && !jsonObj.get("PhoneNumberTypes").isJsonNull() && !jsonObj.get("PhoneNumberTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumberTypes` to be an array in the JSON string but got `%s`", jsonObj.get("PhoneNumberTypes").toString()));
      }
      if ((jsonObj.get("PhoneNumberPrefix") != null && !jsonObj.get("PhoneNumberPrefix").isJsonNull()) && !jsonObj.get("PhoneNumberPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumberPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumberPrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPhoneNumbersV2Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPhoneNumbersV2Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPhoneNumbersV2Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPhoneNumbersV2Request.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPhoneNumbersV2Request>() {
           @Override
           public void write(JsonWriter out, ListPhoneNumbersV2Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPhoneNumbersV2Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPhoneNumbersV2Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPhoneNumbersV2Request
   * @throws IOException if the JSON string is invalid with respect to ListPhoneNumbersV2Request
   */
  public static ListPhoneNumbersV2Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPhoneNumbersV2Request.class);
  }

  /**
   * Convert an instance of ListPhoneNumbersV2Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

