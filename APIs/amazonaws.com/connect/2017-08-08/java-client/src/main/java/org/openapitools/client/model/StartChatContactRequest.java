/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.StartChatContactRequestInitialMessage;
import org.openapitools.client.model.StartChatContactRequestParticipantDetails;
import org.openapitools.client.model.StartChatContactRequestPersistentChat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartChatContactRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartChatContactRequest {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_CONTACT_FLOW_ID = "ContactFlowId";
  @SerializedName(SERIALIZED_NAME_CONTACT_FLOW_ID)
  private String contactFlowId;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_PARTICIPANT_DETAILS = "ParticipantDetails";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_DETAILS)
  private StartChatContactRequestParticipantDetails participantDetails;

  public static final String SERIALIZED_NAME_INITIAL_MESSAGE = "InitialMessage";
  @SerializedName(SERIALIZED_NAME_INITIAL_MESSAGE)
  private StartChatContactRequestInitialMessage initialMessage;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_CHAT_DURATION_IN_MINUTES = "ChatDurationInMinutes";
  @SerializedName(SERIALIZED_NAME_CHAT_DURATION_IN_MINUTES)
  private Integer chatDurationInMinutes;

  public static final String SERIALIZED_NAME_SUPPORTED_MESSAGING_CONTENT_TYPES = "SupportedMessagingContentTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_MESSAGING_CONTENT_TYPES)
  private List<String> supportedMessagingContentTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSISTENT_CHAT = "PersistentChat";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_CHAT)
  private StartChatContactRequestPersistentChat persistentChat;

  public static final String SERIALIZED_NAME_RELATED_CONTACT_ID = "RelatedContactId";
  @SerializedName(SERIALIZED_NAME_RELATED_CONTACT_ID)
  private String relatedContactId;

  public StartChatContactRequest() {
  }

  public StartChatContactRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * The identifier of the Amazon Connect instance. You can &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\&quot;&gt;find the instance ID&lt;/a&gt; in the Amazon Resource Name (ARN) of the instance.
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public StartChatContactRequest contactFlowId(String contactFlowId) {
    this.contactFlowId = contactFlowId;
    return this;
  }

  /**
   * &lt;p&gt;The identifier of the flow for initiating the chat. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to &lt;b&gt;Routing&lt;/b&gt;, &lt;b&gt;Contact Flows&lt;/b&gt;. Choose the flow. On the flow page, under the name of the flow, choose &lt;b&gt;Show additional flow information&lt;/b&gt;. The ContactFlowId is the last part of the ARN, shown here in bold: &lt;/p&gt; &lt;p&gt;arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/&lt;b&gt;846ec553-a005-41c0-8341-xxxxxxxxxxxx&lt;/b&gt; &lt;/p&gt;
   * @return contactFlowId
   */
  @javax.annotation.Nonnull
  public String getContactFlowId() {
    return contactFlowId;
  }

  public void setContactFlowId(String contactFlowId) {
    this.contactFlowId = contactFlowId;
  }


  public StartChatContactRequest attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public StartChatContactRequest putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * &lt;p&gt;A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows just like any other contact attributes. &lt;/p&gt; &lt;p&gt;There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.&lt;/p&gt;
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public StartChatContactRequest participantDetails(StartChatContactRequestParticipantDetails participantDetails) {
    this.participantDetails = participantDetails;
    return this;
  }

  /**
   * Get participantDetails
   * @return participantDetails
   */
  @javax.annotation.Nonnull
  public StartChatContactRequestParticipantDetails getParticipantDetails() {
    return participantDetails;
  }

  public void setParticipantDetails(StartChatContactRequestParticipantDetails participantDetails) {
    this.participantDetails = participantDetails;
  }


  public StartChatContactRequest initialMessage(StartChatContactRequestInitialMessage initialMessage) {
    this.initialMessage = initialMessage;
    return this;
  }

  /**
   * Get initialMessage
   * @return initialMessage
   */
  @javax.annotation.Nullable
  public StartChatContactRequestInitialMessage getInitialMessage() {
    return initialMessage;
  }

  public void setInitialMessage(StartChatContactRequestInitialMessage initialMessage) {
    this.initialMessage = initialMessage;
  }


  public StartChatContactRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\&quot;&gt;Making retries safe with idempotent APIs&lt;/a&gt;.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public StartChatContactRequest chatDurationInMinutes(Integer chatDurationInMinutes) {
    this.chatDurationInMinutes = chatDurationInMinutes;
    return this;
  }

  /**
   * The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).
   * minimum: 60
   * maximum: 10080
   * @return chatDurationInMinutes
   */
  @javax.annotation.Nullable
  public Integer getChatDurationInMinutes() {
    return chatDurationInMinutes;
  }

  public void setChatDurationInMinutes(Integer chatDurationInMinutes) {
    this.chatDurationInMinutes = chatDurationInMinutes;
  }


  public StartChatContactRequest supportedMessagingContentTypes(List<String> supportedMessagingContentTypes) {
    this.supportedMessagingContentTypes = supportedMessagingContentTypes;
    return this;
  }

  public StartChatContactRequest addSupportedMessagingContentTypesItem(String supportedMessagingContentTypesItem) {
    if (this.supportedMessagingContentTypes == null) {
      this.supportedMessagingContentTypes = new ArrayList<>();
    }
    this.supportedMessagingContentTypes.add(supportedMessagingContentTypesItem);
    return this;
  }

  /**
   * &lt;p&gt;The supported chat message content types. Supported types are &lt;code&gt;text/plain&lt;/code&gt;, &lt;code&gt;text/markdown&lt;/code&gt;, &lt;code&gt;application/json&lt;/code&gt;, &lt;code&gt;application/vnd.amazonaws.connect.message.interactive&lt;/code&gt;, and &lt;code&gt;application/vnd.amazonaws.connect.message.interactive.response&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Content types must always contain &lt;code&gt;text/plain&lt;/code&gt;. You can then put any other supported type in the list. For example, all the following lists are valid because they contain &lt;code&gt;text/plain&lt;/code&gt;: &lt;code&gt;[text/plain, text/markdown, application/json]&lt;/code&gt;, &lt;code&gt;[text/markdown, text/plain]&lt;/code&gt;, &lt;code&gt;[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response]&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The type &lt;code&gt;application/vnd.amazonaws.connect.message.interactive&lt;/code&gt; is required to use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/show-view-block.html\&quot;&gt;Show view&lt;/a&gt; flow block.&lt;/p&gt; &lt;/note&gt;
   * @return supportedMessagingContentTypes
   */
  @javax.annotation.Nullable
  public List<String> getSupportedMessagingContentTypes() {
    return supportedMessagingContentTypes;
  }

  public void setSupportedMessagingContentTypes(List<String> supportedMessagingContentTypes) {
    this.supportedMessagingContentTypes = supportedMessagingContentTypes;
  }


  public StartChatContactRequest persistentChat(StartChatContactRequestPersistentChat persistentChat) {
    this.persistentChat = persistentChat;
    return this;
  }

  /**
   * Get persistentChat
   * @return persistentChat
   */
  @javax.annotation.Nullable
  public StartChatContactRequestPersistentChat getPersistentChat() {
    return persistentChat;
  }

  public void setPersistentChat(StartChatContactRequestPersistentChat persistentChat) {
    this.persistentChat = persistentChat;
  }


  public StartChatContactRequest relatedContactId(String relatedContactId) {
    this.relatedContactId = relatedContactId;
    return this;
  }

  /**
   * &lt;p&gt;The unique identifier for an Amazon Connect contact. This identifier is related to the chat starting.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot provide data for both RelatedContactId and PersistentChat. &lt;/p&gt; &lt;/note&gt;
   * @return relatedContactId
   */
  @javax.annotation.Nullable
  public String getRelatedContactId() {
    return relatedContactId;
  }

  public void setRelatedContactId(String relatedContactId) {
    this.relatedContactId = relatedContactId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartChatContactRequest startChatContactRequest = (StartChatContactRequest) o;
    return Objects.equals(this.instanceId, startChatContactRequest.instanceId) &&
        Objects.equals(this.contactFlowId, startChatContactRequest.contactFlowId) &&
        Objects.equals(this.attributes, startChatContactRequest.attributes) &&
        Objects.equals(this.participantDetails, startChatContactRequest.participantDetails) &&
        Objects.equals(this.initialMessage, startChatContactRequest.initialMessage) &&
        Objects.equals(this.clientToken, startChatContactRequest.clientToken) &&
        Objects.equals(this.chatDurationInMinutes, startChatContactRequest.chatDurationInMinutes) &&
        Objects.equals(this.supportedMessagingContentTypes, startChatContactRequest.supportedMessagingContentTypes) &&
        Objects.equals(this.persistentChat, startChatContactRequest.persistentChat) &&
        Objects.equals(this.relatedContactId, startChatContactRequest.relatedContactId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, contactFlowId, attributes, participantDetails, initialMessage, clientToken, chatDurationInMinutes, supportedMessagingContentTypes, persistentChat, relatedContactId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartChatContactRequest {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    contactFlowId: ").append(toIndentedString(contactFlowId)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    participantDetails: ").append(toIndentedString(participantDetails)).append("\n");
    sb.append("    initialMessage: ").append(toIndentedString(initialMessage)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    chatDurationInMinutes: ").append(toIndentedString(chatDurationInMinutes)).append("\n");
    sb.append("    supportedMessagingContentTypes: ").append(toIndentedString(supportedMessagingContentTypes)).append("\n");
    sb.append("    persistentChat: ").append(toIndentedString(persistentChat)).append("\n");
    sb.append("    relatedContactId: ").append(toIndentedString(relatedContactId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstanceId");
    openapiFields.add("ContactFlowId");
    openapiFields.add("Attributes");
    openapiFields.add("ParticipantDetails");
    openapiFields.add("InitialMessage");
    openapiFields.add("ClientToken");
    openapiFields.add("ChatDurationInMinutes");
    openapiFields.add("SupportedMessagingContentTypes");
    openapiFields.add("PersistentChat");
    openapiFields.add("RelatedContactId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InstanceId");
    openapiRequiredFields.add("ContactFlowId");
    openapiRequiredFields.add("ParticipantDetails");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartChatContactRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartChatContactRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartChatContactRequest is not found in the empty JSON string", StartChatContactRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartChatContactRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartChatContactRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartChatContactRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("InstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceId").toString()));
      }
      if (!jsonObj.get("ContactFlowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactFlowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactFlowId").toString()));
      }
      // validate the required field `ParticipantDetails`
      StartChatContactRequestParticipantDetails.validateJsonElement(jsonObj.get("ParticipantDetails"));
      // validate the optional field `InitialMessage`
      if (jsonObj.get("InitialMessage") != null && !jsonObj.get("InitialMessage").isJsonNull()) {
        StartChatContactRequestInitialMessage.validateJsonElement(jsonObj.get("InitialMessage"));
      }
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SupportedMessagingContentTypes") != null && !jsonObj.get("SupportedMessagingContentTypes").isJsonNull() && !jsonObj.get("SupportedMessagingContentTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedMessagingContentTypes` to be an array in the JSON string but got `%s`", jsonObj.get("SupportedMessagingContentTypes").toString()));
      }
      // validate the optional field `PersistentChat`
      if (jsonObj.get("PersistentChat") != null && !jsonObj.get("PersistentChat").isJsonNull()) {
        StartChatContactRequestPersistentChat.validateJsonElement(jsonObj.get("PersistentChat"));
      }
      if ((jsonObj.get("RelatedContactId") != null && !jsonObj.get("RelatedContactId").isJsonNull()) && !jsonObj.get("RelatedContactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RelatedContactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RelatedContactId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartChatContactRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartChatContactRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartChatContactRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartChatContactRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartChatContactRequest>() {
           @Override
           public void write(JsonWriter out, StartChatContactRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartChatContactRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartChatContactRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartChatContactRequest
   * @throws IOException if the JSON string is invalid with respect to StartChatContactRequest
   */
  public static StartChatContactRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartChatContactRequest.class);
  }

  /**
   * Convert an instance of StartChatContactRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

