/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetCurrentMetricDataRequestFilters;
import org.openapitools.client.model.Grouping;
import org.openapitools.client.model.HistoricalMetric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetMetricDataRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetMetricDataRequest {
  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_FILTERS = "Filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private GetCurrentMetricDataRequestFilters filters;

  public static final String SERIALIZED_NAME_GROUPINGS = "Groupings";
  @SerializedName(SERIALIZED_NAME_GROUPINGS)
  private List<Grouping> groupings = new ArrayList<>();

  public static final String SERIALIZED_NAME_HISTORICAL_METRICS = "HistoricalMetrics";
  @SerializedName(SERIALIZED_NAME_HISTORICAL_METRICS)
  private List<HistoricalMetric> historicalMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public GetMetricDataRequest() {
  }

  public GetMetricDataRequest startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * &lt;p&gt;The timestamp, in UNIX Epoch time format, at which to start the reporting interval for the retrieval of historical metrics data. The time must be specified using a multiple of 5 minutes, such as 10:05, 10:10, 10:15.&lt;/p&gt; &lt;p&gt;The start time cannot be earlier than 24 hours before the time of the request. Historical metrics are available only for 24 hours.&lt;/p&gt;
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public GetMetricDataRequest endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * &lt;p&gt;The timestamp, in UNIX Epoch time format, at which to end the reporting interval for the retrieval of historical metrics data. The time must be specified using an interval of 5 minutes, such as 11:00, 11:05, 11:10, and must be later than the start time timestamp.&lt;/p&gt; &lt;p&gt;The time range between the start and end time must be less than 24 hours.&lt;/p&gt;
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public GetMetricDataRequest filters(GetCurrentMetricDataRequestFilters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nonnull
  public GetCurrentMetricDataRequestFilters getFilters() {
    return filters;
  }

  public void setFilters(GetCurrentMetricDataRequestFilters filters) {
    this.filters = filters;
  }


  public GetMetricDataRequest groupings(List<Grouping> groupings) {
    this.groupings = groupings;
    return this;
  }

  public GetMetricDataRequest addGroupingsItem(Grouping groupingsItem) {
    if (this.groupings == null) {
      this.groupings = new ArrayList<>();
    }
    this.groupings.add(groupingsItem);
    return this;
  }

  /**
   * &lt;p&gt;The grouping applied to the metrics returned. For example, when results are grouped by queue, the metrics returned are grouped by queue. The values returned apply to the metrics for each queue rather than aggregated for all queues.&lt;/p&gt; &lt;p&gt;If no grouping is specified, a summary of metrics for all queues is returned.&lt;/p&gt;
   * @return groupings
   */
  @javax.annotation.Nullable
  public List<Grouping> getGroupings() {
    return groupings;
  }

  public void setGroupings(List<Grouping> groupings) {
    this.groupings = groupings;
  }


  public GetMetricDataRequest historicalMetrics(List<HistoricalMetric> historicalMetrics) {
    this.historicalMetrics = historicalMetrics;
    return this;
  }

  public GetMetricDataRequest addHistoricalMetricsItem(HistoricalMetric historicalMetricsItem) {
    if (this.historicalMetrics == null) {
      this.historicalMetrics = new ArrayList<>();
    }
    this.historicalMetrics.add(historicalMetricsItem);
    return this;
  }

  /**
   * &lt;p&gt;The metrics to retrieve. Specify the name, unit, and statistic for each metric. The following historical metrics are available. For a description of each metric, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html\&quot;&gt;Historical Metrics Definitions&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API does not support a contacts incoming metric (there&#39;s no CONTACTS_INCOMING metric missing from the documented list). &lt;/p&gt; &lt;/note&gt; &lt;dl&gt; &lt;dt&gt;ABANDON_TIME&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: SECONDS&lt;/p&gt; &lt;p&gt;Statistic: AVG&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;AFTER_CONTACT_WORK_TIME&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: SECONDS&lt;/p&gt; &lt;p&gt;Statistic: AVG&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;API_CONTACTS_HANDLED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CALLBACK_CONTACTS_HANDLED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_ABANDONED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_AGENT_HUNG_UP_FIRST&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_CONSULTED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_HANDLED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_HANDLED_INCOMING&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_HANDLED_OUTBOUND&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_HOLD_ABANDONS&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_MISSED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_QUEUED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_TRANSFERRED_IN&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_TRANSFERRED_IN_FROM_QUEUE&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_TRANSFERRED_OUT&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CONTACTS_TRANSFERRED_OUT_FROM_QUEUE&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: COUNT&lt;/p&gt; &lt;p&gt;Statistic: SUM&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;HANDLE_TIME&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: SECONDS&lt;/p&gt; &lt;p&gt;Statistic: AVG&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;HOLD_TIME&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: SECONDS&lt;/p&gt; &lt;p&gt;Statistic: AVG&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;INTERACTION_AND_HOLD_TIME&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: SECONDS&lt;/p&gt; &lt;p&gt;Statistic: AVG&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;INTERACTION_TIME&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: SECONDS&lt;/p&gt; &lt;p&gt;Statistic: AVG&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;OCCUPANCY&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: PERCENT&lt;/p&gt; &lt;p&gt;Statistic: AVG&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;QUEUE_ANSWER_TIME&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: SECONDS&lt;/p&gt; &lt;p&gt;Statistic: AVG&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;QUEUED_TIME&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Unit: SECONDS&lt;/p&gt; &lt;p&gt;Statistic: MAX&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;SERVICE_LEVEL&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;You can include up to 20 SERVICE_LEVEL metrics in a request.&lt;/p&gt; &lt;p&gt;Unit: PERCENT&lt;/p&gt; &lt;p&gt;Statistic: AVG&lt;/p&gt; &lt;p&gt;Threshold: For &lt;code&gt;ThresholdValue&lt;/code&gt;, enter any whole number from 1 to 604800 (inclusive), in seconds. For &lt;code&gt;Comparison&lt;/code&gt;, you must enter &lt;code&gt;LT&lt;/code&gt; (for \&quot;Less than\&quot;). &lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
   * @return historicalMetrics
   */
  @javax.annotation.Nonnull
  public List<HistoricalMetric> getHistoricalMetrics() {
    return historicalMetrics;
  }

  public void setHistoricalMetrics(List<HistoricalMetric> historicalMetrics) {
    this.historicalMetrics = historicalMetrics;
  }


  public GetMetricDataRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public GetMetricDataRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return per page.
   * minimum: 1
   * maximum: 100
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMetricDataRequest getMetricDataRequest = (GetMetricDataRequest) o;
    return Objects.equals(this.startTime, getMetricDataRequest.startTime) &&
        Objects.equals(this.endTime, getMetricDataRequest.endTime) &&
        Objects.equals(this.filters, getMetricDataRequest.filters) &&
        Objects.equals(this.groupings, getMetricDataRequest.groupings) &&
        Objects.equals(this.historicalMetrics, getMetricDataRequest.historicalMetrics) &&
        Objects.equals(this.nextToken, getMetricDataRequest.nextToken) &&
        Objects.equals(this.maxResults, getMetricDataRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, endTime, filters, groupings, historicalMetrics, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMetricDataRequest {\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    groupings: ").append(toIndentedString(groupings)).append("\n");
    sb.append("    historicalMetrics: ").append(toIndentedString(historicalMetrics)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("Filters");
    openapiFields.add("Groupings");
    openapiFields.add("HistoricalMetrics");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StartTime");
    openapiRequiredFields.add("EndTime");
    openapiRequiredFields.add("Filters");
    openapiRequiredFields.add("HistoricalMetrics");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetMetricDataRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMetricDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMetricDataRequest is not found in the empty JSON string", GetMetricDataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMetricDataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMetricDataRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetMetricDataRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Filters`
      GetCurrentMetricDataRequestFilters.validateJsonElement(jsonObj.get("Filters"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("Groupings") != null && !jsonObj.get("Groupings").isJsonNull() && !jsonObj.get("Groupings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Groupings` to be an array in the JSON string but got `%s`", jsonObj.get("Groupings").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("HistoricalMetrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `HistoricalMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("HistoricalMetrics").toString()));
      }

      JsonArray jsonArrayhistoricalMetrics = jsonObj.getAsJsonArray("HistoricalMetrics");
      // validate the required field `HistoricalMetrics` (array)
      for (int i = 0; i < jsonArrayhistoricalMetrics.size(); i++) {
        HistoricalMetric.validateJsonElement(jsonArrayhistoricalMetrics.get(i));
      };
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMetricDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMetricDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMetricDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMetricDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMetricDataRequest>() {
           @Override
           public void write(JsonWriter out, GetMetricDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMetricDataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetMetricDataRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetMetricDataRequest
   * @throws IOException if the JSON string is invalid with respect to GetMetricDataRequest
   */
  public static GetMetricDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMetricDataRequest.class);
  }

  /**
   * Convert an instance of GetMetricDataRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

