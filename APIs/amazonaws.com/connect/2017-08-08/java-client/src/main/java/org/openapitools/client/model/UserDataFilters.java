/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetCurrentUserDataRequestFiltersContactFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A filter for the user data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserDataFilters {
  public static final String SERIALIZED_NAME_QUEUES = "Queues";
  @SerializedName(SERIALIZED_NAME_QUEUES)
  private List queues;

  public static final String SERIALIZED_NAME_CONTACT_FILTER = "ContactFilter";
  @SerializedName(SERIALIZED_NAME_CONTACT_FILTER)
  private GetCurrentUserDataRequestFiltersContactFilter contactFilter;

  public static final String SERIALIZED_NAME_ROUTING_PROFILES = "RoutingProfiles";
  @SerializedName(SERIALIZED_NAME_ROUTING_PROFILES)
  private List routingProfiles;

  public static final String SERIALIZED_NAME_AGENTS = "Agents";
  @SerializedName(SERIALIZED_NAME_AGENTS)
  private List agents;

  public static final String SERIALIZED_NAME_USER_HIERARCHY_GROUPS = "UserHierarchyGroups";
  @SerializedName(SERIALIZED_NAME_USER_HIERARCHY_GROUPS)
  private List userHierarchyGroups;

  public UserDataFilters() {
  }

  public UserDataFilters queues(List queues) {
    this.queues = queues;
    return this;
  }

  /**
   * Get queues
   * @return queues
   */
  @javax.annotation.Nullable
  public List getQueues() {
    return queues;
  }

  public void setQueues(List queues) {
    this.queues = queues;
  }


  public UserDataFilters contactFilter(GetCurrentUserDataRequestFiltersContactFilter contactFilter) {
    this.contactFilter = contactFilter;
    return this;
  }

  /**
   * Get contactFilter
   * @return contactFilter
   */
  @javax.annotation.Nullable
  public GetCurrentUserDataRequestFiltersContactFilter getContactFilter() {
    return contactFilter;
  }

  public void setContactFilter(GetCurrentUserDataRequestFiltersContactFilter contactFilter) {
    this.contactFilter = contactFilter;
  }


  public UserDataFilters routingProfiles(List routingProfiles) {
    this.routingProfiles = routingProfiles;
    return this;
  }

  /**
   * Get routingProfiles
   * @return routingProfiles
   */
  @javax.annotation.Nullable
  public List getRoutingProfiles() {
    return routingProfiles;
  }

  public void setRoutingProfiles(List routingProfiles) {
    this.routingProfiles = routingProfiles;
  }


  public UserDataFilters agents(List agents) {
    this.agents = agents;
    return this;
  }

  /**
   * Get agents
   * @return agents
   */
  @javax.annotation.Nullable
  public List getAgents() {
    return agents;
  }

  public void setAgents(List agents) {
    this.agents = agents;
  }


  public UserDataFilters userHierarchyGroups(List userHierarchyGroups) {
    this.userHierarchyGroups = userHierarchyGroups;
    return this;
  }

  /**
   * Get userHierarchyGroups
   * @return userHierarchyGroups
   */
  @javax.annotation.Nullable
  public List getUserHierarchyGroups() {
    return userHierarchyGroups;
  }

  public void setUserHierarchyGroups(List userHierarchyGroups) {
    this.userHierarchyGroups = userHierarchyGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDataFilters userDataFilters = (UserDataFilters) o;
    return Objects.equals(this.queues, userDataFilters.queues) &&
        Objects.equals(this.contactFilter, userDataFilters.contactFilter) &&
        Objects.equals(this.routingProfiles, userDataFilters.routingProfiles) &&
        Objects.equals(this.agents, userDataFilters.agents) &&
        Objects.equals(this.userHierarchyGroups, userDataFilters.userHierarchyGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queues, contactFilter, routingProfiles, agents, userHierarchyGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDataFilters {\n");
    sb.append("    queues: ").append(toIndentedString(queues)).append("\n");
    sb.append("    contactFilter: ").append(toIndentedString(contactFilter)).append("\n");
    sb.append("    routingProfiles: ").append(toIndentedString(routingProfiles)).append("\n");
    sb.append("    agents: ").append(toIndentedString(agents)).append("\n");
    sb.append("    userHierarchyGroups: ").append(toIndentedString(userHierarchyGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Queues");
    openapiFields.add("ContactFilter");
    openapiFields.add("RoutingProfiles");
    openapiFields.add("Agents");
    openapiFields.add("UserHierarchyGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserDataFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserDataFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDataFilters is not found in the empty JSON string", UserDataFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserDataFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDataFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Queues`
      if (jsonObj.get("Queues") != null && !jsonObj.get("Queues").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Queues"));
      }
      // validate the optional field `ContactFilter`
      if (jsonObj.get("ContactFilter") != null && !jsonObj.get("ContactFilter").isJsonNull()) {
        GetCurrentUserDataRequestFiltersContactFilter.validateJsonElement(jsonObj.get("ContactFilter"));
      }
      // validate the optional field `RoutingProfiles`
      if (jsonObj.get("RoutingProfiles") != null && !jsonObj.get("RoutingProfiles").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RoutingProfiles"));
      }
      // validate the optional field `Agents`
      if (jsonObj.get("Agents") != null && !jsonObj.get("Agents").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Agents"));
      }
      // validate the optional field `UserHierarchyGroups`
      if (jsonObj.get("UserHierarchyGroups") != null && !jsonObj.get("UserHierarchyGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UserHierarchyGroups"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDataFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDataFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDataFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDataFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDataFilters>() {
           @Override
           public void write(JsonWriter out, UserDataFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDataFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserDataFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserDataFilters
   * @throws IOException if the JSON string is invalid with respect to UserDataFilters
   */
  public static UserDataFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDataFilters.class);
  }

  /**
   * Convert an instance of UserDataFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

