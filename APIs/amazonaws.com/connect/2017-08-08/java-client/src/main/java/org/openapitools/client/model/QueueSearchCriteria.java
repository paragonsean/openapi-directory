/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SearchPromptsRequestSearchCriteriaStringCondition;
import org.openapitools.client.model.SearchableQueueType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The search criteria to be used to return queues.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; fields support \&quot;contains\&quot; queries with a minimum of 2 characters and a maximum of 25 characters. Any queries with character lengths outside of this range will throw invalid results. &lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueueSearchCriteria {
  public static final String SERIALIZED_NAME_OR_CONDITIONS = "OrConditions";
  @SerializedName(SERIALIZED_NAME_OR_CONDITIONS)
  private List orConditions;

  public static final String SERIALIZED_NAME_AND_CONDITIONS = "AndConditions";
  @SerializedName(SERIALIZED_NAME_AND_CONDITIONS)
  private List andConditions;

  public static final String SERIALIZED_NAME_STRING_CONDITION = "StringCondition";
  @SerializedName(SERIALIZED_NAME_STRING_CONDITION)
  private SearchPromptsRequestSearchCriteriaStringCondition stringCondition;

  public static final String SERIALIZED_NAME_QUEUE_TYPE_CONDITION = "QueueTypeCondition";
  @SerializedName(SERIALIZED_NAME_QUEUE_TYPE_CONDITION)
  private SearchableQueueType queueTypeCondition;

  public QueueSearchCriteria() {
  }

  public QueueSearchCriteria orConditions(List orConditions) {
    this.orConditions = orConditions;
    return this;
  }

  /**
   * Get orConditions
   * @return orConditions
   */
  @javax.annotation.Nullable
  public List getOrConditions() {
    return orConditions;
  }

  public void setOrConditions(List orConditions) {
    this.orConditions = orConditions;
  }


  public QueueSearchCriteria andConditions(List andConditions) {
    this.andConditions = andConditions;
    return this;
  }

  /**
   * Get andConditions
   * @return andConditions
   */
  @javax.annotation.Nullable
  public List getAndConditions() {
    return andConditions;
  }

  public void setAndConditions(List andConditions) {
    this.andConditions = andConditions;
  }


  public QueueSearchCriteria stringCondition(SearchPromptsRequestSearchCriteriaStringCondition stringCondition) {
    this.stringCondition = stringCondition;
    return this;
  }

  /**
   * Get stringCondition
   * @return stringCondition
   */
  @javax.annotation.Nullable
  public SearchPromptsRequestSearchCriteriaStringCondition getStringCondition() {
    return stringCondition;
  }

  public void setStringCondition(SearchPromptsRequestSearchCriteriaStringCondition stringCondition) {
    this.stringCondition = stringCondition;
  }


  public QueueSearchCriteria queueTypeCondition(SearchableQueueType queueTypeCondition) {
    this.queueTypeCondition = queueTypeCondition;
    return this;
  }

  /**
   * Get queueTypeCondition
   * @return queueTypeCondition
   */
  @javax.annotation.Nullable
  public SearchableQueueType getQueueTypeCondition() {
    return queueTypeCondition;
  }

  public void setQueueTypeCondition(SearchableQueueType queueTypeCondition) {
    this.queueTypeCondition = queueTypeCondition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueueSearchCriteria queueSearchCriteria = (QueueSearchCriteria) o;
    return Objects.equals(this.orConditions, queueSearchCriteria.orConditions) &&
        Objects.equals(this.andConditions, queueSearchCriteria.andConditions) &&
        Objects.equals(this.stringCondition, queueSearchCriteria.stringCondition) &&
        Objects.equals(this.queueTypeCondition, queueSearchCriteria.queueTypeCondition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orConditions, andConditions, stringCondition, queueTypeCondition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueueSearchCriteria {\n");
    sb.append("    orConditions: ").append(toIndentedString(orConditions)).append("\n");
    sb.append("    andConditions: ").append(toIndentedString(andConditions)).append("\n");
    sb.append("    stringCondition: ").append(toIndentedString(stringCondition)).append("\n");
    sb.append("    queueTypeCondition: ").append(toIndentedString(queueTypeCondition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OrConditions");
    openapiFields.add("AndConditions");
    openapiFields.add("StringCondition");
    openapiFields.add("QueueTypeCondition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueueSearchCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueueSearchCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueueSearchCriteria is not found in the empty JSON string", QueueSearchCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueueSearchCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueueSearchCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OrConditions`
      if (jsonObj.get("OrConditions") != null && !jsonObj.get("OrConditions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OrConditions"));
      }
      // validate the optional field `AndConditions`
      if (jsonObj.get("AndConditions") != null && !jsonObj.get("AndConditions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AndConditions"));
      }
      // validate the optional field `StringCondition`
      if (jsonObj.get("StringCondition") != null && !jsonObj.get("StringCondition").isJsonNull()) {
        SearchPromptsRequestSearchCriteriaStringCondition.validateJsonElement(jsonObj.get("StringCondition"));
      }
      // validate the optional field `QueueTypeCondition`
      if (jsonObj.get("QueueTypeCondition") != null && !jsonObj.get("QueueTypeCondition").isJsonNull()) {
        SearchableQueueType.validateJsonElement(jsonObj.get("QueueTypeCondition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueueSearchCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueueSearchCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueueSearchCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueueSearchCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<QueueSearchCriteria>() {
           @Override
           public void write(JsonWriter out, QueueSearchCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueueSearchCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueueSearchCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueueSearchCriteria
   * @throws IOException if the JSON string is invalid with respect to QueueSearchCriteria
   */
  public static QueueSearchCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueueSearchCriteria.class);
  }

  /**
   * Convert an instance of QueueSearchCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

