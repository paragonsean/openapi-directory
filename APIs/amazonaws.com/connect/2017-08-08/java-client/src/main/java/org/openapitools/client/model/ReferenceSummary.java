/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReferenceSummaryAttachment;
import org.openapitools.client.model.ReferenceSummaryDate;
import org.openapitools.client.model.ReferenceSummaryEmail;
import org.openapitools.client.model.ReferenceSummaryNumber;
import org.openapitools.client.model.ReferenceSummaryString;
import org.openapitools.client.model.ReferenceSummaryUrl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains summary information about a reference. &lt;code&gt;ReferenceSummary&lt;/code&gt; contains only one non null field between the URL and attachment based on the reference type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReferenceSummary {
  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private ReferenceSummaryUrl url;

  public static final String SERIALIZED_NAME_ATTACHMENT = "Attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private ReferenceSummaryAttachment attachment;

  public static final String SERIALIZED_NAME_STRING = "String";
  @SerializedName(SERIALIZED_NAME_STRING)
  private ReferenceSummaryString string;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private ReferenceSummaryNumber number;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private ReferenceSummaryDate date;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private ReferenceSummaryEmail email;

  public ReferenceSummary() {
  }

  public ReferenceSummary url(ReferenceSummaryUrl url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public ReferenceSummaryUrl getUrl() {
    return url;
  }

  public void setUrl(ReferenceSummaryUrl url) {
    this.url = url;
  }


  public ReferenceSummary attachment(ReferenceSummaryAttachment attachment) {
    this.attachment = attachment;
    return this;
  }

  /**
   * Get attachment
   * @return attachment
   */
  @javax.annotation.Nullable
  public ReferenceSummaryAttachment getAttachment() {
    return attachment;
  }

  public void setAttachment(ReferenceSummaryAttachment attachment) {
    this.attachment = attachment;
  }


  public ReferenceSummary string(ReferenceSummaryString string) {
    this.string = string;
    return this;
  }

  /**
   * Get string
   * @return string
   */
  @javax.annotation.Nullable
  public ReferenceSummaryString getString() {
    return string;
  }

  public void setString(ReferenceSummaryString string) {
    this.string = string;
  }


  public ReferenceSummary number(ReferenceSummaryNumber number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public ReferenceSummaryNumber getNumber() {
    return number;
  }

  public void setNumber(ReferenceSummaryNumber number) {
    this.number = number;
  }


  public ReferenceSummary date(ReferenceSummaryDate date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public ReferenceSummaryDate getDate() {
    return date;
  }

  public void setDate(ReferenceSummaryDate date) {
    this.date = date;
  }


  public ReferenceSummary email(ReferenceSummaryEmail email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public ReferenceSummaryEmail getEmail() {
    return email;
  }

  public void setEmail(ReferenceSummaryEmail email) {
    this.email = email;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceSummary referenceSummary = (ReferenceSummary) o;
    return Objects.equals(this.url, referenceSummary.url) &&
        Objects.equals(this.attachment, referenceSummary.attachment) &&
        Objects.equals(this.string, referenceSummary.string) &&
        Objects.equals(this.number, referenceSummary.number) &&
        Objects.equals(this.date, referenceSummary.date) &&
        Objects.equals(this.email, referenceSummary.email);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, attachment, string, number, date, email);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceSummary {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    string: ").append(toIndentedString(string)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Url");
    openapiFields.add("Attachment");
    openapiFields.add("String");
    openapiFields.add("Number");
    openapiFields.add("Date");
    openapiFields.add("Email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReferenceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReferenceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReferenceSummary is not found in the empty JSON string", ReferenceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReferenceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReferenceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Url`
      if (jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) {
        ReferenceSummaryUrl.validateJsonElement(jsonObj.get("Url"));
      }
      // validate the optional field `Attachment`
      if (jsonObj.get("Attachment") != null && !jsonObj.get("Attachment").isJsonNull()) {
        ReferenceSummaryAttachment.validateJsonElement(jsonObj.get("Attachment"));
      }
      // validate the optional field `String`
      if (jsonObj.get("String") != null && !jsonObj.get("String").isJsonNull()) {
        ReferenceSummaryString.validateJsonElement(jsonObj.get("String"));
      }
      // validate the optional field `Number`
      if (jsonObj.get("Number") != null && !jsonObj.get("Number").isJsonNull()) {
        ReferenceSummaryNumber.validateJsonElement(jsonObj.get("Number"));
      }
      // validate the optional field `Date`
      if (jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) {
        ReferenceSummaryDate.validateJsonElement(jsonObj.get("Date"));
      }
      // validate the optional field `Email`
      if (jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) {
        ReferenceSummaryEmail.validateJsonElement(jsonObj.get("Email"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReferenceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReferenceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReferenceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReferenceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ReferenceSummary>() {
           @Override
           public void write(JsonWriter out, ReferenceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReferenceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReferenceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReferenceSummary
   * @throws IOException if the JSON string is invalid with respect to ReferenceSummary
   */
  public static ReferenceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReferenceSummary.class);
  }

  /**
   * Convert an instance of ReferenceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

