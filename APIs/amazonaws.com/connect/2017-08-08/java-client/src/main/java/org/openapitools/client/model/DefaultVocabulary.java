/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VocabularyLanguageCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a default vocabulary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DefaultVocabulary {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private VocabularyLanguageCode languageCode;

  public static final String SERIALIZED_NAME_VOCABULARY_ID = "VocabularyId";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_ID)
  private String vocabularyId;

  public static final String SERIALIZED_NAME_VOCABULARY_NAME = "VocabularyName";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_NAME)
  private String vocabularyName;

  public DefaultVocabulary() {
  }

  public DefaultVocabulary instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public DefaultVocabulary languageCode(VocabularyLanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nonnull
  public VocabularyLanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(VocabularyLanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public DefaultVocabulary vocabularyId(String vocabularyId) {
    this.vocabularyId = vocabularyId;
    return this;
  }

  /**
   * Get vocabularyId
   * @return vocabularyId
   */
  @javax.annotation.Nonnull
  public String getVocabularyId() {
    return vocabularyId;
  }

  public void setVocabularyId(String vocabularyId) {
    this.vocabularyId = vocabularyId;
  }


  public DefaultVocabulary vocabularyName(String vocabularyName) {
    this.vocabularyName = vocabularyName;
    return this;
  }

  /**
   * Get vocabularyName
   * @return vocabularyName
   */
  @javax.annotation.Nonnull
  public String getVocabularyName() {
    return vocabularyName;
  }

  public void setVocabularyName(String vocabularyName) {
    this.vocabularyName = vocabularyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefaultVocabulary defaultVocabulary = (DefaultVocabulary) o;
    return Objects.equals(this.instanceId, defaultVocabulary.instanceId) &&
        Objects.equals(this.languageCode, defaultVocabulary.languageCode) &&
        Objects.equals(this.vocabularyId, defaultVocabulary.vocabularyId) &&
        Objects.equals(this.vocabularyName, defaultVocabulary.vocabularyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, languageCode, vocabularyId, vocabularyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefaultVocabulary {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    vocabularyId: ").append(toIndentedString(vocabularyId)).append("\n");
    sb.append("    vocabularyName: ").append(toIndentedString(vocabularyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstanceId");
    openapiFields.add("LanguageCode");
    openapiFields.add("VocabularyId");
    openapiFields.add("VocabularyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InstanceId");
    openapiRequiredFields.add("LanguageCode");
    openapiRequiredFields.add("VocabularyId");
    openapiRequiredFields.add("VocabularyName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DefaultVocabulary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DefaultVocabulary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DefaultVocabulary is not found in the empty JSON string", DefaultVocabulary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DefaultVocabulary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DefaultVocabulary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DefaultVocabulary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `InstanceId`
      String.validateJsonElement(jsonObj.get("InstanceId"));
      // validate the required field `LanguageCode`
      VocabularyLanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      // validate the required field `VocabularyId`
      String.validateJsonElement(jsonObj.get("VocabularyId"));
      // validate the required field `VocabularyName`
      String.validateJsonElement(jsonObj.get("VocabularyName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DefaultVocabulary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DefaultVocabulary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DefaultVocabulary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DefaultVocabulary.class));

       return (TypeAdapter<T>) new TypeAdapter<DefaultVocabulary>() {
           @Override
           public void write(JsonWriter out, DefaultVocabulary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DefaultVocabulary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DefaultVocabulary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DefaultVocabulary
   * @throws IOException if the JSON string is invalid with respect to DefaultVocabulary
   */
  public static DefaultVocabulary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DefaultVocabulary.class);
  }

  /**
   * Convert an instance of DefaultVocabulary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

