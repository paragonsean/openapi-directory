/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.ContactAgentInfo;
import org.openapitools.client.model.ContactInitiationMethod;
import org.openapitools.client.model.ContactQueueInfo;
import org.openapitools.client.model.ContactWisdomInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeContactResponseContact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeContactResponseContact {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INITIAL_CONTACT_ID = "InitialContactId";
  @SerializedName(SERIALIZED_NAME_INITIAL_CONTACT_ID)
  private String initialContactId;

  public static final String SERIALIZED_NAME_PREVIOUS_CONTACT_ID = "PreviousContactId";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_CONTACT_ID)
  private String previousContactId;

  public static final String SERIALIZED_NAME_INITIATION_METHOD = "InitiationMethod";
  @SerializedName(SERIALIZED_NAME_INITIATION_METHOD)
  private ContactInitiationMethod initiationMethod;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CHANNEL = "Channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private Channel channel;

  public static final String SERIALIZED_NAME_QUEUE_INFO = "QueueInfo";
  @SerializedName(SERIALIZED_NAME_QUEUE_INFO)
  private ContactQueueInfo queueInfo;

  public static final String SERIALIZED_NAME_AGENT_INFO = "AgentInfo";
  @SerializedName(SERIALIZED_NAME_AGENT_INFO)
  private ContactAgentInfo agentInfo;

  public static final String SERIALIZED_NAME_INITIATION_TIMESTAMP = "InitiationTimestamp";
  @SerializedName(SERIALIZED_NAME_INITIATION_TIMESTAMP)
  private OffsetDateTime initiationTimestamp;

  public static final String SERIALIZED_NAME_DISCONNECT_TIMESTAMP = "DisconnectTimestamp";
  @SerializedName(SERIALIZED_NAME_DISCONNECT_TIMESTAMP)
  private OffsetDateTime disconnectTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIMESTAMP = "LastUpdateTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIMESTAMP)
  private OffsetDateTime lastUpdateTimestamp;

  public static final String SERIALIZED_NAME_SCHEDULED_TIMESTAMP = "ScheduledTimestamp";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIMESTAMP)
  private OffsetDateTime scheduledTimestamp;

  public static final String SERIALIZED_NAME_RELATED_CONTACT_ID = "RelatedContactId";
  @SerializedName(SERIALIZED_NAME_RELATED_CONTACT_ID)
  private String relatedContactId;

  public static final String SERIALIZED_NAME_WISDOM_INFO = "WisdomInfo";
  @SerializedName(SERIALIZED_NAME_WISDOM_INFO)
  private ContactWisdomInfo wisdomInfo;

  public DescribeContactResponseContact() {
  }

  public DescribeContactResponseContact arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeContactResponseContact id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DescribeContactResponseContact initialContactId(String initialContactId) {
    this.initialContactId = initialContactId;
    return this;
  }

  /**
   * Get initialContactId
   * @return initialContactId
   */
  @javax.annotation.Nullable
  public String getInitialContactId() {
    return initialContactId;
  }

  public void setInitialContactId(String initialContactId) {
    this.initialContactId = initialContactId;
  }


  public DescribeContactResponseContact previousContactId(String previousContactId) {
    this.previousContactId = previousContactId;
    return this;
  }

  /**
   * Get previousContactId
   * @return previousContactId
   */
  @javax.annotation.Nullable
  public String getPreviousContactId() {
    return previousContactId;
  }

  public void setPreviousContactId(String previousContactId) {
    this.previousContactId = previousContactId;
  }


  public DescribeContactResponseContact initiationMethod(ContactInitiationMethod initiationMethod) {
    this.initiationMethod = initiationMethod;
    return this;
  }

  /**
   * Get initiationMethod
   * @return initiationMethod
   */
  @javax.annotation.Nullable
  public ContactInitiationMethod getInitiationMethod() {
    return initiationMethod;
  }

  public void setInitiationMethod(ContactInitiationMethod initiationMethod) {
    this.initiationMethod = initiationMethod;
  }


  public DescribeContactResponseContact name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeContactResponseContact description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeContactResponseContact channel(Channel channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public Channel getChannel() {
    return channel;
  }

  public void setChannel(Channel channel) {
    this.channel = channel;
  }


  public DescribeContactResponseContact queueInfo(ContactQueueInfo queueInfo) {
    this.queueInfo = queueInfo;
    return this;
  }

  /**
   * Get queueInfo
   * @return queueInfo
   */
  @javax.annotation.Nullable
  public ContactQueueInfo getQueueInfo() {
    return queueInfo;
  }

  public void setQueueInfo(ContactQueueInfo queueInfo) {
    this.queueInfo = queueInfo;
  }


  public DescribeContactResponseContact agentInfo(ContactAgentInfo agentInfo) {
    this.agentInfo = agentInfo;
    return this;
  }

  /**
   * Get agentInfo
   * @return agentInfo
   */
  @javax.annotation.Nullable
  public ContactAgentInfo getAgentInfo() {
    return agentInfo;
  }

  public void setAgentInfo(ContactAgentInfo agentInfo) {
    this.agentInfo = agentInfo;
  }


  public DescribeContactResponseContact initiationTimestamp(OffsetDateTime initiationTimestamp) {
    this.initiationTimestamp = initiationTimestamp;
    return this;
  }

  /**
   * Get initiationTimestamp
   * @return initiationTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInitiationTimestamp() {
    return initiationTimestamp;
  }

  public void setInitiationTimestamp(OffsetDateTime initiationTimestamp) {
    this.initiationTimestamp = initiationTimestamp;
  }


  public DescribeContactResponseContact disconnectTimestamp(OffsetDateTime disconnectTimestamp) {
    this.disconnectTimestamp = disconnectTimestamp;
    return this;
  }

  /**
   * Get disconnectTimestamp
   * @return disconnectTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDisconnectTimestamp() {
    return disconnectTimestamp;
  }

  public void setDisconnectTimestamp(OffsetDateTime disconnectTimestamp) {
    this.disconnectTimestamp = disconnectTimestamp;
  }


  public DescribeContactResponseContact lastUpdateTimestamp(OffsetDateTime lastUpdateTimestamp) {
    this.lastUpdateTimestamp = lastUpdateTimestamp;
    return this;
  }

  /**
   * Get lastUpdateTimestamp
   * @return lastUpdateTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTimestamp() {
    return lastUpdateTimestamp;
  }

  public void setLastUpdateTimestamp(OffsetDateTime lastUpdateTimestamp) {
    this.lastUpdateTimestamp = lastUpdateTimestamp;
  }


  public DescribeContactResponseContact scheduledTimestamp(OffsetDateTime scheduledTimestamp) {
    this.scheduledTimestamp = scheduledTimestamp;
    return this;
  }

  /**
   * Get scheduledTimestamp
   * @return scheduledTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledTimestamp() {
    return scheduledTimestamp;
  }

  public void setScheduledTimestamp(OffsetDateTime scheduledTimestamp) {
    this.scheduledTimestamp = scheduledTimestamp;
  }


  public DescribeContactResponseContact relatedContactId(String relatedContactId) {
    this.relatedContactId = relatedContactId;
    return this;
  }

  /**
   * Get relatedContactId
   * @return relatedContactId
   */
  @javax.annotation.Nullable
  public String getRelatedContactId() {
    return relatedContactId;
  }

  public void setRelatedContactId(String relatedContactId) {
    this.relatedContactId = relatedContactId;
  }


  public DescribeContactResponseContact wisdomInfo(ContactWisdomInfo wisdomInfo) {
    this.wisdomInfo = wisdomInfo;
    return this;
  }

  /**
   * Get wisdomInfo
   * @return wisdomInfo
   */
  @javax.annotation.Nullable
  public ContactWisdomInfo getWisdomInfo() {
    return wisdomInfo;
  }

  public void setWisdomInfo(ContactWisdomInfo wisdomInfo) {
    this.wisdomInfo = wisdomInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeContactResponseContact describeContactResponseContact = (DescribeContactResponseContact) o;
    return Objects.equals(this.arn, describeContactResponseContact.arn) &&
        Objects.equals(this.id, describeContactResponseContact.id) &&
        Objects.equals(this.initialContactId, describeContactResponseContact.initialContactId) &&
        Objects.equals(this.previousContactId, describeContactResponseContact.previousContactId) &&
        Objects.equals(this.initiationMethod, describeContactResponseContact.initiationMethod) &&
        Objects.equals(this.name, describeContactResponseContact.name) &&
        Objects.equals(this.description, describeContactResponseContact.description) &&
        Objects.equals(this.channel, describeContactResponseContact.channel) &&
        Objects.equals(this.queueInfo, describeContactResponseContact.queueInfo) &&
        Objects.equals(this.agentInfo, describeContactResponseContact.agentInfo) &&
        Objects.equals(this.initiationTimestamp, describeContactResponseContact.initiationTimestamp) &&
        Objects.equals(this.disconnectTimestamp, describeContactResponseContact.disconnectTimestamp) &&
        Objects.equals(this.lastUpdateTimestamp, describeContactResponseContact.lastUpdateTimestamp) &&
        Objects.equals(this.scheduledTimestamp, describeContactResponseContact.scheduledTimestamp) &&
        Objects.equals(this.relatedContactId, describeContactResponseContact.relatedContactId) &&
        Objects.equals(this.wisdomInfo, describeContactResponseContact.wisdomInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, id, initialContactId, previousContactId, initiationMethod, name, description, channel, queueInfo, agentInfo, initiationTimestamp, disconnectTimestamp, lastUpdateTimestamp, scheduledTimestamp, relatedContactId, wisdomInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeContactResponseContact {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initialContactId: ").append(toIndentedString(initialContactId)).append("\n");
    sb.append("    previousContactId: ").append(toIndentedString(previousContactId)).append("\n");
    sb.append("    initiationMethod: ").append(toIndentedString(initiationMethod)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    queueInfo: ").append(toIndentedString(queueInfo)).append("\n");
    sb.append("    agentInfo: ").append(toIndentedString(agentInfo)).append("\n");
    sb.append("    initiationTimestamp: ").append(toIndentedString(initiationTimestamp)).append("\n");
    sb.append("    disconnectTimestamp: ").append(toIndentedString(disconnectTimestamp)).append("\n");
    sb.append("    lastUpdateTimestamp: ").append(toIndentedString(lastUpdateTimestamp)).append("\n");
    sb.append("    scheduledTimestamp: ").append(toIndentedString(scheduledTimestamp)).append("\n");
    sb.append("    relatedContactId: ").append(toIndentedString(relatedContactId)).append("\n");
    sb.append("    wisdomInfo: ").append(toIndentedString(wisdomInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Id");
    openapiFields.add("InitialContactId");
    openapiFields.add("PreviousContactId");
    openapiFields.add("InitiationMethod");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("Channel");
    openapiFields.add("QueueInfo");
    openapiFields.add("AgentInfo");
    openapiFields.add("InitiationTimestamp");
    openapiFields.add("DisconnectTimestamp");
    openapiFields.add("LastUpdateTimestamp");
    openapiFields.add("ScheduledTimestamp");
    openapiFields.add("RelatedContactId");
    openapiFields.add("WisdomInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeContactResponseContact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeContactResponseContact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeContactResponseContact is not found in the empty JSON string", DescribeContactResponseContact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeContactResponseContact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeContactResponseContact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `InitialContactId`
      if (jsonObj.get("InitialContactId") != null && !jsonObj.get("InitialContactId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InitialContactId"));
      }
      // validate the optional field `PreviousContactId`
      if (jsonObj.get("PreviousContactId") != null && !jsonObj.get("PreviousContactId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreviousContactId"));
      }
      // validate the optional field `InitiationMethod`
      if (jsonObj.get("InitiationMethod") != null && !jsonObj.get("InitiationMethod").isJsonNull()) {
        ContactInitiationMethod.validateJsonElement(jsonObj.get("InitiationMethod"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Channel`
      if (jsonObj.get("Channel") != null && !jsonObj.get("Channel").isJsonNull()) {
        Channel.validateJsonElement(jsonObj.get("Channel"));
      }
      // validate the optional field `QueueInfo`
      if (jsonObj.get("QueueInfo") != null && !jsonObj.get("QueueInfo").isJsonNull()) {
        ContactQueueInfo.validateJsonElement(jsonObj.get("QueueInfo"));
      }
      // validate the optional field `AgentInfo`
      if (jsonObj.get("AgentInfo") != null && !jsonObj.get("AgentInfo").isJsonNull()) {
        ContactAgentInfo.validateJsonElement(jsonObj.get("AgentInfo"));
      }
      // validate the optional field `InitiationTimestamp`
      if (jsonObj.get("InitiationTimestamp") != null && !jsonObj.get("InitiationTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("InitiationTimestamp"));
      }
      // validate the optional field `DisconnectTimestamp`
      if (jsonObj.get("DisconnectTimestamp") != null && !jsonObj.get("DisconnectTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DisconnectTimestamp"));
      }
      // validate the optional field `LastUpdateTimestamp`
      if (jsonObj.get("LastUpdateTimestamp") != null && !jsonObj.get("LastUpdateTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdateTimestamp"));
      }
      // validate the optional field `ScheduledTimestamp`
      if (jsonObj.get("ScheduledTimestamp") != null && !jsonObj.get("ScheduledTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ScheduledTimestamp"));
      }
      // validate the optional field `RelatedContactId`
      if (jsonObj.get("RelatedContactId") != null && !jsonObj.get("RelatedContactId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RelatedContactId"));
      }
      // validate the optional field `WisdomInfo`
      if (jsonObj.get("WisdomInfo") != null && !jsonObj.get("WisdomInfo").isJsonNull()) {
        ContactWisdomInfo.validateJsonElement(jsonObj.get("WisdomInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeContactResponseContact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeContactResponseContact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeContactResponseContact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeContactResponseContact.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeContactResponseContact>() {
           @Override
           public void write(JsonWriter out, DescribeContactResponseContact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeContactResponseContact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeContactResponseContact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeContactResponseContact
   * @throws IOException if the JSON string is invalid with respect to DescribeContactResponseContact
   */
  public static DescribeContactResponseContact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeContactResponseContact.class);
  }

  /**
   * Convert an instance of DescribeContactResponseContact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

