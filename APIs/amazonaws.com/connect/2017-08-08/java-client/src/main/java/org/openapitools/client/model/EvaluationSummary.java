/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EvaluationMetadataScore;
import org.openapitools.client.model.EvaluationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary information about a contact evaluation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluationSummary {
  public static final String SERIALIZED_NAME_EVALUATION_ID = "EvaluationId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ID)
  private String evaluationId;

  public static final String SERIALIZED_NAME_EVALUATION_ARN = "EvaluationArn";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ARN)
  private String evaluationArn;

  public static final String SERIALIZED_NAME_EVALUATION_FORM_TITLE = "EvaluationFormTitle";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FORM_TITLE)
  private String evaluationFormTitle;

  public static final String SERIALIZED_NAME_EVALUATION_FORM_ID = "EvaluationFormId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FORM_ID)
  private String evaluationFormId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EvaluationStatus status;

  public static final String SERIALIZED_NAME_EVALUATOR_ARN = "EvaluatorArn";
  @SerializedName(SERIALIZED_NAME_EVALUATOR_ARN)
  private String evaluatorArn;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private EvaluationMetadataScore score;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public EvaluationSummary() {
  }

  public EvaluationSummary evaluationId(String evaluationId) {
    this.evaluationId = evaluationId;
    return this;
  }

  /**
   * Get evaluationId
   * @return evaluationId
   */
  @javax.annotation.Nonnull
  public String getEvaluationId() {
    return evaluationId;
  }

  public void setEvaluationId(String evaluationId) {
    this.evaluationId = evaluationId;
  }


  public EvaluationSummary evaluationArn(String evaluationArn) {
    this.evaluationArn = evaluationArn;
    return this;
  }

  /**
   * Get evaluationArn
   * @return evaluationArn
   */
  @javax.annotation.Nonnull
  public String getEvaluationArn() {
    return evaluationArn;
  }

  public void setEvaluationArn(String evaluationArn) {
    this.evaluationArn = evaluationArn;
  }


  public EvaluationSummary evaluationFormTitle(String evaluationFormTitle) {
    this.evaluationFormTitle = evaluationFormTitle;
    return this;
  }

  /**
   * Get evaluationFormTitle
   * @return evaluationFormTitle
   */
  @javax.annotation.Nonnull
  public String getEvaluationFormTitle() {
    return evaluationFormTitle;
  }

  public void setEvaluationFormTitle(String evaluationFormTitle) {
    this.evaluationFormTitle = evaluationFormTitle;
  }


  public EvaluationSummary evaluationFormId(String evaluationFormId) {
    this.evaluationFormId = evaluationFormId;
    return this;
  }

  /**
   * Get evaluationFormId
   * @return evaluationFormId
   */
  @javax.annotation.Nonnull
  public String getEvaluationFormId() {
    return evaluationFormId;
  }

  public void setEvaluationFormId(String evaluationFormId) {
    this.evaluationFormId = evaluationFormId;
  }


  public EvaluationSummary status(EvaluationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public EvaluationStatus getStatus() {
    return status;
  }

  public void setStatus(EvaluationStatus status) {
    this.status = status;
  }


  public EvaluationSummary evaluatorArn(String evaluatorArn) {
    this.evaluatorArn = evaluatorArn;
    return this;
  }

  /**
   * Get evaluatorArn
   * @return evaluatorArn
   */
  @javax.annotation.Nonnull
  public String getEvaluatorArn() {
    return evaluatorArn;
  }

  public void setEvaluatorArn(String evaluatorArn) {
    this.evaluatorArn = evaluatorArn;
  }


  public EvaluationSummary score(EvaluationMetadataScore score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public EvaluationMetadataScore getScore() {
    return score;
  }

  public void setScore(EvaluationMetadataScore score) {
    this.score = score;
  }


  public EvaluationSummary createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public EvaluationSummary lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluationSummary evaluationSummary = (EvaluationSummary) o;
    return Objects.equals(this.evaluationId, evaluationSummary.evaluationId) &&
        Objects.equals(this.evaluationArn, evaluationSummary.evaluationArn) &&
        Objects.equals(this.evaluationFormTitle, evaluationSummary.evaluationFormTitle) &&
        Objects.equals(this.evaluationFormId, evaluationSummary.evaluationFormId) &&
        Objects.equals(this.status, evaluationSummary.status) &&
        Objects.equals(this.evaluatorArn, evaluationSummary.evaluatorArn) &&
        Objects.equals(this.score, evaluationSummary.score) &&
        Objects.equals(this.createdTime, evaluationSummary.createdTime) &&
        Objects.equals(this.lastModifiedTime, evaluationSummary.lastModifiedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluationId, evaluationArn, evaluationFormTitle, evaluationFormId, status, evaluatorArn, score, createdTime, lastModifiedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluationSummary {\n");
    sb.append("    evaluationId: ").append(toIndentedString(evaluationId)).append("\n");
    sb.append("    evaluationArn: ").append(toIndentedString(evaluationArn)).append("\n");
    sb.append("    evaluationFormTitle: ").append(toIndentedString(evaluationFormTitle)).append("\n");
    sb.append("    evaluationFormId: ").append(toIndentedString(evaluationFormId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    evaluatorArn: ").append(toIndentedString(evaluatorArn)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EvaluationId");
    openapiFields.add("EvaluationArn");
    openapiFields.add("EvaluationFormTitle");
    openapiFields.add("EvaluationFormId");
    openapiFields.add("Status");
    openapiFields.add("EvaluatorArn");
    openapiFields.add("Score");
    openapiFields.add("CreatedTime");
    openapiFields.add("LastModifiedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EvaluationId");
    openapiRequiredFields.add("EvaluationArn");
    openapiRequiredFields.add("EvaluationFormTitle");
    openapiRequiredFields.add("EvaluationFormId");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("EvaluatorArn");
    openapiRequiredFields.add("CreatedTime");
    openapiRequiredFields.add("LastModifiedTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluationSummary is not found in the empty JSON string", EvaluationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EvaluationSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EvaluationId`
      String.validateJsonElement(jsonObj.get("EvaluationId"));
      // validate the required field `EvaluationArn`
      String.validateJsonElement(jsonObj.get("EvaluationArn"));
      // validate the required field `EvaluationFormTitle`
      String.validateJsonElement(jsonObj.get("EvaluationFormTitle"));
      // validate the required field `EvaluationFormId`
      String.validateJsonElement(jsonObj.get("EvaluationFormId"));
      // validate the required field `Status`
      EvaluationStatus.validateJsonElement(jsonObj.get("Status"));
      // validate the required field `EvaluatorArn`
      String.validateJsonElement(jsonObj.get("EvaluatorArn"));
      // validate the optional field `Score`
      if (jsonObj.get("Score") != null && !jsonObj.get("Score").isJsonNull()) {
        EvaluationMetadataScore.validateJsonElement(jsonObj.get("Score"));
      }
      // validate the required field `CreatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      // validate the required field `LastModifiedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluationSummary>() {
           @Override
           public void write(JsonWriter out, EvaluationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluationSummary
   * @throws IOException if the JSON string is invalid with respect to EvaluationSummary
   */
  public static EvaluationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluationSummary.class);
  }

  /**
   * Convert an instance of EvaluationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

