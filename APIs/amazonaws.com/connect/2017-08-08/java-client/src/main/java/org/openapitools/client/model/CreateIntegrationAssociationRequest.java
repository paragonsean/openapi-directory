/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateIntegrationAssociationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateIntegrationAssociationRequest {
  /**
   * The type of information to be ingested.
   */
  @JsonAdapter(IntegrationTypeEnum.Adapter.class)
  public enum IntegrationTypeEnum {
    EVENT("EVENT"),
    
    VOICE_ID("VOICE_ID"),
    
    PINPOINT_APP("PINPOINT_APP"),
    
    WISDOM_ASSISTANT("WISDOM_ASSISTANT"),
    
    WISDOM_KNOWLEDGE_BASE("WISDOM_KNOWLEDGE_BASE"),
    
    CASES_DOMAIN("CASES_DOMAIN");

    private String value;

    IntegrationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntegrationTypeEnum fromValue(String value) {
      for (IntegrationTypeEnum b : IntegrationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntegrationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntegrationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntegrationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntegrationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IntegrationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTEGRATION_TYPE = "IntegrationType";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_TYPE)
  private IntegrationTypeEnum integrationType;

  public static final String SERIALIZED_NAME_INTEGRATION_ARN = "IntegrationArn";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_ARN)
  private String integrationArn;

  public static final String SERIALIZED_NAME_SOURCE_APPLICATION_URL = "SourceApplicationUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_APPLICATION_URL)
  private String sourceApplicationUrl;

  public static final String SERIALIZED_NAME_SOURCE_APPLICATION_NAME = "SourceApplicationName";
  @SerializedName(SERIALIZED_NAME_SOURCE_APPLICATION_NAME)
  private String sourceApplicationName;

  /**
   * The type of the data source. This field is only required for the EVENT integration type.
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    SALESFORCE("SALESFORCE"),
    
    ZENDESK("ZENDESK");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateIntegrationAssociationRequest() {
  }

  public CreateIntegrationAssociationRequest integrationType(IntegrationTypeEnum integrationType) {
    this.integrationType = integrationType;
    return this;
  }

  /**
   * The type of information to be ingested.
   * @return integrationType
   */
  @javax.annotation.Nonnull
  public IntegrationTypeEnum getIntegrationType() {
    return integrationType;
  }

  public void setIntegrationType(IntegrationTypeEnum integrationType) {
    this.integrationType = integrationType;
  }


  public CreateIntegrationAssociationRequest integrationArn(String integrationArn) {
    this.integrationArn = integrationArn;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN) of the integration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When integrating with Amazon Pinpoint, the Amazon Connect and Amazon Pinpoint instances must be in the same account.&lt;/p&gt; &lt;/note&gt;
   * @return integrationArn
   */
  @javax.annotation.Nonnull
  public String getIntegrationArn() {
    return integrationArn;
  }

  public void setIntegrationArn(String integrationArn) {
    this.integrationArn = integrationArn;
  }


  public CreateIntegrationAssociationRequest sourceApplicationUrl(String sourceApplicationUrl) {
    this.sourceApplicationUrl = sourceApplicationUrl;
    return this;
  }

  /**
   * The URL for the external application. This field is only required for the EVENT integration type.
   * @return sourceApplicationUrl
   */
  @javax.annotation.Nullable
  public String getSourceApplicationUrl() {
    return sourceApplicationUrl;
  }

  public void setSourceApplicationUrl(String sourceApplicationUrl) {
    this.sourceApplicationUrl = sourceApplicationUrl;
  }


  public CreateIntegrationAssociationRequest sourceApplicationName(String sourceApplicationName) {
    this.sourceApplicationName = sourceApplicationName;
    return this;
  }

  /**
   * The name of the external application. This field is only required for the EVENT integration type.
   * @return sourceApplicationName
   */
  @javax.annotation.Nullable
  public String getSourceApplicationName() {
    return sourceApplicationName;
  }

  public void setSourceApplicationName(String sourceApplicationName) {
    this.sourceApplicationName = sourceApplicationName;
  }


  public CreateIntegrationAssociationRequest sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * The type of the data source. This field is only required for the EVENT integration type.
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public CreateIntegrationAssociationRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateIntegrationAssociationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags used to organize, track, or control access for this resource. For example, { \&quot;tags\&quot;: {\&quot;key1\&quot;:\&quot;value1\&quot;, \&quot;key2\&quot;:\&quot;value2\&quot;} }.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateIntegrationAssociationRequest createIntegrationAssociationRequest = (CreateIntegrationAssociationRequest) o;
    return Objects.equals(this.integrationType, createIntegrationAssociationRequest.integrationType) &&
        Objects.equals(this.integrationArn, createIntegrationAssociationRequest.integrationArn) &&
        Objects.equals(this.sourceApplicationUrl, createIntegrationAssociationRequest.sourceApplicationUrl) &&
        Objects.equals(this.sourceApplicationName, createIntegrationAssociationRequest.sourceApplicationName) &&
        Objects.equals(this.sourceType, createIntegrationAssociationRequest.sourceType) &&
        Objects.equals(this.tags, createIntegrationAssociationRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integrationType, integrationArn, sourceApplicationUrl, sourceApplicationName, sourceType, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateIntegrationAssociationRequest {\n");
    sb.append("    integrationType: ").append(toIndentedString(integrationType)).append("\n");
    sb.append("    integrationArn: ").append(toIndentedString(integrationArn)).append("\n");
    sb.append("    sourceApplicationUrl: ").append(toIndentedString(sourceApplicationUrl)).append("\n");
    sb.append("    sourceApplicationName: ").append(toIndentedString(sourceApplicationName)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntegrationType");
    openapiFields.add("IntegrationArn");
    openapiFields.add("SourceApplicationUrl");
    openapiFields.add("SourceApplicationName");
    openapiFields.add("SourceType");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IntegrationType");
    openapiRequiredFields.add("IntegrationArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateIntegrationAssociationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateIntegrationAssociationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateIntegrationAssociationRequest is not found in the empty JSON string", CreateIntegrationAssociationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateIntegrationAssociationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateIntegrationAssociationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateIntegrationAssociationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("IntegrationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntegrationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntegrationType").toString()));
      }
      // validate the required field `IntegrationType`
      IntegrationTypeEnum.validateJsonElement(jsonObj.get("IntegrationType"));
      if (!jsonObj.get("IntegrationArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntegrationArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntegrationArn").toString()));
      }
      if ((jsonObj.get("SourceApplicationUrl") != null && !jsonObj.get("SourceApplicationUrl").isJsonNull()) && !jsonObj.get("SourceApplicationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceApplicationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceApplicationUrl").toString()));
      }
      if ((jsonObj.get("SourceApplicationName") != null && !jsonObj.get("SourceApplicationName").isJsonNull()) && !jsonObj.get("SourceApplicationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceApplicationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceApplicationName").toString()));
      }
      if ((jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) && !jsonObj.get("SourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceType").toString()));
      }
      // validate the optional field `SourceType`
      if (jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) {
        SourceTypeEnum.validateJsonElement(jsonObj.get("SourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateIntegrationAssociationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateIntegrationAssociationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateIntegrationAssociationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateIntegrationAssociationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateIntegrationAssociationRequest>() {
           @Override
           public void write(JsonWriter out, CreateIntegrationAssociationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateIntegrationAssociationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateIntegrationAssociationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateIntegrationAssociationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateIntegrationAssociationRequest
   */
  public static CreateIntegrationAssociationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateIntegrationAssociationRequest.class);
  }

  /**
   * Convert an instance of CreateIntegrationAssociationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

