/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateInstanceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateInstanceRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  /**
   * The type of identity management for your Amazon Connect users.
   */
  @JsonAdapter(IdentityManagementTypeEnum.Adapter.class)
  public enum IdentityManagementTypeEnum {
    SAML("SAML"),
    
    CONNECT_MANAGED("CONNECT_MANAGED"),
    
    EXISTING_DIRECTORY("EXISTING_DIRECTORY");

    private String value;

    IdentityManagementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdentityManagementTypeEnum fromValue(String value) {
      for (IdentityManagementTypeEnum b : IdentityManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdentityManagementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdentityManagementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdentityManagementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdentityManagementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IdentityManagementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IDENTITY_MANAGEMENT_TYPE = "IdentityManagementType";
  @SerializedName(SERIALIZED_NAME_IDENTITY_MANAGEMENT_TYPE)
  private IdentityManagementTypeEnum identityManagementType;

  public static final String SERIALIZED_NAME_INSTANCE_ALIAS = "InstanceAlias";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ALIAS)
  private String instanceAlias;

  public static final String SERIALIZED_NAME_DIRECTORY_ID = "DirectoryId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_ID)
  private String directoryId;

  public static final String SERIALIZED_NAME_INBOUND_CALLS_ENABLED = "InboundCallsEnabled";
  @SerializedName(SERIALIZED_NAME_INBOUND_CALLS_ENABLED)
  private Boolean inboundCallsEnabled;

  public static final String SERIALIZED_NAME_OUTBOUND_CALLS_ENABLED = "OutboundCallsEnabled";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_CALLS_ENABLED)
  private Boolean outboundCallsEnabled;

  public CreateInstanceRequest() {
  }

  public CreateInstanceRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * The idempotency token.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateInstanceRequest identityManagementType(IdentityManagementTypeEnum identityManagementType) {
    this.identityManagementType = identityManagementType;
    return this;
  }

  /**
   * The type of identity management for your Amazon Connect users.
   * @return identityManagementType
   */
  @javax.annotation.Nonnull
  public IdentityManagementTypeEnum getIdentityManagementType() {
    return identityManagementType;
  }

  public void setIdentityManagementType(IdentityManagementTypeEnum identityManagementType) {
    this.identityManagementType = identityManagementType;
  }


  public CreateInstanceRequest instanceAlias(String instanceAlias) {
    this.instanceAlias = instanceAlias;
    return this;
  }

  /**
   * The name for your instance.
   * @return instanceAlias
   */
  @javax.annotation.Nullable
  public String getInstanceAlias() {
    return instanceAlias;
  }

  public void setInstanceAlias(String instanceAlias) {
    this.instanceAlias = instanceAlias;
  }


  public CreateInstanceRequest directoryId(String directoryId) {
    this.directoryId = directoryId;
    return this;
  }

  /**
   * The identifier for the directory.
   * @return directoryId
   */
  @javax.annotation.Nullable
  public String getDirectoryId() {
    return directoryId;
  }

  public void setDirectoryId(String directoryId) {
    this.directoryId = directoryId;
  }


  public CreateInstanceRequest inboundCallsEnabled(Boolean inboundCallsEnabled) {
    this.inboundCallsEnabled = inboundCallsEnabled;
    return this;
  }

  /**
   * Your contact center handles incoming contacts.
   * @return inboundCallsEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getInboundCallsEnabled() {
    return inboundCallsEnabled;
  }

  public void setInboundCallsEnabled(Boolean inboundCallsEnabled) {
    this.inboundCallsEnabled = inboundCallsEnabled;
  }


  public CreateInstanceRequest outboundCallsEnabled(Boolean outboundCallsEnabled) {
    this.outboundCallsEnabled = outboundCallsEnabled;
    return this;
  }

  /**
   * Your contact center allows outbound calls.
   * @return outboundCallsEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getOutboundCallsEnabled() {
    return outboundCallsEnabled;
  }

  public void setOutboundCallsEnabled(Boolean outboundCallsEnabled) {
    this.outboundCallsEnabled = outboundCallsEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInstanceRequest createInstanceRequest = (CreateInstanceRequest) o;
    return Objects.equals(this.clientToken, createInstanceRequest.clientToken) &&
        Objects.equals(this.identityManagementType, createInstanceRequest.identityManagementType) &&
        Objects.equals(this.instanceAlias, createInstanceRequest.instanceAlias) &&
        Objects.equals(this.directoryId, createInstanceRequest.directoryId) &&
        Objects.equals(this.inboundCallsEnabled, createInstanceRequest.inboundCallsEnabled) &&
        Objects.equals(this.outboundCallsEnabled, createInstanceRequest.outboundCallsEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, identityManagementType, instanceAlias, directoryId, inboundCallsEnabled, outboundCallsEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInstanceRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    identityManagementType: ").append(toIndentedString(identityManagementType)).append("\n");
    sb.append("    instanceAlias: ").append("*").append("\n");
    sb.append("    directoryId: ").append(toIndentedString(directoryId)).append("\n");
    sb.append("    inboundCallsEnabled: ").append(toIndentedString(inboundCallsEnabled)).append("\n");
    sb.append("    outboundCallsEnabled: ").append(toIndentedString(outboundCallsEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("IdentityManagementType");
    openapiFields.add("InstanceAlias");
    openapiFields.add("DirectoryId");
    openapiFields.add("InboundCallsEnabled");
    openapiFields.add("OutboundCallsEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IdentityManagementType");
    openapiRequiredFields.add("InboundCallsEnabled");
    openapiRequiredFields.add("OutboundCallsEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateInstanceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateInstanceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateInstanceRequest is not found in the empty JSON string", CreateInstanceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateInstanceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateInstanceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateInstanceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if (!jsonObj.get("IdentityManagementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IdentityManagementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IdentityManagementType").toString()));
      }
      // validate the required field `IdentityManagementType`
      IdentityManagementTypeEnum.validateJsonElement(jsonObj.get("IdentityManagementType"));
      if ((jsonObj.get("InstanceAlias") != null && !jsonObj.get("InstanceAlias").isJsonNull()) && !jsonObj.get("InstanceAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceAlias").toString()));
      }
      if ((jsonObj.get("DirectoryId") != null && !jsonObj.get("DirectoryId").isJsonNull()) && !jsonObj.get("DirectoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DirectoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DirectoryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateInstanceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateInstanceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateInstanceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateInstanceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateInstanceRequest>() {
           @Override
           public void write(JsonWriter out, CreateInstanceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateInstanceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateInstanceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateInstanceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateInstanceRequest
   */
  public static CreateInstanceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateInstanceRequest.class);
  }

  /**
   * Convert an instance of CreateInstanceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

