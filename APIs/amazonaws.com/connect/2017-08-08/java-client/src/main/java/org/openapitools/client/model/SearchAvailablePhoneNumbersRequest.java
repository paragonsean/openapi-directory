/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchAvailablePhoneNumbersRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchAvailablePhoneNumbersRequest {
  public static final String SERIALIZED_NAME_TARGET_ARN = "TargetArn";
  @SerializedName(SERIALIZED_NAME_TARGET_ARN)
  private String targetArn;

  /**
   * The ISO country code.
   */
  @JsonAdapter(PhoneNumberCountryCodeEnum.Adapter.class)
  public enum PhoneNumberCountryCodeEnum {
    AF("AF"),
    
    AL("AL"),
    
    DZ("DZ"),
    
    AS("AS"),
    
    AD("AD"),
    
    AO("AO"),
    
    AI("AI"),
    
    AQ("AQ"),
    
    AG("AG"),
    
    AR("AR"),
    
    AM("AM"),
    
    AW("AW"),
    
    AU("AU"),
    
    AT("AT"),
    
    AZ("AZ"),
    
    BS("BS"),
    
    BH("BH"),
    
    BD("BD"),
    
    BB("BB"),
    
    BY("BY"),
    
    BE("BE"),
    
    BZ("BZ"),
    
    BJ("BJ"),
    
    BM("BM"),
    
    BT("BT"),
    
    BO("BO"),
    
    BA("BA"),
    
    BW("BW"),
    
    BR("BR"),
    
    IO("IO"),
    
    VG("VG"),
    
    BN("BN"),
    
    BG("BG"),
    
    BF("BF"),
    
    BI("BI"),
    
    KH("KH"),
    
    CM("CM"),
    
    CA("CA"),
    
    CV("CV"),
    
    KY("KY"),
    
    CF("CF"),
    
    TD("TD"),
    
    CL("CL"),
    
    CN("CN"),
    
    CX("CX"),
    
    CC("CC"),
    
    CO("CO"),
    
    KM("KM"),
    
    CK("CK"),
    
    CR("CR"),
    
    HR("HR"),
    
    CU("CU"),
    
    CW("CW"),
    
    CY("CY"),
    
    CZ("CZ"),
    
    CD("CD"),
    
    DK("DK"),
    
    DJ("DJ"),
    
    DM("DM"),
    
    DO("DO"),
    
    TL("TL"),
    
    EC("EC"),
    
    EG("EG"),
    
    SV("SV"),
    
    GQ("GQ"),
    
    ER("ER"),
    
    EE("EE"),
    
    ET("ET"),
    
    FK("FK"),
    
    FO("FO"),
    
    FJ("FJ"),
    
    FI("FI"),
    
    FR("FR"),
    
    PF("PF"),
    
    GA("GA"),
    
    GM("GM"),
    
    GE("GE"),
    
    DE("DE"),
    
    GH("GH"),
    
    GI("GI"),
    
    GR("GR"),
    
    GL("GL"),
    
    GD("GD"),
    
    GU("GU"),
    
    GT("GT"),
    
    GG("GG"),
    
    GN("GN"),
    
    GW("GW"),
    
    GY("GY"),
    
    HT("HT"),
    
    HN("HN"),
    
    HK("HK"),
    
    HU("HU"),
    
    IS("IS"),
    
    IN("IN"),
    
    ID("ID"),
    
    IR("IR"),
    
    IQ("IQ"),
    
    IE("IE"),
    
    IM("IM"),
    
    IL("IL"),
    
    IT("IT"),
    
    CI("CI"),
    
    JM("JM"),
    
    JP("JP"),
    
    JE("JE"),
    
    JO("JO"),
    
    KZ("KZ"),
    
    KE("KE"),
    
    KI("KI"),
    
    KW("KW"),
    
    KG("KG"),
    
    LA("LA"),
    
    LV("LV"),
    
    LB("LB"),
    
    LS("LS"),
    
    LR("LR"),
    
    LY("LY"),
    
    LI("LI"),
    
    LT("LT"),
    
    LU("LU"),
    
    MO("MO"),
    
    MK("MK"),
    
    MG("MG"),
    
    MW("MW"),
    
    MY("MY"),
    
    MV("MV"),
    
    ML("ML"),
    
    MT("MT"),
    
    MH("MH"),
    
    MR("MR"),
    
    MU("MU"),
    
    YT("YT"),
    
    MX("MX"),
    
    FM("FM"),
    
    MD("MD"),
    
    MC("MC"),
    
    MN("MN"),
    
    ME("ME"),
    
    MS("MS"),
    
    MA("MA"),
    
    MZ("MZ"),
    
    MM("MM"),
    
    NA("NA"),
    
    NR("NR"),
    
    NP("NP"),
    
    NL("NL"),
    
    AN("AN"),
    
    NC("NC"),
    
    NZ("NZ"),
    
    NI("NI"),
    
    NE("NE"),
    
    NG("NG"),
    
    NU("NU"),
    
    KP("KP"),
    
    MP("MP"),
    
    NO("NO"),
    
    OM("OM"),
    
    PK("PK"),
    
    PW("PW"),
    
    PA("PA"),
    
    PG("PG"),
    
    PY("PY"),
    
    PE("PE"),
    
    PH("PH"),
    
    PN("PN"),
    
    PL("PL"),
    
    PT("PT"),
    
    PR("PR"),
    
    QA("QA"),
    
    CG("CG"),
    
    RE("RE"),
    
    RO("RO"),
    
    RU("RU"),
    
    RW("RW"),
    
    BL("BL"),
    
    SH("SH"),
    
    KN("KN"),
    
    LC("LC"),
    
    MF("MF"),
    
    PM("PM"),
    
    VC("VC"),
    
    WS("WS"),
    
    SM("SM"),
    
    ST("ST"),
    
    SA("SA"),
    
    SN("SN"),
    
    RS("RS"),
    
    SC("SC"),
    
    SL("SL"),
    
    SG("SG"),
    
    SX("SX"),
    
    SK("SK"),
    
    SI("SI"),
    
    SB("SB"),
    
    SO("SO"),
    
    ZA("ZA"),
    
    KR("KR"),
    
    ES("ES"),
    
    LK("LK"),
    
    SD("SD"),
    
    SR("SR"),
    
    SJ("SJ"),
    
    SZ("SZ"),
    
    SE("SE"),
    
    CH("CH"),
    
    SY("SY"),
    
    TW("TW"),
    
    TJ("TJ"),
    
    TZ("TZ"),
    
    TH("TH"),
    
    TG("TG"),
    
    TK("TK"),
    
    TO("TO"),
    
    TT("TT"),
    
    TN("TN"),
    
    TR("TR"),
    
    TM("TM"),
    
    TC("TC"),
    
    TV("TV"),
    
    VI("VI"),
    
    UG("UG"),
    
    UA("UA"),
    
    AE("AE"),
    
    GB("GB"),
    
    US("US"),
    
    UY("UY"),
    
    UZ("UZ"),
    
    VU("VU"),
    
    VA("VA"),
    
    VE("VE"),
    
    VN("VN"),
    
    WF("WF"),
    
    EH("EH"),
    
    YE("YE"),
    
    ZM("ZM"),
    
    ZW("ZW");

    private String value;

    PhoneNumberCountryCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneNumberCountryCodeEnum fromValue(String value) {
      for (PhoneNumberCountryCodeEnum b : PhoneNumberCountryCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneNumberCountryCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneNumberCountryCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneNumberCountryCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneNumberCountryCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhoneNumberCountryCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_NUMBER_COUNTRY_CODE = "PhoneNumberCountryCode";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_COUNTRY_CODE)
  private PhoneNumberCountryCodeEnum phoneNumberCountryCode;

  /**
   * The type of phone number.
   */
  @JsonAdapter(PhoneNumberTypeEnum.Adapter.class)
  public enum PhoneNumberTypeEnum {
    TOLL_FREE("TOLL_FREE"),
    
    DID("DID"),
    
    UIFN("UIFN"),
    
    SHARED("SHARED"),
    
    THIRD_PARTY_TF("THIRD_PARTY_TF"),
    
    THIRD_PARTY_DID("THIRD_PARTY_DID");

    private String value;

    PhoneNumberTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneNumberTypeEnum fromValue(String value) {
      for (PhoneNumberTypeEnum b : PhoneNumberTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneNumberTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneNumberTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneNumberTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneNumberTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhoneNumberTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_NUMBER_TYPE = "PhoneNumberType";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_TYPE)
  private PhoneNumberTypeEnum phoneNumberType;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_PREFIX = "PhoneNumberPrefix";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_PREFIX)
  private String phoneNumberPrefix;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public SearchAvailablePhoneNumbersRequest() {
  }

  public SearchAvailablePhoneNumbersRequest targetArn(String targetArn) {
    this.targetArn = targetArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to.
   * @return targetArn
   */
  @javax.annotation.Nonnull
  public String getTargetArn() {
    return targetArn;
  }

  public void setTargetArn(String targetArn) {
    this.targetArn = targetArn;
  }


  public SearchAvailablePhoneNumbersRequest phoneNumberCountryCode(PhoneNumberCountryCodeEnum phoneNumberCountryCode) {
    this.phoneNumberCountryCode = phoneNumberCountryCode;
    return this;
  }

  /**
   * The ISO country code.
   * @return phoneNumberCountryCode
   */
  @javax.annotation.Nonnull
  public PhoneNumberCountryCodeEnum getPhoneNumberCountryCode() {
    return phoneNumberCountryCode;
  }

  public void setPhoneNumberCountryCode(PhoneNumberCountryCodeEnum phoneNumberCountryCode) {
    this.phoneNumberCountryCode = phoneNumberCountryCode;
  }


  public SearchAvailablePhoneNumbersRequest phoneNumberType(PhoneNumberTypeEnum phoneNumberType) {
    this.phoneNumberType = phoneNumberType;
    return this;
  }

  /**
   * The type of phone number.
   * @return phoneNumberType
   */
  @javax.annotation.Nonnull
  public PhoneNumberTypeEnum getPhoneNumberType() {
    return phoneNumberType;
  }

  public void setPhoneNumberType(PhoneNumberTypeEnum phoneNumberType) {
    this.phoneNumberType = phoneNumberType;
  }


  public SearchAvailablePhoneNumbersRequest phoneNumberPrefix(String phoneNumberPrefix) {
    this.phoneNumberPrefix = phoneNumberPrefix;
    return this;
  }

  /**
   * The prefix of the phone number. If provided, it must contain &lt;code&gt;+&lt;/code&gt; as part of the country code.
   * @return phoneNumberPrefix
   */
  @javax.annotation.Nullable
  public String getPhoneNumberPrefix() {
    return phoneNumberPrefix;
  }

  public void setPhoneNumberPrefix(String phoneNumberPrefix) {
    this.phoneNumberPrefix = phoneNumberPrefix;
  }


  public SearchAvailablePhoneNumbersRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return per page.
   * minimum: 1
   * maximum: 10
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SearchAvailablePhoneNumbersRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchAvailablePhoneNumbersRequest searchAvailablePhoneNumbersRequest = (SearchAvailablePhoneNumbersRequest) o;
    return Objects.equals(this.targetArn, searchAvailablePhoneNumbersRequest.targetArn) &&
        Objects.equals(this.phoneNumberCountryCode, searchAvailablePhoneNumbersRequest.phoneNumberCountryCode) &&
        Objects.equals(this.phoneNumberType, searchAvailablePhoneNumbersRequest.phoneNumberType) &&
        Objects.equals(this.phoneNumberPrefix, searchAvailablePhoneNumbersRequest.phoneNumberPrefix) &&
        Objects.equals(this.maxResults, searchAvailablePhoneNumbersRequest.maxResults) &&
        Objects.equals(this.nextToken, searchAvailablePhoneNumbersRequest.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetArn, phoneNumberCountryCode, phoneNumberType, phoneNumberPrefix, maxResults, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchAvailablePhoneNumbersRequest {\n");
    sb.append("    targetArn: ").append(toIndentedString(targetArn)).append("\n");
    sb.append("    phoneNumberCountryCode: ").append(toIndentedString(phoneNumberCountryCode)).append("\n");
    sb.append("    phoneNumberType: ").append(toIndentedString(phoneNumberType)).append("\n");
    sb.append("    phoneNumberPrefix: ").append(toIndentedString(phoneNumberPrefix)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TargetArn");
    openapiFields.add("PhoneNumberCountryCode");
    openapiFields.add("PhoneNumberType");
    openapiFields.add("PhoneNumberPrefix");
    openapiFields.add("MaxResults");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TargetArn");
    openapiRequiredFields.add("PhoneNumberCountryCode");
    openapiRequiredFields.add("PhoneNumberType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchAvailablePhoneNumbersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchAvailablePhoneNumbersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchAvailablePhoneNumbersRequest is not found in the empty JSON string", SearchAvailablePhoneNumbersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchAvailablePhoneNumbersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchAvailablePhoneNumbersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchAvailablePhoneNumbersRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TargetArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetArn").toString()));
      }
      if (!jsonObj.get("PhoneNumberCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumberCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumberCountryCode").toString()));
      }
      // validate the required field `PhoneNumberCountryCode`
      PhoneNumberCountryCodeEnum.validateJsonElement(jsonObj.get("PhoneNumberCountryCode"));
      if (!jsonObj.get("PhoneNumberType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumberType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumberType").toString()));
      }
      // validate the required field `PhoneNumberType`
      PhoneNumberTypeEnum.validateJsonElement(jsonObj.get("PhoneNumberType"));
      if ((jsonObj.get("PhoneNumberPrefix") != null && !jsonObj.get("PhoneNumberPrefix").isJsonNull()) && !jsonObj.get("PhoneNumberPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumberPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumberPrefix").toString()));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchAvailablePhoneNumbersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchAvailablePhoneNumbersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchAvailablePhoneNumbersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchAvailablePhoneNumbersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchAvailablePhoneNumbersRequest>() {
           @Override
           public void write(JsonWriter out, SearchAvailablePhoneNumbersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchAvailablePhoneNumbersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchAvailablePhoneNumbersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchAvailablePhoneNumbersRequest
   * @throws IOException if the JSON string is invalid with respect to SearchAvailablePhoneNumbersRequest
   */
  public static SearchAvailablePhoneNumbersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchAvailablePhoneNumbersRequest.class);
  }

  /**
   * Convert an instance of SearchAvailablePhoneNumbersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

