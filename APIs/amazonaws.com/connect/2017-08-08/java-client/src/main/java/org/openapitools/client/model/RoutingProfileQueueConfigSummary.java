/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Channel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains summary information about a routing profile queue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutingProfileQueueConfigSummary {
  public static final String SERIALIZED_NAME_QUEUE_ID = "QueueId";
  @SerializedName(SERIALIZED_NAME_QUEUE_ID)
  private String queueId;

  public static final String SERIALIZED_NAME_QUEUE_ARN = "QueueArn";
  @SerializedName(SERIALIZED_NAME_QUEUE_ARN)
  private String queueArn;

  public static final String SERIALIZED_NAME_QUEUE_NAME = "QueueName";
  @SerializedName(SERIALIZED_NAME_QUEUE_NAME)
  private String queueName;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_DELAY = "Delay";
  @SerializedName(SERIALIZED_NAME_DELAY)
  private Integer delay;

  public static final String SERIALIZED_NAME_CHANNEL = "Channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private Channel channel;

  public RoutingProfileQueueConfigSummary() {
  }

  public RoutingProfileQueueConfigSummary queueId(String queueId) {
    this.queueId = queueId;
    return this;
  }

  /**
   * Get queueId
   * @return queueId
   */
  @javax.annotation.Nonnull
  public String getQueueId() {
    return queueId;
  }

  public void setQueueId(String queueId) {
    this.queueId = queueId;
  }


  public RoutingProfileQueueConfigSummary queueArn(String queueArn) {
    this.queueArn = queueArn;
    return this;
  }

  /**
   * Get queueArn
   * @return queueArn
   */
  @javax.annotation.Nonnull
  public String getQueueArn() {
    return queueArn;
  }

  public void setQueueArn(String queueArn) {
    this.queueArn = queueArn;
  }


  public RoutingProfileQueueConfigSummary queueName(String queueName) {
    this.queueName = queueName;
    return this;
  }

  /**
   * Get queueName
   * @return queueName
   */
  @javax.annotation.Nonnull
  public String getQueueName() {
    return queueName;
  }

  public void setQueueName(String queueName) {
    this.queueName = queueName;
  }


  public RoutingProfileQueueConfigSummary priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public RoutingProfileQueueConfigSummary delay(Integer delay) {
    this.delay = delay;
    return this;
  }

  /**
   * Get delay
   * @return delay
   */
  @javax.annotation.Nonnull
  public Integer getDelay() {
    return delay;
  }

  public void setDelay(Integer delay) {
    this.delay = delay;
  }


  public RoutingProfileQueueConfigSummary channel(Channel channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nonnull
  public Channel getChannel() {
    return channel;
  }

  public void setChannel(Channel channel) {
    this.channel = channel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutingProfileQueueConfigSummary routingProfileQueueConfigSummary = (RoutingProfileQueueConfigSummary) o;
    return Objects.equals(this.queueId, routingProfileQueueConfigSummary.queueId) &&
        Objects.equals(this.queueArn, routingProfileQueueConfigSummary.queueArn) &&
        Objects.equals(this.queueName, routingProfileQueueConfigSummary.queueName) &&
        Objects.equals(this.priority, routingProfileQueueConfigSummary.priority) &&
        Objects.equals(this.delay, routingProfileQueueConfigSummary.delay) &&
        Objects.equals(this.channel, routingProfileQueueConfigSummary.channel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queueId, queueArn, queueName, priority, delay, channel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutingProfileQueueConfigSummary {\n");
    sb.append("    queueId: ").append(toIndentedString(queueId)).append("\n");
    sb.append("    queueArn: ").append(toIndentedString(queueArn)).append("\n");
    sb.append("    queueName: ").append(toIndentedString(queueName)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    delay: ").append(toIndentedString(delay)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("QueueId");
    openapiFields.add("QueueArn");
    openapiFields.add("QueueName");
    openapiFields.add("Priority");
    openapiFields.add("Delay");
    openapiFields.add("Channel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("QueueId");
    openapiRequiredFields.add("QueueArn");
    openapiRequiredFields.add("QueueName");
    openapiRequiredFields.add("Priority");
    openapiRequiredFields.add("Delay");
    openapiRequiredFields.add("Channel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutingProfileQueueConfigSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutingProfileQueueConfigSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutingProfileQueueConfigSummary is not found in the empty JSON string", RoutingProfileQueueConfigSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutingProfileQueueConfigSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutingProfileQueueConfigSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoutingProfileQueueConfigSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `QueueId`
      String.validateJsonElement(jsonObj.get("QueueId"));
      // validate the required field `QueueArn`
      String.validateJsonElement(jsonObj.get("QueueArn"));
      // validate the required field `QueueName`
      String.validateJsonElement(jsonObj.get("QueueName"));
      // validate the required field `Priority`
      Integer.validateJsonElement(jsonObj.get("Priority"));
      // validate the required field `Delay`
      Integer.validateJsonElement(jsonObj.get("Delay"));
      // validate the required field `Channel`
      Channel.validateJsonElement(jsonObj.get("Channel"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutingProfileQueueConfigSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutingProfileQueueConfigSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutingProfileQueueConfigSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutingProfileQueueConfigSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutingProfileQueueConfigSummary>() {
           @Override
           public void write(JsonWriter out, RoutingProfileQueueConfigSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutingProfileQueueConfigSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutingProfileQueueConfigSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutingProfileQueueConfigSummary
   * @throws IOException if the JSON string is invalid with respect to RoutingProfileQueueConfigSummary
   */
  public static RoutingProfileQueueConfigSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutingProfileQueueConfigSummary.class);
  }

  /**
   * Convert an instance of RoutingProfileQueueConfigSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

