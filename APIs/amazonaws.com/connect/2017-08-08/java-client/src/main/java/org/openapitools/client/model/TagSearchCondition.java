/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StringComparisonType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The search criteria to be used to return tags.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TagSearchCondition {
  public static final String SERIALIZED_NAME_TAG_KEY = "tagKey";
  @SerializedName(SERIALIZED_NAME_TAG_KEY)
  private String tagKey;

  public static final String SERIALIZED_NAME_TAG_VALUE = "tagValue";
  @SerializedName(SERIALIZED_NAME_TAG_VALUE)
  private String tagValue;

  public static final String SERIALIZED_NAME_TAG_KEY_COMPARISON_TYPE = "tagKeyComparisonType";
  @SerializedName(SERIALIZED_NAME_TAG_KEY_COMPARISON_TYPE)
  private StringComparisonType tagKeyComparisonType;

  public static final String SERIALIZED_NAME_TAG_VALUE_COMPARISON_TYPE = "tagValueComparisonType";
  @SerializedName(SERIALIZED_NAME_TAG_VALUE_COMPARISON_TYPE)
  private StringComparisonType tagValueComparisonType;

  public TagSearchCondition() {
  }

  public TagSearchCondition tagKey(String tagKey) {
    this.tagKey = tagKey;
    return this;
  }

  /**
   * Get tagKey
   * @return tagKey
   */
  @javax.annotation.Nullable
  public String getTagKey() {
    return tagKey;
  }

  public void setTagKey(String tagKey) {
    this.tagKey = tagKey;
  }


  public TagSearchCondition tagValue(String tagValue) {
    this.tagValue = tagValue;
    return this;
  }

  /**
   * Get tagValue
   * @return tagValue
   */
  @javax.annotation.Nullable
  public String getTagValue() {
    return tagValue;
  }

  public void setTagValue(String tagValue) {
    this.tagValue = tagValue;
  }


  public TagSearchCondition tagKeyComparisonType(StringComparisonType tagKeyComparisonType) {
    this.tagKeyComparisonType = tagKeyComparisonType;
    return this;
  }

  /**
   * Get tagKeyComparisonType
   * @return tagKeyComparisonType
   */
  @javax.annotation.Nullable
  public StringComparisonType getTagKeyComparisonType() {
    return tagKeyComparisonType;
  }

  public void setTagKeyComparisonType(StringComparisonType tagKeyComparisonType) {
    this.tagKeyComparisonType = tagKeyComparisonType;
  }


  public TagSearchCondition tagValueComparisonType(StringComparisonType tagValueComparisonType) {
    this.tagValueComparisonType = tagValueComparisonType;
    return this;
  }

  /**
   * Get tagValueComparisonType
   * @return tagValueComparisonType
   */
  @javax.annotation.Nullable
  public StringComparisonType getTagValueComparisonType() {
    return tagValueComparisonType;
  }

  public void setTagValueComparisonType(StringComparisonType tagValueComparisonType) {
    this.tagValueComparisonType = tagValueComparisonType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagSearchCondition tagSearchCondition = (TagSearchCondition) o;
    return Objects.equals(this.tagKey, tagSearchCondition.tagKey) &&
        Objects.equals(this.tagValue, tagSearchCondition.tagValue) &&
        Objects.equals(this.tagKeyComparisonType, tagSearchCondition.tagKeyComparisonType) &&
        Objects.equals(this.tagValueComparisonType, tagSearchCondition.tagValueComparisonType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagKey, tagValue, tagKeyComparisonType, tagValueComparisonType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagSearchCondition {\n");
    sb.append("    tagKey: ").append(toIndentedString(tagKey)).append("\n");
    sb.append("    tagValue: ").append(toIndentedString(tagValue)).append("\n");
    sb.append("    tagKeyComparisonType: ").append(toIndentedString(tagKeyComparisonType)).append("\n");
    sb.append("    tagValueComparisonType: ").append(toIndentedString(tagValueComparisonType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tagKey");
    openapiFields.add("tagValue");
    openapiFields.add("tagKeyComparisonType");
    openapiFields.add("tagValueComparisonType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagSearchCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagSearchCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagSearchCondition is not found in the empty JSON string", TagSearchCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagSearchCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagSearchCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `tagKey`
      if (jsonObj.get("tagKey") != null && !jsonObj.get("tagKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("tagKey"));
      }
      // validate the optional field `tagValue`
      if (jsonObj.get("tagValue") != null && !jsonObj.get("tagValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("tagValue"));
      }
      // validate the optional field `tagKeyComparisonType`
      if (jsonObj.get("tagKeyComparisonType") != null && !jsonObj.get("tagKeyComparisonType").isJsonNull()) {
        StringComparisonType.validateJsonElement(jsonObj.get("tagKeyComparisonType"));
      }
      // validate the optional field `tagValueComparisonType`
      if (jsonObj.get("tagValueComparisonType") != null && !jsonObj.get("tagValueComparisonType").isJsonNull()) {
        StringComparisonType.validateJsonElement(jsonObj.get("tagValueComparisonType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagSearchCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagSearchCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagSearchCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagSearchCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<TagSearchCondition>() {
           @Override
           public void write(JsonWriter out, TagSearchCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagSearchCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagSearchCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagSearchCondition
   * @throws IOException if the JSON string is invalid with respect to TagSearchCondition
   */
  public static TagSearchCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagSearchCondition.class);
  }

  /**
   * Convert an instance of TagSearchCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

