/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ActionType;
import org.openapitools.client.model.RuleActionEventBridgeAction;
import org.openapitools.client.model.RuleActionSendNotificationAction;
import org.openapitools.client.model.RuleActionTaskAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the action to be performed when a rule is triggered.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleAction {
  public static final String SERIALIZED_NAME_ACTION_TYPE = "ActionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private ActionType actionType;

  public static final String SERIALIZED_NAME_TASK_ACTION = "TaskAction";
  @SerializedName(SERIALIZED_NAME_TASK_ACTION)
  private RuleActionTaskAction taskAction;

  public static final String SERIALIZED_NAME_EVENT_BRIDGE_ACTION = "EventBridgeAction";
  @SerializedName(SERIALIZED_NAME_EVENT_BRIDGE_ACTION)
  private RuleActionEventBridgeAction eventBridgeAction;

  public static final String SERIALIZED_NAME_ASSIGN_CONTACT_CATEGORY_ACTION = "AssignContactCategoryAction";
  @SerializedName(SERIALIZED_NAME_ASSIGN_CONTACT_CATEGORY_ACTION)
  private Object assignContactCategoryAction;

  public static final String SERIALIZED_NAME_SEND_NOTIFICATION_ACTION = "SendNotificationAction";
  @SerializedName(SERIALIZED_NAME_SEND_NOTIFICATION_ACTION)
  private RuleActionSendNotificationAction sendNotificationAction;

  public RuleAction() {
  }

  public RuleAction actionType(ActionType actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Get actionType
   * @return actionType
   */
  @javax.annotation.Nonnull
  public ActionType getActionType() {
    return actionType;
  }

  public void setActionType(ActionType actionType) {
    this.actionType = actionType;
  }


  public RuleAction taskAction(RuleActionTaskAction taskAction) {
    this.taskAction = taskAction;
    return this;
  }

  /**
   * Get taskAction
   * @return taskAction
   */
  @javax.annotation.Nullable
  public RuleActionTaskAction getTaskAction() {
    return taskAction;
  }

  public void setTaskAction(RuleActionTaskAction taskAction) {
    this.taskAction = taskAction;
  }


  public RuleAction eventBridgeAction(RuleActionEventBridgeAction eventBridgeAction) {
    this.eventBridgeAction = eventBridgeAction;
    return this;
  }

  /**
   * Get eventBridgeAction
   * @return eventBridgeAction
   */
  @javax.annotation.Nullable
  public RuleActionEventBridgeAction getEventBridgeAction() {
    return eventBridgeAction;
  }

  public void setEventBridgeAction(RuleActionEventBridgeAction eventBridgeAction) {
    this.eventBridgeAction = eventBridgeAction;
  }


  public RuleAction assignContactCategoryAction(Object assignContactCategoryAction) {
    this.assignContactCategoryAction = assignContactCategoryAction;
    return this;
  }

  /**
   * Get assignContactCategoryAction
   * @return assignContactCategoryAction
   */
  @javax.annotation.Nullable
  public Object getAssignContactCategoryAction() {
    return assignContactCategoryAction;
  }

  public void setAssignContactCategoryAction(Object assignContactCategoryAction) {
    this.assignContactCategoryAction = assignContactCategoryAction;
  }


  public RuleAction sendNotificationAction(RuleActionSendNotificationAction sendNotificationAction) {
    this.sendNotificationAction = sendNotificationAction;
    return this;
  }

  /**
   * Get sendNotificationAction
   * @return sendNotificationAction
   */
  @javax.annotation.Nullable
  public RuleActionSendNotificationAction getSendNotificationAction() {
    return sendNotificationAction;
  }

  public void setSendNotificationAction(RuleActionSendNotificationAction sendNotificationAction) {
    this.sendNotificationAction = sendNotificationAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleAction ruleAction = (RuleAction) o;
    return Objects.equals(this.actionType, ruleAction.actionType) &&
        Objects.equals(this.taskAction, ruleAction.taskAction) &&
        Objects.equals(this.eventBridgeAction, ruleAction.eventBridgeAction) &&
        Objects.equals(this.assignContactCategoryAction, ruleAction.assignContactCategoryAction) &&
        Objects.equals(this.sendNotificationAction, ruleAction.sendNotificationAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionType, taskAction, eventBridgeAction, assignContactCategoryAction, sendNotificationAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleAction {\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    taskAction: ").append(toIndentedString(taskAction)).append("\n");
    sb.append("    eventBridgeAction: ").append(toIndentedString(eventBridgeAction)).append("\n");
    sb.append("    assignContactCategoryAction: ").append(toIndentedString(assignContactCategoryAction)).append("\n");
    sb.append("    sendNotificationAction: ").append(toIndentedString(sendNotificationAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionType");
    openapiFields.add("TaskAction");
    openapiFields.add("EventBridgeAction");
    openapiFields.add("AssignContactCategoryAction");
    openapiFields.add("SendNotificationAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ActionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleAction is not found in the empty JSON string", RuleAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleAction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ActionType`
      ActionType.validateJsonElement(jsonObj.get("ActionType"));
      // validate the optional field `TaskAction`
      if (jsonObj.get("TaskAction") != null && !jsonObj.get("TaskAction").isJsonNull()) {
        RuleActionTaskAction.validateJsonElement(jsonObj.get("TaskAction"));
      }
      // validate the optional field `EventBridgeAction`
      if (jsonObj.get("EventBridgeAction") != null && !jsonObj.get("EventBridgeAction").isJsonNull()) {
        RuleActionEventBridgeAction.validateJsonElement(jsonObj.get("EventBridgeAction"));
      }
      // validate the optional field `AssignContactCategoryAction`
      if (jsonObj.get("AssignContactCategoryAction") != null && !jsonObj.get("AssignContactCategoryAction").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("AssignContactCategoryAction"));
      }
      // validate the optional field `SendNotificationAction`
      if (jsonObj.get("SendNotificationAction") != null && !jsonObj.get("SendNotificationAction").isJsonNull()) {
        RuleActionSendNotificationAction.validateJsonElement(jsonObj.get("SendNotificationAction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleAction.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleAction>() {
           @Override
           public void write(JsonWriter out, RuleAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleAction
   * @throws IOException if the JSON string is invalid with respect to RuleAction
   */
  public static RuleAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleAction.class);
  }

  /**
   * Convert an instance of RuleAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

