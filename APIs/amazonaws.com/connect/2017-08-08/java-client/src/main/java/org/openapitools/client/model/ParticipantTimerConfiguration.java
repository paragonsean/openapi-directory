/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ParticipantTimerConfigurationTimerValue;
import org.openapitools.client.model.ParticipantTimerType;
import org.openapitools.client.model.TimerEligibleParticipantRoles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Configuration information for the timer. After the timer configuration is set, it persists for the duration of the chat. It persists across new contacts in the chain, for example, transfer contacts.&lt;/p&gt; &lt;p&gt;For more information about how chat timeouts work, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/setup-chat-timeouts.html\&quot;&gt;Set up chat timeouts for human participants&lt;/a&gt;. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParticipantTimerConfiguration {
  public static final String SERIALIZED_NAME_PARTICIPANT_ROLE = "ParticipantRole";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_ROLE)
  private TimerEligibleParticipantRoles participantRole;

  public static final String SERIALIZED_NAME_TIMER_TYPE = "TimerType";
  @SerializedName(SERIALIZED_NAME_TIMER_TYPE)
  private ParticipantTimerType timerType;

  public static final String SERIALIZED_NAME_TIMER_VALUE = "TimerValue";
  @SerializedName(SERIALIZED_NAME_TIMER_VALUE)
  private ParticipantTimerConfigurationTimerValue timerValue;

  public ParticipantTimerConfiguration() {
  }

  public ParticipantTimerConfiguration participantRole(TimerEligibleParticipantRoles participantRole) {
    this.participantRole = participantRole;
    return this;
  }

  /**
   * Get participantRole
   * @return participantRole
   */
  @javax.annotation.Nonnull
  public TimerEligibleParticipantRoles getParticipantRole() {
    return participantRole;
  }

  public void setParticipantRole(TimerEligibleParticipantRoles participantRole) {
    this.participantRole = participantRole;
  }


  public ParticipantTimerConfiguration timerType(ParticipantTimerType timerType) {
    this.timerType = timerType;
    return this;
  }

  /**
   * Get timerType
   * @return timerType
   */
  @javax.annotation.Nonnull
  public ParticipantTimerType getTimerType() {
    return timerType;
  }

  public void setTimerType(ParticipantTimerType timerType) {
    this.timerType = timerType;
  }


  public ParticipantTimerConfiguration timerValue(ParticipantTimerConfigurationTimerValue timerValue) {
    this.timerValue = timerValue;
    return this;
  }

  /**
   * Get timerValue
   * @return timerValue
   */
  @javax.annotation.Nonnull
  public ParticipantTimerConfigurationTimerValue getTimerValue() {
    return timerValue;
  }

  public void setTimerValue(ParticipantTimerConfigurationTimerValue timerValue) {
    this.timerValue = timerValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParticipantTimerConfiguration participantTimerConfiguration = (ParticipantTimerConfiguration) o;
    return Objects.equals(this.participantRole, participantTimerConfiguration.participantRole) &&
        Objects.equals(this.timerType, participantTimerConfiguration.timerType) &&
        Objects.equals(this.timerValue, participantTimerConfiguration.timerValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(participantRole, timerType, timerValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParticipantTimerConfiguration {\n");
    sb.append("    participantRole: ").append(toIndentedString(participantRole)).append("\n");
    sb.append("    timerType: ").append(toIndentedString(timerType)).append("\n");
    sb.append("    timerValue: ").append(toIndentedString(timerValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ParticipantRole");
    openapiFields.add("TimerType");
    openapiFields.add("TimerValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ParticipantRole");
    openapiRequiredFields.add("TimerType");
    openapiRequiredFields.add("TimerValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParticipantTimerConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParticipantTimerConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParticipantTimerConfiguration is not found in the empty JSON string", ParticipantTimerConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParticipantTimerConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParticipantTimerConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParticipantTimerConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ParticipantRole`
      TimerEligibleParticipantRoles.validateJsonElement(jsonObj.get("ParticipantRole"));
      // validate the required field `TimerType`
      ParticipantTimerType.validateJsonElement(jsonObj.get("TimerType"));
      // validate the required field `TimerValue`
      ParticipantTimerConfigurationTimerValue.validateJsonElement(jsonObj.get("TimerValue"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParticipantTimerConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParticipantTimerConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParticipantTimerConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParticipantTimerConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ParticipantTimerConfiguration>() {
           @Override
           public void write(JsonWriter out, ParticipantTimerConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParticipantTimerConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParticipantTimerConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParticipantTimerConfiguration
   * @throws IOException if the JSON string is invalid with respect to ParticipantTimerConfiguration
   */
  public static ParticipantTimerConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParticipantTimerConfiguration.class);
  }

  /**
   * Convert an instance of ParticipantTimerConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

