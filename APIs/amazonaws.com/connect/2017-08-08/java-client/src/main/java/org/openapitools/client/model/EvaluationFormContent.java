/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateEvaluationFormRequestScoringStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an evaluation form used in a contact evaluation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluationFormContent {
  public static final String SERIALIZED_NAME_EVALUATION_FORM_VERSION = "EvaluationFormVersion";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FORM_VERSION)
  private Integer evaluationFormVersion;

  public static final String SERIALIZED_NAME_EVALUATION_FORM_ID = "EvaluationFormId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FORM_ID)
  private String evaluationFormId;

  public static final String SERIALIZED_NAME_EVALUATION_FORM_ARN = "EvaluationFormArn";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FORM_ARN)
  private String evaluationFormArn;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List items;

  public static final String SERIALIZED_NAME_SCORING_STRATEGY = "ScoringStrategy";
  @SerializedName(SERIALIZED_NAME_SCORING_STRATEGY)
  private CreateEvaluationFormRequestScoringStrategy scoringStrategy;

  public EvaluationFormContent() {
  }

  public EvaluationFormContent evaluationFormVersion(Integer evaluationFormVersion) {
    this.evaluationFormVersion = evaluationFormVersion;
    return this;
  }

  /**
   * Get evaluationFormVersion
   * @return evaluationFormVersion
   */
  @javax.annotation.Nonnull
  public Integer getEvaluationFormVersion() {
    return evaluationFormVersion;
  }

  public void setEvaluationFormVersion(Integer evaluationFormVersion) {
    this.evaluationFormVersion = evaluationFormVersion;
  }


  public EvaluationFormContent evaluationFormId(String evaluationFormId) {
    this.evaluationFormId = evaluationFormId;
    return this;
  }

  /**
   * Get evaluationFormId
   * @return evaluationFormId
   */
  @javax.annotation.Nonnull
  public String getEvaluationFormId() {
    return evaluationFormId;
  }

  public void setEvaluationFormId(String evaluationFormId) {
    this.evaluationFormId = evaluationFormId;
  }


  public EvaluationFormContent evaluationFormArn(String evaluationFormArn) {
    this.evaluationFormArn = evaluationFormArn;
    return this;
  }

  /**
   * Get evaluationFormArn
   * @return evaluationFormArn
   */
  @javax.annotation.Nonnull
  public String getEvaluationFormArn() {
    return evaluationFormArn;
  }

  public void setEvaluationFormArn(String evaluationFormArn) {
    this.evaluationFormArn = evaluationFormArn;
  }


  public EvaluationFormContent title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EvaluationFormContent description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EvaluationFormContent items(List items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nonnull
  public List getItems() {
    return items;
  }

  public void setItems(List items) {
    this.items = items;
  }


  public EvaluationFormContent scoringStrategy(CreateEvaluationFormRequestScoringStrategy scoringStrategy) {
    this.scoringStrategy = scoringStrategy;
    return this;
  }

  /**
   * Get scoringStrategy
   * @return scoringStrategy
   */
  @javax.annotation.Nullable
  public CreateEvaluationFormRequestScoringStrategy getScoringStrategy() {
    return scoringStrategy;
  }

  public void setScoringStrategy(CreateEvaluationFormRequestScoringStrategy scoringStrategy) {
    this.scoringStrategy = scoringStrategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluationFormContent evaluationFormContent = (EvaluationFormContent) o;
    return Objects.equals(this.evaluationFormVersion, evaluationFormContent.evaluationFormVersion) &&
        Objects.equals(this.evaluationFormId, evaluationFormContent.evaluationFormId) &&
        Objects.equals(this.evaluationFormArn, evaluationFormContent.evaluationFormArn) &&
        Objects.equals(this.title, evaluationFormContent.title) &&
        Objects.equals(this.description, evaluationFormContent.description) &&
        Objects.equals(this.items, evaluationFormContent.items) &&
        Objects.equals(this.scoringStrategy, evaluationFormContent.scoringStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluationFormVersion, evaluationFormId, evaluationFormArn, title, description, items, scoringStrategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluationFormContent {\n");
    sb.append("    evaluationFormVersion: ").append(toIndentedString(evaluationFormVersion)).append("\n");
    sb.append("    evaluationFormId: ").append(toIndentedString(evaluationFormId)).append("\n");
    sb.append("    evaluationFormArn: ").append(toIndentedString(evaluationFormArn)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    scoringStrategy: ").append(toIndentedString(scoringStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EvaluationFormVersion");
    openapiFields.add("EvaluationFormId");
    openapiFields.add("EvaluationFormArn");
    openapiFields.add("Title");
    openapiFields.add("Description");
    openapiFields.add("Items");
    openapiFields.add("ScoringStrategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EvaluationFormVersion");
    openapiRequiredFields.add("EvaluationFormId");
    openapiRequiredFields.add("EvaluationFormArn");
    openapiRequiredFields.add("Title");
    openapiRequiredFields.add("Items");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluationFormContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluationFormContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluationFormContent is not found in the empty JSON string", EvaluationFormContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluationFormContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluationFormContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EvaluationFormContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EvaluationFormVersion`
      Integer.validateJsonElement(jsonObj.get("EvaluationFormVersion"));
      // validate the required field `EvaluationFormId`
      String.validateJsonElement(jsonObj.get("EvaluationFormId"));
      // validate the required field `EvaluationFormArn`
      String.validateJsonElement(jsonObj.get("EvaluationFormArn"));
      // validate the required field `Title`
      String.validateJsonElement(jsonObj.get("Title"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the required field `Items`
      List.validateJsonElement(jsonObj.get("Items"));
      // validate the optional field `ScoringStrategy`
      if (jsonObj.get("ScoringStrategy") != null && !jsonObj.get("ScoringStrategy").isJsonNull()) {
        CreateEvaluationFormRequestScoringStrategy.validateJsonElement(jsonObj.get("ScoringStrategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluationFormContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluationFormContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluationFormContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluationFormContent.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluationFormContent>() {
           @Override
           public void write(JsonWriter out, EvaluationFormContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluationFormContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluationFormContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluationFormContent
   * @throws IOException if the JSON string is invalid with respect to EvaluationFormContent
   */
  public static EvaluationFormContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluationFormContent.class);
  }

  /**
   * Convert an instance of EvaluationFormContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

