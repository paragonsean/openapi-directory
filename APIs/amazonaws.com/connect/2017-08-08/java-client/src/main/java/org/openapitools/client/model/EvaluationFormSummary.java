/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary information about an evaluation form.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluationFormSummary {
  public static final String SERIALIZED_NAME_EVALUATION_FORM_ID = "EvaluationFormId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FORM_ID)
  private String evaluationFormId;

  public static final String SERIALIZED_NAME_EVALUATION_FORM_ARN = "EvaluationFormArn";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FORM_ARN)
  private String evaluationFormArn;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_CREATED_BY = "CreatedBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "LastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_LAST_ACTIVATED_TIME = "LastActivatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVATED_TIME)
  private OffsetDateTime lastActivatedTime;

  public static final String SERIALIZED_NAME_LAST_ACTIVATED_BY = "LastActivatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVATED_BY)
  private String lastActivatedBy;

  public static final String SERIALIZED_NAME_LATEST_VERSION = "LatestVersion";
  @SerializedName(SERIALIZED_NAME_LATEST_VERSION)
  private Integer latestVersion;

  public static final String SERIALIZED_NAME_ACTIVE_VERSION = "ActiveVersion";
  @SerializedName(SERIALIZED_NAME_ACTIVE_VERSION)
  private Integer activeVersion;

  public EvaluationFormSummary() {
  }

  public EvaluationFormSummary evaluationFormId(String evaluationFormId) {
    this.evaluationFormId = evaluationFormId;
    return this;
  }

  /**
   * Get evaluationFormId
   * @return evaluationFormId
   */
  @javax.annotation.Nonnull
  public String getEvaluationFormId() {
    return evaluationFormId;
  }

  public void setEvaluationFormId(String evaluationFormId) {
    this.evaluationFormId = evaluationFormId;
  }


  public EvaluationFormSummary evaluationFormArn(String evaluationFormArn) {
    this.evaluationFormArn = evaluationFormArn;
    return this;
  }

  /**
   * Get evaluationFormArn
   * @return evaluationFormArn
   */
  @javax.annotation.Nonnull
  public String getEvaluationFormArn() {
    return evaluationFormArn;
  }

  public void setEvaluationFormArn(String evaluationFormArn) {
    this.evaluationFormArn = evaluationFormArn;
  }


  public EvaluationFormSummary title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EvaluationFormSummary createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public EvaluationFormSummary createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public EvaluationFormSummary lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public EvaluationFormSummary lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Get lastModifiedBy
   * @return lastModifiedBy
   */
  @javax.annotation.Nonnull
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public EvaluationFormSummary lastActivatedTime(OffsetDateTime lastActivatedTime) {
    this.lastActivatedTime = lastActivatedTime;
    return this;
  }

  /**
   * Get lastActivatedTime
   * @return lastActivatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastActivatedTime() {
    return lastActivatedTime;
  }

  public void setLastActivatedTime(OffsetDateTime lastActivatedTime) {
    this.lastActivatedTime = lastActivatedTime;
  }


  public EvaluationFormSummary lastActivatedBy(String lastActivatedBy) {
    this.lastActivatedBy = lastActivatedBy;
    return this;
  }

  /**
   * Get lastActivatedBy
   * @return lastActivatedBy
   */
  @javax.annotation.Nullable
  public String getLastActivatedBy() {
    return lastActivatedBy;
  }

  public void setLastActivatedBy(String lastActivatedBy) {
    this.lastActivatedBy = lastActivatedBy;
  }


  public EvaluationFormSummary latestVersion(Integer latestVersion) {
    this.latestVersion = latestVersion;
    return this;
  }

  /**
   * Get latestVersion
   * @return latestVersion
   */
  @javax.annotation.Nonnull
  public Integer getLatestVersion() {
    return latestVersion;
  }

  public void setLatestVersion(Integer latestVersion) {
    this.latestVersion = latestVersion;
  }


  public EvaluationFormSummary activeVersion(Integer activeVersion) {
    this.activeVersion = activeVersion;
    return this;
  }

  /**
   * Get activeVersion
   * @return activeVersion
   */
  @javax.annotation.Nullable
  public Integer getActiveVersion() {
    return activeVersion;
  }

  public void setActiveVersion(Integer activeVersion) {
    this.activeVersion = activeVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluationFormSummary evaluationFormSummary = (EvaluationFormSummary) o;
    return Objects.equals(this.evaluationFormId, evaluationFormSummary.evaluationFormId) &&
        Objects.equals(this.evaluationFormArn, evaluationFormSummary.evaluationFormArn) &&
        Objects.equals(this.title, evaluationFormSummary.title) &&
        Objects.equals(this.createdTime, evaluationFormSummary.createdTime) &&
        Objects.equals(this.createdBy, evaluationFormSummary.createdBy) &&
        Objects.equals(this.lastModifiedTime, evaluationFormSummary.lastModifiedTime) &&
        Objects.equals(this.lastModifiedBy, evaluationFormSummary.lastModifiedBy) &&
        Objects.equals(this.lastActivatedTime, evaluationFormSummary.lastActivatedTime) &&
        Objects.equals(this.lastActivatedBy, evaluationFormSummary.lastActivatedBy) &&
        Objects.equals(this.latestVersion, evaluationFormSummary.latestVersion) &&
        Objects.equals(this.activeVersion, evaluationFormSummary.activeVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluationFormId, evaluationFormArn, title, createdTime, createdBy, lastModifiedTime, lastModifiedBy, lastActivatedTime, lastActivatedBy, latestVersion, activeVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluationFormSummary {\n");
    sb.append("    evaluationFormId: ").append(toIndentedString(evaluationFormId)).append("\n");
    sb.append("    evaluationFormArn: ").append(toIndentedString(evaluationFormArn)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    lastActivatedTime: ").append(toIndentedString(lastActivatedTime)).append("\n");
    sb.append("    lastActivatedBy: ").append(toIndentedString(lastActivatedBy)).append("\n");
    sb.append("    latestVersion: ").append(toIndentedString(latestVersion)).append("\n");
    sb.append("    activeVersion: ").append(toIndentedString(activeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EvaluationFormId");
    openapiFields.add("EvaluationFormArn");
    openapiFields.add("Title");
    openapiFields.add("CreatedTime");
    openapiFields.add("CreatedBy");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("LastModifiedBy");
    openapiFields.add("LastActivatedTime");
    openapiFields.add("LastActivatedBy");
    openapiFields.add("LatestVersion");
    openapiFields.add("ActiveVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EvaluationFormId");
    openapiRequiredFields.add("EvaluationFormArn");
    openapiRequiredFields.add("Title");
    openapiRequiredFields.add("CreatedTime");
    openapiRequiredFields.add("CreatedBy");
    openapiRequiredFields.add("LastModifiedTime");
    openapiRequiredFields.add("LastModifiedBy");
    openapiRequiredFields.add("LatestVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluationFormSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluationFormSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluationFormSummary is not found in the empty JSON string", EvaluationFormSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluationFormSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluationFormSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EvaluationFormSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EvaluationFormId`
      String.validateJsonElement(jsonObj.get("EvaluationFormId"));
      // validate the required field `EvaluationFormArn`
      String.validateJsonElement(jsonObj.get("EvaluationFormArn"));
      // validate the required field `Title`
      String.validateJsonElement(jsonObj.get("Title"));
      // validate the required field `CreatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      // validate the required field `CreatedBy`
      String.validateJsonElement(jsonObj.get("CreatedBy"));
      // validate the required field `LastModifiedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      // validate the required field `LastModifiedBy`
      String.validateJsonElement(jsonObj.get("LastModifiedBy"));
      // validate the optional field `LastActivatedTime`
      if (jsonObj.get("LastActivatedTime") != null && !jsonObj.get("LastActivatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastActivatedTime"));
      }
      // validate the optional field `LastActivatedBy`
      if (jsonObj.get("LastActivatedBy") != null && !jsonObj.get("LastActivatedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastActivatedBy"));
      }
      // validate the required field `LatestVersion`
      Integer.validateJsonElement(jsonObj.get("LatestVersion"));
      // validate the optional field `ActiveVersion`
      if (jsonObj.get("ActiveVersion") != null && !jsonObj.get("ActiveVersion").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ActiveVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluationFormSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluationFormSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluationFormSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluationFormSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluationFormSummary>() {
           @Override
           public void write(JsonWriter out, EvaluationFormSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluationFormSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluationFormSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluationFormSummary
   * @throws IOException if the JSON string is invalid with respect to EvaluationFormSummary
   */
  public static EvaluationFormSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluationFormSummary.class);
  }

  /**
   * Convert an instance of EvaluationFormSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

