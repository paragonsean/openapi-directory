/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateTaskTemplateRequestConstraints;
import org.openapitools.client.model.CreateTaskTemplateRequestDefaults;
import org.openapitools.client.model.TaskTemplateField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateTaskTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTaskTemplateRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CONTACT_FLOW_ID = "ContactFlowId";
  @SerializedName(SERIALIZED_NAME_CONTACT_FLOW_ID)
  private String contactFlowId;

  public static final String SERIALIZED_NAME_CONSTRAINTS = "Constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private CreateTaskTemplateRequestConstraints constraints;

  public static final String SERIALIZED_NAME_DEFAULTS = "Defaults";
  @SerializedName(SERIALIZED_NAME_DEFAULTS)
  private CreateTaskTemplateRequestDefaults defaults;

  /**
   * Marks a template as &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;INACTIVE&lt;/code&gt; for a task to refer to it. Tasks can only be created from &lt;code&gt;ACTIVE&lt;/code&gt; templates. If a template is marked as &lt;code&gt;INACTIVE&lt;/code&gt;, then a task that refers to this template cannot be created. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_FIELDS = "Fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<TaskTemplateField> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public CreateTaskTemplateRequest() {
  }

  public CreateTaskTemplateRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the task template.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateTaskTemplateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the task template.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateTaskTemplateRequest contactFlowId(String contactFlowId) {
    this.contactFlowId = contactFlowId;
    return this;
  }

  /**
   * The identifier of the flow that runs by default when a task is created by referencing this template.
   * @return contactFlowId
   */
  @javax.annotation.Nullable
  public String getContactFlowId() {
    return contactFlowId;
  }

  public void setContactFlowId(String contactFlowId) {
    this.contactFlowId = contactFlowId;
  }


  public CreateTaskTemplateRequest constraints(CreateTaskTemplateRequestConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public CreateTaskTemplateRequestConstraints getConstraints() {
    return constraints;
  }

  public void setConstraints(CreateTaskTemplateRequestConstraints constraints) {
    this.constraints = constraints;
  }


  public CreateTaskTemplateRequest defaults(CreateTaskTemplateRequestDefaults defaults) {
    this.defaults = defaults;
    return this;
  }

  /**
   * Get defaults
   * @return defaults
   */
  @javax.annotation.Nullable
  public CreateTaskTemplateRequestDefaults getDefaults() {
    return defaults;
  }

  public void setDefaults(CreateTaskTemplateRequestDefaults defaults) {
    this.defaults = defaults;
  }


  public CreateTaskTemplateRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Marks a template as &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;INACTIVE&lt;/code&gt; for a task to refer to it. Tasks can only be created from &lt;code&gt;ACTIVE&lt;/code&gt; templates. If a template is marked as &lt;code&gt;INACTIVE&lt;/code&gt;, then a task that refers to this template cannot be created. 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CreateTaskTemplateRequest fields(List<TaskTemplateField> fields) {
    this.fields = fields;
    return this;
  }

  public CreateTaskTemplateRequest addFieldsItem(TaskTemplateField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Fields that are part of the template.
   * @return fields
   */
  @javax.annotation.Nonnull
  public List<TaskTemplateField> getFields() {
    return fields;
  }

  public void setFields(List<TaskTemplateField> fields) {
    this.fields = fields;
  }


  public CreateTaskTemplateRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\&quot;&gt;Making retries safe with idempotent APIs&lt;/a&gt;.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTaskTemplateRequest createTaskTemplateRequest = (CreateTaskTemplateRequest) o;
    return Objects.equals(this.name, createTaskTemplateRequest.name) &&
        Objects.equals(this.description, createTaskTemplateRequest.description) &&
        Objects.equals(this.contactFlowId, createTaskTemplateRequest.contactFlowId) &&
        Objects.equals(this.constraints, createTaskTemplateRequest.constraints) &&
        Objects.equals(this.defaults, createTaskTemplateRequest.defaults) &&
        Objects.equals(this.status, createTaskTemplateRequest.status) &&
        Objects.equals(this.fields, createTaskTemplateRequest.fields) &&
        Objects.equals(this.clientToken, createTaskTemplateRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, contactFlowId, constraints, defaults, status, fields, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTaskTemplateRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    contactFlowId: ").append(toIndentedString(contactFlowId)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    defaults: ").append(toIndentedString(defaults)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("ContactFlowId");
    openapiFields.add("Constraints");
    openapiFields.add("Defaults");
    openapiFields.add("Status");
    openapiFields.add("Fields");
    openapiFields.add("ClientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Fields");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTaskTemplateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTaskTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTaskTemplateRequest is not found in the empty JSON string", CreateTaskTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTaskTemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTaskTemplateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTaskTemplateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("ContactFlowId") != null && !jsonObj.get("ContactFlowId").isJsonNull()) && !jsonObj.get("ContactFlowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactFlowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactFlowId").toString()));
      }
      // validate the optional field `Constraints`
      if (jsonObj.get("Constraints") != null && !jsonObj.get("Constraints").isJsonNull()) {
        CreateTaskTemplateRequestConstraints.validateJsonElement(jsonObj.get("Constraints"));
      }
      // validate the optional field `Defaults`
      if (jsonObj.get("Defaults") != null && !jsonObj.get("Defaults").isJsonNull()) {
        CreateTaskTemplateRequestDefaults.validateJsonElement(jsonObj.get("Defaults"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Fields` to be an array in the JSON string but got `%s`", jsonObj.get("Fields").toString()));
      }

      JsonArray jsonArrayfields = jsonObj.getAsJsonArray("Fields");
      // validate the required field `Fields` (array)
      for (int i = 0; i < jsonArrayfields.size(); i++) {
        TaskTemplateField.validateJsonElement(jsonArrayfields.get(i));
      };
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTaskTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTaskTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTaskTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTaskTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTaskTemplateRequest>() {
           @Override
           public void write(JsonWriter out, CreateTaskTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTaskTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTaskTemplateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTaskTemplateRequest
   * @throws IOException if the JSON string is invalid with respect to CreateTaskTemplateRequest
   */
  public static CreateTaskTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTaskTemplateRequest.class);
  }

  /**
   * Convert an instance of CreateTaskTemplateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

