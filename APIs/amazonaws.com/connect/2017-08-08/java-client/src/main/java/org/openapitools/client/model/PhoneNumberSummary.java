/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PhoneNumberCountryCode;
import org.openapitools.client.model.PhoneNumberType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains summary information about a phone number for a contact center.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhoneNumberSummary {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_TYPE = "PhoneNumberType";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_TYPE)
  private PhoneNumberType phoneNumberType;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_COUNTRY_CODE = "PhoneNumberCountryCode";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_COUNTRY_CODE)
  private PhoneNumberCountryCode phoneNumberCountryCode;

  public PhoneNumberSummary() {
  }

  public PhoneNumberSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PhoneNumberSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public PhoneNumberSummary phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public PhoneNumberSummary phoneNumberType(PhoneNumberType phoneNumberType) {
    this.phoneNumberType = phoneNumberType;
    return this;
  }

  /**
   * Get phoneNumberType
   * @return phoneNumberType
   */
  @javax.annotation.Nullable
  public PhoneNumberType getPhoneNumberType() {
    return phoneNumberType;
  }

  public void setPhoneNumberType(PhoneNumberType phoneNumberType) {
    this.phoneNumberType = phoneNumberType;
  }


  public PhoneNumberSummary phoneNumberCountryCode(PhoneNumberCountryCode phoneNumberCountryCode) {
    this.phoneNumberCountryCode = phoneNumberCountryCode;
    return this;
  }

  /**
   * Get phoneNumberCountryCode
   * @return phoneNumberCountryCode
   */
  @javax.annotation.Nullable
  public PhoneNumberCountryCode getPhoneNumberCountryCode() {
    return phoneNumberCountryCode;
  }

  public void setPhoneNumberCountryCode(PhoneNumberCountryCode phoneNumberCountryCode) {
    this.phoneNumberCountryCode = phoneNumberCountryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneNumberSummary phoneNumberSummary = (PhoneNumberSummary) o;
    return Objects.equals(this.id, phoneNumberSummary.id) &&
        Objects.equals(this.arn, phoneNumberSummary.arn) &&
        Objects.equals(this.phoneNumber, phoneNumberSummary.phoneNumber) &&
        Objects.equals(this.phoneNumberType, phoneNumberSummary.phoneNumberType) &&
        Objects.equals(this.phoneNumberCountryCode, phoneNumberSummary.phoneNumberCountryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, phoneNumber, phoneNumberType, phoneNumberCountryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneNumberSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneNumberType: ").append(toIndentedString(phoneNumberType)).append("\n");
    sb.append("    phoneNumberCountryCode: ").append(toIndentedString(phoneNumberCountryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Arn");
    openapiFields.add("PhoneNumber");
    openapiFields.add("PhoneNumberType");
    openapiFields.add("PhoneNumberCountryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneNumberSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhoneNumberSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneNumberSummary is not found in the empty JSON string", PhoneNumberSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneNumberSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneNumberSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `PhoneNumber`
      if (jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneNumber"));
      }
      // validate the optional field `PhoneNumberType`
      if (jsonObj.get("PhoneNumberType") != null && !jsonObj.get("PhoneNumberType").isJsonNull()) {
        PhoneNumberType.validateJsonElement(jsonObj.get("PhoneNumberType"));
      }
      // validate the optional field `PhoneNumberCountryCode`
      if (jsonObj.get("PhoneNumberCountryCode") != null && !jsonObj.get("PhoneNumberCountryCode").isJsonNull()) {
        PhoneNumberCountryCode.validateJsonElement(jsonObj.get("PhoneNumberCountryCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneNumberSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneNumberSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneNumberSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneNumberSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneNumberSummary>() {
           @Override
           public void write(JsonWriter out, PhoneNumberSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneNumberSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneNumberSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneNumberSummary
   * @throws IOException if the JSON string is invalid with respect to PhoneNumberSummary
   */
  public static PhoneNumberSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneNumberSummary.class);
  }

  /**
   * Convert an instance of PhoneNumberSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

