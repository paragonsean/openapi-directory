/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ClaimedPhoneNumberSummaryPhoneNumberStatus;
import org.openapitools.client.model.PhoneNumberCountryCode;
import org.openapitools.client.model.PhoneNumberType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a phone number that has been claimed to your Amazon Connect instance or traffic distribution group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClaimedPhoneNumberSummary {
  public static final String SERIALIZED_NAME_PHONE_NUMBER_ID = "PhoneNumberId";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_ID)
  private String phoneNumberId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_ARN = "PhoneNumberArn";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_ARN)
  private String phoneNumberArn;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_COUNTRY_CODE = "PhoneNumberCountryCode";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_COUNTRY_CODE)
  private PhoneNumberCountryCode phoneNumberCountryCode;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_TYPE = "PhoneNumberType";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_TYPE)
  private PhoneNumberType phoneNumberType;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_DESCRIPTION = "PhoneNumberDescription";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_DESCRIPTION)
  private String phoneNumberDescription;

  public static final String SERIALIZED_NAME_TARGET_ARN = "TargetArn";
  @SerializedName(SERIALIZED_NAME_TARGET_ARN)
  private String targetArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_STATUS = "PhoneNumberStatus";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_STATUS)
  private ClaimedPhoneNumberSummaryPhoneNumberStatus phoneNumberStatus;

  public ClaimedPhoneNumberSummary() {
  }

  public ClaimedPhoneNumberSummary phoneNumberId(String phoneNumberId) {
    this.phoneNumberId = phoneNumberId;
    return this;
  }

  /**
   * Get phoneNumberId
   * @return phoneNumberId
   */
  @javax.annotation.Nullable
  public String getPhoneNumberId() {
    return phoneNumberId;
  }

  public void setPhoneNumberId(String phoneNumberId) {
    this.phoneNumberId = phoneNumberId;
  }


  public ClaimedPhoneNumberSummary phoneNumberArn(String phoneNumberArn) {
    this.phoneNumberArn = phoneNumberArn;
    return this;
  }

  /**
   * Get phoneNumberArn
   * @return phoneNumberArn
   */
  @javax.annotation.Nullable
  public String getPhoneNumberArn() {
    return phoneNumberArn;
  }

  public void setPhoneNumberArn(String phoneNumberArn) {
    this.phoneNumberArn = phoneNumberArn;
  }


  public ClaimedPhoneNumberSummary phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ClaimedPhoneNumberSummary phoneNumberCountryCode(PhoneNumberCountryCode phoneNumberCountryCode) {
    this.phoneNumberCountryCode = phoneNumberCountryCode;
    return this;
  }

  /**
   * Get phoneNumberCountryCode
   * @return phoneNumberCountryCode
   */
  @javax.annotation.Nullable
  public PhoneNumberCountryCode getPhoneNumberCountryCode() {
    return phoneNumberCountryCode;
  }

  public void setPhoneNumberCountryCode(PhoneNumberCountryCode phoneNumberCountryCode) {
    this.phoneNumberCountryCode = phoneNumberCountryCode;
  }


  public ClaimedPhoneNumberSummary phoneNumberType(PhoneNumberType phoneNumberType) {
    this.phoneNumberType = phoneNumberType;
    return this;
  }

  /**
   * Get phoneNumberType
   * @return phoneNumberType
   */
  @javax.annotation.Nullable
  public PhoneNumberType getPhoneNumberType() {
    return phoneNumberType;
  }

  public void setPhoneNumberType(PhoneNumberType phoneNumberType) {
    this.phoneNumberType = phoneNumberType;
  }


  public ClaimedPhoneNumberSummary phoneNumberDescription(String phoneNumberDescription) {
    this.phoneNumberDescription = phoneNumberDescription;
    return this;
  }

  /**
   * Get phoneNumberDescription
   * @return phoneNumberDescription
   */
  @javax.annotation.Nullable
  public String getPhoneNumberDescription() {
    return phoneNumberDescription;
  }

  public void setPhoneNumberDescription(String phoneNumberDescription) {
    this.phoneNumberDescription = phoneNumberDescription;
  }


  public ClaimedPhoneNumberSummary targetArn(String targetArn) {
    this.targetArn = targetArn;
    return this;
  }

  /**
   * Get targetArn
   * @return targetArn
   */
  @javax.annotation.Nullable
  public String getTargetArn() {
    return targetArn;
  }

  public void setTargetArn(String targetArn) {
    this.targetArn = targetArn;
  }


  public ClaimedPhoneNumberSummary tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public ClaimedPhoneNumberSummary phoneNumberStatus(ClaimedPhoneNumberSummaryPhoneNumberStatus phoneNumberStatus) {
    this.phoneNumberStatus = phoneNumberStatus;
    return this;
  }

  /**
   * Get phoneNumberStatus
   * @return phoneNumberStatus
   */
  @javax.annotation.Nullable
  public ClaimedPhoneNumberSummaryPhoneNumberStatus getPhoneNumberStatus() {
    return phoneNumberStatus;
  }

  public void setPhoneNumberStatus(ClaimedPhoneNumberSummaryPhoneNumberStatus phoneNumberStatus) {
    this.phoneNumberStatus = phoneNumberStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClaimedPhoneNumberSummary claimedPhoneNumberSummary = (ClaimedPhoneNumberSummary) o;
    return Objects.equals(this.phoneNumberId, claimedPhoneNumberSummary.phoneNumberId) &&
        Objects.equals(this.phoneNumberArn, claimedPhoneNumberSummary.phoneNumberArn) &&
        Objects.equals(this.phoneNumber, claimedPhoneNumberSummary.phoneNumber) &&
        Objects.equals(this.phoneNumberCountryCode, claimedPhoneNumberSummary.phoneNumberCountryCode) &&
        Objects.equals(this.phoneNumberType, claimedPhoneNumberSummary.phoneNumberType) &&
        Objects.equals(this.phoneNumberDescription, claimedPhoneNumberSummary.phoneNumberDescription) &&
        Objects.equals(this.targetArn, claimedPhoneNumberSummary.targetArn) &&
        Objects.equals(this.tags, claimedPhoneNumberSummary.tags) &&
        Objects.equals(this.phoneNumberStatus, claimedPhoneNumberSummary.phoneNumberStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneNumberId, phoneNumberArn, phoneNumber, phoneNumberCountryCode, phoneNumberType, phoneNumberDescription, targetArn, tags, phoneNumberStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClaimedPhoneNumberSummary {\n");
    sb.append("    phoneNumberId: ").append(toIndentedString(phoneNumberId)).append("\n");
    sb.append("    phoneNumberArn: ").append(toIndentedString(phoneNumberArn)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneNumberCountryCode: ").append(toIndentedString(phoneNumberCountryCode)).append("\n");
    sb.append("    phoneNumberType: ").append(toIndentedString(phoneNumberType)).append("\n");
    sb.append("    phoneNumberDescription: ").append(toIndentedString(phoneNumberDescription)).append("\n");
    sb.append("    targetArn: ").append(toIndentedString(targetArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    phoneNumberStatus: ").append(toIndentedString(phoneNumberStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PhoneNumberId");
    openapiFields.add("PhoneNumberArn");
    openapiFields.add("PhoneNumber");
    openapiFields.add("PhoneNumberCountryCode");
    openapiFields.add("PhoneNumberType");
    openapiFields.add("PhoneNumberDescription");
    openapiFields.add("TargetArn");
    openapiFields.add("Tags");
    openapiFields.add("PhoneNumberStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClaimedPhoneNumberSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClaimedPhoneNumberSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClaimedPhoneNumberSummary is not found in the empty JSON string", ClaimedPhoneNumberSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClaimedPhoneNumberSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClaimedPhoneNumberSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PhoneNumberId`
      if (jsonObj.get("PhoneNumberId") != null && !jsonObj.get("PhoneNumberId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneNumberId"));
      }
      // validate the optional field `PhoneNumberArn`
      if (jsonObj.get("PhoneNumberArn") != null && !jsonObj.get("PhoneNumberArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneNumberArn"));
      }
      // validate the optional field `PhoneNumber`
      if (jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneNumber"));
      }
      // validate the optional field `PhoneNumberCountryCode`
      if (jsonObj.get("PhoneNumberCountryCode") != null && !jsonObj.get("PhoneNumberCountryCode").isJsonNull()) {
        PhoneNumberCountryCode.validateJsonElement(jsonObj.get("PhoneNumberCountryCode"));
      }
      // validate the optional field `PhoneNumberType`
      if (jsonObj.get("PhoneNumberType") != null && !jsonObj.get("PhoneNumberType").isJsonNull()) {
        PhoneNumberType.validateJsonElement(jsonObj.get("PhoneNumberType"));
      }
      // validate the optional field `PhoneNumberDescription`
      if (jsonObj.get("PhoneNumberDescription") != null && !jsonObj.get("PhoneNumberDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneNumberDescription"));
      }
      // validate the optional field `TargetArn`
      if (jsonObj.get("TargetArn") != null && !jsonObj.get("TargetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetArn"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `PhoneNumberStatus`
      if (jsonObj.get("PhoneNumberStatus") != null && !jsonObj.get("PhoneNumberStatus").isJsonNull()) {
        ClaimedPhoneNumberSummaryPhoneNumberStatus.validateJsonElement(jsonObj.get("PhoneNumberStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClaimedPhoneNumberSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClaimedPhoneNumberSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClaimedPhoneNumberSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClaimedPhoneNumberSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ClaimedPhoneNumberSummary>() {
           @Override
           public void write(JsonWriter out, ClaimedPhoneNumberSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClaimedPhoneNumberSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClaimedPhoneNumberSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClaimedPhoneNumberSummary
   * @throws IOException if the JSON string is invalid with respect to ClaimedPhoneNumberSummary
   */
  public static ClaimedPhoneNumberSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClaimedPhoneNumberSummary.class);
  }

  /**
   * Convert an instance of ClaimedPhoneNumberSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

