/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EvaluationFormSingleSelectQuestionDisplayMode;
import org.openapitools.client.model.EvaluationFormSingleSelectQuestionPropertiesAutomation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the options in single select questions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluationFormSingleSelectQuestionProperties {
  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List options;

  public static final String SERIALIZED_NAME_DISPLAY_AS = "DisplayAs";
  @SerializedName(SERIALIZED_NAME_DISPLAY_AS)
  private EvaluationFormSingleSelectQuestionDisplayMode displayAs;

  public static final String SERIALIZED_NAME_AUTOMATION = "Automation";
  @SerializedName(SERIALIZED_NAME_AUTOMATION)
  private EvaluationFormSingleSelectQuestionPropertiesAutomation automation;

  public EvaluationFormSingleSelectQuestionProperties() {
  }

  public EvaluationFormSingleSelectQuestionProperties options(List options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nonnull
  public List getOptions() {
    return options;
  }

  public void setOptions(List options) {
    this.options = options;
  }


  public EvaluationFormSingleSelectQuestionProperties displayAs(EvaluationFormSingleSelectQuestionDisplayMode displayAs) {
    this.displayAs = displayAs;
    return this;
  }

  /**
   * Get displayAs
   * @return displayAs
   */
  @javax.annotation.Nullable
  public EvaluationFormSingleSelectQuestionDisplayMode getDisplayAs() {
    return displayAs;
  }

  public void setDisplayAs(EvaluationFormSingleSelectQuestionDisplayMode displayAs) {
    this.displayAs = displayAs;
  }


  public EvaluationFormSingleSelectQuestionProperties automation(EvaluationFormSingleSelectQuestionPropertiesAutomation automation) {
    this.automation = automation;
    return this;
  }

  /**
   * Get automation
   * @return automation
   */
  @javax.annotation.Nullable
  public EvaluationFormSingleSelectQuestionPropertiesAutomation getAutomation() {
    return automation;
  }

  public void setAutomation(EvaluationFormSingleSelectQuestionPropertiesAutomation automation) {
    this.automation = automation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluationFormSingleSelectQuestionProperties evaluationFormSingleSelectQuestionProperties = (EvaluationFormSingleSelectQuestionProperties) o;
    return Objects.equals(this.options, evaluationFormSingleSelectQuestionProperties.options) &&
        Objects.equals(this.displayAs, evaluationFormSingleSelectQuestionProperties.displayAs) &&
        Objects.equals(this.automation, evaluationFormSingleSelectQuestionProperties.automation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(options, displayAs, automation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluationFormSingleSelectQuestionProperties {\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    displayAs: ").append(toIndentedString(displayAs)).append("\n");
    sb.append("    automation: ").append(toIndentedString(automation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Options");
    openapiFields.add("DisplayAs");
    openapiFields.add("Automation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Options");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluationFormSingleSelectQuestionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluationFormSingleSelectQuestionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluationFormSingleSelectQuestionProperties is not found in the empty JSON string", EvaluationFormSingleSelectQuestionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluationFormSingleSelectQuestionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluationFormSingleSelectQuestionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EvaluationFormSingleSelectQuestionProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Options`
      List.validateJsonElement(jsonObj.get("Options"));
      // validate the optional field `DisplayAs`
      if (jsonObj.get("DisplayAs") != null && !jsonObj.get("DisplayAs").isJsonNull()) {
        EvaluationFormSingleSelectQuestionDisplayMode.validateJsonElement(jsonObj.get("DisplayAs"));
      }
      // validate the optional field `Automation`
      if (jsonObj.get("Automation") != null && !jsonObj.get("Automation").isJsonNull()) {
        EvaluationFormSingleSelectQuestionPropertiesAutomation.validateJsonElement(jsonObj.get("Automation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluationFormSingleSelectQuestionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluationFormSingleSelectQuestionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluationFormSingleSelectQuestionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluationFormSingleSelectQuestionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluationFormSingleSelectQuestionProperties>() {
           @Override
           public void write(JsonWriter out, EvaluationFormSingleSelectQuestionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluationFormSingleSelectQuestionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluationFormSingleSelectQuestionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluationFormSingleSelectQuestionProperties
   * @throws IOException if the JSON string is invalid with respect to EvaluationFormSingleSelectQuestionProperties
   */
  public static EvaluationFormSingleSelectQuestionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluationFormSingleSelectQuestionProperties.class);
  }

  /**
   * Convert an instance of EvaluationFormSingleSelectQuestionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

