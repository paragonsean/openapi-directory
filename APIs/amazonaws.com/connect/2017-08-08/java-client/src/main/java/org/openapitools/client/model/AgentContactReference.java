/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.ContactInitiationMethod;
import org.openapitools.client.model.ContactState;
import org.openapitools.client.model.QueueReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_Contact.html\&quot;&gt;contact&lt;/a&gt; associated to the user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgentContactReference {
  public static final String SERIALIZED_NAME_CONTACT_ID = "ContactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public static final String SERIALIZED_NAME_CHANNEL = "Channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private Channel channel;

  public static final String SERIALIZED_NAME_INITIATION_METHOD = "InitiationMethod";
  @SerializedName(SERIALIZED_NAME_INITIATION_METHOD)
  private ContactInitiationMethod initiationMethod;

  public static final String SERIALIZED_NAME_AGENT_CONTACT_STATE = "AgentContactState";
  @SerializedName(SERIALIZED_NAME_AGENT_CONTACT_STATE)
  private ContactState agentContactState;

  public static final String SERIALIZED_NAME_STATE_START_TIMESTAMP = "StateStartTimestamp";
  @SerializedName(SERIALIZED_NAME_STATE_START_TIMESTAMP)
  private OffsetDateTime stateStartTimestamp;

  public static final String SERIALIZED_NAME_CONNECTED_TO_AGENT_TIMESTAMP = "ConnectedToAgentTimestamp";
  @SerializedName(SERIALIZED_NAME_CONNECTED_TO_AGENT_TIMESTAMP)
  private OffsetDateTime connectedToAgentTimestamp;

  public static final String SERIALIZED_NAME_QUEUE = "Queue";
  @SerializedName(SERIALIZED_NAME_QUEUE)
  private QueueReference queue;

  public AgentContactReference() {
  }

  public AgentContactReference contactId(String contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * Get contactId
   * @return contactId
   */
  @javax.annotation.Nullable
  public String getContactId() {
    return contactId;
  }

  public void setContactId(String contactId) {
    this.contactId = contactId;
  }


  public AgentContactReference channel(Channel channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public Channel getChannel() {
    return channel;
  }

  public void setChannel(Channel channel) {
    this.channel = channel;
  }


  public AgentContactReference initiationMethod(ContactInitiationMethod initiationMethod) {
    this.initiationMethod = initiationMethod;
    return this;
  }

  /**
   * Get initiationMethod
   * @return initiationMethod
   */
  @javax.annotation.Nullable
  public ContactInitiationMethod getInitiationMethod() {
    return initiationMethod;
  }

  public void setInitiationMethod(ContactInitiationMethod initiationMethod) {
    this.initiationMethod = initiationMethod;
  }


  public AgentContactReference agentContactState(ContactState agentContactState) {
    this.agentContactState = agentContactState;
    return this;
  }

  /**
   * Get agentContactState
   * @return agentContactState
   */
  @javax.annotation.Nullable
  public ContactState getAgentContactState() {
    return agentContactState;
  }

  public void setAgentContactState(ContactState agentContactState) {
    this.agentContactState = agentContactState;
  }


  public AgentContactReference stateStartTimestamp(OffsetDateTime stateStartTimestamp) {
    this.stateStartTimestamp = stateStartTimestamp;
    return this;
  }

  /**
   * Get stateStartTimestamp
   * @return stateStartTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateStartTimestamp() {
    return stateStartTimestamp;
  }

  public void setStateStartTimestamp(OffsetDateTime stateStartTimestamp) {
    this.stateStartTimestamp = stateStartTimestamp;
  }


  public AgentContactReference connectedToAgentTimestamp(OffsetDateTime connectedToAgentTimestamp) {
    this.connectedToAgentTimestamp = connectedToAgentTimestamp;
    return this;
  }

  /**
   * Get connectedToAgentTimestamp
   * @return connectedToAgentTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getConnectedToAgentTimestamp() {
    return connectedToAgentTimestamp;
  }

  public void setConnectedToAgentTimestamp(OffsetDateTime connectedToAgentTimestamp) {
    this.connectedToAgentTimestamp = connectedToAgentTimestamp;
  }


  public AgentContactReference queue(QueueReference queue) {
    this.queue = queue;
    return this;
  }

  /**
   * Get queue
   * @return queue
   */
  @javax.annotation.Nullable
  public QueueReference getQueue() {
    return queue;
  }

  public void setQueue(QueueReference queue) {
    this.queue = queue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentContactReference agentContactReference = (AgentContactReference) o;
    return Objects.equals(this.contactId, agentContactReference.contactId) &&
        Objects.equals(this.channel, agentContactReference.channel) &&
        Objects.equals(this.initiationMethod, agentContactReference.initiationMethod) &&
        Objects.equals(this.agentContactState, agentContactReference.agentContactState) &&
        Objects.equals(this.stateStartTimestamp, agentContactReference.stateStartTimestamp) &&
        Objects.equals(this.connectedToAgentTimestamp, agentContactReference.connectedToAgentTimestamp) &&
        Objects.equals(this.queue, agentContactReference.queue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactId, channel, initiationMethod, agentContactState, stateStartTimestamp, connectedToAgentTimestamp, queue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentContactReference {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    initiationMethod: ").append(toIndentedString(initiationMethod)).append("\n");
    sb.append("    agentContactState: ").append(toIndentedString(agentContactState)).append("\n");
    sb.append("    stateStartTimestamp: ").append(toIndentedString(stateStartTimestamp)).append("\n");
    sb.append("    connectedToAgentTimestamp: ").append(toIndentedString(connectedToAgentTimestamp)).append("\n");
    sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContactId");
    openapiFields.add("Channel");
    openapiFields.add("InitiationMethod");
    openapiFields.add("AgentContactState");
    openapiFields.add("StateStartTimestamp");
    openapiFields.add("ConnectedToAgentTimestamp");
    openapiFields.add("Queue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgentContactReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentContactReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentContactReference is not found in the empty JSON string", AgentContactReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentContactReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentContactReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ContactId`
      if (jsonObj.get("ContactId") != null && !jsonObj.get("ContactId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContactId"));
      }
      // validate the optional field `Channel`
      if (jsonObj.get("Channel") != null && !jsonObj.get("Channel").isJsonNull()) {
        Channel.validateJsonElement(jsonObj.get("Channel"));
      }
      // validate the optional field `InitiationMethod`
      if (jsonObj.get("InitiationMethod") != null && !jsonObj.get("InitiationMethod").isJsonNull()) {
        ContactInitiationMethod.validateJsonElement(jsonObj.get("InitiationMethod"));
      }
      // validate the optional field `AgentContactState`
      if (jsonObj.get("AgentContactState") != null && !jsonObj.get("AgentContactState").isJsonNull()) {
        ContactState.validateJsonElement(jsonObj.get("AgentContactState"));
      }
      // validate the optional field `StateStartTimestamp`
      if (jsonObj.get("StateStartTimestamp") != null && !jsonObj.get("StateStartTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StateStartTimestamp"));
      }
      // validate the optional field `ConnectedToAgentTimestamp`
      if (jsonObj.get("ConnectedToAgentTimestamp") != null && !jsonObj.get("ConnectedToAgentTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ConnectedToAgentTimestamp"));
      }
      // validate the optional field `Queue`
      if (jsonObj.get("Queue") != null && !jsonObj.get("Queue").isJsonNull()) {
        QueueReference.validateJsonElement(jsonObj.get("Queue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentContactReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentContactReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentContactReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentContactReference.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentContactReference>() {
           @Override
           public void write(JsonWriter out, AgentContactReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentContactReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgentContactReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgentContactReference
   * @throws IOException if the JSON string is invalid with respect to AgentContactReference
   */
  public static AgentContactReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentContactReference.class);
  }

  /**
   * Convert an instance of AgentContactReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

