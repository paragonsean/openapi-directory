/*
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateUserRequestIdentityInfo;
import org.openapitools.client.model.CreateUserRequestPhoneConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUserRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:13.911190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUserRequest {
  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_IDENTITY_INFO = "IdentityInfo";
  @SerializedName(SERIALIZED_NAME_IDENTITY_INFO)
  private CreateUserRequestIdentityInfo identityInfo;

  public static final String SERIALIZED_NAME_PHONE_CONFIG = "PhoneConfig";
  @SerializedName(SERIALIZED_NAME_PHONE_CONFIG)
  private CreateUserRequestPhoneConfig phoneConfig;

  public static final String SERIALIZED_NAME_DIRECTORY_USER_ID = "DirectoryUserId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_USER_ID)
  private String directoryUserId;

  public static final String SERIALIZED_NAME_SECURITY_PROFILE_IDS = "SecurityProfileIds";
  @SerializedName(SERIALIZED_NAME_SECURITY_PROFILE_IDS)
  private List<String> securityProfileIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUTING_PROFILE_ID = "RoutingProfileId";
  @SerializedName(SERIALIZED_NAME_ROUTING_PROFILE_ID)
  private String routingProfileId;

  public static final String SERIALIZED_NAME_HIERARCHY_GROUP_ID = "HierarchyGroupId";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_GROUP_ID)
  private String hierarchyGroupId;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateUserRequest() {
  }

  public CreateUserRequest username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from [a-zA-Z0-9_-.\\@]+.
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public CreateUserRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public CreateUserRequest identityInfo(CreateUserRequestIdentityInfo identityInfo) {
    this.identityInfo = identityInfo;
    return this;
  }

  /**
   * Get identityInfo
   * @return identityInfo
   */
  @javax.annotation.Nullable
  public CreateUserRequestIdentityInfo getIdentityInfo() {
    return identityInfo;
  }

  public void setIdentityInfo(CreateUserRequestIdentityInfo identityInfo) {
    this.identityInfo = identityInfo;
  }


  public CreateUserRequest phoneConfig(CreateUserRequestPhoneConfig phoneConfig) {
    this.phoneConfig = phoneConfig;
    return this;
  }

  /**
   * Get phoneConfig
   * @return phoneConfig
   */
  @javax.annotation.Nonnull
  public CreateUserRequestPhoneConfig getPhoneConfig() {
    return phoneConfig;
  }

  public void setPhoneConfig(CreateUserRequestPhoneConfig phoneConfig) {
    this.phoneConfig = phoneConfig;
  }


  public CreateUserRequest directoryUserId(String directoryUserId) {
    this.directoryUserId = directoryUserId;
    return this;
  }

  /**
   * &lt;p&gt;The identifier of the user account in the directory used for identity management. If Amazon Connect cannot access the directory, you can specify this identifier to authenticate users. If you include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity information is used to authenticate users from your directory.&lt;/p&gt; &lt;p&gt;This parameter is required if you are using an existing directory for identity management in Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for identity management and include this parameter, an error is returned.&lt;/p&gt;
   * @return directoryUserId
   */
  @javax.annotation.Nullable
  public String getDirectoryUserId() {
    return directoryUserId;
  }

  public void setDirectoryUserId(String directoryUserId) {
    this.directoryUserId = directoryUserId;
  }


  public CreateUserRequest securityProfileIds(List<String> securityProfileIds) {
    this.securityProfileIds = securityProfileIds;
    return this;
  }

  public CreateUserRequest addSecurityProfileIdsItem(String securityProfileIdsItem) {
    if (this.securityProfileIds == null) {
      this.securityProfileIds = new ArrayList<>();
    }
    this.securityProfileIds.add(securityProfileIdsItem);
    return this;
  }

  /**
   * The identifier of the security profile for the user.
   * @return securityProfileIds
   */
  @javax.annotation.Nonnull
  public List<String> getSecurityProfileIds() {
    return securityProfileIds;
  }

  public void setSecurityProfileIds(List<String> securityProfileIds) {
    this.securityProfileIds = securityProfileIds;
  }


  public CreateUserRequest routingProfileId(String routingProfileId) {
    this.routingProfileId = routingProfileId;
    return this;
  }

  /**
   * The identifier of the routing profile for the user.
   * @return routingProfileId
   */
  @javax.annotation.Nonnull
  public String getRoutingProfileId() {
    return routingProfileId;
  }

  public void setRoutingProfileId(String routingProfileId) {
    this.routingProfileId = routingProfileId;
  }


  public CreateUserRequest hierarchyGroupId(String hierarchyGroupId) {
    this.hierarchyGroupId = hierarchyGroupId;
    return this;
  }

  /**
   * The identifier of the hierarchy group for the user.
   * @return hierarchyGroupId
   */
  @javax.annotation.Nullable
  public String getHierarchyGroupId() {
    return hierarchyGroupId;
  }

  public void setHierarchyGroupId(String hierarchyGroupId) {
    this.hierarchyGroupId = hierarchyGroupId;
  }


  public CreateUserRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateUserRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags used to organize, track, or control access for this resource. For example, { \&quot;tags\&quot;: {\&quot;key1\&quot;:\&quot;value1\&quot;, \&quot;key2\&quot;:\&quot;value2\&quot;} }.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUserRequest createUserRequest = (CreateUserRequest) o;
    return Objects.equals(this.username, createUserRequest.username) &&
        Objects.equals(this.password, createUserRequest.password) &&
        Objects.equals(this.identityInfo, createUserRequest.identityInfo) &&
        Objects.equals(this.phoneConfig, createUserRequest.phoneConfig) &&
        Objects.equals(this.directoryUserId, createUserRequest.directoryUserId) &&
        Objects.equals(this.securityProfileIds, createUserRequest.securityProfileIds) &&
        Objects.equals(this.routingProfileId, createUserRequest.routingProfileId) &&
        Objects.equals(this.hierarchyGroupId, createUserRequest.hierarchyGroupId) &&
        Objects.equals(this.tags, createUserRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, password, identityInfo, phoneConfig, directoryUserId, securityProfileIds, routingProfileId, hierarchyGroupId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUserRequest {\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    identityInfo: ").append(toIndentedString(identityInfo)).append("\n");
    sb.append("    phoneConfig: ").append(toIndentedString(phoneConfig)).append("\n");
    sb.append("    directoryUserId: ").append(toIndentedString(directoryUserId)).append("\n");
    sb.append("    securityProfileIds: ").append(toIndentedString(securityProfileIds)).append("\n");
    sb.append("    routingProfileId: ").append(toIndentedString(routingProfileId)).append("\n");
    sb.append("    hierarchyGroupId: ").append(toIndentedString(hierarchyGroupId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Username");
    openapiFields.add("Password");
    openapiFields.add("IdentityInfo");
    openapiFields.add("PhoneConfig");
    openapiFields.add("DirectoryUserId");
    openapiFields.add("SecurityProfileIds");
    openapiFields.add("RoutingProfileId");
    openapiFields.add("HierarchyGroupId");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Username");
    openapiRequiredFields.add("PhoneConfig");
    openapiRequiredFields.add("SecurityProfileIds");
    openapiRequiredFields.add("RoutingProfileId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUserRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUserRequest is not found in the empty JSON string", CreateUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUserRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Username").toString()));
      }
      if ((jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) && !jsonObj.get("Password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Password").toString()));
      }
      // validate the optional field `IdentityInfo`
      if (jsonObj.get("IdentityInfo") != null && !jsonObj.get("IdentityInfo").isJsonNull()) {
        CreateUserRequestIdentityInfo.validateJsonElement(jsonObj.get("IdentityInfo"));
      }
      // validate the required field `PhoneConfig`
      CreateUserRequestPhoneConfig.validateJsonElement(jsonObj.get("PhoneConfig"));
      if ((jsonObj.get("DirectoryUserId") != null && !jsonObj.get("DirectoryUserId").isJsonNull()) && !jsonObj.get("DirectoryUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DirectoryUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DirectoryUserId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("SecurityProfileIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("SecurityProfileIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecurityProfileIds` to be an array in the JSON string but got `%s`", jsonObj.get("SecurityProfileIds").toString()));
      }
      if (!jsonObj.get("RoutingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoutingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoutingProfileId").toString()));
      }
      if ((jsonObj.get("HierarchyGroupId") != null && !jsonObj.get("HierarchyGroupId").isJsonNull()) && !jsonObj.get("HierarchyGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HierarchyGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HierarchyGroupId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUserRequest>() {
           @Override
           public void write(JsonWriter out, CreateUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUserRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUserRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUserRequest
   * @throws IOException if the JSON string is invalid with respect to CreateUserRequest
   */
  public static CreateUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUserRequest.class);
  }

  /**
   * Convert an instance of CreateUserRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

