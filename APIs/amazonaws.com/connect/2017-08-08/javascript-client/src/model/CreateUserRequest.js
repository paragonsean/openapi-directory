/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateUserRequestIdentityInfo from './CreateUserRequestIdentityInfo';
import CreateUserRequestPhoneConfig from './CreateUserRequestPhoneConfig';

/**
 * The CreateUserRequest model module.
 * @module model/CreateUserRequest
 * @version 2017-08-08
 */
class CreateUserRequest {
    /**
     * Constructs a new <code>CreateUserRequest</code>.
     * @alias module:model/CreateUserRequest
     * @param username {String} The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from [a-zA-Z0-9_-.\\@]+.
     * @param phoneConfig {module:model/CreateUserRequestPhoneConfig} 
     * @param securityProfileIds {Array.<String>} The identifier of the security profile for the user.
     * @param routingProfileId {String} The identifier of the routing profile for the user.
     */
    constructor(username, phoneConfig, securityProfileIds, routingProfileId) { 
        
        CreateUserRequest.initialize(this, username, phoneConfig, securityProfileIds, routingProfileId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, username, phoneConfig, securityProfileIds, routingProfileId) { 
        obj['Username'] = username;
        obj['PhoneConfig'] = phoneConfig;
        obj['SecurityProfileIds'] = securityProfileIds;
        obj['RoutingProfileId'] = routingProfileId;
    }

    /**
     * Constructs a <code>CreateUserRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateUserRequest} obj Optional instance to populate.
     * @return {module:model/CreateUserRequest} The populated <code>CreateUserRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateUserRequest();

            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
            if (data.hasOwnProperty('Password')) {
                obj['Password'] = ApiClient.convertToType(data['Password'], 'String');
            }
            if (data.hasOwnProperty('IdentityInfo')) {
                obj['IdentityInfo'] = CreateUserRequestIdentityInfo.constructFromObject(data['IdentityInfo']);
            }
            if (data.hasOwnProperty('PhoneConfig')) {
                obj['PhoneConfig'] = CreateUserRequestPhoneConfig.constructFromObject(data['PhoneConfig']);
            }
            if (data.hasOwnProperty('DirectoryUserId')) {
                obj['DirectoryUserId'] = ApiClient.convertToType(data['DirectoryUserId'], 'String');
            }
            if (data.hasOwnProperty('SecurityProfileIds')) {
                obj['SecurityProfileIds'] = ApiClient.convertToType(data['SecurityProfileIds'], ['String']);
            }
            if (data.hasOwnProperty('RoutingProfileId')) {
                obj['RoutingProfileId'] = ApiClient.convertToType(data['RoutingProfileId'], 'String');
            }
            if (data.hasOwnProperty('HierarchyGroupId')) {
                obj['HierarchyGroupId'] = ApiClient.convertToType(data['HierarchyGroupId'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateUserRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateUserRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateUserRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Username'] && !(typeof data['Username'] === 'string' || data['Username'] instanceof String)) {
            throw new Error("Expected the field `Username` to be a primitive type in the JSON string but got " + data['Username']);
        }
        // ensure the json data is a string
        if (data['Password'] && !(typeof data['Password'] === 'string' || data['Password'] instanceof String)) {
            throw new Error("Expected the field `Password` to be a primitive type in the JSON string but got " + data['Password']);
        }
        // validate the optional field `IdentityInfo`
        if (data['IdentityInfo']) { // data not null
          CreateUserRequestIdentityInfo.validateJSON(data['IdentityInfo']);
        }
        // validate the optional field `PhoneConfig`
        if (data['PhoneConfig']) { // data not null
          CreateUserRequestPhoneConfig.validateJSON(data['PhoneConfig']);
        }
        // ensure the json data is a string
        if (data['DirectoryUserId'] && !(typeof data['DirectoryUserId'] === 'string' || data['DirectoryUserId'] instanceof String)) {
            throw new Error("Expected the field `DirectoryUserId` to be a primitive type in the JSON string but got " + data['DirectoryUserId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SecurityProfileIds'])) {
            throw new Error("Expected the field `SecurityProfileIds` to be an array in the JSON data but got " + data['SecurityProfileIds']);
        }
        // ensure the json data is a string
        if (data['RoutingProfileId'] && !(typeof data['RoutingProfileId'] === 'string' || data['RoutingProfileId'] instanceof String)) {
            throw new Error("Expected the field `RoutingProfileId` to be a primitive type in the JSON string but got " + data['RoutingProfileId']);
        }
        // ensure the json data is a string
        if (data['HierarchyGroupId'] && !(typeof data['HierarchyGroupId'] === 'string' || data['HierarchyGroupId'] instanceof String)) {
            throw new Error("Expected the field `HierarchyGroupId` to be a primitive type in the JSON string but got " + data['HierarchyGroupId']);
        }

        return true;
    }


}

CreateUserRequest.RequiredProperties = ["Username", "PhoneConfig", "SecurityProfileIds", "RoutingProfileId"];

/**
 * The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from [a-zA-Z0-9_-.\\@]+.
 * @member {String} Username
 */
CreateUserRequest.prototype['Username'] = undefined;

/**
 * The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
 * @member {String} Password
 */
CreateUserRequest.prototype['Password'] = undefined;

/**
 * @member {module:model/CreateUserRequestIdentityInfo} IdentityInfo
 */
CreateUserRequest.prototype['IdentityInfo'] = undefined;

/**
 * @member {module:model/CreateUserRequestPhoneConfig} PhoneConfig
 */
CreateUserRequest.prototype['PhoneConfig'] = undefined;

/**
 * <p>The identifier of the user account in the directory used for identity management. If Amazon Connect cannot access the directory, you can specify this identifier to authenticate users. If you include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity information is used to authenticate users from your directory.</p> <p>This parameter is required if you are using an existing directory for identity management in Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for identity management and include this parameter, an error is returned.</p>
 * @member {String} DirectoryUserId
 */
CreateUserRequest.prototype['DirectoryUserId'] = undefined;

/**
 * The identifier of the security profile for the user.
 * @member {Array.<String>} SecurityProfileIds
 */
CreateUserRequest.prototype['SecurityProfileIds'] = undefined;

/**
 * The identifier of the routing profile for the user.
 * @member {String} RoutingProfileId
 */
CreateUserRequest.prototype['RoutingProfileId'] = undefined;

/**
 * The identifier of the hierarchy group for the user.
 * @member {String} HierarchyGroupId
 */
CreateUserRequest.prototype['HierarchyGroupId'] = undefined;

/**
 * The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.
 * @member {Object.<String, String>} Tags
 */
CreateUserRequest.prototype['Tags'] = undefined;






export default CreateUserRequest;

