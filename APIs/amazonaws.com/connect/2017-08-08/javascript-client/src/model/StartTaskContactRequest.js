/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Reference from './Reference';

/**
 * The StartTaskContactRequest model module.
 * @module model/StartTaskContactRequest
 * @version 2017-08-08
 */
class StartTaskContactRequest {
    /**
     * Constructs a new <code>StartTaskContactRequest</code>.
     * @alias module:model/StartTaskContactRequest
     * @param instanceId {String} The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param name {String} The name of a task that is shown to an agent in the Contact Control Panel (CCP).
     */
    constructor(instanceId, name) { 
        
        StartTaskContactRequest.initialize(this, instanceId, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, instanceId, name) { 
        obj['InstanceId'] = instanceId;
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>StartTaskContactRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTaskContactRequest} obj Optional instance to populate.
     * @return {module:model/StartTaskContactRequest} The populated <code>StartTaskContactRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTaskContactRequest();

            if (data.hasOwnProperty('InstanceId')) {
                obj['InstanceId'] = ApiClient.convertToType(data['InstanceId'], 'String');
            }
            if (data.hasOwnProperty('PreviousContactId')) {
                obj['PreviousContactId'] = ApiClient.convertToType(data['PreviousContactId'], 'String');
            }
            if (data.hasOwnProperty('ContactFlowId')) {
                obj['ContactFlowId'] = ApiClient.convertToType(data['ContactFlowId'], 'String');
            }
            if (data.hasOwnProperty('Attributes')) {
                obj['Attributes'] = ApiClient.convertToType(data['Attributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('References')) {
                obj['References'] = ApiClient.convertToType(data['References'], {'String': Reference});
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('ClientToken')) {
                obj['ClientToken'] = ApiClient.convertToType(data['ClientToken'], 'String');
            }
            if (data.hasOwnProperty('ScheduledTime')) {
                obj['ScheduledTime'] = ApiClient.convertToType(data['ScheduledTime'], 'Date');
            }
            if (data.hasOwnProperty('TaskTemplateId')) {
                obj['TaskTemplateId'] = ApiClient.convertToType(data['TaskTemplateId'], 'String');
            }
            if (data.hasOwnProperty('QuickConnectId')) {
                obj['QuickConnectId'] = ApiClient.convertToType(data['QuickConnectId'], 'String');
            }
            if (data.hasOwnProperty('RelatedContactId')) {
                obj['RelatedContactId'] = ApiClient.convertToType(data['RelatedContactId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTaskContactRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTaskContactRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartTaskContactRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['InstanceId'] && !(typeof data['InstanceId'] === 'string' || data['InstanceId'] instanceof String)) {
            throw new Error("Expected the field `InstanceId` to be a primitive type in the JSON string but got " + data['InstanceId']);
        }
        // ensure the json data is a string
        if (data['PreviousContactId'] && !(typeof data['PreviousContactId'] === 'string' || data['PreviousContactId'] instanceof String)) {
            throw new Error("Expected the field `PreviousContactId` to be a primitive type in the JSON string but got " + data['PreviousContactId']);
        }
        // ensure the json data is a string
        if (data['ContactFlowId'] && !(typeof data['ContactFlowId'] === 'string' || data['ContactFlowId'] instanceof String)) {
            throw new Error("Expected the field `ContactFlowId` to be a primitive type in the JSON string but got " + data['ContactFlowId']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['ClientToken'] && !(typeof data['ClientToken'] === 'string' || data['ClientToken'] instanceof String)) {
            throw new Error("Expected the field `ClientToken` to be a primitive type in the JSON string but got " + data['ClientToken']);
        }
        // ensure the json data is a string
        if (data['TaskTemplateId'] && !(typeof data['TaskTemplateId'] === 'string' || data['TaskTemplateId'] instanceof String)) {
            throw new Error("Expected the field `TaskTemplateId` to be a primitive type in the JSON string but got " + data['TaskTemplateId']);
        }
        // ensure the json data is a string
        if (data['QuickConnectId'] && !(typeof data['QuickConnectId'] === 'string' || data['QuickConnectId'] instanceof String)) {
            throw new Error("Expected the field `QuickConnectId` to be a primitive type in the JSON string but got " + data['QuickConnectId']);
        }
        // ensure the json data is a string
        if (data['RelatedContactId'] && !(typeof data['RelatedContactId'] === 'string' || data['RelatedContactId'] instanceof String)) {
            throw new Error("Expected the field `RelatedContactId` to be a primitive type in the JSON string but got " + data['RelatedContactId']);
        }

        return true;
    }


}

StartTaskContactRequest.RequiredProperties = ["InstanceId", "Name"];

/**
 * The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
 * @member {String} InstanceId
 */
StartTaskContactRequest.prototype['InstanceId'] = undefined;

/**
 * The identifier of the previous chat, voice, or task contact. 
 * @member {String} PreviousContactId
 */
StartTaskContactRequest.prototype['PreviousContactId'] = undefined;

/**
 * <p>The identifier of the flow for initiating the tasks. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing</b>, <b>Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold: </p> <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>846ec553-a005-41c0-8341-xxxxxxxxxxxx</b> </p>
 * @member {String} ContactFlowId
 */
StartTaskContactRequest.prototype['ContactFlowId'] = undefined;

/**
 * <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p> <p>There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>
 * @member {Object.<String, String>} Attributes
 */
StartTaskContactRequest.prototype['Attributes'] = undefined;

/**
 * The name of a task that is shown to an agent in the Contact Control Panel (CCP).
 * @member {String} Name
 */
StartTaskContactRequest.prototype['Name'] = undefined;

/**
 * A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
 * @member {Object.<String, module:model/Reference>} References
 */
StartTaskContactRequest.prototype['References'] = undefined;

/**
 * A description of the task that is shown to an agent in the Contact Control Panel (CCP).
 * @member {String} Description
 */
StartTaskContactRequest.prototype['Description'] = undefined;

/**
 * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.
 * @member {String} ClientToken
 */
StartTaskContactRequest.prototype['ClientToken'] = undefined;

/**
 * The timestamp, in Unix Epoch seconds format, at which to start running the inbound flow. The scheduled time cannot be in the past. It must be within up to 6 days in future. 
 * @member {Date} ScheduledTime
 */
StartTaskContactRequest.prototype['ScheduledTime'] = undefined;

/**
 * A unique identifier for the task template.
 * @member {String} TaskTemplateId
 */
StartTaskContactRequest.prototype['TaskTemplateId'] = undefined;

/**
 * The identifier for the quick connect.
 * @member {String} QuickConnectId
 */
StartTaskContactRequest.prototype['QuickConnectId'] = undefined;

/**
 * The contactId that is <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/tasks.html#linked-tasks\">related</a> to this contact.
 * @member {String} RelatedContactId
 */
StartTaskContactRequest.prototype['RelatedContactId'] = undefined;






export default StartTaskContactRequest;

