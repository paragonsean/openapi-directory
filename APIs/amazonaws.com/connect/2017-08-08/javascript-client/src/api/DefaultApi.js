/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivateEvaluationFormRequest from '../model/ActivateEvaluationFormRequest';
import ActivateEvaluationFormResponse from '../model/ActivateEvaluationFormResponse';
import AgentStatusType from '../model/AgentStatusType';
import AssociateApprovedOriginRequest from '../model/AssociateApprovedOriginRequest';
import AssociateBotRequest from '../model/AssociateBotRequest';
import AssociateDefaultVocabularyRequest from '../model/AssociateDefaultVocabularyRequest';
import AssociateInstanceStorageConfigRequest from '../model/AssociateInstanceStorageConfigRequest';
import AssociateInstanceStorageConfigResponse from '../model/AssociateInstanceStorageConfigResponse';
import AssociateLambdaFunctionRequest from '../model/AssociateLambdaFunctionRequest';
import AssociateLexBotRequest from '../model/AssociateLexBotRequest';
import AssociatePhoneNumberContactFlowRequest from '../model/AssociatePhoneNumberContactFlowRequest';
import AssociateQueueQuickConnectsRequest from '../model/AssociateQueueQuickConnectsRequest';
import AssociateRoutingProfileQueuesRequest from '../model/AssociateRoutingProfileQueuesRequest';
import AssociateSecurityKeyRequest from '../model/AssociateSecurityKeyRequest';
import AssociateSecurityKeyResponse from '../model/AssociateSecurityKeyResponse';
import ClaimPhoneNumberRequest from '../model/ClaimPhoneNumberRequest';
import ClaimPhoneNumberResponse from '../model/ClaimPhoneNumberResponse';
import ContactFlowType from '../model/ContactFlowType';
import CreateAgentStatusRequest from '../model/CreateAgentStatusRequest';
import CreateAgentStatusResponse from '../model/CreateAgentStatusResponse';
import CreateContactFlowModuleRequest from '../model/CreateContactFlowModuleRequest';
import CreateContactFlowModuleResponse from '../model/CreateContactFlowModuleResponse';
import CreateContactFlowRequest from '../model/CreateContactFlowRequest';
import CreateContactFlowResponse from '../model/CreateContactFlowResponse';
import CreateEvaluationFormRequest from '../model/CreateEvaluationFormRequest';
import CreateEvaluationFormResponse from '../model/CreateEvaluationFormResponse';
import CreateHoursOfOperationRequest from '../model/CreateHoursOfOperationRequest';
import CreateHoursOfOperationResponse from '../model/CreateHoursOfOperationResponse';
import CreateInstanceRequest from '../model/CreateInstanceRequest';
import CreateInstanceResponse from '../model/CreateInstanceResponse';
import CreateIntegrationAssociationRequest from '../model/CreateIntegrationAssociationRequest';
import CreateIntegrationAssociationResponse from '../model/CreateIntegrationAssociationResponse';
import CreateParticipantRequest from '../model/CreateParticipantRequest';
import CreateParticipantResponse from '../model/CreateParticipantResponse';
import CreatePromptRequest from '../model/CreatePromptRequest';
import CreatePromptResponse from '../model/CreatePromptResponse';
import CreateQueueRequest from '../model/CreateQueueRequest';
import CreateQueueResponse from '../model/CreateQueueResponse';
import CreateQuickConnectRequest from '../model/CreateQuickConnectRequest';
import CreateQuickConnectResponse from '../model/CreateQuickConnectResponse';
import CreateRoutingProfileRequest from '../model/CreateRoutingProfileRequest';
import CreateRoutingProfileResponse from '../model/CreateRoutingProfileResponse';
import CreateRuleRequest from '../model/CreateRuleRequest';
import CreateRuleResponse from '../model/CreateRuleResponse';
import CreateSecurityProfileRequest from '../model/CreateSecurityProfileRequest';
import CreateSecurityProfileResponse from '../model/CreateSecurityProfileResponse';
import CreateTaskTemplateRequest from '../model/CreateTaskTemplateRequest';
import CreateTaskTemplateResponse from '../model/CreateTaskTemplateResponse';
import CreateTrafficDistributionGroupRequest from '../model/CreateTrafficDistributionGroupRequest';
import CreateTrafficDistributionGroupResponse from '../model/CreateTrafficDistributionGroupResponse';
import CreateUseCaseRequest from '../model/CreateUseCaseRequest';
import CreateUseCaseResponse from '../model/CreateUseCaseResponse';
import CreateUserHierarchyGroupRequest from '../model/CreateUserHierarchyGroupRequest';
import CreateUserHierarchyGroupResponse from '../model/CreateUserHierarchyGroupResponse';
import CreateUserRequest from '../model/CreateUserRequest';
import CreateUserResponse from '../model/CreateUserResponse';
import CreateVocabularyRequest from '../model/CreateVocabularyRequest';
import CreateVocabularyResponse from '../model/CreateVocabularyResponse';
import DeactivateEvaluationFormRequest from '../model/DeactivateEvaluationFormRequest';
import DeactivateEvaluationFormResponse from '../model/DeactivateEvaluationFormResponse';
import DeleteVocabularyResponse from '../model/DeleteVocabularyResponse';
import DescribeAgentStatusResponse from '../model/DescribeAgentStatusResponse';
import DescribeContactEvaluationResponse from '../model/DescribeContactEvaluationResponse';
import DescribeContactFlowModuleResponse from '../model/DescribeContactFlowModuleResponse';
import DescribeContactFlowResponse from '../model/DescribeContactFlowResponse';
import DescribeContactResponse from '../model/DescribeContactResponse';
import DescribeEvaluationFormResponse from '../model/DescribeEvaluationFormResponse';
import DescribeHoursOfOperationResponse from '../model/DescribeHoursOfOperationResponse';
import DescribeInstanceAttributeResponse from '../model/DescribeInstanceAttributeResponse';
import DescribeInstanceResponse from '../model/DescribeInstanceResponse';
import DescribeInstanceStorageConfigResponse from '../model/DescribeInstanceStorageConfigResponse';
import DescribePhoneNumberResponse from '../model/DescribePhoneNumberResponse';
import DescribePromptResponse from '../model/DescribePromptResponse';
import DescribeQueueResponse from '../model/DescribeQueueResponse';
import DescribeQuickConnectResponse from '../model/DescribeQuickConnectResponse';
import DescribeRoutingProfileResponse from '../model/DescribeRoutingProfileResponse';
import DescribeRuleResponse from '../model/DescribeRuleResponse';
import DescribeSecurityProfileResponse from '../model/DescribeSecurityProfileResponse';
import DescribeTrafficDistributionGroupResponse from '../model/DescribeTrafficDistributionGroupResponse';
import DescribeUserHierarchyGroupResponse from '../model/DescribeUserHierarchyGroupResponse';
import DescribeUserHierarchyStructureResponse from '../model/DescribeUserHierarchyStructureResponse';
import DescribeUserResponse from '../model/DescribeUserResponse';
import DescribeVocabularyResponse from '../model/DescribeVocabularyResponse';
import DisassociateQueueQuickConnectsRequest from '../model/DisassociateQueueQuickConnectsRequest';
import DisassociateRoutingProfileQueuesRequest from '../model/DisassociateRoutingProfileQueuesRequest';
import DismissUserContactRequest from '../model/DismissUserContactRequest';
import GetContactAttributesResponse from '../model/GetContactAttributesResponse';
import GetCurrentMetricDataRequest from '../model/GetCurrentMetricDataRequest';
import GetCurrentMetricDataResponse from '../model/GetCurrentMetricDataResponse';
import GetCurrentUserDataRequest from '../model/GetCurrentUserDataRequest';
import GetCurrentUserDataResponse from '../model/GetCurrentUserDataResponse';
import GetFederationTokenResponse from '../model/GetFederationTokenResponse';
import GetMetricDataRequest from '../model/GetMetricDataRequest';
import GetMetricDataResponse from '../model/GetMetricDataResponse';
import GetMetricDataV2Request from '../model/GetMetricDataV2Request';
import GetMetricDataV2Response from '../model/GetMetricDataV2Response';
import GetPromptFileResponse from '../model/GetPromptFileResponse';
import GetTaskTemplateResponse from '../model/GetTaskTemplateResponse';
import GetTrafficDistributionResponse from '../model/GetTrafficDistributionResponse';
import ListAgentStatusResponse from '../model/ListAgentStatusResponse';
import ListApprovedOriginsResponse from '../model/ListApprovedOriginsResponse';
import ListBotsResponse from '../model/ListBotsResponse';
import ListContactEvaluationsResponse from '../model/ListContactEvaluationsResponse';
import ListContactFlowModulesResponse from '../model/ListContactFlowModulesResponse';
import ListContactFlowsResponse from '../model/ListContactFlowsResponse';
import ListContactReferencesResponse from '../model/ListContactReferencesResponse';
import ListDefaultVocabulariesRequest from '../model/ListDefaultVocabulariesRequest';
import ListDefaultVocabulariesResponse from '../model/ListDefaultVocabulariesResponse';
import ListEvaluationFormVersionsResponse from '../model/ListEvaluationFormVersionsResponse';
import ListEvaluationFormsResponse from '../model/ListEvaluationFormsResponse';
import ListHoursOfOperationsResponse from '../model/ListHoursOfOperationsResponse';
import ListInstanceAttributesResponse from '../model/ListInstanceAttributesResponse';
import ListInstanceStorageConfigsResponse from '../model/ListInstanceStorageConfigsResponse';
import ListInstancesResponse from '../model/ListInstancesResponse';
import ListIntegrationAssociationsResponse from '../model/ListIntegrationAssociationsResponse';
import ListLambdaFunctionsResponse from '../model/ListLambdaFunctionsResponse';
import ListLexBotsResponse from '../model/ListLexBotsResponse';
import ListPhoneNumbersResponse from '../model/ListPhoneNumbersResponse';
import ListPhoneNumbersV2Request from '../model/ListPhoneNumbersV2Request';
import ListPhoneNumbersV2Response from '../model/ListPhoneNumbersV2Response';
import ListPromptsResponse from '../model/ListPromptsResponse';
import ListQueueQuickConnectsResponse from '../model/ListQueueQuickConnectsResponse';
import ListQueuesResponse from '../model/ListQueuesResponse';
import ListQuickConnectsResponse from '../model/ListQuickConnectsResponse';
import ListRoutingProfileQueuesResponse from '../model/ListRoutingProfileQueuesResponse';
import ListRoutingProfilesResponse from '../model/ListRoutingProfilesResponse';
import ListRulesResponse from '../model/ListRulesResponse';
import ListSecurityKeysResponse from '../model/ListSecurityKeysResponse';
import ListSecurityProfilePermissionsResponse from '../model/ListSecurityProfilePermissionsResponse';
import ListSecurityProfilesResponse from '../model/ListSecurityProfilesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTaskTemplatesResponse from '../model/ListTaskTemplatesResponse';
import ListTrafficDistributionGroupsResponse from '../model/ListTrafficDistributionGroupsResponse';
import ListUseCasesResponse from '../model/ListUseCasesResponse';
import ListUserHierarchyGroupsResponse from '../model/ListUserHierarchyGroupsResponse';
import ListUsersResponse from '../model/ListUsersResponse';
import MonitorContactRequest from '../model/MonitorContactRequest';
import MonitorContactResponse from '../model/MonitorContactResponse';
import PhoneNumberCountryCode from '../model/PhoneNumberCountryCode';
import PhoneNumberType from '../model/PhoneNumberType';
import PutUserStatusRequest from '../model/PutUserStatusRequest';
import QueueType from '../model/QueueType';
import QuickConnectType from '../model/QuickConnectType';
import ReferenceType from '../model/ReferenceType';
import ReplicateInstanceRequest from '../model/ReplicateInstanceRequest';
import ReplicateInstanceResponse from '../model/ReplicateInstanceResponse';
import ResumeContactRecordingRequest from '../model/ResumeContactRecordingRequest';
import SearchAvailablePhoneNumbersRequest from '../model/SearchAvailablePhoneNumbersRequest';
import SearchAvailablePhoneNumbersResponse from '../model/SearchAvailablePhoneNumbersResponse';
import SearchHoursOfOperationsRequest from '../model/SearchHoursOfOperationsRequest';
import SearchHoursOfOperationsResponse from '../model/SearchHoursOfOperationsResponse';
import SearchPromptsRequest from '../model/SearchPromptsRequest';
import SearchPromptsResponse from '../model/SearchPromptsResponse';
import SearchQueuesRequest from '../model/SearchQueuesRequest';
import SearchQueuesResponse from '../model/SearchQueuesResponse';
import SearchQuickConnectsRequest from '../model/SearchQuickConnectsRequest';
import SearchQuickConnectsResponse from '../model/SearchQuickConnectsResponse';
import SearchResourceTagsRequest from '../model/SearchResourceTagsRequest';
import SearchResourceTagsResponse from '../model/SearchResourceTagsResponse';
import SearchRoutingProfilesRequest from '../model/SearchRoutingProfilesRequest';
import SearchRoutingProfilesResponse from '../model/SearchRoutingProfilesResponse';
import SearchSecurityProfilesRequest from '../model/SearchSecurityProfilesRequest';
import SearchSecurityProfilesResponse from '../model/SearchSecurityProfilesResponse';
import SearchUsersRequest from '../model/SearchUsersRequest';
import SearchUsersResponse from '../model/SearchUsersResponse';
import SearchVocabulariesRequest from '../model/SearchVocabulariesRequest';
import SearchVocabulariesResponse from '../model/SearchVocabulariesResponse';
import StartChatContactRequest from '../model/StartChatContactRequest';
import StartChatContactResponse from '../model/StartChatContactResponse';
import StartContactEvaluationRequest from '../model/StartContactEvaluationRequest';
import StartContactEvaluationResponse from '../model/StartContactEvaluationResponse';
import StartContactRecordingRequest from '../model/StartContactRecordingRequest';
import StartContactStreamingRequest from '../model/StartContactStreamingRequest';
import StartContactStreamingResponse from '../model/StartContactStreamingResponse';
import StartOutboundVoiceContactRequest from '../model/StartOutboundVoiceContactRequest';
import StartOutboundVoiceContactResponse from '../model/StartOutboundVoiceContactResponse';
import StartTaskContactRequest from '../model/StartTaskContactRequest';
import StartTaskContactResponse from '../model/StartTaskContactResponse';
import StopContactRequest from '../model/StopContactRequest';
import StopContactStreamingRequest from '../model/StopContactStreamingRequest';
import SubmitContactEvaluationResponse from '../model/SubmitContactEvaluationResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import TransferContactRequest from '../model/TransferContactRequest';
import TransferContactResponse from '../model/TransferContactResponse';
import UpdateAgentStatusRequest from '../model/UpdateAgentStatusRequest';
import UpdateContactAttributesRequest from '../model/UpdateContactAttributesRequest';
import UpdateContactEvaluationRequest from '../model/UpdateContactEvaluationRequest';
import UpdateContactEvaluationResponse from '../model/UpdateContactEvaluationResponse';
import UpdateContactFlowContentRequest from '../model/UpdateContactFlowContentRequest';
import UpdateContactFlowMetadataRequest from '../model/UpdateContactFlowMetadataRequest';
import UpdateContactFlowModuleContentRequest from '../model/UpdateContactFlowModuleContentRequest';
import UpdateContactFlowModuleMetadataRequest from '../model/UpdateContactFlowModuleMetadataRequest';
import UpdateContactFlowNameRequest from '../model/UpdateContactFlowNameRequest';
import UpdateContactRequest from '../model/UpdateContactRequest';
import UpdateContactScheduleRequest from '../model/UpdateContactScheduleRequest';
import UpdateEvaluationFormRequest from '../model/UpdateEvaluationFormRequest';
import UpdateEvaluationFormResponse from '../model/UpdateEvaluationFormResponse';
import UpdateHoursOfOperationRequest from '../model/UpdateHoursOfOperationRequest';
import UpdateInstanceAttributeRequest from '../model/UpdateInstanceAttributeRequest';
import UpdateInstanceStorageConfigRequest from '../model/UpdateInstanceStorageConfigRequest';
import UpdateParticipantRoleConfigRequest from '../model/UpdateParticipantRoleConfigRequest';
import UpdatePhoneNumberRequest from '../model/UpdatePhoneNumberRequest';
import UpdatePhoneNumberResponse from '../model/UpdatePhoneNumberResponse';
import UpdatePromptRequest from '../model/UpdatePromptRequest';
import UpdatePromptResponse from '../model/UpdatePromptResponse';
import UpdateQueueHoursOfOperationRequest from '../model/UpdateQueueHoursOfOperationRequest';
import UpdateQueueMaxContactsRequest from '../model/UpdateQueueMaxContactsRequest';
import UpdateQueueNameRequest from '../model/UpdateQueueNameRequest';
import UpdateQueueOutboundCallerConfigRequest from '../model/UpdateQueueOutboundCallerConfigRequest';
import UpdateQueueStatusRequest from '../model/UpdateQueueStatusRequest';
import UpdateQuickConnectConfigRequest from '../model/UpdateQuickConnectConfigRequest';
import UpdateQuickConnectNameRequest from '../model/UpdateQuickConnectNameRequest';
import UpdateRoutingProfileAgentAvailabilityTimerRequest from '../model/UpdateRoutingProfileAgentAvailabilityTimerRequest';
import UpdateRoutingProfileConcurrencyRequest from '../model/UpdateRoutingProfileConcurrencyRequest';
import UpdateRoutingProfileDefaultOutboundQueueRequest from '../model/UpdateRoutingProfileDefaultOutboundQueueRequest';
import UpdateRoutingProfileNameRequest from '../model/UpdateRoutingProfileNameRequest';
import UpdateRoutingProfileQueuesRequest from '../model/UpdateRoutingProfileQueuesRequest';
import UpdateRuleRequest from '../model/UpdateRuleRequest';
import UpdateSecurityProfileRequest from '../model/UpdateSecurityProfileRequest';
import UpdateTaskTemplateRequest from '../model/UpdateTaskTemplateRequest';
import UpdateTaskTemplateResponse from '../model/UpdateTaskTemplateResponse';
import UpdateTrafficDistributionRequest from '../model/UpdateTrafficDistributionRequest';
import UpdateUserHierarchyGroupNameRequest from '../model/UpdateUserHierarchyGroupNameRequest';
import UpdateUserHierarchyRequest from '../model/UpdateUserHierarchyRequest';
import UpdateUserHierarchyStructureRequest from '../model/UpdateUserHierarchyStructureRequest';
import UpdateUserIdentityInfoRequest from '../model/UpdateUserIdentityInfoRequest';
import UpdateUserPhoneConfigRequest from '../model/UpdateUserPhoneConfigRequest';
import UpdateUserRoutingProfileRequest from '../model/UpdateUserRoutingProfileRequest';
import UpdateUserSecurityProfilesRequest from '../model/UpdateUserSecurityProfilesRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-08-08
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateEvaluationForm operation.
     * @callback module:api/DefaultApi~activateEvaluationFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivateEvaluationFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates an evaluation form in the specified Amazon Connect instance. After the evaluation form is activated, it is available to start new evaluations based on the form. 
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationFormId The unique identifier for the evaluation form.
     * @param {module:model/ActivateEvaluationFormRequest} activateEvaluationFormRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~activateEvaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivateEvaluationFormResponse}
     */
    activateEvaluationForm(instanceId, evaluationFormId, activateEvaluationFormRequest, opts, callback) {
      opts = opts || {};
      let postBody = activateEvaluationFormRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling activateEvaluationForm");
      }
      // verify the required parameter 'evaluationFormId' is set
      if (evaluationFormId === undefined || evaluationFormId === null) {
        throw new Error("Missing the required parameter 'evaluationFormId' when calling activateEvaluationForm");
      }
      // verify the required parameter 'activateEvaluationFormRequest' is set
      if (activateEvaluationFormRequest === undefined || activateEvaluationFormRequest === null) {
        throw new Error("Missing the required parameter 'activateEvaluationFormRequest' when calling activateEvaluationForm");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationFormId': evaluationFormId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivateEvaluationFormResponse;
      return this.apiClient.callApi(
        '/evaluation-forms/{InstanceId}/{EvaluationFormId}/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateApprovedOrigin operation.
     * @callback module:api/DefaultApi~associateApprovedOriginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Associates an approved origin to an Amazon Connect instance.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/AssociateApprovedOriginRequest} associateApprovedOriginRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateApprovedOriginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associateApprovedOrigin(instanceId, associateApprovedOriginRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateApprovedOriginRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling associateApprovedOrigin");
      }
      // verify the required parameter 'associateApprovedOriginRequest' is set
      if (associateApprovedOriginRequest === undefined || associateApprovedOriginRequest === null) {
        throw new Error("Missing the required parameter 'associateApprovedOriginRequest' when calling associateApprovedOrigin");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/approved-origin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateBot operation.
     * @callback module:api/DefaultApi~associateBotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Allows the specified Amazon Connect instance to access the specified Amazon Lex or Amazon Lex V2 bot.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/AssociateBotRequest} associateBotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateBotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associateBot(instanceId, associateBotRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateBotRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling associateBot");
      }
      // verify the required parameter 'associateBotRequest' is set
      if (associateBotRequest === undefined || associateBotRequest === null) {
        throw new Error("Missing the required parameter 'associateBotRequest' when calling associateBot");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/bot', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateDefaultVocabulary operation.
     * @callback module:api/DefaultApi~associateDefaultVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates an existing vocabulary as the default. Contact Lens for Amazon Connect uses the vocabulary in post-call and real-time analysis sessions for the given language.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/String} languageCode The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html\">What is Amazon Transcribe?</a> 
     * @param {module:model/AssociateDefaultVocabularyRequest} associateDefaultVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateDefaultVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateDefaultVocabulary(instanceId, languageCode, associateDefaultVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateDefaultVocabularyRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling associateDefaultVocabulary");
      }
      // verify the required parameter 'languageCode' is set
      if (languageCode === undefined || languageCode === null) {
        throw new Error("Missing the required parameter 'languageCode' when calling associateDefaultVocabulary");
      }
      // verify the required parameter 'associateDefaultVocabularyRequest' is set
      if (associateDefaultVocabularyRequest === undefined || associateDefaultVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'associateDefaultVocabularyRequest' when calling associateDefaultVocabulary");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'LanguageCode': languageCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/default-vocabulary/{InstanceId}/{LanguageCode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateInstanceStorageConfig operation.
     * @callback module:api/DefaultApi~associateInstanceStorageConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateInstanceStorageConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Associates a storage resource type for the first time. You can only associate one type of storage configuration in a single call. This means, for example, that you can't define an instance with multiple S3 buckets for storing chat transcripts.</p> <p>This API does not create a resource that doesn't exist. It only associates it to the instance. Ensure that the resource being specified in the storage configuration, like an S3 bucket, exists when being used for association.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/AssociateInstanceStorageConfigRequest} associateInstanceStorageConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateInstanceStorageConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateInstanceStorageConfigResponse}
     */
    associateInstanceStorageConfig(instanceId, associateInstanceStorageConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateInstanceStorageConfigRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling associateInstanceStorageConfig");
      }
      // verify the required parameter 'associateInstanceStorageConfigRequest' is set
      if (associateInstanceStorageConfigRequest === undefined || associateInstanceStorageConfigRequest === null) {
        throw new Error("Missing the required parameter 'associateInstanceStorageConfigRequest' when calling associateInstanceStorageConfig");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateInstanceStorageConfigResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/storage-config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateLambdaFunction operation.
     * @callback module:api/DefaultApi~associateLambdaFunctionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Allows the specified Amazon Connect instance to access the specified Lambda function.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/AssociateLambdaFunctionRequest} associateLambdaFunctionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateLambdaFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associateLambdaFunction(instanceId, associateLambdaFunctionRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateLambdaFunctionRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling associateLambdaFunction");
      }
      // verify the required parameter 'associateLambdaFunctionRequest' is set
      if (associateLambdaFunctionRequest === undefined || associateLambdaFunctionRequest === null) {
        throw new Error("Missing the required parameter 'associateLambdaFunctionRequest' when calling associateLambdaFunction");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/lambda-function', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateLexBot operation.
     * @callback module:api/DefaultApi~associateLexBotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Allows the specified Amazon Connect instance to access the specified Amazon Lex V1 bot. This API only supports the association of Amazon Lex V1 bots.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/AssociateLexBotRequest} associateLexBotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateLexBotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associateLexBot(instanceId, associateLexBotRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateLexBotRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling associateLexBot");
      }
      // verify the required parameter 'associateLexBotRequest' is set
      if (associateLexBotRequest === undefined || associateLexBotRequest === null) {
        throw new Error("Missing the required parameter 'associateLexBotRequest' when calling associateLexBot");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/lex-bot', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associatePhoneNumberContactFlow operation.
     * @callback module:api/DefaultApi~associatePhoneNumberContactFlowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates a flow with a phone number claimed to your Amazon Connect instance.</p> <important> <p>If the number is claimed to a traffic distribution group, and you are calling this API using an instance in the Amazon Web Services Region where the traffic distribution group was created, you can use either a full phone number ARN or UUID value for the <code>PhoneNumberId</code> URI request parameter. However, if the number is claimed to a traffic distribution group and you are calling this API using an instance in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a <code>ResourceNotFoundException</code>.</p> </important>
     * @param {String} phoneNumberId A unique identifier for the phone number.
     * @param {module:model/AssociatePhoneNumberContactFlowRequest} associatePhoneNumberContactFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associatePhoneNumberContactFlowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associatePhoneNumberContactFlow(phoneNumberId, associatePhoneNumberContactFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = associatePhoneNumberContactFlowRequest;
      // verify the required parameter 'phoneNumberId' is set
      if (phoneNumberId === undefined || phoneNumberId === null) {
        throw new Error("Missing the required parameter 'phoneNumberId' when calling associatePhoneNumberContactFlow");
      }
      // verify the required parameter 'associatePhoneNumberContactFlowRequest' is set
      if (associatePhoneNumberContactFlowRequest === undefined || associatePhoneNumberContactFlowRequest === null) {
        throw new Error("Missing the required parameter 'associatePhoneNumberContactFlowRequest' when calling associatePhoneNumberContactFlow");
      }

      let pathParams = {
        'PhoneNumberId': phoneNumberId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/phone-number/{PhoneNumberId}/contact-flow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateQueueQuickConnects operation.
     * @callback module:api/DefaultApi~associateQueueQuickConnectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Associates a set of quick connects with a queue.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {module:model/AssociateQueueQuickConnectsRequest} associateQueueQuickConnectsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateQueueQuickConnectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associateQueueQuickConnects(instanceId, queueId, associateQueueQuickConnectsRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateQueueQuickConnectsRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling associateQueueQuickConnects");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling associateQueueQuickConnects");
      }
      // verify the required parameter 'associateQueueQuickConnectsRequest' is set
      if (associateQueueQuickConnectsRequest === undefined || associateQueueQuickConnectsRequest === null) {
        throw new Error("Missing the required parameter 'associateQueueQuickConnectsRequest' when calling associateQueueQuickConnects");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}/associate-quick-connects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateRoutingProfileQueues operation.
     * @callback module:api/DefaultApi~associateRoutingProfileQueuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a set of queues with a routing profile.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {module:model/AssociateRoutingProfileQueuesRequest} associateRoutingProfileQueuesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateRoutingProfileQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associateRoutingProfileQueues(instanceId, routingProfileId, associateRoutingProfileQueuesRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateRoutingProfileQueuesRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling associateRoutingProfileQueues");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling associateRoutingProfileQueues");
      }
      // verify the required parameter 'associateRoutingProfileQueuesRequest' is set
      if (associateRoutingProfileQueuesRequest === undefined || associateRoutingProfileQueuesRequest === null) {
        throw new Error("Missing the required parameter 'associateRoutingProfileQueuesRequest' when calling associateRoutingProfileQueues");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}/associate-queues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateSecurityKey operation.
     * @callback module:api/DefaultApi~associateSecurityKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateSecurityKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Associates a security key to the instance.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/AssociateSecurityKeyRequest} associateSecurityKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateSecurityKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateSecurityKeyResponse}
     */
    associateSecurityKey(instanceId, associateSecurityKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateSecurityKeyRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling associateSecurityKey");
      }
      // verify the required parameter 'associateSecurityKeyRequest' is set
      if (associateSecurityKeyRequest === undefined || associateSecurityKeyRequest === null) {
        throw new Error("Missing the required parameter 'associateSecurityKeyRequest' when calling associateSecurityKey");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateSecurityKeyResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/security-key', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimPhoneNumber operation.
     * @callback module:api/DefaultApi~claimPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClaimPhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Claims an available phone number to your Amazon Connect instance or traffic distribution group. You can call this API only in the same Amazon Web Services Region where the Amazon Connect instance or traffic distribution group was created.</p> <p>For more information about how to use this operation, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/claim-phone-number.html\">Claim a phone number in your country</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/claim-phone-numbers-traffic-distribution-groups.html\">Claim phone numbers to traffic distribution groups</a> in the <i>Amazon Connect Administrator Guide</i>. </p> <important> <p>You can call the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_SearchAvailablePhoneNumbers.html\">SearchAvailablePhoneNumbers</a> API for available phone numbers that you can claim. Call the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_DescribePhoneNumber.html\">DescribePhoneNumber</a> API to verify the status of a previous <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimPhoneNumber.html\">ClaimPhoneNumber</a> operation.</p> </important> <p>If you plan to claim and release numbers frequently during a 30 day period, contact us for a service quota exception. Otherwise, it is possible you will be blocked from claiming and releasing any more numbers until 30 days past the oldest number released has expired.</p> <p>By default you can claim and release up to 200% of your maximum number of active phone numbers during any 30 day period. If you claim and release phone numbers using the UI or API during a rolling 30 day cycle that exceeds 200% of your phone number service level quota, you will be blocked from claiming any more numbers until 30 days past the oldest number released has expired. </p> <p>For example, if you already have 99 claimed numbers and a service level quota of 99 phone numbers, and in any 30 day period you release 99, claim 99, and then release 99, you will have exceeded the 200% limit. At that point you are blocked from claiming any more numbers until you open an Amazon Web Services support ticket.</p>
     * @param {module:model/ClaimPhoneNumberRequest} claimPhoneNumberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~claimPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClaimPhoneNumberResponse}
     */
    claimPhoneNumber(claimPhoneNumberRequest, opts, callback) {
      opts = opts || {};
      let postBody = claimPhoneNumberRequest;
      // verify the required parameter 'claimPhoneNumberRequest' is set
      if (claimPhoneNumberRequest === undefined || claimPhoneNumberRequest === null) {
        throw new Error("Missing the required parameter 'claimPhoneNumberRequest' when calling claimPhoneNumber");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClaimPhoneNumberResponse;
      return this.apiClient.callApi(
        '/phone-number/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAgentStatus operation.
     * @callback module:api/DefaultApi~createAgentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAgentStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Creates an agent status for the specified Amazon Connect instance.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateAgentStatusRequest} createAgentStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAgentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAgentStatusResponse}
     */
    createAgentStatus(instanceId, createAgentStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAgentStatusRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createAgentStatus");
      }
      // verify the required parameter 'createAgentStatusRequest' is set
      if (createAgentStatusRequest === undefined || createAgentStatusRequest === null) {
        throw new Error("Missing the required parameter 'createAgentStatusRequest' when calling createAgentStatus");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAgentStatusResponse;
      return this.apiClient.callApi(
        '/agent-status/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactFlow operation.
     * @callback module:api/DefaultApi~createContactFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateContactFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a flow for the specified Amazon Connect instance.</p> <p>You can also create and update flows using the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\">Amazon Connect Flow language</a>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance.
     * @param {module:model/CreateContactFlowRequest} createContactFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createContactFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateContactFlowResponse}
     */
    createContactFlow(instanceId, createContactFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = createContactFlowRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createContactFlow");
      }
      // verify the required parameter 'createContactFlowRequest' is set
      if (createContactFlowRequest === undefined || createContactFlowRequest === null) {
        throw new Error("Missing the required parameter 'createContactFlowRequest' when calling createContactFlow");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateContactFlowResponse;
      return this.apiClient.callApi(
        '/contact-flows/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactFlowModule operation.
     * @callback module:api/DefaultApi~createContactFlowModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateContactFlowModuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a flow module for the specified Amazon Connect instance. 
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateContactFlowModuleRequest} createContactFlowModuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createContactFlowModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateContactFlowModuleResponse}
     */
    createContactFlowModule(instanceId, createContactFlowModuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createContactFlowModuleRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createContactFlowModule");
      }
      // verify the required parameter 'createContactFlowModuleRequest' is set
      if (createContactFlowModuleRequest === undefined || createContactFlowModuleRequest === null) {
        throw new Error("Missing the required parameter 'createContactFlowModuleRequest' when calling createContactFlowModule");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateContactFlowModuleResponse;
      return this.apiClient.callApi(
        '/contact-flow-modules/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEvaluationForm operation.
     * @callback module:api/DefaultApi~createEvaluationFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEvaluationFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an evaluation form in the specified Amazon Connect instance. The form can be used to define questions related to agent performance, and create sections to organize such questions. Question and section identifiers cannot be duplicated within the same evaluation form.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateEvaluationFormRequest} createEvaluationFormRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEvaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEvaluationFormResponse}
     */
    createEvaluationForm(instanceId, createEvaluationFormRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEvaluationFormRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createEvaluationForm");
      }
      // verify the required parameter 'createEvaluationFormRequest' is set
      if (createEvaluationFormRequest === undefined || createEvaluationFormRequest === null) {
        throw new Error("Missing the required parameter 'createEvaluationFormRequest' when calling createEvaluationForm");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEvaluationFormResponse;
      return this.apiClient.callApi(
        '/evaluation-forms/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createHoursOfOperation operation.
     * @callback module:api/DefaultApi~createHoursOfOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHoursOfOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Creates hours of operation. </p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateHoursOfOperationRequest} createHoursOfOperationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createHoursOfOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHoursOfOperationResponse}
     */
    createHoursOfOperation(instanceId, createHoursOfOperationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHoursOfOperationRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createHoursOfOperation");
      }
      // verify the required parameter 'createHoursOfOperationRequest' is set
      if (createHoursOfOperationRequest === undefined || createHoursOfOperationRequest === null) {
        throw new Error("Missing the required parameter 'createHoursOfOperationRequest' when calling createHoursOfOperation");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateHoursOfOperationResponse;
      return this.apiClient.callApi(
        '/hours-of-operations/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInstance operation.
     * @callback module:api/DefaultApi~createInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Initiates an Amazon Connect instance with all the supported channels enabled. It does not attach any storage, such as Amazon Simple Storage Service (Amazon S3) or Amazon Kinesis. It also does not allow for any configurations on features, such as Contact Lens for Amazon Connect. </p> <p>Amazon Connect enforces a limit on the total number of instances that you can create or delete in 30 days. If you exceed this limit, you will get an error message indicating there has been an excessive number of attempts at creating or deleting instances. You must wait 30 days before you can restart creating and deleting instances in your account.</p>
     * @param {module:model/CreateInstanceRequest} createInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInstanceResponse}
     */
    createInstance(createInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInstanceRequest;
      // verify the required parameter 'createInstanceRequest' is set
      if (createInstanceRequest === undefined || createInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createInstanceRequest' when calling createInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInstanceResponse;
      return this.apiClient.callApi(
        '/instance', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIntegrationAssociation operation.
     * @callback module:api/DefaultApi~createIntegrationAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateIntegrationAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon Web Services resource association with an Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateIntegrationAssociationRequest} createIntegrationAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createIntegrationAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateIntegrationAssociationResponse}
     */
    createIntegrationAssociation(instanceId, createIntegrationAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createIntegrationAssociationRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createIntegrationAssociation");
      }
      // verify the required parameter 'createIntegrationAssociationRequest' is set
      if (createIntegrationAssociationRequest === undefined || createIntegrationAssociationRequest === null) {
        throw new Error("Missing the required parameter 'createIntegrationAssociationRequest' when calling createIntegrationAssociation");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateIntegrationAssociationResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/integration-associations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createParticipant operation.
     * @callback module:api/DefaultApi~createParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateParticipantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new participant into an on-going chat contact. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/chat-customize-flow.html\">Customize chat flow experiences by integrating custom participants</a>.
     * @param {module:model/CreateParticipantRequest} createParticipantRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateParticipantResponse}
     */
    createParticipant(createParticipantRequest, opts, callback) {
      opts = opts || {};
      let postBody = createParticipantRequest;
      // verify the required parameter 'createParticipantRequest' is set
      if (createParticipantRequest === undefined || createParticipantRequest === null) {
        throw new Error("Missing the required parameter 'createParticipantRequest' when calling createParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateParticipantResponse;
      return this.apiClient.callApi(
        '/contact/create-participant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPrompt operation.
     * @callback module:api/DefaultApi~createPromptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePromptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a prompt. For more information about prompts, such as supported file types and maximum length, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/prompts.html\">Create prompts</a> in the <i>Amazon Connect Administrator's Guide</i>.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreatePromptRequest} createPromptRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPromptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePromptResponse}
     */
    createPrompt(instanceId, createPromptRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPromptRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createPrompt");
      }
      // verify the required parameter 'createPromptRequest' is set
      if (createPromptRequest === undefined || createPromptRequest === null) {
        throw new Error("Missing the required parameter 'createPromptRequest' when calling createPrompt");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePromptResponse;
      return this.apiClient.callApi(
        '/prompts/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQueue operation.
     * @callback module:api/DefaultApi~createQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Creates a new queue for the specified Amazon Connect instance.</p> <important> <p>If the number being used in the input is claimed to a traffic distribution group, and you are calling this API using an instance in the Amazon Web Services Region where the traffic distribution group was created, you can use either a full phone number ARN or UUID value for the <code>OutboundCallerIdNumberId</code> value of the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_OutboundCallerConfig\">OutboundCallerConfig</a> request body parameter. However, if the number is claimed to a traffic distribution group and you are calling this API using an instance in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a <code>ResourceNotFoundException</code>.</p> <p>Only use the phone number ARN format that doesn't contain <code>instance</code> in the path, for example, <code>arn:aws:connect:us-east-1:1234567890:phone-number/uuid</code>. This is the same ARN format that is returned when you call the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html\">ListPhoneNumbersV2</a> API.</p> </important>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateQueueRequest} createQueueRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateQueueResponse}
     */
    createQueue(instanceId, createQueueRequest, opts, callback) {
      opts = opts || {};
      let postBody = createQueueRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createQueue");
      }
      // verify the required parameter 'createQueueRequest' is set
      if (createQueueRequest === undefined || createQueueRequest === null) {
        throw new Error("Missing the required parameter 'createQueueRequest' when calling createQueue");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateQueueResponse;
      return this.apiClient.callApi(
        '/queues/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQuickConnect operation.
     * @callback module:api/DefaultApi~createQuickConnectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateQuickConnectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a quick connect for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateQuickConnectRequest} createQuickConnectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createQuickConnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateQuickConnectResponse}
     */
    createQuickConnect(instanceId, createQuickConnectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createQuickConnectRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createQuickConnect");
      }
      // verify the required parameter 'createQuickConnectRequest' is set
      if (createQuickConnectRequest === undefined || createQuickConnectRequest === null) {
        throw new Error("Missing the required parameter 'createQuickConnectRequest' when calling createQuickConnect");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateQuickConnectResponse;
      return this.apiClient.callApi(
        '/quick-connects/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoutingProfile operation.
     * @callback module:api/DefaultApi~createRoutingProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRoutingProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new routing profile.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateRoutingProfileRequest} createRoutingProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRoutingProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRoutingProfileResponse}
     */
    createRoutingProfile(instanceId, createRoutingProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRoutingProfileRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createRoutingProfile");
      }
      // verify the required parameter 'createRoutingProfileRequest' is set
      if (createRoutingProfileRequest === undefined || createRoutingProfileRequest === null) {
        throw new Error("Missing the required parameter 'createRoutingProfileRequest' when calling createRoutingProfile");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRoutingProfileResponse;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRule operation.
     * @callback module:api/DefaultApi~createRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a rule for the specified Amazon Connect instance.</p> <p>Use the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/connect-rules-language.html\">Rules Function language</a> to code conditions for the rule. </p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateRuleRequest} createRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRuleResponse}
     */
    createRule(instanceId, createRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRuleRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createRule");
      }
      // verify the required parameter 'createRuleRequest' is set
      if (createRuleRequest === undefined || createRuleRequest === null) {
        throw new Error("Missing the required parameter 'createRuleRequest' when calling createRule");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRuleResponse;
      return this.apiClient.callApi(
        '/rules/{InstanceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSecurityProfile operation.
     * @callback module:api/DefaultApi~createSecurityProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSecurityProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Creates a security profile.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateSecurityProfileRequest} createSecurityProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSecurityProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSecurityProfileResponse}
     */
    createSecurityProfile(instanceId, createSecurityProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSecurityProfileRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createSecurityProfile");
      }
      // verify the required parameter 'createSecurityProfileRequest' is set
      if (createSecurityProfileRequest === undefined || createSecurityProfileRequest === null) {
        throw new Error("Missing the required parameter 'createSecurityProfileRequest' when calling createSecurityProfile");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSecurityProfileResponse;
      return this.apiClient.callApi(
        '/security-profiles/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTaskTemplate operation.
     * @callback module:api/DefaultApi~createTaskTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTaskTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new task template in the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateTaskTemplateRequest} createTaskTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTaskTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTaskTemplateResponse}
     */
    createTaskTemplate(instanceId, createTaskTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTaskTemplateRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createTaskTemplate");
      }
      // verify the required parameter 'createTaskTemplateRequest' is set
      if (createTaskTemplateRequest === undefined || createTaskTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createTaskTemplateRequest' when calling createTaskTemplate");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTaskTemplateResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/task/template', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTrafficDistributionGroup operation.
     * @callback module:api/DefaultApi~createTrafficDistributionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTrafficDistributionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a traffic distribution group given an Amazon Connect instance that has been replicated. </p> <p>For more information about creating traffic distribution groups, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/setup-traffic-distribution-groups.html\">Set up traffic distribution groups</a> in the <i>Amazon Connect Administrator Guide</i>. </p>
     * @param {module:model/CreateTrafficDistributionGroupRequest} createTrafficDistributionGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTrafficDistributionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTrafficDistributionGroupResponse}
     */
    createTrafficDistributionGroup(createTrafficDistributionGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTrafficDistributionGroupRequest;
      // verify the required parameter 'createTrafficDistributionGroupRequest' is set
      if (createTrafficDistributionGroupRequest === undefined || createTrafficDistributionGroupRequest === null) {
        throw new Error("Missing the required parameter 'createTrafficDistributionGroupRequest' when calling createTrafficDistributionGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTrafficDistributionGroupResponse;
      return this.apiClient.callApi(
        '/traffic-distribution-group', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUseCase operation.
     * @callback module:api/DefaultApi~createUseCaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUseCaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a use case for an integration association.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} integrationAssociationId The identifier for the integration association.
     * @param {module:model/CreateUseCaseRequest} createUseCaseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUseCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUseCaseResponse}
     */
    createUseCase(instanceId, integrationAssociationId, createUseCaseRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUseCaseRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createUseCase");
      }
      // verify the required parameter 'integrationAssociationId' is set
      if (integrationAssociationId === undefined || integrationAssociationId === null) {
        throw new Error("Missing the required parameter 'integrationAssociationId' when calling createUseCase");
      }
      // verify the required parameter 'createUseCaseRequest' is set
      if (createUseCaseRequest === undefined || createUseCaseRequest === null) {
        throw new Error("Missing the required parameter 'createUseCaseRequest' when calling createUseCase");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'IntegrationAssociationId': integrationAssociationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUseCaseResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a user account for the specified Amazon Connect instance.</p> <p>For information about how to create user accounts using the Amazon Connect console, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/user-management.html\">Add Users</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateUserRequest} createUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserResponse}
     */
    createUser(instanceId, createUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUserRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createUser");
      }
      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling createUser");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserResponse;
      return this.apiClient.callApi(
        '/users/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserHierarchyGroup operation.
     * @callback module:api/DefaultApi~createUserHierarchyGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserHierarchyGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new user hierarchy group.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateUserHierarchyGroupRequest} createUserHierarchyGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUserHierarchyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserHierarchyGroupResponse}
     */
    createUserHierarchyGroup(instanceId, createUserHierarchyGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUserHierarchyGroupRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createUserHierarchyGroup");
      }
      // verify the required parameter 'createUserHierarchyGroupRequest' is set
      if (createUserHierarchyGroupRequest === undefined || createUserHierarchyGroupRequest === null) {
        throw new Error("Missing the required parameter 'createUserHierarchyGroupRequest' when calling createUserHierarchyGroup");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserHierarchyGroupResponse;
      return this.apiClient.callApi(
        '/user-hierarchy-groups/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVocabulary operation.
     * @callback module:api/DefaultApi~createVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a custom vocabulary associated with your Amazon Connect instance. You can set a custom vocabulary to be your default vocabulary for a given language. Contact Lens for Amazon Connect uses the default vocabulary in post-call and real-time contact analysis sessions for that language.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/CreateVocabularyRequest} createVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVocabularyResponse}
     */
    createVocabulary(instanceId, createVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVocabularyRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createVocabulary");
      }
      // verify the required parameter 'createVocabularyRequest' is set
      if (createVocabularyRequest === undefined || createVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'createVocabularyRequest' when calling createVocabulary");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVocabularyResponse;
      return this.apiClient.callApi(
        '/vocabulary/{InstanceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateEvaluationForm operation.
     * @callback module:api/DefaultApi~deactivateEvaluationFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeactivateEvaluationFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivates an evaluation form in the specified Amazon Connect instance. After a form is deactivated, it is no longer available for users to start new evaluations based on the form. 
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationFormId The unique identifier for the evaluation form.
     * @param {module:model/DeactivateEvaluationFormRequest} deactivateEvaluationFormRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deactivateEvaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeactivateEvaluationFormResponse}
     */
    deactivateEvaluationForm(instanceId, evaluationFormId, deactivateEvaluationFormRequest, opts, callback) {
      opts = opts || {};
      let postBody = deactivateEvaluationFormRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deactivateEvaluationForm");
      }
      // verify the required parameter 'evaluationFormId' is set
      if (evaluationFormId === undefined || evaluationFormId === null) {
        throw new Error("Missing the required parameter 'evaluationFormId' when calling deactivateEvaluationForm");
      }
      // verify the required parameter 'deactivateEvaluationFormRequest' is set
      if (deactivateEvaluationFormRequest === undefined || deactivateEvaluationFormRequest === null) {
        throw new Error("Missing the required parameter 'deactivateEvaluationFormRequest' when calling deactivateEvaluationForm");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationFormId': evaluationFormId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeactivateEvaluationFormResponse;
      return this.apiClient.callApi(
        '/evaluation-forms/{InstanceId}/{EvaluationFormId}/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactEvaluation operation.
     * @callback module:api/DefaultApi~deleteContactEvaluationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a contact evaluation in the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationId A unique identifier for the contact evaluation.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteContactEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContactEvaluation(instanceId, evaluationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteContactEvaluation");
      }
      // verify the required parameter 'evaluationId' is set
      if (evaluationId === undefined || evaluationId === null) {
        throw new Error("Missing the required parameter 'evaluationId' when calling deleteContactEvaluation");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationId': evaluationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contact-evaluations/{InstanceId}/{EvaluationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactFlow operation.
     * @callback module:api/DefaultApi~deleteContactFlowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a flow for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactFlowId The identifier of the flow.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteContactFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteContactFlow(instanceId, contactFlowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteContactFlow");
      }
      // verify the required parameter 'contactFlowId' is set
      if (contactFlowId === undefined || contactFlowId === null) {
        throw new Error("Missing the required parameter 'contactFlowId' when calling deleteContactFlow");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactFlowId': contactFlowId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact-flows/{InstanceId}/{ContactFlowId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactFlowModule operation.
     * @callback module:api/DefaultApi~deleteContactFlowModuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified flow module.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactFlowModuleId The identifier of the flow module.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteContactFlowModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteContactFlowModule(instanceId, contactFlowModuleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteContactFlowModule");
      }
      // verify the required parameter 'contactFlowModuleId' is set
      if (contactFlowModuleId === undefined || contactFlowModuleId === null) {
        throw new Error("Missing the required parameter 'contactFlowModuleId' when calling deleteContactFlowModule");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactFlowModuleId': contactFlowModuleId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEvaluationForm operation.
     * @callback module:api/DefaultApi~deleteEvaluationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an evaluation form in the specified Amazon Connect instance. </p> <ul> <li> <p>If the version property is provided, only the specified version of the evaluation form is deleted.</p> </li> <li> <p>If no version is provided, then the full form (all versions) is deleted.</p> </li> </ul>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationFormId The unique identifier for the evaluation form.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [version] The unique identifier for the evaluation form.
     * @param {module:api/DefaultApi~deleteEvaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEvaluationForm(instanceId, evaluationFormId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteEvaluationForm");
      }
      // verify the required parameter 'evaluationFormId' is set
      if (evaluationFormId === undefined || evaluationFormId === null) {
        throw new Error("Missing the required parameter 'evaluationFormId' when calling deleteEvaluationForm");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationFormId': evaluationFormId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/evaluation-forms/{InstanceId}/{EvaluationFormId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHoursOfOperation operation.
     * @callback module:api/DefaultApi~deleteHoursOfOperationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Deletes an hours of operation.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} hoursOfOperationId The identifier for the hours of operation.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteHoursOfOperationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHoursOfOperation(instanceId, hoursOfOperationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteHoursOfOperation");
      }
      // verify the required parameter 'hoursOfOperationId' is set
      if (hoursOfOperationId === undefined || hoursOfOperationId === null) {
        throw new Error("Missing the required parameter 'hoursOfOperationId' when calling deleteHoursOfOperation");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'HoursOfOperationId': hoursOfOperationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hours-of-operations/{InstanceId}/{HoursOfOperationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstance operation.
     * @callback module:api/DefaultApi~deleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Deletes the Amazon Connect instance.</p> <p>Amazon Connect enforces a limit on the total number of instances that you can create or delete in 30 days. If you exceed this limit, you will get an error message indicating there has been an excessive number of attempts at creating or deleting instances. You must wait 30 days before you can restart creating and deleting instances in your account.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInstance(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteInstance");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegrationAssociation operation.
     * @callback module:api/DefaultApi~deleteIntegrationAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon Web Services resource association from an Amazon Connect instance. The association must not have any use cases associated with it.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} integrationAssociationId The identifier for the integration association.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIntegrationAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntegrationAssociation(instanceId, integrationAssociationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteIntegrationAssociation");
      }
      // verify the required parameter 'integrationAssociationId' is set
      if (integrationAssociationId === undefined || integrationAssociationId === null) {
        throw new Error("Missing the required parameter 'integrationAssociationId' when calling deleteIntegrationAssociation");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'IntegrationAssociationId': integrationAssociationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePrompt operation.
     * @callback module:api/DefaultApi~deletePromptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a prompt.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} promptId A unique identifier for the prompt.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePromptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePrompt(instanceId, promptId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deletePrompt");
      }
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling deletePrompt");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'PromptId': promptId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/prompts/{InstanceId}/{PromptId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQueue operation.
     * @callback module:api/DefaultApi~deleteQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a queue.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteQueue(instanceId, queueId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteQueue");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling deleteQueue");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuickConnect operation.
     * @callback module:api/DefaultApi~deleteQuickConnectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a quick connect.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} quickConnectId The identifier for the quick connect.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteQuickConnectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteQuickConnect(instanceId, quickConnectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteQuickConnect");
      }
      // verify the required parameter 'quickConnectId' is set
      if (quickConnectId === undefined || quickConnectId === null) {
        throw new Error("Missing the required parameter 'quickConnectId' when calling deleteQuickConnect");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QuickConnectId': quickConnectId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quick-connects/{InstanceId}/{QuickConnectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoutingProfile operation.
     * @callback module:api/DefaultApi~deleteRoutingProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a routing profile.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRoutingProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRoutingProfile(instanceId, routingProfileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteRoutingProfile");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling deleteRoutingProfile");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRule operation.
     * @callback module:api/DefaultApi~deleteRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a rule for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} ruleId A unique identifier for the rule.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRule(instanceId, ruleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteRule");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling deleteRule");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RuleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rules/{InstanceId}/{RuleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSecurityProfile operation.
     * @callback module:api/DefaultApi~deleteSecurityProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Deletes a security profile.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} securityProfileId The identifier for the security profle.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSecurityProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSecurityProfile(instanceId, securityProfileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteSecurityProfile");
      }
      // verify the required parameter 'securityProfileId' is set
      if (securityProfileId === undefined || securityProfileId === null) {
        throw new Error("Missing the required parameter 'securityProfileId' when calling deleteSecurityProfile");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'SecurityProfileId': securityProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/security-profiles/{InstanceId}/{SecurityProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaskTemplate operation.
     * @callback module:api/DefaultApi~deleteTaskTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the task template.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} taskTemplateId A unique identifier for the task template.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTaskTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTaskTemplate(instanceId, taskTemplateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteTaskTemplate");
      }
      // verify the required parameter 'taskTemplateId' is set
      if (taskTemplateId === undefined || taskTemplateId === null) {
        throw new Error("Missing the required parameter 'taskTemplateId' when calling deleteTaskTemplate");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'TaskTemplateId': taskTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/task/template/{TaskTemplateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrafficDistributionGroup operation.
     * @callback module:api/DefaultApi~deleteTrafficDistributionGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a traffic distribution group. This API can be called only in the Region where the traffic distribution group is created.</p> <p>For more information about deleting traffic distribution groups, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/delete-traffic-distribution-groups.html\">Delete traffic distribution groups</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} trafficDistributionGroupId The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTrafficDistributionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTrafficDistributionGroup(trafficDistributionGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trafficDistributionGroupId' is set
      if (trafficDistributionGroupId === undefined || trafficDistributionGroupId === null) {
        throw new Error("Missing the required parameter 'trafficDistributionGroupId' when calling deleteTrafficDistributionGroup");
      }

      let pathParams = {
        'TrafficDistributionGroupId': trafficDistributionGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/traffic-distribution-group/{TrafficDistributionGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUseCase operation.
     * @callback module:api/DefaultApi~deleteUseCaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a use case from an integration association.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} integrationAssociationId The identifier for the integration association.
     * @param {String} useCaseId The identifier for the use case.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUseCaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUseCase(instanceId, integrationAssociationId, useCaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteUseCase");
      }
      // verify the required parameter 'integrationAssociationId' is set
      if (integrationAssociationId === undefined || integrationAssociationId === null) {
        throw new Error("Missing the required parameter 'integrationAssociationId' when calling deleteUseCase");
      }
      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling deleteUseCase");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'IntegrationAssociationId': integrationAssociationId,
        'UseCaseId': useCaseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases/{UseCaseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a user account from the specified Amazon Connect instance.</p> <p>For information about what happens to a user's data when their account is deleted, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/delete-users.html\">Delete Users from Your Amazon Connect Instance</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} userId The identifier of the user.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(instanceId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'UserId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{InstanceId}/{UserId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserHierarchyGroup operation.
     * @callback module:api/DefaultApi~deleteUserHierarchyGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing user hierarchy group. It must not be associated with any agents or have any active child groups.
     * @param {String} hierarchyGroupId The identifier of the hierarchy group.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUserHierarchyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserHierarchyGroup(hierarchyGroupId, instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hierarchyGroupId' is set
      if (hierarchyGroupId === undefined || hierarchyGroupId === null) {
        throw new Error("Missing the required parameter 'hierarchyGroupId' when calling deleteUserHierarchyGroup");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteUserHierarchyGroup");
      }

      let pathParams = {
        'HierarchyGroupId': hierarchyGroupId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVocabulary operation.
     * @callback module:api/DefaultApi~deleteVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the vocabulary that has the given identifier.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} vocabularyId The identifier of the custom vocabulary.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVocabularyResponse}
     */
    deleteVocabulary(instanceId, vocabularyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteVocabulary");
      }
      // verify the required parameter 'vocabularyId' is set
      if (vocabularyId === undefined || vocabularyId === null) {
        throw new Error("Missing the required parameter 'vocabularyId' when calling deleteVocabulary");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'VocabularyId': vocabularyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVocabularyResponse;
      return this.apiClient.callApi(
        '/vocabulary-remove/{InstanceId}/{VocabularyId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAgentStatus operation.
     * @callback module:api/DefaultApi~describeAgentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAgentStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Describes an agent status.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} agentStatusId The identifier for the agent status.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAgentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAgentStatusResponse}
     */
    describeAgentStatus(instanceId, agentStatusId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeAgentStatus");
      }
      // verify the required parameter 'agentStatusId' is set
      if (agentStatusId === undefined || agentStatusId === null) {
        throw new Error("Missing the required parameter 'agentStatusId' when calling describeAgentStatus");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'AgentStatusId': agentStatusId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAgentStatusResponse;
      return this.apiClient.callApi(
        '/agent-status/{InstanceId}/{AgentStatusId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeContact operation.
     * @callback module:api/DefaultApi~describeContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Describes the specified contact. </p> <important> <p>Contact information remains available in Amazon Connect for 24 months, and then it is deleted.</p> <p>Only data from November 12, 2021, and later is returned by this API.</p> </important>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactId The identifier of the contact.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeContactResponse}
     */
    describeContact(instanceId, contactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeContact");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling describeContact");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeContactResponse;
      return this.apiClient.callApi(
        '/contacts/{InstanceId}/{ContactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeContactEvaluation operation.
     * @callback module:api/DefaultApi~describeContactEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeContactEvaluationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a contact evaluation in the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationId A unique identifier for the contact evaluation.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeContactEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeContactEvaluationResponse}
     */
    describeContactEvaluation(instanceId, evaluationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeContactEvaluation");
      }
      // verify the required parameter 'evaluationId' is set
      if (evaluationId === undefined || evaluationId === null) {
        throw new Error("Missing the required parameter 'evaluationId' when calling describeContactEvaluation");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationId': evaluationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeContactEvaluationResponse;
      return this.apiClient.callApi(
        '/contact-evaluations/{InstanceId}/{EvaluationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeContactFlow operation.
     * @callback module:api/DefaultApi~describeContactFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeContactFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the specified flow.</p> <p>You can also create and update flows using the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\">Amazon Connect Flow language</a>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance.
     * @param {String} contactFlowId The identifier of the flow.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeContactFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeContactFlowResponse}
     */
    describeContactFlow(instanceId, contactFlowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeContactFlow");
      }
      // verify the required parameter 'contactFlowId' is set
      if (contactFlowId === undefined || contactFlowId === null) {
        throw new Error("Missing the required parameter 'contactFlowId' when calling describeContactFlow");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactFlowId': contactFlowId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeContactFlowResponse;
      return this.apiClient.callApi(
        '/contact-flows/{InstanceId}/{ContactFlowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeContactFlowModule operation.
     * @callback module:api/DefaultApi~describeContactFlowModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeContactFlowModuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified flow module.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactFlowModuleId The identifier of the flow module.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeContactFlowModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeContactFlowModuleResponse}
     */
    describeContactFlowModule(instanceId, contactFlowModuleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeContactFlowModule");
      }
      // verify the required parameter 'contactFlowModuleId' is set
      if (contactFlowModuleId === undefined || contactFlowModuleId === null) {
        throw new Error("Missing the required parameter 'contactFlowModuleId' when calling describeContactFlowModule");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactFlowModuleId': contactFlowModuleId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeContactFlowModuleResponse;
      return this.apiClient.callApi(
        '/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEvaluationForm operation.
     * @callback module:api/DefaultApi~describeEvaluationFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEvaluationFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an evaluation form in the specified Amazon Connect instance. If the version property is not provided, the latest version of the evaluation form is described.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationFormId A unique identifier for the contact evaluation.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [version] A version of the evaluation form.
     * @param {module:api/DefaultApi~describeEvaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEvaluationFormResponse}
     */
    describeEvaluationForm(instanceId, evaluationFormId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeEvaluationForm");
      }
      // verify the required parameter 'evaluationFormId' is set
      if (evaluationFormId === undefined || evaluationFormId === null) {
        throw new Error("Missing the required parameter 'evaluationFormId' when calling describeEvaluationForm");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationFormId': evaluationFormId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeEvaluationFormResponse;
      return this.apiClient.callApi(
        '/evaluation-forms/{InstanceId}/{EvaluationFormId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeHoursOfOperation operation.
     * @callback module:api/DefaultApi~describeHoursOfOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeHoursOfOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Describes the hours of operation.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} hoursOfOperationId The identifier for the hours of operation.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeHoursOfOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeHoursOfOperationResponse}
     */
    describeHoursOfOperation(instanceId, hoursOfOperationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeHoursOfOperation");
      }
      // verify the required parameter 'hoursOfOperationId' is set
      if (hoursOfOperationId === undefined || hoursOfOperationId === null) {
        throw new Error("Missing the required parameter 'hoursOfOperationId' when calling describeHoursOfOperation");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'HoursOfOperationId': hoursOfOperationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeHoursOfOperationResponse;
      return this.apiClient.callApi(
        '/hours-of-operations/{InstanceId}/{HoursOfOperationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInstance operation.
     * @callback module:api/DefaultApi~describeInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Returns the current state of the specified instance identifier. It tracks the instance while it is being created and returns an error status, if applicable. </p> <p>If an instance is not created successfully, the instance status reason field returns details relevant to the reason. The instance in a failed state is returned only for 24 hours after the CreateInstance API was invoked.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInstanceResponse}
     */
    describeInstance(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeInstance");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInstanceResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInstanceAttribute operation.
     * @callback module:api/DefaultApi~describeInstanceAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInstanceAttributeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Describes the specified instance attribute.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/String} attributeType The type of attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInstanceAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInstanceAttributeResponse}
     */
    describeInstanceAttribute(instanceId, attributeType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeInstanceAttribute");
      }
      // verify the required parameter 'attributeType' is set
      if (attributeType === undefined || attributeType === null) {
        throw new Error("Missing the required parameter 'attributeType' when calling describeInstanceAttribute");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'AttributeType': attributeType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInstanceAttributeResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/attribute/{AttributeType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInstanceStorageConfig operation.
     * @callback module:api/DefaultApi~describeInstanceStorageConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInstanceStorageConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Retrieves the current storage configurations for the specified resource type, association ID, and instance ID.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} associationId The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
     * @param {module:model/String} resourceType A valid resource type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInstanceStorageConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInstanceStorageConfigResponse}
     */
    describeInstanceStorageConfig(instanceId, associationId, resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeInstanceStorageConfig");
      }
      // verify the required parameter 'associationId' is set
      if (associationId === undefined || associationId === null) {
        throw new Error("Missing the required parameter 'associationId' when calling describeInstanceStorageConfig");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling describeInstanceStorageConfig");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'AssociationId': associationId
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInstanceStorageConfigResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/storage-config/{AssociationId}#resourceType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePhoneNumber operation.
     * @callback module:api/DefaultApi~describePhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets details and status of a phone number that’s claimed to your Amazon Connect instance or traffic distribution group.</p> <important> <p>If the number is claimed to a traffic distribution group, and you are calling in the Amazon Web Services Region where the traffic distribution group was created, you can use either a phone number ARN or UUID value for the <code>PhoneNumberId</code> URI request parameter. However, if the number is claimed to a traffic distribution group and you are calling this API in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a <code>ResourceNotFoundException</code>.</p> </important>
     * @param {String} phoneNumberId A unique identifier for the phone number.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePhoneNumberResponse}
     */
    describePhoneNumber(phoneNumberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'phoneNumberId' is set
      if (phoneNumberId === undefined || phoneNumberId === null) {
        throw new Error("Missing the required parameter 'phoneNumberId' when calling describePhoneNumber");
      }

      let pathParams = {
        'PhoneNumberId': phoneNumberId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribePhoneNumberResponse;
      return this.apiClient.callApi(
        '/phone-number/{PhoneNumberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePrompt operation.
     * @callback module:api/DefaultApi~describePromptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePromptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the prompt.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} promptId A unique identifier for the prompt.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePromptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePromptResponse}
     */
    describePrompt(instanceId, promptId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describePrompt");
      }
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling describePrompt");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'PromptId': promptId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribePromptResponse;
      return this.apiClient.callApi(
        '/prompts/{InstanceId}/{PromptId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeQueue operation.
     * @callback module:api/DefaultApi~describeQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Describes the specified queue.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeQueueResponse}
     */
    describeQueue(instanceId, queueId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeQueue");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling describeQueue");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeQueueResponse;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeQuickConnect operation.
     * @callback module:api/DefaultApi~describeQuickConnectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeQuickConnectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the quick connect.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} quickConnectId The identifier for the quick connect.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeQuickConnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeQuickConnectResponse}
     */
    describeQuickConnect(instanceId, quickConnectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeQuickConnect");
      }
      // verify the required parameter 'quickConnectId' is set
      if (quickConnectId === undefined || quickConnectId === null) {
        throw new Error("Missing the required parameter 'quickConnectId' when calling describeQuickConnect");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QuickConnectId': quickConnectId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeQuickConnectResponse;
      return this.apiClient.callApi(
        '/quick-connects/{InstanceId}/{QuickConnectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRoutingProfile operation.
     * @callback module:api/DefaultApi~describeRoutingProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRoutingProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified routing profile.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRoutingProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRoutingProfileResponse}
     */
    describeRoutingProfile(instanceId, routingProfileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeRoutingProfile");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling describeRoutingProfile");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRoutingProfileResponse;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRule operation.
     * @callback module:api/DefaultApi~describeRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a rule for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} ruleId A unique identifier for the rule.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRuleResponse}
     */
    describeRule(instanceId, ruleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeRule");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling describeRule");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RuleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRuleResponse;
      return this.apiClient.callApi(
        '/rules/{InstanceId}/{RuleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSecurityProfile operation.
     * @callback module:api/DefaultApi~describeSecurityProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSecurityProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Gets basic information about the security profle.</p>
     * @param {String} securityProfileId The identifier for the security profle.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSecurityProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSecurityProfileResponse}
     */
    describeSecurityProfile(securityProfileId, instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'securityProfileId' is set
      if (securityProfileId === undefined || securityProfileId === null) {
        throw new Error("Missing the required parameter 'securityProfileId' when calling describeSecurityProfile");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeSecurityProfile");
      }

      let pathParams = {
        'SecurityProfileId': securityProfileId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeSecurityProfileResponse;
      return this.apiClient.callApi(
        '/security-profiles/{InstanceId}/{SecurityProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTrafficDistributionGroup operation.
     * @callback module:api/DefaultApi~describeTrafficDistributionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTrafficDistributionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details and status of a traffic distribution group.
     * @param {String} trafficDistributionGroupId The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTrafficDistributionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTrafficDistributionGroupResponse}
     */
    describeTrafficDistributionGroup(trafficDistributionGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trafficDistributionGroupId' is set
      if (trafficDistributionGroupId === undefined || trafficDistributionGroupId === null) {
        throw new Error("Missing the required parameter 'trafficDistributionGroupId' when calling describeTrafficDistributionGroup");
      }

      let pathParams = {
        'TrafficDistributionGroupId': trafficDistributionGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeTrafficDistributionGroupResponse;
      return this.apiClient.callApi(
        '/traffic-distribution-group/{TrafficDistributionGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUser operation.
     * @callback module:api/DefaultApi~describeUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified user account. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID in the Amazon Connect console</a> (it’s the final part of the ARN). The console does not display the user IDs. Instead, list the users and note the IDs provided in the output.
     * @param {String} userId The identifier of the user account.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUserResponse}
     */
    describeUser(userId, instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling describeUser");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeUser");
      }

      let pathParams = {
        'UserId': userId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeUserResponse;
      return this.apiClient.callApi(
        '/users/{InstanceId}/{UserId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUserHierarchyGroup operation.
     * @callback module:api/DefaultApi~describeUserHierarchyGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUserHierarchyGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified hierarchy group.
     * @param {String} hierarchyGroupId The identifier of the hierarchy group.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUserHierarchyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUserHierarchyGroupResponse}
     */
    describeUserHierarchyGroup(hierarchyGroupId, instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hierarchyGroupId' is set
      if (hierarchyGroupId === undefined || hierarchyGroupId === null) {
        throw new Error("Missing the required parameter 'hierarchyGroupId' when calling describeUserHierarchyGroup");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeUserHierarchyGroup");
      }

      let pathParams = {
        'HierarchyGroupId': hierarchyGroupId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeUserHierarchyGroupResponse;
      return this.apiClient.callApi(
        '/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUserHierarchyStructure operation.
     * @callback module:api/DefaultApi~describeUserHierarchyStructureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUserHierarchyStructureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the hierarchy structure of the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUserHierarchyStructureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUserHierarchyStructureResponse}
     */
    describeUserHierarchyStructure(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeUserHierarchyStructure");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeUserHierarchyStructureResponse;
      return this.apiClient.callApi(
        '/user-hierarchy-structure/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVocabulary operation.
     * @callback module:api/DefaultApi~describeVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified vocabulary.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} vocabularyId The identifier of the custom vocabulary.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVocabularyResponse}
     */
    describeVocabulary(instanceId, vocabularyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling describeVocabulary");
      }
      // verify the required parameter 'vocabularyId' is set
      if (vocabularyId === undefined || vocabularyId === null) {
        throw new Error("Missing the required parameter 'vocabularyId' when calling describeVocabulary");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'VocabularyId': vocabularyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVocabularyResponse;
      return this.apiClient.callApi(
        '/vocabulary/{InstanceId}/{VocabularyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateApprovedOrigin operation.
     * @callback module:api/DefaultApi~disassociateApprovedOriginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Revokes access to integrated applications from Amazon Connect.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} origin The domain URL of the integrated application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateApprovedOriginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateApprovedOrigin(instanceId, origin, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling disassociateApprovedOrigin");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling disassociateApprovedOrigin");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'origin': origin
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/approved-origin#origin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateBot operation.
     * @callback module:api/DefaultApi~disassociateBotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Revokes authorization from the specified instance to access the specified Amazon Lex or Amazon Lex V2 bot. </p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/AssociateBotRequest} associateBotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateBotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateBot(instanceId, associateBotRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateBotRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling disassociateBot");
      }
      // verify the required parameter 'associateBotRequest' is set
      if (associateBotRequest === undefined || associateBotRequest === null) {
        throw new Error("Missing the required parameter 'associateBotRequest' when calling disassociateBot");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/bot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateInstanceStorageConfig operation.
     * @callback module:api/DefaultApi~disassociateInstanceStorageConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Removes the storage type configurations for the specified resource type and association ID.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} associationId The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
     * @param {module:model/String} resourceType A valid resource type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateInstanceStorageConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateInstanceStorageConfig(instanceId, associationId, resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling disassociateInstanceStorageConfig");
      }
      // verify the required parameter 'associationId' is set
      if (associationId === undefined || associationId === null) {
        throw new Error("Missing the required parameter 'associationId' when calling disassociateInstanceStorageConfig");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling disassociateInstanceStorageConfig");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'AssociationId': associationId
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/storage-config/{AssociationId}#resourceType', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateLambdaFunction operation.
     * @callback module:api/DefaultApi~disassociateLambdaFunctionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Remove the Lambda function from the dropdown options available in the relevant flow blocks.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance..
     * @param {String} functionArn The Amazon Resource Name (ARN) of the Lambda function being disassociated.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateLambdaFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateLambdaFunction(instanceId, functionArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling disassociateLambdaFunction");
      }
      // verify the required parameter 'functionArn' is set
      if (functionArn === undefined || functionArn === null) {
        throw new Error("Missing the required parameter 'functionArn' when calling disassociateLambdaFunction");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'functionArn': functionArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/lambda-function#functionArn', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateLexBot operation.
     * @callback module:api/DefaultApi~disassociateLexBotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Revokes authorization from the specified instance to access the specified Amazon Lex bot.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} botName The name of the Amazon Lex bot. Maximum character limit of 50.
     * @param {String} lexRegion The Amazon Web Services Region in which the Amazon Lex bot has been created.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateLexBotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateLexBot(instanceId, botName, lexRegion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling disassociateLexBot");
      }
      // verify the required parameter 'botName' is set
      if (botName === undefined || botName === null) {
        throw new Error("Missing the required parameter 'botName' when calling disassociateLexBot");
      }
      // verify the required parameter 'lexRegion' is set
      if (lexRegion === undefined || lexRegion === null) {
        throw new Error("Missing the required parameter 'lexRegion' when calling disassociateLexBot");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'botName': botName,
        'lexRegion': lexRegion
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/lex-bot#botName&lexRegion', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociatePhoneNumberContactFlow operation.
     * @callback module:api/DefaultApi~disassociatePhoneNumberContactFlowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the flow association from a phone number claimed to your Amazon Connect instance.</p> <important> <p>If the number is claimed to a traffic distribution group, and you are calling this API using an instance in the Amazon Web Services Region where the traffic distribution group was created, you can use either a full phone number ARN or UUID value for the <code>PhoneNumberId</code> URI request parameter. However, if the number is claimed to a traffic distribution group and you are calling this API using an instance in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a <code>ResourceNotFoundException</code>.</p> </important>
     * @param {String} phoneNumberId A unique identifier for the phone number.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociatePhoneNumberContactFlowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociatePhoneNumberContactFlow(phoneNumberId, instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'phoneNumberId' is set
      if (phoneNumberId === undefined || phoneNumberId === null) {
        throw new Error("Missing the required parameter 'phoneNumberId' when calling disassociatePhoneNumberContactFlow");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling disassociatePhoneNumberContactFlow");
      }

      let pathParams = {
        'PhoneNumberId': phoneNumberId
      };
      let queryParams = {
        'instanceId': instanceId
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/phone-number/{PhoneNumberId}/contact-flow#instanceId', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateQueueQuickConnects operation.
     * @callback module:api/DefaultApi~disassociateQueueQuickConnectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Disassociates a set of quick connects from a queue.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {module:model/DisassociateQueueQuickConnectsRequest} disassociateQueueQuickConnectsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateQueueQuickConnectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateQueueQuickConnects(instanceId, queueId, disassociateQueueQuickConnectsRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateQueueQuickConnectsRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling disassociateQueueQuickConnects");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling disassociateQueueQuickConnects");
      }
      // verify the required parameter 'disassociateQueueQuickConnectsRequest' is set
      if (disassociateQueueQuickConnectsRequest === undefined || disassociateQueueQuickConnectsRequest === null) {
        throw new Error("Missing the required parameter 'disassociateQueueQuickConnectsRequest' when calling disassociateQueueQuickConnects");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}/disassociate-quick-connects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateRoutingProfileQueues operation.
     * @callback module:api/DefaultApi~disassociateRoutingProfileQueuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a set of queues from a routing profile.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {module:model/DisassociateRoutingProfileQueuesRequest} disassociateRoutingProfileQueuesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateRoutingProfileQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateRoutingProfileQueues(instanceId, routingProfileId, disassociateRoutingProfileQueuesRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateRoutingProfileQueuesRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling disassociateRoutingProfileQueues");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling disassociateRoutingProfileQueues");
      }
      // verify the required parameter 'disassociateRoutingProfileQueuesRequest' is set
      if (disassociateRoutingProfileQueuesRequest === undefined || disassociateRoutingProfileQueuesRequest === null) {
        throw new Error("Missing the required parameter 'disassociateRoutingProfileQueuesRequest' when calling disassociateRoutingProfileQueues");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}/disassociate-queues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateSecurityKey operation.
     * @callback module:api/DefaultApi~disassociateSecurityKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Deletes the specified security key.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} associationId The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateSecurityKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateSecurityKey(instanceId, associationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling disassociateSecurityKey");
      }
      // verify the required parameter 'associationId' is set
      if (associationId === undefined || associationId === null) {
        throw new Error("Missing the required parameter 'associationId' when calling disassociateSecurityKey");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'AssociationId': associationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/security-key/{AssociationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dismissUserContact operation.
     * @callback module:api/DefaultApi~dismissUserContactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dismisses contacts from an agent’s CCP and returns the agent to an available state, which allows the agent to receive a new routed contact. Contacts can only be dismissed if they are in a <code>MISSED</code>, <code>ERROR</code>, <code>ENDED</code>, or <code>REJECTED</code> state in the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/about-contact-states.html\">Agent Event Stream</a>.
     * @param {String} userId The identifier of the user account.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
     * @param {module:model/DismissUserContactRequest} dismissUserContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~dismissUserContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dismissUserContact(userId, instanceId, dismissUserContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = dismissUserContactRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling dismissUserContact");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling dismissUserContact");
      }
      // verify the required parameter 'dismissUserContactRequest' is set
      if (dismissUserContactRequest === undefined || dismissUserContactRequest === null) {
        throw new Error("Missing the required parameter 'dismissUserContactRequest' when calling dismissUserContact");
      }

      let pathParams = {
        'UserId': userId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/{InstanceId}/{UserId}/contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactAttributes operation.
     * @callback module:api/DefaultApi~getContactAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContactAttributesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the contact attributes for the specified contact.
     * @param {String} instanceId The identifier of the Amazon Connect instance.
     * @param {String} initialContactId The identifier of the initial contact.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContactAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContactAttributesResponse}
     */
    getContactAttributes(instanceId, initialContactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getContactAttributes");
      }
      // verify the required parameter 'initialContactId' is set
      if (initialContactId === undefined || initialContactId === null) {
        throw new Error("Missing the required parameter 'initialContactId' when calling getContactAttributes");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'InitialContactId': initialContactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetContactAttributesResponse;
      return this.apiClient.callApi(
        '/contact/attributes/{InstanceId}/{InitialContactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentMetricData operation.
     * @callback module:api/DefaultApi~getCurrentMetricDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCurrentMetricDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the real-time metric data from the specified Amazon Connect instance.</p> <p>For a description of each metric, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html\">Real-time Metrics Definitions</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/GetCurrentMetricDataRequest} getCurrentMetricDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getCurrentMetricDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCurrentMetricDataResponse}
     */
    getCurrentMetricData(instanceId, getCurrentMetricDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = getCurrentMetricDataRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getCurrentMetricData");
      }
      // verify the required parameter 'getCurrentMetricDataRequest' is set
      if (getCurrentMetricDataRequest === undefined || getCurrentMetricDataRequest === null) {
        throw new Error("Missing the required parameter 'getCurrentMetricDataRequest' when calling getCurrentMetricData");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCurrentMetricDataResponse;
      return this.apiClient.callApi(
        '/metrics/current/{InstanceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUserData operation.
     * @callback module:api/DefaultApi~getCurrentUserDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCurrentUserDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the real-time active user data from the specified Amazon Connect instance. 
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/GetCurrentUserDataRequest} getCurrentUserDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getCurrentUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCurrentUserDataResponse}
     */
    getCurrentUserData(instanceId, getCurrentUserDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = getCurrentUserDataRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getCurrentUserData");
      }
      // verify the required parameter 'getCurrentUserDataRequest' is set
      if (getCurrentUserDataRequest === undefined || getCurrentUserDataRequest === null) {
        throw new Error("Missing the required parameter 'getCurrentUserDataRequest' when calling getCurrentUserData");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCurrentUserDataResponse;
      return this.apiClient.callApi(
        '/metrics/userdata/{InstanceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFederationToken operation.
     * @callback module:api/DefaultApi~getFederationTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFederationTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a token for federation.</p> <note> <p>This API doesn't support root users. If you try to invoke GetFederationToken with root credentials, an error message similar to the following one appears: </p> <p> <code>Provided identity: Principal: .... User: .... cannot be used for federation with Amazon Connect</code> </p> </note>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFederationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFederationTokenResponse}
     */
    getFederationToken(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getFederationToken");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFederationTokenResponse;
      return this.apiClient.callApi(
        '/user/federate/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetricData operation.
     * @callback module:api/DefaultApi~getMetricDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMetricDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets historical metric data from the specified Amazon Connect instance.</p> <p>For a description of each historical metric, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html\">Historical Metrics Definitions</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/GetMetricDataRequest} getMetricDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getMetricDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMetricDataResponse}
     */
    getMetricData(instanceId, getMetricDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = getMetricDataRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getMetricData");
      }
      // verify the required parameter 'getMetricDataRequest' is set
      if (getMetricDataRequest === undefined || getMetricDataRequest === null) {
        throw new Error("Missing the required parameter 'getMetricDataRequest' when calling getMetricData");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMetricDataResponse;
      return this.apiClient.callApi(
        '/metrics/historical/{InstanceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetricDataV2 operation.
     * @callback module:api/DefaultApi~getMetricDataV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMetricDataV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets metric data from the specified Amazon Connect instance. </p> <p> <code>GetMetricDataV2</code> offers more features than <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_GetMetricData.html\">GetMetricData</a>, the previous version of this API. It has new metrics, offers filtering at a metric level, and offers the ability to filter and group data by channels, queues, routing profiles, agents, and agent hierarchy levels. It can retrieve historical data for the last 35 days, in 24-hour intervals.</p> <p>For a description of the historical metrics that are supported by <code>GetMetricDataV2</code> and <code>GetMetricData</code>, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html\">Historical metrics definitions</a> in the <i>Amazon Connect Administrator's Guide</i>.</p>
     * @param {module:model/GetMetricDataV2Request} getMetricDataV2Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getMetricDataV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMetricDataV2Response}
     */
    getMetricDataV2(getMetricDataV2Request, opts, callback) {
      opts = opts || {};
      let postBody = getMetricDataV2Request;
      // verify the required parameter 'getMetricDataV2Request' is set
      if (getMetricDataV2Request === undefined || getMetricDataV2Request === null) {
        throw new Error("Missing the required parameter 'getMetricDataV2Request' when calling getMetricDataV2");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMetricDataV2Response;
      return this.apiClient.callApi(
        '/metrics/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPromptFile operation.
     * @callback module:api/DefaultApi~getPromptFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPromptFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the prompt file.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} promptId A unique identifier for the prompt.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPromptFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPromptFileResponse}
     */
    getPromptFile(instanceId, promptId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getPromptFile");
      }
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling getPromptFile");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'PromptId': promptId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPromptFileResponse;
      return this.apiClient.callApi(
        '/prompts/{InstanceId}/{PromptId}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskTemplate operation.
     * @callback module:api/DefaultApi~getTaskTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTaskTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a specific task template in the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} taskTemplateId A unique identifier for the task template.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [snapshotVersion] The system generated version of a task template that is associated with a task, when the task is created.
     * @param {module:api/DefaultApi~getTaskTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTaskTemplateResponse}
     */
    getTaskTemplate(instanceId, taskTemplateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getTaskTemplate");
      }
      // verify the required parameter 'taskTemplateId' is set
      if (taskTemplateId === undefined || taskTemplateId === null) {
        throw new Error("Missing the required parameter 'taskTemplateId' when calling getTaskTemplate");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'TaskTemplateId': taskTemplateId
      };
      let queryParams = {
        'snapshotVersion': opts['snapshotVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTaskTemplateResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/task/template/{TaskTemplateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrafficDistribution operation.
     * @callback module:api/DefaultApi~getTrafficDistributionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTrafficDistributionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the current traffic distribution for a given traffic distribution group.
     * @param {String} id The identifier of the traffic distribution group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTrafficDistributionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTrafficDistributionResponse}
     */
    getTrafficDistribution(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrafficDistribution");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTrafficDistributionResponse;
      return this.apiClient.callApi(
        '/traffic-distribution/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAgentStatuses operation.
     * @callback module:api/DefaultApi~listAgentStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAgentStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Lists agent statuses.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {Array.<module:model/AgentStatusType>} [agentStatusTypes] Available agent status types.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listAgentStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAgentStatusResponse}
     */
    listAgentStatuses(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listAgentStatuses");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'AgentStatusTypes': this.apiClient.buildCollectionParam(opts['agentStatusTypes'], 'multi'),
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAgentStatusResponse;
      return this.apiClient.callApi(
        '/agent-status/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApprovedOrigins operation.
     * @callback module:api/DefaultApi~listApprovedOriginsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApprovedOriginsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Returns a paginated list of all approved origins associated with the instance.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listApprovedOriginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApprovedOriginsResponse}
     */
    listApprovedOrigins(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listApprovedOrigins");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApprovedOriginsResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/approved-origins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBots operation.
     * @callback module:api/DefaultApi~listBotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>For the specified version of Amazon Lex, returns a paginated list of all the Amazon Lex bots currently associated with the instance. Use this API to returns both Amazon Lex V1 and V2 bots.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/String} lexVersion The version of Amazon Lex or Amazon Lex V2.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listBotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBotsResponse}
     */
    listBots(instanceId, lexVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listBots");
      }
      // verify the required parameter 'lexVersion' is set
      if (lexVersion === undefined || lexVersion === null) {
        throw new Error("Missing the required parameter 'lexVersion' when calling listBots");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'lexVersion': lexVersion,
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBotsResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/bots#lexVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContactEvaluations operation.
     * @callback module:api/DefaultApi~listContactEvaluationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContactEvaluationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists contact evaluations in the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactId The identifier of the contact in this instance of Amazon Connect. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p> <important> <p>This is not expected to be set because the value returned in the previous response is always null.</p> </important>
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listContactEvaluationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContactEvaluationsResponse}
     */
    listContactEvaluations(instanceId, contactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listContactEvaluations");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling listContactEvaluations");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'contactId': contactId,
        'nextToken': opts['nextToken'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContactEvaluationsResponse;
      return this.apiClient.callApi(
        '/contact-evaluations/{InstanceId}#contactId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContactFlowModules operation.
     * @callback module:api/DefaultApi~listContactFlowModulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContactFlowModulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about the flow modules for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {module:model/String} [state] The state of the flow module.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listContactFlowModulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContactFlowModulesResponse}
     */
    listContactFlowModules(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listContactFlowModules");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'state': opts['state'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContactFlowModulesResponse;
      return this.apiClient.callApi(
        '/contact-flow-modules-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContactFlows operation.
     * @callback module:api/DefaultApi~listContactFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContactFlowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the flows for the specified Amazon Connect instance.</p> <p>You can also create and update flows using the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\">Amazon Connect Flow language</a>.</p> <p>For more information about flows, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/concepts-contact-flows.html\">Flows</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/ContactFlowType>} [contactFlowTypes] The type of flow.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listContactFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContactFlowsResponse}
     */
    listContactFlows(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listContactFlows");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'contactFlowTypes': this.apiClient.buildCollectionParam(opts['contactFlowTypes'], 'multi'),
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContactFlowsResponse;
      return this.apiClient.callApi(
        '/contact-flows-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContactReferences operation.
     * @callback module:api/DefaultApi~listContactReferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContactReferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>For the specified <code>referenceTypes</code>, returns a list of references associated with the contact. </p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactId The identifier of the initial contact.
     * @param {Array.<module:model/ReferenceType>} referenceTypes The type of reference.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p> <important> <p>This is not expected to be set, because the value returned in the previous response is always null.</p> </important>
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listContactReferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContactReferencesResponse}
     */
    listContactReferences(instanceId, contactId, referenceTypes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listContactReferences");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling listContactReferences");
      }
      // verify the required parameter 'referenceTypes' is set
      if (referenceTypes === undefined || referenceTypes === null) {
        throw new Error("Missing the required parameter 'referenceTypes' when calling listContactReferences");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactId': contactId
      };
      let queryParams = {
        'referenceTypes': this.apiClient.buildCollectionParam(referenceTypes, 'multi'),
        'nextToken': opts['nextToken'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContactReferencesResponse;
      return this.apiClient.callApi(
        '/contact/references/{InstanceId}/{ContactId}#referenceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDefaultVocabularies operation.
     * @callback module:api/DefaultApi~listDefaultVocabulariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDefaultVocabulariesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the default vocabularies for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/ListDefaultVocabulariesRequest} listDefaultVocabulariesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDefaultVocabulariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDefaultVocabulariesResponse}
     */
    listDefaultVocabularies(instanceId, listDefaultVocabulariesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDefaultVocabulariesRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listDefaultVocabularies");
      }
      // verify the required parameter 'listDefaultVocabulariesRequest' is set
      if (listDefaultVocabulariesRequest === undefined || listDefaultVocabulariesRequest === null) {
        throw new Error("Missing the required parameter 'listDefaultVocabulariesRequest' when calling listDefaultVocabularies");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDefaultVocabulariesResponse;
      return this.apiClient.callApi(
        '/default-vocabulary-summary/{InstanceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEvaluationFormVersions operation.
     * @callback module:api/DefaultApi~listEvaluationFormVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEvaluationFormVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists versions of an evaluation form in the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationFormId The unique identifier for the evaluation form.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listEvaluationFormVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEvaluationFormVersionsResponse}
     */
    listEvaluationFormVersions(instanceId, evaluationFormId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listEvaluationFormVersions");
      }
      // verify the required parameter 'evaluationFormId' is set
      if (evaluationFormId === undefined || evaluationFormId === null) {
        throw new Error("Missing the required parameter 'evaluationFormId' when calling listEvaluationFormVersions");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationFormId': evaluationFormId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEvaluationFormVersionsResponse;
      return this.apiClient.callApi(
        '/evaluation-forms/{InstanceId}/{EvaluationFormId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEvaluationForms operation.
     * @callback module:api/DefaultApi~listEvaluationFormsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEvaluationFormsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists evaluation forms in the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listEvaluationFormsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEvaluationFormsResponse}
     */
    listEvaluationForms(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listEvaluationForms");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEvaluationFormsResponse;
      return this.apiClient.callApi(
        '/evaluation-forms/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHoursOfOperations operation.
     * @callback module:api/DefaultApi~listHoursOfOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListHoursOfOperationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the hours of operation for the specified Amazon Connect instance.</p> <p>For more information about hours of operation, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/set-hours-operation.html\">Set the Hours of Operation for a Queue</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listHoursOfOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListHoursOfOperationsResponse}
     */
    listHoursOfOperations(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listHoursOfOperations");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListHoursOfOperationsResponse;
      return this.apiClient.callApi(
        '/hours-of-operations-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstanceAttributes operation.
     * @callback module:api/DefaultApi~listInstanceAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInstanceAttributesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Returns a paginated list of all attribute types for the given instance.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listInstanceAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInstanceAttributesResponse}
     */
    listInstanceAttributes(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listInstanceAttributes");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInstanceAttributesResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstanceStorageConfigs operation.
     * @callback module:api/DefaultApi~listInstanceStorageConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInstanceStorageConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Returns a paginated list of storage configs for the identified instance and resource type.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/String} resourceType A valid resource type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listInstanceStorageConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInstanceStorageConfigsResponse}
     */
    listInstanceStorageConfigs(instanceId, resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listInstanceStorageConfigs");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling listInstanceStorageConfigs");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'resourceType': resourceType,
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInstanceStorageConfigsResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/storage-configs#resourceType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstances operation.
     * @callback module:api/DefaultApi~listInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Return a list of instances which are in active state, creation-in-progress state, and failed state. Instances that aren't successfully created (they are in a failed state) are returned only for 24 hours after the CreateInstance API was invoked.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInstancesResponse}
     */
    listInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInstancesResponse;
      return this.apiClient.callApi(
        '/instance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIntegrationAssociations operation.
     * @callback module:api/DefaultApi~listIntegrationAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIntegrationAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides summary information about the Amazon Web Services resource associations for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [integrationType] The integration type.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listIntegrationAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIntegrationAssociationsResponse}
     */
    listIntegrationAssociations(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listIntegrationAssociations");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'integrationType': opts['integrationType'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListIntegrationAssociationsResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/integration-associations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLambdaFunctions operation.
     * @callback module:api/DefaultApi~listLambdaFunctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLambdaFunctionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Returns a paginated list of all Lambda functions that display in the dropdown options in the relevant flow blocks.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listLambdaFunctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLambdaFunctionsResponse}
     */
    listLambdaFunctions(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listLambdaFunctions");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLambdaFunctionsResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/lambda-functions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLexBots operation.
     * @callback module:api/DefaultApi~listLexBotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLexBotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Returns a paginated list of all the Amazon Lex V1 bots currently associated with the instance. To return both Amazon Lex V1 and V2 bots, use the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_ListBots.html\">ListBots</a> API. </p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. If no value is specified, the default is 10. 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listLexBotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLexBotsResponse}
     */
    listLexBots(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listLexBots");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLexBotsResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/lex-bots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPhoneNumbers operation.
     * @callback module:api/DefaultApi~listPhoneNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPhoneNumbersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the phone numbers for the specified Amazon Connect instance. </p> <p>For more information about phone numbers, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/contact-center-phone-number.html\">Set Up Phone Numbers for Your Contact Center</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <important> <p>The phone number <code>Arn</code> value that is returned from each of the items in the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbers.html#connect-ListPhoneNumbers-response-PhoneNumberSummaryList\">PhoneNumberSummaryList</a> cannot be used to tag phone number resources. It will fail with a <code>ResourceNotFoundException</code>. Instead, use the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html\">ListPhoneNumbersV2</a> API. It returns the new phone number ARN that can be used to tag phone number resources.</p> </important>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/PhoneNumberType>} [phoneNumberTypes] The type of phone number.
     * @param {Array.<module:model/PhoneNumberCountryCode>} [phoneNumberCountryCodes] The ISO country code.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listPhoneNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPhoneNumbersResponse}
     */
    listPhoneNumbers(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listPhoneNumbers");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'phoneNumberTypes': this.apiClient.buildCollectionParam(opts['phoneNumberTypes'], 'multi'),
        'phoneNumberCountryCodes': this.apiClient.buildCollectionParam(opts['phoneNumberCountryCodes'], 'multi'),
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPhoneNumbersResponse;
      return this.apiClient.callApi(
        '/phone-numbers-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPhoneNumbersV2 operation.
     * @callback module:api/DefaultApi~listPhoneNumbersV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPhoneNumbersV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists phone numbers claimed to your Amazon Connect instance or traffic distribution group. If the provided <code>TargetArn</code> is a traffic distribution group, you can call this API in both Amazon Web Services Regions associated with traffic distribution group.</p> <p>For more information about phone numbers, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/contact-center-phone-number.html\">Set Up Phone Numbers for Your Contact Center</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {module:model/ListPhoneNumbersV2Request} listPhoneNumbersV2Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPhoneNumbersV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPhoneNumbersV2Response}
     */
    listPhoneNumbersV2(listPhoneNumbersV2Request, opts, callback) {
      opts = opts || {};
      let postBody = listPhoneNumbersV2Request;
      // verify the required parameter 'listPhoneNumbersV2Request' is set
      if (listPhoneNumbersV2Request === undefined || listPhoneNumbersV2Request === null) {
        throw new Error("Missing the required parameter 'listPhoneNumbersV2Request' when calling listPhoneNumbersV2");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPhoneNumbersV2Response;
      return this.apiClient.callApi(
        '/phone-number/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPrompts operation.
     * @callback module:api/DefaultApi~listPromptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPromptsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about the prompts for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listPromptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPromptsResponse}
     */
    listPrompts(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listPrompts");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPromptsResponse;
      return this.apiClient.callApi(
        '/prompts-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listQueueQuickConnects operation.
     * @callback module:api/DefaultApi~listQueueQuickConnectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListQueueQuickConnectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Lists the quick connects associated with a queue.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listQueueQuickConnectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListQueueQuickConnectsResponse}
     */
    listQueueQuickConnects(instanceId, queueId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listQueueQuickConnects");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling listQueueQuickConnects");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListQueueQuickConnectsResponse;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}/quick-connects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listQueues operation.
     * @callback module:api/DefaultApi~listQueuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListQueuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the queues for the specified Amazon Connect instance.</p> <p>If you do not specify a <code>QueueTypes</code> parameter, both standard and agent queues are returned. This might cause an unexpected truncation of results if you have more than 1000 agents and you limit the number of results of the API call in code.</p> <p>For more information about queues, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/concepts-queues-standard-and-agent.html\">Queues: Standard and Agent</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/QueueType>} [queueTypes] The type of queue.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListQueuesResponse}
     */
    listQueues(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listQueues");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'queueTypes': this.apiClient.buildCollectionParam(opts['queueTypes'], 'multi'),
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListQueuesResponse;
      return this.apiClient.callApi(
        '/queues-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listQuickConnects operation.
     * @callback module:api/DefaultApi~listQuickConnectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListQuickConnectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about the quick connects for the specified Amazon Connect instance. 
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {Array.<module:model/QuickConnectType>} [quickConnectTypes] The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listQuickConnectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListQuickConnectsResponse}
     */
    listQuickConnects(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listQuickConnects");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'QuickConnectTypes': this.apiClient.buildCollectionParam(opts['quickConnectTypes'], 'multi'),
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListQuickConnectsResponse;
      return this.apiClient.callApi(
        '/quick-connects/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoutingProfileQueues operation.
     * @callback module:api/DefaultApi~listRoutingProfileQueuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRoutingProfileQueuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the queues associated with a routing profile.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRoutingProfileQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRoutingProfileQueuesResponse}
     */
    listRoutingProfileQueues(instanceId, routingProfileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listRoutingProfileQueues");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling listRoutingProfileQueues");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRoutingProfileQueuesResponse;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}/queues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoutingProfiles operation.
     * @callback module:api/DefaultApi~listRoutingProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRoutingProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides summary information about the routing profiles for the specified Amazon Connect instance.</p> <p>For more information about routing profiles, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing.html\">Routing Profiles</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/routing-profiles.html\">Create a Routing Profile</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRoutingProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRoutingProfilesResponse}
     */
    listRoutingProfiles(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listRoutingProfiles");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRoutingProfilesResponse;
      return this.apiClient.callApi(
        '/routing-profiles-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRules operation.
     * @callback module:api/DefaultApi~listRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all rules for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [publishStatus] The publish status of the rule.
     * @param {module:model/String} [eventSourceName] The name of the event source.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRulesResponse}
     */
    listRules(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listRules");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'publishStatus': opts['publishStatus'],
        'eventSourceName': opts['eventSourceName'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRulesResponse;
      return this.apiClient.callApi(
        '/rules/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityKeys operation.
     * @callback module:api/DefaultApi~listSecurityKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSecurityKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Returns a paginated list of all security keys associated with the instance.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listSecurityKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSecurityKeysResponse}
     */
    listSecurityKeys(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listSecurityKeys");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSecurityKeysResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/security-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityProfilePermissions operation.
     * @callback module:api/DefaultApi~listSecurityProfilePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSecurityProfilePermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Lists the permissions granted to a security profile.</p>
     * @param {String} securityProfileId The identifier for the security profle.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listSecurityProfilePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSecurityProfilePermissionsResponse}
     */
    listSecurityProfilePermissions(securityProfileId, instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'securityProfileId' is set
      if (securityProfileId === undefined || securityProfileId === null) {
        throw new Error("Missing the required parameter 'securityProfileId' when calling listSecurityProfilePermissions");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listSecurityProfilePermissions");
      }

      let pathParams = {
        'SecurityProfileId': securityProfileId,
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSecurityProfilePermissionsResponse;
      return this.apiClient.callApi(
        '/security-profiles-permissions/{InstanceId}/{SecurityProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityProfiles operation.
     * @callback module:api/DefaultApi~listSecurityProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSecurityProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides summary information about the security profiles for the specified Amazon Connect instance.</p> <p>For more information about security profiles, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/connect-security-profiles.html\">Security Profiles</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listSecurityProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSecurityProfilesResponse}
     */
    listSecurityProfiles(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listSecurityProfiles");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSecurityProfilesResponse;
      return this.apiClient.callApi(
        '/security-profiles-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the tags for the specified resource.</p> <p>For sample policies that use tags, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/security_iam_id-based-policy-examples.html\">Amazon Connect Identity-Based Policy Examples</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource. All Amazon Connect resources (instances, queues, flows, routing profiles, etc) have an ARN. To locate the ARN for an instance, for example, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">Find your Amazon Connect instance ID/ARN</a>. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTaskTemplates operation.
     * @callback module:api/DefaultApi~listTaskTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTaskTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists task templates for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p> <important> <p>It is not expected that you set this because the value returned in the previous response is always null.</p> </important>
     * @param {Number} [maxResults] <p>The maximum number of results to return per page.</p> <important> <p>It is not expected that you set this.</p> </important>
     * @param {module:model/String} [status] Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.
     * @param {String} [name] The name of the task template.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listTaskTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTaskTemplatesResponse}
     */
    listTaskTemplates(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listTaskTemplates");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'status': opts['status'],
        'name': opts['name'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTaskTemplatesResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/task/template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrafficDistributionGroups operation.
     * @callback module:api/DefaultApi~listTrafficDistributionGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTrafficDistributionGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists traffic distribution groups.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {String} [instanceId] The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listTrafficDistributionGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTrafficDistributionGroupsResponse}
     */
    listTrafficDistributionGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'instanceId': opts['instanceId'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTrafficDistributionGroupsResponse;
      return this.apiClient.callApi(
        '/traffic-distribution-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUseCases operation.
     * @callback module:api/DefaultApi~listUseCasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUseCasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the use cases for the integration association. 
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} integrationAssociationId The identifier for the integration association.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listUseCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUseCasesResponse}
     */
    listUseCases(instanceId, integrationAssociationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listUseCases");
      }
      // verify the required parameter 'integrationAssociationId' is set
      if (integrationAssociationId === undefined || integrationAssociationId === null) {
        throw new Error("Missing the required parameter 'integrationAssociationId' when calling listUseCases");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'IntegrationAssociationId': integrationAssociationId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUseCasesResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserHierarchyGroups operation.
     * @callback module:api/DefaultApi~listUserHierarchyGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserHierarchyGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides summary information about the hierarchy groups for the specified Amazon Connect instance.</p> <p>For more information about agent hierarchies, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/agent-hierarchy.html\">Set Up Agent Hierarchies</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listUserHierarchyGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserHierarchyGroupsResponse}
     */
    listUserHierarchyGroups(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listUserHierarchyGroups");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUserHierarchyGroupsResponse;
      return this.apiClient.callApi(
        '/user-hierarchy-groups-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/DefaultApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides summary information about the users for the specified Amazon Connect instance.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page. The default MaxResult size is 100.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsersResponse}
     */
    listUsers(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling listUsers");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUsersResponse;
      return this.apiClient.callApi(
        '/users-summary/{InstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the monitorContact operation.
     * @callback module:api/DefaultApi~monitorContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MonitorContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates silent monitoring of a contact. The Contact Control Panel (CCP) of the user specified by <i>userId</i> will be set to silent monitoring mode on the contact.
     * @param {module:model/MonitorContactRequest} monitorContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~monitorContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MonitorContactResponse}
     */
    monitorContact(monitorContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = monitorContactRequest;
      // verify the required parameter 'monitorContactRequest' is set
      if (monitorContactRequest === undefined || monitorContactRequest === null) {
        throw new Error("Missing the required parameter 'monitorContactRequest' when calling monitorContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MonitorContactResponse;
      return this.apiClient.callApi(
        '/contact/monitor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putUserStatus operation.
     * @callback module:api/DefaultApi~putUserStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Changes the current status of a user or agent in Amazon Connect. If the agent is currently handling a contact, this sets the agent's next status.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/metrics-agent-status.html\">Agent status</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/set-next-status.html\">Set your next status</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} userId The identifier of the user.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/PutUserStatusRequest} putUserStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putUserStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putUserStatus(userId, instanceId, putUserStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = putUserStatusRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putUserStatus");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling putUserStatus");
      }
      // verify the required parameter 'putUserStatusRequest' is set
      if (putUserStatusRequest === undefined || putUserStatusRequest === null) {
        throw new Error("Missing the required parameter 'putUserStatusRequest' when calling putUserStatus");
      }

      let pathParams = {
        'UserId': userId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/{InstanceId}/{UserId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasePhoneNumber operation.
     * @callback module:api/DefaultApi~releasePhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Releases a phone number previously claimed to an Amazon Connect instance or traffic distribution group. You can call this API only in the Amazon Web Services Region where the number was claimed.</p> <important> <p>To release phone numbers from a traffic distribution group, use the <code>ReleasePhoneNumber</code> API, not the Amazon Connect console.</p> <p>After releasing a phone number, the phone number enters into a cooldown period of 30 days. It cannot be searched for or claimed again until the period has ended. If you accidentally release a phone number, contact Amazon Web Services Support.</p> </important> <p>If you plan to claim and release numbers frequently during a 30 day period, contact us for a service quota exception. Otherwise, it is possible you will be blocked from claiming and releasing any more numbers until 30 days past the oldest number released has expired.</p> <p>By default you can claim and release up to 200% of your maximum number of active phone numbers during any 30 day period. If you claim and release phone numbers using the UI or API during a rolling 30 day cycle that exceeds 200% of your phone number service level quota, you will be blocked from claiming any more numbers until 30 days past the oldest number released has expired. </p> <p>For example, if you already have 99 claimed numbers and a service level quota of 99 phone numbers, and in any 30 day period you release 99, claim 99, and then release 99, you will have exceeded the 200% limit. At that point you are blocked from claiming any more numbers until you open an Amazon Web Services support ticket.</p>
     * @param {String} phoneNumberId A unique identifier for the phone number.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.
     * @param {module:api/DefaultApi~releasePhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasePhoneNumber(phoneNumberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'phoneNumberId' is set
      if (phoneNumberId === undefined || phoneNumberId === null) {
        throw new Error("Missing the required parameter 'phoneNumberId' when calling releasePhoneNumber");
      }

      let pathParams = {
        'PhoneNumberId': phoneNumberId
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/phone-number/{PhoneNumberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicateInstance operation.
     * @callback module:api/DefaultApi~replicateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicateInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Replicates an Amazon Connect instance in the specified Amazon Web Services Region.</p> <p>For more information about replicating an Amazon Connect instance, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/create-replica-connect-instance.html\">Create a replica of your existing Amazon Connect instance</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance. You can provide the <code>InstanceId</code>, or the entire ARN.
     * @param {module:model/ReplicateInstanceRequest} replicateInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~replicateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicateInstanceResponse}
     */
    replicateInstance(instanceId, replicateInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = replicateInstanceRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling replicateInstance");
      }
      // verify the required parameter 'replicateInstanceRequest' is set
      if (replicateInstanceRequest === undefined || replicateInstanceRequest === null) {
        throw new Error("Missing the required parameter 'replicateInstanceRequest' when calling replicateInstance");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicateInstanceResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/replicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeContactRecording operation.
     * @callback module:api/DefaultApi~resumeContactRecordingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>When a contact is being recorded, and the recording has been suspended using SuspendContactRecording, this API resumes recording the call or screen.</p> <p>Voice and screen recordings are supported.</p>
     * @param {module:model/ResumeContactRecordingRequest} resumeContactRecordingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resumeContactRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resumeContactRecording(resumeContactRecordingRequest, opts, callback) {
      opts = opts || {};
      let postBody = resumeContactRecordingRequest;
      // verify the required parameter 'resumeContactRecordingRequest' is set
      if (resumeContactRecordingRequest === undefined || resumeContactRecordingRequest === null) {
        throw new Error("Missing the required parameter 'resumeContactRecordingRequest' when calling resumeContactRecording");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact/resume-recording', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAvailablePhoneNumbers operation.
     * @callback module:api/DefaultApi~searchAvailablePhoneNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchAvailablePhoneNumbersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for available phone numbers that you can claim to your Amazon Connect instance or traffic distribution group. If the provided <code>TargetArn</code> is a traffic distribution group, you can call this API in both Amazon Web Services Regions associated with the traffic distribution group.
     * @param {module:model/SearchAvailablePhoneNumbersRequest} searchAvailablePhoneNumbersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchAvailablePhoneNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchAvailablePhoneNumbersResponse}
     */
    searchAvailablePhoneNumbers(searchAvailablePhoneNumbersRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchAvailablePhoneNumbersRequest;
      // verify the required parameter 'searchAvailablePhoneNumbersRequest' is set
      if (searchAvailablePhoneNumbersRequest === undefined || searchAvailablePhoneNumbersRequest === null) {
        throw new Error("Missing the required parameter 'searchAvailablePhoneNumbersRequest' when calling searchAvailablePhoneNumbers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchAvailablePhoneNumbersResponse;
      return this.apiClient.callApi(
        '/phone-number/search-available', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchHoursOfOperations operation.
     * @callback module:api/DefaultApi~searchHoursOfOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchHoursOfOperationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches the hours of operation in an Amazon Connect instance, with optional filtering.
     * @param {module:model/SearchHoursOfOperationsRequest} searchHoursOfOperationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchHoursOfOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchHoursOfOperationsResponse}
     */
    searchHoursOfOperations(searchHoursOfOperationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchHoursOfOperationsRequest;
      // verify the required parameter 'searchHoursOfOperationsRequest' is set
      if (searchHoursOfOperationsRequest === undefined || searchHoursOfOperationsRequest === null) {
        throw new Error("Missing the required parameter 'searchHoursOfOperationsRequest' when calling searchHoursOfOperations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchHoursOfOperationsResponse;
      return this.apiClient.callApi(
        '/search-hours-of-operations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPrompts operation.
     * @callback module:api/DefaultApi~searchPromptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPromptsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches prompts in an Amazon Connect instance, with optional filtering.
     * @param {module:model/SearchPromptsRequest} searchPromptsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchPromptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPromptsResponse}
     */
    searchPrompts(searchPromptsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchPromptsRequest;
      // verify the required parameter 'searchPromptsRequest' is set
      if (searchPromptsRequest === undefined || searchPromptsRequest === null) {
        throw new Error("Missing the required parameter 'searchPromptsRequest' when calling searchPrompts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPromptsResponse;
      return this.apiClient.callApi(
        '/search-prompts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchQueues operation.
     * @callback module:api/DefaultApi~searchQueuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchQueuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches queues in an Amazon Connect instance, with optional filtering.
     * @param {module:model/SearchQueuesRequest} searchQueuesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchQueuesResponse}
     */
    searchQueues(searchQueuesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchQueuesRequest;
      // verify the required parameter 'searchQueuesRequest' is set
      if (searchQueuesRequest === undefined || searchQueuesRequest === null) {
        throw new Error("Missing the required parameter 'searchQueuesRequest' when calling searchQueues");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchQueuesResponse;
      return this.apiClient.callApi(
        '/search-queues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchQuickConnects operation.
     * @callback module:api/DefaultApi~searchQuickConnectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchQuickConnectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches quick connects in an Amazon Connect instance, with optional filtering.
     * @param {module:model/SearchQuickConnectsRequest} searchQuickConnectsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchQuickConnectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchQuickConnectsResponse}
     */
    searchQuickConnects(searchQuickConnectsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchQuickConnectsRequest;
      // verify the required parameter 'searchQuickConnectsRequest' is set
      if (searchQuickConnectsRequest === undefined || searchQuickConnectsRequest === null) {
        throw new Error("Missing the required parameter 'searchQuickConnectsRequest' when calling searchQuickConnects");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchQuickConnectsResponse;
      return this.apiClient.callApi(
        '/search-quick-connects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchResourceTags operation.
     * @callback module:api/DefaultApi~searchResourceTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResourceTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches tags used in an Amazon Connect instance using optional search criteria.
     * @param {module:model/SearchResourceTagsRequest} searchResourceTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchResourceTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResourceTagsResponse}
     */
    searchResourceTags(searchResourceTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchResourceTagsRequest;
      // verify the required parameter 'searchResourceTagsRequest' is set
      if (searchResourceTagsRequest === undefined || searchResourceTagsRequest === null) {
        throw new Error("Missing the required parameter 'searchResourceTagsRequest' when calling searchResourceTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchResourceTagsResponse;
      return this.apiClient.callApi(
        '/search-resource-tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRoutingProfiles operation.
     * @callback module:api/DefaultApi~searchRoutingProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchRoutingProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches routing profiles in an Amazon Connect instance, with optional filtering.
     * @param {module:model/SearchRoutingProfilesRequest} searchRoutingProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchRoutingProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchRoutingProfilesResponse}
     */
    searchRoutingProfiles(searchRoutingProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchRoutingProfilesRequest;
      // verify the required parameter 'searchRoutingProfilesRequest' is set
      if (searchRoutingProfilesRequest === undefined || searchRoutingProfilesRequest === null) {
        throw new Error("Missing the required parameter 'searchRoutingProfilesRequest' when calling searchRoutingProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchRoutingProfilesResponse;
      return this.apiClient.callApi(
        '/search-routing-profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSecurityProfiles operation.
     * @callback module:api/DefaultApi~searchSecurityProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchSecurityProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches security profiles in an Amazon Connect instance, with optional filtering.
     * @param {module:model/SearchSecurityProfilesRequest} searchSecurityProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchSecurityProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchSecurityProfilesResponse}
     */
    searchSecurityProfiles(searchSecurityProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchSecurityProfilesRequest;
      // verify the required parameter 'searchSecurityProfilesRequest' is set
      if (searchSecurityProfilesRequest === undefined || searchSecurityProfilesRequest === null) {
        throw new Error("Missing the required parameter 'searchSecurityProfilesRequest' when calling searchSecurityProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchSecurityProfilesResponse;
      return this.apiClient.callApi(
        '/search-security-profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsers operation.
     * @callback module:api/DefaultApi~searchUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Searches users in an Amazon Connect instance, with optional filtering.</p> <note> <p> <code>AfterContactWorkTimeLimit</code> is returned in milliseconds. </p> </note>
     * @param {module:model/SearchUsersRequest} searchUsersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchUsersResponse}
     */
    searchUsers(searchUsersRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchUsersRequest;
      // verify the required parameter 'searchUsersRequest' is set
      if (searchUsersRequest === undefined || searchUsersRequest === null) {
        throw new Error("Missing the required parameter 'searchUsersRequest' when calling searchUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchUsersResponse;
      return this.apiClient.callApi(
        '/search-users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVocabularies operation.
     * @callback module:api/DefaultApi~searchVocabulariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchVocabulariesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for vocabularies within a specific Amazon Connect instance using <code>State</code>, <code>NameStartsWith</code>, and <code>LanguageCode</code>.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/SearchVocabulariesRequest} searchVocabulariesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchVocabulariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchVocabulariesResponse}
     */
    searchVocabularies(instanceId, searchVocabulariesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchVocabulariesRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling searchVocabularies");
      }
      // verify the required parameter 'searchVocabulariesRequest' is set
      if (searchVocabulariesRequest === undefined || searchVocabulariesRequest === null) {
        throw new Error("Missing the required parameter 'searchVocabulariesRequest' when calling searchVocabularies");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchVocabulariesResponse;
      return this.apiClient.callApi(
        '/vocabulary-summary/{InstanceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startChatContact operation.
     * @callback module:api/DefaultApi~startChatContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartChatContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Initiates a flow to start a new chat for the customer. Response of this API provides a token required to obtain credentials from the <a href=\"https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html\">CreateParticipantConnection</a> API in the Amazon Connect Participant Service.</p> <p>When a new chat contact is successfully created, clients must subscribe to the participant’s connection for the created chat within 5 minutes. This is achieved by invoking <a href=\"https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html\">CreateParticipantConnection</a> with WEBSOCKET and CONNECTION_CREDENTIALS. </p> <p>A 429 error occurs in the following situations:</p> <ul> <li> <p>API rate limit is exceeded. API TPS throttling returns a <code>TooManyRequests</code> exception.</p> </li> <li> <p>The <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">quota for concurrent active chats</a> is exceeded. Active chat throttling returns a <code>LimitExceededException</code>.</p> </li> </ul> <p>If you use the <code>ChatDurationInMinutes</code> parameter and receive a 400 error, your account may not support the ability to configure custom chat durations. For more information, contact Amazon Web Services Support. </p> <p>For more information about chat, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/chat.html\">Chat</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {module:model/StartChatContactRequest} startChatContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startChatContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartChatContactResponse}
     */
    startChatContact(startChatContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = startChatContactRequest;
      // verify the required parameter 'startChatContactRequest' is set
      if (startChatContactRequest === undefined || startChatContactRequest === null) {
        throw new Error("Missing the required parameter 'startChatContactRequest' when calling startChatContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartChatContactResponse;
      return this.apiClient.callApi(
        '/contact/chat', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startContactEvaluation operation.
     * @callback module:api/DefaultApi~startContactEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartContactEvaluationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts an empty evaluation in the specified Amazon Connect instance, using the given evaluation form for the particular contact. The evaluation form version used for the contact evaluation corresponds to the currently activated version. If no version is activated for the evaluation form, the contact evaluation cannot be started. </p> <note> <p>Evaluations created through the public API do not contain answer values suggested from automation.</p> </note>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/StartContactEvaluationRequest} startContactEvaluationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startContactEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartContactEvaluationResponse}
     */
    startContactEvaluation(instanceId, startContactEvaluationRequest, opts, callback) {
      opts = opts || {};
      let postBody = startContactEvaluationRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling startContactEvaluation");
      }
      // verify the required parameter 'startContactEvaluationRequest' is set
      if (startContactEvaluationRequest === undefined || startContactEvaluationRequest === null) {
        throw new Error("Missing the required parameter 'startContactEvaluationRequest' when calling startContactEvaluation");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartContactEvaluationResponse;
      return this.apiClient.callApi(
        '/contact-evaluations/{InstanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startContactRecording operation.
     * @callback module:api/DefaultApi~startContactRecordingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts recording the contact: </p> <ul> <li> <p>If the API is called <i>before</i> the agent joins the call, recording starts when the agent joins the call.</p> </li> <li> <p>If the API is called <i>after</i> the agent joins the call, recording starts at the time of the API call.</p> </li> </ul> <p>StartContactRecording is a one-time action. For example, if you use StopContactRecording to stop recording an ongoing call, you can't use StartContactRecording to restart it. For scenarios where the recording has started and you want to suspend and resume it, such as when collecting sensitive information (for example, a credit card number), use SuspendContactRecording and ResumeContactRecording.</p> <p>You can use this API to override the recording behavior configured in the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/set-recording-behavior.html\">Set recording behavior</a> block.</p> <p>Only voice recordings are supported at this time.</p>
     * @param {module:model/StartContactRecordingRequest} startContactRecordingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startContactRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startContactRecording(startContactRecordingRequest, opts, callback) {
      opts = opts || {};
      let postBody = startContactRecordingRequest;
      // verify the required parameter 'startContactRecordingRequest' is set
      if (startContactRecordingRequest === undefined || startContactRecordingRequest === null) {
        throw new Error("Missing the required parameter 'startContactRecordingRequest' when calling startContactRecording");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact/start-recording', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startContactStreaming operation.
     * @callback module:api/DefaultApi~startContactStreamingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartContactStreamingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Initiates real-time message streaming for a new chat contact.</p> <p> For more information about message streaming, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/chat-message-streaming.html\">Enable real-time chat message streaming</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {module:model/StartContactStreamingRequest} startContactStreamingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startContactStreamingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartContactStreamingResponse}
     */
    startContactStreaming(startContactStreamingRequest, opts, callback) {
      opts = opts || {};
      let postBody = startContactStreamingRequest;
      // verify the required parameter 'startContactStreamingRequest' is set
      if (startContactStreamingRequest === undefined || startContactStreamingRequest === null) {
        throw new Error("Missing the required parameter 'startContactStreamingRequest' when calling startContactStreaming");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartContactStreamingResponse;
      return this.apiClient.callApi(
        '/contact/start-streaming', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startOutboundVoiceContact operation.
     * @callback module:api/DefaultApi~startOutboundVoiceContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartOutboundVoiceContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Places an outbound call to a contact, and then initiates the flow. It performs the actions in the flow that's specified (in <code>ContactFlowId</code>).</p> <p>Agents do not initiate the outbound API, which means that they do not dial the contact. If the flow places an outbound call to a contact, and then puts the contact in queue, the call is then routed to the agent, like any other inbound case.</p> <p>There is a 60-second dialing timeout for this operation. If the call is not connected after 60 seconds, it fails.</p> <note> <p>UK numbers with a 447 prefix are not allowed by default. Before you can dial these UK mobile numbers, you must submit a service quota increase request. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>. </p> </note> <note> <p>Campaign calls are not allowed by default. Before you can make a call with <code>TrafficType</code> = <code>CAMPAIGN</code>, you must submit a service quota increase request to the quota <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#outbound-communications-quotas\">Amazon Connect campaigns</a>. </p> </note>
     * @param {module:model/StartOutboundVoiceContactRequest} startOutboundVoiceContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startOutboundVoiceContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartOutboundVoiceContactResponse}
     */
    startOutboundVoiceContact(startOutboundVoiceContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = startOutboundVoiceContactRequest;
      // verify the required parameter 'startOutboundVoiceContactRequest' is set
      if (startOutboundVoiceContactRequest === undefined || startOutboundVoiceContactRequest === null) {
        throw new Error("Missing the required parameter 'startOutboundVoiceContactRequest' when calling startOutboundVoiceContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartOutboundVoiceContactResponse;
      return this.apiClient.callApi(
        '/contact/outbound-voice', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTaskContact operation.
     * @callback module:api/DefaultApi~startTaskContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTaskContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates a flow to start a new task.
     * @param {module:model/StartTaskContactRequest} startTaskContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startTaskContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTaskContactResponse}
     */
    startTaskContact(startTaskContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = startTaskContactRequest;
      // verify the required parameter 'startTaskContactRequest' is set
      if (startTaskContactRequest === undefined || startTaskContactRequest === null) {
        throw new Error("Missing the required parameter 'startTaskContactRequest' when calling startTaskContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartTaskContactResponse;
      return this.apiClient.callApi(
        '/contact/task', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopContact operation.
     * @callback module:api/DefaultApi~stopContactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Ends the specified contact. This call does not work for the following initiation methods:</p> <ul> <li> <p>DISCONNECT</p> </li> <li> <p>TRANSFER</p> </li> <li> <p>QUEUE_TRANSFER</p> </li> </ul>
     * @param {module:model/StopContactRequest} stopContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopContact(stopContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopContactRequest;
      // verify the required parameter 'stopContactRequest' is set
      if (stopContactRequest === undefined || stopContactRequest === null) {
        throw new Error("Missing the required parameter 'stopContactRequest' when calling stopContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopContactRecording operation.
     * @callback module:api/DefaultApi~stopContactRecordingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops recording a call when a contact is being recorded. StopContactRecording is a one-time action. If you use StopContactRecording to stop recording an ongoing call, you can't use StartContactRecording to restart it. For scenarios where the recording has started and you want to suspend it for sensitive information (for example, to collect a credit card number), and then restart it, use SuspendContactRecording and ResumeContactRecording.</p> <p>Only voice recordings are supported at this time.</p>
     * @param {module:model/ResumeContactRecordingRequest} resumeContactRecordingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopContactRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopContactRecording(resumeContactRecordingRequest, opts, callback) {
      opts = opts || {};
      let postBody = resumeContactRecordingRequest;
      // verify the required parameter 'resumeContactRecordingRequest' is set
      if (resumeContactRecordingRequest === undefined || resumeContactRecordingRequest === null) {
        throw new Error("Missing the required parameter 'resumeContactRecordingRequest' when calling stopContactRecording");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact/stop-recording', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopContactStreaming operation.
     * @callback module:api/DefaultApi~stopContactStreamingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Ends message streaming on a specified contact. To restart message streaming on that contact, call the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_StartContactStreaming.html\">StartContactStreaming</a> API. 
     * @param {module:model/StopContactStreamingRequest} stopContactStreamingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopContactStreamingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopContactStreaming(stopContactStreamingRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopContactStreamingRequest;
      // verify the required parameter 'stopContactStreamingRequest' is set
      if (stopContactStreamingRequest === undefined || stopContactStreamingRequest === null) {
        throw new Error("Missing the required parameter 'stopContactStreamingRequest' when calling stopContactStreaming");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact/stop-streaming', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitContactEvaluation operation.
     * @callback module:api/DefaultApi~submitContactEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitContactEvaluationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Submits a contact evaluation in the specified Amazon Connect instance. Answers included in the request are merged with existing answers for the given evaluation. If no answers or notes are passed, the evaluation is submitted with the existing answers and notes. You can delete an answer or note by passing an empty object (<code>{}</code>) to the question identifier. </p> <p>If a contact evaluation is already in submitted state, this operation will trigger a resubmission.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationId A unique identifier for the contact evaluation.
     * @param {module:model/UpdateContactEvaluationRequest} updateContactEvaluationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~submitContactEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitContactEvaluationResponse}
     */
    submitContactEvaluation(instanceId, evaluationId, updateContactEvaluationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactEvaluationRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling submitContactEvaluation");
      }
      // verify the required parameter 'evaluationId' is set
      if (evaluationId === undefined || evaluationId === null) {
        throw new Error("Missing the required parameter 'evaluationId' when calling submitContactEvaluation");
      }
      // verify the required parameter 'updateContactEvaluationRequest' is set
      if (updateContactEvaluationRequest === undefined || updateContactEvaluationRequest === null) {
        throw new Error("Missing the required parameter 'updateContactEvaluationRequest' when calling submitContactEvaluation");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationId': evaluationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitContactEvaluationResponse;
      return this.apiClient.callApi(
        '/contact-evaluations/{InstanceId}/{EvaluationId}/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suspendContactRecording operation.
     * @callback module:api/DefaultApi~suspendContactRecordingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>When a contact is being recorded, this API suspends recording the call or screen. For example, you might suspend the call or screen recording while collecting sensitive information, such as a credit card number. Then use ResumeContactRecording to restart recording.</p> <p>The period of time that the recording is suspended is filled with silence in the final recording.</p> <p>Voice and screen recordings are supported.</p>
     * @param {module:model/ResumeContactRecordingRequest} resumeContactRecordingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~suspendContactRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    suspendContactRecording(resumeContactRecordingRequest, opts, callback) {
      opts = opts || {};
      let postBody = resumeContactRecordingRequest;
      // verify the required parameter 'resumeContactRecordingRequest' is set
      if (resumeContactRecordingRequest === undefined || resumeContactRecordingRequest === null) {
        throw new Error("Missing the required parameter 'resumeContactRecordingRequest' when calling suspendContactRecording");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact/suspend-recording', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds the specified tags to the specified resource.</p> <p>Some of the supported resource types are agents, routing profiles, queues, quick connects, contact flows, agent statuses, hours of operation, phone numbers, security profiles, and task templates. For a complete list, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/tagging.html\">Tagging resources in Amazon Connect</a>.</p> <p>For sample policies that use tags, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/security_iam_id-based-policy-examples.html\">Amazon Connect Identity-Based Policy Examples</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferContact operation.
     * @callback module:api/DefaultApi~transferContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Transfers contacts from one agent or queue to another agent or queue at any point after a contact is created. You can transfer a contact to another queue by providing the flow which orchestrates the contact to the destination queue. This gives you more control over contact handling and helps you adhere to the service level agreement (SLA) guaranteed to your customers.</p> <p>Note the following requirements:</p> <ul> <li> <p>Transfer is supported for only <code>TASK</code> contacts.</p> </li> <li> <p>Do not use both <code>QueueId</code> and <code>UserId</code> in the same call.</p> </li> <li> <p>The following flow types are supported: Inbound flow, Transfer to agent flow, and Transfer to queue flow.</p> </li> <li> <p>The <code>TransferContact</code> API can be called only on active contacts.</p> </li> <li> <p>A contact cannot be transferred more than 11 times.</p> </li> </ul>
     * @param {module:model/TransferContactRequest} transferContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~transferContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferContactResponse}
     */
    transferContact(transferContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = transferContactRequest;
      // verify the required parameter 'transferContactRequest' is set
      if (transferContactRequest === undefined || transferContactRequest === null) {
        throw new Error("Missing the required parameter 'transferContactRequest' when calling transferContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferContactResponse;
      return this.apiClient.callApi(
        '/contact/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified tags from the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Array.<String>} tagKeys The tag keys.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAgentStatus operation.
     * @callback module:api/DefaultApi~updateAgentStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates agent status.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} agentStatusId The identifier of the agent status.
     * @param {module:model/UpdateAgentStatusRequest} updateAgentStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAgentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAgentStatus(instanceId, agentStatusId, updateAgentStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAgentStatusRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateAgentStatus");
      }
      // verify the required parameter 'agentStatusId' is set
      if (agentStatusId === undefined || agentStatusId === null) {
        throw new Error("Missing the required parameter 'agentStatusId' when calling updateAgentStatus");
      }
      // verify the required parameter 'updateAgentStatusRequest' is set
      if (updateAgentStatusRequest === undefined || updateAgentStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateAgentStatusRequest' when calling updateAgentStatus");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'AgentStatusId': agentStatusId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/agent-status/{InstanceId}/{AgentStatusId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact operation.
     * @callback module:api/DefaultApi~updateContactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Adds or updates user-defined contact information associated with the specified contact. At least one field to be updated must be present in the request.</p> <important> <p>You can add or update user-defined contact information for both ongoing and completed contacts.</p> </important>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactId The identifier of the contact. This is the identifier of the contact associated with the first interaction with your contact center.
     * @param {module:model/UpdateContactRequest} updateContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContact(instanceId, contactId, updateContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateContact");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling updateContact");
      }
      // verify the required parameter 'updateContactRequest' is set
      if (updateContactRequest === undefined || updateContactRequest === null) {
        throw new Error("Missing the required parameter 'updateContactRequest' when calling updateContact");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contacts/{InstanceId}/{ContactId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactAttributes operation.
     * @callback module:api/DefaultApi~updateContactAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates or updates user-defined contact attributes associated with the specified contact.</p> <p>You can create or update user-defined attributes for both ongoing and completed contacts. For example, while the call is active, you can update the customer's name or the reason the customer called. You can add notes about steps that the agent took during the call that display to the next agent that takes the call. You can also update attributes for a contact using data from your CRM application and save the data with the contact in Amazon Connect. You could also flag calls for additional analysis, such as legal review or to identify abusive callers.</p> <p>Contact attributes are available in Amazon Connect for 24 months, and are then deleted. For information about contact record retention and the maximum size of the contact record attributes section, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits\">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>. </p>
     * @param {module:model/UpdateContactAttributesRequest} updateContactAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContactAttributes(updateContactAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactAttributesRequest;
      // verify the required parameter 'updateContactAttributesRequest' is set
      if (updateContactAttributesRequest === undefined || updateContactAttributesRequest === null) {
        throw new Error("Missing the required parameter 'updateContactAttributesRequest' when calling updateContactAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactEvaluation operation.
     * @callback module:api/DefaultApi~updateContactEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateContactEvaluationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates details about a contact evaluation in the specified Amazon Connect instance. A contact evaluation must be in draft state. Answers included in the request are merged with existing answers for the given evaluation. An answer or note can be deleted by passing an empty object (<code>{}</code>) to the question identifier. 
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationId A unique identifier for the contact evaluation.
     * @param {module:model/UpdateContactEvaluationRequest} updateContactEvaluationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateContactEvaluationResponse}
     */
    updateContactEvaluation(instanceId, evaluationId, updateContactEvaluationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactEvaluationRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateContactEvaluation");
      }
      // verify the required parameter 'evaluationId' is set
      if (evaluationId === undefined || evaluationId === null) {
        throw new Error("Missing the required parameter 'evaluationId' when calling updateContactEvaluation");
      }
      // verify the required parameter 'updateContactEvaluationRequest' is set
      if (updateContactEvaluationRequest === undefined || updateContactEvaluationRequest === null) {
        throw new Error("Missing the required parameter 'updateContactEvaluationRequest' when calling updateContactEvaluation");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationId': evaluationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateContactEvaluationResponse;
      return this.apiClient.callApi(
        '/contact-evaluations/{InstanceId}/{EvaluationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactFlowContent operation.
     * @callback module:api/DefaultApi~updateContactFlowContentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the specified flow.</p> <p>You can also create and update flows using the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\">Amazon Connect Flow language</a>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance.
     * @param {String} contactFlowId The identifier of the flow.
     * @param {module:model/UpdateContactFlowContentRequest} updateContactFlowContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactFlowContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContactFlowContent(instanceId, contactFlowId, updateContactFlowContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactFlowContentRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateContactFlowContent");
      }
      // verify the required parameter 'contactFlowId' is set
      if (contactFlowId === undefined || contactFlowId === null) {
        throw new Error("Missing the required parameter 'contactFlowId' when calling updateContactFlowContent");
      }
      // verify the required parameter 'updateContactFlowContentRequest' is set
      if (updateContactFlowContentRequest === undefined || updateContactFlowContentRequest === null) {
        throw new Error("Missing the required parameter 'updateContactFlowContentRequest' when calling updateContactFlowContent");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactFlowId': contactFlowId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact-flows/{InstanceId}/{ContactFlowId}/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactFlowMetadata operation.
     * @callback module:api/DefaultApi~updateContactFlowMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates metadata about specified flow.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactFlowId The identifier of the flow.
     * @param {module:model/UpdateContactFlowMetadataRequest} updateContactFlowMetadataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactFlowMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContactFlowMetadata(instanceId, contactFlowId, updateContactFlowMetadataRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactFlowMetadataRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateContactFlowMetadata");
      }
      // verify the required parameter 'contactFlowId' is set
      if (contactFlowId === undefined || contactFlowId === null) {
        throw new Error("Missing the required parameter 'contactFlowId' when calling updateContactFlowMetadata");
      }
      // verify the required parameter 'updateContactFlowMetadataRequest' is set
      if (updateContactFlowMetadataRequest === undefined || updateContactFlowMetadataRequest === null) {
        throw new Error("Missing the required parameter 'updateContactFlowMetadataRequest' when calling updateContactFlowMetadata");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactFlowId': contactFlowId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact-flows/{InstanceId}/{ContactFlowId}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactFlowModuleContent operation.
     * @callback module:api/DefaultApi~updateContactFlowModuleContentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates specified flow module for the specified Amazon Connect instance. 
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactFlowModuleId The identifier of the flow module.
     * @param {module:model/UpdateContactFlowModuleContentRequest} updateContactFlowModuleContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactFlowModuleContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContactFlowModuleContent(instanceId, contactFlowModuleId, updateContactFlowModuleContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactFlowModuleContentRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateContactFlowModuleContent");
      }
      // verify the required parameter 'contactFlowModuleId' is set
      if (contactFlowModuleId === undefined || contactFlowModuleId === null) {
        throw new Error("Missing the required parameter 'contactFlowModuleId' when calling updateContactFlowModuleContent");
      }
      // verify the required parameter 'updateContactFlowModuleContentRequest' is set
      if (updateContactFlowModuleContentRequest === undefined || updateContactFlowModuleContentRequest === null) {
        throw new Error("Missing the required parameter 'updateContactFlowModuleContentRequest' when calling updateContactFlowModuleContent");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactFlowModuleId': contactFlowModuleId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactFlowModuleMetadata operation.
     * @callback module:api/DefaultApi~updateContactFlowModuleMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates metadata about specified flow module.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactFlowModuleId The identifier of the flow module.
     * @param {module:model/UpdateContactFlowModuleMetadataRequest} updateContactFlowModuleMetadataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactFlowModuleMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContactFlowModuleMetadata(instanceId, contactFlowModuleId, updateContactFlowModuleMetadataRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactFlowModuleMetadataRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateContactFlowModuleMetadata");
      }
      // verify the required parameter 'contactFlowModuleId' is set
      if (contactFlowModuleId === undefined || contactFlowModuleId === null) {
        throw new Error("Missing the required parameter 'contactFlowModuleId' when calling updateContactFlowModuleMetadata");
      }
      // verify the required parameter 'updateContactFlowModuleMetadataRequest' is set
      if (updateContactFlowModuleMetadataRequest === undefined || updateContactFlowModuleMetadataRequest === null) {
        throw new Error("Missing the required parameter 'updateContactFlowModuleMetadataRequest' when calling updateContactFlowModuleMetadata");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactFlowModuleId': contactFlowModuleId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactFlowName operation.
     * @callback module:api/DefaultApi~updateContactFlowNameCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>The name of the flow.</p> <p>You can also create and update flows using the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html\">Amazon Connect Flow language</a>.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance.
     * @param {String} contactFlowId The identifier of the flow.
     * @param {module:model/UpdateContactFlowNameRequest} updateContactFlowNameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactFlowNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContactFlowName(instanceId, contactFlowId, updateContactFlowNameRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactFlowNameRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateContactFlowName");
      }
      // verify the required parameter 'contactFlowId' is set
      if (contactFlowId === undefined || contactFlowId === null) {
        throw new Error("Missing the required parameter 'contactFlowId' when calling updateContactFlowName");
      }
      // verify the required parameter 'updateContactFlowNameRequest' is set
      if (updateContactFlowNameRequest === undefined || updateContactFlowNameRequest === null) {
        throw new Error("Missing the required parameter 'updateContactFlowNameRequest' when calling updateContactFlowName");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactFlowId': contactFlowId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact-flows/{InstanceId}/{ContactFlowId}/name', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactSchedule operation.
     * @callback module:api/DefaultApi~updateContactScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the scheduled time of a task contact that is already scheduled.
     * @param {module:model/UpdateContactScheduleRequest} updateContactScheduleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContactSchedule(updateContactScheduleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactScheduleRequest;
      // verify the required parameter 'updateContactScheduleRequest' is set
      if (updateContactScheduleRequest === undefined || updateContactScheduleRequest === null) {
        throw new Error("Missing the required parameter 'updateContactScheduleRequest' when calling updateContactSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact/schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEvaluationForm operation.
     * @callback module:api/DefaultApi~updateEvaluationFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEvaluationFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates details about a specific evaluation form version in the specified Amazon Connect instance. Question and section identifiers cannot be duplicated within the same evaluation form.</p> <p>This operation does not support partial updates. Instead it does a full update of evaluation form content.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} evaluationFormId The unique identifier for the evaluation form.
     * @param {module:model/UpdateEvaluationFormRequest} updateEvaluationFormRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEvaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEvaluationFormResponse}
     */
    updateEvaluationForm(instanceId, evaluationFormId, updateEvaluationFormRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEvaluationFormRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateEvaluationForm");
      }
      // verify the required parameter 'evaluationFormId' is set
      if (evaluationFormId === undefined || evaluationFormId === null) {
        throw new Error("Missing the required parameter 'evaluationFormId' when calling updateEvaluationForm");
      }
      // verify the required parameter 'updateEvaluationFormRequest' is set
      if (updateEvaluationFormRequest === undefined || updateEvaluationFormRequest === null) {
        throw new Error("Missing the required parameter 'updateEvaluationFormRequest' when calling updateEvaluationForm");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'EvaluationFormId': evaluationFormId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEvaluationFormResponse;
      return this.apiClient.callApi(
        '/evaluation-forms/{InstanceId}/{EvaluationFormId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHoursOfOperation operation.
     * @callback module:api/DefaultApi~updateHoursOfOperationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates the hours of operation.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} hoursOfOperationId The identifier of the hours of operation.
     * @param {module:model/UpdateHoursOfOperationRequest} updateHoursOfOperationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateHoursOfOperationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateHoursOfOperation(instanceId, hoursOfOperationId, updateHoursOfOperationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateHoursOfOperationRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateHoursOfOperation");
      }
      // verify the required parameter 'hoursOfOperationId' is set
      if (hoursOfOperationId === undefined || hoursOfOperationId === null) {
        throw new Error("Missing the required parameter 'hoursOfOperationId' when calling updateHoursOfOperation");
      }
      // verify the required parameter 'updateHoursOfOperationRequest' is set
      if (updateHoursOfOperationRequest === undefined || updateHoursOfOperationRequest === null) {
        throw new Error("Missing the required parameter 'updateHoursOfOperationRequest' when calling updateHoursOfOperation");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'HoursOfOperationId': hoursOfOperationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hours-of-operations/{InstanceId}/{HoursOfOperationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceAttribute operation.
     * @callback module:api/DefaultApi~updateInstanceAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates the value for the specified attribute type.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/String} attributeType <p>The type of attribute.</p> <note> <p>Only allowlisted customers can consume USE_CUSTOM_TTS_VOICES. To access this feature, contact Amazon Web Services Support for allowlisting.</p> </note>
     * @param {module:model/UpdateInstanceAttributeRequest} updateInstanceAttributeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInstanceAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInstanceAttribute(instanceId, attributeType, updateInstanceAttributeRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInstanceAttributeRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateInstanceAttribute");
      }
      // verify the required parameter 'attributeType' is set
      if (attributeType === undefined || attributeType === null) {
        throw new Error("Missing the required parameter 'attributeType' when calling updateInstanceAttribute");
      }
      // verify the required parameter 'updateInstanceAttributeRequest' is set
      if (updateInstanceAttributeRequest === undefined || updateInstanceAttributeRequest === null) {
        throw new Error("Missing the required parameter 'updateInstanceAttributeRequest' when calling updateInstanceAttribute");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'AttributeType': attributeType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/attribute/{AttributeType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceStorageConfig operation.
     * @callback module:api/DefaultApi~updateInstanceStorageConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates an existing configuration for a resource type. This API is idempotent.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} associationId The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
     * @param {module:model/String} resourceType A valid resource type.
     * @param {module:model/UpdateInstanceStorageConfigRequest} updateInstanceStorageConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInstanceStorageConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInstanceStorageConfig(instanceId, associationId, resourceType, updateInstanceStorageConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInstanceStorageConfigRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateInstanceStorageConfig");
      }
      // verify the required parameter 'associationId' is set
      if (associationId === undefined || associationId === null) {
        throw new Error("Missing the required parameter 'associationId' when calling updateInstanceStorageConfig");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling updateInstanceStorageConfig");
      }
      // verify the required parameter 'updateInstanceStorageConfigRequest' is set
      if (updateInstanceStorageConfigRequest === undefined || updateInstanceStorageConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateInstanceStorageConfigRequest' when calling updateInstanceStorageConfig");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'AssociationId': associationId
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/storage-config/{AssociationId}#resourceType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParticipantRoleConfig operation.
     * @callback module:api/DefaultApi~updateParticipantRoleConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates timeouts for when human chat participants are to be considered idle, and when agents are automatically disconnected from a chat due to idleness. You can set four timers:</p> <ul> <li> <p>Customer idle timeout</p> </li> <li> <p>Customer auto-disconnect timeout</p> </li> <li> <p>Agent idle timeout</p> </li> <li> <p>Agent auto-disconnect timeout</p> </li> </ul> <p>For more information about how chat timeouts work, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/setup-chat-timeouts.html\">Set up chat timeouts for human participants</a>. </p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} contactId The identifier of the contact in this instance of Amazon Connect. 
     * @param {module:model/UpdateParticipantRoleConfigRequest} updateParticipantRoleConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateParticipantRoleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateParticipantRoleConfig(instanceId, contactId, updateParticipantRoleConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateParticipantRoleConfigRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateParticipantRoleConfig");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling updateParticipantRoleConfig");
      }
      // verify the required parameter 'updateParticipantRoleConfigRequest' is set
      if (updateParticipantRoleConfigRequest === undefined || updateParticipantRoleConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateParticipantRoleConfigRequest' when calling updateParticipantRoleConfig");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'ContactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/contact/participant-role-config/{InstanceId}/{ContactId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePhoneNumber operation.
     * @callback module:api/DefaultApi~updatePhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates your claimed phone number from its current Amazon Connect instance or traffic distribution group to another Amazon Connect instance or traffic distribution group in the same Amazon Web Services Region.</p> <important> <p>After using this API, you must verify that the phone number is attached to the correct flow in the target instance or traffic distribution group. You need to do this because the API switches only the phone number to a new instance or traffic distribution group. It doesn't migrate the flow configuration of the phone number, too.</p> <p>You can call <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_DescribePhoneNumber.html\">DescribePhoneNumber</a> API to verify the status of a previous <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html\">UpdatePhoneNumber</a> operation.</p> </important>
     * @param {String} phoneNumberId A unique identifier for the phone number.
     * @param {module:model/UpdatePhoneNumberRequest} updatePhoneNumberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePhoneNumberResponse}
     */
    updatePhoneNumber(phoneNumberId, updatePhoneNumberRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePhoneNumberRequest;
      // verify the required parameter 'phoneNumberId' is set
      if (phoneNumberId === undefined || phoneNumberId === null) {
        throw new Error("Missing the required parameter 'phoneNumberId' when calling updatePhoneNumber");
      }
      // verify the required parameter 'updatePhoneNumberRequest' is set
      if (updatePhoneNumberRequest === undefined || updatePhoneNumberRequest === null) {
        throw new Error("Missing the required parameter 'updatePhoneNumberRequest' when calling updatePhoneNumber");
      }

      let pathParams = {
        'PhoneNumberId': phoneNumberId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePhoneNumberResponse;
      return this.apiClient.callApi(
        '/phone-number/{PhoneNumberId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePrompt operation.
     * @callback module:api/DefaultApi~updatePromptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePromptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a prompt.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} promptId A unique identifier for the prompt.
     * @param {module:model/UpdatePromptRequest} updatePromptRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePromptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePromptResponse}
     */
    updatePrompt(instanceId, promptId, updatePromptRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePromptRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updatePrompt");
      }
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling updatePrompt");
      }
      // verify the required parameter 'updatePromptRequest' is set
      if (updatePromptRequest === undefined || updatePromptRequest === null) {
        throw new Error("Missing the required parameter 'updatePromptRequest' when calling updatePrompt");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'PromptId': promptId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePromptResponse;
      return this.apiClient.callApi(
        '/prompts/{InstanceId}/{PromptId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQueueHoursOfOperation operation.
     * @callback module:api/DefaultApi~updateQueueHoursOfOperationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates the hours of operation for the specified queue.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {module:model/UpdateQueueHoursOfOperationRequest} updateQueueHoursOfOperationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateQueueHoursOfOperationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQueueHoursOfOperation(instanceId, queueId, updateQueueHoursOfOperationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateQueueHoursOfOperationRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateQueueHoursOfOperation");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling updateQueueHoursOfOperation");
      }
      // verify the required parameter 'updateQueueHoursOfOperationRequest' is set
      if (updateQueueHoursOfOperationRequest === undefined || updateQueueHoursOfOperationRequest === null) {
        throw new Error("Missing the required parameter 'updateQueueHoursOfOperationRequest' when calling updateQueueHoursOfOperation");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}/hours-of-operation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQueueMaxContacts operation.
     * @callback module:api/DefaultApi~updateQueueMaxContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates the maximum number of contacts allowed in a queue before it is considered full.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {module:model/UpdateQueueMaxContactsRequest} updateQueueMaxContactsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateQueueMaxContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQueueMaxContacts(instanceId, queueId, updateQueueMaxContactsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateQueueMaxContactsRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateQueueMaxContacts");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling updateQueueMaxContacts");
      }
      // verify the required parameter 'updateQueueMaxContactsRequest' is set
      if (updateQueueMaxContactsRequest === undefined || updateQueueMaxContactsRequest === null) {
        throw new Error("Missing the required parameter 'updateQueueMaxContactsRequest' when calling updateQueueMaxContacts");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}/max-contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQueueName operation.
     * @callback module:api/DefaultApi~updateQueueNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates the name and description of a queue. At least <code>Name</code> or <code>Description</code> must be provided.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {module:model/UpdateQueueNameRequest} updateQueueNameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateQueueNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQueueName(instanceId, queueId, updateQueueNameRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateQueueNameRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateQueueName");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling updateQueueName");
      }
      // verify the required parameter 'updateQueueNameRequest' is set
      if (updateQueueNameRequest === undefined || updateQueueNameRequest === null) {
        throw new Error("Missing the required parameter 'updateQueueNameRequest' when calling updateQueueName");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}/name', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQueueOutboundCallerConfig operation.
     * @callback module:api/DefaultApi~updateQueueOutboundCallerConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates the outbound caller ID name, number, and outbound whisper flow for a specified queue.</p> <important> <p>If the number being used in the input is claimed to a traffic distribution group, and you are calling this API using an instance in the Amazon Web Services Region where the traffic distribution group was created, you can use either a full phone number ARN or UUID value for the <code>OutboundCallerIdNumberId</code> value of the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_OutboundCallerConfig\">OutboundCallerConfig</a> request body parameter. However, if the number is claimed to a traffic distribution group and you are calling this API using an instance in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a <code>ResourceNotFoundException</code>.</p> <p>Only use the phone number ARN format that doesn't contain <code>instance</code> in the path, for example, <code>arn:aws:connect:us-east-1:1234567890:phone-number/uuid</code>. This is the same ARN format that is returned when you call the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html\">ListPhoneNumbersV2</a> API.</p> </important>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {module:model/UpdateQueueOutboundCallerConfigRequest} updateQueueOutboundCallerConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateQueueOutboundCallerConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQueueOutboundCallerConfig(instanceId, queueId, updateQueueOutboundCallerConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateQueueOutboundCallerConfigRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateQueueOutboundCallerConfig");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling updateQueueOutboundCallerConfig");
      }
      // verify the required parameter 'updateQueueOutboundCallerConfigRequest' is set
      if (updateQueueOutboundCallerConfigRequest === undefined || updateQueueOutboundCallerConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateQueueOutboundCallerConfigRequest' when calling updateQueueOutboundCallerConfig");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}/outbound-caller-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQueueStatus operation.
     * @callback module:api/DefaultApi~updateQueueStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates the status of the queue.</p>
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} queueId The identifier for the queue.
     * @param {module:model/UpdateQueueStatusRequest} updateQueueStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateQueueStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQueueStatus(instanceId, queueId, updateQueueStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateQueueStatusRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateQueueStatus");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling updateQueueStatus");
      }
      // verify the required parameter 'updateQueueStatusRequest' is set
      if (updateQueueStatusRequest === undefined || updateQueueStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateQueueStatusRequest' when calling updateQueueStatus");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QueueId': queueId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/{InstanceId}/{QueueId}/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuickConnectConfig operation.
     * @callback module:api/DefaultApi~updateQuickConnectConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration settings for the specified quick connect.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} quickConnectId The identifier for the quick connect.
     * @param {module:model/UpdateQuickConnectConfigRequest} updateQuickConnectConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateQuickConnectConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQuickConnectConfig(instanceId, quickConnectId, updateQuickConnectConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateQuickConnectConfigRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateQuickConnectConfig");
      }
      // verify the required parameter 'quickConnectId' is set
      if (quickConnectId === undefined || quickConnectId === null) {
        throw new Error("Missing the required parameter 'quickConnectId' when calling updateQuickConnectConfig");
      }
      // verify the required parameter 'updateQuickConnectConfigRequest' is set
      if (updateQuickConnectConfigRequest === undefined || updateQuickConnectConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateQuickConnectConfigRequest' when calling updateQuickConnectConfig");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QuickConnectId': quickConnectId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quick-connects/{InstanceId}/{QuickConnectId}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuickConnectName operation.
     * @callback module:api/DefaultApi~updateQuickConnectNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name and description of a quick connect. The request accepts the following data in JSON format. At least <code>Name</code> or <code>Description</code> must be provided.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} quickConnectId The identifier for the quick connect.
     * @param {module:model/UpdateQuickConnectNameRequest} updateQuickConnectNameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateQuickConnectNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQuickConnectName(instanceId, quickConnectId, updateQuickConnectNameRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateQuickConnectNameRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateQuickConnectName");
      }
      // verify the required parameter 'quickConnectId' is set
      if (quickConnectId === undefined || quickConnectId === null) {
        throw new Error("Missing the required parameter 'quickConnectId' when calling updateQuickConnectName");
      }
      // verify the required parameter 'updateQuickConnectNameRequest' is set
      if (updateQuickConnectNameRequest === undefined || updateQuickConnectNameRequest === null) {
        throw new Error("Missing the required parameter 'updateQuickConnectNameRequest' when calling updateQuickConnectName");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'QuickConnectId': quickConnectId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quick-connects/{InstanceId}/{QuickConnectId}/name', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoutingProfileAgentAvailabilityTimer operation.
     * @callback module:api/DefaultApi~updateRoutingProfileAgentAvailabilityTimerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Whether agents with this routing profile will have their routing order calculated based on <i>time since their last inbound contact</i> or <i>longest idle time</i>. 
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {module:model/UpdateRoutingProfileAgentAvailabilityTimerRequest} updateRoutingProfileAgentAvailabilityTimerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRoutingProfileAgentAvailabilityTimerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoutingProfileAgentAvailabilityTimer(instanceId, routingProfileId, updateRoutingProfileAgentAvailabilityTimerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRoutingProfileAgentAvailabilityTimerRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateRoutingProfileAgentAvailabilityTimer");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling updateRoutingProfileAgentAvailabilityTimer");
      }
      // verify the required parameter 'updateRoutingProfileAgentAvailabilityTimerRequest' is set
      if (updateRoutingProfileAgentAvailabilityTimerRequest === undefined || updateRoutingProfileAgentAvailabilityTimerRequest === null) {
        throw new Error("Missing the required parameter 'updateRoutingProfileAgentAvailabilityTimerRequest' when calling updateRoutingProfileAgentAvailabilityTimer");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}/agent-availability-timer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoutingProfileConcurrency operation.
     * @callback module:api/DefaultApi~updateRoutingProfileConcurrencyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the channels that agents can handle in the Contact Control Panel (CCP) for a routing profile.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {module:model/UpdateRoutingProfileConcurrencyRequest} updateRoutingProfileConcurrencyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRoutingProfileConcurrencyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoutingProfileConcurrency(instanceId, routingProfileId, updateRoutingProfileConcurrencyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRoutingProfileConcurrencyRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateRoutingProfileConcurrency");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling updateRoutingProfileConcurrency");
      }
      // verify the required parameter 'updateRoutingProfileConcurrencyRequest' is set
      if (updateRoutingProfileConcurrencyRequest === undefined || updateRoutingProfileConcurrencyRequest === null) {
        throw new Error("Missing the required parameter 'updateRoutingProfileConcurrencyRequest' when calling updateRoutingProfileConcurrency");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}/concurrency', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoutingProfileDefaultOutboundQueue operation.
     * @callback module:api/DefaultApi~updateRoutingProfileDefaultOutboundQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the default outbound queue of a routing profile.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {module:model/UpdateRoutingProfileDefaultOutboundQueueRequest} updateRoutingProfileDefaultOutboundQueueRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRoutingProfileDefaultOutboundQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoutingProfileDefaultOutboundQueue(instanceId, routingProfileId, updateRoutingProfileDefaultOutboundQueueRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRoutingProfileDefaultOutboundQueueRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateRoutingProfileDefaultOutboundQueue");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling updateRoutingProfileDefaultOutboundQueue");
      }
      // verify the required parameter 'updateRoutingProfileDefaultOutboundQueueRequest' is set
      if (updateRoutingProfileDefaultOutboundQueueRequest === undefined || updateRoutingProfileDefaultOutboundQueueRequest === null) {
        throw new Error("Missing the required parameter 'updateRoutingProfileDefaultOutboundQueueRequest' when calling updateRoutingProfileDefaultOutboundQueue");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}/default-outbound-queue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoutingProfileName operation.
     * @callback module:api/DefaultApi~updateRoutingProfileNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name and description of a routing profile. The request accepts the following data in JSON format. At least <code>Name</code> or <code>Description</code> must be provided.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {module:model/UpdateRoutingProfileNameRequest} updateRoutingProfileNameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRoutingProfileNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoutingProfileName(instanceId, routingProfileId, updateRoutingProfileNameRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRoutingProfileNameRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateRoutingProfileName");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling updateRoutingProfileName");
      }
      // verify the required parameter 'updateRoutingProfileNameRequest' is set
      if (updateRoutingProfileNameRequest === undefined || updateRoutingProfileNameRequest === null) {
        throw new Error("Missing the required parameter 'updateRoutingProfileNameRequest' when calling updateRoutingProfileName");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}/name', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoutingProfileQueues operation.
     * @callback module:api/DefaultApi~updateRoutingProfileQueuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties associated with a set of queues for a routing profile.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {String} routingProfileId The identifier of the routing profile.
     * @param {module:model/UpdateRoutingProfileQueuesRequest} updateRoutingProfileQueuesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRoutingProfileQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoutingProfileQueues(instanceId, routingProfileId, updateRoutingProfileQueuesRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRoutingProfileQueuesRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateRoutingProfileQueues");
      }
      // verify the required parameter 'routingProfileId' is set
      if (routingProfileId === undefined || routingProfileId === null) {
        throw new Error("Missing the required parameter 'routingProfileId' when calling updateRoutingProfileQueues");
      }
      // verify the required parameter 'updateRoutingProfileQueuesRequest' is set
      if (updateRoutingProfileQueuesRequest === undefined || updateRoutingProfileQueuesRequest === null) {
        throw new Error("Missing the required parameter 'updateRoutingProfileQueuesRequest' when calling updateRoutingProfileQueues");
      }

      let pathParams = {
        'InstanceId': instanceId,
        'RoutingProfileId': routingProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing-profiles/{InstanceId}/{RoutingProfileId}/queues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRule operation.
     * @callback module:api/DefaultApi~updateRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a rule for the specified Amazon Connect instance.</p> <p>Use the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/connect-rules-language.html\">Rules Function language</a> to code conditions for the rule. </p>
     * @param {String} ruleId A unique identifier for the rule.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateRuleRequest} updateRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRule(ruleId, instanceId, updateRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRuleRequest;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling updateRule");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateRule");
      }
      // verify the required parameter 'updateRuleRequest' is set
      if (updateRuleRequest === undefined || updateRuleRequest === null) {
        throw new Error("Missing the required parameter 'updateRuleRequest' when calling updateRule");
      }

      let pathParams = {
        'RuleId': ruleId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rules/{InstanceId}/{RuleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurityProfile operation.
     * @callback module:api/DefaultApi~updateSecurityProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This API is in preview release for Amazon Connect and is subject to change.</p> <p>Updates a security profile.</p>
     * @param {String} securityProfileId The identifier for the security profle.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateSecurityProfileRequest} updateSecurityProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSecurityProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSecurityProfile(securityProfileId, instanceId, updateSecurityProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSecurityProfileRequest;
      // verify the required parameter 'securityProfileId' is set
      if (securityProfileId === undefined || securityProfileId === null) {
        throw new Error("Missing the required parameter 'securityProfileId' when calling updateSecurityProfile");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateSecurityProfile");
      }
      // verify the required parameter 'updateSecurityProfileRequest' is set
      if (updateSecurityProfileRequest === undefined || updateSecurityProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateSecurityProfileRequest' when calling updateSecurityProfile");
      }

      let pathParams = {
        'SecurityProfileId': securityProfileId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/security-profiles/{InstanceId}/{SecurityProfileId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskTemplate operation.
     * @callback module:api/DefaultApi~updateTaskTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTaskTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates details about a specific task template in the specified Amazon Connect instance. This operation does not support partial updates. Instead it does a full update of template content.
     * @param {String} taskTemplateId A unique identifier for the task template.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateTaskTemplateRequest} updateTaskTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTaskTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTaskTemplateResponse}
     */
    updateTaskTemplate(taskTemplateId, instanceId, updateTaskTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTaskTemplateRequest;
      // verify the required parameter 'taskTemplateId' is set
      if (taskTemplateId === undefined || taskTemplateId === null) {
        throw new Error("Missing the required parameter 'taskTemplateId' when calling updateTaskTemplate");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateTaskTemplate");
      }
      // verify the required parameter 'updateTaskTemplateRequest' is set
      if (updateTaskTemplateRequest === undefined || updateTaskTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateTaskTemplateRequest' when calling updateTaskTemplate");
      }

      let pathParams = {
        'TaskTemplateId': taskTemplateId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTaskTemplateResponse;
      return this.apiClient.callApi(
        '/instance/{InstanceId}/task/template/{TaskTemplateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrafficDistribution operation.
     * @callback module:api/DefaultApi~updateTrafficDistributionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the traffic distribution for a given traffic distribution group. </p> <p>For more information about updating a traffic distribution group, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/update-telephony-traffic-distribution.html\">Update telephony traffic distribution across Amazon Web Services Regions </a> in the <i>Amazon Connect Administrator Guide</i>. </p>
     * @param {String} id The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.
     * @param {module:model/UpdateTrafficDistributionRequest} updateTrafficDistributionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTrafficDistributionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateTrafficDistribution(id, updateTrafficDistributionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTrafficDistributionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTrafficDistribution");
      }
      // verify the required parameter 'updateTrafficDistributionRequest' is set
      if (updateTrafficDistributionRequest === undefined || updateTrafficDistributionRequest === null) {
        throw new Error("Missing the required parameter 'updateTrafficDistributionRequest' when calling updateTrafficDistribution");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/traffic-distribution/{Id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserHierarchy operation.
     * @callback module:api/DefaultApi~updateUserHierarchyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns the specified hierarchy group to the specified user.
     * @param {String} userId The identifier of the user account.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateUserHierarchyRequest} updateUserHierarchyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserHierarchyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserHierarchy(userId, instanceId, updateUserHierarchyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserHierarchyRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserHierarchy");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateUserHierarchy");
      }
      // verify the required parameter 'updateUserHierarchyRequest' is set
      if (updateUserHierarchyRequest === undefined || updateUserHierarchyRequest === null) {
        throw new Error("Missing the required parameter 'updateUserHierarchyRequest' when calling updateUserHierarchy");
      }

      let pathParams = {
        'UserId': userId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{InstanceId}/{UserId}/hierarchy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserHierarchyGroupName operation.
     * @callback module:api/DefaultApi~updateUserHierarchyGroupNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name of the user hierarchy group. 
     * @param {String} hierarchyGroupId The identifier of the hierarchy group.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateUserHierarchyGroupNameRequest} updateUserHierarchyGroupNameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserHierarchyGroupNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserHierarchyGroupName(hierarchyGroupId, instanceId, updateUserHierarchyGroupNameRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserHierarchyGroupNameRequest;
      // verify the required parameter 'hierarchyGroupId' is set
      if (hierarchyGroupId === undefined || hierarchyGroupId === null) {
        throw new Error("Missing the required parameter 'hierarchyGroupId' when calling updateUserHierarchyGroupName");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateUserHierarchyGroupName");
      }
      // verify the required parameter 'updateUserHierarchyGroupNameRequest' is set
      if (updateUserHierarchyGroupNameRequest === undefined || updateUserHierarchyGroupNameRequest === null) {
        throw new Error("Missing the required parameter 'updateUserHierarchyGroupNameRequest' when calling updateUserHierarchyGroupName");
      }

      let pathParams = {
        'HierarchyGroupId': hierarchyGroupId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}/name', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserHierarchyStructure operation.
     * @callback module:api/DefaultApi~updateUserHierarchyStructureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the user hierarchy structure: add, remove, and rename user hierarchy levels.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateUserHierarchyStructureRequest} updateUserHierarchyStructureRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserHierarchyStructureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserHierarchyStructure(instanceId, updateUserHierarchyStructureRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserHierarchyStructureRequest;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateUserHierarchyStructure");
      }
      // verify the required parameter 'updateUserHierarchyStructureRequest' is set
      if (updateUserHierarchyStructureRequest === undefined || updateUserHierarchyStructureRequest === null) {
        throw new Error("Missing the required parameter 'updateUserHierarchyStructureRequest' when calling updateUserHierarchyStructure");
      }

      let pathParams = {
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user-hierarchy-structure/{InstanceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserIdentityInfo operation.
     * @callback module:api/DefaultApi~updateUserIdentityInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the identity information for the specified user.</p> <important> <p>We strongly recommend limiting who has the ability to invoke <code>UpdateUserIdentityInfo</code>. Someone with that ability can change the login credentials of other users by changing their email address. This poses a security risk to your organization. They can change the email address of a user to the attacker's email address, and then reset the password through email. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html\">Best Practices for Security Profiles</a> in the <i>Amazon Connect Administrator Guide</i>.</p> </important>
     * @param {String} userId The identifier of the user account.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateUserIdentityInfoRequest} updateUserIdentityInfoRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserIdentityInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserIdentityInfo(userId, instanceId, updateUserIdentityInfoRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserIdentityInfoRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserIdentityInfo");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateUserIdentityInfo");
      }
      // verify the required parameter 'updateUserIdentityInfoRequest' is set
      if (updateUserIdentityInfoRequest === undefined || updateUserIdentityInfoRequest === null) {
        throw new Error("Missing the required parameter 'updateUserIdentityInfoRequest' when calling updateUserIdentityInfo");
      }

      let pathParams = {
        'UserId': userId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{InstanceId}/{UserId}/identity-info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserPhoneConfig operation.
     * @callback module:api/DefaultApi~updateUserPhoneConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the phone configuration settings for the specified user.
     * @param {String} userId The identifier of the user account.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateUserPhoneConfigRequest} updateUserPhoneConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserPhoneConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserPhoneConfig(userId, instanceId, updateUserPhoneConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserPhoneConfigRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserPhoneConfig");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateUserPhoneConfig");
      }
      // verify the required parameter 'updateUserPhoneConfigRequest' is set
      if (updateUserPhoneConfigRequest === undefined || updateUserPhoneConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateUserPhoneConfigRequest' when calling updateUserPhoneConfig");
      }

      let pathParams = {
        'UserId': userId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{InstanceId}/{UserId}/phone-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserRoutingProfile operation.
     * @callback module:api/DefaultApi~updateUserRoutingProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns the specified routing profile to the specified user.
     * @param {String} userId The identifier of the user account.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateUserRoutingProfileRequest} updateUserRoutingProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserRoutingProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserRoutingProfile(userId, instanceId, updateUserRoutingProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserRoutingProfileRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserRoutingProfile");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateUserRoutingProfile");
      }
      // verify the required parameter 'updateUserRoutingProfileRequest' is set
      if (updateUserRoutingProfileRequest === undefined || updateUserRoutingProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateUserRoutingProfileRequest' when calling updateUserRoutingProfile");
      }

      let pathParams = {
        'UserId': userId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{InstanceId}/{UserId}/routing-profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserSecurityProfiles operation.
     * @callback module:api/DefaultApi~updateUserSecurityProfilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns the specified security profiles to the specified user.
     * @param {String} userId The identifier of the user account.
     * @param {String} instanceId The identifier of the Amazon Connect instance. You can <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html\">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.
     * @param {module:model/UpdateUserSecurityProfilesRequest} updateUserSecurityProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserSecurityProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserSecurityProfiles(userId, instanceId, updateUserSecurityProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserSecurityProfilesRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserSecurityProfiles");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling updateUserSecurityProfiles");
      }
      // verify the required parameter 'updateUserSecurityProfilesRequest' is set
      if (updateUserSecurityProfilesRequest === undefined || updateUserSecurityProfilesRequest === null) {
        throw new Error("Missing the required parameter 'updateUserSecurityProfilesRequest' when calling updateUserSecurityProfiles");
      }

      let pathParams = {
        'UserId': userId,
        'InstanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{InstanceId}/{UserId}/security-profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
