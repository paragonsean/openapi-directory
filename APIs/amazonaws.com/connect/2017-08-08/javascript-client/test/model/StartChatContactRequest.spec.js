/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonConnectService);
  }
}(this, function(expect, AmazonConnectService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonConnectService.StartChatContactRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StartChatContactRequest', function() {
    it('should create an instance of StartChatContactRequest', function() {
      // uncomment below and update the code to test StartChatContactRequest
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be.a(AmazonConnectService.StartChatContactRequest);
    });

    it('should have the property instanceId (base name: "InstanceId")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

    it('should have the property contactFlowId (base name: "ContactFlowId")', function() {
      // uncomment below and update the code to test the property contactFlowId
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

    it('should have the property attributes (base name: "Attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

    it('should have the property participantDetails (base name: "ParticipantDetails")', function() {
      // uncomment below and update the code to test the property participantDetails
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

    it('should have the property initialMessage (base name: "InitialMessage")', function() {
      // uncomment below and update the code to test the property initialMessage
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

    it('should have the property clientToken (base name: "ClientToken")', function() {
      // uncomment below and update the code to test the property clientToken
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

    it('should have the property chatDurationInMinutes (base name: "ChatDurationInMinutes")', function() {
      // uncomment below and update the code to test the property chatDurationInMinutes
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

    it('should have the property supportedMessagingContentTypes (base name: "SupportedMessagingContentTypes")', function() {
      // uncomment below and update the code to test the property supportedMessagingContentTypes
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

    it('should have the property persistentChat (base name: "PersistentChat")', function() {
      // uncomment below and update the code to test the property persistentChat
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

    it('should have the property relatedContactId (base name: "RelatedContactId")', function() {
      // uncomment below and update the code to test the property relatedContactId
      //var instance = new AmazonConnectService.StartChatContactRequest();
      //expect(instance).to.be();
    });

  });

}));
