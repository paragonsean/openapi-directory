/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonConnectService);
  }
}(this, function(expect, AmazonConnectService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonConnectService.DescribeContactResponseContact();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DescribeContactResponseContact', function() {
    it('should create an instance of DescribeContactResponseContact', function() {
      // uncomment below and update the code to test DescribeContactResponseContact
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be.a(AmazonConnectService.DescribeContactResponseContact);
    });

    it('should have the property arn (base name: "Arn")', function() {
      // uncomment below and update the code to test the property arn
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property initialContactId (base name: "InitialContactId")', function() {
      // uncomment below and update the code to test the property initialContactId
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property previousContactId (base name: "PreviousContactId")', function() {
      // uncomment below and update the code to test the property previousContactId
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property initiationMethod (base name: "InitiationMethod")', function() {
      // uncomment below and update the code to test the property initiationMethod
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property channel (base name: "Channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property queueInfo (base name: "QueueInfo")', function() {
      // uncomment below and update the code to test the property queueInfo
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property agentInfo (base name: "AgentInfo")', function() {
      // uncomment below and update the code to test the property agentInfo
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property initiationTimestamp (base name: "InitiationTimestamp")', function() {
      // uncomment below and update the code to test the property initiationTimestamp
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property disconnectTimestamp (base name: "DisconnectTimestamp")', function() {
      // uncomment below and update the code to test the property disconnectTimestamp
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdateTimestamp (base name: "LastUpdateTimestamp")', function() {
      // uncomment below and update the code to test the property lastUpdateTimestamp
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property scheduledTimestamp (base name: "ScheduledTimestamp")', function() {
      // uncomment below and update the code to test the property scheduledTimestamp
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property relatedContactId (base name: "RelatedContactId")', function() {
      // uncomment below and update the code to test the property relatedContactId
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

    it('should have the property wisdomInfo (base name: "WisdomInfo")', function() {
      // uncomment below and update the code to test the property wisdomInfo
      //var instance = new AmazonConnectService.DescribeContactResponseContact();
      //expect(instance).to.be();
    });

  });

}));
