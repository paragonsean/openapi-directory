/**
 * Amazon Connect Service
 * <p>Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.</p> <p>There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html\">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p>You can connect programmatically to an Amazon Web Services service by using an endpoint. For a list of Amazon Connect endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/connect_region.html\">Amazon Connect Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonConnectService);
  }
}(this, function(expect, AmazonConnectService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonConnectService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('activateEvaluationForm', function() {
      it('should call activateEvaluationForm successfully', function(done) {
        //uncomment below and update the code to test activateEvaluationForm
        //instance.activateEvaluationForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateApprovedOrigin', function() {
      it('should call associateApprovedOrigin successfully', function(done) {
        //uncomment below and update the code to test associateApprovedOrigin
        //instance.associateApprovedOrigin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateBot', function() {
      it('should call associateBot successfully', function(done) {
        //uncomment below and update the code to test associateBot
        //instance.associateBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateDefaultVocabulary', function() {
      it('should call associateDefaultVocabulary successfully', function(done) {
        //uncomment below and update the code to test associateDefaultVocabulary
        //instance.associateDefaultVocabulary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateInstanceStorageConfig', function() {
      it('should call associateInstanceStorageConfig successfully', function(done) {
        //uncomment below and update the code to test associateInstanceStorageConfig
        //instance.associateInstanceStorageConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateLambdaFunction', function() {
      it('should call associateLambdaFunction successfully', function(done) {
        //uncomment below and update the code to test associateLambdaFunction
        //instance.associateLambdaFunction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateLexBot', function() {
      it('should call associateLexBot successfully', function(done) {
        //uncomment below and update the code to test associateLexBot
        //instance.associateLexBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associatePhoneNumberContactFlow', function() {
      it('should call associatePhoneNumberContactFlow successfully', function(done) {
        //uncomment below and update the code to test associatePhoneNumberContactFlow
        //instance.associatePhoneNumberContactFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateQueueQuickConnects', function() {
      it('should call associateQueueQuickConnects successfully', function(done) {
        //uncomment below and update the code to test associateQueueQuickConnects
        //instance.associateQueueQuickConnects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateRoutingProfileQueues', function() {
      it('should call associateRoutingProfileQueues successfully', function(done) {
        //uncomment below and update the code to test associateRoutingProfileQueues
        //instance.associateRoutingProfileQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateSecurityKey', function() {
      it('should call associateSecurityKey successfully', function(done) {
        //uncomment below and update the code to test associateSecurityKey
        //instance.associateSecurityKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('claimPhoneNumber', function() {
      it('should call claimPhoneNumber successfully', function(done) {
        //uncomment below and update the code to test claimPhoneNumber
        //instance.claimPhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAgentStatus', function() {
      it('should call createAgentStatus successfully', function(done) {
        //uncomment below and update the code to test createAgentStatus
        //instance.createAgentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContactFlow', function() {
      it('should call createContactFlow successfully', function(done) {
        //uncomment below and update the code to test createContactFlow
        //instance.createContactFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContactFlowModule', function() {
      it('should call createContactFlowModule successfully', function(done) {
        //uncomment below and update the code to test createContactFlowModule
        //instance.createContactFlowModule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEvaluationForm', function() {
      it('should call createEvaluationForm successfully', function(done) {
        //uncomment below and update the code to test createEvaluationForm
        //instance.createEvaluationForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createHoursOfOperation', function() {
      it('should call createHoursOfOperation successfully', function(done) {
        //uncomment below and update the code to test createHoursOfOperation
        //instance.createHoursOfOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createInstance', function() {
      it('should call createInstance successfully', function(done) {
        //uncomment below and update the code to test createInstance
        //instance.createInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIntegrationAssociation', function() {
      it('should call createIntegrationAssociation successfully', function(done) {
        //uncomment below and update the code to test createIntegrationAssociation
        //instance.createIntegrationAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createParticipant', function() {
      it('should call createParticipant successfully', function(done) {
        //uncomment below and update the code to test createParticipant
        //instance.createParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPrompt', function() {
      it('should call createPrompt successfully', function(done) {
        //uncomment below and update the code to test createPrompt
        //instance.createPrompt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createQueue', function() {
      it('should call createQueue successfully', function(done) {
        //uncomment below and update the code to test createQueue
        //instance.createQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createQuickConnect', function() {
      it('should call createQuickConnect successfully', function(done) {
        //uncomment below and update the code to test createQuickConnect
        //instance.createQuickConnect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoutingProfile', function() {
      it('should call createRoutingProfile successfully', function(done) {
        //uncomment below and update the code to test createRoutingProfile
        //instance.createRoutingProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRule', function() {
      it('should call createRule successfully', function(done) {
        //uncomment below and update the code to test createRule
        //instance.createRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSecurityProfile', function() {
      it('should call createSecurityProfile successfully', function(done) {
        //uncomment below and update the code to test createSecurityProfile
        //instance.createSecurityProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTaskTemplate', function() {
      it('should call createTaskTemplate successfully', function(done) {
        //uncomment below and update the code to test createTaskTemplate
        //instance.createTaskTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTrafficDistributionGroup', function() {
      it('should call createTrafficDistributionGroup successfully', function(done) {
        //uncomment below and update the code to test createTrafficDistributionGroup
        //instance.createTrafficDistributionGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUseCase', function() {
      it('should call createUseCase successfully', function(done) {
        //uncomment below and update the code to test createUseCase
        //instance.createUseCase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUserHierarchyGroup', function() {
      it('should call createUserHierarchyGroup successfully', function(done) {
        //uncomment below and update the code to test createUserHierarchyGroup
        //instance.createUserHierarchyGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVocabulary', function() {
      it('should call createVocabulary successfully', function(done) {
        //uncomment below and update the code to test createVocabulary
        //instance.createVocabulary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deactivateEvaluationForm', function() {
      it('should call deactivateEvaluationForm successfully', function(done) {
        //uncomment below and update the code to test deactivateEvaluationForm
        //instance.deactivateEvaluationForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContactEvaluation', function() {
      it('should call deleteContactEvaluation successfully', function(done) {
        //uncomment below and update the code to test deleteContactEvaluation
        //instance.deleteContactEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContactFlow', function() {
      it('should call deleteContactFlow successfully', function(done) {
        //uncomment below and update the code to test deleteContactFlow
        //instance.deleteContactFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContactFlowModule', function() {
      it('should call deleteContactFlowModule successfully', function(done) {
        //uncomment below and update the code to test deleteContactFlowModule
        //instance.deleteContactFlowModule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEvaluationForm', function() {
      it('should call deleteEvaluationForm successfully', function(done) {
        //uncomment below and update the code to test deleteEvaluationForm
        //instance.deleteEvaluationForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHoursOfOperation', function() {
      it('should call deleteHoursOfOperation successfully', function(done) {
        //uncomment below and update the code to test deleteHoursOfOperation
        //instance.deleteHoursOfOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInstance', function() {
      it('should call deleteInstance successfully', function(done) {
        //uncomment below and update the code to test deleteInstance
        //instance.deleteInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIntegrationAssociation', function() {
      it('should call deleteIntegrationAssociation successfully', function(done) {
        //uncomment below and update the code to test deleteIntegrationAssociation
        //instance.deleteIntegrationAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePrompt', function() {
      it('should call deletePrompt successfully', function(done) {
        //uncomment below and update the code to test deletePrompt
        //instance.deletePrompt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQueue', function() {
      it('should call deleteQueue successfully', function(done) {
        //uncomment below and update the code to test deleteQueue
        //instance.deleteQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQuickConnect', function() {
      it('should call deleteQuickConnect successfully', function(done) {
        //uncomment below and update the code to test deleteQuickConnect
        //instance.deleteQuickConnect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoutingProfile', function() {
      it('should call deleteRoutingProfile successfully', function(done) {
        //uncomment below and update the code to test deleteRoutingProfile
        //instance.deleteRoutingProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRule', function() {
      it('should call deleteRule successfully', function(done) {
        //uncomment below and update the code to test deleteRule
        //instance.deleteRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSecurityProfile', function() {
      it('should call deleteSecurityProfile successfully', function(done) {
        //uncomment below and update the code to test deleteSecurityProfile
        //instance.deleteSecurityProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTaskTemplate', function() {
      it('should call deleteTaskTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteTaskTemplate
        //instance.deleteTaskTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTrafficDistributionGroup', function() {
      it('should call deleteTrafficDistributionGroup successfully', function(done) {
        //uncomment below and update the code to test deleteTrafficDistributionGroup
        //instance.deleteTrafficDistributionGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUseCase', function() {
      it('should call deleteUseCase successfully', function(done) {
        //uncomment below and update the code to test deleteUseCase
        //instance.deleteUseCase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser', function() {
      it('should call deleteUser successfully', function(done) {
        //uncomment below and update the code to test deleteUser
        //instance.deleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUserHierarchyGroup', function() {
      it('should call deleteUserHierarchyGroup successfully', function(done) {
        //uncomment below and update the code to test deleteUserHierarchyGroup
        //instance.deleteUserHierarchyGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVocabulary', function() {
      it('should call deleteVocabulary successfully', function(done) {
        //uncomment below and update the code to test deleteVocabulary
        //instance.deleteVocabulary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAgentStatus', function() {
      it('should call describeAgentStatus successfully', function(done) {
        //uncomment below and update the code to test describeAgentStatus
        //instance.describeAgentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeContact', function() {
      it('should call describeContact successfully', function(done) {
        //uncomment below and update the code to test describeContact
        //instance.describeContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeContactEvaluation', function() {
      it('should call describeContactEvaluation successfully', function(done) {
        //uncomment below and update the code to test describeContactEvaluation
        //instance.describeContactEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeContactFlow', function() {
      it('should call describeContactFlow successfully', function(done) {
        //uncomment below and update the code to test describeContactFlow
        //instance.describeContactFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeContactFlowModule', function() {
      it('should call describeContactFlowModule successfully', function(done) {
        //uncomment below and update the code to test describeContactFlowModule
        //instance.describeContactFlowModule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEvaluationForm', function() {
      it('should call describeEvaluationForm successfully', function(done) {
        //uncomment below and update the code to test describeEvaluationForm
        //instance.describeEvaluationForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeHoursOfOperation', function() {
      it('should call describeHoursOfOperation successfully', function(done) {
        //uncomment below and update the code to test describeHoursOfOperation
        //instance.describeHoursOfOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInstance', function() {
      it('should call describeInstance successfully', function(done) {
        //uncomment below and update the code to test describeInstance
        //instance.describeInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInstanceAttribute', function() {
      it('should call describeInstanceAttribute successfully', function(done) {
        //uncomment below and update the code to test describeInstanceAttribute
        //instance.describeInstanceAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInstanceStorageConfig', function() {
      it('should call describeInstanceStorageConfig successfully', function(done) {
        //uncomment below and update the code to test describeInstanceStorageConfig
        //instance.describeInstanceStorageConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePhoneNumber', function() {
      it('should call describePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test describePhoneNumber
        //instance.describePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePrompt', function() {
      it('should call describePrompt successfully', function(done) {
        //uncomment below and update the code to test describePrompt
        //instance.describePrompt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeQueue', function() {
      it('should call describeQueue successfully', function(done) {
        //uncomment below and update the code to test describeQueue
        //instance.describeQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeQuickConnect', function() {
      it('should call describeQuickConnect successfully', function(done) {
        //uncomment below and update the code to test describeQuickConnect
        //instance.describeQuickConnect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRoutingProfile', function() {
      it('should call describeRoutingProfile successfully', function(done) {
        //uncomment below and update the code to test describeRoutingProfile
        //instance.describeRoutingProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRule', function() {
      it('should call describeRule successfully', function(done) {
        //uncomment below and update the code to test describeRule
        //instance.describeRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSecurityProfile', function() {
      it('should call describeSecurityProfile successfully', function(done) {
        //uncomment below and update the code to test describeSecurityProfile
        //instance.describeSecurityProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTrafficDistributionGroup', function() {
      it('should call describeTrafficDistributionGroup successfully', function(done) {
        //uncomment below and update the code to test describeTrafficDistributionGroup
        //instance.describeTrafficDistributionGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeUser', function() {
      it('should call describeUser successfully', function(done) {
        //uncomment below and update the code to test describeUser
        //instance.describeUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeUserHierarchyGroup', function() {
      it('should call describeUserHierarchyGroup successfully', function(done) {
        //uncomment below and update the code to test describeUserHierarchyGroup
        //instance.describeUserHierarchyGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeUserHierarchyStructure', function() {
      it('should call describeUserHierarchyStructure successfully', function(done) {
        //uncomment below and update the code to test describeUserHierarchyStructure
        //instance.describeUserHierarchyStructure(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVocabulary', function() {
      it('should call describeVocabulary successfully', function(done) {
        //uncomment below and update the code to test describeVocabulary
        //instance.describeVocabulary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateApprovedOrigin', function() {
      it('should call disassociateApprovedOrigin successfully', function(done) {
        //uncomment below and update the code to test disassociateApprovedOrigin
        //instance.disassociateApprovedOrigin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateBot', function() {
      it('should call disassociateBot successfully', function(done) {
        //uncomment below and update the code to test disassociateBot
        //instance.disassociateBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateInstanceStorageConfig', function() {
      it('should call disassociateInstanceStorageConfig successfully', function(done) {
        //uncomment below and update the code to test disassociateInstanceStorageConfig
        //instance.disassociateInstanceStorageConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateLambdaFunction', function() {
      it('should call disassociateLambdaFunction successfully', function(done) {
        //uncomment below and update the code to test disassociateLambdaFunction
        //instance.disassociateLambdaFunction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateLexBot', function() {
      it('should call disassociateLexBot successfully', function(done) {
        //uncomment below and update the code to test disassociateLexBot
        //instance.disassociateLexBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociatePhoneNumberContactFlow', function() {
      it('should call disassociatePhoneNumberContactFlow successfully', function(done) {
        //uncomment below and update the code to test disassociatePhoneNumberContactFlow
        //instance.disassociatePhoneNumberContactFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateQueueQuickConnects', function() {
      it('should call disassociateQueueQuickConnects successfully', function(done) {
        //uncomment below and update the code to test disassociateQueueQuickConnects
        //instance.disassociateQueueQuickConnects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateRoutingProfileQueues', function() {
      it('should call disassociateRoutingProfileQueues successfully', function(done) {
        //uncomment below and update the code to test disassociateRoutingProfileQueues
        //instance.disassociateRoutingProfileQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateSecurityKey', function() {
      it('should call disassociateSecurityKey successfully', function(done) {
        //uncomment below and update the code to test disassociateSecurityKey
        //instance.disassociateSecurityKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dismissUserContact', function() {
      it('should call dismissUserContact successfully', function(done) {
        //uncomment below and update the code to test dismissUserContact
        //instance.dismissUserContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContactAttributes', function() {
      it('should call getContactAttributes successfully', function(done) {
        //uncomment below and update the code to test getContactAttributes
        //instance.getContactAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrentMetricData', function() {
      it('should call getCurrentMetricData successfully', function(done) {
        //uncomment below and update the code to test getCurrentMetricData
        //instance.getCurrentMetricData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrentUserData', function() {
      it('should call getCurrentUserData successfully', function(done) {
        //uncomment below and update the code to test getCurrentUserData
        //instance.getCurrentUserData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFederationToken', function() {
      it('should call getFederationToken successfully', function(done) {
        //uncomment below and update the code to test getFederationToken
        //instance.getFederationToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMetricData', function() {
      it('should call getMetricData successfully', function(done) {
        //uncomment below and update the code to test getMetricData
        //instance.getMetricData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMetricDataV2', function() {
      it('should call getMetricDataV2 successfully', function(done) {
        //uncomment below and update the code to test getMetricDataV2
        //instance.getMetricDataV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPromptFile', function() {
      it('should call getPromptFile successfully', function(done) {
        //uncomment below and update the code to test getPromptFile
        //instance.getPromptFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaskTemplate', function() {
      it('should call getTaskTemplate successfully', function(done) {
        //uncomment below and update the code to test getTaskTemplate
        //instance.getTaskTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTrafficDistribution', function() {
      it('should call getTrafficDistribution successfully', function(done) {
        //uncomment below and update the code to test getTrafficDistribution
        //instance.getTrafficDistribution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAgentStatuses', function() {
      it('should call listAgentStatuses successfully', function(done) {
        //uncomment below and update the code to test listAgentStatuses
        //instance.listAgentStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApprovedOrigins', function() {
      it('should call listApprovedOrigins successfully', function(done) {
        //uncomment below and update the code to test listApprovedOrigins
        //instance.listApprovedOrigins(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBots', function() {
      it('should call listBots successfully', function(done) {
        //uncomment below and update the code to test listBots
        //instance.listBots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listContactEvaluations', function() {
      it('should call listContactEvaluations successfully', function(done) {
        //uncomment below and update the code to test listContactEvaluations
        //instance.listContactEvaluations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listContactFlowModules', function() {
      it('should call listContactFlowModules successfully', function(done) {
        //uncomment below and update the code to test listContactFlowModules
        //instance.listContactFlowModules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listContactFlows', function() {
      it('should call listContactFlows successfully', function(done) {
        //uncomment below and update the code to test listContactFlows
        //instance.listContactFlows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listContactReferences', function() {
      it('should call listContactReferences successfully', function(done) {
        //uncomment below and update the code to test listContactReferences
        //instance.listContactReferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDefaultVocabularies', function() {
      it('should call listDefaultVocabularies successfully', function(done) {
        //uncomment below and update the code to test listDefaultVocabularies
        //instance.listDefaultVocabularies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEvaluationFormVersions', function() {
      it('should call listEvaluationFormVersions successfully', function(done) {
        //uncomment below and update the code to test listEvaluationFormVersions
        //instance.listEvaluationFormVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEvaluationForms', function() {
      it('should call listEvaluationForms successfully', function(done) {
        //uncomment below and update the code to test listEvaluationForms
        //instance.listEvaluationForms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHoursOfOperations', function() {
      it('should call listHoursOfOperations successfully', function(done) {
        //uncomment below and update the code to test listHoursOfOperations
        //instance.listHoursOfOperations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInstanceAttributes', function() {
      it('should call listInstanceAttributes successfully', function(done) {
        //uncomment below and update the code to test listInstanceAttributes
        //instance.listInstanceAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInstanceStorageConfigs', function() {
      it('should call listInstanceStorageConfigs successfully', function(done) {
        //uncomment below and update the code to test listInstanceStorageConfigs
        //instance.listInstanceStorageConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInstances', function() {
      it('should call listInstances successfully', function(done) {
        //uncomment below and update the code to test listInstances
        //instance.listInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIntegrationAssociations', function() {
      it('should call listIntegrationAssociations successfully', function(done) {
        //uncomment below and update the code to test listIntegrationAssociations
        //instance.listIntegrationAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLambdaFunctions', function() {
      it('should call listLambdaFunctions successfully', function(done) {
        //uncomment below and update the code to test listLambdaFunctions
        //instance.listLambdaFunctions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLexBots', function() {
      it('should call listLexBots successfully', function(done) {
        //uncomment below and update the code to test listLexBots
        //instance.listLexBots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPhoneNumbers', function() {
      it('should call listPhoneNumbers successfully', function(done) {
        //uncomment below and update the code to test listPhoneNumbers
        //instance.listPhoneNumbers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPhoneNumbersV2', function() {
      it('should call listPhoneNumbersV2 successfully', function(done) {
        //uncomment below and update the code to test listPhoneNumbersV2
        //instance.listPhoneNumbersV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPrompts', function() {
      it('should call listPrompts successfully', function(done) {
        //uncomment below and update the code to test listPrompts
        //instance.listPrompts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listQueueQuickConnects', function() {
      it('should call listQueueQuickConnects successfully', function(done) {
        //uncomment below and update the code to test listQueueQuickConnects
        //instance.listQueueQuickConnects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listQueues', function() {
      it('should call listQueues successfully', function(done) {
        //uncomment below and update the code to test listQueues
        //instance.listQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listQuickConnects', function() {
      it('should call listQuickConnects successfully', function(done) {
        //uncomment below and update the code to test listQuickConnects
        //instance.listQuickConnects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoutingProfileQueues', function() {
      it('should call listRoutingProfileQueues successfully', function(done) {
        //uncomment below and update the code to test listRoutingProfileQueues
        //instance.listRoutingProfileQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoutingProfiles', function() {
      it('should call listRoutingProfiles successfully', function(done) {
        //uncomment below and update the code to test listRoutingProfiles
        //instance.listRoutingProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRules', function() {
      it('should call listRules successfully', function(done) {
        //uncomment below and update the code to test listRules
        //instance.listRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecurityKeys', function() {
      it('should call listSecurityKeys successfully', function(done) {
        //uncomment below and update the code to test listSecurityKeys
        //instance.listSecurityKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecurityProfilePermissions', function() {
      it('should call listSecurityProfilePermissions successfully', function(done) {
        //uncomment below and update the code to test listSecurityProfilePermissions
        //instance.listSecurityProfilePermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecurityProfiles', function() {
      it('should call listSecurityProfiles successfully', function(done) {
        //uncomment below and update the code to test listSecurityProfiles
        //instance.listSecurityProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTaskTemplates', function() {
      it('should call listTaskTemplates successfully', function(done) {
        //uncomment below and update the code to test listTaskTemplates
        //instance.listTaskTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTrafficDistributionGroups', function() {
      it('should call listTrafficDistributionGroups successfully', function(done) {
        //uncomment below and update the code to test listTrafficDistributionGroups
        //instance.listTrafficDistributionGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUseCases', function() {
      it('should call listUseCases successfully', function(done) {
        //uncomment below and update the code to test listUseCases
        //instance.listUseCases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUserHierarchyGroups', function() {
      it('should call listUserHierarchyGroups successfully', function(done) {
        //uncomment below and update the code to test listUserHierarchyGroups
        //instance.listUserHierarchyGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers', function() {
      it('should call listUsers successfully', function(done) {
        //uncomment below and update the code to test listUsers
        //instance.listUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('monitorContact', function() {
      it('should call monitorContact successfully', function(done) {
        //uncomment below and update the code to test monitorContact
        //instance.monitorContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putUserStatus', function() {
      it('should call putUserStatus successfully', function(done) {
        //uncomment below and update the code to test putUserStatus
        //instance.putUserStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('releasePhoneNumber', function() {
      it('should call releasePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test releasePhoneNumber
        //instance.releasePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicateInstance', function() {
      it('should call replicateInstance successfully', function(done) {
        //uncomment below and update the code to test replicateInstance
        //instance.replicateInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeContactRecording', function() {
      it('should call resumeContactRecording successfully', function(done) {
        //uncomment below and update the code to test resumeContactRecording
        //instance.resumeContactRecording(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchAvailablePhoneNumbers', function() {
      it('should call searchAvailablePhoneNumbers successfully', function(done) {
        //uncomment below and update the code to test searchAvailablePhoneNumbers
        //instance.searchAvailablePhoneNumbers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchHoursOfOperations', function() {
      it('should call searchHoursOfOperations successfully', function(done) {
        //uncomment below and update the code to test searchHoursOfOperations
        //instance.searchHoursOfOperations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchPrompts', function() {
      it('should call searchPrompts successfully', function(done) {
        //uncomment below and update the code to test searchPrompts
        //instance.searchPrompts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchQueues', function() {
      it('should call searchQueues successfully', function(done) {
        //uncomment below and update the code to test searchQueues
        //instance.searchQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchQuickConnects', function() {
      it('should call searchQuickConnects successfully', function(done) {
        //uncomment below and update the code to test searchQuickConnects
        //instance.searchQuickConnects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchResourceTags', function() {
      it('should call searchResourceTags successfully', function(done) {
        //uncomment below and update the code to test searchResourceTags
        //instance.searchResourceTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchRoutingProfiles', function() {
      it('should call searchRoutingProfiles successfully', function(done) {
        //uncomment below and update the code to test searchRoutingProfiles
        //instance.searchRoutingProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchSecurityProfiles', function() {
      it('should call searchSecurityProfiles successfully', function(done) {
        //uncomment below and update the code to test searchSecurityProfiles
        //instance.searchSecurityProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchUsers', function() {
      it('should call searchUsers successfully', function(done) {
        //uncomment below and update the code to test searchUsers
        //instance.searchUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchVocabularies', function() {
      it('should call searchVocabularies successfully', function(done) {
        //uncomment below and update the code to test searchVocabularies
        //instance.searchVocabularies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startChatContact', function() {
      it('should call startChatContact successfully', function(done) {
        //uncomment below and update the code to test startChatContact
        //instance.startChatContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startContactEvaluation', function() {
      it('should call startContactEvaluation successfully', function(done) {
        //uncomment below and update the code to test startContactEvaluation
        //instance.startContactEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startContactRecording', function() {
      it('should call startContactRecording successfully', function(done) {
        //uncomment below and update the code to test startContactRecording
        //instance.startContactRecording(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startContactStreaming', function() {
      it('should call startContactStreaming successfully', function(done) {
        //uncomment below and update the code to test startContactStreaming
        //instance.startContactStreaming(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startOutboundVoiceContact', function() {
      it('should call startOutboundVoiceContact successfully', function(done) {
        //uncomment below and update the code to test startOutboundVoiceContact
        //instance.startOutboundVoiceContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startTaskContact', function() {
      it('should call startTaskContact successfully', function(done) {
        //uncomment below and update the code to test startTaskContact
        //instance.startTaskContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopContact', function() {
      it('should call stopContact successfully', function(done) {
        //uncomment below and update the code to test stopContact
        //instance.stopContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopContactRecording', function() {
      it('should call stopContactRecording successfully', function(done) {
        //uncomment below and update the code to test stopContactRecording
        //instance.stopContactRecording(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopContactStreaming', function() {
      it('should call stopContactStreaming successfully', function(done) {
        //uncomment below and update the code to test stopContactStreaming
        //instance.stopContactStreaming(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitContactEvaluation', function() {
      it('should call submitContactEvaluation successfully', function(done) {
        //uncomment below and update the code to test submitContactEvaluation
        //instance.submitContactEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('suspendContactRecording', function() {
      it('should call suspendContactRecording successfully', function(done) {
        //uncomment below and update the code to test suspendContactRecording
        //instance.suspendContactRecording(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transferContact', function() {
      it('should call transferContact successfully', function(done) {
        //uncomment below and update the code to test transferContact
        //instance.transferContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAgentStatus', function() {
      it('should call updateAgentStatus successfully', function(done) {
        //uncomment below and update the code to test updateAgentStatus
        //instance.updateAgentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContact', function() {
      it('should call updateContact successfully', function(done) {
        //uncomment below and update the code to test updateContact
        //instance.updateContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContactAttributes', function() {
      it('should call updateContactAttributes successfully', function(done) {
        //uncomment below and update the code to test updateContactAttributes
        //instance.updateContactAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContactEvaluation', function() {
      it('should call updateContactEvaluation successfully', function(done) {
        //uncomment below and update the code to test updateContactEvaluation
        //instance.updateContactEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContactFlowContent', function() {
      it('should call updateContactFlowContent successfully', function(done) {
        //uncomment below and update the code to test updateContactFlowContent
        //instance.updateContactFlowContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContactFlowMetadata', function() {
      it('should call updateContactFlowMetadata successfully', function(done) {
        //uncomment below and update the code to test updateContactFlowMetadata
        //instance.updateContactFlowMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContactFlowModuleContent', function() {
      it('should call updateContactFlowModuleContent successfully', function(done) {
        //uncomment below and update the code to test updateContactFlowModuleContent
        //instance.updateContactFlowModuleContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContactFlowModuleMetadata', function() {
      it('should call updateContactFlowModuleMetadata successfully', function(done) {
        //uncomment below and update the code to test updateContactFlowModuleMetadata
        //instance.updateContactFlowModuleMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContactFlowName', function() {
      it('should call updateContactFlowName successfully', function(done) {
        //uncomment below and update the code to test updateContactFlowName
        //instance.updateContactFlowName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContactSchedule', function() {
      it('should call updateContactSchedule successfully', function(done) {
        //uncomment below and update the code to test updateContactSchedule
        //instance.updateContactSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEvaluationForm', function() {
      it('should call updateEvaluationForm successfully', function(done) {
        //uncomment below and update the code to test updateEvaluationForm
        //instance.updateEvaluationForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHoursOfOperation', function() {
      it('should call updateHoursOfOperation successfully', function(done) {
        //uncomment below and update the code to test updateHoursOfOperation
        //instance.updateHoursOfOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstanceAttribute', function() {
      it('should call updateInstanceAttribute successfully', function(done) {
        //uncomment below and update the code to test updateInstanceAttribute
        //instance.updateInstanceAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstanceStorageConfig', function() {
      it('should call updateInstanceStorageConfig successfully', function(done) {
        //uncomment below and update the code to test updateInstanceStorageConfig
        //instance.updateInstanceStorageConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateParticipantRoleConfig', function() {
      it('should call updateParticipantRoleConfig successfully', function(done) {
        //uncomment below and update the code to test updateParticipantRoleConfig
        //instance.updateParticipantRoleConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePhoneNumber', function() {
      it('should call updatePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test updatePhoneNumber
        //instance.updatePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePrompt', function() {
      it('should call updatePrompt successfully', function(done) {
        //uncomment below and update the code to test updatePrompt
        //instance.updatePrompt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQueueHoursOfOperation', function() {
      it('should call updateQueueHoursOfOperation successfully', function(done) {
        //uncomment below and update the code to test updateQueueHoursOfOperation
        //instance.updateQueueHoursOfOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQueueMaxContacts', function() {
      it('should call updateQueueMaxContacts successfully', function(done) {
        //uncomment below and update the code to test updateQueueMaxContacts
        //instance.updateQueueMaxContacts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQueueName', function() {
      it('should call updateQueueName successfully', function(done) {
        //uncomment below and update the code to test updateQueueName
        //instance.updateQueueName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQueueOutboundCallerConfig', function() {
      it('should call updateQueueOutboundCallerConfig successfully', function(done) {
        //uncomment below and update the code to test updateQueueOutboundCallerConfig
        //instance.updateQueueOutboundCallerConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQueueStatus', function() {
      it('should call updateQueueStatus successfully', function(done) {
        //uncomment below and update the code to test updateQueueStatus
        //instance.updateQueueStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQuickConnectConfig', function() {
      it('should call updateQuickConnectConfig successfully', function(done) {
        //uncomment below and update the code to test updateQuickConnectConfig
        //instance.updateQuickConnectConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQuickConnectName', function() {
      it('should call updateQuickConnectName successfully', function(done) {
        //uncomment below and update the code to test updateQuickConnectName
        //instance.updateQuickConnectName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoutingProfileAgentAvailabilityTimer', function() {
      it('should call updateRoutingProfileAgentAvailabilityTimer successfully', function(done) {
        //uncomment below and update the code to test updateRoutingProfileAgentAvailabilityTimer
        //instance.updateRoutingProfileAgentAvailabilityTimer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoutingProfileConcurrency', function() {
      it('should call updateRoutingProfileConcurrency successfully', function(done) {
        //uncomment below and update the code to test updateRoutingProfileConcurrency
        //instance.updateRoutingProfileConcurrency(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoutingProfileDefaultOutboundQueue', function() {
      it('should call updateRoutingProfileDefaultOutboundQueue successfully', function(done) {
        //uncomment below and update the code to test updateRoutingProfileDefaultOutboundQueue
        //instance.updateRoutingProfileDefaultOutboundQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoutingProfileName', function() {
      it('should call updateRoutingProfileName successfully', function(done) {
        //uncomment below and update the code to test updateRoutingProfileName
        //instance.updateRoutingProfileName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoutingProfileQueues', function() {
      it('should call updateRoutingProfileQueues successfully', function(done) {
        //uncomment below and update the code to test updateRoutingProfileQueues
        //instance.updateRoutingProfileQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRule', function() {
      it('should call updateRule successfully', function(done) {
        //uncomment below and update the code to test updateRule
        //instance.updateRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSecurityProfile', function() {
      it('should call updateSecurityProfile successfully', function(done) {
        //uncomment below and update the code to test updateSecurityProfile
        //instance.updateSecurityProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaskTemplate', function() {
      it('should call updateTaskTemplate successfully', function(done) {
        //uncomment below and update the code to test updateTaskTemplate
        //instance.updateTaskTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTrafficDistribution', function() {
      it('should call updateTrafficDistribution successfully', function(done) {
        //uncomment below and update the code to test updateTrafficDistribution
        //instance.updateTrafficDistribution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserHierarchy', function() {
      it('should call updateUserHierarchy successfully', function(done) {
        //uncomment below and update the code to test updateUserHierarchy
        //instance.updateUserHierarchy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserHierarchyGroupName', function() {
      it('should call updateUserHierarchyGroupName successfully', function(done) {
        //uncomment below and update the code to test updateUserHierarchyGroupName
        //instance.updateUserHierarchyGroupName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserHierarchyStructure', function() {
      it('should call updateUserHierarchyStructure successfully', function(done) {
        //uncomment below and update the code to test updateUserHierarchyStructure
        //instance.updateUserHierarchyStructure(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserIdentityInfo', function() {
      it('should call updateUserIdentityInfo successfully', function(done) {
        //uncomment below and update the code to test updateUserIdentityInfo
        //instance.updateUserIdentityInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserPhoneConfig', function() {
      it('should call updateUserPhoneConfig successfully', function(done) {
        //uncomment below and update the code to test updateUserPhoneConfig
        //instance.updateUserPhoneConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserRoutingProfile', function() {
      it('should call updateUserRoutingProfile successfully', function(done) {
        //uncomment below and update the code to test updateUserRoutingProfile
        //instance.updateUserRoutingProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserSecurityProfiles', function() {
      it('should call updateUserSecurityProfiles successfully', function(done) {
        //uncomment below and update the code to test updateUserSecurityProfiles
        //instance.updateUserSecurityProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
