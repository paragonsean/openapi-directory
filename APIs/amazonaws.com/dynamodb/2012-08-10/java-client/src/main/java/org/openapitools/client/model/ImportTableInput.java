/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImportTableInputInputFormatOptions;
import org.openapitools.client.model.ImportTableInputS3BucketSource;
import org.openapitools.client.model.ImportTableInputTableCreationParameters;
import org.openapitools.client.model.InputCompressionType;
import org.openapitools.client.model.InputFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImportTableInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportTableInput {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_S3_BUCKET_SOURCE = "S3BucketSource";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_SOURCE)
  private ImportTableInputS3BucketSource s3BucketSource;

  public static final String SERIALIZED_NAME_INPUT_FORMAT = "InputFormat";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT)
  private InputFormat inputFormat;

  public static final String SERIALIZED_NAME_INPUT_FORMAT_OPTIONS = "InputFormatOptions";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT_OPTIONS)
  private ImportTableInputInputFormatOptions inputFormatOptions;

  public static final String SERIALIZED_NAME_INPUT_COMPRESSION_TYPE = "InputCompressionType";
  @SerializedName(SERIALIZED_NAME_INPUT_COMPRESSION_TYPE)
  private InputCompressionType inputCompressionType;

  public static final String SERIALIZED_NAME_TABLE_CREATION_PARAMETERS = "TableCreationParameters";
  @SerializedName(SERIALIZED_NAME_TABLE_CREATION_PARAMETERS)
  private ImportTableInputTableCreationParameters tableCreationParameters;

  public ImportTableInput() {
  }

  public ImportTableInput clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public ImportTableInput s3BucketSource(ImportTableInputS3BucketSource s3BucketSource) {
    this.s3BucketSource = s3BucketSource;
    return this;
  }

  /**
   * Get s3BucketSource
   * @return s3BucketSource
   */
  @javax.annotation.Nonnull
  public ImportTableInputS3BucketSource getS3BucketSource() {
    return s3BucketSource;
  }

  public void setS3BucketSource(ImportTableInputS3BucketSource s3BucketSource) {
    this.s3BucketSource = s3BucketSource;
  }


  public ImportTableInput inputFormat(InputFormat inputFormat) {
    this.inputFormat = inputFormat;
    return this;
  }

  /**
   * Get inputFormat
   * @return inputFormat
   */
  @javax.annotation.Nonnull
  public InputFormat getInputFormat() {
    return inputFormat;
  }

  public void setInputFormat(InputFormat inputFormat) {
    this.inputFormat = inputFormat;
  }


  public ImportTableInput inputFormatOptions(ImportTableInputInputFormatOptions inputFormatOptions) {
    this.inputFormatOptions = inputFormatOptions;
    return this;
  }

  /**
   * Get inputFormatOptions
   * @return inputFormatOptions
   */
  @javax.annotation.Nullable
  public ImportTableInputInputFormatOptions getInputFormatOptions() {
    return inputFormatOptions;
  }

  public void setInputFormatOptions(ImportTableInputInputFormatOptions inputFormatOptions) {
    this.inputFormatOptions = inputFormatOptions;
  }


  public ImportTableInput inputCompressionType(InputCompressionType inputCompressionType) {
    this.inputCompressionType = inputCompressionType;
    return this;
  }

  /**
   * Get inputCompressionType
   * @return inputCompressionType
   */
  @javax.annotation.Nullable
  public InputCompressionType getInputCompressionType() {
    return inputCompressionType;
  }

  public void setInputCompressionType(InputCompressionType inputCompressionType) {
    this.inputCompressionType = inputCompressionType;
  }


  public ImportTableInput tableCreationParameters(ImportTableInputTableCreationParameters tableCreationParameters) {
    this.tableCreationParameters = tableCreationParameters;
    return this;
  }

  /**
   * Get tableCreationParameters
   * @return tableCreationParameters
   */
  @javax.annotation.Nonnull
  public ImportTableInputTableCreationParameters getTableCreationParameters() {
    return tableCreationParameters;
  }

  public void setTableCreationParameters(ImportTableInputTableCreationParameters tableCreationParameters) {
    this.tableCreationParameters = tableCreationParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportTableInput importTableInput = (ImportTableInput) o;
    return Objects.equals(this.clientToken, importTableInput.clientToken) &&
        Objects.equals(this.s3BucketSource, importTableInput.s3BucketSource) &&
        Objects.equals(this.inputFormat, importTableInput.inputFormat) &&
        Objects.equals(this.inputFormatOptions, importTableInput.inputFormatOptions) &&
        Objects.equals(this.inputCompressionType, importTableInput.inputCompressionType) &&
        Objects.equals(this.tableCreationParameters, importTableInput.tableCreationParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, s3BucketSource, inputFormat, inputFormatOptions, inputCompressionType, tableCreationParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportTableInput {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    s3BucketSource: ").append(toIndentedString(s3BucketSource)).append("\n");
    sb.append("    inputFormat: ").append(toIndentedString(inputFormat)).append("\n");
    sb.append("    inputFormatOptions: ").append(toIndentedString(inputFormatOptions)).append("\n");
    sb.append("    inputCompressionType: ").append(toIndentedString(inputCompressionType)).append("\n");
    sb.append("    tableCreationParameters: ").append(toIndentedString(tableCreationParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("S3BucketSource");
    openapiFields.add("InputFormat");
    openapiFields.add("InputFormatOptions");
    openapiFields.add("InputCompressionType");
    openapiFields.add("TableCreationParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("S3BucketSource");
    openapiRequiredFields.add("InputFormat");
    openapiRequiredFields.add("TableCreationParameters");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportTableInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportTableInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportTableInput is not found in the empty JSON string", ImportTableInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportTableInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportTableInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportTableInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
      // validate the required field `S3BucketSource`
      ImportTableInputS3BucketSource.validateJsonElement(jsonObj.get("S3BucketSource"));
      // validate the required field `InputFormat`
      InputFormat.validateJsonElement(jsonObj.get("InputFormat"));
      // validate the optional field `InputFormatOptions`
      if (jsonObj.get("InputFormatOptions") != null && !jsonObj.get("InputFormatOptions").isJsonNull()) {
        ImportTableInputInputFormatOptions.validateJsonElement(jsonObj.get("InputFormatOptions"));
      }
      // validate the optional field `InputCompressionType`
      if (jsonObj.get("InputCompressionType") != null && !jsonObj.get("InputCompressionType").isJsonNull()) {
        InputCompressionType.validateJsonElement(jsonObj.get("InputCompressionType"));
      }
      // validate the required field `TableCreationParameters`
      ImportTableInputTableCreationParameters.validateJsonElement(jsonObj.get("TableCreationParameters"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportTableInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportTableInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportTableInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportTableInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportTableInput>() {
           @Override
           public void write(JsonWriter out, ImportTableInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportTableInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportTableInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportTableInput
   * @throws IOException if the JSON string is invalid with respect to ImportTableInput
   */
  public static ImportTableInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportTableInput.class);
  }

  /**
   * Convert an instance of ImportTableInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

