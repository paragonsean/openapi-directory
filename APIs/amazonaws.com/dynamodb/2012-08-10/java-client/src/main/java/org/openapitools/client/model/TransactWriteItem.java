/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TransactWriteItemConditionCheck;
import org.openapitools.client.model.TransactWriteItemDelete;
import org.openapitools.client.model.TransactWriteItemPut;
import org.openapitools.client.model.TransactWriteItemUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactWriteItem {
  public static final String SERIALIZED_NAME_CONDITION_CHECK = "ConditionCheck";
  @SerializedName(SERIALIZED_NAME_CONDITION_CHECK)
  private TransactWriteItemConditionCheck conditionCheck;

  public static final String SERIALIZED_NAME_PUT = "Put";
  @SerializedName(SERIALIZED_NAME_PUT)
  private TransactWriteItemPut put;

  public static final String SERIALIZED_NAME_DELETE = "Delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private TransactWriteItemDelete delete;

  public static final String SERIALIZED_NAME_UPDATE = "Update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private TransactWriteItemUpdate update;

  public TransactWriteItem() {
  }

  public TransactWriteItem conditionCheck(TransactWriteItemConditionCheck conditionCheck) {
    this.conditionCheck = conditionCheck;
    return this;
  }

  /**
   * Get conditionCheck
   * @return conditionCheck
   */
  @javax.annotation.Nullable
  public TransactWriteItemConditionCheck getConditionCheck() {
    return conditionCheck;
  }

  public void setConditionCheck(TransactWriteItemConditionCheck conditionCheck) {
    this.conditionCheck = conditionCheck;
  }


  public TransactWriteItem put(TransactWriteItemPut put) {
    this.put = put;
    return this;
  }

  /**
   * Get put
   * @return put
   */
  @javax.annotation.Nullable
  public TransactWriteItemPut getPut() {
    return put;
  }

  public void setPut(TransactWriteItemPut put) {
    this.put = put;
  }


  public TransactWriteItem delete(TransactWriteItemDelete delete) {
    this.delete = delete;
    return this;
  }

  /**
   * Get delete
   * @return delete
   */
  @javax.annotation.Nullable
  public TransactWriteItemDelete getDelete() {
    return delete;
  }

  public void setDelete(TransactWriteItemDelete delete) {
    this.delete = delete;
  }


  public TransactWriteItem update(TransactWriteItemUpdate update) {
    this.update = update;
    return this;
  }

  /**
   * Get update
   * @return update
   */
  @javax.annotation.Nullable
  public TransactWriteItemUpdate getUpdate() {
    return update;
  }

  public void setUpdate(TransactWriteItemUpdate update) {
    this.update = update;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactWriteItem transactWriteItem = (TransactWriteItem) o;
    return Objects.equals(this.conditionCheck, transactWriteItem.conditionCheck) &&
        Objects.equals(this.put, transactWriteItem.put) &&
        Objects.equals(this.delete, transactWriteItem.delete) &&
        Objects.equals(this.update, transactWriteItem.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditionCheck, put, delete, update);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactWriteItem {\n");
    sb.append("    conditionCheck: ").append(toIndentedString(conditionCheck)).append("\n");
    sb.append("    put: ").append(toIndentedString(put)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConditionCheck");
    openapiFields.add("Put");
    openapiFields.add("Delete");
    openapiFields.add("Update");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactWriteItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactWriteItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactWriteItem is not found in the empty JSON string", TransactWriteItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactWriteItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactWriteItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConditionCheck`
      if (jsonObj.get("ConditionCheck") != null && !jsonObj.get("ConditionCheck").isJsonNull()) {
        TransactWriteItemConditionCheck.validateJsonElement(jsonObj.get("ConditionCheck"));
      }
      // validate the optional field `Put`
      if (jsonObj.get("Put") != null && !jsonObj.get("Put").isJsonNull()) {
        TransactWriteItemPut.validateJsonElement(jsonObj.get("Put"));
      }
      // validate the optional field `Delete`
      if (jsonObj.get("Delete") != null && !jsonObj.get("Delete").isJsonNull()) {
        TransactWriteItemDelete.validateJsonElement(jsonObj.get("Delete"));
      }
      // validate the optional field `Update`
      if (jsonObj.get("Update") != null && !jsonObj.get("Update").isJsonNull()) {
        TransactWriteItemUpdate.validateJsonElement(jsonObj.get("Update"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactWriteItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactWriteItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactWriteItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactWriteItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactWriteItem>() {
           @Override
           public void write(JsonWriter out, TransactWriteItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactWriteItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactWriteItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactWriteItem
   * @throws IOException if the JSON string is invalid with respect to TransactWriteItem
   */
  public static TransactWriteItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactWriteItem.class);
  }

  /**
   * Convert an instance of TransactWriteItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

