/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComparisonOperator;
import org.openapitools.client.model.ExpectedAttributeValueValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Represents a condition to be compared with an attribute value. This condition can be used with &lt;code&gt;DeleteItem&lt;/code&gt;, &lt;code&gt;PutItem&lt;/code&gt;, or &lt;code&gt;UpdateItem&lt;/code&gt; operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use &lt;code&gt;ExpectedAttributeValue&lt;/code&gt; in one of two different ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;AttributeValueList&lt;/code&gt; to specify one or more values to compare against an attribute. Use &lt;code&gt;ComparisonOperator&lt;/code&gt; to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;Value&lt;/code&gt; to specify a value that DynamoDB will compare against an attribute. If the values match, then &lt;code&gt;ExpectedAttributeValue&lt;/code&gt; evaluates to true and the conditional operation succeeds. Optionally, you can also set &lt;code&gt;Exists&lt;/code&gt; to false, indicating that you &lt;i&gt;do not&lt;/i&gt; expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;Value&lt;/code&gt; and &lt;code&gt;Exists&lt;/code&gt; are incompatible with &lt;code&gt;AttributeValueList&lt;/code&gt; and &lt;code&gt;ComparisonOperator&lt;/code&gt;. Note that if you use both sets of parameters at once, DynamoDB will return a &lt;code&gt;ValidationException&lt;/code&gt; exception.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpectedAttributeValue {
  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private ExpectedAttributeValueValue value;

  public static final String SERIALIZED_NAME_EXISTS = "Exists";
  @SerializedName(SERIALIZED_NAME_EXISTS)
  private Boolean exists;

  public static final String SERIALIZED_NAME_COMPARISON_OPERATOR = "ComparisonOperator";
  @SerializedName(SERIALIZED_NAME_COMPARISON_OPERATOR)
  private ComparisonOperator comparisonOperator;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE_LIST = "AttributeValueList";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE_LIST)
  private List attributeValueList;

  public ExpectedAttributeValue() {
  }

  public ExpectedAttributeValue value(ExpectedAttributeValueValue value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public ExpectedAttributeValueValue getValue() {
    return value;
  }

  public void setValue(ExpectedAttributeValueValue value) {
    this.value = value;
  }


  public ExpectedAttributeValue exists(Boolean exists) {
    this.exists = exists;
    return this;
  }

  /**
   * Get exists
   * @return exists
   */
  @javax.annotation.Nullable
  public Boolean getExists() {
    return exists;
  }

  public void setExists(Boolean exists) {
    this.exists = exists;
  }


  public ExpectedAttributeValue comparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
    return this;
  }

  /**
   * Get comparisonOperator
   * @return comparisonOperator
   */
  @javax.annotation.Nullable
  public ComparisonOperator getComparisonOperator() {
    return comparisonOperator;
  }

  public void setComparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
  }


  public ExpectedAttributeValue attributeValueList(List attributeValueList) {
    this.attributeValueList = attributeValueList;
    return this;
  }

  /**
   * Get attributeValueList
   * @return attributeValueList
   */
  @javax.annotation.Nullable
  public List getAttributeValueList() {
    return attributeValueList;
  }

  public void setAttributeValueList(List attributeValueList) {
    this.attributeValueList = attributeValueList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpectedAttributeValue expectedAttributeValue = (ExpectedAttributeValue) o;
    return Objects.equals(this.value, expectedAttributeValue.value) &&
        Objects.equals(this.exists, expectedAttributeValue.exists) &&
        Objects.equals(this.comparisonOperator, expectedAttributeValue.comparisonOperator) &&
        Objects.equals(this.attributeValueList, expectedAttributeValue.attributeValueList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, exists, comparisonOperator, attributeValueList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpectedAttributeValue {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    comparisonOperator: ").append(toIndentedString(comparisonOperator)).append("\n");
    sb.append("    attributeValueList: ").append(toIndentedString(attributeValueList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Value");
    openapiFields.add("Exists");
    openapiFields.add("ComparisonOperator");
    openapiFields.add("AttributeValueList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpectedAttributeValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpectedAttributeValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpectedAttributeValue is not found in the empty JSON string", ExpectedAttributeValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpectedAttributeValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpectedAttributeValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Value`
      if (jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) {
        ExpectedAttributeValueValue.validateJsonElement(jsonObj.get("Value"));
      }
      // validate the optional field `Exists`
      if (jsonObj.get("Exists") != null && !jsonObj.get("Exists").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Exists"));
      }
      // validate the optional field `ComparisonOperator`
      if (jsonObj.get("ComparisonOperator") != null && !jsonObj.get("ComparisonOperator").isJsonNull()) {
        ComparisonOperator.validateJsonElement(jsonObj.get("ComparisonOperator"));
      }
      // validate the optional field `AttributeValueList`
      if (jsonObj.get("AttributeValueList") != null && !jsonObj.get("AttributeValueList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttributeValueList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpectedAttributeValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpectedAttributeValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpectedAttributeValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpectedAttributeValue.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpectedAttributeValue>() {
           @Override
           public void write(JsonWriter out, ExpectedAttributeValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpectedAttributeValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpectedAttributeValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpectedAttributeValue
   * @throws IOException if the JSON string is invalid with respect to ExpectedAttributeValue
   */
  public static ExpectedAttributeValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpectedAttributeValue.class);
  }

  /**
   * Convert an instance of ExpectedAttributeValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

