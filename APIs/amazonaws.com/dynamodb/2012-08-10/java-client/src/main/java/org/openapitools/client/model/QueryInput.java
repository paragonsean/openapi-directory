/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ConditionalOperator;
import org.openapitools.client.model.ReturnConsumedCapacity;
import org.openapitools.client.model.Select;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of a &lt;code&gt;Query&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryInput {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_INDEX_NAME = "IndexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  private String indexName;

  public static final String SERIALIZED_NAME_SELECT = "Select";
  @SerializedName(SERIALIZED_NAME_SELECT)
  private Select select;

  public static final String SERIALIZED_NAME_ATTRIBUTES_TO_GET = "AttributesToGet";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_TO_GET)
  private List attributesToGet;

  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_CONSISTENT_READ = "ConsistentRead";
  @SerializedName(SERIALIZED_NAME_CONSISTENT_READ)
  private Boolean consistentRead;

  public static final String SERIALIZED_NAME_KEY_CONDITIONS = "KeyConditions";
  @SerializedName(SERIALIZED_NAME_KEY_CONDITIONS)
  private Map keyConditions;

  public static final String SERIALIZED_NAME_QUERY_FILTER = "QueryFilter";
  @SerializedName(SERIALIZED_NAME_QUERY_FILTER)
  private Map queryFilter;

  public static final String SERIALIZED_NAME_CONDITIONAL_OPERATOR = "ConditionalOperator";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_OPERATOR)
  private ConditionalOperator conditionalOperator;

  public static final String SERIALIZED_NAME_SCAN_INDEX_FORWARD = "ScanIndexForward";
  @SerializedName(SERIALIZED_NAME_SCAN_INDEX_FORWARD)
  private Boolean scanIndexForward;

  public static final String SERIALIZED_NAME_EXCLUSIVE_START_KEY = "ExclusiveStartKey";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_START_KEY)
  private Map exclusiveStartKey;

  public static final String SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY = "ReturnConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY)
  private ReturnConsumedCapacity returnConsumedCapacity;

  public static final String SERIALIZED_NAME_PROJECTION_EXPRESSION = "ProjectionExpression";
  @SerializedName(SERIALIZED_NAME_PROJECTION_EXPRESSION)
  private String projectionExpression;

  public static final String SERIALIZED_NAME_FILTER_EXPRESSION = "FilterExpression";
  @SerializedName(SERIALIZED_NAME_FILTER_EXPRESSION)
  private String filterExpression;

  public static final String SERIALIZED_NAME_KEY_CONDITION_EXPRESSION = "KeyConditionExpression";
  @SerializedName(SERIALIZED_NAME_KEY_CONDITION_EXPRESSION)
  private String keyConditionExpression;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES = "ExpressionAttributeNames";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES)
  private Map expressionAttributeNames;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES = "ExpressionAttributeValues";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES)
  private Map expressionAttributeValues;

  public QueryInput() {
  }

  public QueryInput tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public QueryInput indexName(String indexName) {
    this.indexName = indexName;
    return this;
  }

  /**
   * Get indexName
   * @return indexName
   */
  @javax.annotation.Nullable
  public String getIndexName() {
    return indexName;
  }

  public void setIndexName(String indexName) {
    this.indexName = indexName;
  }


  public QueryInput select(Select select) {
    this.select = select;
    return this;
  }

  /**
   * Get select
   * @return select
   */
  @javax.annotation.Nullable
  public Select getSelect() {
    return select;
  }

  public void setSelect(Select select) {
    this.select = select;
  }


  public QueryInput attributesToGet(List attributesToGet) {
    this.attributesToGet = attributesToGet;
    return this;
  }

  /**
   * Get attributesToGet
   * @return attributesToGet
   */
  @javax.annotation.Nullable
  public List getAttributesToGet() {
    return attributesToGet;
  }

  public void setAttributesToGet(List attributesToGet) {
    this.attributesToGet = attributesToGet;
  }


  public QueryInput limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public QueryInput consistentRead(Boolean consistentRead) {
    this.consistentRead = consistentRead;
    return this;
  }

  /**
   * Get consistentRead
   * @return consistentRead
   */
  @javax.annotation.Nullable
  public Boolean getConsistentRead() {
    return consistentRead;
  }

  public void setConsistentRead(Boolean consistentRead) {
    this.consistentRead = consistentRead;
  }


  public QueryInput keyConditions(Map keyConditions) {
    this.keyConditions = keyConditions;
    return this;
  }

  /**
   * Get keyConditions
   * @return keyConditions
   */
  @javax.annotation.Nullable
  public Map getKeyConditions() {
    return keyConditions;
  }

  public void setKeyConditions(Map keyConditions) {
    this.keyConditions = keyConditions;
  }


  public QueryInput queryFilter(Map queryFilter) {
    this.queryFilter = queryFilter;
    return this;
  }

  /**
   * Get queryFilter
   * @return queryFilter
   */
  @javax.annotation.Nullable
  public Map getQueryFilter() {
    return queryFilter;
  }

  public void setQueryFilter(Map queryFilter) {
    this.queryFilter = queryFilter;
  }


  public QueryInput conditionalOperator(ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
    return this;
  }

  /**
   * Get conditionalOperator
   * @return conditionalOperator
   */
  @javax.annotation.Nullable
  public ConditionalOperator getConditionalOperator() {
    return conditionalOperator;
  }

  public void setConditionalOperator(ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
  }


  public QueryInput scanIndexForward(Boolean scanIndexForward) {
    this.scanIndexForward = scanIndexForward;
    return this;
  }

  /**
   * Get scanIndexForward
   * @return scanIndexForward
   */
  @javax.annotation.Nullable
  public Boolean getScanIndexForward() {
    return scanIndexForward;
  }

  public void setScanIndexForward(Boolean scanIndexForward) {
    this.scanIndexForward = scanIndexForward;
  }


  public QueryInput exclusiveStartKey(Map exclusiveStartKey) {
    this.exclusiveStartKey = exclusiveStartKey;
    return this;
  }

  /**
   * Get exclusiveStartKey
   * @return exclusiveStartKey
   */
  @javax.annotation.Nullable
  public Map getExclusiveStartKey() {
    return exclusiveStartKey;
  }

  public void setExclusiveStartKey(Map exclusiveStartKey) {
    this.exclusiveStartKey = exclusiveStartKey;
  }


  public QueryInput returnConsumedCapacity(ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
    return this;
  }

  /**
   * Get returnConsumedCapacity
   * @return returnConsumedCapacity
   */
  @javax.annotation.Nullable
  public ReturnConsumedCapacity getReturnConsumedCapacity() {
    return returnConsumedCapacity;
  }

  public void setReturnConsumedCapacity(ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
  }


  public QueryInput projectionExpression(String projectionExpression) {
    this.projectionExpression = projectionExpression;
    return this;
  }

  /**
   * Get projectionExpression
   * @return projectionExpression
   */
  @javax.annotation.Nullable
  public String getProjectionExpression() {
    return projectionExpression;
  }

  public void setProjectionExpression(String projectionExpression) {
    this.projectionExpression = projectionExpression;
  }


  public QueryInput filterExpression(String filterExpression) {
    this.filterExpression = filterExpression;
    return this;
  }

  /**
   * Get filterExpression
   * @return filterExpression
   */
  @javax.annotation.Nullable
  public String getFilterExpression() {
    return filterExpression;
  }

  public void setFilterExpression(String filterExpression) {
    this.filterExpression = filterExpression;
  }


  public QueryInput keyConditionExpression(String keyConditionExpression) {
    this.keyConditionExpression = keyConditionExpression;
    return this;
  }

  /**
   * Get keyConditionExpression
   * @return keyConditionExpression
   */
  @javax.annotation.Nullable
  public String getKeyConditionExpression() {
    return keyConditionExpression;
  }

  public void setKeyConditionExpression(String keyConditionExpression) {
    this.keyConditionExpression = keyConditionExpression;
  }


  public QueryInput expressionAttributeNames(Map expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
    return this;
  }

  /**
   * Get expressionAttributeNames
   * @return expressionAttributeNames
   */
  @javax.annotation.Nullable
  public Map getExpressionAttributeNames() {
    return expressionAttributeNames;
  }

  public void setExpressionAttributeNames(Map expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
  }


  public QueryInput expressionAttributeValues(Map expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
    return this;
  }

  /**
   * Get expressionAttributeValues
   * @return expressionAttributeValues
   */
  @javax.annotation.Nullable
  public Map getExpressionAttributeValues() {
    return expressionAttributeValues;
  }

  public void setExpressionAttributeValues(Map expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryInput queryInput = (QueryInput) o;
    return Objects.equals(this.tableName, queryInput.tableName) &&
        Objects.equals(this.indexName, queryInput.indexName) &&
        Objects.equals(this.select, queryInput.select) &&
        Objects.equals(this.attributesToGet, queryInput.attributesToGet) &&
        Objects.equals(this.limit, queryInput.limit) &&
        Objects.equals(this.consistentRead, queryInput.consistentRead) &&
        Objects.equals(this.keyConditions, queryInput.keyConditions) &&
        Objects.equals(this.queryFilter, queryInput.queryFilter) &&
        Objects.equals(this.conditionalOperator, queryInput.conditionalOperator) &&
        Objects.equals(this.scanIndexForward, queryInput.scanIndexForward) &&
        Objects.equals(this.exclusiveStartKey, queryInput.exclusiveStartKey) &&
        Objects.equals(this.returnConsumedCapacity, queryInput.returnConsumedCapacity) &&
        Objects.equals(this.projectionExpression, queryInput.projectionExpression) &&
        Objects.equals(this.filterExpression, queryInput.filterExpression) &&
        Objects.equals(this.keyConditionExpression, queryInput.keyConditionExpression) &&
        Objects.equals(this.expressionAttributeNames, queryInput.expressionAttributeNames) &&
        Objects.equals(this.expressionAttributeValues, queryInput.expressionAttributeValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, indexName, select, attributesToGet, limit, consistentRead, keyConditions, queryFilter, conditionalOperator, scanIndexForward, exclusiveStartKey, returnConsumedCapacity, projectionExpression, filterExpression, keyConditionExpression, expressionAttributeNames, expressionAttributeValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryInput {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    select: ").append(toIndentedString(select)).append("\n");
    sb.append("    attributesToGet: ").append(toIndentedString(attributesToGet)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    consistentRead: ").append(toIndentedString(consistentRead)).append("\n");
    sb.append("    keyConditions: ").append(toIndentedString(keyConditions)).append("\n");
    sb.append("    queryFilter: ").append(toIndentedString(queryFilter)).append("\n");
    sb.append("    conditionalOperator: ").append(toIndentedString(conditionalOperator)).append("\n");
    sb.append("    scanIndexForward: ").append(toIndentedString(scanIndexForward)).append("\n");
    sb.append("    exclusiveStartKey: ").append(toIndentedString(exclusiveStartKey)).append("\n");
    sb.append("    returnConsumedCapacity: ").append(toIndentedString(returnConsumedCapacity)).append("\n");
    sb.append("    projectionExpression: ").append(toIndentedString(projectionExpression)).append("\n");
    sb.append("    filterExpression: ").append(toIndentedString(filterExpression)).append("\n");
    sb.append("    keyConditionExpression: ").append(toIndentedString(keyConditionExpression)).append("\n");
    sb.append("    expressionAttributeNames: ").append(toIndentedString(expressionAttributeNames)).append("\n");
    sb.append("    expressionAttributeValues: ").append(toIndentedString(expressionAttributeValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TableName");
    openapiFields.add("IndexName");
    openapiFields.add("Select");
    openapiFields.add("AttributesToGet");
    openapiFields.add("Limit");
    openapiFields.add("ConsistentRead");
    openapiFields.add("KeyConditions");
    openapiFields.add("QueryFilter");
    openapiFields.add("ConditionalOperator");
    openapiFields.add("ScanIndexForward");
    openapiFields.add("ExclusiveStartKey");
    openapiFields.add("ReturnConsumedCapacity");
    openapiFields.add("ProjectionExpression");
    openapiFields.add("FilterExpression");
    openapiFields.add("KeyConditionExpression");
    openapiFields.add("ExpressionAttributeNames");
    openapiFields.add("ExpressionAttributeValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TableName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryInput is not found in the empty JSON string", QueryInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TableName`
      String.validateJsonElement(jsonObj.get("TableName"));
      // validate the optional field `IndexName`
      if (jsonObj.get("IndexName") != null && !jsonObj.get("IndexName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IndexName"));
      }
      // validate the optional field `Select`
      if (jsonObj.get("Select") != null && !jsonObj.get("Select").isJsonNull()) {
        Select.validateJsonElement(jsonObj.get("Select"));
      }
      // validate the optional field `AttributesToGet`
      if (jsonObj.get("AttributesToGet") != null && !jsonObj.get("AttributesToGet").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttributesToGet"));
      }
      // validate the optional field `Limit`
      if (jsonObj.get("Limit") != null && !jsonObj.get("Limit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Limit"));
      }
      // validate the optional field `ConsistentRead`
      if (jsonObj.get("ConsistentRead") != null && !jsonObj.get("ConsistentRead").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ConsistentRead"));
      }
      // validate the optional field `KeyConditions`
      if (jsonObj.get("KeyConditions") != null && !jsonObj.get("KeyConditions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("KeyConditions"));
      }
      // validate the optional field `QueryFilter`
      if (jsonObj.get("QueryFilter") != null && !jsonObj.get("QueryFilter").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("QueryFilter"));
      }
      // validate the optional field `ConditionalOperator`
      if (jsonObj.get("ConditionalOperator") != null && !jsonObj.get("ConditionalOperator").isJsonNull()) {
        ConditionalOperator.validateJsonElement(jsonObj.get("ConditionalOperator"));
      }
      // validate the optional field `ScanIndexForward`
      if (jsonObj.get("ScanIndexForward") != null && !jsonObj.get("ScanIndexForward").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ScanIndexForward"));
      }
      // validate the optional field `ExclusiveStartKey`
      if (jsonObj.get("ExclusiveStartKey") != null && !jsonObj.get("ExclusiveStartKey").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ExclusiveStartKey"));
      }
      // validate the optional field `ReturnConsumedCapacity`
      if (jsonObj.get("ReturnConsumedCapacity") != null && !jsonObj.get("ReturnConsumedCapacity").isJsonNull()) {
        ReturnConsumedCapacity.validateJsonElement(jsonObj.get("ReturnConsumedCapacity"));
      }
      // validate the optional field `ProjectionExpression`
      if (jsonObj.get("ProjectionExpression") != null && !jsonObj.get("ProjectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProjectionExpression"));
      }
      // validate the optional field `FilterExpression`
      if (jsonObj.get("FilterExpression") != null && !jsonObj.get("FilterExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FilterExpression"));
      }
      // validate the optional field `KeyConditionExpression`
      if (jsonObj.get("KeyConditionExpression") != null && !jsonObj.get("KeyConditionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KeyConditionExpression"));
      }
      // validate the optional field `ExpressionAttributeNames`
      if (jsonObj.get("ExpressionAttributeNames") != null && !jsonObj.get("ExpressionAttributeNames").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ExpressionAttributeNames"));
      }
      // validate the optional field `ExpressionAttributeValues`
      if (jsonObj.get("ExpressionAttributeValues") != null && !jsonObj.get("ExpressionAttributeValues").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ExpressionAttributeValues"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryInput.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryInput>() {
           @Override
           public void write(JsonWriter out, QueryInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryInput
   * @throws IOException if the JSON string is invalid with respect to QueryInput
   */
  public static QueryInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryInput.class);
  }

  /**
   * Convert an instance of QueryInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

