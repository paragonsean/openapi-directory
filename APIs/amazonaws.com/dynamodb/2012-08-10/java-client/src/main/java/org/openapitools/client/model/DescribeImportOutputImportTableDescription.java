/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImportStatus;
import org.openapitools.client.model.ImportTableDescriptionInputFormatOptions;
import org.openapitools.client.model.ImportTableDescriptionS3BucketSource;
import org.openapitools.client.model.ImportTableDescriptionTableCreationParameters;
import org.openapitools.client.model.InputCompressionType;
import org.openapitools.client.model.InputFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeImportOutputImportTableDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeImportOutputImportTableDescription {
  public static final String SERIALIZED_NAME_IMPORT_ARN = "ImportArn";
  @SerializedName(SERIALIZED_NAME_IMPORT_ARN)
  private String importArn;

  public static final String SERIALIZED_NAME_IMPORT_STATUS = "ImportStatus";
  @SerializedName(SERIALIZED_NAME_IMPORT_STATUS)
  private ImportStatus importStatus;

  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  private String tableArn;

  public static final String SERIALIZED_NAME_TABLE_ID = "TableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  private String tableId;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_S3_BUCKET_SOURCE = "S3BucketSource";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_SOURCE)
  private ImportTableDescriptionS3BucketSource s3BucketSource;

  public static final String SERIALIZED_NAME_ERROR_COUNT = "ErrorCount";
  @SerializedName(SERIALIZED_NAME_ERROR_COUNT)
  private Integer errorCount;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN = "CloudWatchLogGroupArn";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN)
  private String cloudWatchLogGroupArn;

  public static final String SERIALIZED_NAME_INPUT_FORMAT = "InputFormat";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT)
  private InputFormat inputFormat;

  public static final String SERIALIZED_NAME_INPUT_FORMAT_OPTIONS = "InputFormatOptions";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT_OPTIONS)
  private ImportTableDescriptionInputFormatOptions inputFormatOptions;

  public static final String SERIALIZED_NAME_INPUT_COMPRESSION_TYPE = "InputCompressionType";
  @SerializedName(SERIALIZED_NAME_INPUT_COMPRESSION_TYPE)
  private InputCompressionType inputCompressionType;

  public static final String SERIALIZED_NAME_TABLE_CREATION_PARAMETERS = "TableCreationParameters";
  @SerializedName(SERIALIZED_NAME_TABLE_CREATION_PARAMETERS)
  private ImportTableDescriptionTableCreationParameters tableCreationParameters;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_PROCESSED_SIZE_BYTES = "ProcessedSizeBytes";
  @SerializedName(SERIALIZED_NAME_PROCESSED_SIZE_BYTES)
  private Integer processedSizeBytes;

  public static final String SERIALIZED_NAME_PROCESSED_ITEM_COUNT = "ProcessedItemCount";
  @SerializedName(SERIALIZED_NAME_PROCESSED_ITEM_COUNT)
  private Integer processedItemCount;

  public static final String SERIALIZED_NAME_IMPORTED_ITEM_COUNT = "ImportedItemCount";
  @SerializedName(SERIALIZED_NAME_IMPORTED_ITEM_COUNT)
  private Integer importedItemCount;

  public static final String SERIALIZED_NAME_FAILURE_CODE = "FailureCode";
  @SerializedName(SERIALIZED_NAME_FAILURE_CODE)
  private String failureCode;

  public static final String SERIALIZED_NAME_FAILURE_MESSAGE = "FailureMessage";
  @SerializedName(SERIALIZED_NAME_FAILURE_MESSAGE)
  private String failureMessage;

  public DescribeImportOutputImportTableDescription() {
  }

  public DescribeImportOutputImportTableDescription importArn(String importArn) {
    this.importArn = importArn;
    return this;
  }

  /**
   * Get importArn
   * @return importArn
   */
  @javax.annotation.Nullable
  public String getImportArn() {
    return importArn;
  }

  public void setImportArn(String importArn) {
    this.importArn = importArn;
  }


  public DescribeImportOutputImportTableDescription importStatus(ImportStatus importStatus) {
    this.importStatus = importStatus;
    return this;
  }

  /**
   * Get importStatus
   * @return importStatus
   */
  @javax.annotation.Nullable
  public ImportStatus getImportStatus() {
    return importStatus;
  }

  public void setImportStatus(ImportStatus importStatus) {
    this.importStatus = importStatus;
  }


  public DescribeImportOutputImportTableDescription tableArn(String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * Get tableArn
   * @return tableArn
   */
  @javax.annotation.Nullable
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(String tableArn) {
    this.tableArn = tableArn;
  }


  public DescribeImportOutputImportTableDescription tableId(String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   * Get tableId
   * @return tableId
   */
  @javax.annotation.Nullable
  public String getTableId() {
    return tableId;
  }

  public void setTableId(String tableId) {
    this.tableId = tableId;
  }


  public DescribeImportOutputImportTableDescription clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public DescribeImportOutputImportTableDescription s3BucketSource(ImportTableDescriptionS3BucketSource s3BucketSource) {
    this.s3BucketSource = s3BucketSource;
    return this;
  }

  /**
   * Get s3BucketSource
   * @return s3BucketSource
   */
  @javax.annotation.Nullable
  public ImportTableDescriptionS3BucketSource getS3BucketSource() {
    return s3BucketSource;
  }

  public void setS3BucketSource(ImportTableDescriptionS3BucketSource s3BucketSource) {
    this.s3BucketSource = s3BucketSource;
  }


  public DescribeImportOutputImportTableDescription errorCount(Integer errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   * Get errorCount
   * @return errorCount
   */
  @javax.annotation.Nullable
  public Integer getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(Integer errorCount) {
    this.errorCount = errorCount;
  }


  public DescribeImportOutputImportTableDescription cloudWatchLogGroupArn(String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
    return this;
  }

  /**
   * Get cloudWatchLogGroupArn
   * @return cloudWatchLogGroupArn
   */
  @javax.annotation.Nullable
  public String getCloudWatchLogGroupArn() {
    return cloudWatchLogGroupArn;
  }

  public void setCloudWatchLogGroupArn(String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
  }


  public DescribeImportOutputImportTableDescription inputFormat(InputFormat inputFormat) {
    this.inputFormat = inputFormat;
    return this;
  }

  /**
   * Get inputFormat
   * @return inputFormat
   */
  @javax.annotation.Nullable
  public InputFormat getInputFormat() {
    return inputFormat;
  }

  public void setInputFormat(InputFormat inputFormat) {
    this.inputFormat = inputFormat;
  }


  public DescribeImportOutputImportTableDescription inputFormatOptions(ImportTableDescriptionInputFormatOptions inputFormatOptions) {
    this.inputFormatOptions = inputFormatOptions;
    return this;
  }

  /**
   * Get inputFormatOptions
   * @return inputFormatOptions
   */
  @javax.annotation.Nullable
  public ImportTableDescriptionInputFormatOptions getInputFormatOptions() {
    return inputFormatOptions;
  }

  public void setInputFormatOptions(ImportTableDescriptionInputFormatOptions inputFormatOptions) {
    this.inputFormatOptions = inputFormatOptions;
  }


  public DescribeImportOutputImportTableDescription inputCompressionType(InputCompressionType inputCompressionType) {
    this.inputCompressionType = inputCompressionType;
    return this;
  }

  /**
   * Get inputCompressionType
   * @return inputCompressionType
   */
  @javax.annotation.Nullable
  public InputCompressionType getInputCompressionType() {
    return inputCompressionType;
  }

  public void setInputCompressionType(InputCompressionType inputCompressionType) {
    this.inputCompressionType = inputCompressionType;
  }


  public DescribeImportOutputImportTableDescription tableCreationParameters(ImportTableDescriptionTableCreationParameters tableCreationParameters) {
    this.tableCreationParameters = tableCreationParameters;
    return this;
  }

  /**
   * Get tableCreationParameters
   * @return tableCreationParameters
   */
  @javax.annotation.Nullable
  public ImportTableDescriptionTableCreationParameters getTableCreationParameters() {
    return tableCreationParameters;
  }

  public void setTableCreationParameters(ImportTableDescriptionTableCreationParameters tableCreationParameters) {
    this.tableCreationParameters = tableCreationParameters;
  }


  public DescribeImportOutputImportTableDescription startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public DescribeImportOutputImportTableDescription endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public DescribeImportOutputImportTableDescription processedSizeBytes(Integer processedSizeBytes) {
    this.processedSizeBytes = processedSizeBytes;
    return this;
  }

  /**
   * Get processedSizeBytes
   * @return processedSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getProcessedSizeBytes() {
    return processedSizeBytes;
  }

  public void setProcessedSizeBytes(Integer processedSizeBytes) {
    this.processedSizeBytes = processedSizeBytes;
  }


  public DescribeImportOutputImportTableDescription processedItemCount(Integer processedItemCount) {
    this.processedItemCount = processedItemCount;
    return this;
  }

  /**
   * Get processedItemCount
   * @return processedItemCount
   */
  @javax.annotation.Nullable
  public Integer getProcessedItemCount() {
    return processedItemCount;
  }

  public void setProcessedItemCount(Integer processedItemCount) {
    this.processedItemCount = processedItemCount;
  }


  public DescribeImportOutputImportTableDescription importedItemCount(Integer importedItemCount) {
    this.importedItemCount = importedItemCount;
    return this;
  }

  /**
   * Get importedItemCount
   * @return importedItemCount
   */
  @javax.annotation.Nullable
  public Integer getImportedItemCount() {
    return importedItemCount;
  }

  public void setImportedItemCount(Integer importedItemCount) {
    this.importedItemCount = importedItemCount;
  }


  public DescribeImportOutputImportTableDescription failureCode(String failureCode) {
    this.failureCode = failureCode;
    return this;
  }

  /**
   * Get failureCode
   * @return failureCode
   */
  @javax.annotation.Nullable
  public String getFailureCode() {
    return failureCode;
  }

  public void setFailureCode(String failureCode) {
    this.failureCode = failureCode;
  }


  public DescribeImportOutputImportTableDescription failureMessage(String failureMessage) {
    this.failureMessage = failureMessage;
    return this;
  }

  /**
   * Get failureMessage
   * @return failureMessage
   */
  @javax.annotation.Nullable
  public String getFailureMessage() {
    return failureMessage;
  }

  public void setFailureMessage(String failureMessage) {
    this.failureMessage = failureMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeImportOutputImportTableDescription describeImportOutputImportTableDescription = (DescribeImportOutputImportTableDescription) o;
    return Objects.equals(this.importArn, describeImportOutputImportTableDescription.importArn) &&
        Objects.equals(this.importStatus, describeImportOutputImportTableDescription.importStatus) &&
        Objects.equals(this.tableArn, describeImportOutputImportTableDescription.tableArn) &&
        Objects.equals(this.tableId, describeImportOutputImportTableDescription.tableId) &&
        Objects.equals(this.clientToken, describeImportOutputImportTableDescription.clientToken) &&
        Objects.equals(this.s3BucketSource, describeImportOutputImportTableDescription.s3BucketSource) &&
        Objects.equals(this.errorCount, describeImportOutputImportTableDescription.errorCount) &&
        Objects.equals(this.cloudWatchLogGroupArn, describeImportOutputImportTableDescription.cloudWatchLogGroupArn) &&
        Objects.equals(this.inputFormat, describeImportOutputImportTableDescription.inputFormat) &&
        Objects.equals(this.inputFormatOptions, describeImportOutputImportTableDescription.inputFormatOptions) &&
        Objects.equals(this.inputCompressionType, describeImportOutputImportTableDescription.inputCompressionType) &&
        Objects.equals(this.tableCreationParameters, describeImportOutputImportTableDescription.tableCreationParameters) &&
        Objects.equals(this.startTime, describeImportOutputImportTableDescription.startTime) &&
        Objects.equals(this.endTime, describeImportOutputImportTableDescription.endTime) &&
        Objects.equals(this.processedSizeBytes, describeImportOutputImportTableDescription.processedSizeBytes) &&
        Objects.equals(this.processedItemCount, describeImportOutputImportTableDescription.processedItemCount) &&
        Objects.equals(this.importedItemCount, describeImportOutputImportTableDescription.importedItemCount) &&
        Objects.equals(this.failureCode, describeImportOutputImportTableDescription.failureCode) &&
        Objects.equals(this.failureMessage, describeImportOutputImportTableDescription.failureMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importArn, importStatus, tableArn, tableId, clientToken, s3BucketSource, errorCount, cloudWatchLogGroupArn, inputFormat, inputFormatOptions, inputCompressionType, tableCreationParameters, startTime, endTime, processedSizeBytes, processedItemCount, importedItemCount, failureCode, failureMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeImportOutputImportTableDescription {\n");
    sb.append("    importArn: ").append(toIndentedString(importArn)).append("\n");
    sb.append("    importStatus: ").append(toIndentedString(importStatus)).append("\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    s3BucketSource: ").append(toIndentedString(s3BucketSource)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    cloudWatchLogGroupArn: ").append(toIndentedString(cloudWatchLogGroupArn)).append("\n");
    sb.append("    inputFormat: ").append(toIndentedString(inputFormat)).append("\n");
    sb.append("    inputFormatOptions: ").append(toIndentedString(inputFormatOptions)).append("\n");
    sb.append("    inputCompressionType: ").append(toIndentedString(inputCompressionType)).append("\n");
    sb.append("    tableCreationParameters: ").append(toIndentedString(tableCreationParameters)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    processedSizeBytes: ").append(toIndentedString(processedSizeBytes)).append("\n");
    sb.append("    processedItemCount: ").append(toIndentedString(processedItemCount)).append("\n");
    sb.append("    importedItemCount: ").append(toIndentedString(importedItemCount)).append("\n");
    sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ImportArn");
    openapiFields.add("ImportStatus");
    openapiFields.add("TableArn");
    openapiFields.add("TableId");
    openapiFields.add("ClientToken");
    openapiFields.add("S3BucketSource");
    openapiFields.add("ErrorCount");
    openapiFields.add("CloudWatchLogGroupArn");
    openapiFields.add("InputFormat");
    openapiFields.add("InputFormatOptions");
    openapiFields.add("InputCompressionType");
    openapiFields.add("TableCreationParameters");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("ProcessedSizeBytes");
    openapiFields.add("ProcessedItemCount");
    openapiFields.add("ImportedItemCount");
    openapiFields.add("FailureCode");
    openapiFields.add("FailureMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeImportOutputImportTableDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeImportOutputImportTableDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeImportOutputImportTableDescription is not found in the empty JSON string", DescribeImportOutputImportTableDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeImportOutputImportTableDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeImportOutputImportTableDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ImportArn`
      if (jsonObj.get("ImportArn") != null && !jsonObj.get("ImportArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImportArn"));
      }
      // validate the optional field `ImportStatus`
      if (jsonObj.get("ImportStatus") != null && !jsonObj.get("ImportStatus").isJsonNull()) {
        ImportStatus.validateJsonElement(jsonObj.get("ImportStatus"));
      }
      // validate the optional field `TableArn`
      if (jsonObj.get("TableArn") != null && !jsonObj.get("TableArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableArn"));
      }
      // validate the optional field `TableId`
      if (jsonObj.get("TableId") != null && !jsonObj.get("TableId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableId"));
      }
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
      // validate the optional field `S3BucketSource`
      if (jsonObj.get("S3BucketSource") != null && !jsonObj.get("S3BucketSource").isJsonNull()) {
        ImportTableDescriptionS3BucketSource.validateJsonElement(jsonObj.get("S3BucketSource"));
      }
      // validate the optional field `ErrorCount`
      if (jsonObj.get("ErrorCount") != null && !jsonObj.get("ErrorCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ErrorCount"));
      }
      // validate the optional field `CloudWatchLogGroupArn`
      if (jsonObj.get("CloudWatchLogGroupArn") != null && !jsonObj.get("CloudWatchLogGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CloudWatchLogGroupArn"));
      }
      // validate the optional field `InputFormat`
      if (jsonObj.get("InputFormat") != null && !jsonObj.get("InputFormat").isJsonNull()) {
        InputFormat.validateJsonElement(jsonObj.get("InputFormat"));
      }
      // validate the optional field `InputFormatOptions`
      if (jsonObj.get("InputFormatOptions") != null && !jsonObj.get("InputFormatOptions").isJsonNull()) {
        ImportTableDescriptionInputFormatOptions.validateJsonElement(jsonObj.get("InputFormatOptions"));
      }
      // validate the optional field `InputCompressionType`
      if (jsonObj.get("InputCompressionType") != null && !jsonObj.get("InputCompressionType").isJsonNull()) {
        InputCompressionType.validateJsonElement(jsonObj.get("InputCompressionType"));
      }
      // validate the optional field `TableCreationParameters`
      if (jsonObj.get("TableCreationParameters") != null && !jsonObj.get("TableCreationParameters").isJsonNull()) {
        ImportTableDescriptionTableCreationParameters.validateJsonElement(jsonObj.get("TableCreationParameters"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `ProcessedSizeBytes`
      if (jsonObj.get("ProcessedSizeBytes") != null && !jsonObj.get("ProcessedSizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProcessedSizeBytes"));
      }
      // validate the optional field `ProcessedItemCount`
      if (jsonObj.get("ProcessedItemCount") != null && !jsonObj.get("ProcessedItemCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProcessedItemCount"));
      }
      // validate the optional field `ImportedItemCount`
      if (jsonObj.get("ImportedItemCount") != null && !jsonObj.get("ImportedItemCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ImportedItemCount"));
      }
      // validate the optional field `FailureCode`
      if (jsonObj.get("FailureCode") != null && !jsonObj.get("FailureCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureCode"));
      }
      // validate the optional field `FailureMessage`
      if (jsonObj.get("FailureMessage") != null && !jsonObj.get("FailureMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeImportOutputImportTableDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeImportOutputImportTableDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeImportOutputImportTableDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeImportOutputImportTableDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeImportOutputImportTableDescription>() {
           @Override
           public void write(JsonWriter out, DescribeImportOutputImportTableDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeImportOutputImportTableDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeImportOutputImportTableDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeImportOutputImportTableDescription
   * @throws IOException if the JSON string is invalid with respect to DescribeImportOutputImportTableDescription
   */
  public static DescribeImportOutputImportTableDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeImportOutputImportTableDescription.class);
  }

  /**
   * Convert an instance of DescribeImportOutputImportTableDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

