/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReplicaDescriptionProvisionedThroughputOverride;
import org.openapitools.client.model.ReplicaStatus;
import org.openapitools.client.model.TableClassSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the replica.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicaDescription {
  public static final String SERIALIZED_NAME_REGION_NAME = "RegionName";
  @SerializedName(SERIALIZED_NAME_REGION_NAME)
  private String regionName;

  public static final String SERIALIZED_NAME_REPLICA_STATUS = "ReplicaStatus";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS)
  private ReplicaStatus replicaStatus;

  public static final String SERIALIZED_NAME_REPLICA_STATUS_DESCRIPTION = "ReplicaStatusDescription";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS_DESCRIPTION)
  private String replicaStatusDescription;

  public static final String SERIALIZED_NAME_REPLICA_STATUS_PERCENT_PROGRESS = "ReplicaStatusPercentProgress";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS_PERCENT_PROGRESS)
  private String replicaStatusPercentProgress;

  public static final String SERIALIZED_NAME_KM_S_MASTER_KEY_ID = "KMSMasterKeyId";
  @SerializedName(SERIALIZED_NAME_KM_S_MASTER_KEY_ID)
  private String kmSMasterKeyId;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT_OVERRIDE = "ProvisionedThroughputOverride";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT_OVERRIDE)
  private ReplicaDescriptionProvisionedThroughputOverride provisionedThroughputOverride;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES = "GlobalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES)
  private List globalSecondaryIndexes;

  public static final String SERIALIZED_NAME_REPLICA_INACCESSIBLE_DATE_TIME = "ReplicaInaccessibleDateTime";
  @SerializedName(SERIALIZED_NAME_REPLICA_INACCESSIBLE_DATE_TIME)
  private OffsetDateTime replicaInaccessibleDateTime;

  public static final String SERIALIZED_NAME_REPLICA_TABLE_CLASS_SUMMARY = "ReplicaTableClassSummary";
  @SerializedName(SERIALIZED_NAME_REPLICA_TABLE_CLASS_SUMMARY)
  private TableClassSummary replicaTableClassSummary;

  public ReplicaDescription() {
  }

  public ReplicaDescription regionName(String regionName) {
    this.regionName = regionName;
    return this;
  }

  /**
   * Get regionName
   * @return regionName
   */
  @javax.annotation.Nullable
  public String getRegionName() {
    return regionName;
  }

  public void setRegionName(String regionName) {
    this.regionName = regionName;
  }


  public ReplicaDescription replicaStatus(ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
    return this;
  }

  /**
   * Get replicaStatus
   * @return replicaStatus
   */
  @javax.annotation.Nullable
  public ReplicaStatus getReplicaStatus() {
    return replicaStatus;
  }

  public void setReplicaStatus(ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
  }


  public ReplicaDescription replicaStatusDescription(String replicaStatusDescription) {
    this.replicaStatusDescription = replicaStatusDescription;
    return this;
  }

  /**
   * Get replicaStatusDescription
   * @return replicaStatusDescription
   */
  @javax.annotation.Nullable
  public String getReplicaStatusDescription() {
    return replicaStatusDescription;
  }

  public void setReplicaStatusDescription(String replicaStatusDescription) {
    this.replicaStatusDescription = replicaStatusDescription;
  }


  public ReplicaDescription replicaStatusPercentProgress(String replicaStatusPercentProgress) {
    this.replicaStatusPercentProgress = replicaStatusPercentProgress;
    return this;
  }

  /**
   * Get replicaStatusPercentProgress
   * @return replicaStatusPercentProgress
   */
  @javax.annotation.Nullable
  public String getReplicaStatusPercentProgress() {
    return replicaStatusPercentProgress;
  }

  public void setReplicaStatusPercentProgress(String replicaStatusPercentProgress) {
    this.replicaStatusPercentProgress = replicaStatusPercentProgress;
  }


  public ReplicaDescription kmSMasterKeyId(String kmSMasterKeyId) {
    this.kmSMasterKeyId = kmSMasterKeyId;
    return this;
  }

  /**
   * Get kmSMasterKeyId
   * @return kmSMasterKeyId
   */
  @javax.annotation.Nullable
  public String getKmSMasterKeyId() {
    return kmSMasterKeyId;
  }

  public void setKmSMasterKeyId(String kmSMasterKeyId) {
    this.kmSMasterKeyId = kmSMasterKeyId;
  }


  public ReplicaDescription provisionedThroughputOverride(ReplicaDescriptionProvisionedThroughputOverride provisionedThroughputOverride) {
    this.provisionedThroughputOverride = provisionedThroughputOverride;
    return this;
  }

  /**
   * Get provisionedThroughputOverride
   * @return provisionedThroughputOverride
   */
  @javax.annotation.Nullable
  public ReplicaDescriptionProvisionedThroughputOverride getProvisionedThroughputOverride() {
    return provisionedThroughputOverride;
  }

  public void setProvisionedThroughputOverride(ReplicaDescriptionProvisionedThroughputOverride provisionedThroughputOverride) {
    this.provisionedThroughputOverride = provisionedThroughputOverride;
  }


  public ReplicaDescription globalSecondaryIndexes(List globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
    return this;
  }

  /**
   * Get globalSecondaryIndexes
   * @return globalSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List getGlobalSecondaryIndexes() {
    return globalSecondaryIndexes;
  }

  public void setGlobalSecondaryIndexes(List globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
  }


  public ReplicaDescription replicaInaccessibleDateTime(OffsetDateTime replicaInaccessibleDateTime) {
    this.replicaInaccessibleDateTime = replicaInaccessibleDateTime;
    return this;
  }

  /**
   * Get replicaInaccessibleDateTime
   * @return replicaInaccessibleDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReplicaInaccessibleDateTime() {
    return replicaInaccessibleDateTime;
  }

  public void setReplicaInaccessibleDateTime(OffsetDateTime replicaInaccessibleDateTime) {
    this.replicaInaccessibleDateTime = replicaInaccessibleDateTime;
  }


  public ReplicaDescription replicaTableClassSummary(TableClassSummary replicaTableClassSummary) {
    this.replicaTableClassSummary = replicaTableClassSummary;
    return this;
  }

  /**
   * Get replicaTableClassSummary
   * @return replicaTableClassSummary
   */
  @javax.annotation.Nullable
  public TableClassSummary getReplicaTableClassSummary() {
    return replicaTableClassSummary;
  }

  public void setReplicaTableClassSummary(TableClassSummary replicaTableClassSummary) {
    this.replicaTableClassSummary = replicaTableClassSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicaDescription replicaDescription = (ReplicaDescription) o;
    return Objects.equals(this.regionName, replicaDescription.regionName) &&
        Objects.equals(this.replicaStatus, replicaDescription.replicaStatus) &&
        Objects.equals(this.replicaStatusDescription, replicaDescription.replicaStatusDescription) &&
        Objects.equals(this.replicaStatusPercentProgress, replicaDescription.replicaStatusPercentProgress) &&
        Objects.equals(this.kmSMasterKeyId, replicaDescription.kmSMasterKeyId) &&
        Objects.equals(this.provisionedThroughputOverride, replicaDescription.provisionedThroughputOverride) &&
        Objects.equals(this.globalSecondaryIndexes, replicaDescription.globalSecondaryIndexes) &&
        Objects.equals(this.replicaInaccessibleDateTime, replicaDescription.replicaInaccessibleDateTime) &&
        Objects.equals(this.replicaTableClassSummary, replicaDescription.replicaTableClassSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regionName, replicaStatus, replicaStatusDescription, replicaStatusPercentProgress, kmSMasterKeyId, provisionedThroughputOverride, globalSecondaryIndexes, replicaInaccessibleDateTime, replicaTableClassSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicaDescription {\n");
    sb.append("    regionName: ").append(toIndentedString(regionName)).append("\n");
    sb.append("    replicaStatus: ").append(toIndentedString(replicaStatus)).append("\n");
    sb.append("    replicaStatusDescription: ").append(toIndentedString(replicaStatusDescription)).append("\n");
    sb.append("    replicaStatusPercentProgress: ").append(toIndentedString(replicaStatusPercentProgress)).append("\n");
    sb.append("    kmSMasterKeyId: ").append(toIndentedString(kmSMasterKeyId)).append("\n");
    sb.append("    provisionedThroughputOverride: ").append(toIndentedString(provisionedThroughputOverride)).append("\n");
    sb.append("    globalSecondaryIndexes: ").append(toIndentedString(globalSecondaryIndexes)).append("\n");
    sb.append("    replicaInaccessibleDateTime: ").append(toIndentedString(replicaInaccessibleDateTime)).append("\n");
    sb.append("    replicaTableClassSummary: ").append(toIndentedString(replicaTableClassSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RegionName");
    openapiFields.add("ReplicaStatus");
    openapiFields.add("ReplicaStatusDescription");
    openapiFields.add("ReplicaStatusPercentProgress");
    openapiFields.add("KMSMasterKeyId");
    openapiFields.add("ProvisionedThroughputOverride");
    openapiFields.add("GlobalSecondaryIndexes");
    openapiFields.add("ReplicaInaccessibleDateTime");
    openapiFields.add("ReplicaTableClassSummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicaDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicaDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicaDescription is not found in the empty JSON string", ReplicaDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicaDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicaDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RegionName`
      if (jsonObj.get("RegionName") != null && !jsonObj.get("RegionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RegionName"));
      }
      // validate the optional field `ReplicaStatus`
      if (jsonObj.get("ReplicaStatus") != null && !jsonObj.get("ReplicaStatus").isJsonNull()) {
        ReplicaStatus.validateJsonElement(jsonObj.get("ReplicaStatus"));
      }
      // validate the optional field `ReplicaStatusDescription`
      if (jsonObj.get("ReplicaStatusDescription") != null && !jsonObj.get("ReplicaStatusDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicaStatusDescription"));
      }
      // validate the optional field `ReplicaStatusPercentProgress`
      if (jsonObj.get("ReplicaStatusPercentProgress") != null && !jsonObj.get("ReplicaStatusPercentProgress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicaStatusPercentProgress"));
      }
      // validate the optional field `KMSMasterKeyId`
      if (jsonObj.get("KMSMasterKeyId") != null && !jsonObj.get("KMSMasterKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KMSMasterKeyId"));
      }
      // validate the optional field `ProvisionedThroughputOverride`
      if (jsonObj.get("ProvisionedThroughputOverride") != null && !jsonObj.get("ProvisionedThroughputOverride").isJsonNull()) {
        ReplicaDescriptionProvisionedThroughputOverride.validateJsonElement(jsonObj.get("ProvisionedThroughputOverride"));
      }
      // validate the optional field `GlobalSecondaryIndexes`
      if (jsonObj.get("GlobalSecondaryIndexes") != null && !jsonObj.get("GlobalSecondaryIndexes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GlobalSecondaryIndexes"));
      }
      // validate the optional field `ReplicaInaccessibleDateTime`
      if (jsonObj.get("ReplicaInaccessibleDateTime") != null && !jsonObj.get("ReplicaInaccessibleDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ReplicaInaccessibleDateTime"));
      }
      // validate the optional field `ReplicaTableClassSummary`
      if (jsonObj.get("ReplicaTableClassSummary") != null && !jsonObj.get("ReplicaTableClassSummary").isJsonNull()) {
        TableClassSummary.validateJsonElement(jsonObj.get("ReplicaTableClassSummary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicaDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicaDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicaDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicaDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicaDescription>() {
           @Override
           public void write(JsonWriter out, ReplicaDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicaDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicaDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicaDescription
   * @throws IOException if the JSON string is invalid with respect to ReplicaDescription
   */
  public static ReplicaDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicaDescription.class);
  }

  /**
   * Convert an instance of ReplicaDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

