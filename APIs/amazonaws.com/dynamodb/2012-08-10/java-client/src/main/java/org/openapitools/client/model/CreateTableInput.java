/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillingMode;
import org.openapitools.client.model.CreateTableInputProvisionedThroughput;
import org.openapitools.client.model.CreateTableInputSSESpecification;
import org.openapitools.client.model.CreateTableInputStreamSpecification;
import org.openapitools.client.model.TableClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of a &lt;code&gt;CreateTable&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTableInput {
  public static final String SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS = "AttributeDefinitions";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS)
  private List attributeDefinitions;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_KEY_SCHEMA = "KeySchema";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEMA)
  private List keySchema;

  public static final String SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES = "LocalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES)
  private List localSecondaryIndexes;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES = "GlobalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES)
  private List globalSecondaryIndexes;

  public static final String SERIALIZED_NAME_BILLING_MODE = "BillingMode";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE)
  private BillingMode billingMode;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT = "ProvisionedThroughput";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT)
  private CreateTableInputProvisionedThroughput provisionedThroughput;

  public static final String SERIALIZED_NAME_STREAM_SPECIFICATION = "StreamSpecification";
  @SerializedName(SERIALIZED_NAME_STREAM_SPECIFICATION)
  private CreateTableInputStreamSpecification streamSpecification;

  public static final String SERIALIZED_NAME_SS_E_SPECIFICATION = "SSESpecification";
  @SerializedName(SERIALIZED_NAME_SS_E_SPECIFICATION)
  private CreateTableInputSSESpecification ssESpecification;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_TABLE_CLASS = "TableClass";
  @SerializedName(SERIALIZED_NAME_TABLE_CLASS)
  private TableClass tableClass;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION_ENABLED = "DeletionProtectionEnabled";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION_ENABLED)
  private Boolean deletionProtectionEnabled;

  public CreateTableInput() {
  }

  public CreateTableInput attributeDefinitions(List attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
    return this;
  }

  /**
   * Get attributeDefinitions
   * @return attributeDefinitions
   */
  @javax.annotation.Nonnull
  public List getAttributeDefinitions() {
    return attributeDefinitions;
  }

  public void setAttributeDefinitions(List attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
  }


  public CreateTableInput tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public CreateTableInput keySchema(List keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  /**
   * Get keySchema
   * @return keySchema
   */
  @javax.annotation.Nonnull
  public List getKeySchema() {
    return keySchema;
  }

  public void setKeySchema(List keySchema) {
    this.keySchema = keySchema;
  }


  public CreateTableInput localSecondaryIndexes(List localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
    return this;
  }

  /**
   * Get localSecondaryIndexes
   * @return localSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List getLocalSecondaryIndexes() {
    return localSecondaryIndexes;
  }

  public void setLocalSecondaryIndexes(List localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
  }


  public CreateTableInput globalSecondaryIndexes(List globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
    return this;
  }

  /**
   * Get globalSecondaryIndexes
   * @return globalSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List getGlobalSecondaryIndexes() {
    return globalSecondaryIndexes;
  }

  public void setGlobalSecondaryIndexes(List globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
  }


  public CreateTableInput billingMode(BillingMode billingMode) {
    this.billingMode = billingMode;
    return this;
  }

  /**
   * Get billingMode
   * @return billingMode
   */
  @javax.annotation.Nullable
  public BillingMode getBillingMode() {
    return billingMode;
  }

  public void setBillingMode(BillingMode billingMode) {
    this.billingMode = billingMode;
  }


  public CreateTableInput provisionedThroughput(CreateTableInputProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
    return this;
  }

  /**
   * Get provisionedThroughput
   * @return provisionedThroughput
   */
  @javax.annotation.Nullable
  public CreateTableInputProvisionedThroughput getProvisionedThroughput() {
    return provisionedThroughput;
  }

  public void setProvisionedThroughput(CreateTableInputProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
  }


  public CreateTableInput streamSpecification(CreateTableInputStreamSpecification streamSpecification) {
    this.streamSpecification = streamSpecification;
    return this;
  }

  /**
   * Get streamSpecification
   * @return streamSpecification
   */
  @javax.annotation.Nullable
  public CreateTableInputStreamSpecification getStreamSpecification() {
    return streamSpecification;
  }

  public void setStreamSpecification(CreateTableInputStreamSpecification streamSpecification) {
    this.streamSpecification = streamSpecification;
  }


  public CreateTableInput ssESpecification(CreateTableInputSSESpecification ssESpecification) {
    this.ssESpecification = ssESpecification;
    return this;
  }

  /**
   * Get ssESpecification
   * @return ssESpecification
   */
  @javax.annotation.Nullable
  public CreateTableInputSSESpecification getSsESpecification() {
    return ssESpecification;
  }

  public void setSsESpecification(CreateTableInputSSESpecification ssESpecification) {
    this.ssESpecification = ssESpecification;
  }


  public CreateTableInput tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateTableInput tableClass(TableClass tableClass) {
    this.tableClass = tableClass;
    return this;
  }

  /**
   * Get tableClass
   * @return tableClass
   */
  @javax.annotation.Nullable
  public TableClass getTableClass() {
    return tableClass;
  }

  public void setTableClass(TableClass tableClass) {
    this.tableClass = tableClass;
  }


  public CreateTableInput deletionProtectionEnabled(Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
    return this;
  }

  /**
   * Get deletionProtectionEnabled
   * @return deletionProtectionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtectionEnabled() {
    return deletionProtectionEnabled;
  }

  public void setDeletionProtectionEnabled(Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTableInput createTableInput = (CreateTableInput) o;
    return Objects.equals(this.attributeDefinitions, createTableInput.attributeDefinitions) &&
        Objects.equals(this.tableName, createTableInput.tableName) &&
        Objects.equals(this.keySchema, createTableInput.keySchema) &&
        Objects.equals(this.localSecondaryIndexes, createTableInput.localSecondaryIndexes) &&
        Objects.equals(this.globalSecondaryIndexes, createTableInput.globalSecondaryIndexes) &&
        Objects.equals(this.billingMode, createTableInput.billingMode) &&
        Objects.equals(this.provisionedThroughput, createTableInput.provisionedThroughput) &&
        Objects.equals(this.streamSpecification, createTableInput.streamSpecification) &&
        Objects.equals(this.ssESpecification, createTableInput.ssESpecification) &&
        Objects.equals(this.tags, createTableInput.tags) &&
        Objects.equals(this.tableClass, createTableInput.tableClass) &&
        Objects.equals(this.deletionProtectionEnabled, createTableInput.deletionProtectionEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeDefinitions, tableName, keySchema, localSecondaryIndexes, globalSecondaryIndexes, billingMode, provisionedThroughput, streamSpecification, ssESpecification, tags, tableClass, deletionProtectionEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTableInput {\n");
    sb.append("    attributeDefinitions: ").append(toIndentedString(attributeDefinitions)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    keySchema: ").append(toIndentedString(keySchema)).append("\n");
    sb.append("    localSecondaryIndexes: ").append(toIndentedString(localSecondaryIndexes)).append("\n");
    sb.append("    globalSecondaryIndexes: ").append(toIndentedString(globalSecondaryIndexes)).append("\n");
    sb.append("    billingMode: ").append(toIndentedString(billingMode)).append("\n");
    sb.append("    provisionedThroughput: ").append(toIndentedString(provisionedThroughput)).append("\n");
    sb.append("    streamSpecification: ").append(toIndentedString(streamSpecification)).append("\n");
    sb.append("    ssESpecification: ").append(toIndentedString(ssESpecification)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tableClass: ").append(toIndentedString(tableClass)).append("\n");
    sb.append("    deletionProtectionEnabled: ").append(toIndentedString(deletionProtectionEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttributeDefinitions");
    openapiFields.add("TableName");
    openapiFields.add("KeySchema");
    openapiFields.add("LocalSecondaryIndexes");
    openapiFields.add("GlobalSecondaryIndexes");
    openapiFields.add("BillingMode");
    openapiFields.add("ProvisionedThroughput");
    openapiFields.add("StreamSpecification");
    openapiFields.add("SSESpecification");
    openapiFields.add("Tags");
    openapiFields.add("TableClass");
    openapiFields.add("DeletionProtectionEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AttributeDefinitions");
    openapiRequiredFields.add("TableName");
    openapiRequiredFields.add("KeySchema");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTableInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTableInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTableInput is not found in the empty JSON string", CreateTableInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTableInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTableInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTableInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AttributeDefinitions`
      List.validateJsonElement(jsonObj.get("AttributeDefinitions"));
      // validate the required field `TableName`
      String.validateJsonElement(jsonObj.get("TableName"));
      // validate the required field `KeySchema`
      List.validateJsonElement(jsonObj.get("KeySchema"));
      // validate the optional field `LocalSecondaryIndexes`
      if (jsonObj.get("LocalSecondaryIndexes") != null && !jsonObj.get("LocalSecondaryIndexes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LocalSecondaryIndexes"));
      }
      // validate the optional field `GlobalSecondaryIndexes`
      if (jsonObj.get("GlobalSecondaryIndexes") != null && !jsonObj.get("GlobalSecondaryIndexes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GlobalSecondaryIndexes"));
      }
      // validate the optional field `BillingMode`
      if (jsonObj.get("BillingMode") != null && !jsonObj.get("BillingMode").isJsonNull()) {
        BillingMode.validateJsonElement(jsonObj.get("BillingMode"));
      }
      // validate the optional field `ProvisionedThroughput`
      if (jsonObj.get("ProvisionedThroughput") != null && !jsonObj.get("ProvisionedThroughput").isJsonNull()) {
        CreateTableInputProvisionedThroughput.validateJsonElement(jsonObj.get("ProvisionedThroughput"));
      }
      // validate the optional field `StreamSpecification`
      if (jsonObj.get("StreamSpecification") != null && !jsonObj.get("StreamSpecification").isJsonNull()) {
        CreateTableInputStreamSpecification.validateJsonElement(jsonObj.get("StreamSpecification"));
      }
      // validate the optional field `SSESpecification`
      if (jsonObj.get("SSESpecification") != null && !jsonObj.get("SSESpecification").isJsonNull()) {
        CreateTableInputSSESpecification.validateJsonElement(jsonObj.get("SSESpecification"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `TableClass`
      if (jsonObj.get("TableClass") != null && !jsonObj.get("TableClass").isJsonNull()) {
        TableClass.validateJsonElement(jsonObj.get("TableClass"));
      }
      // validate the optional field `DeletionProtectionEnabled`
      if (jsonObj.get("DeletionProtectionEnabled") != null && !jsonObj.get("DeletionProtectionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeletionProtectionEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTableInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTableInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTableInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTableInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTableInput>() {
           @Override
           public void write(JsonWriter out, CreateTableInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTableInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTableInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTableInput
   * @throws IOException if the JSON string is invalid with respect to CreateTableInput
   */
  public static CreateTableInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTableInput.class);
  }

  /**
   * Convert an instance of CreateTableInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

