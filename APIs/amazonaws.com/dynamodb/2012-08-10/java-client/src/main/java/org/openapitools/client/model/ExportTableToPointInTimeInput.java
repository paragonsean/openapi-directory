/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExportFormat;
import org.openapitools.client.model.S3SseAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportTableToPointInTimeInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportTableToPointInTimeInput {
  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  private String tableArn;

  public static final String SERIALIZED_NAME_EXPORT_TIME = "ExportTime";
  @SerializedName(SERIALIZED_NAME_EXPORT_TIME)
  private OffsetDateTime exportTime;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_S3_BUCKET = "S3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  public static final String SERIALIZED_NAME_S3_BUCKET_OWNER = "S3BucketOwner";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_OWNER)
  private String s3BucketOwner;

  public static final String SERIALIZED_NAME_S3_PREFIX = "S3Prefix";
  @SerializedName(SERIALIZED_NAME_S3_PREFIX)
  private String s3Prefix;

  public static final String SERIALIZED_NAME_S3_SSE_ALGORITHM = "S3SseAlgorithm";
  @SerializedName(SERIALIZED_NAME_S3_SSE_ALGORITHM)
  private S3SseAlgorithm s3SseAlgorithm;

  public static final String SERIALIZED_NAME_S3_SSE_KMS_KEY_ID = "S3SseKmsKeyId";
  @SerializedName(SERIALIZED_NAME_S3_SSE_KMS_KEY_ID)
  private String s3SseKmsKeyId;

  public static final String SERIALIZED_NAME_EXPORT_FORMAT = "ExportFormat";
  @SerializedName(SERIALIZED_NAME_EXPORT_FORMAT)
  private ExportFormat exportFormat;

  public ExportTableToPointInTimeInput() {
  }

  public ExportTableToPointInTimeInput tableArn(String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * Get tableArn
   * @return tableArn
   */
  @javax.annotation.Nonnull
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(String tableArn) {
    this.tableArn = tableArn;
  }


  public ExportTableToPointInTimeInput exportTime(OffsetDateTime exportTime) {
    this.exportTime = exportTime;
    return this;
  }

  /**
   * Get exportTime
   * @return exportTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExportTime() {
    return exportTime;
  }

  public void setExportTime(OffsetDateTime exportTime) {
    this.exportTime = exportTime;
  }


  public ExportTableToPointInTimeInput clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public ExportTableToPointInTimeInput s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Get s3Bucket
   * @return s3Bucket
   */
  @javax.annotation.Nonnull
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public ExportTableToPointInTimeInput s3BucketOwner(String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
    return this;
  }

  /**
   * Get s3BucketOwner
   * @return s3BucketOwner
   */
  @javax.annotation.Nullable
  public String getS3BucketOwner() {
    return s3BucketOwner;
  }

  public void setS3BucketOwner(String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
  }


  public ExportTableToPointInTimeInput s3Prefix(String s3Prefix) {
    this.s3Prefix = s3Prefix;
    return this;
  }

  /**
   * Get s3Prefix
   * @return s3Prefix
   */
  @javax.annotation.Nullable
  public String getS3Prefix() {
    return s3Prefix;
  }

  public void setS3Prefix(String s3Prefix) {
    this.s3Prefix = s3Prefix;
  }


  public ExportTableToPointInTimeInput s3SseAlgorithm(S3SseAlgorithm s3SseAlgorithm) {
    this.s3SseAlgorithm = s3SseAlgorithm;
    return this;
  }

  /**
   * Get s3SseAlgorithm
   * @return s3SseAlgorithm
   */
  @javax.annotation.Nullable
  public S3SseAlgorithm getS3SseAlgorithm() {
    return s3SseAlgorithm;
  }

  public void setS3SseAlgorithm(S3SseAlgorithm s3SseAlgorithm) {
    this.s3SseAlgorithm = s3SseAlgorithm;
  }


  public ExportTableToPointInTimeInput s3SseKmsKeyId(String s3SseKmsKeyId) {
    this.s3SseKmsKeyId = s3SseKmsKeyId;
    return this;
  }

  /**
   * Get s3SseKmsKeyId
   * @return s3SseKmsKeyId
   */
  @javax.annotation.Nullable
  public String getS3SseKmsKeyId() {
    return s3SseKmsKeyId;
  }

  public void setS3SseKmsKeyId(String s3SseKmsKeyId) {
    this.s3SseKmsKeyId = s3SseKmsKeyId;
  }


  public ExportTableToPointInTimeInput exportFormat(ExportFormat exportFormat) {
    this.exportFormat = exportFormat;
    return this;
  }

  /**
   * Get exportFormat
   * @return exportFormat
   */
  @javax.annotation.Nullable
  public ExportFormat getExportFormat() {
    return exportFormat;
  }

  public void setExportFormat(ExportFormat exportFormat) {
    this.exportFormat = exportFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportTableToPointInTimeInput exportTableToPointInTimeInput = (ExportTableToPointInTimeInput) o;
    return Objects.equals(this.tableArn, exportTableToPointInTimeInput.tableArn) &&
        Objects.equals(this.exportTime, exportTableToPointInTimeInput.exportTime) &&
        Objects.equals(this.clientToken, exportTableToPointInTimeInput.clientToken) &&
        Objects.equals(this.s3Bucket, exportTableToPointInTimeInput.s3Bucket) &&
        Objects.equals(this.s3BucketOwner, exportTableToPointInTimeInput.s3BucketOwner) &&
        Objects.equals(this.s3Prefix, exportTableToPointInTimeInput.s3Prefix) &&
        Objects.equals(this.s3SseAlgorithm, exportTableToPointInTimeInput.s3SseAlgorithm) &&
        Objects.equals(this.s3SseKmsKeyId, exportTableToPointInTimeInput.s3SseKmsKeyId) &&
        Objects.equals(this.exportFormat, exportTableToPointInTimeInput.exportFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableArn, exportTime, clientToken, s3Bucket, s3BucketOwner, s3Prefix, s3SseAlgorithm, s3SseKmsKeyId, exportFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportTableToPointInTimeInput {\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    exportTime: ").append(toIndentedString(exportTime)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    s3BucketOwner: ").append(toIndentedString(s3BucketOwner)).append("\n");
    sb.append("    s3Prefix: ").append(toIndentedString(s3Prefix)).append("\n");
    sb.append("    s3SseAlgorithm: ").append(toIndentedString(s3SseAlgorithm)).append("\n");
    sb.append("    s3SseKmsKeyId: ").append(toIndentedString(s3SseKmsKeyId)).append("\n");
    sb.append("    exportFormat: ").append(toIndentedString(exportFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TableArn");
    openapiFields.add("ExportTime");
    openapiFields.add("ClientToken");
    openapiFields.add("S3Bucket");
    openapiFields.add("S3BucketOwner");
    openapiFields.add("S3Prefix");
    openapiFields.add("S3SseAlgorithm");
    openapiFields.add("S3SseKmsKeyId");
    openapiFields.add("ExportFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TableArn");
    openapiRequiredFields.add("S3Bucket");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportTableToPointInTimeInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportTableToPointInTimeInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportTableToPointInTimeInput is not found in the empty JSON string", ExportTableToPointInTimeInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportTableToPointInTimeInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportTableToPointInTimeInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportTableToPointInTimeInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TableArn`
      String.validateJsonElement(jsonObj.get("TableArn"));
      // validate the optional field `ExportTime`
      if (jsonObj.get("ExportTime") != null && !jsonObj.get("ExportTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ExportTime"));
      }
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
      // validate the required field `S3Bucket`
      String.validateJsonElement(jsonObj.get("S3Bucket"));
      // validate the optional field `S3BucketOwner`
      if (jsonObj.get("S3BucketOwner") != null && !jsonObj.get("S3BucketOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3BucketOwner"));
      }
      // validate the optional field `S3Prefix`
      if (jsonObj.get("S3Prefix") != null && !jsonObj.get("S3Prefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3Prefix"));
      }
      // validate the optional field `S3SseAlgorithm`
      if (jsonObj.get("S3SseAlgorithm") != null && !jsonObj.get("S3SseAlgorithm").isJsonNull()) {
        S3SseAlgorithm.validateJsonElement(jsonObj.get("S3SseAlgorithm"));
      }
      // validate the optional field `S3SseKmsKeyId`
      if (jsonObj.get("S3SseKmsKeyId") != null && !jsonObj.get("S3SseKmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3SseKmsKeyId"));
      }
      // validate the optional field `ExportFormat`
      if (jsonObj.get("ExportFormat") != null && !jsonObj.get("ExportFormat").isJsonNull()) {
        ExportFormat.validateJsonElement(jsonObj.get("ExportFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportTableToPointInTimeInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportTableToPointInTimeInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportTableToPointInTimeInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportTableToPointInTimeInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportTableToPointInTimeInput>() {
           @Override
           public void write(JsonWriter out, ExportTableToPointInTimeInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportTableToPointInTimeInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportTableToPointInTimeInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportTableToPointInTimeInput
   * @throws IOException if the JSON string is invalid with respect to ExportTableToPointInTimeInput
   */
  public static ExportTableToPointInTimeInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportTableToPointInTimeInput.class);
  }

  /**
   * Convert an instance of ExportTableToPointInTimeInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

