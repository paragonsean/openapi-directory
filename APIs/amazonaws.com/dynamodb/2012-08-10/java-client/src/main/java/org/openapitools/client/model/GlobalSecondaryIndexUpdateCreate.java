/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateGlobalSecondaryIndexActionProjection;
import org.openapitools.client.model.CreateGlobalSecondaryIndexActionProvisionedThroughput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GlobalSecondaryIndexUpdateCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GlobalSecondaryIndexUpdateCreate {
  public static final String SERIALIZED_NAME_INDEX_NAME = "IndexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  private String indexName;

  public static final String SERIALIZED_NAME_KEY_SCHEMA = "KeySchema";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEMA)
  private List keySchema;

  public static final String SERIALIZED_NAME_PROJECTION = "Projection";
  @SerializedName(SERIALIZED_NAME_PROJECTION)
  private CreateGlobalSecondaryIndexActionProjection projection;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT = "ProvisionedThroughput";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT)
  private CreateGlobalSecondaryIndexActionProvisionedThroughput provisionedThroughput;

  public GlobalSecondaryIndexUpdateCreate() {
  }

  public GlobalSecondaryIndexUpdateCreate indexName(String indexName) {
    this.indexName = indexName;
    return this;
  }

  /**
   * Get indexName
   * @return indexName
   */
  @javax.annotation.Nonnull
  public String getIndexName() {
    return indexName;
  }

  public void setIndexName(String indexName) {
    this.indexName = indexName;
  }


  public GlobalSecondaryIndexUpdateCreate keySchema(List keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  /**
   * Get keySchema
   * @return keySchema
   */
  @javax.annotation.Nonnull
  public List getKeySchema() {
    return keySchema;
  }

  public void setKeySchema(List keySchema) {
    this.keySchema = keySchema;
  }


  public GlobalSecondaryIndexUpdateCreate projection(CreateGlobalSecondaryIndexActionProjection projection) {
    this.projection = projection;
    return this;
  }

  /**
   * Get projection
   * @return projection
   */
  @javax.annotation.Nonnull
  public CreateGlobalSecondaryIndexActionProjection getProjection() {
    return projection;
  }

  public void setProjection(CreateGlobalSecondaryIndexActionProjection projection) {
    this.projection = projection;
  }


  public GlobalSecondaryIndexUpdateCreate provisionedThroughput(CreateGlobalSecondaryIndexActionProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
    return this;
  }

  /**
   * Get provisionedThroughput
   * @return provisionedThroughput
   */
  @javax.annotation.Nullable
  public CreateGlobalSecondaryIndexActionProvisionedThroughput getProvisionedThroughput() {
    return provisionedThroughput;
  }

  public void setProvisionedThroughput(CreateGlobalSecondaryIndexActionProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalSecondaryIndexUpdateCreate globalSecondaryIndexUpdateCreate = (GlobalSecondaryIndexUpdateCreate) o;
    return Objects.equals(this.indexName, globalSecondaryIndexUpdateCreate.indexName) &&
        Objects.equals(this.keySchema, globalSecondaryIndexUpdateCreate.keySchema) &&
        Objects.equals(this.projection, globalSecondaryIndexUpdateCreate.projection) &&
        Objects.equals(this.provisionedThroughput, globalSecondaryIndexUpdateCreate.provisionedThroughput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexName, keySchema, projection, provisionedThroughput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalSecondaryIndexUpdateCreate {\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    keySchema: ").append(toIndentedString(keySchema)).append("\n");
    sb.append("    projection: ").append(toIndentedString(projection)).append("\n");
    sb.append("    provisionedThroughput: ").append(toIndentedString(provisionedThroughput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IndexName");
    openapiFields.add("KeySchema");
    openapiFields.add("Projection");
    openapiFields.add("ProvisionedThroughput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IndexName");
    openapiRequiredFields.add("KeySchema");
    openapiRequiredFields.add("Projection");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GlobalSecondaryIndexUpdateCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalSecondaryIndexUpdateCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalSecondaryIndexUpdateCreate is not found in the empty JSON string", GlobalSecondaryIndexUpdateCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalSecondaryIndexUpdateCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalSecondaryIndexUpdateCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GlobalSecondaryIndexUpdateCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `IndexName`
      String.validateJsonElement(jsonObj.get("IndexName"));
      // validate the required field `KeySchema`
      List.validateJsonElement(jsonObj.get("KeySchema"));
      // validate the required field `Projection`
      CreateGlobalSecondaryIndexActionProjection.validateJsonElement(jsonObj.get("Projection"));
      // validate the optional field `ProvisionedThroughput`
      if (jsonObj.get("ProvisionedThroughput") != null && !jsonObj.get("ProvisionedThroughput").isJsonNull()) {
        CreateGlobalSecondaryIndexActionProvisionedThroughput.validateJsonElement(jsonObj.get("ProvisionedThroughput"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalSecondaryIndexUpdateCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalSecondaryIndexUpdateCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalSecondaryIndexUpdateCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalSecondaryIndexUpdateCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalSecondaryIndexUpdateCreate>() {
           @Override
           public void write(JsonWriter out, GlobalSecondaryIndexUpdateCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalSecondaryIndexUpdateCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GlobalSecondaryIndexUpdateCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GlobalSecondaryIndexUpdateCreate
   * @throws IOException if the JSON string is invalid with respect to GlobalSecondaryIndexUpdateCreate
   */
  public static GlobalSecondaryIndexUpdateCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalSecondaryIndexUpdateCreate.class);
  }

  /**
   * Convert an instance of GlobalSecondaryIndexUpdateCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

