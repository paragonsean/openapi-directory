/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ReturnValuesOnConditionCheckFailure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactWriteItemUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactWriteItemUpdate {
  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Map key;

  public static final String SERIALIZED_NAME_UPDATE_EXPRESSION = "UpdateExpression";
  @SerializedName(SERIALIZED_NAME_UPDATE_EXPRESSION)
  private String updateExpression;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_CONDITION_EXPRESSION = "ConditionExpression";
  @SerializedName(SERIALIZED_NAME_CONDITION_EXPRESSION)
  private String conditionExpression;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES = "ExpressionAttributeNames";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES)
  private Map expressionAttributeNames;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES = "ExpressionAttributeValues";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES)
  private Map expressionAttributeValues;

  public static final String SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE = "ReturnValuesOnConditionCheckFailure";
  @SerializedName(SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE)
  private ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure;

  public TransactWriteItemUpdate() {
  }

  public TransactWriteItemUpdate key(Map key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nonnull
  public Map getKey() {
    return key;
  }

  public void setKey(Map key) {
    this.key = key;
  }


  public TransactWriteItemUpdate updateExpression(String updateExpression) {
    this.updateExpression = updateExpression;
    return this;
  }

  /**
   * Get updateExpression
   * @return updateExpression
   */
  @javax.annotation.Nonnull
  public String getUpdateExpression() {
    return updateExpression;
  }

  public void setUpdateExpression(String updateExpression) {
    this.updateExpression = updateExpression;
  }


  public TransactWriteItemUpdate tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public TransactWriteItemUpdate conditionExpression(String conditionExpression) {
    this.conditionExpression = conditionExpression;
    return this;
  }

  /**
   * Get conditionExpression
   * @return conditionExpression
   */
  @javax.annotation.Nullable
  public String getConditionExpression() {
    return conditionExpression;
  }

  public void setConditionExpression(String conditionExpression) {
    this.conditionExpression = conditionExpression;
  }


  public TransactWriteItemUpdate expressionAttributeNames(Map expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
    return this;
  }

  /**
   * Get expressionAttributeNames
   * @return expressionAttributeNames
   */
  @javax.annotation.Nullable
  public Map getExpressionAttributeNames() {
    return expressionAttributeNames;
  }

  public void setExpressionAttributeNames(Map expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
  }


  public TransactWriteItemUpdate expressionAttributeValues(Map expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
    return this;
  }

  /**
   * Get expressionAttributeValues
   * @return expressionAttributeValues
   */
  @javax.annotation.Nullable
  public Map getExpressionAttributeValues() {
    return expressionAttributeValues;
  }

  public void setExpressionAttributeValues(Map expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
  }


  public TransactWriteItemUpdate returnValuesOnConditionCheckFailure(ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
    return this;
  }

  /**
   * Get returnValuesOnConditionCheckFailure
   * @return returnValuesOnConditionCheckFailure
   */
  @javax.annotation.Nullable
  public ReturnValuesOnConditionCheckFailure getReturnValuesOnConditionCheckFailure() {
    return returnValuesOnConditionCheckFailure;
  }

  public void setReturnValuesOnConditionCheckFailure(ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactWriteItemUpdate transactWriteItemUpdate = (TransactWriteItemUpdate) o;
    return Objects.equals(this.key, transactWriteItemUpdate.key) &&
        Objects.equals(this.updateExpression, transactWriteItemUpdate.updateExpression) &&
        Objects.equals(this.tableName, transactWriteItemUpdate.tableName) &&
        Objects.equals(this.conditionExpression, transactWriteItemUpdate.conditionExpression) &&
        Objects.equals(this.expressionAttributeNames, transactWriteItemUpdate.expressionAttributeNames) &&
        Objects.equals(this.expressionAttributeValues, transactWriteItemUpdate.expressionAttributeValues) &&
        Objects.equals(this.returnValuesOnConditionCheckFailure, transactWriteItemUpdate.returnValuesOnConditionCheckFailure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, updateExpression, tableName, conditionExpression, expressionAttributeNames, expressionAttributeValues, returnValuesOnConditionCheckFailure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactWriteItemUpdate {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    updateExpression: ").append(toIndentedString(updateExpression)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    conditionExpression: ").append(toIndentedString(conditionExpression)).append("\n");
    sb.append("    expressionAttributeNames: ").append(toIndentedString(expressionAttributeNames)).append("\n");
    sb.append("    expressionAttributeValues: ").append(toIndentedString(expressionAttributeValues)).append("\n");
    sb.append("    returnValuesOnConditionCheckFailure: ").append(toIndentedString(returnValuesOnConditionCheckFailure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Key");
    openapiFields.add("UpdateExpression");
    openapiFields.add("TableName");
    openapiFields.add("ConditionExpression");
    openapiFields.add("ExpressionAttributeNames");
    openapiFields.add("ExpressionAttributeValues");
    openapiFields.add("ReturnValuesOnConditionCheckFailure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Key");
    openapiRequiredFields.add("UpdateExpression");
    openapiRequiredFields.add("TableName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactWriteItemUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactWriteItemUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactWriteItemUpdate is not found in the empty JSON string", TransactWriteItemUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactWriteItemUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactWriteItemUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactWriteItemUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Key`
      Map.validateJsonElement(jsonObj.get("Key"));
      // validate the required field `UpdateExpression`
      String.validateJsonElement(jsonObj.get("UpdateExpression"));
      // validate the required field `TableName`
      String.validateJsonElement(jsonObj.get("TableName"));
      // validate the optional field `ConditionExpression`
      if (jsonObj.get("ConditionExpression") != null && !jsonObj.get("ConditionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConditionExpression"));
      }
      // validate the optional field `ExpressionAttributeNames`
      if (jsonObj.get("ExpressionAttributeNames") != null && !jsonObj.get("ExpressionAttributeNames").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ExpressionAttributeNames"));
      }
      // validate the optional field `ExpressionAttributeValues`
      if (jsonObj.get("ExpressionAttributeValues") != null && !jsonObj.get("ExpressionAttributeValues").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ExpressionAttributeValues"));
      }
      // validate the optional field `ReturnValuesOnConditionCheckFailure`
      if (jsonObj.get("ReturnValuesOnConditionCheckFailure") != null && !jsonObj.get("ReturnValuesOnConditionCheckFailure").isJsonNull()) {
        ReturnValuesOnConditionCheckFailure.validateJsonElement(jsonObj.get("ReturnValuesOnConditionCheckFailure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactWriteItemUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactWriteItemUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactWriteItemUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactWriteItemUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactWriteItemUpdate>() {
           @Override
           public void write(JsonWriter out, TransactWriteItemUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactWriteItemUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactWriteItemUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactWriteItemUpdate
   * @throws IOException if the JSON string is invalid with respect to TransactWriteItemUpdate
   */
  public static TransactWriteItemUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactWriteItemUpdate.class);
  }

  /**
   * Convert an instance of TransactWriteItemUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

