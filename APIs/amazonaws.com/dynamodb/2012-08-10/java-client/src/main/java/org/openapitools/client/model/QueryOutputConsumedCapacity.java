/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ConsumedCapacityTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryOutputConsumedCapacity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryOutputConsumedCapacity {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_CAPACITY_UNITS = "CapacityUnits";
  @SerializedName(SERIALIZED_NAME_CAPACITY_UNITS)
  private Double capacityUnits;

  public static final String SERIALIZED_NAME_READ_CAPACITY_UNITS = "ReadCapacityUnits";
  @SerializedName(SERIALIZED_NAME_READ_CAPACITY_UNITS)
  private Double readCapacityUnits;

  public static final String SERIALIZED_NAME_WRITE_CAPACITY_UNITS = "WriteCapacityUnits";
  @SerializedName(SERIALIZED_NAME_WRITE_CAPACITY_UNITS)
  private Double writeCapacityUnits;

  public static final String SERIALIZED_NAME_TABLE = "Table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private ConsumedCapacityTable table;

  public static final String SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES = "LocalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES)
  private Map localSecondaryIndexes;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES = "GlobalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES)
  private Map globalSecondaryIndexes;

  public QueryOutputConsumedCapacity() {
  }

  public QueryOutputConsumedCapacity tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public QueryOutputConsumedCapacity capacityUnits(Double capacityUnits) {
    this.capacityUnits = capacityUnits;
    return this;
  }

  /**
   * Get capacityUnits
   * @return capacityUnits
   */
  @javax.annotation.Nullable
  public Double getCapacityUnits() {
    return capacityUnits;
  }

  public void setCapacityUnits(Double capacityUnits) {
    this.capacityUnits = capacityUnits;
  }


  public QueryOutputConsumedCapacity readCapacityUnits(Double readCapacityUnits) {
    this.readCapacityUnits = readCapacityUnits;
    return this;
  }

  /**
   * Get readCapacityUnits
   * @return readCapacityUnits
   */
  @javax.annotation.Nullable
  public Double getReadCapacityUnits() {
    return readCapacityUnits;
  }

  public void setReadCapacityUnits(Double readCapacityUnits) {
    this.readCapacityUnits = readCapacityUnits;
  }


  public QueryOutputConsumedCapacity writeCapacityUnits(Double writeCapacityUnits) {
    this.writeCapacityUnits = writeCapacityUnits;
    return this;
  }

  /**
   * Get writeCapacityUnits
   * @return writeCapacityUnits
   */
  @javax.annotation.Nullable
  public Double getWriteCapacityUnits() {
    return writeCapacityUnits;
  }

  public void setWriteCapacityUnits(Double writeCapacityUnits) {
    this.writeCapacityUnits = writeCapacityUnits;
  }


  public QueryOutputConsumedCapacity table(ConsumedCapacityTable table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public ConsumedCapacityTable getTable() {
    return table;
  }

  public void setTable(ConsumedCapacityTable table) {
    this.table = table;
  }


  public QueryOutputConsumedCapacity localSecondaryIndexes(Map localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
    return this;
  }

  /**
   * Get localSecondaryIndexes
   * @return localSecondaryIndexes
   */
  @javax.annotation.Nullable
  public Map getLocalSecondaryIndexes() {
    return localSecondaryIndexes;
  }

  public void setLocalSecondaryIndexes(Map localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
  }


  public QueryOutputConsumedCapacity globalSecondaryIndexes(Map globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
    return this;
  }

  /**
   * Get globalSecondaryIndexes
   * @return globalSecondaryIndexes
   */
  @javax.annotation.Nullable
  public Map getGlobalSecondaryIndexes() {
    return globalSecondaryIndexes;
  }

  public void setGlobalSecondaryIndexes(Map globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryOutputConsumedCapacity queryOutputConsumedCapacity = (QueryOutputConsumedCapacity) o;
    return Objects.equals(this.tableName, queryOutputConsumedCapacity.tableName) &&
        Objects.equals(this.capacityUnits, queryOutputConsumedCapacity.capacityUnits) &&
        Objects.equals(this.readCapacityUnits, queryOutputConsumedCapacity.readCapacityUnits) &&
        Objects.equals(this.writeCapacityUnits, queryOutputConsumedCapacity.writeCapacityUnits) &&
        Objects.equals(this.table, queryOutputConsumedCapacity.table) &&
        Objects.equals(this.localSecondaryIndexes, queryOutputConsumedCapacity.localSecondaryIndexes) &&
        Objects.equals(this.globalSecondaryIndexes, queryOutputConsumedCapacity.globalSecondaryIndexes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, capacityUnits, readCapacityUnits, writeCapacityUnits, table, localSecondaryIndexes, globalSecondaryIndexes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryOutputConsumedCapacity {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    capacityUnits: ").append(toIndentedString(capacityUnits)).append("\n");
    sb.append("    readCapacityUnits: ").append(toIndentedString(readCapacityUnits)).append("\n");
    sb.append("    writeCapacityUnits: ").append(toIndentedString(writeCapacityUnits)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    localSecondaryIndexes: ").append(toIndentedString(localSecondaryIndexes)).append("\n");
    sb.append("    globalSecondaryIndexes: ").append(toIndentedString(globalSecondaryIndexes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TableName");
    openapiFields.add("CapacityUnits");
    openapiFields.add("ReadCapacityUnits");
    openapiFields.add("WriteCapacityUnits");
    openapiFields.add("Table");
    openapiFields.add("LocalSecondaryIndexes");
    openapiFields.add("GlobalSecondaryIndexes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryOutputConsumedCapacity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryOutputConsumedCapacity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryOutputConsumedCapacity is not found in the empty JSON string", QueryOutputConsumedCapacity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryOutputConsumedCapacity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryOutputConsumedCapacity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TableName`
      if (jsonObj.get("TableName") != null && !jsonObj.get("TableName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableName"));
      }
      // validate the optional field `CapacityUnits`
      if (jsonObj.get("CapacityUnits") != null && !jsonObj.get("CapacityUnits").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("CapacityUnits"));
      }
      // validate the optional field `ReadCapacityUnits`
      if (jsonObj.get("ReadCapacityUnits") != null && !jsonObj.get("ReadCapacityUnits").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ReadCapacityUnits"));
      }
      // validate the optional field `WriteCapacityUnits`
      if (jsonObj.get("WriteCapacityUnits") != null && !jsonObj.get("WriteCapacityUnits").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("WriteCapacityUnits"));
      }
      // validate the optional field `Table`
      if (jsonObj.get("Table") != null && !jsonObj.get("Table").isJsonNull()) {
        ConsumedCapacityTable.validateJsonElement(jsonObj.get("Table"));
      }
      // validate the optional field `LocalSecondaryIndexes`
      if (jsonObj.get("LocalSecondaryIndexes") != null && !jsonObj.get("LocalSecondaryIndexes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("LocalSecondaryIndexes"));
      }
      // validate the optional field `GlobalSecondaryIndexes`
      if (jsonObj.get("GlobalSecondaryIndexes") != null && !jsonObj.get("GlobalSecondaryIndexes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("GlobalSecondaryIndexes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryOutputConsumedCapacity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryOutputConsumedCapacity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryOutputConsumedCapacity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryOutputConsumedCapacity.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryOutputConsumedCapacity>() {
           @Override
           public void write(JsonWriter out, QueryOutputConsumedCapacity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryOutputConsumedCapacity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryOutputConsumedCapacity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryOutputConsumedCapacity
   * @throws IOException if the JSON string is invalid with respect to QueryOutputConsumedCapacity
   */
  public static QueryOutputConsumedCapacity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryOutputConsumedCapacity.class);
  }

  /**
   * Convert an instance of QueryOutputConsumedCapacity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

