/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BackupStatus;
import org.openapitools.client.model.BackupType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details for the backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupSummary {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_TABLE_ID = "TableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  private String tableId;

  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  private String tableArn;

  public static final String SERIALIZED_NAME_BACKUP_ARN = "BackupArn";
  @SerializedName(SERIALIZED_NAME_BACKUP_ARN)
  private String backupArn;

  public static final String SERIALIZED_NAME_BACKUP_NAME = "BackupName";
  @SerializedName(SERIALIZED_NAME_BACKUP_NAME)
  private String backupName;

  public static final String SERIALIZED_NAME_BACKUP_CREATION_DATE_TIME = "BackupCreationDateTime";
  @SerializedName(SERIALIZED_NAME_BACKUP_CREATION_DATE_TIME)
  private OffsetDateTime backupCreationDateTime;

  public static final String SERIALIZED_NAME_BACKUP_EXPIRY_DATE_TIME = "BackupExpiryDateTime";
  @SerializedName(SERIALIZED_NAME_BACKUP_EXPIRY_DATE_TIME)
  private OffsetDateTime backupExpiryDateTime;

  public static final String SERIALIZED_NAME_BACKUP_STATUS = "BackupStatus";
  @SerializedName(SERIALIZED_NAME_BACKUP_STATUS)
  private BackupStatus backupStatus;

  public static final String SERIALIZED_NAME_BACKUP_TYPE = "BackupType";
  @SerializedName(SERIALIZED_NAME_BACKUP_TYPE)
  private BackupType backupType;

  public static final String SERIALIZED_NAME_BACKUP_SIZE_BYTES = "BackupSizeBytes";
  @SerializedName(SERIALIZED_NAME_BACKUP_SIZE_BYTES)
  private Integer backupSizeBytes;

  public BackupSummary() {
  }

  public BackupSummary tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public BackupSummary tableId(String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   * Get tableId
   * @return tableId
   */
  @javax.annotation.Nullable
  public String getTableId() {
    return tableId;
  }

  public void setTableId(String tableId) {
    this.tableId = tableId;
  }


  public BackupSummary tableArn(String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * Get tableArn
   * @return tableArn
   */
  @javax.annotation.Nullable
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(String tableArn) {
    this.tableArn = tableArn;
  }


  public BackupSummary backupArn(String backupArn) {
    this.backupArn = backupArn;
    return this;
  }

  /**
   * Get backupArn
   * @return backupArn
   */
  @javax.annotation.Nullable
  public String getBackupArn() {
    return backupArn;
  }

  public void setBackupArn(String backupArn) {
    this.backupArn = backupArn;
  }


  public BackupSummary backupName(String backupName) {
    this.backupName = backupName;
    return this;
  }

  /**
   * Get backupName
   * @return backupName
   */
  @javax.annotation.Nullable
  public String getBackupName() {
    return backupName;
  }

  public void setBackupName(String backupName) {
    this.backupName = backupName;
  }


  public BackupSummary backupCreationDateTime(OffsetDateTime backupCreationDateTime) {
    this.backupCreationDateTime = backupCreationDateTime;
    return this;
  }

  /**
   * Get backupCreationDateTime
   * @return backupCreationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBackupCreationDateTime() {
    return backupCreationDateTime;
  }

  public void setBackupCreationDateTime(OffsetDateTime backupCreationDateTime) {
    this.backupCreationDateTime = backupCreationDateTime;
  }


  public BackupSummary backupExpiryDateTime(OffsetDateTime backupExpiryDateTime) {
    this.backupExpiryDateTime = backupExpiryDateTime;
    return this;
  }

  /**
   * Get backupExpiryDateTime
   * @return backupExpiryDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBackupExpiryDateTime() {
    return backupExpiryDateTime;
  }

  public void setBackupExpiryDateTime(OffsetDateTime backupExpiryDateTime) {
    this.backupExpiryDateTime = backupExpiryDateTime;
  }


  public BackupSummary backupStatus(BackupStatus backupStatus) {
    this.backupStatus = backupStatus;
    return this;
  }

  /**
   * Get backupStatus
   * @return backupStatus
   */
  @javax.annotation.Nullable
  public BackupStatus getBackupStatus() {
    return backupStatus;
  }

  public void setBackupStatus(BackupStatus backupStatus) {
    this.backupStatus = backupStatus;
  }


  public BackupSummary backupType(BackupType backupType) {
    this.backupType = backupType;
    return this;
  }

  /**
   * Get backupType
   * @return backupType
   */
  @javax.annotation.Nullable
  public BackupType getBackupType() {
    return backupType;
  }

  public void setBackupType(BackupType backupType) {
    this.backupType = backupType;
  }


  public BackupSummary backupSizeBytes(Integer backupSizeBytes) {
    this.backupSizeBytes = backupSizeBytes;
    return this;
  }

  /**
   * Get backupSizeBytes
   * @return backupSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getBackupSizeBytes() {
    return backupSizeBytes;
  }

  public void setBackupSizeBytes(Integer backupSizeBytes) {
    this.backupSizeBytes = backupSizeBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupSummary backupSummary = (BackupSummary) o;
    return Objects.equals(this.tableName, backupSummary.tableName) &&
        Objects.equals(this.tableId, backupSummary.tableId) &&
        Objects.equals(this.tableArn, backupSummary.tableArn) &&
        Objects.equals(this.backupArn, backupSummary.backupArn) &&
        Objects.equals(this.backupName, backupSummary.backupName) &&
        Objects.equals(this.backupCreationDateTime, backupSummary.backupCreationDateTime) &&
        Objects.equals(this.backupExpiryDateTime, backupSummary.backupExpiryDateTime) &&
        Objects.equals(this.backupStatus, backupSummary.backupStatus) &&
        Objects.equals(this.backupType, backupSummary.backupType) &&
        Objects.equals(this.backupSizeBytes, backupSummary.backupSizeBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, tableId, tableArn, backupArn, backupName, backupCreationDateTime, backupExpiryDateTime, backupStatus, backupType, backupSizeBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupSummary {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    backupArn: ").append(toIndentedString(backupArn)).append("\n");
    sb.append("    backupName: ").append(toIndentedString(backupName)).append("\n");
    sb.append("    backupCreationDateTime: ").append(toIndentedString(backupCreationDateTime)).append("\n");
    sb.append("    backupExpiryDateTime: ").append(toIndentedString(backupExpiryDateTime)).append("\n");
    sb.append("    backupStatus: ").append(toIndentedString(backupStatus)).append("\n");
    sb.append("    backupType: ").append(toIndentedString(backupType)).append("\n");
    sb.append("    backupSizeBytes: ").append(toIndentedString(backupSizeBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TableName");
    openapiFields.add("TableId");
    openapiFields.add("TableArn");
    openapiFields.add("BackupArn");
    openapiFields.add("BackupName");
    openapiFields.add("BackupCreationDateTime");
    openapiFields.add("BackupExpiryDateTime");
    openapiFields.add("BackupStatus");
    openapiFields.add("BackupType");
    openapiFields.add("BackupSizeBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupSummary is not found in the empty JSON string", BackupSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TableName`
      if (jsonObj.get("TableName") != null && !jsonObj.get("TableName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableName"));
      }
      // validate the optional field `TableId`
      if (jsonObj.get("TableId") != null && !jsonObj.get("TableId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableId"));
      }
      // validate the optional field `TableArn`
      if (jsonObj.get("TableArn") != null && !jsonObj.get("TableArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableArn"));
      }
      // validate the optional field `BackupArn`
      if (jsonObj.get("BackupArn") != null && !jsonObj.get("BackupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackupArn"));
      }
      // validate the optional field `BackupName`
      if (jsonObj.get("BackupName") != null && !jsonObj.get("BackupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackupName"));
      }
      // validate the optional field `BackupCreationDateTime`
      if (jsonObj.get("BackupCreationDateTime") != null && !jsonObj.get("BackupCreationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("BackupCreationDateTime"));
      }
      // validate the optional field `BackupExpiryDateTime`
      if (jsonObj.get("BackupExpiryDateTime") != null && !jsonObj.get("BackupExpiryDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("BackupExpiryDateTime"));
      }
      // validate the optional field `BackupStatus`
      if (jsonObj.get("BackupStatus") != null && !jsonObj.get("BackupStatus").isJsonNull()) {
        BackupStatus.validateJsonElement(jsonObj.get("BackupStatus"));
      }
      // validate the optional field `BackupType`
      if (jsonObj.get("BackupType") != null && !jsonObj.get("BackupType").isJsonNull()) {
        BackupType.validateJsonElement(jsonObj.get("BackupType"));
      }
      // validate the optional field `BackupSizeBytes`
      if (jsonObj.get("BackupSizeBytes") != null && !jsonObj.get("BackupSizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BackupSizeBytes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupSummary>() {
           @Override
           public void write(JsonWriter out, BackupSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupSummary
   * @throws IOException if the JSON string is invalid with respect to BackupSummary
   */
  public static BackupSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupSummary.class);
  }

  /**
   * Convert an instance of BackupSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

