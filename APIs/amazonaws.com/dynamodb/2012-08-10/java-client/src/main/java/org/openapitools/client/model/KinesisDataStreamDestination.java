/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a Kinesis data stream destination.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KinesisDataStreamDestination {
  public static final String SERIALIZED_NAME_STREAM_ARN = "StreamArn";
  @SerializedName(SERIALIZED_NAME_STREAM_ARN)
  private String streamArn;

  public static final String SERIALIZED_NAME_DESTINATION_STATUS = "DestinationStatus";
  @SerializedName(SERIALIZED_NAME_DESTINATION_STATUS)
  private DestinationStatus destinationStatus;

  public static final String SERIALIZED_NAME_DESTINATION_STATUS_DESCRIPTION = "DestinationStatusDescription";
  @SerializedName(SERIALIZED_NAME_DESTINATION_STATUS_DESCRIPTION)
  private String destinationStatusDescription;

  public KinesisDataStreamDestination() {
  }

  public KinesisDataStreamDestination streamArn(String streamArn) {
    this.streamArn = streamArn;
    return this;
  }

  /**
   * Get streamArn
   * @return streamArn
   */
  @javax.annotation.Nullable
  public String getStreamArn() {
    return streamArn;
  }

  public void setStreamArn(String streamArn) {
    this.streamArn = streamArn;
  }


  public KinesisDataStreamDestination destinationStatus(DestinationStatus destinationStatus) {
    this.destinationStatus = destinationStatus;
    return this;
  }

  /**
   * Get destinationStatus
   * @return destinationStatus
   */
  @javax.annotation.Nullable
  public DestinationStatus getDestinationStatus() {
    return destinationStatus;
  }

  public void setDestinationStatus(DestinationStatus destinationStatus) {
    this.destinationStatus = destinationStatus;
  }


  public KinesisDataStreamDestination destinationStatusDescription(String destinationStatusDescription) {
    this.destinationStatusDescription = destinationStatusDescription;
    return this;
  }

  /**
   * Get destinationStatusDescription
   * @return destinationStatusDescription
   */
  @javax.annotation.Nullable
  public String getDestinationStatusDescription() {
    return destinationStatusDescription;
  }

  public void setDestinationStatusDescription(String destinationStatusDescription) {
    this.destinationStatusDescription = destinationStatusDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KinesisDataStreamDestination kinesisDataStreamDestination = (KinesisDataStreamDestination) o;
    return Objects.equals(this.streamArn, kinesisDataStreamDestination.streamArn) &&
        Objects.equals(this.destinationStatus, kinesisDataStreamDestination.destinationStatus) &&
        Objects.equals(this.destinationStatusDescription, kinesisDataStreamDestination.destinationStatusDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamArn, destinationStatus, destinationStatusDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KinesisDataStreamDestination {\n");
    sb.append("    streamArn: ").append(toIndentedString(streamArn)).append("\n");
    sb.append("    destinationStatus: ").append(toIndentedString(destinationStatus)).append("\n");
    sb.append("    destinationStatusDescription: ").append(toIndentedString(destinationStatusDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StreamArn");
    openapiFields.add("DestinationStatus");
    openapiFields.add("DestinationStatusDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KinesisDataStreamDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KinesisDataStreamDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KinesisDataStreamDestination is not found in the empty JSON string", KinesisDataStreamDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KinesisDataStreamDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KinesisDataStreamDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StreamArn`
      if (jsonObj.get("StreamArn") != null && !jsonObj.get("StreamArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamArn"));
      }
      // validate the optional field `DestinationStatus`
      if (jsonObj.get("DestinationStatus") != null && !jsonObj.get("DestinationStatus").isJsonNull()) {
        DestinationStatus.validateJsonElement(jsonObj.get("DestinationStatus"));
      }
      // validate the optional field `DestinationStatusDescription`
      if (jsonObj.get("DestinationStatusDescription") != null && !jsonObj.get("DestinationStatusDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DestinationStatusDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KinesisDataStreamDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KinesisDataStreamDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KinesisDataStreamDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KinesisDataStreamDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<KinesisDataStreamDestination>() {
           @Override
           public void write(JsonWriter out, KinesisDataStreamDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KinesisDataStreamDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KinesisDataStreamDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KinesisDataStreamDestination
   * @throws IOException if the JSON string is invalid with respect to KinesisDataStreamDestination
   */
  public static KinesisDataStreamDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KinesisDataStreamDestination.class);
  }

  /**
   * Convert an instance of KinesisDataStreamDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

