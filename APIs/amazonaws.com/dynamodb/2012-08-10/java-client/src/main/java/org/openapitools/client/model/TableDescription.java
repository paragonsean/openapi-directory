/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TableDescriptionArchivalSummary;
import org.openapitools.client.model.TableDescriptionBillingModeSummary;
import org.openapitools.client.model.TableDescriptionProvisionedThroughput;
import org.openapitools.client.model.TableDescriptionRestoreSummary;
import org.openapitools.client.model.TableDescriptionSSEDescription;
import org.openapitools.client.model.TableDescriptionStreamSpecification;
import org.openapitools.client.model.TableDescriptionTableClassSummary;
import org.openapitools.client.model.TableStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of a table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableDescription {
  public static final String SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS = "AttributeDefinitions";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS)
  private List attributeDefinitions;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_KEY_SCHEMA = "KeySchema";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEMA)
  private List keySchema;

  public static final String SERIALIZED_NAME_TABLE_STATUS = "TableStatus";
  @SerializedName(SERIALIZED_NAME_TABLE_STATUS)
  private TableStatus tableStatus;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "CreationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT = "ProvisionedThroughput";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT)
  private TableDescriptionProvisionedThroughput provisionedThroughput;

  public static final String SERIALIZED_NAME_TABLE_SIZE_BYTES = "TableSizeBytes";
  @SerializedName(SERIALIZED_NAME_TABLE_SIZE_BYTES)
  private Integer tableSizeBytes;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "ItemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  private Integer itemCount;

  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  private String tableArn;

  public static final String SERIALIZED_NAME_TABLE_ID = "TableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  private String tableId;

  public static final String SERIALIZED_NAME_BILLING_MODE_SUMMARY = "BillingModeSummary";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE_SUMMARY)
  private TableDescriptionBillingModeSummary billingModeSummary;

  public static final String SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES = "LocalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES)
  private List localSecondaryIndexes;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES = "GlobalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES)
  private List globalSecondaryIndexes;

  public static final String SERIALIZED_NAME_STREAM_SPECIFICATION = "StreamSpecification";
  @SerializedName(SERIALIZED_NAME_STREAM_SPECIFICATION)
  private TableDescriptionStreamSpecification streamSpecification;

  public static final String SERIALIZED_NAME_LATEST_STREAM_LABEL = "LatestStreamLabel";
  @SerializedName(SERIALIZED_NAME_LATEST_STREAM_LABEL)
  private String latestStreamLabel;

  public static final String SERIALIZED_NAME_LATEST_STREAM_ARN = "LatestStreamArn";
  @SerializedName(SERIALIZED_NAME_LATEST_STREAM_ARN)
  private String latestStreamArn;

  public static final String SERIALIZED_NAME_GLOBAL_TABLE_VERSION = "GlobalTableVersion";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TABLE_VERSION)
  private String globalTableVersion;

  public static final String SERIALIZED_NAME_REPLICAS = "Replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private List replicas;

  public static final String SERIALIZED_NAME_RESTORE_SUMMARY = "RestoreSummary";
  @SerializedName(SERIALIZED_NAME_RESTORE_SUMMARY)
  private TableDescriptionRestoreSummary restoreSummary;

  public static final String SERIALIZED_NAME_SS_E_DESCRIPTION = "SSEDescription";
  @SerializedName(SERIALIZED_NAME_SS_E_DESCRIPTION)
  private TableDescriptionSSEDescription ssEDescription;

  public static final String SERIALIZED_NAME_ARCHIVAL_SUMMARY = "ArchivalSummary";
  @SerializedName(SERIALIZED_NAME_ARCHIVAL_SUMMARY)
  private TableDescriptionArchivalSummary archivalSummary;

  public static final String SERIALIZED_NAME_TABLE_CLASS_SUMMARY = "TableClassSummary";
  @SerializedName(SERIALIZED_NAME_TABLE_CLASS_SUMMARY)
  private TableDescriptionTableClassSummary tableClassSummary;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION_ENABLED = "DeletionProtectionEnabled";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION_ENABLED)
  private Boolean deletionProtectionEnabled;

  public TableDescription() {
  }

  public TableDescription attributeDefinitions(List attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
    return this;
  }

  /**
   * Get attributeDefinitions
   * @return attributeDefinitions
   */
  @javax.annotation.Nullable
  public List getAttributeDefinitions() {
    return attributeDefinitions;
  }

  public void setAttributeDefinitions(List attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
  }


  public TableDescription tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public TableDescription keySchema(List keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  /**
   * Get keySchema
   * @return keySchema
   */
  @javax.annotation.Nullable
  public List getKeySchema() {
    return keySchema;
  }

  public void setKeySchema(List keySchema) {
    this.keySchema = keySchema;
  }


  public TableDescription tableStatus(TableStatus tableStatus) {
    this.tableStatus = tableStatus;
    return this;
  }

  /**
   * Get tableStatus
   * @return tableStatus
   */
  @javax.annotation.Nullable
  public TableStatus getTableStatus() {
    return tableStatus;
  }

  public void setTableStatus(TableStatus tableStatus) {
    this.tableStatus = tableStatus;
  }


  public TableDescription creationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public TableDescription provisionedThroughput(TableDescriptionProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
    return this;
  }

  /**
   * Get provisionedThroughput
   * @return provisionedThroughput
   */
  @javax.annotation.Nullable
  public TableDescriptionProvisionedThroughput getProvisionedThroughput() {
    return provisionedThroughput;
  }

  public void setProvisionedThroughput(TableDescriptionProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
  }


  public TableDescription tableSizeBytes(Integer tableSizeBytes) {
    this.tableSizeBytes = tableSizeBytes;
    return this;
  }

  /**
   * Get tableSizeBytes
   * @return tableSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getTableSizeBytes() {
    return tableSizeBytes;
  }

  public void setTableSizeBytes(Integer tableSizeBytes) {
    this.tableSizeBytes = tableSizeBytes;
  }


  public TableDescription itemCount(Integer itemCount) {
    this.itemCount = itemCount;
    return this;
  }

  /**
   * Get itemCount
   * @return itemCount
   */
  @javax.annotation.Nullable
  public Integer getItemCount() {
    return itemCount;
  }

  public void setItemCount(Integer itemCount) {
    this.itemCount = itemCount;
  }


  public TableDescription tableArn(String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * Get tableArn
   * @return tableArn
   */
  @javax.annotation.Nullable
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(String tableArn) {
    this.tableArn = tableArn;
  }


  public TableDescription tableId(String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   * Get tableId
   * @return tableId
   */
  @javax.annotation.Nullable
  public String getTableId() {
    return tableId;
  }

  public void setTableId(String tableId) {
    this.tableId = tableId;
  }


  public TableDescription billingModeSummary(TableDescriptionBillingModeSummary billingModeSummary) {
    this.billingModeSummary = billingModeSummary;
    return this;
  }

  /**
   * Get billingModeSummary
   * @return billingModeSummary
   */
  @javax.annotation.Nullable
  public TableDescriptionBillingModeSummary getBillingModeSummary() {
    return billingModeSummary;
  }

  public void setBillingModeSummary(TableDescriptionBillingModeSummary billingModeSummary) {
    this.billingModeSummary = billingModeSummary;
  }


  public TableDescription localSecondaryIndexes(List localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
    return this;
  }

  /**
   * Get localSecondaryIndexes
   * @return localSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List getLocalSecondaryIndexes() {
    return localSecondaryIndexes;
  }

  public void setLocalSecondaryIndexes(List localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
  }


  public TableDescription globalSecondaryIndexes(List globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
    return this;
  }

  /**
   * Get globalSecondaryIndexes
   * @return globalSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List getGlobalSecondaryIndexes() {
    return globalSecondaryIndexes;
  }

  public void setGlobalSecondaryIndexes(List globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
  }


  public TableDescription streamSpecification(TableDescriptionStreamSpecification streamSpecification) {
    this.streamSpecification = streamSpecification;
    return this;
  }

  /**
   * Get streamSpecification
   * @return streamSpecification
   */
  @javax.annotation.Nullable
  public TableDescriptionStreamSpecification getStreamSpecification() {
    return streamSpecification;
  }

  public void setStreamSpecification(TableDescriptionStreamSpecification streamSpecification) {
    this.streamSpecification = streamSpecification;
  }


  public TableDescription latestStreamLabel(String latestStreamLabel) {
    this.latestStreamLabel = latestStreamLabel;
    return this;
  }

  /**
   * Get latestStreamLabel
   * @return latestStreamLabel
   */
  @javax.annotation.Nullable
  public String getLatestStreamLabel() {
    return latestStreamLabel;
  }

  public void setLatestStreamLabel(String latestStreamLabel) {
    this.latestStreamLabel = latestStreamLabel;
  }


  public TableDescription latestStreamArn(String latestStreamArn) {
    this.latestStreamArn = latestStreamArn;
    return this;
  }

  /**
   * Get latestStreamArn
   * @return latestStreamArn
   */
  @javax.annotation.Nullable
  public String getLatestStreamArn() {
    return latestStreamArn;
  }

  public void setLatestStreamArn(String latestStreamArn) {
    this.latestStreamArn = latestStreamArn;
  }


  public TableDescription globalTableVersion(String globalTableVersion) {
    this.globalTableVersion = globalTableVersion;
    return this;
  }

  /**
   * Get globalTableVersion
   * @return globalTableVersion
   */
  @javax.annotation.Nullable
  public String getGlobalTableVersion() {
    return globalTableVersion;
  }

  public void setGlobalTableVersion(String globalTableVersion) {
    this.globalTableVersion = globalTableVersion;
  }


  public TableDescription replicas(List replicas) {
    this.replicas = replicas;
    return this;
  }

  /**
   * Get replicas
   * @return replicas
   */
  @javax.annotation.Nullable
  public List getReplicas() {
    return replicas;
  }

  public void setReplicas(List replicas) {
    this.replicas = replicas;
  }


  public TableDescription restoreSummary(TableDescriptionRestoreSummary restoreSummary) {
    this.restoreSummary = restoreSummary;
    return this;
  }

  /**
   * Get restoreSummary
   * @return restoreSummary
   */
  @javax.annotation.Nullable
  public TableDescriptionRestoreSummary getRestoreSummary() {
    return restoreSummary;
  }

  public void setRestoreSummary(TableDescriptionRestoreSummary restoreSummary) {
    this.restoreSummary = restoreSummary;
  }


  public TableDescription ssEDescription(TableDescriptionSSEDescription ssEDescription) {
    this.ssEDescription = ssEDescription;
    return this;
  }

  /**
   * Get ssEDescription
   * @return ssEDescription
   */
  @javax.annotation.Nullable
  public TableDescriptionSSEDescription getSsEDescription() {
    return ssEDescription;
  }

  public void setSsEDescription(TableDescriptionSSEDescription ssEDescription) {
    this.ssEDescription = ssEDescription;
  }


  public TableDescription archivalSummary(TableDescriptionArchivalSummary archivalSummary) {
    this.archivalSummary = archivalSummary;
    return this;
  }

  /**
   * Get archivalSummary
   * @return archivalSummary
   */
  @javax.annotation.Nullable
  public TableDescriptionArchivalSummary getArchivalSummary() {
    return archivalSummary;
  }

  public void setArchivalSummary(TableDescriptionArchivalSummary archivalSummary) {
    this.archivalSummary = archivalSummary;
  }


  public TableDescription tableClassSummary(TableDescriptionTableClassSummary tableClassSummary) {
    this.tableClassSummary = tableClassSummary;
    return this;
  }

  /**
   * Get tableClassSummary
   * @return tableClassSummary
   */
  @javax.annotation.Nullable
  public TableDescriptionTableClassSummary getTableClassSummary() {
    return tableClassSummary;
  }

  public void setTableClassSummary(TableDescriptionTableClassSummary tableClassSummary) {
    this.tableClassSummary = tableClassSummary;
  }


  public TableDescription deletionProtectionEnabled(Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
    return this;
  }

  /**
   * Get deletionProtectionEnabled
   * @return deletionProtectionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtectionEnabled() {
    return deletionProtectionEnabled;
  }

  public void setDeletionProtectionEnabled(Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableDescription tableDescription = (TableDescription) o;
    return Objects.equals(this.attributeDefinitions, tableDescription.attributeDefinitions) &&
        Objects.equals(this.tableName, tableDescription.tableName) &&
        Objects.equals(this.keySchema, tableDescription.keySchema) &&
        Objects.equals(this.tableStatus, tableDescription.tableStatus) &&
        Objects.equals(this.creationDateTime, tableDescription.creationDateTime) &&
        Objects.equals(this.provisionedThroughput, tableDescription.provisionedThroughput) &&
        Objects.equals(this.tableSizeBytes, tableDescription.tableSizeBytes) &&
        Objects.equals(this.itemCount, tableDescription.itemCount) &&
        Objects.equals(this.tableArn, tableDescription.tableArn) &&
        Objects.equals(this.tableId, tableDescription.tableId) &&
        Objects.equals(this.billingModeSummary, tableDescription.billingModeSummary) &&
        Objects.equals(this.localSecondaryIndexes, tableDescription.localSecondaryIndexes) &&
        Objects.equals(this.globalSecondaryIndexes, tableDescription.globalSecondaryIndexes) &&
        Objects.equals(this.streamSpecification, tableDescription.streamSpecification) &&
        Objects.equals(this.latestStreamLabel, tableDescription.latestStreamLabel) &&
        Objects.equals(this.latestStreamArn, tableDescription.latestStreamArn) &&
        Objects.equals(this.globalTableVersion, tableDescription.globalTableVersion) &&
        Objects.equals(this.replicas, tableDescription.replicas) &&
        Objects.equals(this.restoreSummary, tableDescription.restoreSummary) &&
        Objects.equals(this.ssEDescription, tableDescription.ssEDescription) &&
        Objects.equals(this.archivalSummary, tableDescription.archivalSummary) &&
        Objects.equals(this.tableClassSummary, tableDescription.tableClassSummary) &&
        Objects.equals(this.deletionProtectionEnabled, tableDescription.deletionProtectionEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeDefinitions, tableName, keySchema, tableStatus, creationDateTime, provisionedThroughput, tableSizeBytes, itemCount, tableArn, tableId, billingModeSummary, localSecondaryIndexes, globalSecondaryIndexes, streamSpecification, latestStreamLabel, latestStreamArn, globalTableVersion, replicas, restoreSummary, ssEDescription, archivalSummary, tableClassSummary, deletionProtectionEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableDescription {\n");
    sb.append("    attributeDefinitions: ").append(toIndentedString(attributeDefinitions)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    keySchema: ").append(toIndentedString(keySchema)).append("\n");
    sb.append("    tableStatus: ").append(toIndentedString(tableStatus)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    provisionedThroughput: ").append(toIndentedString(provisionedThroughput)).append("\n");
    sb.append("    tableSizeBytes: ").append(toIndentedString(tableSizeBytes)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    billingModeSummary: ").append(toIndentedString(billingModeSummary)).append("\n");
    sb.append("    localSecondaryIndexes: ").append(toIndentedString(localSecondaryIndexes)).append("\n");
    sb.append("    globalSecondaryIndexes: ").append(toIndentedString(globalSecondaryIndexes)).append("\n");
    sb.append("    streamSpecification: ").append(toIndentedString(streamSpecification)).append("\n");
    sb.append("    latestStreamLabel: ").append(toIndentedString(latestStreamLabel)).append("\n");
    sb.append("    latestStreamArn: ").append(toIndentedString(latestStreamArn)).append("\n");
    sb.append("    globalTableVersion: ").append(toIndentedString(globalTableVersion)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    restoreSummary: ").append(toIndentedString(restoreSummary)).append("\n");
    sb.append("    ssEDescription: ").append(toIndentedString(ssEDescription)).append("\n");
    sb.append("    archivalSummary: ").append(toIndentedString(archivalSummary)).append("\n");
    sb.append("    tableClassSummary: ").append(toIndentedString(tableClassSummary)).append("\n");
    sb.append("    deletionProtectionEnabled: ").append(toIndentedString(deletionProtectionEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttributeDefinitions");
    openapiFields.add("TableName");
    openapiFields.add("KeySchema");
    openapiFields.add("TableStatus");
    openapiFields.add("CreationDateTime");
    openapiFields.add("ProvisionedThroughput");
    openapiFields.add("TableSizeBytes");
    openapiFields.add("ItemCount");
    openapiFields.add("TableArn");
    openapiFields.add("TableId");
    openapiFields.add("BillingModeSummary");
    openapiFields.add("LocalSecondaryIndexes");
    openapiFields.add("GlobalSecondaryIndexes");
    openapiFields.add("StreamSpecification");
    openapiFields.add("LatestStreamLabel");
    openapiFields.add("LatestStreamArn");
    openapiFields.add("GlobalTableVersion");
    openapiFields.add("Replicas");
    openapiFields.add("RestoreSummary");
    openapiFields.add("SSEDescription");
    openapiFields.add("ArchivalSummary");
    openapiFields.add("TableClassSummary");
    openapiFields.add("DeletionProtectionEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableDescription is not found in the empty JSON string", TableDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AttributeDefinitions`
      if (jsonObj.get("AttributeDefinitions") != null && !jsonObj.get("AttributeDefinitions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttributeDefinitions"));
      }
      // validate the optional field `TableName`
      if (jsonObj.get("TableName") != null && !jsonObj.get("TableName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableName"));
      }
      // validate the optional field `KeySchema`
      if (jsonObj.get("KeySchema") != null && !jsonObj.get("KeySchema").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("KeySchema"));
      }
      // validate the optional field `TableStatus`
      if (jsonObj.get("TableStatus") != null && !jsonObj.get("TableStatus").isJsonNull()) {
        TableStatus.validateJsonElement(jsonObj.get("TableStatus"));
      }
      // validate the optional field `CreationDateTime`
      if (jsonObj.get("CreationDateTime") != null && !jsonObj.get("CreationDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationDateTime"));
      }
      // validate the optional field `ProvisionedThroughput`
      if (jsonObj.get("ProvisionedThroughput") != null && !jsonObj.get("ProvisionedThroughput").isJsonNull()) {
        TableDescriptionProvisionedThroughput.validateJsonElement(jsonObj.get("ProvisionedThroughput"));
      }
      // validate the optional field `TableSizeBytes`
      if (jsonObj.get("TableSizeBytes") != null && !jsonObj.get("TableSizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TableSizeBytes"));
      }
      // validate the optional field `ItemCount`
      if (jsonObj.get("ItemCount") != null && !jsonObj.get("ItemCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ItemCount"));
      }
      // validate the optional field `TableArn`
      if (jsonObj.get("TableArn") != null && !jsonObj.get("TableArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableArn"));
      }
      // validate the optional field `TableId`
      if (jsonObj.get("TableId") != null && !jsonObj.get("TableId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableId"));
      }
      // validate the optional field `BillingModeSummary`
      if (jsonObj.get("BillingModeSummary") != null && !jsonObj.get("BillingModeSummary").isJsonNull()) {
        TableDescriptionBillingModeSummary.validateJsonElement(jsonObj.get("BillingModeSummary"));
      }
      // validate the optional field `LocalSecondaryIndexes`
      if (jsonObj.get("LocalSecondaryIndexes") != null && !jsonObj.get("LocalSecondaryIndexes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LocalSecondaryIndexes"));
      }
      // validate the optional field `GlobalSecondaryIndexes`
      if (jsonObj.get("GlobalSecondaryIndexes") != null && !jsonObj.get("GlobalSecondaryIndexes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GlobalSecondaryIndexes"));
      }
      // validate the optional field `StreamSpecification`
      if (jsonObj.get("StreamSpecification") != null && !jsonObj.get("StreamSpecification").isJsonNull()) {
        TableDescriptionStreamSpecification.validateJsonElement(jsonObj.get("StreamSpecification"));
      }
      // validate the optional field `LatestStreamLabel`
      if (jsonObj.get("LatestStreamLabel") != null && !jsonObj.get("LatestStreamLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LatestStreamLabel"));
      }
      // validate the optional field `LatestStreamArn`
      if (jsonObj.get("LatestStreamArn") != null && !jsonObj.get("LatestStreamArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LatestStreamArn"));
      }
      // validate the optional field `GlobalTableVersion`
      if (jsonObj.get("GlobalTableVersion") != null && !jsonObj.get("GlobalTableVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GlobalTableVersion"));
      }
      // validate the optional field `Replicas`
      if (jsonObj.get("Replicas") != null && !jsonObj.get("Replicas").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Replicas"));
      }
      // validate the optional field `RestoreSummary`
      if (jsonObj.get("RestoreSummary") != null && !jsonObj.get("RestoreSummary").isJsonNull()) {
        TableDescriptionRestoreSummary.validateJsonElement(jsonObj.get("RestoreSummary"));
      }
      // validate the optional field `SSEDescription`
      if (jsonObj.get("SSEDescription") != null && !jsonObj.get("SSEDescription").isJsonNull()) {
        TableDescriptionSSEDescription.validateJsonElement(jsonObj.get("SSEDescription"));
      }
      // validate the optional field `ArchivalSummary`
      if (jsonObj.get("ArchivalSummary") != null && !jsonObj.get("ArchivalSummary").isJsonNull()) {
        TableDescriptionArchivalSummary.validateJsonElement(jsonObj.get("ArchivalSummary"));
      }
      // validate the optional field `TableClassSummary`
      if (jsonObj.get("TableClassSummary") != null && !jsonObj.get("TableClassSummary").isJsonNull()) {
        TableDescriptionTableClassSummary.validateJsonElement(jsonObj.get("TableClassSummary"));
      }
      // validate the optional field `DeletionProtectionEnabled`
      if (jsonObj.get("DeletionProtectionEnabled") != null && !jsonObj.get("DeletionProtectionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeletionProtectionEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<TableDescription>() {
           @Override
           public void write(JsonWriter out, TableDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableDescription
   * @throws IOException if the JSON string is invalid with respect to TableDescription
   */
  public static TableDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableDescription.class);
  }

  /**
   * Convert an instance of TableDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

