/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SourceTableFeatureDetailsSSEDescription;
import org.openapitools.client.model.SourceTableFeatureDetailsStreamDescription;
import org.openapitools.client.model.SourceTableFeatureDetailsTimeToLiveDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceTableFeatureDetails {
  public static final String SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES = "LocalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES)
  private List localSecondaryIndexes;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES = "GlobalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES)
  private List globalSecondaryIndexes;

  public static final String SERIALIZED_NAME_STREAM_DESCRIPTION = "StreamDescription";
  @SerializedName(SERIALIZED_NAME_STREAM_DESCRIPTION)
  private SourceTableFeatureDetailsStreamDescription streamDescription;

  public static final String SERIALIZED_NAME_TIME_TO_LIVE_DESCRIPTION = "TimeToLiveDescription";
  @SerializedName(SERIALIZED_NAME_TIME_TO_LIVE_DESCRIPTION)
  private SourceTableFeatureDetailsTimeToLiveDescription timeToLiveDescription;

  public static final String SERIALIZED_NAME_SS_E_DESCRIPTION = "SSEDescription";
  @SerializedName(SERIALIZED_NAME_SS_E_DESCRIPTION)
  private SourceTableFeatureDetailsSSEDescription ssEDescription;

  public SourceTableFeatureDetails() {
  }

  public SourceTableFeatureDetails localSecondaryIndexes(List localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
    return this;
  }

  /**
   * Get localSecondaryIndexes
   * @return localSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List getLocalSecondaryIndexes() {
    return localSecondaryIndexes;
  }

  public void setLocalSecondaryIndexes(List localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
  }


  public SourceTableFeatureDetails globalSecondaryIndexes(List globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
    return this;
  }

  /**
   * Get globalSecondaryIndexes
   * @return globalSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List getGlobalSecondaryIndexes() {
    return globalSecondaryIndexes;
  }

  public void setGlobalSecondaryIndexes(List globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
  }


  public SourceTableFeatureDetails streamDescription(SourceTableFeatureDetailsStreamDescription streamDescription) {
    this.streamDescription = streamDescription;
    return this;
  }

  /**
   * Get streamDescription
   * @return streamDescription
   */
  @javax.annotation.Nullable
  public SourceTableFeatureDetailsStreamDescription getStreamDescription() {
    return streamDescription;
  }

  public void setStreamDescription(SourceTableFeatureDetailsStreamDescription streamDescription) {
    this.streamDescription = streamDescription;
  }


  public SourceTableFeatureDetails timeToLiveDescription(SourceTableFeatureDetailsTimeToLiveDescription timeToLiveDescription) {
    this.timeToLiveDescription = timeToLiveDescription;
    return this;
  }

  /**
   * Get timeToLiveDescription
   * @return timeToLiveDescription
   */
  @javax.annotation.Nullable
  public SourceTableFeatureDetailsTimeToLiveDescription getTimeToLiveDescription() {
    return timeToLiveDescription;
  }

  public void setTimeToLiveDescription(SourceTableFeatureDetailsTimeToLiveDescription timeToLiveDescription) {
    this.timeToLiveDescription = timeToLiveDescription;
  }


  public SourceTableFeatureDetails ssEDescription(SourceTableFeatureDetailsSSEDescription ssEDescription) {
    this.ssEDescription = ssEDescription;
    return this;
  }

  /**
   * Get ssEDescription
   * @return ssEDescription
   */
  @javax.annotation.Nullable
  public SourceTableFeatureDetailsSSEDescription getSsEDescription() {
    return ssEDescription;
  }

  public void setSsEDescription(SourceTableFeatureDetailsSSEDescription ssEDescription) {
    this.ssEDescription = ssEDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceTableFeatureDetails sourceTableFeatureDetails = (SourceTableFeatureDetails) o;
    return Objects.equals(this.localSecondaryIndexes, sourceTableFeatureDetails.localSecondaryIndexes) &&
        Objects.equals(this.globalSecondaryIndexes, sourceTableFeatureDetails.globalSecondaryIndexes) &&
        Objects.equals(this.streamDescription, sourceTableFeatureDetails.streamDescription) &&
        Objects.equals(this.timeToLiveDescription, sourceTableFeatureDetails.timeToLiveDescription) &&
        Objects.equals(this.ssEDescription, sourceTableFeatureDetails.ssEDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localSecondaryIndexes, globalSecondaryIndexes, streamDescription, timeToLiveDescription, ssEDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceTableFeatureDetails {\n");
    sb.append("    localSecondaryIndexes: ").append(toIndentedString(localSecondaryIndexes)).append("\n");
    sb.append("    globalSecondaryIndexes: ").append(toIndentedString(globalSecondaryIndexes)).append("\n");
    sb.append("    streamDescription: ").append(toIndentedString(streamDescription)).append("\n");
    sb.append("    timeToLiveDescription: ").append(toIndentedString(timeToLiveDescription)).append("\n");
    sb.append("    ssEDescription: ").append(toIndentedString(ssEDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LocalSecondaryIndexes");
    openapiFields.add("GlobalSecondaryIndexes");
    openapiFields.add("StreamDescription");
    openapiFields.add("TimeToLiveDescription");
    openapiFields.add("SSEDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceTableFeatureDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceTableFeatureDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceTableFeatureDetails is not found in the empty JSON string", SourceTableFeatureDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceTableFeatureDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceTableFeatureDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LocalSecondaryIndexes`
      if (jsonObj.get("LocalSecondaryIndexes") != null && !jsonObj.get("LocalSecondaryIndexes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LocalSecondaryIndexes"));
      }
      // validate the optional field `GlobalSecondaryIndexes`
      if (jsonObj.get("GlobalSecondaryIndexes") != null && !jsonObj.get("GlobalSecondaryIndexes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GlobalSecondaryIndexes"));
      }
      // validate the optional field `StreamDescription`
      if (jsonObj.get("StreamDescription") != null && !jsonObj.get("StreamDescription").isJsonNull()) {
        SourceTableFeatureDetailsStreamDescription.validateJsonElement(jsonObj.get("StreamDescription"));
      }
      // validate the optional field `TimeToLiveDescription`
      if (jsonObj.get("TimeToLiveDescription") != null && !jsonObj.get("TimeToLiveDescription").isJsonNull()) {
        SourceTableFeatureDetailsTimeToLiveDescription.validateJsonElement(jsonObj.get("TimeToLiveDescription"));
      }
      // validate the optional field `SSEDescription`
      if (jsonObj.get("SSEDescription") != null && !jsonObj.get("SSEDescription").isJsonNull()) {
        SourceTableFeatureDetailsSSEDescription.validateJsonElement(jsonObj.get("SSEDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceTableFeatureDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceTableFeatureDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceTableFeatureDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceTableFeatureDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceTableFeatureDetails>() {
           @Override
           public void write(JsonWriter out, SourceTableFeatureDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceTableFeatureDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceTableFeatureDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceTableFeatureDetails
   * @throws IOException if the JSON string is invalid with respect to SourceTableFeatureDetails
   */
  public static SourceTableFeatureDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceTableFeatureDetails.class);
  }

  /**
   * Convert an instance of SourceTableFeatureDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

