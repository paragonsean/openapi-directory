/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExportStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary information about an export task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:28.437037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportSummary {
  public static final String SERIALIZED_NAME_EXPORT_ARN = "ExportArn";
  @SerializedName(SERIALIZED_NAME_EXPORT_ARN)
  private String exportArn;

  public static final String SERIALIZED_NAME_EXPORT_STATUS = "ExportStatus";
  @SerializedName(SERIALIZED_NAME_EXPORT_STATUS)
  private ExportStatus exportStatus;

  public ExportSummary() {
  }

  public ExportSummary exportArn(String exportArn) {
    this.exportArn = exportArn;
    return this;
  }

  /**
   * Get exportArn
   * @return exportArn
   */
  @javax.annotation.Nullable
  public String getExportArn() {
    return exportArn;
  }

  public void setExportArn(String exportArn) {
    this.exportArn = exportArn;
  }


  public ExportSummary exportStatus(ExportStatus exportStatus) {
    this.exportStatus = exportStatus;
    return this;
  }

  /**
   * Get exportStatus
   * @return exportStatus
   */
  @javax.annotation.Nullable
  public ExportStatus getExportStatus() {
    return exportStatus;
  }

  public void setExportStatus(ExportStatus exportStatus) {
    this.exportStatus = exportStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportSummary exportSummary = (ExportSummary) o;
    return Objects.equals(this.exportArn, exportSummary.exportArn) &&
        Objects.equals(this.exportStatus, exportSummary.exportStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportArn, exportStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportSummary {\n");
    sb.append("    exportArn: ").append(toIndentedString(exportArn)).append("\n");
    sb.append("    exportStatus: ").append(toIndentedString(exportStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExportArn");
    openapiFields.add("ExportStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportSummary is not found in the empty JSON string", ExportSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ExportArn`
      if (jsonObj.get("ExportArn") != null && !jsonObj.get("ExportArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExportArn"));
      }
      // validate the optional field `ExportStatus`
      if (jsonObj.get("ExportStatus") != null && !jsonObj.get("ExportStatus").isJsonNull()) {
        ExportStatus.validateJsonElement(jsonObj.get("ExportStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportSummary>() {
           @Override
           public void write(JsonWriter out, ExportSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportSummary
   * @throws IOException if the JSON string is invalid with respect to ExportSummary
   */
  public static ExportSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportSummary.class);
  }

  /**
   * Convert an instance of ExportSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

