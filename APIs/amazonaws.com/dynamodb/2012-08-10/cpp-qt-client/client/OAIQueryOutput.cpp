/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryOutput::OAIQueryOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryOutput::OAIQueryOutput() {
    this->initializeModel();
}

OAIQueryOutput::~OAIQueryOutput() {}

void OAIQueryOutput::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_scanned_count_isSet = false;
    m_scanned_count_isValid = false;

    m_last_evaluated_key_isSet = false;
    m_last_evaluated_key_isValid = false;

    m_consumed_capacity_isSet = false;
    m_consumed_capacity_isValid = false;
}

void OAIQueryOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryOutput::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_scanned_count_isValid = ::OpenAPI::fromJsonValue(m_scanned_count, json[QString("ScannedCount")]);
    m_scanned_count_isSet = !json[QString("ScannedCount")].isNull() && m_scanned_count_isValid;

    m_last_evaluated_key_isValid = ::OpenAPI::fromJsonValue(m_last_evaluated_key, json[QString("LastEvaluatedKey")]);
    m_last_evaluated_key_isSet = !json[QString("LastEvaluatedKey")].isNull() && m_last_evaluated_key_isValid;

    m_consumed_capacity_isValid = ::OpenAPI::fromJsonValue(m_consumed_capacity, json[QString("ConsumedCapacity")]);
    m_consumed_capacity_isSet = !json[QString("ConsumedCapacity")].isNull() && m_consumed_capacity_isValid;
}

QString OAIQueryOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_items.isSet()) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_scanned_count_isSet) {
        obj.insert(QString("ScannedCount"), ::OpenAPI::toJsonValue(m_scanned_count));
    }
    if (m_last_evaluated_key.isSet()) {
        obj.insert(QString("LastEvaluatedKey"), ::OpenAPI::toJsonValue(m_last_evaluated_key));
    }
    if (m_consumed_capacity.isSet()) {
        obj.insert(QString("ConsumedCapacity"), ::OpenAPI::toJsonValue(m_consumed_capacity));
    }
    return obj;
}

QList OAIQueryOutput::getItems() const {
    return m_items;
}
void OAIQueryOutput::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIQueryOutput::is_items_Set() const{
    return m_items_isSet;
}

bool OAIQueryOutput::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIQueryOutput::getCount() const {
    return m_count;
}
void OAIQueryOutput::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIQueryOutput::is_count_Set() const{
    return m_count_isSet;
}

bool OAIQueryOutput::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIQueryOutput::getScannedCount() const {
    return m_scanned_count;
}
void OAIQueryOutput::setScannedCount(const qint32 &scanned_count) {
    m_scanned_count = scanned_count;
    m_scanned_count_isSet = true;
}

bool OAIQueryOutput::is_scanned_count_Set() const{
    return m_scanned_count_isSet;
}

bool OAIQueryOutput::is_scanned_count_Valid() const{
    return m_scanned_count_isValid;
}

QMap OAIQueryOutput::getLastEvaluatedKey() const {
    return m_last_evaluated_key;
}
void OAIQueryOutput::setLastEvaluatedKey(const QMap &last_evaluated_key) {
    m_last_evaluated_key = last_evaluated_key;
    m_last_evaluated_key_isSet = true;
}

bool OAIQueryOutput::is_last_evaluated_key_Set() const{
    return m_last_evaluated_key_isSet;
}

bool OAIQueryOutput::is_last_evaluated_key_Valid() const{
    return m_last_evaluated_key_isValid;
}

OAIQueryOutput_ConsumedCapacity OAIQueryOutput::getConsumedCapacity() const {
    return m_consumed_capacity;
}
void OAIQueryOutput::setConsumedCapacity(const OAIQueryOutput_ConsumedCapacity &consumed_capacity) {
    m_consumed_capacity = consumed_capacity;
    m_consumed_capacity_isSet = true;
}

bool OAIQueryOutput::is_consumed_capacity_Set() const{
    return m_consumed_capacity_isSet;
}

bool OAIQueryOutput::is_consumed_capacity_Valid() const{
    return m_consumed_capacity_isValid;
}

bool OAIQueryOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scanned_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_evaluated_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
