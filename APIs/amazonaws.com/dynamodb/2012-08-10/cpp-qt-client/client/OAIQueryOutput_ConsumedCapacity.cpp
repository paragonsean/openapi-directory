/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryOutput_ConsumedCapacity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryOutput_ConsumedCapacity::OAIQueryOutput_ConsumedCapacity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryOutput_ConsumedCapacity::OAIQueryOutput_ConsumedCapacity() {
    this->initializeModel();
}

OAIQueryOutput_ConsumedCapacity::~OAIQueryOutput_ConsumedCapacity() {}

void OAIQueryOutput_ConsumedCapacity::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_capacity_units_isSet = false;
    m_capacity_units_isValid = false;

    m_read_capacity_units_isSet = false;
    m_read_capacity_units_isValid = false;

    m_write_capacity_units_isSet = false;
    m_write_capacity_units_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_local_secondary_indexes_isSet = false;
    m_local_secondary_indexes_isValid = false;

    m_global_secondary_indexes_isSet = false;
    m_global_secondary_indexes_isValid = false;
}

void OAIQueryOutput_ConsumedCapacity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryOutput_ConsumedCapacity::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_capacity_units, json[QString("CapacityUnits")]);
    m_capacity_units_isSet = !json[QString("CapacityUnits")].isNull() && m_capacity_units_isValid;

    m_read_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_read_capacity_units, json[QString("ReadCapacityUnits")]);
    m_read_capacity_units_isSet = !json[QString("ReadCapacityUnits")].isNull() && m_read_capacity_units_isValid;

    m_write_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_write_capacity_units, json[QString("WriteCapacityUnits")]);
    m_write_capacity_units_isSet = !json[QString("WriteCapacityUnits")].isNull() && m_write_capacity_units_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("Table")]);
    m_table_isSet = !json[QString("Table")].isNull() && m_table_isValid;

    m_local_secondary_indexes_isValid = ::OpenAPI::fromJsonValue(m_local_secondary_indexes, json[QString("LocalSecondaryIndexes")]);
    m_local_secondary_indexes_isSet = !json[QString("LocalSecondaryIndexes")].isNull() && m_local_secondary_indexes_isValid;

    m_global_secondary_indexes_isValid = ::OpenAPI::fromJsonValue(m_global_secondary_indexes, json[QString("GlobalSecondaryIndexes")]);
    m_global_secondary_indexes_isSet = !json[QString("GlobalSecondaryIndexes")].isNull() && m_global_secondary_indexes_isValid;
}

QString OAIQueryOutput_ConsumedCapacity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryOutput_ConsumedCapacity::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_capacity_units_isSet) {
        obj.insert(QString("CapacityUnits"), ::OpenAPI::toJsonValue(m_capacity_units));
    }
    if (m_read_capacity_units_isSet) {
        obj.insert(QString("ReadCapacityUnits"), ::OpenAPI::toJsonValue(m_read_capacity_units));
    }
    if (m_write_capacity_units_isSet) {
        obj.insert(QString("WriteCapacityUnits"), ::OpenAPI::toJsonValue(m_write_capacity_units));
    }
    if (m_table.isSet()) {
        obj.insert(QString("Table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_local_secondary_indexes.isSet()) {
        obj.insert(QString("LocalSecondaryIndexes"), ::OpenAPI::toJsonValue(m_local_secondary_indexes));
    }
    if (m_global_secondary_indexes.isSet()) {
        obj.insert(QString("GlobalSecondaryIndexes"), ::OpenAPI::toJsonValue(m_global_secondary_indexes));
    }
    return obj;
}

QString OAIQueryOutput_ConsumedCapacity::getTableName() const {
    return m_table_name;
}
void OAIQueryOutput_ConsumedCapacity::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIQueryOutput_ConsumedCapacity::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIQueryOutput_ConsumedCapacity::is_table_name_Valid() const{
    return m_table_name_isValid;
}

double OAIQueryOutput_ConsumedCapacity::getCapacityUnits() const {
    return m_capacity_units;
}
void OAIQueryOutput_ConsumedCapacity::setCapacityUnits(const double &capacity_units) {
    m_capacity_units = capacity_units;
    m_capacity_units_isSet = true;
}

bool OAIQueryOutput_ConsumedCapacity::is_capacity_units_Set() const{
    return m_capacity_units_isSet;
}

bool OAIQueryOutput_ConsumedCapacity::is_capacity_units_Valid() const{
    return m_capacity_units_isValid;
}

double OAIQueryOutput_ConsumedCapacity::getReadCapacityUnits() const {
    return m_read_capacity_units;
}
void OAIQueryOutput_ConsumedCapacity::setReadCapacityUnits(const double &read_capacity_units) {
    m_read_capacity_units = read_capacity_units;
    m_read_capacity_units_isSet = true;
}

bool OAIQueryOutput_ConsumedCapacity::is_read_capacity_units_Set() const{
    return m_read_capacity_units_isSet;
}

bool OAIQueryOutput_ConsumedCapacity::is_read_capacity_units_Valid() const{
    return m_read_capacity_units_isValid;
}

double OAIQueryOutput_ConsumedCapacity::getWriteCapacityUnits() const {
    return m_write_capacity_units;
}
void OAIQueryOutput_ConsumedCapacity::setWriteCapacityUnits(const double &write_capacity_units) {
    m_write_capacity_units = write_capacity_units;
    m_write_capacity_units_isSet = true;
}

bool OAIQueryOutput_ConsumedCapacity::is_write_capacity_units_Set() const{
    return m_write_capacity_units_isSet;
}

bool OAIQueryOutput_ConsumedCapacity::is_write_capacity_units_Valid() const{
    return m_write_capacity_units_isValid;
}

OAIConsumedCapacity_Table OAIQueryOutput_ConsumedCapacity::getTable() const {
    return m_table;
}
void OAIQueryOutput_ConsumedCapacity::setTable(const OAIConsumedCapacity_Table &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIQueryOutput_ConsumedCapacity::is_table_Set() const{
    return m_table_isSet;
}

bool OAIQueryOutput_ConsumedCapacity::is_table_Valid() const{
    return m_table_isValid;
}

QMap OAIQueryOutput_ConsumedCapacity::getLocalSecondaryIndexes() const {
    return m_local_secondary_indexes;
}
void OAIQueryOutput_ConsumedCapacity::setLocalSecondaryIndexes(const QMap &local_secondary_indexes) {
    m_local_secondary_indexes = local_secondary_indexes;
    m_local_secondary_indexes_isSet = true;
}

bool OAIQueryOutput_ConsumedCapacity::is_local_secondary_indexes_Set() const{
    return m_local_secondary_indexes_isSet;
}

bool OAIQueryOutput_ConsumedCapacity::is_local_secondary_indexes_Valid() const{
    return m_local_secondary_indexes_isValid;
}

QMap OAIQueryOutput_ConsumedCapacity::getGlobalSecondaryIndexes() const {
    return m_global_secondary_indexes;
}
void OAIQueryOutput_ConsumedCapacity::setGlobalSecondaryIndexes(const QMap &global_secondary_indexes) {
    m_global_secondary_indexes = global_secondary_indexes;
    m_global_secondary_indexes_isSet = true;
}

bool OAIQueryOutput_ConsumedCapacity::is_global_secondary_indexes_Set() const{
    return m_global_secondary_indexes_isSet;
}

bool OAIQueryOutput_ConsumedCapacity::is_global_secondary_indexes_Valid() const{
    return m_global_secondary_indexes_isValid;
}

bool OAIQueryOutput_ConsumedCapacity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_secondary_indexes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_secondary_indexes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryOutput_ConsumedCapacity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
