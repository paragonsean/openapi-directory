/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpectedAttributeValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpectedAttributeValue::OAIExpectedAttributeValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpectedAttributeValue::OAIExpectedAttributeValue() {
    this->initializeModel();
}

OAIExpectedAttributeValue::~OAIExpectedAttributeValue() {}

void OAIExpectedAttributeValue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_exists_isSet = false;
    m_exists_isValid = false;

    m_comparison_operator_isSet = false;
    m_comparison_operator_isValid = false;

    m_attribute_value_list_isSet = false;
    m_attribute_value_list_isValid = false;
}

void OAIExpectedAttributeValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpectedAttributeValue::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_exists_isValid = ::OpenAPI::fromJsonValue(m_exists, json[QString("Exists")]);
    m_exists_isSet = !json[QString("Exists")].isNull() && m_exists_isValid;

    m_comparison_operator_isValid = ::OpenAPI::fromJsonValue(m_comparison_operator, json[QString("ComparisonOperator")]);
    m_comparison_operator_isSet = !json[QString("ComparisonOperator")].isNull() && m_comparison_operator_isValid;

    m_attribute_value_list_isValid = ::OpenAPI::fromJsonValue(m_attribute_value_list, json[QString("AttributeValueList")]);
    m_attribute_value_list_isSet = !json[QString("AttributeValueList")].isNull() && m_attribute_value_list_isValid;
}

QString OAIExpectedAttributeValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpectedAttributeValue::asJsonObject() const {
    QJsonObject obj;
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_exists_isSet) {
        obj.insert(QString("Exists"), ::OpenAPI::toJsonValue(m_exists));
    }
    if (m_comparison_operator.isSet()) {
        obj.insert(QString("ComparisonOperator"), ::OpenAPI::toJsonValue(m_comparison_operator));
    }
    if (m_attribute_value_list.isSet()) {
        obj.insert(QString("AttributeValueList"), ::OpenAPI::toJsonValue(m_attribute_value_list));
    }
    return obj;
}

OAIExpectedAttributeValue_Value OAIExpectedAttributeValue::getValue() const {
    return m_value;
}
void OAIExpectedAttributeValue::setValue(const OAIExpectedAttributeValue_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIExpectedAttributeValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIExpectedAttributeValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIExpectedAttributeValue::getExists() const {
    return m_exists;
}
void OAIExpectedAttributeValue::setExists(const bool &exists) {
    m_exists = exists;
    m_exists_isSet = true;
}

bool OAIExpectedAttributeValue::is_exists_Set() const{
    return m_exists_isSet;
}

bool OAIExpectedAttributeValue::is_exists_Valid() const{
    return m_exists_isValid;
}

OAIComparisonOperator OAIExpectedAttributeValue::getComparisonOperator() const {
    return m_comparison_operator;
}
void OAIExpectedAttributeValue::setComparisonOperator(const OAIComparisonOperator &comparison_operator) {
    m_comparison_operator = comparison_operator;
    m_comparison_operator_isSet = true;
}

bool OAIExpectedAttributeValue::is_comparison_operator_Set() const{
    return m_comparison_operator_isSet;
}

bool OAIExpectedAttributeValue::is_comparison_operator_Valid() const{
    return m_comparison_operator_isValid;
}

QList OAIExpectedAttributeValue::getAttributeValueList() const {
    return m_attribute_value_list;
}
void OAIExpectedAttributeValue::setAttributeValueList(const QList &attribute_value_list) {
    m_attribute_value_list = attribute_value_list;
    m_attribute_value_list_isSet = true;
}

bool OAIExpectedAttributeValue::is_attribute_value_list_Set() const{
    return m_attribute_value_list_isSet;
}

bool OAIExpectedAttributeValue::is_attribute_value_list_Valid() const{
    return m_attribute_value_list_isValid;
}

bool OAIExpectedAttributeValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_value_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpectedAttributeValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
