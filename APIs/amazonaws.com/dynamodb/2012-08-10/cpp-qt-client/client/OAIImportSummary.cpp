/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportSummary::OAIImportSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportSummary::OAIImportSummary() {
    this->initializeModel();
}

OAIImportSummary::~OAIImportSummary() {}

void OAIImportSummary::initializeModel() {

    m_import_arn_isSet = false;
    m_import_arn_isValid = false;

    m_import_status_isSet = false;
    m_import_status_isValid = false;

    m_table_arn_isSet = false;
    m_table_arn_isValid = false;

    m_s3_bucket_source_isSet = false;
    m_s3_bucket_source_isValid = false;

    m_cloud_watch_log_group_arn_isSet = false;
    m_cloud_watch_log_group_arn_isValid = false;

    m_input_format_isSet = false;
    m_input_format_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;
}

void OAIImportSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportSummary::fromJsonObject(QJsonObject json) {

    m_import_arn_isValid = ::OpenAPI::fromJsonValue(m_import_arn, json[QString("ImportArn")]);
    m_import_arn_isSet = !json[QString("ImportArn")].isNull() && m_import_arn_isValid;

    m_import_status_isValid = ::OpenAPI::fromJsonValue(m_import_status, json[QString("ImportStatus")]);
    m_import_status_isSet = !json[QString("ImportStatus")].isNull() && m_import_status_isValid;

    m_table_arn_isValid = ::OpenAPI::fromJsonValue(m_table_arn, json[QString("TableArn")]);
    m_table_arn_isSet = !json[QString("TableArn")].isNull() && m_table_arn_isValid;

    m_s3_bucket_source_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_source, json[QString("S3BucketSource")]);
    m_s3_bucket_source_isSet = !json[QString("S3BucketSource")].isNull() && m_s3_bucket_source_isValid;

    m_cloud_watch_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_log_group_arn, json[QString("CloudWatchLogGroupArn")]);
    m_cloud_watch_log_group_arn_isSet = !json[QString("CloudWatchLogGroupArn")].isNull() && m_cloud_watch_log_group_arn_isValid;

    m_input_format_isValid = ::OpenAPI::fromJsonValue(m_input_format, json[QString("InputFormat")]);
    m_input_format_isSet = !json[QString("InputFormat")].isNull() && m_input_format_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;
}

QString OAIImportSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_import_arn_isSet) {
        obj.insert(QString("ImportArn"), ::OpenAPI::toJsonValue(m_import_arn));
    }
    if (m_import_status.isSet()) {
        obj.insert(QString("ImportStatus"), ::OpenAPI::toJsonValue(m_import_status));
    }
    if (m_table_arn_isSet) {
        obj.insert(QString("TableArn"), ::OpenAPI::toJsonValue(m_table_arn));
    }
    if (m_s3_bucket_source.isSet()) {
        obj.insert(QString("S3BucketSource"), ::OpenAPI::toJsonValue(m_s3_bucket_source));
    }
    if (m_cloud_watch_log_group_arn_isSet) {
        obj.insert(QString("CloudWatchLogGroupArn"), ::OpenAPI::toJsonValue(m_cloud_watch_log_group_arn));
    }
    if (m_input_format.isSet()) {
        obj.insert(QString("InputFormat"), ::OpenAPI::toJsonValue(m_input_format));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    return obj;
}

QString OAIImportSummary::getImportArn() const {
    return m_import_arn;
}
void OAIImportSummary::setImportArn(const QString &import_arn) {
    m_import_arn = import_arn;
    m_import_arn_isSet = true;
}

bool OAIImportSummary::is_import_arn_Set() const{
    return m_import_arn_isSet;
}

bool OAIImportSummary::is_import_arn_Valid() const{
    return m_import_arn_isValid;
}

OAIImportStatus OAIImportSummary::getImportStatus() const {
    return m_import_status;
}
void OAIImportSummary::setImportStatus(const OAIImportStatus &import_status) {
    m_import_status = import_status;
    m_import_status_isSet = true;
}

bool OAIImportSummary::is_import_status_Set() const{
    return m_import_status_isSet;
}

bool OAIImportSummary::is_import_status_Valid() const{
    return m_import_status_isValid;
}

QString OAIImportSummary::getTableArn() const {
    return m_table_arn;
}
void OAIImportSummary::setTableArn(const QString &table_arn) {
    m_table_arn = table_arn;
    m_table_arn_isSet = true;
}

bool OAIImportSummary::is_table_arn_Set() const{
    return m_table_arn_isSet;
}

bool OAIImportSummary::is_table_arn_Valid() const{
    return m_table_arn_isValid;
}

OAIImportSummary_S3BucketSource OAIImportSummary::getS3BucketSource() const {
    return m_s3_bucket_source;
}
void OAIImportSummary::setS3BucketSource(const OAIImportSummary_S3BucketSource &s3_bucket_source) {
    m_s3_bucket_source = s3_bucket_source;
    m_s3_bucket_source_isSet = true;
}

bool OAIImportSummary::is_s3_bucket_source_Set() const{
    return m_s3_bucket_source_isSet;
}

bool OAIImportSummary::is_s3_bucket_source_Valid() const{
    return m_s3_bucket_source_isValid;
}

QString OAIImportSummary::getCloudWatchLogGroupArn() const {
    return m_cloud_watch_log_group_arn;
}
void OAIImportSummary::setCloudWatchLogGroupArn(const QString &cloud_watch_log_group_arn) {
    m_cloud_watch_log_group_arn = cloud_watch_log_group_arn;
    m_cloud_watch_log_group_arn_isSet = true;
}

bool OAIImportSummary::is_cloud_watch_log_group_arn_Set() const{
    return m_cloud_watch_log_group_arn_isSet;
}

bool OAIImportSummary::is_cloud_watch_log_group_arn_Valid() const{
    return m_cloud_watch_log_group_arn_isValid;
}

OAIInputFormat OAIImportSummary::getInputFormat() const {
    return m_input_format;
}
void OAIImportSummary::setInputFormat(const OAIInputFormat &input_format) {
    m_input_format = input_format;
    m_input_format_isSet = true;
}

bool OAIImportSummary::is_input_format_Set() const{
    return m_input_format_isSet;
}

bool OAIImportSummary::is_input_format_Valid() const{
    return m_input_format_isValid;
}

QDateTime OAIImportSummary::getStartTime() const {
    return m_start_time;
}
void OAIImportSummary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIImportSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIImportSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIImportSummary::getEndTime() const {
    return m_end_time;
}
void OAIImportSummary::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIImportSummary::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIImportSummary::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAIImportSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_import_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
