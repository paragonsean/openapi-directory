/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListBackupsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListBackupsInput::OAIListBackupsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListBackupsInput::OAIListBackupsInput() {
    this->initializeModel();
}

OAIListBackupsInput::~OAIListBackupsInput() {}

void OAIListBackupsInput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_time_range_lower_bound_isSet = false;
    m_time_range_lower_bound_isValid = false;

    m_time_range_upper_bound_isSet = false;
    m_time_range_upper_bound_isValid = false;

    m_exclusive_start_backup_arn_isSet = false;
    m_exclusive_start_backup_arn_isValid = false;

    m_backup_type_isSet = false;
    m_backup_type_isValid = false;
}

void OAIListBackupsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListBackupsInput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_time_range_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_time_range_lower_bound, json[QString("TimeRangeLowerBound")]);
    m_time_range_lower_bound_isSet = !json[QString("TimeRangeLowerBound")].isNull() && m_time_range_lower_bound_isValid;

    m_time_range_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_time_range_upper_bound, json[QString("TimeRangeUpperBound")]);
    m_time_range_upper_bound_isSet = !json[QString("TimeRangeUpperBound")].isNull() && m_time_range_upper_bound_isValid;

    m_exclusive_start_backup_arn_isValid = ::OpenAPI::fromJsonValue(m_exclusive_start_backup_arn, json[QString("ExclusiveStartBackupArn")]);
    m_exclusive_start_backup_arn_isSet = !json[QString("ExclusiveStartBackupArn")].isNull() && m_exclusive_start_backup_arn_isValid;

    m_backup_type_isValid = ::OpenAPI::fromJsonValue(m_backup_type, json[QString("BackupType")]);
    m_backup_type_isSet = !json[QString("BackupType")].isNull() && m_backup_type_isValid;
}

QString OAIListBackupsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListBackupsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_time_range_lower_bound_isSet) {
        obj.insert(QString("TimeRangeLowerBound"), ::OpenAPI::toJsonValue(m_time_range_lower_bound));
    }
    if (m_time_range_upper_bound_isSet) {
        obj.insert(QString("TimeRangeUpperBound"), ::OpenAPI::toJsonValue(m_time_range_upper_bound));
    }
    if (m_exclusive_start_backup_arn_isSet) {
        obj.insert(QString("ExclusiveStartBackupArn"), ::OpenAPI::toJsonValue(m_exclusive_start_backup_arn));
    }
    if (m_backup_type.isSet()) {
        obj.insert(QString("BackupType"), ::OpenAPI::toJsonValue(m_backup_type));
    }
    return obj;
}

QString OAIListBackupsInput::getTableName() const {
    return m_table_name;
}
void OAIListBackupsInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIListBackupsInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIListBackupsInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

qint32 OAIListBackupsInput::getLimit() const {
    return m_limit;
}
void OAIListBackupsInput::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIListBackupsInput::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIListBackupsInput::is_limit_Valid() const{
    return m_limit_isValid;
}

QDateTime OAIListBackupsInput::getTimeRangeLowerBound() const {
    return m_time_range_lower_bound;
}
void OAIListBackupsInput::setTimeRangeLowerBound(const QDateTime &time_range_lower_bound) {
    m_time_range_lower_bound = time_range_lower_bound;
    m_time_range_lower_bound_isSet = true;
}

bool OAIListBackupsInput::is_time_range_lower_bound_Set() const{
    return m_time_range_lower_bound_isSet;
}

bool OAIListBackupsInput::is_time_range_lower_bound_Valid() const{
    return m_time_range_lower_bound_isValid;
}

QDateTime OAIListBackupsInput::getTimeRangeUpperBound() const {
    return m_time_range_upper_bound;
}
void OAIListBackupsInput::setTimeRangeUpperBound(const QDateTime &time_range_upper_bound) {
    m_time_range_upper_bound = time_range_upper_bound;
    m_time_range_upper_bound_isSet = true;
}

bool OAIListBackupsInput::is_time_range_upper_bound_Set() const{
    return m_time_range_upper_bound_isSet;
}

bool OAIListBackupsInput::is_time_range_upper_bound_Valid() const{
    return m_time_range_upper_bound_isValid;
}

QString OAIListBackupsInput::getExclusiveStartBackupArn() const {
    return m_exclusive_start_backup_arn;
}
void OAIListBackupsInput::setExclusiveStartBackupArn(const QString &exclusive_start_backup_arn) {
    m_exclusive_start_backup_arn = exclusive_start_backup_arn;
    m_exclusive_start_backup_arn_isSet = true;
}

bool OAIListBackupsInput::is_exclusive_start_backup_arn_Set() const{
    return m_exclusive_start_backup_arn_isSet;
}

bool OAIListBackupsInput::is_exclusive_start_backup_arn_Valid() const{
    return m_exclusive_start_backup_arn_isValid;
}

OAIBackupTypeFilter OAIListBackupsInput::getBackupType() const {
    return m_backup_type;
}
void OAIListBackupsInput::setBackupType(const OAIBackupTypeFilter &backup_type) {
    m_backup_type = backup_type;
    m_backup_type_isSet = true;
}

bool OAIListBackupsInput::is_backup_type_Set() const{
    return m_backup_type_isSet;
}

bool OAIListBackupsInput::is_backup_type_Valid() const{
    return m_backup_type_isValid;
}

bool OAIListBackupsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_start_backup_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListBackupsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
