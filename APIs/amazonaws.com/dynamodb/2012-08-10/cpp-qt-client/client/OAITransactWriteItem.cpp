/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactWriteItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactWriteItem::OAITransactWriteItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactWriteItem::OAITransactWriteItem() {
    this->initializeModel();
}

OAITransactWriteItem::~OAITransactWriteItem() {}

void OAITransactWriteItem::initializeModel() {

    m_condition_check_isSet = false;
    m_condition_check_isValid = false;

    m_put_isSet = false;
    m_put_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;
}

void OAITransactWriteItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactWriteItem::fromJsonObject(QJsonObject json) {

    m_condition_check_isValid = ::OpenAPI::fromJsonValue(m_condition_check, json[QString("ConditionCheck")]);
    m_condition_check_isSet = !json[QString("ConditionCheck")].isNull() && m_condition_check_isValid;

    m_put_isValid = ::OpenAPI::fromJsonValue(m_put, json[QString("Put")]);
    m_put_isSet = !json[QString("Put")].isNull() && m_put_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("Delete")]);
    m_r_delete_isSet = !json[QString("Delete")].isNull() && m_r_delete_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("Update")]);
    m_update_isSet = !json[QString("Update")].isNull() && m_update_isValid;
}

QString OAITransactWriteItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactWriteItem::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_check.isSet()) {
        obj.insert(QString("ConditionCheck"), ::OpenAPI::toJsonValue(m_condition_check));
    }
    if (m_put.isSet()) {
        obj.insert(QString("Put"), ::OpenAPI::toJsonValue(m_put));
    }
    if (m_r_delete.isSet()) {
        obj.insert(QString("Delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_update.isSet()) {
        obj.insert(QString("Update"), ::OpenAPI::toJsonValue(m_update));
    }
    return obj;
}

OAITransactWriteItem_ConditionCheck OAITransactWriteItem::getConditionCheck() const {
    return m_condition_check;
}
void OAITransactWriteItem::setConditionCheck(const OAITransactWriteItem_ConditionCheck &condition_check) {
    m_condition_check = condition_check;
    m_condition_check_isSet = true;
}

bool OAITransactWriteItem::is_condition_check_Set() const{
    return m_condition_check_isSet;
}

bool OAITransactWriteItem::is_condition_check_Valid() const{
    return m_condition_check_isValid;
}

OAITransactWriteItem_Put OAITransactWriteItem::getPut() const {
    return m_put;
}
void OAITransactWriteItem::setPut(const OAITransactWriteItem_Put &put) {
    m_put = put;
    m_put_isSet = true;
}

bool OAITransactWriteItem::is_put_Set() const{
    return m_put_isSet;
}

bool OAITransactWriteItem::is_put_Valid() const{
    return m_put_isValid;
}

OAITransactWriteItem_Delete OAITransactWriteItem::getRDelete() const {
    return m_r_delete;
}
void OAITransactWriteItem::setRDelete(const OAITransactWriteItem_Delete &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAITransactWriteItem::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAITransactWriteItem::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

OAITransactWriteItem_Update OAITransactWriteItem::getUpdate() const {
    return m_update;
}
void OAITransactWriteItem::setUpdate(const OAITransactWriteItem_Update &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAITransactWriteItem::is_update_Set() const{
    return m_update_isSet;
}

bool OAITransactWriteItem::is_update_Valid() const{
    return m_update_isValid;
}

bool OAITransactWriteItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_put.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactWriteItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
