/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteStatementInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteStatementInput::OAIExecuteStatementInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteStatementInput::OAIExecuteStatementInput() {
    this->initializeModel();
}

OAIExecuteStatementInput::~OAIExecuteStatementInput() {}

void OAIExecuteStatementInput::initializeModel() {

    m_statement_isSet = false;
    m_statement_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_consistent_read_isSet = false;
    m_consistent_read_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_return_consumed_capacity_isSet = false;
    m_return_consumed_capacity_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_return_values_on_condition_check_failure_isSet = false;
    m_return_values_on_condition_check_failure_isValid = false;
}

void OAIExecuteStatementInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteStatementInput::fromJsonObject(QJsonObject json) {

    m_statement_isValid = ::OpenAPI::fromJsonValue(m_statement, json[QString("Statement")]);
    m_statement_isSet = !json[QString("Statement")].isNull() && m_statement_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_consistent_read_isValid = ::OpenAPI::fromJsonValue(m_consistent_read, json[QString("ConsistentRead")]);
    m_consistent_read_isSet = !json[QString("ConsistentRead")].isNull() && m_consistent_read_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_return_consumed_capacity_isValid = ::OpenAPI::fromJsonValue(m_return_consumed_capacity, json[QString("ReturnConsumedCapacity")]);
    m_return_consumed_capacity_isSet = !json[QString("ReturnConsumedCapacity")].isNull() && m_return_consumed_capacity_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_return_values_on_condition_check_failure_isValid = ::OpenAPI::fromJsonValue(m_return_values_on_condition_check_failure, json[QString("ReturnValuesOnConditionCheckFailure")]);
    m_return_values_on_condition_check_failure_isSet = !json[QString("ReturnValuesOnConditionCheckFailure")].isNull() && m_return_values_on_condition_check_failure_isValid;
}

QString OAIExecuteStatementInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteStatementInput::asJsonObject() const {
    QJsonObject obj;
    if (m_statement_isSet) {
        obj.insert(QString("Statement"), ::OpenAPI::toJsonValue(m_statement));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_consistent_read_isSet) {
        obj.insert(QString("ConsistentRead"), ::OpenAPI::toJsonValue(m_consistent_read));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_return_consumed_capacity.isSet()) {
        obj.insert(QString("ReturnConsumedCapacity"), ::OpenAPI::toJsonValue(m_return_consumed_capacity));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_return_values_on_condition_check_failure.isSet()) {
        obj.insert(QString("ReturnValuesOnConditionCheckFailure"), ::OpenAPI::toJsonValue(m_return_values_on_condition_check_failure));
    }
    return obj;
}

QString OAIExecuteStatementInput::getStatement() const {
    return m_statement;
}
void OAIExecuteStatementInput::setStatement(const QString &statement) {
    m_statement = statement;
    m_statement_isSet = true;
}

bool OAIExecuteStatementInput::is_statement_Set() const{
    return m_statement_isSet;
}

bool OAIExecuteStatementInput::is_statement_Valid() const{
    return m_statement_isValid;
}

QList OAIExecuteStatementInput::getParameters() const {
    return m_parameters;
}
void OAIExecuteStatementInput::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIExecuteStatementInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIExecuteStatementInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIExecuteStatementInput::getConsistentRead() const {
    return m_consistent_read;
}
void OAIExecuteStatementInput::setConsistentRead(const bool &consistent_read) {
    m_consistent_read = consistent_read;
    m_consistent_read_isSet = true;
}

bool OAIExecuteStatementInput::is_consistent_read_Set() const{
    return m_consistent_read_isSet;
}

bool OAIExecuteStatementInput::is_consistent_read_Valid() const{
    return m_consistent_read_isValid;
}

QString OAIExecuteStatementInput::getNextToken() const {
    return m_next_token;
}
void OAIExecuteStatementInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIExecuteStatementInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIExecuteStatementInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIReturnConsumedCapacity OAIExecuteStatementInput::getReturnConsumedCapacity() const {
    return m_return_consumed_capacity;
}
void OAIExecuteStatementInput::setReturnConsumedCapacity(const OAIReturnConsumedCapacity &return_consumed_capacity) {
    m_return_consumed_capacity = return_consumed_capacity;
    m_return_consumed_capacity_isSet = true;
}

bool OAIExecuteStatementInput::is_return_consumed_capacity_Set() const{
    return m_return_consumed_capacity_isSet;
}

bool OAIExecuteStatementInput::is_return_consumed_capacity_Valid() const{
    return m_return_consumed_capacity_isValid;
}

qint32 OAIExecuteStatementInput::getLimit() const {
    return m_limit;
}
void OAIExecuteStatementInput::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIExecuteStatementInput::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIExecuteStatementInput::is_limit_Valid() const{
    return m_limit_isValid;
}

OAIReturnValuesOnConditionCheckFailure OAIExecuteStatementInput::getReturnValuesOnConditionCheckFailure() const {
    return m_return_values_on_condition_check_failure;
}
void OAIExecuteStatementInput::setReturnValuesOnConditionCheckFailure(const OAIReturnValuesOnConditionCheckFailure &return_values_on_condition_check_failure) {
    m_return_values_on_condition_check_failure = return_values_on_condition_check_failure;
    m_return_values_on_condition_check_failure_isSet = true;
}

bool OAIExecuteStatementInput::is_return_values_on_condition_check_failure_Set() const{
    return m_return_values_on_condition_check_failure_isSet;
}

bool OAIExecuteStatementInput::is_return_values_on_condition_check_failure_Valid() const{
    return m_return_values_on_condition_check_failure_isValid;
}

bool OAIExecuteStatementInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistent_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_consumed_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_values_on_condition_check_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteStatementInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_statement_isValid && true;
}

} // namespace OpenAPI
