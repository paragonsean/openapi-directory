/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateGlobalTableSettingsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateGlobalTableSettingsInput::OAIUpdateGlobalTableSettingsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateGlobalTableSettingsInput::OAIUpdateGlobalTableSettingsInput() {
    this->initializeModel();
}

OAIUpdateGlobalTableSettingsInput::~OAIUpdateGlobalTableSettingsInput() {}

void OAIUpdateGlobalTableSettingsInput::initializeModel() {

    m_global_table_name_isSet = false;
    m_global_table_name_isValid = false;

    m_global_table_billing_mode_isSet = false;
    m_global_table_billing_mode_isValid = false;

    m_global_table_provisioned_write_capacity_units_isSet = false;
    m_global_table_provisioned_write_capacity_units_isValid = false;

    m_global_table_provisioned_write_capacity_auto_scaling_settings_update_isSet = false;
    m_global_table_provisioned_write_capacity_auto_scaling_settings_update_isValid = false;

    m_global_table_global_secondary_index_settings_update_isSet = false;
    m_global_table_global_secondary_index_settings_update_isValid = false;

    m_replica_settings_update_isSet = false;
    m_replica_settings_update_isValid = false;
}

void OAIUpdateGlobalTableSettingsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateGlobalTableSettingsInput::fromJsonObject(QJsonObject json) {

    m_global_table_name_isValid = ::OpenAPI::fromJsonValue(m_global_table_name, json[QString("GlobalTableName")]);
    m_global_table_name_isSet = !json[QString("GlobalTableName")].isNull() && m_global_table_name_isValid;

    m_global_table_billing_mode_isValid = ::OpenAPI::fromJsonValue(m_global_table_billing_mode, json[QString("GlobalTableBillingMode")]);
    m_global_table_billing_mode_isSet = !json[QString("GlobalTableBillingMode")].isNull() && m_global_table_billing_mode_isValid;

    m_global_table_provisioned_write_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_global_table_provisioned_write_capacity_units, json[QString("GlobalTableProvisionedWriteCapacityUnits")]);
    m_global_table_provisioned_write_capacity_units_isSet = !json[QString("GlobalTableProvisionedWriteCapacityUnits")].isNull() && m_global_table_provisioned_write_capacity_units_isValid;

    m_global_table_provisioned_write_capacity_auto_scaling_settings_update_isValid = ::OpenAPI::fromJsonValue(m_global_table_provisioned_write_capacity_auto_scaling_settings_update, json[QString("GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate")]);
    m_global_table_provisioned_write_capacity_auto_scaling_settings_update_isSet = !json[QString("GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate")].isNull() && m_global_table_provisioned_write_capacity_auto_scaling_settings_update_isValid;

    m_global_table_global_secondary_index_settings_update_isValid = ::OpenAPI::fromJsonValue(m_global_table_global_secondary_index_settings_update, json[QString("GlobalTableGlobalSecondaryIndexSettingsUpdate")]);
    m_global_table_global_secondary_index_settings_update_isSet = !json[QString("GlobalTableGlobalSecondaryIndexSettingsUpdate")].isNull() && m_global_table_global_secondary_index_settings_update_isValid;

    m_replica_settings_update_isValid = ::OpenAPI::fromJsonValue(m_replica_settings_update, json[QString("ReplicaSettingsUpdate")]);
    m_replica_settings_update_isSet = !json[QString("ReplicaSettingsUpdate")].isNull() && m_replica_settings_update_isValid;
}

QString OAIUpdateGlobalTableSettingsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateGlobalTableSettingsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_global_table_name_isSet) {
        obj.insert(QString("GlobalTableName"), ::OpenAPI::toJsonValue(m_global_table_name));
    }
    if (m_global_table_billing_mode.isSet()) {
        obj.insert(QString("GlobalTableBillingMode"), ::OpenAPI::toJsonValue(m_global_table_billing_mode));
    }
    if (m_global_table_provisioned_write_capacity_units_isSet) {
        obj.insert(QString("GlobalTableProvisionedWriteCapacityUnits"), ::OpenAPI::toJsonValue(m_global_table_provisioned_write_capacity_units));
    }
    if (m_global_table_provisioned_write_capacity_auto_scaling_settings_update.isSet()) {
        obj.insert(QString("GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"), ::OpenAPI::toJsonValue(m_global_table_provisioned_write_capacity_auto_scaling_settings_update));
    }
    if (m_global_table_global_secondary_index_settings_update.isSet()) {
        obj.insert(QString("GlobalTableGlobalSecondaryIndexSettingsUpdate"), ::OpenAPI::toJsonValue(m_global_table_global_secondary_index_settings_update));
    }
    if (m_replica_settings_update.isSet()) {
        obj.insert(QString("ReplicaSettingsUpdate"), ::OpenAPI::toJsonValue(m_replica_settings_update));
    }
    return obj;
}

QString OAIUpdateGlobalTableSettingsInput::getGlobalTableName() const {
    return m_global_table_name;
}
void OAIUpdateGlobalTableSettingsInput::setGlobalTableName(const QString &global_table_name) {
    m_global_table_name = global_table_name;
    m_global_table_name_isSet = true;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_name_Set() const{
    return m_global_table_name_isSet;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_name_Valid() const{
    return m_global_table_name_isValid;
}

OAIBillingMode OAIUpdateGlobalTableSettingsInput::getGlobalTableBillingMode() const {
    return m_global_table_billing_mode;
}
void OAIUpdateGlobalTableSettingsInput::setGlobalTableBillingMode(const OAIBillingMode &global_table_billing_mode) {
    m_global_table_billing_mode = global_table_billing_mode;
    m_global_table_billing_mode_isSet = true;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_billing_mode_Set() const{
    return m_global_table_billing_mode_isSet;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_billing_mode_Valid() const{
    return m_global_table_billing_mode_isValid;
}

qint32 OAIUpdateGlobalTableSettingsInput::getGlobalTableProvisionedWriteCapacityUnits() const {
    return m_global_table_provisioned_write_capacity_units;
}
void OAIUpdateGlobalTableSettingsInput::setGlobalTableProvisionedWriteCapacityUnits(const qint32 &global_table_provisioned_write_capacity_units) {
    m_global_table_provisioned_write_capacity_units = global_table_provisioned_write_capacity_units;
    m_global_table_provisioned_write_capacity_units_isSet = true;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_provisioned_write_capacity_units_Set() const{
    return m_global_table_provisioned_write_capacity_units_isSet;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_provisioned_write_capacity_units_Valid() const{
    return m_global_table_provisioned_write_capacity_units_isValid;
}

OAIUpdateGlobalTableSettingsInput_GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate OAIUpdateGlobalTableSettingsInput::getGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate() const {
    return m_global_table_provisioned_write_capacity_auto_scaling_settings_update;
}
void OAIUpdateGlobalTableSettingsInput::setGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate(const OAIUpdateGlobalTableSettingsInput_GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate &global_table_provisioned_write_capacity_auto_scaling_settings_update) {
    m_global_table_provisioned_write_capacity_auto_scaling_settings_update = global_table_provisioned_write_capacity_auto_scaling_settings_update;
    m_global_table_provisioned_write_capacity_auto_scaling_settings_update_isSet = true;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_provisioned_write_capacity_auto_scaling_settings_update_Set() const{
    return m_global_table_provisioned_write_capacity_auto_scaling_settings_update_isSet;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_provisioned_write_capacity_auto_scaling_settings_update_Valid() const{
    return m_global_table_provisioned_write_capacity_auto_scaling_settings_update_isValid;
}

QList OAIUpdateGlobalTableSettingsInput::getGlobalTableGlobalSecondaryIndexSettingsUpdate() const {
    return m_global_table_global_secondary_index_settings_update;
}
void OAIUpdateGlobalTableSettingsInput::setGlobalTableGlobalSecondaryIndexSettingsUpdate(const QList &global_table_global_secondary_index_settings_update) {
    m_global_table_global_secondary_index_settings_update = global_table_global_secondary_index_settings_update;
    m_global_table_global_secondary_index_settings_update_isSet = true;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_global_secondary_index_settings_update_Set() const{
    return m_global_table_global_secondary_index_settings_update_isSet;
}

bool OAIUpdateGlobalTableSettingsInput::is_global_table_global_secondary_index_settings_update_Valid() const{
    return m_global_table_global_secondary_index_settings_update_isValid;
}

QList OAIUpdateGlobalTableSettingsInput::getReplicaSettingsUpdate() const {
    return m_replica_settings_update;
}
void OAIUpdateGlobalTableSettingsInput::setReplicaSettingsUpdate(const QList &replica_settings_update) {
    m_replica_settings_update = replica_settings_update;
    m_replica_settings_update_isSet = true;
}

bool OAIUpdateGlobalTableSettingsInput::is_replica_settings_update_Set() const{
    return m_replica_settings_update_isSet;
}

bool OAIUpdateGlobalTableSettingsInput::is_replica_settings_update_Valid() const{
    return m_replica_settings_update_isValid;
}

bool OAIUpdateGlobalTableSettingsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_global_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_table_billing_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_table_provisioned_write_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_table_provisioned_write_capacity_auto_scaling_settings_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_table_global_secondary_index_settings_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_settings_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateGlobalTableSettingsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_global_table_name_isValid && true;
}

} // namespace OpenAPI
