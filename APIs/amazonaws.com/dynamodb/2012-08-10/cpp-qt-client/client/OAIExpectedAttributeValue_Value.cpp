/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpectedAttributeValue_Value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpectedAttributeValue_Value::OAIExpectedAttributeValue_Value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpectedAttributeValue_Value::OAIExpectedAttributeValue_Value() {
    this->initializeModel();
}

OAIExpectedAttributeValue_Value::~OAIExpectedAttributeValue_Value() {}

void OAIExpectedAttributeValue_Value::initializeModel() {

    m_s_isSet = false;
    m_s_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_b_isSet = false;
    m_b_isValid = false;

    m_ss_isSet = false;
    m_ss_isValid = false;

    m_ns_isSet = false;
    m_ns_isValid = false;

    m_bs_isSet = false;
    m_bs_isValid = false;

    m_m_isSet = false;
    m_m_isValid = false;

    m_l_isSet = false;
    m_l_isValid = false;

    m_null_isSet = false;
    m_null_isValid = false;

    m_r_bool_isSet = false;
    m_r_bool_isValid = false;
}

void OAIExpectedAttributeValue_Value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpectedAttributeValue_Value::fromJsonObject(QJsonObject json) {

    m_s_isValid = ::OpenAPI::fromJsonValue(m_s, json[QString("S")]);
    m_s_isSet = !json[QString("S")].isNull() && m_s_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("N")]);
    m_n_isSet = !json[QString("N")].isNull() && m_n_isValid;

    m_b_isValid = ::OpenAPI::fromJsonValue(m_b, json[QString("B")]);
    m_b_isSet = !json[QString("B")].isNull() && m_b_isValid;

    m_ss_isValid = ::OpenAPI::fromJsonValue(m_ss, json[QString("SS")]);
    m_ss_isSet = !json[QString("SS")].isNull() && m_ss_isValid;

    m_ns_isValid = ::OpenAPI::fromJsonValue(m_ns, json[QString("NS")]);
    m_ns_isSet = !json[QString("NS")].isNull() && m_ns_isValid;

    m_bs_isValid = ::OpenAPI::fromJsonValue(m_bs, json[QString("BS")]);
    m_bs_isSet = !json[QString("BS")].isNull() && m_bs_isValid;

    m_m_isValid = ::OpenAPI::fromJsonValue(m_m, json[QString("M")]);
    m_m_isSet = !json[QString("M")].isNull() && m_m_isValid;

    m_l_isValid = ::OpenAPI::fromJsonValue(m_l, json[QString("L")]);
    m_l_isSet = !json[QString("L")].isNull() && m_l_isValid;

    m_null_isValid = ::OpenAPI::fromJsonValue(m_null, json[QString("NULL")]);
    m_null_isSet = !json[QString("NULL")].isNull() && m_null_isValid;

    m_r_bool_isValid = ::OpenAPI::fromJsonValue(m_r_bool, json[QString("BOOL")]);
    m_r_bool_isSet = !json[QString("BOOL")].isNull() && m_r_bool_isValid;
}

QString OAIExpectedAttributeValue_Value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpectedAttributeValue_Value::asJsonObject() const {
    QJsonObject obj;
    if (m_s_isSet) {
        obj.insert(QString("S"), ::OpenAPI::toJsonValue(m_s));
    }
    if (m_n_isSet) {
        obj.insert(QString("N"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_b_isSet) {
        obj.insert(QString("B"), ::OpenAPI::toJsonValue(m_b));
    }
    if (m_ss.isSet()) {
        obj.insert(QString("SS"), ::OpenAPI::toJsonValue(m_ss));
    }
    if (m_ns.isSet()) {
        obj.insert(QString("NS"), ::OpenAPI::toJsonValue(m_ns));
    }
    if (m_bs.isSet()) {
        obj.insert(QString("BS"), ::OpenAPI::toJsonValue(m_bs));
    }
    if (m_m.isSet()) {
        obj.insert(QString("M"), ::OpenAPI::toJsonValue(m_m));
    }
    if (m_l.isSet()) {
        obj.insert(QString("L"), ::OpenAPI::toJsonValue(m_l));
    }
    if (m_null_isSet) {
        obj.insert(QString("NULL"), ::OpenAPI::toJsonValue(m_null));
    }
    if (m_r_bool_isSet) {
        obj.insert(QString("BOOL"), ::OpenAPI::toJsonValue(m_r_bool));
    }
    return obj;
}

QString OAIExpectedAttributeValue_Value::getS() const {
    return m_s;
}
void OAIExpectedAttributeValue_Value::setS(const QString &s) {
    m_s = s;
    m_s_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_s_Set() const{
    return m_s_isSet;
}

bool OAIExpectedAttributeValue_Value::is_s_Valid() const{
    return m_s_isValid;
}

QString OAIExpectedAttributeValue_Value::getN() const {
    return m_n;
}
void OAIExpectedAttributeValue_Value::setN(const QString &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_n_Set() const{
    return m_n_isSet;
}

bool OAIExpectedAttributeValue_Value::is_n_Valid() const{
    return m_n_isValid;
}

QString OAIExpectedAttributeValue_Value::getB() const {
    return m_b;
}
void OAIExpectedAttributeValue_Value::setB(const QString &b) {
    m_b = b;
    m_b_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_b_Set() const{
    return m_b_isSet;
}

bool OAIExpectedAttributeValue_Value::is_b_Valid() const{
    return m_b_isValid;
}

QList OAIExpectedAttributeValue_Value::getSs() const {
    return m_ss;
}
void OAIExpectedAttributeValue_Value::setSs(const QList &ss) {
    m_ss = ss;
    m_ss_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_ss_Set() const{
    return m_ss_isSet;
}

bool OAIExpectedAttributeValue_Value::is_ss_Valid() const{
    return m_ss_isValid;
}

QList OAIExpectedAttributeValue_Value::getNs() const {
    return m_ns;
}
void OAIExpectedAttributeValue_Value::setNs(const QList &ns) {
    m_ns = ns;
    m_ns_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_ns_Set() const{
    return m_ns_isSet;
}

bool OAIExpectedAttributeValue_Value::is_ns_Valid() const{
    return m_ns_isValid;
}

QList OAIExpectedAttributeValue_Value::getBs() const {
    return m_bs;
}
void OAIExpectedAttributeValue_Value::setBs(const QList &bs) {
    m_bs = bs;
    m_bs_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_bs_Set() const{
    return m_bs_isSet;
}

bool OAIExpectedAttributeValue_Value::is_bs_Valid() const{
    return m_bs_isValid;
}

QMap OAIExpectedAttributeValue_Value::getM() const {
    return m_m;
}
void OAIExpectedAttributeValue_Value::setM(const QMap &m) {
    m_m = m;
    m_m_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_m_Set() const{
    return m_m_isSet;
}

bool OAIExpectedAttributeValue_Value::is_m_Valid() const{
    return m_m_isValid;
}

QList OAIExpectedAttributeValue_Value::getL() const {
    return m_l;
}
void OAIExpectedAttributeValue_Value::setL(const QList &l) {
    m_l = l;
    m_l_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_l_Set() const{
    return m_l_isSet;
}

bool OAIExpectedAttributeValue_Value::is_l_Valid() const{
    return m_l_isValid;
}

bool OAIExpectedAttributeValue_Value::getNull() const {
    return m_null;
}
void OAIExpectedAttributeValue_Value::setNull(const bool &null) {
    m_null = null;
    m_null_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_null_Set() const{
    return m_null_isSet;
}

bool OAIExpectedAttributeValue_Value::is_null_Valid() const{
    return m_null_isValid;
}

bool OAIExpectedAttributeValue_Value::getRBool() const {
    return m_r_bool;
}
void OAIExpectedAttributeValue_Value::setRBool(const bool &r_bool) {
    m_r_bool = r_bool;
    m_r_bool_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_r_bool_Set() const{
    return m_r_bool_isSet;
}

bool OAIExpectedAttributeValue_Value::is_r_bool_Valid() const{
    return m_r_bool_isValid;
}

bool OAIExpectedAttributeValue_Value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ss.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_m.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_l.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_bool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpectedAttributeValue_Value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
