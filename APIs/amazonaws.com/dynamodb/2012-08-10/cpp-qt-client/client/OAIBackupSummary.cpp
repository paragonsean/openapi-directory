/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupSummary::OAIBackupSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupSummary::OAIBackupSummary() {
    this->initializeModel();
}

OAIBackupSummary::~OAIBackupSummary() {}

void OAIBackupSummary::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_table_id_isSet = false;
    m_table_id_isValid = false;

    m_table_arn_isSet = false;
    m_table_arn_isValid = false;

    m_backup_arn_isSet = false;
    m_backup_arn_isValid = false;

    m_backup_name_isSet = false;
    m_backup_name_isValid = false;

    m_backup_creation_date_time_isSet = false;
    m_backup_creation_date_time_isValid = false;

    m_backup_expiry_date_time_isSet = false;
    m_backup_expiry_date_time_isValid = false;

    m_backup_status_isSet = false;
    m_backup_status_isValid = false;

    m_backup_type_isSet = false;
    m_backup_type_isValid = false;

    m_backup_size_bytes_isSet = false;
    m_backup_size_bytes_isValid = false;
}

void OAIBackupSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupSummary::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_table_id_isValid = ::OpenAPI::fromJsonValue(m_table_id, json[QString("TableId")]);
    m_table_id_isSet = !json[QString("TableId")].isNull() && m_table_id_isValid;

    m_table_arn_isValid = ::OpenAPI::fromJsonValue(m_table_arn, json[QString("TableArn")]);
    m_table_arn_isSet = !json[QString("TableArn")].isNull() && m_table_arn_isValid;

    m_backup_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_arn, json[QString("BackupArn")]);
    m_backup_arn_isSet = !json[QString("BackupArn")].isNull() && m_backup_arn_isValid;

    m_backup_name_isValid = ::OpenAPI::fromJsonValue(m_backup_name, json[QString("BackupName")]);
    m_backup_name_isSet = !json[QString("BackupName")].isNull() && m_backup_name_isValid;

    m_backup_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_backup_creation_date_time, json[QString("BackupCreationDateTime")]);
    m_backup_creation_date_time_isSet = !json[QString("BackupCreationDateTime")].isNull() && m_backup_creation_date_time_isValid;

    m_backup_expiry_date_time_isValid = ::OpenAPI::fromJsonValue(m_backup_expiry_date_time, json[QString("BackupExpiryDateTime")]);
    m_backup_expiry_date_time_isSet = !json[QString("BackupExpiryDateTime")].isNull() && m_backup_expiry_date_time_isValid;

    m_backup_status_isValid = ::OpenAPI::fromJsonValue(m_backup_status, json[QString("BackupStatus")]);
    m_backup_status_isSet = !json[QString("BackupStatus")].isNull() && m_backup_status_isValid;

    m_backup_type_isValid = ::OpenAPI::fromJsonValue(m_backup_type, json[QString("BackupType")]);
    m_backup_type_isSet = !json[QString("BackupType")].isNull() && m_backup_type_isValid;

    m_backup_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_backup_size_bytes, json[QString("BackupSizeBytes")]);
    m_backup_size_bytes_isSet = !json[QString("BackupSizeBytes")].isNull() && m_backup_size_bytes_isValid;
}

QString OAIBackupSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_table_id_isSet) {
        obj.insert(QString("TableId"), ::OpenAPI::toJsonValue(m_table_id));
    }
    if (m_table_arn_isSet) {
        obj.insert(QString("TableArn"), ::OpenAPI::toJsonValue(m_table_arn));
    }
    if (m_backup_arn_isSet) {
        obj.insert(QString("BackupArn"), ::OpenAPI::toJsonValue(m_backup_arn));
    }
    if (m_backup_name_isSet) {
        obj.insert(QString("BackupName"), ::OpenAPI::toJsonValue(m_backup_name));
    }
    if (m_backup_creation_date_time_isSet) {
        obj.insert(QString("BackupCreationDateTime"), ::OpenAPI::toJsonValue(m_backup_creation_date_time));
    }
    if (m_backup_expiry_date_time_isSet) {
        obj.insert(QString("BackupExpiryDateTime"), ::OpenAPI::toJsonValue(m_backup_expiry_date_time));
    }
    if (m_backup_status.isSet()) {
        obj.insert(QString("BackupStatus"), ::OpenAPI::toJsonValue(m_backup_status));
    }
    if (m_backup_type.isSet()) {
        obj.insert(QString("BackupType"), ::OpenAPI::toJsonValue(m_backup_type));
    }
    if (m_backup_size_bytes_isSet) {
        obj.insert(QString("BackupSizeBytes"), ::OpenAPI::toJsonValue(m_backup_size_bytes));
    }
    return obj;
}

QString OAIBackupSummary::getTableName() const {
    return m_table_name;
}
void OAIBackupSummary::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIBackupSummary::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIBackupSummary::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIBackupSummary::getTableId() const {
    return m_table_id;
}
void OAIBackupSummary::setTableId(const QString &table_id) {
    m_table_id = table_id;
    m_table_id_isSet = true;
}

bool OAIBackupSummary::is_table_id_Set() const{
    return m_table_id_isSet;
}

bool OAIBackupSummary::is_table_id_Valid() const{
    return m_table_id_isValid;
}

QString OAIBackupSummary::getTableArn() const {
    return m_table_arn;
}
void OAIBackupSummary::setTableArn(const QString &table_arn) {
    m_table_arn = table_arn;
    m_table_arn_isSet = true;
}

bool OAIBackupSummary::is_table_arn_Set() const{
    return m_table_arn_isSet;
}

bool OAIBackupSummary::is_table_arn_Valid() const{
    return m_table_arn_isValid;
}

QString OAIBackupSummary::getBackupArn() const {
    return m_backup_arn;
}
void OAIBackupSummary::setBackupArn(const QString &backup_arn) {
    m_backup_arn = backup_arn;
    m_backup_arn_isSet = true;
}

bool OAIBackupSummary::is_backup_arn_Set() const{
    return m_backup_arn_isSet;
}

bool OAIBackupSummary::is_backup_arn_Valid() const{
    return m_backup_arn_isValid;
}

QString OAIBackupSummary::getBackupName() const {
    return m_backup_name;
}
void OAIBackupSummary::setBackupName(const QString &backup_name) {
    m_backup_name = backup_name;
    m_backup_name_isSet = true;
}

bool OAIBackupSummary::is_backup_name_Set() const{
    return m_backup_name_isSet;
}

bool OAIBackupSummary::is_backup_name_Valid() const{
    return m_backup_name_isValid;
}

QDateTime OAIBackupSummary::getBackupCreationDateTime() const {
    return m_backup_creation_date_time;
}
void OAIBackupSummary::setBackupCreationDateTime(const QDateTime &backup_creation_date_time) {
    m_backup_creation_date_time = backup_creation_date_time;
    m_backup_creation_date_time_isSet = true;
}

bool OAIBackupSummary::is_backup_creation_date_time_Set() const{
    return m_backup_creation_date_time_isSet;
}

bool OAIBackupSummary::is_backup_creation_date_time_Valid() const{
    return m_backup_creation_date_time_isValid;
}

QDateTime OAIBackupSummary::getBackupExpiryDateTime() const {
    return m_backup_expiry_date_time;
}
void OAIBackupSummary::setBackupExpiryDateTime(const QDateTime &backup_expiry_date_time) {
    m_backup_expiry_date_time = backup_expiry_date_time;
    m_backup_expiry_date_time_isSet = true;
}

bool OAIBackupSummary::is_backup_expiry_date_time_Set() const{
    return m_backup_expiry_date_time_isSet;
}

bool OAIBackupSummary::is_backup_expiry_date_time_Valid() const{
    return m_backup_expiry_date_time_isValid;
}

OAIBackupStatus OAIBackupSummary::getBackupStatus() const {
    return m_backup_status;
}
void OAIBackupSummary::setBackupStatus(const OAIBackupStatus &backup_status) {
    m_backup_status = backup_status;
    m_backup_status_isSet = true;
}

bool OAIBackupSummary::is_backup_status_Set() const{
    return m_backup_status_isSet;
}

bool OAIBackupSummary::is_backup_status_Valid() const{
    return m_backup_status_isValid;
}

OAIBackupType OAIBackupSummary::getBackupType() const {
    return m_backup_type;
}
void OAIBackupSummary::setBackupType(const OAIBackupType &backup_type) {
    m_backup_type = backup_type;
    m_backup_type_isSet = true;
}

bool OAIBackupSummary::is_backup_type_Set() const{
    return m_backup_type_isSet;
}

bool OAIBackupSummary::is_backup_type_Valid() const{
    return m_backup_type_isValid;
}

qint32 OAIBackupSummary::getBackupSizeBytes() const {
    return m_backup_size_bytes;
}
void OAIBackupSummary::setBackupSizeBytes(const qint32 &backup_size_bytes) {
    m_backup_size_bytes = backup_size_bytes;
    m_backup_size_bytes_isSet = true;
}

bool OAIBackupSummary::is_backup_size_bytes_Set() const{
    return m_backup_size_bytes_isSet;
}

bool OAIBackupSummary::is_backup_size_bytes_Valid() const{
    return m_backup_size_bytes_isValid;
}

bool OAIBackupSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_expiry_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
