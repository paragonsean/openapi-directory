/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutItemInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutItemInput::OAIPutItemInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutItemInput::OAIPutItemInput() {
    this->initializeModel();
}

OAIPutItemInput::~OAIPutItemInput() {}

void OAIPutItemInput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_expected_isSet = false;
    m_expected_isValid = false;

    m_return_values_isSet = false;
    m_return_values_isValid = false;

    m_return_consumed_capacity_isSet = false;
    m_return_consumed_capacity_isValid = false;

    m_return_item_collection_metrics_isSet = false;
    m_return_item_collection_metrics_isValid = false;

    m_conditional_operator_isSet = false;
    m_conditional_operator_isValid = false;

    m_condition_expression_isSet = false;
    m_condition_expression_isValid = false;

    m_expression_attribute_names_isSet = false;
    m_expression_attribute_names_isValid = false;

    m_expression_attribute_values_isSet = false;
    m_expression_attribute_values_isValid = false;

    m_return_values_on_condition_check_failure_isSet = false;
    m_return_values_on_condition_check_failure_isValid = false;
}

void OAIPutItemInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutItemInput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("Item")]);
    m_item_isSet = !json[QString("Item")].isNull() && m_item_isValid;

    m_expected_isValid = ::OpenAPI::fromJsonValue(m_expected, json[QString("Expected")]);
    m_expected_isSet = !json[QString("Expected")].isNull() && m_expected_isValid;

    m_return_values_isValid = ::OpenAPI::fromJsonValue(m_return_values, json[QString("ReturnValues")]);
    m_return_values_isSet = !json[QString("ReturnValues")].isNull() && m_return_values_isValid;

    m_return_consumed_capacity_isValid = ::OpenAPI::fromJsonValue(m_return_consumed_capacity, json[QString("ReturnConsumedCapacity")]);
    m_return_consumed_capacity_isSet = !json[QString("ReturnConsumedCapacity")].isNull() && m_return_consumed_capacity_isValid;

    m_return_item_collection_metrics_isValid = ::OpenAPI::fromJsonValue(m_return_item_collection_metrics, json[QString("ReturnItemCollectionMetrics")]);
    m_return_item_collection_metrics_isSet = !json[QString("ReturnItemCollectionMetrics")].isNull() && m_return_item_collection_metrics_isValid;

    m_conditional_operator_isValid = ::OpenAPI::fromJsonValue(m_conditional_operator, json[QString("ConditionalOperator")]);
    m_conditional_operator_isSet = !json[QString("ConditionalOperator")].isNull() && m_conditional_operator_isValid;

    m_condition_expression_isValid = ::OpenAPI::fromJsonValue(m_condition_expression, json[QString("ConditionExpression")]);
    m_condition_expression_isSet = !json[QString("ConditionExpression")].isNull() && m_condition_expression_isValid;

    m_expression_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_expression_attribute_names, json[QString("ExpressionAttributeNames")]);
    m_expression_attribute_names_isSet = !json[QString("ExpressionAttributeNames")].isNull() && m_expression_attribute_names_isValid;

    m_expression_attribute_values_isValid = ::OpenAPI::fromJsonValue(m_expression_attribute_values, json[QString("ExpressionAttributeValues")]);
    m_expression_attribute_values_isSet = !json[QString("ExpressionAttributeValues")].isNull() && m_expression_attribute_values_isValid;

    m_return_values_on_condition_check_failure_isValid = ::OpenAPI::fromJsonValue(m_return_values_on_condition_check_failure, json[QString("ReturnValuesOnConditionCheckFailure")]);
    m_return_values_on_condition_check_failure_isSet = !json[QString("ReturnValuesOnConditionCheckFailure")].isNull() && m_return_values_on_condition_check_failure_isValid;
}

QString OAIPutItemInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutItemInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_item.isSet()) {
        obj.insert(QString("Item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_expected.isSet()) {
        obj.insert(QString("Expected"), ::OpenAPI::toJsonValue(m_expected));
    }
    if (m_return_values.isSet()) {
        obj.insert(QString("ReturnValues"), ::OpenAPI::toJsonValue(m_return_values));
    }
    if (m_return_consumed_capacity.isSet()) {
        obj.insert(QString("ReturnConsumedCapacity"), ::OpenAPI::toJsonValue(m_return_consumed_capacity));
    }
    if (m_return_item_collection_metrics.isSet()) {
        obj.insert(QString("ReturnItemCollectionMetrics"), ::OpenAPI::toJsonValue(m_return_item_collection_metrics));
    }
    if (m_conditional_operator.isSet()) {
        obj.insert(QString("ConditionalOperator"), ::OpenAPI::toJsonValue(m_conditional_operator));
    }
    if (m_condition_expression_isSet) {
        obj.insert(QString("ConditionExpression"), ::OpenAPI::toJsonValue(m_condition_expression));
    }
    if (m_expression_attribute_names.isSet()) {
        obj.insert(QString("ExpressionAttributeNames"), ::OpenAPI::toJsonValue(m_expression_attribute_names));
    }
    if (m_expression_attribute_values.isSet()) {
        obj.insert(QString("ExpressionAttributeValues"), ::OpenAPI::toJsonValue(m_expression_attribute_values));
    }
    if (m_return_values_on_condition_check_failure.isSet()) {
        obj.insert(QString("ReturnValuesOnConditionCheckFailure"), ::OpenAPI::toJsonValue(m_return_values_on_condition_check_failure));
    }
    return obj;
}

QString OAIPutItemInput::getTableName() const {
    return m_table_name;
}
void OAIPutItemInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIPutItemInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIPutItemInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QMap OAIPutItemInput::getItem() const {
    return m_item;
}
void OAIPutItemInput::setItem(const QMap &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIPutItemInput::is_item_Set() const{
    return m_item_isSet;
}

bool OAIPutItemInput::is_item_Valid() const{
    return m_item_isValid;
}

QMap OAIPutItemInput::getExpected() const {
    return m_expected;
}
void OAIPutItemInput::setExpected(const QMap &expected) {
    m_expected = expected;
    m_expected_isSet = true;
}

bool OAIPutItemInput::is_expected_Set() const{
    return m_expected_isSet;
}

bool OAIPutItemInput::is_expected_Valid() const{
    return m_expected_isValid;
}

OAIReturnValue OAIPutItemInput::getReturnValues() const {
    return m_return_values;
}
void OAIPutItemInput::setReturnValues(const OAIReturnValue &return_values) {
    m_return_values = return_values;
    m_return_values_isSet = true;
}

bool OAIPutItemInput::is_return_values_Set() const{
    return m_return_values_isSet;
}

bool OAIPutItemInput::is_return_values_Valid() const{
    return m_return_values_isValid;
}

OAIReturnConsumedCapacity OAIPutItemInput::getReturnConsumedCapacity() const {
    return m_return_consumed_capacity;
}
void OAIPutItemInput::setReturnConsumedCapacity(const OAIReturnConsumedCapacity &return_consumed_capacity) {
    m_return_consumed_capacity = return_consumed_capacity;
    m_return_consumed_capacity_isSet = true;
}

bool OAIPutItemInput::is_return_consumed_capacity_Set() const{
    return m_return_consumed_capacity_isSet;
}

bool OAIPutItemInput::is_return_consumed_capacity_Valid() const{
    return m_return_consumed_capacity_isValid;
}

OAIReturnItemCollectionMetrics OAIPutItemInput::getReturnItemCollectionMetrics() const {
    return m_return_item_collection_metrics;
}
void OAIPutItemInput::setReturnItemCollectionMetrics(const OAIReturnItemCollectionMetrics &return_item_collection_metrics) {
    m_return_item_collection_metrics = return_item_collection_metrics;
    m_return_item_collection_metrics_isSet = true;
}

bool OAIPutItemInput::is_return_item_collection_metrics_Set() const{
    return m_return_item_collection_metrics_isSet;
}

bool OAIPutItemInput::is_return_item_collection_metrics_Valid() const{
    return m_return_item_collection_metrics_isValid;
}

OAIConditionalOperator OAIPutItemInput::getConditionalOperator() const {
    return m_conditional_operator;
}
void OAIPutItemInput::setConditionalOperator(const OAIConditionalOperator &conditional_operator) {
    m_conditional_operator = conditional_operator;
    m_conditional_operator_isSet = true;
}

bool OAIPutItemInput::is_conditional_operator_Set() const{
    return m_conditional_operator_isSet;
}

bool OAIPutItemInput::is_conditional_operator_Valid() const{
    return m_conditional_operator_isValid;
}

QString OAIPutItemInput::getConditionExpression() const {
    return m_condition_expression;
}
void OAIPutItemInput::setConditionExpression(const QString &condition_expression) {
    m_condition_expression = condition_expression;
    m_condition_expression_isSet = true;
}

bool OAIPutItemInput::is_condition_expression_Set() const{
    return m_condition_expression_isSet;
}

bool OAIPutItemInput::is_condition_expression_Valid() const{
    return m_condition_expression_isValid;
}

QMap OAIPutItemInput::getExpressionAttributeNames() const {
    return m_expression_attribute_names;
}
void OAIPutItemInput::setExpressionAttributeNames(const QMap &expression_attribute_names) {
    m_expression_attribute_names = expression_attribute_names;
    m_expression_attribute_names_isSet = true;
}

bool OAIPutItemInput::is_expression_attribute_names_Set() const{
    return m_expression_attribute_names_isSet;
}

bool OAIPutItemInput::is_expression_attribute_names_Valid() const{
    return m_expression_attribute_names_isValid;
}

QMap OAIPutItemInput::getExpressionAttributeValues() const {
    return m_expression_attribute_values;
}
void OAIPutItemInput::setExpressionAttributeValues(const QMap &expression_attribute_values) {
    m_expression_attribute_values = expression_attribute_values;
    m_expression_attribute_values_isSet = true;
}

bool OAIPutItemInput::is_expression_attribute_values_Set() const{
    return m_expression_attribute_values_isSet;
}

bool OAIPutItemInput::is_expression_attribute_values_Valid() const{
    return m_expression_attribute_values_isValid;
}

OAIReturnValuesOnConditionCheckFailure OAIPutItemInput::getReturnValuesOnConditionCheckFailure() const {
    return m_return_values_on_condition_check_failure;
}
void OAIPutItemInput::setReturnValuesOnConditionCheckFailure(const OAIReturnValuesOnConditionCheckFailure &return_values_on_condition_check_failure) {
    m_return_values_on_condition_check_failure = return_values_on_condition_check_failure;
    m_return_values_on_condition_check_failure_isSet = true;
}

bool OAIPutItemInput::is_return_values_on_condition_check_failure_Set() const{
    return m_return_values_on_condition_check_failure_isSet;
}

bool OAIPutItemInput::is_return_values_on_condition_check_failure_Valid() const{
    return m_return_values_on_condition_check_failure_isValid;
}

bool OAIPutItemInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_consumed_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_item_collection_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_attribute_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_values_on_condition_check_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutItemInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && m_item_isValid && true;
}

} // namespace OpenAPI
