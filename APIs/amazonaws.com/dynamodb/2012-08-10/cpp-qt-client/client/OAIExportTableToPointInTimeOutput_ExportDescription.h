/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExportTableToPointInTimeOutput_ExportDescription.h
 *
 * 
 */

#ifndef OAIExportTableToPointInTimeOutput_ExportDescription_H
#define OAIExportTableToPointInTimeOutput_ExportDescription_H

#include <QJsonObject>

#include "OAIExportFormat.h"
#include "OAIExportStatus.h"
#include "OAIS3SseAlgorithm.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIExportTableToPointInTimeOutput_ExportDescription : public OAIObject {
public:
    OAIExportTableToPointInTimeOutput_ExportDescription();
    OAIExportTableToPointInTimeOutput_ExportDescription(QString json);
    ~OAIExportTableToPointInTimeOutput_ExportDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExportArn() const;
    void setExportArn(const QString &export_arn);
    bool is_export_arn_Set() const;
    bool is_export_arn_Valid() const;

    OAIExportStatus getExportStatus() const;
    void setExportStatus(const OAIExportStatus &export_status);
    bool is_export_status_Set() const;
    bool is_export_status_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getExportManifest() const;
    void setExportManifest(const QString &export_manifest);
    bool is_export_manifest_Set() const;
    bool is_export_manifest_Valid() const;

    QString getTableArn() const;
    void setTableArn(const QString &table_arn);
    bool is_table_arn_Set() const;
    bool is_table_arn_Valid() const;

    QString getTableId() const;
    void setTableId(const QString &table_id);
    bool is_table_id_Set() const;
    bool is_table_id_Valid() const;

    QDateTime getExportTime() const;
    void setExportTime(const QDateTime &export_time);
    bool is_export_time_Set() const;
    bool is_export_time_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getS3Bucket() const;
    void setS3Bucket(const QString &s3_bucket);
    bool is_s3_bucket_Set() const;
    bool is_s3_bucket_Valid() const;

    QString getS3BucketOwner() const;
    void setS3BucketOwner(const QString &s3_bucket_owner);
    bool is_s3_bucket_owner_Set() const;
    bool is_s3_bucket_owner_Valid() const;

    QString getS3Prefix() const;
    void setS3Prefix(const QString &s3_prefix);
    bool is_s3_prefix_Set() const;
    bool is_s3_prefix_Valid() const;

    OAIS3SseAlgorithm getS3SseAlgorithm() const;
    void setS3SseAlgorithm(const OAIS3SseAlgorithm &s3_sse_algorithm);
    bool is_s3_sse_algorithm_Set() const;
    bool is_s3_sse_algorithm_Valid() const;

    QString getS3SseKmsKeyId() const;
    void setS3SseKmsKeyId(const QString &s3_sse_kms_key_id);
    bool is_s3_sse_kms_key_id_Set() const;
    bool is_s3_sse_kms_key_id_Valid() const;

    QString getFailureCode() const;
    void setFailureCode(const QString &failure_code);
    bool is_failure_code_Set() const;
    bool is_failure_code_Valid() const;

    QString getFailureMessage() const;
    void setFailureMessage(const QString &failure_message);
    bool is_failure_message_Set() const;
    bool is_failure_message_Valid() const;

    OAIExportFormat getExportFormat() const;
    void setExportFormat(const OAIExportFormat &export_format);
    bool is_export_format_Set() const;
    bool is_export_format_Valid() const;

    qint32 getBilledSizeBytes() const;
    void setBilledSizeBytes(const qint32 &billed_size_bytes);
    bool is_billed_size_bytes_Set() const;
    bool is_billed_size_bytes_Valid() const;

    qint32 getItemCount() const;
    void setItemCount(const qint32 &item_count);
    bool is_item_count_Set() const;
    bool is_item_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_export_arn;
    bool m_export_arn_isSet;
    bool m_export_arn_isValid;

    OAIExportStatus m_export_status;
    bool m_export_status_isSet;
    bool m_export_status_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_export_manifest;
    bool m_export_manifest_isSet;
    bool m_export_manifest_isValid;

    QString m_table_arn;
    bool m_table_arn_isSet;
    bool m_table_arn_isValid;

    QString m_table_id;
    bool m_table_id_isSet;
    bool m_table_id_isValid;

    QDateTime m_export_time;
    bool m_export_time_isSet;
    bool m_export_time_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_s3_bucket;
    bool m_s3_bucket_isSet;
    bool m_s3_bucket_isValid;

    QString m_s3_bucket_owner;
    bool m_s3_bucket_owner_isSet;
    bool m_s3_bucket_owner_isValid;

    QString m_s3_prefix;
    bool m_s3_prefix_isSet;
    bool m_s3_prefix_isValid;

    OAIS3SseAlgorithm m_s3_sse_algorithm;
    bool m_s3_sse_algorithm_isSet;
    bool m_s3_sse_algorithm_isValid;

    QString m_s3_sse_kms_key_id;
    bool m_s3_sse_kms_key_id_isSet;
    bool m_s3_sse_kms_key_id_isValid;

    QString m_failure_code;
    bool m_failure_code_isSet;
    bool m_failure_code_isValid;

    QString m_failure_message;
    bool m_failure_message_isSet;
    bool m_failure_message_isValid;

    OAIExportFormat m_export_format;
    bool m_export_format_isSet;
    bool m_export_format_isValid;

    qint32 m_billed_size_bytes;
    bool m_billed_size_bytes_isSet;
    bool m_billed_size_bytes_isValid;

    qint32 m_item_count;
    bool m_item_count_isSet;
    bool m_item_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExportTableToPointInTimeOutput_ExportDescription)

#endif // OAIExportTableToPointInTimeOutput_ExportDescription_H
