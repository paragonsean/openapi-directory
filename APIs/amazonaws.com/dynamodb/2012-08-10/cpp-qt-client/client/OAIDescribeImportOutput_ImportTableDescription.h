/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeImportOutput_ImportTableDescription.h
 *
 * 
 */

#ifndef OAIDescribeImportOutput_ImportTableDescription_H
#define OAIDescribeImportOutput_ImportTableDescription_H

#include <QJsonObject>

#include "OAIImportStatus.h"
#include "OAIImportTableDescription_InputFormatOptions.h"
#include "OAIImportTableDescription_S3BucketSource.h"
#include "OAIImportTableDescription_TableCreationParameters.h"
#include "OAIInputCompressionType.h"
#include "OAIInputFormat.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImportTableDescription_S3BucketSource;
class OAIImportTableDescription_InputFormatOptions;
class OAIImportTableDescription_TableCreationParameters;

class OAIDescribeImportOutput_ImportTableDescription : public OAIObject {
public:
    OAIDescribeImportOutput_ImportTableDescription();
    OAIDescribeImportOutput_ImportTableDescription(QString json);
    ~OAIDescribeImportOutput_ImportTableDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getImportArn() const;
    void setImportArn(const QString &import_arn);
    bool is_import_arn_Set() const;
    bool is_import_arn_Valid() const;

    OAIImportStatus getImportStatus() const;
    void setImportStatus(const OAIImportStatus &import_status);
    bool is_import_status_Set() const;
    bool is_import_status_Valid() const;

    QString getTableArn() const;
    void setTableArn(const QString &table_arn);
    bool is_table_arn_Set() const;
    bool is_table_arn_Valid() const;

    QString getTableId() const;
    void setTableId(const QString &table_id);
    bool is_table_id_Set() const;
    bool is_table_id_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    OAIImportTableDescription_S3BucketSource getS3BucketSource() const;
    void setS3BucketSource(const OAIImportTableDescription_S3BucketSource &s3_bucket_source);
    bool is_s3_bucket_source_Set() const;
    bool is_s3_bucket_source_Valid() const;

    qint32 getErrorCount() const;
    void setErrorCount(const qint32 &error_count);
    bool is_error_count_Set() const;
    bool is_error_count_Valid() const;

    QString getCloudWatchLogGroupArn() const;
    void setCloudWatchLogGroupArn(const QString &cloud_watch_log_group_arn);
    bool is_cloud_watch_log_group_arn_Set() const;
    bool is_cloud_watch_log_group_arn_Valid() const;

    OAIInputFormat getInputFormat() const;
    void setInputFormat(const OAIInputFormat &input_format);
    bool is_input_format_Set() const;
    bool is_input_format_Valid() const;

    OAIImportTableDescription_InputFormatOptions getInputFormatOptions() const;
    void setInputFormatOptions(const OAIImportTableDescription_InputFormatOptions &input_format_options);
    bool is_input_format_options_Set() const;
    bool is_input_format_options_Valid() const;

    OAIInputCompressionType getInputCompressionType() const;
    void setInputCompressionType(const OAIInputCompressionType &input_compression_type);
    bool is_input_compression_type_Set() const;
    bool is_input_compression_type_Valid() const;

    OAIImportTableDescription_TableCreationParameters getTableCreationParameters() const;
    void setTableCreationParameters(const OAIImportTableDescription_TableCreationParameters &table_creation_parameters);
    bool is_table_creation_parameters_Set() const;
    bool is_table_creation_parameters_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getProcessedSizeBytes() const;
    void setProcessedSizeBytes(const qint32 &processed_size_bytes);
    bool is_processed_size_bytes_Set() const;
    bool is_processed_size_bytes_Valid() const;

    qint32 getProcessedItemCount() const;
    void setProcessedItemCount(const qint32 &processed_item_count);
    bool is_processed_item_count_Set() const;
    bool is_processed_item_count_Valid() const;

    qint32 getImportedItemCount() const;
    void setImportedItemCount(const qint32 &imported_item_count);
    bool is_imported_item_count_Set() const;
    bool is_imported_item_count_Valid() const;

    QString getFailureCode() const;
    void setFailureCode(const QString &failure_code);
    bool is_failure_code_Set() const;
    bool is_failure_code_Valid() const;

    QString getFailureMessage() const;
    void setFailureMessage(const QString &failure_message);
    bool is_failure_message_Set() const;
    bool is_failure_message_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_import_arn;
    bool m_import_arn_isSet;
    bool m_import_arn_isValid;

    OAIImportStatus m_import_status;
    bool m_import_status_isSet;
    bool m_import_status_isValid;

    QString m_table_arn;
    bool m_table_arn_isSet;
    bool m_table_arn_isValid;

    QString m_table_id;
    bool m_table_id_isSet;
    bool m_table_id_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    OAIImportTableDescription_S3BucketSource m_s3_bucket_source;
    bool m_s3_bucket_source_isSet;
    bool m_s3_bucket_source_isValid;

    qint32 m_error_count;
    bool m_error_count_isSet;
    bool m_error_count_isValid;

    QString m_cloud_watch_log_group_arn;
    bool m_cloud_watch_log_group_arn_isSet;
    bool m_cloud_watch_log_group_arn_isValid;

    OAIInputFormat m_input_format;
    bool m_input_format_isSet;
    bool m_input_format_isValid;

    OAIImportTableDescription_InputFormatOptions m_input_format_options;
    bool m_input_format_options_isSet;
    bool m_input_format_options_isValid;

    OAIInputCompressionType m_input_compression_type;
    bool m_input_compression_type_isSet;
    bool m_input_compression_type_isValid;

    OAIImportTableDescription_TableCreationParameters m_table_creation_parameters;
    bool m_table_creation_parameters_isSet;
    bool m_table_creation_parameters_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_processed_size_bytes;
    bool m_processed_size_bytes_isSet;
    bool m_processed_size_bytes_isValid;

    qint32 m_processed_item_count;
    bool m_processed_item_count_isSet;
    bool m_processed_item_count_isValid;

    qint32 m_imported_item_count;
    bool m_imported_item_count_isSet;
    bool m_imported_item_count_isValid;

    QString m_failure_code;
    bool m_failure_code_isSet;
    bool m_failure_code_isValid;

    QString m_failure_message;
    bool m_failure_message_isSet;
    bool m_failure_message_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeImportOutput_ImportTableDescription)

#endif // OAIDescribeImportOutput_ImportTableDescription_H
