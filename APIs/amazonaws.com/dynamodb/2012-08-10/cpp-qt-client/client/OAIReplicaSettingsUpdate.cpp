/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicaSettingsUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicaSettingsUpdate::OAIReplicaSettingsUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicaSettingsUpdate::OAIReplicaSettingsUpdate() {
    this->initializeModel();
}

OAIReplicaSettingsUpdate::~OAIReplicaSettingsUpdate() {}

void OAIReplicaSettingsUpdate::initializeModel() {

    m_region_name_isSet = false;
    m_region_name_isValid = false;

    m_replica_provisioned_read_capacity_units_isSet = false;
    m_replica_provisioned_read_capacity_units_isValid = false;

    m_replica_provisioned_read_capacity_auto_scaling_settings_update_isSet = false;
    m_replica_provisioned_read_capacity_auto_scaling_settings_update_isValid = false;

    m_replica_global_secondary_index_settings_update_isSet = false;
    m_replica_global_secondary_index_settings_update_isValid = false;

    m_replica_table_class_isSet = false;
    m_replica_table_class_isValid = false;
}

void OAIReplicaSettingsUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicaSettingsUpdate::fromJsonObject(QJsonObject json) {

    m_region_name_isValid = ::OpenAPI::fromJsonValue(m_region_name, json[QString("RegionName")]);
    m_region_name_isSet = !json[QString("RegionName")].isNull() && m_region_name_isValid;

    m_replica_provisioned_read_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_replica_provisioned_read_capacity_units, json[QString("ReplicaProvisionedReadCapacityUnits")]);
    m_replica_provisioned_read_capacity_units_isSet = !json[QString("ReplicaProvisionedReadCapacityUnits")].isNull() && m_replica_provisioned_read_capacity_units_isValid;

    m_replica_provisioned_read_capacity_auto_scaling_settings_update_isValid = ::OpenAPI::fromJsonValue(m_replica_provisioned_read_capacity_auto_scaling_settings_update, json[QString("ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate")]);
    m_replica_provisioned_read_capacity_auto_scaling_settings_update_isSet = !json[QString("ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate")].isNull() && m_replica_provisioned_read_capacity_auto_scaling_settings_update_isValid;

    m_replica_global_secondary_index_settings_update_isValid = ::OpenAPI::fromJsonValue(m_replica_global_secondary_index_settings_update, json[QString("ReplicaGlobalSecondaryIndexSettingsUpdate")]);
    m_replica_global_secondary_index_settings_update_isSet = !json[QString("ReplicaGlobalSecondaryIndexSettingsUpdate")].isNull() && m_replica_global_secondary_index_settings_update_isValid;

    m_replica_table_class_isValid = ::OpenAPI::fromJsonValue(m_replica_table_class, json[QString("ReplicaTableClass")]);
    m_replica_table_class_isSet = !json[QString("ReplicaTableClass")].isNull() && m_replica_table_class_isValid;
}

QString OAIReplicaSettingsUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicaSettingsUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_region_name_isSet) {
        obj.insert(QString("RegionName"), ::OpenAPI::toJsonValue(m_region_name));
    }
    if (m_replica_provisioned_read_capacity_units_isSet) {
        obj.insert(QString("ReplicaProvisionedReadCapacityUnits"), ::OpenAPI::toJsonValue(m_replica_provisioned_read_capacity_units));
    }
    if (m_replica_provisioned_read_capacity_auto_scaling_settings_update.isSet()) {
        obj.insert(QString("ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate"), ::OpenAPI::toJsonValue(m_replica_provisioned_read_capacity_auto_scaling_settings_update));
    }
    if (m_replica_global_secondary_index_settings_update.isSet()) {
        obj.insert(QString("ReplicaGlobalSecondaryIndexSettingsUpdate"), ::OpenAPI::toJsonValue(m_replica_global_secondary_index_settings_update));
    }
    if (m_replica_table_class.isSet()) {
        obj.insert(QString("ReplicaTableClass"), ::OpenAPI::toJsonValue(m_replica_table_class));
    }
    return obj;
}

QString OAIReplicaSettingsUpdate::getRegionName() const {
    return m_region_name;
}
void OAIReplicaSettingsUpdate::setRegionName(const QString &region_name) {
    m_region_name = region_name;
    m_region_name_isSet = true;
}

bool OAIReplicaSettingsUpdate::is_region_name_Set() const{
    return m_region_name_isSet;
}

bool OAIReplicaSettingsUpdate::is_region_name_Valid() const{
    return m_region_name_isValid;
}

qint32 OAIReplicaSettingsUpdate::getReplicaProvisionedReadCapacityUnits() const {
    return m_replica_provisioned_read_capacity_units;
}
void OAIReplicaSettingsUpdate::setReplicaProvisionedReadCapacityUnits(const qint32 &replica_provisioned_read_capacity_units) {
    m_replica_provisioned_read_capacity_units = replica_provisioned_read_capacity_units;
    m_replica_provisioned_read_capacity_units_isSet = true;
}

bool OAIReplicaSettingsUpdate::is_replica_provisioned_read_capacity_units_Set() const{
    return m_replica_provisioned_read_capacity_units_isSet;
}

bool OAIReplicaSettingsUpdate::is_replica_provisioned_read_capacity_units_Valid() const{
    return m_replica_provisioned_read_capacity_units_isValid;
}

OAIReplicaSettingsUpdate_ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate OAIReplicaSettingsUpdate::getReplicaProvisionedReadCapacityAutoScalingSettingsUpdate() const {
    return m_replica_provisioned_read_capacity_auto_scaling_settings_update;
}
void OAIReplicaSettingsUpdate::setReplicaProvisionedReadCapacityAutoScalingSettingsUpdate(const OAIReplicaSettingsUpdate_ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate &replica_provisioned_read_capacity_auto_scaling_settings_update) {
    m_replica_provisioned_read_capacity_auto_scaling_settings_update = replica_provisioned_read_capacity_auto_scaling_settings_update;
    m_replica_provisioned_read_capacity_auto_scaling_settings_update_isSet = true;
}

bool OAIReplicaSettingsUpdate::is_replica_provisioned_read_capacity_auto_scaling_settings_update_Set() const{
    return m_replica_provisioned_read_capacity_auto_scaling_settings_update_isSet;
}

bool OAIReplicaSettingsUpdate::is_replica_provisioned_read_capacity_auto_scaling_settings_update_Valid() const{
    return m_replica_provisioned_read_capacity_auto_scaling_settings_update_isValid;
}

QList OAIReplicaSettingsUpdate::getReplicaGlobalSecondaryIndexSettingsUpdate() const {
    return m_replica_global_secondary_index_settings_update;
}
void OAIReplicaSettingsUpdate::setReplicaGlobalSecondaryIndexSettingsUpdate(const QList &replica_global_secondary_index_settings_update) {
    m_replica_global_secondary_index_settings_update = replica_global_secondary_index_settings_update;
    m_replica_global_secondary_index_settings_update_isSet = true;
}

bool OAIReplicaSettingsUpdate::is_replica_global_secondary_index_settings_update_Set() const{
    return m_replica_global_secondary_index_settings_update_isSet;
}

bool OAIReplicaSettingsUpdate::is_replica_global_secondary_index_settings_update_Valid() const{
    return m_replica_global_secondary_index_settings_update_isValid;
}

OAITableClass OAIReplicaSettingsUpdate::getReplicaTableClass() const {
    return m_replica_table_class;
}
void OAIReplicaSettingsUpdate::setReplicaTableClass(const OAITableClass &replica_table_class) {
    m_replica_table_class = replica_table_class;
    m_replica_table_class_isSet = true;
}

bool OAIReplicaSettingsUpdate::is_replica_table_class_Set() const{
    return m_replica_table_class_isSet;
}

bool OAIReplicaSettingsUpdate::is_replica_table_class_Valid() const{
    return m_replica_table_class_isValid;
}

bool OAIReplicaSettingsUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_region_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_provisioned_read_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_provisioned_read_capacity_auto_scaling_settings_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_global_secondary_index_settings_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_table_class.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicaSettingsUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_region_name_isValid && true;
}

} // namespace OpenAPI
