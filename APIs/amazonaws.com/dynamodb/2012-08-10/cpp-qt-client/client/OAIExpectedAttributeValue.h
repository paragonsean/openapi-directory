/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpectedAttributeValue.h
 *
 * &lt;p&gt;Represents a condition to be compared with an attribute value. This condition can be used with &lt;code&gt;DeleteItem&lt;/code&gt;, &lt;code&gt;PutItem&lt;/code&gt;, or &lt;code&gt;UpdateItem&lt;/code&gt; operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use &lt;code&gt;ExpectedAttributeValue&lt;/code&gt; in one of two different ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;AttributeValueList&lt;/code&gt; to specify one or more values to compare against an attribute. Use &lt;code&gt;ComparisonOperator&lt;/code&gt; to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;Value&lt;/code&gt; to specify a value that DynamoDB will compare against an attribute. If the values match, then &lt;code&gt;ExpectedAttributeValue&lt;/code&gt; evaluates to true and the conditional operation succeeds. Optionally, you can also set &lt;code&gt;Exists&lt;/code&gt; to false, indicating that you &lt;i&gt;do not&lt;/i&gt; expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;Value&lt;/code&gt; and &lt;code&gt;Exists&lt;/code&gt; are incompatible with &lt;code&gt;AttributeValueList&lt;/code&gt; and &lt;code&gt;ComparisonOperator&lt;/code&gt;. Note that if you use both sets of parameters at once, DynamoDB will return a &lt;code&gt;ValidationException&lt;/code&gt; exception.&lt;/p&gt;
 */

#ifndef OAIExpectedAttributeValue_H
#define OAIExpectedAttributeValue_H

#include <QJsonObject>

#include "OAIComparisonOperator.h"
#include "OAIExpectedAttributeValue_Value.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExpectedAttributeValue_Value;

class OAIExpectedAttributeValue : public OAIObject {
public:
    OAIExpectedAttributeValue();
    OAIExpectedAttributeValue(QString json);
    ~OAIExpectedAttributeValue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIExpectedAttributeValue_Value getValue() const;
    void setValue(const OAIExpectedAttributeValue_Value &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    bool getExists() const;
    void setExists(const bool &exists);
    bool is_exists_Set() const;
    bool is_exists_Valid() const;

    OAIComparisonOperator getComparisonOperator() const;
    void setComparisonOperator(const OAIComparisonOperator &comparison_operator);
    bool is_comparison_operator_Set() const;
    bool is_comparison_operator_Valid() const;

    QList getAttributeValueList() const;
    void setAttributeValueList(const QList &attribute_value_list);
    bool is_attribute_value_list_Set() const;
    bool is_attribute_value_list_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIExpectedAttributeValue_Value m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    bool m_exists;
    bool m_exists_isSet;
    bool m_exists_isValid;

    OAIComparisonOperator m_comparison_operator;
    bool m_comparison_operator_isSet;
    bool m_comparison_operator_isValid;

    QList m_attribute_value_list;
    bool m_attribute_value_list_isSet;
    bool m_attribute_value_list_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpectedAttributeValue)

#endif // OAIExpectedAttributeValue_H
