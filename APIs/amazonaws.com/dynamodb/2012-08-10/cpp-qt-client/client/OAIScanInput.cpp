/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScanInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScanInput::OAIScanInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScanInput::OAIScanInput() {
    this->initializeModel();
}

OAIScanInput::~OAIScanInput() {}

void OAIScanInput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_index_name_isSet = false;
    m_index_name_isValid = false;

    m_attributes_to_get_isSet = false;
    m_attributes_to_get_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_select_isSet = false;
    m_select_isValid = false;

    m_scan_filter_isSet = false;
    m_scan_filter_isValid = false;

    m_conditional_operator_isSet = false;
    m_conditional_operator_isValid = false;

    m_exclusive_start_key_isSet = false;
    m_exclusive_start_key_isValid = false;

    m_return_consumed_capacity_isSet = false;
    m_return_consumed_capacity_isValid = false;

    m_total_segments_isSet = false;
    m_total_segments_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_projection_expression_isSet = false;
    m_projection_expression_isValid = false;

    m_filter_expression_isSet = false;
    m_filter_expression_isValid = false;

    m_expression_attribute_names_isSet = false;
    m_expression_attribute_names_isValid = false;

    m_expression_attribute_values_isSet = false;
    m_expression_attribute_values_isValid = false;

    m_consistent_read_isSet = false;
    m_consistent_read_isValid = false;
}

void OAIScanInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScanInput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_index_name_isValid = ::OpenAPI::fromJsonValue(m_index_name, json[QString("IndexName")]);
    m_index_name_isSet = !json[QString("IndexName")].isNull() && m_index_name_isValid;

    m_attributes_to_get_isValid = ::OpenAPI::fromJsonValue(m_attributes_to_get, json[QString("AttributesToGet")]);
    m_attributes_to_get_isSet = !json[QString("AttributesToGet")].isNull() && m_attributes_to_get_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_select_isValid = ::OpenAPI::fromJsonValue(m_select, json[QString("Select")]);
    m_select_isSet = !json[QString("Select")].isNull() && m_select_isValid;

    m_scan_filter_isValid = ::OpenAPI::fromJsonValue(m_scan_filter, json[QString("ScanFilter")]);
    m_scan_filter_isSet = !json[QString("ScanFilter")].isNull() && m_scan_filter_isValid;

    m_conditional_operator_isValid = ::OpenAPI::fromJsonValue(m_conditional_operator, json[QString("ConditionalOperator")]);
    m_conditional_operator_isSet = !json[QString("ConditionalOperator")].isNull() && m_conditional_operator_isValid;

    m_exclusive_start_key_isValid = ::OpenAPI::fromJsonValue(m_exclusive_start_key, json[QString("ExclusiveStartKey")]);
    m_exclusive_start_key_isSet = !json[QString("ExclusiveStartKey")].isNull() && m_exclusive_start_key_isValid;

    m_return_consumed_capacity_isValid = ::OpenAPI::fromJsonValue(m_return_consumed_capacity, json[QString("ReturnConsumedCapacity")]);
    m_return_consumed_capacity_isSet = !json[QString("ReturnConsumedCapacity")].isNull() && m_return_consumed_capacity_isValid;

    m_total_segments_isValid = ::OpenAPI::fromJsonValue(m_total_segments, json[QString("TotalSegments")]);
    m_total_segments_isSet = !json[QString("TotalSegments")].isNull() && m_total_segments_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("Segment")]);
    m_segment_isSet = !json[QString("Segment")].isNull() && m_segment_isValid;

    m_projection_expression_isValid = ::OpenAPI::fromJsonValue(m_projection_expression, json[QString("ProjectionExpression")]);
    m_projection_expression_isSet = !json[QString("ProjectionExpression")].isNull() && m_projection_expression_isValid;

    m_filter_expression_isValid = ::OpenAPI::fromJsonValue(m_filter_expression, json[QString("FilterExpression")]);
    m_filter_expression_isSet = !json[QString("FilterExpression")].isNull() && m_filter_expression_isValid;

    m_expression_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_expression_attribute_names, json[QString("ExpressionAttributeNames")]);
    m_expression_attribute_names_isSet = !json[QString("ExpressionAttributeNames")].isNull() && m_expression_attribute_names_isValid;

    m_expression_attribute_values_isValid = ::OpenAPI::fromJsonValue(m_expression_attribute_values, json[QString("ExpressionAttributeValues")]);
    m_expression_attribute_values_isSet = !json[QString("ExpressionAttributeValues")].isNull() && m_expression_attribute_values_isValid;

    m_consistent_read_isValid = ::OpenAPI::fromJsonValue(m_consistent_read, json[QString("ConsistentRead")]);
    m_consistent_read_isSet = !json[QString("ConsistentRead")].isNull() && m_consistent_read_isValid;
}

QString OAIScanInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScanInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_index_name_isSet) {
        obj.insert(QString("IndexName"), ::OpenAPI::toJsonValue(m_index_name));
    }
    if (m_attributes_to_get.isSet()) {
        obj.insert(QString("AttributesToGet"), ::OpenAPI::toJsonValue(m_attributes_to_get));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_select.isSet()) {
        obj.insert(QString("Select"), ::OpenAPI::toJsonValue(m_select));
    }
    if (m_scan_filter.isSet()) {
        obj.insert(QString("ScanFilter"), ::OpenAPI::toJsonValue(m_scan_filter));
    }
    if (m_conditional_operator.isSet()) {
        obj.insert(QString("ConditionalOperator"), ::OpenAPI::toJsonValue(m_conditional_operator));
    }
    if (m_exclusive_start_key.isSet()) {
        obj.insert(QString("ExclusiveStartKey"), ::OpenAPI::toJsonValue(m_exclusive_start_key));
    }
    if (m_return_consumed_capacity.isSet()) {
        obj.insert(QString("ReturnConsumedCapacity"), ::OpenAPI::toJsonValue(m_return_consumed_capacity));
    }
    if (m_total_segments_isSet) {
        obj.insert(QString("TotalSegments"), ::OpenAPI::toJsonValue(m_total_segments));
    }
    if (m_segment_isSet) {
        obj.insert(QString("Segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_projection_expression_isSet) {
        obj.insert(QString("ProjectionExpression"), ::OpenAPI::toJsonValue(m_projection_expression));
    }
    if (m_filter_expression_isSet) {
        obj.insert(QString("FilterExpression"), ::OpenAPI::toJsonValue(m_filter_expression));
    }
    if (m_expression_attribute_names.isSet()) {
        obj.insert(QString("ExpressionAttributeNames"), ::OpenAPI::toJsonValue(m_expression_attribute_names));
    }
    if (m_expression_attribute_values.isSet()) {
        obj.insert(QString("ExpressionAttributeValues"), ::OpenAPI::toJsonValue(m_expression_attribute_values));
    }
    if (m_consistent_read_isSet) {
        obj.insert(QString("ConsistentRead"), ::OpenAPI::toJsonValue(m_consistent_read));
    }
    return obj;
}

QString OAIScanInput::getTableName() const {
    return m_table_name;
}
void OAIScanInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIScanInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIScanInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIScanInput::getIndexName() const {
    return m_index_name;
}
void OAIScanInput::setIndexName(const QString &index_name) {
    m_index_name = index_name;
    m_index_name_isSet = true;
}

bool OAIScanInput::is_index_name_Set() const{
    return m_index_name_isSet;
}

bool OAIScanInput::is_index_name_Valid() const{
    return m_index_name_isValid;
}

QList OAIScanInput::getAttributesToGet() const {
    return m_attributes_to_get;
}
void OAIScanInput::setAttributesToGet(const QList &attributes_to_get) {
    m_attributes_to_get = attributes_to_get;
    m_attributes_to_get_isSet = true;
}

bool OAIScanInput::is_attributes_to_get_Set() const{
    return m_attributes_to_get_isSet;
}

bool OAIScanInput::is_attributes_to_get_Valid() const{
    return m_attributes_to_get_isValid;
}

qint32 OAIScanInput::getLimit() const {
    return m_limit;
}
void OAIScanInput::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIScanInput::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIScanInput::is_limit_Valid() const{
    return m_limit_isValid;
}

OAISelect OAIScanInput::getSelect() const {
    return m_select;
}
void OAIScanInput::setSelect(const OAISelect &select) {
    m_select = select;
    m_select_isSet = true;
}

bool OAIScanInput::is_select_Set() const{
    return m_select_isSet;
}

bool OAIScanInput::is_select_Valid() const{
    return m_select_isValid;
}

QMap OAIScanInput::getScanFilter() const {
    return m_scan_filter;
}
void OAIScanInput::setScanFilter(const QMap &scan_filter) {
    m_scan_filter = scan_filter;
    m_scan_filter_isSet = true;
}

bool OAIScanInput::is_scan_filter_Set() const{
    return m_scan_filter_isSet;
}

bool OAIScanInput::is_scan_filter_Valid() const{
    return m_scan_filter_isValid;
}

OAIConditionalOperator OAIScanInput::getConditionalOperator() const {
    return m_conditional_operator;
}
void OAIScanInput::setConditionalOperator(const OAIConditionalOperator &conditional_operator) {
    m_conditional_operator = conditional_operator;
    m_conditional_operator_isSet = true;
}

bool OAIScanInput::is_conditional_operator_Set() const{
    return m_conditional_operator_isSet;
}

bool OAIScanInput::is_conditional_operator_Valid() const{
    return m_conditional_operator_isValid;
}

QMap OAIScanInput::getExclusiveStartKey() const {
    return m_exclusive_start_key;
}
void OAIScanInput::setExclusiveStartKey(const QMap &exclusive_start_key) {
    m_exclusive_start_key = exclusive_start_key;
    m_exclusive_start_key_isSet = true;
}

bool OAIScanInput::is_exclusive_start_key_Set() const{
    return m_exclusive_start_key_isSet;
}

bool OAIScanInput::is_exclusive_start_key_Valid() const{
    return m_exclusive_start_key_isValid;
}

OAIReturnConsumedCapacity OAIScanInput::getReturnConsumedCapacity() const {
    return m_return_consumed_capacity;
}
void OAIScanInput::setReturnConsumedCapacity(const OAIReturnConsumedCapacity &return_consumed_capacity) {
    m_return_consumed_capacity = return_consumed_capacity;
    m_return_consumed_capacity_isSet = true;
}

bool OAIScanInput::is_return_consumed_capacity_Set() const{
    return m_return_consumed_capacity_isSet;
}

bool OAIScanInput::is_return_consumed_capacity_Valid() const{
    return m_return_consumed_capacity_isValid;
}

qint32 OAIScanInput::getTotalSegments() const {
    return m_total_segments;
}
void OAIScanInput::setTotalSegments(const qint32 &total_segments) {
    m_total_segments = total_segments;
    m_total_segments_isSet = true;
}

bool OAIScanInput::is_total_segments_Set() const{
    return m_total_segments_isSet;
}

bool OAIScanInput::is_total_segments_Valid() const{
    return m_total_segments_isValid;
}

qint32 OAIScanInput::getSegment() const {
    return m_segment;
}
void OAIScanInput::setSegment(const qint32 &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAIScanInput::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAIScanInput::is_segment_Valid() const{
    return m_segment_isValid;
}

QString OAIScanInput::getProjectionExpression() const {
    return m_projection_expression;
}
void OAIScanInput::setProjectionExpression(const QString &projection_expression) {
    m_projection_expression = projection_expression;
    m_projection_expression_isSet = true;
}

bool OAIScanInput::is_projection_expression_Set() const{
    return m_projection_expression_isSet;
}

bool OAIScanInput::is_projection_expression_Valid() const{
    return m_projection_expression_isValid;
}

QString OAIScanInput::getFilterExpression() const {
    return m_filter_expression;
}
void OAIScanInput::setFilterExpression(const QString &filter_expression) {
    m_filter_expression = filter_expression;
    m_filter_expression_isSet = true;
}

bool OAIScanInput::is_filter_expression_Set() const{
    return m_filter_expression_isSet;
}

bool OAIScanInput::is_filter_expression_Valid() const{
    return m_filter_expression_isValid;
}

QMap OAIScanInput::getExpressionAttributeNames() const {
    return m_expression_attribute_names;
}
void OAIScanInput::setExpressionAttributeNames(const QMap &expression_attribute_names) {
    m_expression_attribute_names = expression_attribute_names;
    m_expression_attribute_names_isSet = true;
}

bool OAIScanInput::is_expression_attribute_names_Set() const{
    return m_expression_attribute_names_isSet;
}

bool OAIScanInput::is_expression_attribute_names_Valid() const{
    return m_expression_attribute_names_isValid;
}

QMap OAIScanInput::getExpressionAttributeValues() const {
    return m_expression_attribute_values;
}
void OAIScanInput::setExpressionAttributeValues(const QMap &expression_attribute_values) {
    m_expression_attribute_values = expression_attribute_values;
    m_expression_attribute_values_isSet = true;
}

bool OAIScanInput::is_expression_attribute_values_Set() const{
    return m_expression_attribute_values_isSet;
}

bool OAIScanInput::is_expression_attribute_values_Valid() const{
    return m_expression_attribute_values_isValid;
}

bool OAIScanInput::getConsistentRead() const {
    return m_consistent_read;
}
void OAIScanInput::setConsistentRead(const bool &consistent_read) {
    m_consistent_read = consistent_read;
    m_consistent_read_isSet = true;
}

bool OAIScanInput::is_consistent_read_Set() const{
    return m_consistent_read_isSet;
}

bool OAIScanInput::is_consistent_read_Valid() const{
    return m_consistent_read_isValid;
}

bool OAIScanInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_to_get.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_start_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_consumed_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_attribute_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistent_read_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScanInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && true;
}

} // namespace OpenAPI
