/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteItemOutput_ItemCollectionMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteItemOutput_ItemCollectionMetrics::OAIDeleteItemOutput_ItemCollectionMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteItemOutput_ItemCollectionMetrics::OAIDeleteItemOutput_ItemCollectionMetrics() {
    this->initializeModel();
}

OAIDeleteItemOutput_ItemCollectionMetrics::~OAIDeleteItemOutput_ItemCollectionMetrics() {}

void OAIDeleteItemOutput_ItemCollectionMetrics::initializeModel() {

    m_item_collection_key_isSet = false;
    m_item_collection_key_isValid = false;

    m_size_estimate_range_gb_isSet = false;
    m_size_estimate_range_gb_isValid = false;
}

void OAIDeleteItemOutput_ItemCollectionMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteItemOutput_ItemCollectionMetrics::fromJsonObject(QJsonObject json) {

    m_item_collection_key_isValid = ::OpenAPI::fromJsonValue(m_item_collection_key, json[QString("ItemCollectionKey")]);
    m_item_collection_key_isSet = !json[QString("ItemCollectionKey")].isNull() && m_item_collection_key_isValid;

    m_size_estimate_range_gb_isValid = ::OpenAPI::fromJsonValue(m_size_estimate_range_gb, json[QString("SizeEstimateRangeGB")]);
    m_size_estimate_range_gb_isSet = !json[QString("SizeEstimateRangeGB")].isNull() && m_size_estimate_range_gb_isValid;
}

QString OAIDeleteItemOutput_ItemCollectionMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteItemOutput_ItemCollectionMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_item_collection_key.isSet()) {
        obj.insert(QString("ItemCollectionKey"), ::OpenAPI::toJsonValue(m_item_collection_key));
    }
    if (m_size_estimate_range_gb.isSet()) {
        obj.insert(QString("SizeEstimateRangeGB"), ::OpenAPI::toJsonValue(m_size_estimate_range_gb));
    }
    return obj;
}

QMap OAIDeleteItemOutput_ItemCollectionMetrics::getItemCollectionKey() const {
    return m_item_collection_key;
}
void OAIDeleteItemOutput_ItemCollectionMetrics::setItemCollectionKey(const QMap &item_collection_key) {
    m_item_collection_key = item_collection_key;
    m_item_collection_key_isSet = true;
}

bool OAIDeleteItemOutput_ItemCollectionMetrics::is_item_collection_key_Set() const{
    return m_item_collection_key_isSet;
}

bool OAIDeleteItemOutput_ItemCollectionMetrics::is_item_collection_key_Valid() const{
    return m_item_collection_key_isValid;
}

QList OAIDeleteItemOutput_ItemCollectionMetrics::getSizeEstimateRangeGb() const {
    return m_size_estimate_range_gb;
}
void OAIDeleteItemOutput_ItemCollectionMetrics::setSizeEstimateRangeGb(const QList &size_estimate_range_gb) {
    m_size_estimate_range_gb = size_estimate_range_gb;
    m_size_estimate_range_gb_isSet = true;
}

bool OAIDeleteItemOutput_ItemCollectionMetrics::is_size_estimate_range_gb_Set() const{
    return m_size_estimate_range_gb_isSet;
}

bool OAIDeleteItemOutput_ItemCollectionMetrics::is_size_estimate_range_gb_Valid() const{
    return m_size_estimate_range_gb_isValid;
}

bool OAIDeleteItemOutput_ItemCollectionMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_collection_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_estimate_range_gb.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteItemOutput_ItemCollectionMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
