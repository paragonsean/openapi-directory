/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISourceTableDetails.h
 *
 * Contains the details of the table when the backup was created. 
 */

#ifndef OAISourceTableDetails_H
#define OAISourceTableDetails_H

#include <QJsonObject>

#include "OAIBillingMode.h"
#include "OAISourceTableDetails_ProvisionedThroughput.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISourceTableDetails_ProvisionedThroughput;

class OAISourceTableDetails : public OAIObject {
public:
    OAISourceTableDetails();
    OAISourceTableDetails(QString json);
    ~OAISourceTableDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTableName() const;
    void setTableName(const QString &table_name);
    bool is_table_name_Set() const;
    bool is_table_name_Valid() const;

    QString getTableId() const;
    void setTableId(const QString &table_id);
    bool is_table_id_Set() const;
    bool is_table_id_Valid() const;

    QString getTableArn() const;
    void setTableArn(const QString &table_arn);
    bool is_table_arn_Set() const;
    bool is_table_arn_Valid() const;

    qint32 getTableSizeBytes() const;
    void setTableSizeBytes(const qint32 &table_size_bytes);
    bool is_table_size_bytes_Set() const;
    bool is_table_size_bytes_Valid() const;

    QList getKeySchema() const;
    void setKeySchema(const QList &key_schema);
    bool is_key_schema_Set() const;
    bool is_key_schema_Valid() const;

    QDateTime getTableCreationDateTime() const;
    void setTableCreationDateTime(const QDateTime &table_creation_date_time);
    bool is_table_creation_date_time_Set() const;
    bool is_table_creation_date_time_Valid() const;

    OAISourceTableDetails_ProvisionedThroughput getProvisionedThroughput() const;
    void setProvisionedThroughput(const OAISourceTableDetails_ProvisionedThroughput &provisioned_throughput);
    bool is_provisioned_throughput_Set() const;
    bool is_provisioned_throughput_Valid() const;

    qint32 getItemCount() const;
    void setItemCount(const qint32 &item_count);
    bool is_item_count_Set() const;
    bool is_item_count_Valid() const;

    OAIBillingMode getBillingMode() const;
    void setBillingMode(const OAIBillingMode &billing_mode);
    bool is_billing_mode_Set() const;
    bool is_billing_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_table_name;
    bool m_table_name_isSet;
    bool m_table_name_isValid;

    QString m_table_id;
    bool m_table_id_isSet;
    bool m_table_id_isValid;

    QString m_table_arn;
    bool m_table_arn_isSet;
    bool m_table_arn_isValid;

    qint32 m_table_size_bytes;
    bool m_table_size_bytes_isSet;
    bool m_table_size_bytes_isValid;

    QList m_key_schema;
    bool m_key_schema_isSet;
    bool m_key_schema_isValid;

    QDateTime m_table_creation_date_time;
    bool m_table_creation_date_time_isSet;
    bool m_table_creation_date_time_isValid;

    OAISourceTableDetails_ProvisionedThroughput m_provisioned_throughput;
    bool m_provisioned_throughput_isSet;
    bool m_provisioned_throughput_isValid;

    qint32 m_item_count;
    bool m_item_count_isSet;
    bool m_item_count_isValid;

    OAIBillingMode m_billing_mode;
    bool m_billing_mode_isSet;
    bool m_billing_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISourceTableDetails)

#endif // OAISourceTableDetails_H
