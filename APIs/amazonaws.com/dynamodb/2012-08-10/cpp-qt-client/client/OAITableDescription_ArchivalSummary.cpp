/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableDescription_ArchivalSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableDescription_ArchivalSummary::OAITableDescription_ArchivalSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableDescription_ArchivalSummary::OAITableDescription_ArchivalSummary() {
    this->initializeModel();
}

OAITableDescription_ArchivalSummary::~OAITableDescription_ArchivalSummary() {}

void OAITableDescription_ArchivalSummary::initializeModel() {

    m_archival_date_time_isSet = false;
    m_archival_date_time_isValid = false;

    m_archival_reason_isSet = false;
    m_archival_reason_isValid = false;

    m_archival_backup_arn_isSet = false;
    m_archival_backup_arn_isValid = false;
}

void OAITableDescription_ArchivalSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableDescription_ArchivalSummary::fromJsonObject(QJsonObject json) {

    m_archival_date_time_isValid = ::OpenAPI::fromJsonValue(m_archival_date_time, json[QString("ArchivalDateTime")]);
    m_archival_date_time_isSet = !json[QString("ArchivalDateTime")].isNull() && m_archival_date_time_isValid;

    m_archival_reason_isValid = ::OpenAPI::fromJsonValue(m_archival_reason, json[QString("ArchivalReason")]);
    m_archival_reason_isSet = !json[QString("ArchivalReason")].isNull() && m_archival_reason_isValid;

    m_archival_backup_arn_isValid = ::OpenAPI::fromJsonValue(m_archival_backup_arn, json[QString("ArchivalBackupArn")]);
    m_archival_backup_arn_isSet = !json[QString("ArchivalBackupArn")].isNull() && m_archival_backup_arn_isValid;
}

QString OAITableDescription_ArchivalSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableDescription_ArchivalSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_archival_date_time_isSet) {
        obj.insert(QString("ArchivalDateTime"), ::OpenAPI::toJsonValue(m_archival_date_time));
    }
    if (m_archival_reason_isSet) {
        obj.insert(QString("ArchivalReason"), ::OpenAPI::toJsonValue(m_archival_reason));
    }
    if (m_archival_backup_arn_isSet) {
        obj.insert(QString("ArchivalBackupArn"), ::OpenAPI::toJsonValue(m_archival_backup_arn));
    }
    return obj;
}

QDateTime OAITableDescription_ArchivalSummary::getArchivalDateTime() const {
    return m_archival_date_time;
}
void OAITableDescription_ArchivalSummary::setArchivalDateTime(const QDateTime &archival_date_time) {
    m_archival_date_time = archival_date_time;
    m_archival_date_time_isSet = true;
}

bool OAITableDescription_ArchivalSummary::is_archival_date_time_Set() const{
    return m_archival_date_time_isSet;
}

bool OAITableDescription_ArchivalSummary::is_archival_date_time_Valid() const{
    return m_archival_date_time_isValid;
}

QString OAITableDescription_ArchivalSummary::getArchivalReason() const {
    return m_archival_reason;
}
void OAITableDescription_ArchivalSummary::setArchivalReason(const QString &archival_reason) {
    m_archival_reason = archival_reason;
    m_archival_reason_isSet = true;
}

bool OAITableDescription_ArchivalSummary::is_archival_reason_Set() const{
    return m_archival_reason_isSet;
}

bool OAITableDescription_ArchivalSummary::is_archival_reason_Valid() const{
    return m_archival_reason_isValid;
}

QString OAITableDescription_ArchivalSummary::getArchivalBackupArn() const {
    return m_archival_backup_arn;
}
void OAITableDescription_ArchivalSummary::setArchivalBackupArn(const QString &archival_backup_arn) {
    m_archival_backup_arn = archival_backup_arn;
    m_archival_backup_arn_isSet = true;
}

bool OAITableDescription_ArchivalSummary::is_archival_backup_arn_Set() const{
    return m_archival_backup_arn_isSet;
}

bool OAITableDescription_ArchivalSummary::is_archival_backup_arn_Valid() const{
    return m_archival_backup_arn_isValid;
}

bool OAITableDescription_ArchivalSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archival_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archival_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archival_backup_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableDescription_ArchivalSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
