/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeContributorInsightsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeContributorInsightsOutput::OAIDescribeContributorInsightsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeContributorInsightsOutput::OAIDescribeContributorInsightsOutput() {
    this->initializeModel();
}

OAIDescribeContributorInsightsOutput::~OAIDescribeContributorInsightsOutput() {}

void OAIDescribeContributorInsightsOutput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_index_name_isSet = false;
    m_index_name_isValid = false;

    m_contributor_insights_rule_list_isSet = false;
    m_contributor_insights_rule_list_isValid = false;

    m_contributor_insights_status_isSet = false;
    m_contributor_insights_status_isValid = false;

    m_last_update_date_time_isSet = false;
    m_last_update_date_time_isValid = false;

    m_failure_exception_isSet = false;
    m_failure_exception_isValid = false;
}

void OAIDescribeContributorInsightsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeContributorInsightsOutput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_index_name_isValid = ::OpenAPI::fromJsonValue(m_index_name, json[QString("IndexName")]);
    m_index_name_isSet = !json[QString("IndexName")].isNull() && m_index_name_isValid;

    m_contributor_insights_rule_list_isValid = ::OpenAPI::fromJsonValue(m_contributor_insights_rule_list, json[QString("ContributorInsightsRuleList")]);
    m_contributor_insights_rule_list_isSet = !json[QString("ContributorInsightsRuleList")].isNull() && m_contributor_insights_rule_list_isValid;

    m_contributor_insights_status_isValid = ::OpenAPI::fromJsonValue(m_contributor_insights_status, json[QString("ContributorInsightsStatus")]);
    m_contributor_insights_status_isSet = !json[QString("ContributorInsightsStatus")].isNull() && m_contributor_insights_status_isValid;

    m_last_update_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_date_time, json[QString("LastUpdateDateTime")]);
    m_last_update_date_time_isSet = !json[QString("LastUpdateDateTime")].isNull() && m_last_update_date_time_isValid;

    m_failure_exception_isValid = ::OpenAPI::fromJsonValue(m_failure_exception, json[QString("FailureException")]);
    m_failure_exception_isSet = !json[QString("FailureException")].isNull() && m_failure_exception_isValid;
}

QString OAIDescribeContributorInsightsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeContributorInsightsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_index_name_isSet) {
        obj.insert(QString("IndexName"), ::OpenAPI::toJsonValue(m_index_name));
    }
    if (m_contributor_insights_rule_list.isSet()) {
        obj.insert(QString("ContributorInsightsRuleList"), ::OpenAPI::toJsonValue(m_contributor_insights_rule_list));
    }
    if (m_contributor_insights_status.isSet()) {
        obj.insert(QString("ContributorInsightsStatus"), ::OpenAPI::toJsonValue(m_contributor_insights_status));
    }
    if (m_last_update_date_time_isSet) {
        obj.insert(QString("LastUpdateDateTime"), ::OpenAPI::toJsonValue(m_last_update_date_time));
    }
    if (m_failure_exception.isSet()) {
        obj.insert(QString("FailureException"), ::OpenAPI::toJsonValue(m_failure_exception));
    }
    return obj;
}

QString OAIDescribeContributorInsightsOutput::getTableName() const {
    return m_table_name;
}
void OAIDescribeContributorInsightsOutput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDescribeContributorInsightsOutput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDescribeContributorInsightsOutput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIDescribeContributorInsightsOutput::getIndexName() const {
    return m_index_name;
}
void OAIDescribeContributorInsightsOutput::setIndexName(const QString &index_name) {
    m_index_name = index_name;
    m_index_name_isSet = true;
}

bool OAIDescribeContributorInsightsOutput::is_index_name_Set() const{
    return m_index_name_isSet;
}

bool OAIDescribeContributorInsightsOutput::is_index_name_Valid() const{
    return m_index_name_isValid;
}

QList OAIDescribeContributorInsightsOutput::getContributorInsightsRuleList() const {
    return m_contributor_insights_rule_list;
}
void OAIDescribeContributorInsightsOutput::setContributorInsightsRuleList(const QList &contributor_insights_rule_list) {
    m_contributor_insights_rule_list = contributor_insights_rule_list;
    m_contributor_insights_rule_list_isSet = true;
}

bool OAIDescribeContributorInsightsOutput::is_contributor_insights_rule_list_Set() const{
    return m_contributor_insights_rule_list_isSet;
}

bool OAIDescribeContributorInsightsOutput::is_contributor_insights_rule_list_Valid() const{
    return m_contributor_insights_rule_list_isValid;
}

OAIContributorInsightsStatus OAIDescribeContributorInsightsOutput::getContributorInsightsStatus() const {
    return m_contributor_insights_status;
}
void OAIDescribeContributorInsightsOutput::setContributorInsightsStatus(const OAIContributorInsightsStatus &contributor_insights_status) {
    m_contributor_insights_status = contributor_insights_status;
    m_contributor_insights_status_isSet = true;
}

bool OAIDescribeContributorInsightsOutput::is_contributor_insights_status_Set() const{
    return m_contributor_insights_status_isSet;
}

bool OAIDescribeContributorInsightsOutput::is_contributor_insights_status_Valid() const{
    return m_contributor_insights_status_isValid;
}

QDateTime OAIDescribeContributorInsightsOutput::getLastUpdateDateTime() const {
    return m_last_update_date_time;
}
void OAIDescribeContributorInsightsOutput::setLastUpdateDateTime(const QDateTime &last_update_date_time) {
    m_last_update_date_time = last_update_date_time;
    m_last_update_date_time_isSet = true;
}

bool OAIDescribeContributorInsightsOutput::is_last_update_date_time_Set() const{
    return m_last_update_date_time_isSet;
}

bool OAIDescribeContributorInsightsOutput::is_last_update_date_time_Valid() const{
    return m_last_update_date_time_isValid;
}

OAIDescribeContributorInsightsOutput_FailureException OAIDescribeContributorInsightsOutput::getFailureException() const {
    return m_failure_exception;
}
void OAIDescribeContributorInsightsOutput::setFailureException(const OAIDescribeContributorInsightsOutput_FailureException &failure_exception) {
    m_failure_exception = failure_exception;
    m_failure_exception_isSet = true;
}

bool OAIDescribeContributorInsightsOutput::is_failure_exception_Set() const{
    return m_failure_exception_isSet;
}

bool OAIDescribeContributorInsightsOutput::is_failure_exception_Valid() const{
    return m_failure_exception_isValid;
}

bool OAIDescribeContributorInsightsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_insights_rule_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_insights_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeContributorInsightsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
