/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreTableFromBackupInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreTableFromBackupInput::OAIRestoreTableFromBackupInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreTableFromBackupInput::OAIRestoreTableFromBackupInput() {
    this->initializeModel();
}

OAIRestoreTableFromBackupInput::~OAIRestoreTableFromBackupInput() {}

void OAIRestoreTableFromBackupInput::initializeModel() {

    m_target_table_name_isSet = false;
    m_target_table_name_isValid = false;

    m_backup_arn_isSet = false;
    m_backup_arn_isValid = false;

    m_billing_mode_override_isSet = false;
    m_billing_mode_override_isValid = false;

    m_global_secondary_index_override_isSet = false;
    m_global_secondary_index_override_isValid = false;

    m_local_secondary_index_override_isSet = false;
    m_local_secondary_index_override_isValid = false;

    m_provisioned_throughput_override_isSet = false;
    m_provisioned_throughput_override_isValid = false;

    m_sse_specification_override_isSet = false;
    m_sse_specification_override_isValid = false;
}

void OAIRestoreTableFromBackupInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreTableFromBackupInput::fromJsonObject(QJsonObject json) {

    m_target_table_name_isValid = ::OpenAPI::fromJsonValue(m_target_table_name, json[QString("TargetTableName")]);
    m_target_table_name_isSet = !json[QString("TargetTableName")].isNull() && m_target_table_name_isValid;

    m_backup_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_arn, json[QString("BackupArn")]);
    m_backup_arn_isSet = !json[QString("BackupArn")].isNull() && m_backup_arn_isValid;

    m_billing_mode_override_isValid = ::OpenAPI::fromJsonValue(m_billing_mode_override, json[QString("BillingModeOverride")]);
    m_billing_mode_override_isSet = !json[QString("BillingModeOverride")].isNull() && m_billing_mode_override_isValid;

    m_global_secondary_index_override_isValid = ::OpenAPI::fromJsonValue(m_global_secondary_index_override, json[QString("GlobalSecondaryIndexOverride")]);
    m_global_secondary_index_override_isSet = !json[QString("GlobalSecondaryIndexOverride")].isNull() && m_global_secondary_index_override_isValid;

    m_local_secondary_index_override_isValid = ::OpenAPI::fromJsonValue(m_local_secondary_index_override, json[QString("LocalSecondaryIndexOverride")]);
    m_local_secondary_index_override_isSet = !json[QString("LocalSecondaryIndexOverride")].isNull() && m_local_secondary_index_override_isValid;

    m_provisioned_throughput_override_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput_override, json[QString("ProvisionedThroughputOverride")]);
    m_provisioned_throughput_override_isSet = !json[QString("ProvisionedThroughputOverride")].isNull() && m_provisioned_throughput_override_isValid;

    m_sse_specification_override_isValid = ::OpenAPI::fromJsonValue(m_sse_specification_override, json[QString("SSESpecificationOverride")]);
    m_sse_specification_override_isSet = !json[QString("SSESpecificationOverride")].isNull() && m_sse_specification_override_isValid;
}

QString OAIRestoreTableFromBackupInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreTableFromBackupInput::asJsonObject() const {
    QJsonObject obj;
    if (m_target_table_name_isSet) {
        obj.insert(QString("TargetTableName"), ::OpenAPI::toJsonValue(m_target_table_name));
    }
    if (m_backup_arn_isSet) {
        obj.insert(QString("BackupArn"), ::OpenAPI::toJsonValue(m_backup_arn));
    }
    if (m_billing_mode_override.isSet()) {
        obj.insert(QString("BillingModeOverride"), ::OpenAPI::toJsonValue(m_billing_mode_override));
    }
    if (m_global_secondary_index_override.isSet()) {
        obj.insert(QString("GlobalSecondaryIndexOverride"), ::OpenAPI::toJsonValue(m_global_secondary_index_override));
    }
    if (m_local_secondary_index_override.isSet()) {
        obj.insert(QString("LocalSecondaryIndexOverride"), ::OpenAPI::toJsonValue(m_local_secondary_index_override));
    }
    if (m_provisioned_throughput_override.isSet()) {
        obj.insert(QString("ProvisionedThroughputOverride"), ::OpenAPI::toJsonValue(m_provisioned_throughput_override));
    }
    if (m_sse_specification_override.isSet()) {
        obj.insert(QString("SSESpecificationOverride"), ::OpenAPI::toJsonValue(m_sse_specification_override));
    }
    return obj;
}

QString OAIRestoreTableFromBackupInput::getTargetTableName() const {
    return m_target_table_name;
}
void OAIRestoreTableFromBackupInput::setTargetTableName(const QString &target_table_name) {
    m_target_table_name = target_table_name;
    m_target_table_name_isSet = true;
}

bool OAIRestoreTableFromBackupInput::is_target_table_name_Set() const{
    return m_target_table_name_isSet;
}

bool OAIRestoreTableFromBackupInput::is_target_table_name_Valid() const{
    return m_target_table_name_isValid;
}

QString OAIRestoreTableFromBackupInput::getBackupArn() const {
    return m_backup_arn;
}
void OAIRestoreTableFromBackupInput::setBackupArn(const QString &backup_arn) {
    m_backup_arn = backup_arn;
    m_backup_arn_isSet = true;
}

bool OAIRestoreTableFromBackupInput::is_backup_arn_Set() const{
    return m_backup_arn_isSet;
}

bool OAIRestoreTableFromBackupInput::is_backup_arn_Valid() const{
    return m_backup_arn_isValid;
}

OAIBillingMode OAIRestoreTableFromBackupInput::getBillingModeOverride() const {
    return m_billing_mode_override;
}
void OAIRestoreTableFromBackupInput::setBillingModeOverride(const OAIBillingMode &billing_mode_override) {
    m_billing_mode_override = billing_mode_override;
    m_billing_mode_override_isSet = true;
}

bool OAIRestoreTableFromBackupInput::is_billing_mode_override_Set() const{
    return m_billing_mode_override_isSet;
}

bool OAIRestoreTableFromBackupInput::is_billing_mode_override_Valid() const{
    return m_billing_mode_override_isValid;
}

QList OAIRestoreTableFromBackupInput::getGlobalSecondaryIndexOverride() const {
    return m_global_secondary_index_override;
}
void OAIRestoreTableFromBackupInput::setGlobalSecondaryIndexOverride(const QList &global_secondary_index_override) {
    m_global_secondary_index_override = global_secondary_index_override;
    m_global_secondary_index_override_isSet = true;
}

bool OAIRestoreTableFromBackupInput::is_global_secondary_index_override_Set() const{
    return m_global_secondary_index_override_isSet;
}

bool OAIRestoreTableFromBackupInput::is_global_secondary_index_override_Valid() const{
    return m_global_secondary_index_override_isValid;
}

QList OAIRestoreTableFromBackupInput::getLocalSecondaryIndexOverride() const {
    return m_local_secondary_index_override;
}
void OAIRestoreTableFromBackupInput::setLocalSecondaryIndexOverride(const QList &local_secondary_index_override) {
    m_local_secondary_index_override = local_secondary_index_override;
    m_local_secondary_index_override_isSet = true;
}

bool OAIRestoreTableFromBackupInput::is_local_secondary_index_override_Set() const{
    return m_local_secondary_index_override_isSet;
}

bool OAIRestoreTableFromBackupInput::is_local_secondary_index_override_Valid() const{
    return m_local_secondary_index_override_isValid;
}

OAIRestoreTableFromBackupInput_ProvisionedThroughputOverride OAIRestoreTableFromBackupInput::getProvisionedThroughputOverride() const {
    return m_provisioned_throughput_override;
}
void OAIRestoreTableFromBackupInput::setProvisionedThroughputOverride(const OAIRestoreTableFromBackupInput_ProvisionedThroughputOverride &provisioned_throughput_override) {
    m_provisioned_throughput_override = provisioned_throughput_override;
    m_provisioned_throughput_override_isSet = true;
}

bool OAIRestoreTableFromBackupInput::is_provisioned_throughput_override_Set() const{
    return m_provisioned_throughput_override_isSet;
}

bool OAIRestoreTableFromBackupInput::is_provisioned_throughput_override_Valid() const{
    return m_provisioned_throughput_override_isValid;
}

OAIRestoreTableFromBackupInput_SSESpecificationOverride OAIRestoreTableFromBackupInput::getSseSpecificationOverride() const {
    return m_sse_specification_override;
}
void OAIRestoreTableFromBackupInput::setSseSpecificationOverride(const OAIRestoreTableFromBackupInput_SSESpecificationOverride &sse_specification_override) {
    m_sse_specification_override = sse_specification_override;
    m_sse_specification_override_isSet = true;
}

bool OAIRestoreTableFromBackupInput::is_sse_specification_override_Set() const{
    return m_sse_specification_override_isSet;
}

bool OAIRestoreTableFromBackupInput::is_sse_specification_override_Valid() const{
    return m_sse_specification_override_isValid;
}

bool OAIRestoreTableFromBackupInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_mode_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_secondary_index_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_secondary_index_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_specification_override.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreTableFromBackupInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_table_name_isValid && m_backup_arn_isValid && true;
}

} // namespace OpenAPI
