/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceTableFeatureDetails_SSEDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceTableFeatureDetails_SSEDescription::OAISourceTableFeatureDetails_SSEDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceTableFeatureDetails_SSEDescription::OAISourceTableFeatureDetails_SSEDescription() {
    this->initializeModel();
}

OAISourceTableFeatureDetails_SSEDescription::~OAISourceTableFeatureDetails_SSEDescription() {}

void OAISourceTableFeatureDetails_SSEDescription::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_sse_type_isSet = false;
    m_sse_type_isValid = false;

    m_kms_master_key_arn_isSet = false;
    m_kms_master_key_arn_isValid = false;

    m_inaccessible_encryption_date_time_isSet = false;
    m_inaccessible_encryption_date_time_isValid = false;
}

void OAISourceTableFeatureDetails_SSEDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceTableFeatureDetails_SSEDescription::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_sse_type_isValid = ::OpenAPI::fromJsonValue(m_sse_type, json[QString("SSEType")]);
    m_sse_type_isSet = !json[QString("SSEType")].isNull() && m_sse_type_isValid;

    m_kms_master_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_master_key_arn, json[QString("KMSMasterKeyArn")]);
    m_kms_master_key_arn_isSet = !json[QString("KMSMasterKeyArn")].isNull() && m_kms_master_key_arn_isValid;

    m_inaccessible_encryption_date_time_isValid = ::OpenAPI::fromJsonValue(m_inaccessible_encryption_date_time, json[QString("InaccessibleEncryptionDateTime")]);
    m_inaccessible_encryption_date_time_isSet = !json[QString("InaccessibleEncryptionDateTime")].isNull() && m_inaccessible_encryption_date_time_isValid;
}

QString OAISourceTableFeatureDetails_SSEDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceTableFeatureDetails_SSEDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sse_type.isSet()) {
        obj.insert(QString("SSEType"), ::OpenAPI::toJsonValue(m_sse_type));
    }
    if (m_kms_master_key_arn_isSet) {
        obj.insert(QString("KMSMasterKeyArn"), ::OpenAPI::toJsonValue(m_kms_master_key_arn));
    }
    if (m_inaccessible_encryption_date_time_isSet) {
        obj.insert(QString("InaccessibleEncryptionDateTime"), ::OpenAPI::toJsonValue(m_inaccessible_encryption_date_time));
    }
    return obj;
}

OAISSEStatus OAISourceTableFeatureDetails_SSEDescription::getStatus() const {
    return m_status;
}
void OAISourceTableFeatureDetails_SSEDescription::setStatus(const OAISSEStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISourceTableFeatureDetails_SSEDescription::is_status_Set() const{
    return m_status_isSet;
}

bool OAISourceTableFeatureDetails_SSEDescription::is_status_Valid() const{
    return m_status_isValid;
}

OAISSEType OAISourceTableFeatureDetails_SSEDescription::getSseType() const {
    return m_sse_type;
}
void OAISourceTableFeatureDetails_SSEDescription::setSseType(const OAISSEType &sse_type) {
    m_sse_type = sse_type;
    m_sse_type_isSet = true;
}

bool OAISourceTableFeatureDetails_SSEDescription::is_sse_type_Set() const{
    return m_sse_type_isSet;
}

bool OAISourceTableFeatureDetails_SSEDescription::is_sse_type_Valid() const{
    return m_sse_type_isValid;
}

QString OAISourceTableFeatureDetails_SSEDescription::getKmsMasterKeyArn() const {
    return m_kms_master_key_arn;
}
void OAISourceTableFeatureDetails_SSEDescription::setKmsMasterKeyArn(const QString &kms_master_key_arn) {
    m_kms_master_key_arn = kms_master_key_arn;
    m_kms_master_key_arn_isSet = true;
}

bool OAISourceTableFeatureDetails_SSEDescription::is_kms_master_key_arn_Set() const{
    return m_kms_master_key_arn_isSet;
}

bool OAISourceTableFeatureDetails_SSEDescription::is_kms_master_key_arn_Valid() const{
    return m_kms_master_key_arn_isValid;
}

QDateTime OAISourceTableFeatureDetails_SSEDescription::getInaccessibleEncryptionDateTime() const {
    return m_inaccessible_encryption_date_time;
}
void OAISourceTableFeatureDetails_SSEDescription::setInaccessibleEncryptionDateTime(const QDateTime &inaccessible_encryption_date_time) {
    m_inaccessible_encryption_date_time = inaccessible_encryption_date_time;
    m_inaccessible_encryption_date_time_isSet = true;
}

bool OAISourceTableFeatureDetails_SSEDescription::is_inaccessible_encryption_date_time_Set() const{
    return m_inaccessible_encryption_date_time_isSet;
}

bool OAISourceTableFeatureDetails_SSEDescription::is_inaccessible_encryption_date_time_Valid() const{
    return m_inaccessible_encryption_date_time_isValid;
}

bool OAISourceTableFeatureDetails_SSEDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_master_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inaccessible_encryption_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceTableFeatureDetails_SSEDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
