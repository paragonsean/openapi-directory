/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactGetItem_Get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactGetItem_Get::OAITransactGetItem_Get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactGetItem_Get::OAITransactGetItem_Get() {
    this->initializeModel();
}

OAITransactGetItem_Get::~OAITransactGetItem_Get() {}

void OAITransactGetItem_Get::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_projection_expression_isSet = false;
    m_projection_expression_isValid = false;

    m_expression_attribute_names_isSet = false;
    m_expression_attribute_names_isValid = false;
}

void OAITransactGetItem_Get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactGetItem_Get::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_projection_expression_isValid = ::OpenAPI::fromJsonValue(m_projection_expression, json[QString("ProjectionExpression")]);
    m_projection_expression_isSet = !json[QString("ProjectionExpression")].isNull() && m_projection_expression_isValid;

    m_expression_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_expression_attribute_names, json[QString("ExpressionAttributeNames")]);
    m_expression_attribute_names_isSet = !json[QString("ExpressionAttributeNames")].isNull() && m_expression_attribute_names_isValid;
}

QString OAITransactGetItem_Get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactGetItem_Get::asJsonObject() const {
    QJsonObject obj;
    if (m_key.isSet()) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_projection_expression_isSet) {
        obj.insert(QString("ProjectionExpression"), ::OpenAPI::toJsonValue(m_projection_expression));
    }
    if (m_expression_attribute_names.isSet()) {
        obj.insert(QString("ExpressionAttributeNames"), ::OpenAPI::toJsonValue(m_expression_attribute_names));
    }
    return obj;
}

QMap OAITransactGetItem_Get::getKey() const {
    return m_key;
}
void OAITransactGetItem_Get::setKey(const QMap &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITransactGetItem_Get::is_key_Set() const{
    return m_key_isSet;
}

bool OAITransactGetItem_Get::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITransactGetItem_Get::getTableName() const {
    return m_table_name;
}
void OAITransactGetItem_Get::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAITransactGetItem_Get::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAITransactGetItem_Get::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAITransactGetItem_Get::getProjectionExpression() const {
    return m_projection_expression;
}
void OAITransactGetItem_Get::setProjectionExpression(const QString &projection_expression) {
    m_projection_expression = projection_expression;
    m_projection_expression_isSet = true;
}

bool OAITransactGetItem_Get::is_projection_expression_Set() const{
    return m_projection_expression_isSet;
}

bool OAITransactGetItem_Get::is_projection_expression_Valid() const{
    return m_projection_expression_isValid;
}

QMap OAITransactGetItem_Get::getExpressionAttributeNames() const {
    return m_expression_attribute_names;
}
void OAITransactGetItem_Get::setExpressionAttributeNames(const QMap &expression_attribute_names) {
    m_expression_attribute_names = expression_attribute_names;
    m_expression_attribute_names_isSet = true;
}

bool OAITransactGetItem_Get::is_expression_attribute_names_Set() const{
    return m_expression_attribute_names_isSet;
}

bool OAITransactGetItem_Get::is_expression_attribute_names_Valid() const{
    return m_expression_attribute_names_isValid;
}

bool OAITransactGetItem_Get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactGetItem_Get::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_table_name_isValid && true;
}

} // namespace OpenAPI
