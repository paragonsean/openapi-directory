/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalSecondaryIndexDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalSecondaryIndexDescription::OAIGlobalSecondaryIndexDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalSecondaryIndexDescription::OAIGlobalSecondaryIndexDescription() {
    this->initializeModel();
}

OAIGlobalSecondaryIndexDescription::~OAIGlobalSecondaryIndexDescription() {}

void OAIGlobalSecondaryIndexDescription::initializeModel() {

    m_index_name_isSet = false;
    m_index_name_isValid = false;

    m_key_schema_isSet = false;
    m_key_schema_isValid = false;

    m_projection_isSet = false;
    m_projection_isValid = false;

    m_index_status_isSet = false;
    m_index_status_isValid = false;

    m_backfilling_isSet = false;
    m_backfilling_isValid = false;

    m_provisioned_throughput_isSet = false;
    m_provisioned_throughput_isValid = false;

    m_index_size_bytes_isSet = false;
    m_index_size_bytes_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_index_arn_isSet = false;
    m_index_arn_isValid = false;
}

void OAIGlobalSecondaryIndexDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalSecondaryIndexDescription::fromJsonObject(QJsonObject json) {

    m_index_name_isValid = ::OpenAPI::fromJsonValue(m_index_name, json[QString("IndexName")]);
    m_index_name_isSet = !json[QString("IndexName")].isNull() && m_index_name_isValid;

    m_key_schema_isValid = ::OpenAPI::fromJsonValue(m_key_schema, json[QString("KeySchema")]);
    m_key_schema_isSet = !json[QString("KeySchema")].isNull() && m_key_schema_isValid;

    m_projection_isValid = ::OpenAPI::fromJsonValue(m_projection, json[QString("Projection")]);
    m_projection_isSet = !json[QString("Projection")].isNull() && m_projection_isValid;

    m_index_status_isValid = ::OpenAPI::fromJsonValue(m_index_status, json[QString("IndexStatus")]);
    m_index_status_isSet = !json[QString("IndexStatus")].isNull() && m_index_status_isValid;

    m_backfilling_isValid = ::OpenAPI::fromJsonValue(m_backfilling, json[QString("Backfilling")]);
    m_backfilling_isSet = !json[QString("Backfilling")].isNull() && m_backfilling_isValid;

    m_provisioned_throughput_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput, json[QString("ProvisionedThroughput")]);
    m_provisioned_throughput_isSet = !json[QString("ProvisionedThroughput")].isNull() && m_provisioned_throughput_isValid;

    m_index_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_index_size_bytes, json[QString("IndexSizeBytes")]);
    m_index_size_bytes_isSet = !json[QString("IndexSizeBytes")].isNull() && m_index_size_bytes_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("ItemCount")]);
    m_item_count_isSet = !json[QString("ItemCount")].isNull() && m_item_count_isValid;

    m_index_arn_isValid = ::OpenAPI::fromJsonValue(m_index_arn, json[QString("IndexArn")]);
    m_index_arn_isSet = !json[QString("IndexArn")].isNull() && m_index_arn_isValid;
}

QString OAIGlobalSecondaryIndexDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalSecondaryIndexDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_index_name_isSet) {
        obj.insert(QString("IndexName"), ::OpenAPI::toJsonValue(m_index_name));
    }
    if (m_key_schema.isSet()) {
        obj.insert(QString("KeySchema"), ::OpenAPI::toJsonValue(m_key_schema));
    }
    if (m_projection.isSet()) {
        obj.insert(QString("Projection"), ::OpenAPI::toJsonValue(m_projection));
    }
    if (m_index_status.isSet()) {
        obj.insert(QString("IndexStatus"), ::OpenAPI::toJsonValue(m_index_status));
    }
    if (m_backfilling_isSet) {
        obj.insert(QString("Backfilling"), ::OpenAPI::toJsonValue(m_backfilling));
    }
    if (m_provisioned_throughput.isSet()) {
        obj.insert(QString("ProvisionedThroughput"), ::OpenAPI::toJsonValue(m_provisioned_throughput));
    }
    if (m_index_size_bytes_isSet) {
        obj.insert(QString("IndexSizeBytes"), ::OpenAPI::toJsonValue(m_index_size_bytes));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("ItemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_index_arn_isSet) {
        obj.insert(QString("IndexArn"), ::OpenAPI::toJsonValue(m_index_arn));
    }
    return obj;
}

QString OAIGlobalSecondaryIndexDescription::getIndexName() const {
    return m_index_name;
}
void OAIGlobalSecondaryIndexDescription::setIndexName(const QString &index_name) {
    m_index_name = index_name;
    m_index_name_isSet = true;
}

bool OAIGlobalSecondaryIndexDescription::is_index_name_Set() const{
    return m_index_name_isSet;
}

bool OAIGlobalSecondaryIndexDescription::is_index_name_Valid() const{
    return m_index_name_isValid;
}

QList OAIGlobalSecondaryIndexDescription::getKeySchema() const {
    return m_key_schema;
}
void OAIGlobalSecondaryIndexDescription::setKeySchema(const QList &key_schema) {
    m_key_schema = key_schema;
    m_key_schema_isSet = true;
}

bool OAIGlobalSecondaryIndexDescription::is_key_schema_Set() const{
    return m_key_schema_isSet;
}

bool OAIGlobalSecondaryIndexDescription::is_key_schema_Valid() const{
    return m_key_schema_isValid;
}

OAIGlobalSecondaryIndex_Projection OAIGlobalSecondaryIndexDescription::getProjection() const {
    return m_projection;
}
void OAIGlobalSecondaryIndexDescription::setProjection(const OAIGlobalSecondaryIndex_Projection &projection) {
    m_projection = projection;
    m_projection_isSet = true;
}

bool OAIGlobalSecondaryIndexDescription::is_projection_Set() const{
    return m_projection_isSet;
}

bool OAIGlobalSecondaryIndexDescription::is_projection_Valid() const{
    return m_projection_isValid;
}

OAIIndexStatus OAIGlobalSecondaryIndexDescription::getIndexStatus() const {
    return m_index_status;
}
void OAIGlobalSecondaryIndexDescription::setIndexStatus(const OAIIndexStatus &index_status) {
    m_index_status = index_status;
    m_index_status_isSet = true;
}

bool OAIGlobalSecondaryIndexDescription::is_index_status_Set() const{
    return m_index_status_isSet;
}

bool OAIGlobalSecondaryIndexDescription::is_index_status_Valid() const{
    return m_index_status_isValid;
}

bool OAIGlobalSecondaryIndexDescription::getBackfilling() const {
    return m_backfilling;
}
void OAIGlobalSecondaryIndexDescription::setBackfilling(const bool &backfilling) {
    m_backfilling = backfilling;
    m_backfilling_isSet = true;
}

bool OAIGlobalSecondaryIndexDescription::is_backfilling_Set() const{
    return m_backfilling_isSet;
}

bool OAIGlobalSecondaryIndexDescription::is_backfilling_Valid() const{
    return m_backfilling_isValid;
}

OAIGlobalSecondaryIndexDescription_ProvisionedThroughput OAIGlobalSecondaryIndexDescription::getProvisionedThroughput() const {
    return m_provisioned_throughput;
}
void OAIGlobalSecondaryIndexDescription::setProvisionedThroughput(const OAIGlobalSecondaryIndexDescription_ProvisionedThroughput &provisioned_throughput) {
    m_provisioned_throughput = provisioned_throughput;
    m_provisioned_throughput_isSet = true;
}

bool OAIGlobalSecondaryIndexDescription::is_provisioned_throughput_Set() const{
    return m_provisioned_throughput_isSet;
}

bool OAIGlobalSecondaryIndexDescription::is_provisioned_throughput_Valid() const{
    return m_provisioned_throughput_isValid;
}

qint32 OAIGlobalSecondaryIndexDescription::getIndexSizeBytes() const {
    return m_index_size_bytes;
}
void OAIGlobalSecondaryIndexDescription::setIndexSizeBytes(const qint32 &index_size_bytes) {
    m_index_size_bytes = index_size_bytes;
    m_index_size_bytes_isSet = true;
}

bool OAIGlobalSecondaryIndexDescription::is_index_size_bytes_Set() const{
    return m_index_size_bytes_isSet;
}

bool OAIGlobalSecondaryIndexDescription::is_index_size_bytes_Valid() const{
    return m_index_size_bytes_isValid;
}

qint32 OAIGlobalSecondaryIndexDescription::getItemCount() const {
    return m_item_count;
}
void OAIGlobalSecondaryIndexDescription::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIGlobalSecondaryIndexDescription::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIGlobalSecondaryIndexDescription::is_item_count_Valid() const{
    return m_item_count_isValid;
}

QString OAIGlobalSecondaryIndexDescription::getIndexArn() const {
    return m_index_arn;
}
void OAIGlobalSecondaryIndexDescription::setIndexArn(const QString &index_arn) {
    m_index_arn = index_arn;
    m_index_arn_isSet = true;
}

bool OAIGlobalSecondaryIndexDescription::is_index_arn_Set() const{
    return m_index_arn_isSet;
}

bool OAIGlobalSecondaryIndexDescription::is_index_arn_Valid() const{
    return m_index_arn_isValid;
}

bool OAIGlobalSecondaryIndexDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backfilling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalSecondaryIndexDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
