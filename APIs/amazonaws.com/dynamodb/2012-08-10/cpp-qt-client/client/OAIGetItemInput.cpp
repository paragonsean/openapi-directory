/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetItemInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetItemInput::OAIGetItemInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetItemInput::OAIGetItemInput() {
    this->initializeModel();
}

OAIGetItemInput::~OAIGetItemInput() {}

void OAIGetItemInput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_attributes_to_get_isSet = false;
    m_attributes_to_get_isValid = false;

    m_consistent_read_isSet = false;
    m_consistent_read_isValid = false;

    m_return_consumed_capacity_isSet = false;
    m_return_consumed_capacity_isValid = false;

    m_projection_expression_isSet = false;
    m_projection_expression_isValid = false;

    m_expression_attribute_names_isSet = false;
    m_expression_attribute_names_isValid = false;
}

void OAIGetItemInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetItemInput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_attributes_to_get_isValid = ::OpenAPI::fromJsonValue(m_attributes_to_get, json[QString("AttributesToGet")]);
    m_attributes_to_get_isSet = !json[QString("AttributesToGet")].isNull() && m_attributes_to_get_isValid;

    m_consistent_read_isValid = ::OpenAPI::fromJsonValue(m_consistent_read, json[QString("ConsistentRead")]);
    m_consistent_read_isSet = !json[QString("ConsistentRead")].isNull() && m_consistent_read_isValid;

    m_return_consumed_capacity_isValid = ::OpenAPI::fromJsonValue(m_return_consumed_capacity, json[QString("ReturnConsumedCapacity")]);
    m_return_consumed_capacity_isSet = !json[QString("ReturnConsumedCapacity")].isNull() && m_return_consumed_capacity_isValid;

    m_projection_expression_isValid = ::OpenAPI::fromJsonValue(m_projection_expression, json[QString("ProjectionExpression")]);
    m_projection_expression_isSet = !json[QString("ProjectionExpression")].isNull() && m_projection_expression_isValid;

    m_expression_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_expression_attribute_names, json[QString("ExpressionAttributeNames")]);
    m_expression_attribute_names_isSet = !json[QString("ExpressionAttributeNames")].isNull() && m_expression_attribute_names_isValid;
}

QString OAIGetItemInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetItemInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_key.isSet()) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_attributes_to_get.isSet()) {
        obj.insert(QString("AttributesToGet"), ::OpenAPI::toJsonValue(m_attributes_to_get));
    }
    if (m_consistent_read_isSet) {
        obj.insert(QString("ConsistentRead"), ::OpenAPI::toJsonValue(m_consistent_read));
    }
    if (m_return_consumed_capacity.isSet()) {
        obj.insert(QString("ReturnConsumedCapacity"), ::OpenAPI::toJsonValue(m_return_consumed_capacity));
    }
    if (m_projection_expression_isSet) {
        obj.insert(QString("ProjectionExpression"), ::OpenAPI::toJsonValue(m_projection_expression));
    }
    if (m_expression_attribute_names.isSet()) {
        obj.insert(QString("ExpressionAttributeNames"), ::OpenAPI::toJsonValue(m_expression_attribute_names));
    }
    return obj;
}

QString OAIGetItemInput::getTableName() const {
    return m_table_name;
}
void OAIGetItemInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIGetItemInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIGetItemInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QMap OAIGetItemInput::getKey() const {
    return m_key;
}
void OAIGetItemInput::setKey(const QMap &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGetItemInput::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGetItemInput::is_key_Valid() const{
    return m_key_isValid;
}

QList OAIGetItemInput::getAttributesToGet() const {
    return m_attributes_to_get;
}
void OAIGetItemInput::setAttributesToGet(const QList &attributes_to_get) {
    m_attributes_to_get = attributes_to_get;
    m_attributes_to_get_isSet = true;
}

bool OAIGetItemInput::is_attributes_to_get_Set() const{
    return m_attributes_to_get_isSet;
}

bool OAIGetItemInput::is_attributes_to_get_Valid() const{
    return m_attributes_to_get_isValid;
}

bool OAIGetItemInput::getConsistentRead() const {
    return m_consistent_read;
}
void OAIGetItemInput::setConsistentRead(const bool &consistent_read) {
    m_consistent_read = consistent_read;
    m_consistent_read_isSet = true;
}

bool OAIGetItemInput::is_consistent_read_Set() const{
    return m_consistent_read_isSet;
}

bool OAIGetItemInput::is_consistent_read_Valid() const{
    return m_consistent_read_isValid;
}

OAIReturnConsumedCapacity OAIGetItemInput::getReturnConsumedCapacity() const {
    return m_return_consumed_capacity;
}
void OAIGetItemInput::setReturnConsumedCapacity(const OAIReturnConsumedCapacity &return_consumed_capacity) {
    m_return_consumed_capacity = return_consumed_capacity;
    m_return_consumed_capacity_isSet = true;
}

bool OAIGetItemInput::is_return_consumed_capacity_Set() const{
    return m_return_consumed_capacity_isSet;
}

bool OAIGetItemInput::is_return_consumed_capacity_Valid() const{
    return m_return_consumed_capacity_isValid;
}

QString OAIGetItemInput::getProjectionExpression() const {
    return m_projection_expression;
}
void OAIGetItemInput::setProjectionExpression(const QString &projection_expression) {
    m_projection_expression = projection_expression;
    m_projection_expression_isSet = true;
}

bool OAIGetItemInput::is_projection_expression_Set() const{
    return m_projection_expression_isSet;
}

bool OAIGetItemInput::is_projection_expression_Valid() const{
    return m_projection_expression_isValid;
}

QMap OAIGetItemInput::getExpressionAttributeNames() const {
    return m_expression_attribute_names;
}
void OAIGetItemInput::setExpressionAttributeNames(const QMap &expression_attribute_names) {
    m_expression_attribute_names = expression_attribute_names;
    m_expression_attribute_names_isSet = true;
}

bool OAIGetItemInput::is_expression_attribute_names_Set() const{
    return m_expression_attribute_names_isSet;
}

bool OAIGetItemInput::is_expression_attribute_names_Valid() const{
    return m_expression_attribute_names_isValid;
}

bool OAIGetItemInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_to_get.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistent_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_consumed_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetItemInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
