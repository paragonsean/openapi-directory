/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTimeToLiveOutput_TimeToLiveDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTimeToLiveOutput_TimeToLiveDescription::OAIDescribeTimeToLiveOutput_TimeToLiveDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTimeToLiveOutput_TimeToLiveDescription::OAIDescribeTimeToLiveOutput_TimeToLiveDescription() {
    this->initializeModel();
}

OAIDescribeTimeToLiveOutput_TimeToLiveDescription::~OAIDescribeTimeToLiveOutput_TimeToLiveDescription() {}

void OAIDescribeTimeToLiveOutput_TimeToLiveDescription::initializeModel() {

    m_time_to_live_status_isSet = false;
    m_time_to_live_status_isValid = false;

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;
}

void OAIDescribeTimeToLiveOutput_TimeToLiveDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTimeToLiveOutput_TimeToLiveDescription::fromJsonObject(QJsonObject json) {

    m_time_to_live_status_isValid = ::OpenAPI::fromJsonValue(m_time_to_live_status, json[QString("TimeToLiveStatus")]);
    m_time_to_live_status_isSet = !json[QString("TimeToLiveStatus")].isNull() && m_time_to_live_status_isValid;

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("AttributeName")]);
    m_attribute_name_isSet = !json[QString("AttributeName")].isNull() && m_attribute_name_isValid;
}

QString OAIDescribeTimeToLiveOutput_TimeToLiveDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTimeToLiveOutput_TimeToLiveDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_time_to_live_status.isSet()) {
        obj.insert(QString("TimeToLiveStatus"), ::OpenAPI::toJsonValue(m_time_to_live_status));
    }
    if (m_attribute_name_isSet) {
        obj.insert(QString("AttributeName"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    return obj;
}

OAITimeToLiveStatus OAIDescribeTimeToLiveOutput_TimeToLiveDescription::getTimeToLiveStatus() const {
    return m_time_to_live_status;
}
void OAIDescribeTimeToLiveOutput_TimeToLiveDescription::setTimeToLiveStatus(const OAITimeToLiveStatus &time_to_live_status) {
    m_time_to_live_status = time_to_live_status;
    m_time_to_live_status_isSet = true;
}

bool OAIDescribeTimeToLiveOutput_TimeToLiveDescription::is_time_to_live_status_Set() const{
    return m_time_to_live_status_isSet;
}

bool OAIDescribeTimeToLiveOutput_TimeToLiveDescription::is_time_to_live_status_Valid() const{
    return m_time_to_live_status_isValid;
}

QString OAIDescribeTimeToLiveOutput_TimeToLiveDescription::getAttributeName() const {
    return m_attribute_name;
}
void OAIDescribeTimeToLiveOutput_TimeToLiveDescription::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAIDescribeTimeToLiveOutput_TimeToLiveDescription::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAIDescribeTimeToLiveOutput_TimeToLiveDescription::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

bool OAIDescribeTimeToLiveOutput_TimeToLiveDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_to_live_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTimeToLiveOutput_TimeToLiveDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
