/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocalSecondaryIndexDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocalSecondaryIndexDescription::OAILocalSecondaryIndexDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocalSecondaryIndexDescription::OAILocalSecondaryIndexDescription() {
    this->initializeModel();
}

OAILocalSecondaryIndexDescription::~OAILocalSecondaryIndexDescription() {}

void OAILocalSecondaryIndexDescription::initializeModel() {

    m_index_name_isSet = false;
    m_index_name_isValid = false;

    m_key_schema_isSet = false;
    m_key_schema_isValid = false;

    m_projection_isSet = false;
    m_projection_isValid = false;

    m_index_size_bytes_isSet = false;
    m_index_size_bytes_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_index_arn_isSet = false;
    m_index_arn_isValid = false;
}

void OAILocalSecondaryIndexDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocalSecondaryIndexDescription::fromJsonObject(QJsonObject json) {

    m_index_name_isValid = ::OpenAPI::fromJsonValue(m_index_name, json[QString("IndexName")]);
    m_index_name_isSet = !json[QString("IndexName")].isNull() && m_index_name_isValid;

    m_key_schema_isValid = ::OpenAPI::fromJsonValue(m_key_schema, json[QString("KeySchema")]);
    m_key_schema_isSet = !json[QString("KeySchema")].isNull() && m_key_schema_isValid;

    m_projection_isValid = ::OpenAPI::fromJsonValue(m_projection, json[QString("Projection")]);
    m_projection_isSet = !json[QString("Projection")].isNull() && m_projection_isValid;

    m_index_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_index_size_bytes, json[QString("IndexSizeBytes")]);
    m_index_size_bytes_isSet = !json[QString("IndexSizeBytes")].isNull() && m_index_size_bytes_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("ItemCount")]);
    m_item_count_isSet = !json[QString("ItemCount")].isNull() && m_item_count_isValid;

    m_index_arn_isValid = ::OpenAPI::fromJsonValue(m_index_arn, json[QString("IndexArn")]);
    m_index_arn_isSet = !json[QString("IndexArn")].isNull() && m_index_arn_isValid;
}

QString OAILocalSecondaryIndexDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocalSecondaryIndexDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_index_name_isSet) {
        obj.insert(QString("IndexName"), ::OpenAPI::toJsonValue(m_index_name));
    }
    if (m_key_schema.isSet()) {
        obj.insert(QString("KeySchema"), ::OpenAPI::toJsonValue(m_key_schema));
    }
    if (m_projection.isSet()) {
        obj.insert(QString("Projection"), ::OpenAPI::toJsonValue(m_projection));
    }
    if (m_index_size_bytes_isSet) {
        obj.insert(QString("IndexSizeBytes"), ::OpenAPI::toJsonValue(m_index_size_bytes));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("ItemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_index_arn_isSet) {
        obj.insert(QString("IndexArn"), ::OpenAPI::toJsonValue(m_index_arn));
    }
    return obj;
}

QString OAILocalSecondaryIndexDescription::getIndexName() const {
    return m_index_name;
}
void OAILocalSecondaryIndexDescription::setIndexName(const QString &index_name) {
    m_index_name = index_name;
    m_index_name_isSet = true;
}

bool OAILocalSecondaryIndexDescription::is_index_name_Set() const{
    return m_index_name_isSet;
}

bool OAILocalSecondaryIndexDescription::is_index_name_Valid() const{
    return m_index_name_isValid;
}

QList OAILocalSecondaryIndexDescription::getKeySchema() const {
    return m_key_schema;
}
void OAILocalSecondaryIndexDescription::setKeySchema(const QList &key_schema) {
    m_key_schema = key_schema;
    m_key_schema_isSet = true;
}

bool OAILocalSecondaryIndexDescription::is_key_schema_Set() const{
    return m_key_schema_isSet;
}

bool OAILocalSecondaryIndexDescription::is_key_schema_Valid() const{
    return m_key_schema_isValid;
}

OAIGlobalSecondaryIndex_Projection OAILocalSecondaryIndexDescription::getProjection() const {
    return m_projection;
}
void OAILocalSecondaryIndexDescription::setProjection(const OAIGlobalSecondaryIndex_Projection &projection) {
    m_projection = projection;
    m_projection_isSet = true;
}

bool OAILocalSecondaryIndexDescription::is_projection_Set() const{
    return m_projection_isSet;
}

bool OAILocalSecondaryIndexDescription::is_projection_Valid() const{
    return m_projection_isValid;
}

qint32 OAILocalSecondaryIndexDescription::getIndexSizeBytes() const {
    return m_index_size_bytes;
}
void OAILocalSecondaryIndexDescription::setIndexSizeBytes(const qint32 &index_size_bytes) {
    m_index_size_bytes = index_size_bytes;
    m_index_size_bytes_isSet = true;
}

bool OAILocalSecondaryIndexDescription::is_index_size_bytes_Set() const{
    return m_index_size_bytes_isSet;
}

bool OAILocalSecondaryIndexDescription::is_index_size_bytes_Valid() const{
    return m_index_size_bytes_isValid;
}

qint32 OAILocalSecondaryIndexDescription::getItemCount() const {
    return m_item_count;
}
void OAILocalSecondaryIndexDescription::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAILocalSecondaryIndexDescription::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAILocalSecondaryIndexDescription::is_item_count_Valid() const{
    return m_item_count_isValid;
}

QString OAILocalSecondaryIndexDescription::getIndexArn() const {
    return m_index_arn;
}
void OAILocalSecondaryIndexDescription::setIndexArn(const QString &index_arn) {
    m_index_arn = index_arn;
    m_index_arn_isSet = true;
}

bool OAILocalSecondaryIndexDescription::is_index_arn_Set() const{
    return m_index_arn_isSet;
}

bool OAILocalSecondaryIndexDescription::is_index_arn_Valid() const{
    return m_index_arn_isValid;
}

bool OAILocalSecondaryIndexDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocalSecondaryIndexDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
