/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTableInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTableInput::OAIUpdateTableInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTableInput::OAIUpdateTableInput() {
    this->initializeModel();
}

OAIUpdateTableInput::~OAIUpdateTableInput() {}

void OAIUpdateTableInput::initializeModel() {

    m_attribute_definitions_isSet = false;
    m_attribute_definitions_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_billing_mode_isSet = false;
    m_billing_mode_isValid = false;

    m_provisioned_throughput_isSet = false;
    m_provisioned_throughput_isValid = false;

    m_global_secondary_index_updates_isSet = false;
    m_global_secondary_index_updates_isValid = false;

    m_stream_specification_isSet = false;
    m_stream_specification_isValid = false;

    m_sse_specification_isSet = false;
    m_sse_specification_isValid = false;

    m_replica_updates_isSet = false;
    m_replica_updates_isValid = false;

    m_table_class_isSet = false;
    m_table_class_isValid = false;

    m_deletion_protection_enabled_isSet = false;
    m_deletion_protection_enabled_isValid = false;
}

void OAIUpdateTableInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTableInput::fromJsonObject(QJsonObject json) {

    m_attribute_definitions_isValid = ::OpenAPI::fromJsonValue(m_attribute_definitions, json[QString("AttributeDefinitions")]);
    m_attribute_definitions_isSet = !json[QString("AttributeDefinitions")].isNull() && m_attribute_definitions_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_billing_mode_isValid = ::OpenAPI::fromJsonValue(m_billing_mode, json[QString("BillingMode")]);
    m_billing_mode_isSet = !json[QString("BillingMode")].isNull() && m_billing_mode_isValid;

    m_provisioned_throughput_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput, json[QString("ProvisionedThroughput")]);
    m_provisioned_throughput_isSet = !json[QString("ProvisionedThroughput")].isNull() && m_provisioned_throughput_isValid;

    m_global_secondary_index_updates_isValid = ::OpenAPI::fromJsonValue(m_global_secondary_index_updates, json[QString("GlobalSecondaryIndexUpdates")]);
    m_global_secondary_index_updates_isSet = !json[QString("GlobalSecondaryIndexUpdates")].isNull() && m_global_secondary_index_updates_isValid;

    m_stream_specification_isValid = ::OpenAPI::fromJsonValue(m_stream_specification, json[QString("StreamSpecification")]);
    m_stream_specification_isSet = !json[QString("StreamSpecification")].isNull() && m_stream_specification_isValid;

    m_sse_specification_isValid = ::OpenAPI::fromJsonValue(m_sse_specification, json[QString("SSESpecification")]);
    m_sse_specification_isSet = !json[QString("SSESpecification")].isNull() && m_sse_specification_isValid;

    m_replica_updates_isValid = ::OpenAPI::fromJsonValue(m_replica_updates, json[QString("ReplicaUpdates")]);
    m_replica_updates_isSet = !json[QString("ReplicaUpdates")].isNull() && m_replica_updates_isValid;

    m_table_class_isValid = ::OpenAPI::fromJsonValue(m_table_class, json[QString("TableClass")]);
    m_table_class_isSet = !json[QString("TableClass")].isNull() && m_table_class_isValid;

    m_deletion_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection_enabled, json[QString("DeletionProtectionEnabled")]);
    m_deletion_protection_enabled_isSet = !json[QString("DeletionProtectionEnabled")].isNull() && m_deletion_protection_enabled_isValid;
}

QString OAIUpdateTableInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTableInput::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_definitions.isSet()) {
        obj.insert(QString("AttributeDefinitions"), ::OpenAPI::toJsonValue(m_attribute_definitions));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_billing_mode.isSet()) {
        obj.insert(QString("BillingMode"), ::OpenAPI::toJsonValue(m_billing_mode));
    }
    if (m_provisioned_throughput.isSet()) {
        obj.insert(QString("ProvisionedThroughput"), ::OpenAPI::toJsonValue(m_provisioned_throughput));
    }
    if (m_global_secondary_index_updates.isSet()) {
        obj.insert(QString("GlobalSecondaryIndexUpdates"), ::OpenAPI::toJsonValue(m_global_secondary_index_updates));
    }
    if (m_stream_specification.isSet()) {
        obj.insert(QString("StreamSpecification"), ::OpenAPI::toJsonValue(m_stream_specification));
    }
    if (m_sse_specification.isSet()) {
        obj.insert(QString("SSESpecification"), ::OpenAPI::toJsonValue(m_sse_specification));
    }
    if (m_replica_updates.isSet()) {
        obj.insert(QString("ReplicaUpdates"), ::OpenAPI::toJsonValue(m_replica_updates));
    }
    if (m_table_class.isSet()) {
        obj.insert(QString("TableClass"), ::OpenAPI::toJsonValue(m_table_class));
    }
    if (m_deletion_protection_enabled_isSet) {
        obj.insert(QString("DeletionProtectionEnabled"), ::OpenAPI::toJsonValue(m_deletion_protection_enabled));
    }
    return obj;
}

QList OAIUpdateTableInput::getAttributeDefinitions() const {
    return m_attribute_definitions;
}
void OAIUpdateTableInput::setAttributeDefinitions(const QList &attribute_definitions) {
    m_attribute_definitions = attribute_definitions;
    m_attribute_definitions_isSet = true;
}

bool OAIUpdateTableInput::is_attribute_definitions_Set() const{
    return m_attribute_definitions_isSet;
}

bool OAIUpdateTableInput::is_attribute_definitions_Valid() const{
    return m_attribute_definitions_isValid;
}

QString OAIUpdateTableInput::getTableName() const {
    return m_table_name;
}
void OAIUpdateTableInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIUpdateTableInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIUpdateTableInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

OAIBillingMode OAIUpdateTableInput::getBillingMode() const {
    return m_billing_mode;
}
void OAIUpdateTableInput::setBillingMode(const OAIBillingMode &billing_mode) {
    m_billing_mode = billing_mode;
    m_billing_mode_isSet = true;
}

bool OAIUpdateTableInput::is_billing_mode_Set() const{
    return m_billing_mode_isSet;
}

bool OAIUpdateTableInput::is_billing_mode_Valid() const{
    return m_billing_mode_isValid;
}

OAIUpdateTableInput_ProvisionedThroughput OAIUpdateTableInput::getProvisionedThroughput() const {
    return m_provisioned_throughput;
}
void OAIUpdateTableInput::setProvisionedThroughput(const OAIUpdateTableInput_ProvisionedThroughput &provisioned_throughput) {
    m_provisioned_throughput = provisioned_throughput;
    m_provisioned_throughput_isSet = true;
}

bool OAIUpdateTableInput::is_provisioned_throughput_Set() const{
    return m_provisioned_throughput_isSet;
}

bool OAIUpdateTableInput::is_provisioned_throughput_Valid() const{
    return m_provisioned_throughput_isValid;
}

QList OAIUpdateTableInput::getGlobalSecondaryIndexUpdates() const {
    return m_global_secondary_index_updates;
}
void OAIUpdateTableInput::setGlobalSecondaryIndexUpdates(const QList &global_secondary_index_updates) {
    m_global_secondary_index_updates = global_secondary_index_updates;
    m_global_secondary_index_updates_isSet = true;
}

bool OAIUpdateTableInput::is_global_secondary_index_updates_Set() const{
    return m_global_secondary_index_updates_isSet;
}

bool OAIUpdateTableInput::is_global_secondary_index_updates_Valid() const{
    return m_global_secondary_index_updates_isValid;
}

OAIUpdateTableInput_StreamSpecification OAIUpdateTableInput::getStreamSpecification() const {
    return m_stream_specification;
}
void OAIUpdateTableInput::setStreamSpecification(const OAIUpdateTableInput_StreamSpecification &stream_specification) {
    m_stream_specification = stream_specification;
    m_stream_specification_isSet = true;
}

bool OAIUpdateTableInput::is_stream_specification_Set() const{
    return m_stream_specification_isSet;
}

bool OAIUpdateTableInput::is_stream_specification_Valid() const{
    return m_stream_specification_isValid;
}

OAIUpdateTableInput_SSESpecification OAIUpdateTableInput::getSseSpecification() const {
    return m_sse_specification;
}
void OAIUpdateTableInput::setSseSpecification(const OAIUpdateTableInput_SSESpecification &sse_specification) {
    m_sse_specification = sse_specification;
    m_sse_specification_isSet = true;
}

bool OAIUpdateTableInput::is_sse_specification_Set() const{
    return m_sse_specification_isSet;
}

bool OAIUpdateTableInput::is_sse_specification_Valid() const{
    return m_sse_specification_isValid;
}

QList OAIUpdateTableInput::getReplicaUpdates() const {
    return m_replica_updates;
}
void OAIUpdateTableInput::setReplicaUpdates(const QList &replica_updates) {
    m_replica_updates = replica_updates;
    m_replica_updates_isSet = true;
}

bool OAIUpdateTableInput::is_replica_updates_Set() const{
    return m_replica_updates_isSet;
}

bool OAIUpdateTableInput::is_replica_updates_Valid() const{
    return m_replica_updates_isValid;
}

OAITableClass OAIUpdateTableInput::getTableClass() const {
    return m_table_class;
}
void OAIUpdateTableInput::setTableClass(const OAITableClass &table_class) {
    m_table_class = table_class;
    m_table_class_isSet = true;
}

bool OAIUpdateTableInput::is_table_class_Set() const{
    return m_table_class_isSet;
}

bool OAIUpdateTableInput::is_table_class_Valid() const{
    return m_table_class_isValid;
}

bool OAIUpdateTableInput::getDeletionProtectionEnabled() const {
    return m_deletion_protection_enabled;
}
void OAIUpdateTableInput::setDeletionProtectionEnabled(const bool &deletion_protection_enabled) {
    m_deletion_protection_enabled = deletion_protection_enabled;
    m_deletion_protection_enabled_isSet = true;
}

bool OAIUpdateTableInput::is_deletion_protection_enabled_Set() const{
    return m_deletion_protection_enabled_isSet;
}

bool OAIUpdateTableInput::is_deletion_protection_enabled_Valid() const{
    return m_deletion_protection_enabled_isValid;
}

bool OAIUpdateTableInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_secondary_index_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTableInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && true;
}

} // namespace OpenAPI
