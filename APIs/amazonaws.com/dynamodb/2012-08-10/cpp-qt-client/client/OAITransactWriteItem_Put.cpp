/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactWriteItem_Put.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactWriteItem_Put::OAITransactWriteItem_Put(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactWriteItem_Put::OAITransactWriteItem_Put() {
    this->initializeModel();
}

OAITransactWriteItem_Put::~OAITransactWriteItem_Put() {}

void OAITransactWriteItem_Put::initializeModel() {

    m_item_isSet = false;
    m_item_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_condition_expression_isSet = false;
    m_condition_expression_isValid = false;

    m_expression_attribute_names_isSet = false;
    m_expression_attribute_names_isValid = false;

    m_expression_attribute_values_isSet = false;
    m_expression_attribute_values_isValid = false;

    m_return_values_on_condition_check_failure_isSet = false;
    m_return_values_on_condition_check_failure_isValid = false;
}

void OAITransactWriteItem_Put::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactWriteItem_Put::fromJsonObject(QJsonObject json) {

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("Item")]);
    m_item_isSet = !json[QString("Item")].isNull() && m_item_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_condition_expression_isValid = ::OpenAPI::fromJsonValue(m_condition_expression, json[QString("ConditionExpression")]);
    m_condition_expression_isSet = !json[QString("ConditionExpression")].isNull() && m_condition_expression_isValid;

    m_expression_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_expression_attribute_names, json[QString("ExpressionAttributeNames")]);
    m_expression_attribute_names_isSet = !json[QString("ExpressionAttributeNames")].isNull() && m_expression_attribute_names_isValid;

    m_expression_attribute_values_isValid = ::OpenAPI::fromJsonValue(m_expression_attribute_values, json[QString("ExpressionAttributeValues")]);
    m_expression_attribute_values_isSet = !json[QString("ExpressionAttributeValues")].isNull() && m_expression_attribute_values_isValid;

    m_return_values_on_condition_check_failure_isValid = ::OpenAPI::fromJsonValue(m_return_values_on_condition_check_failure, json[QString("ReturnValuesOnConditionCheckFailure")]);
    m_return_values_on_condition_check_failure_isSet = !json[QString("ReturnValuesOnConditionCheckFailure")].isNull() && m_return_values_on_condition_check_failure_isValid;
}

QString OAITransactWriteItem_Put::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactWriteItem_Put::asJsonObject() const {
    QJsonObject obj;
    if (m_item.isSet()) {
        obj.insert(QString("Item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_condition_expression_isSet) {
        obj.insert(QString("ConditionExpression"), ::OpenAPI::toJsonValue(m_condition_expression));
    }
    if (m_expression_attribute_names.isSet()) {
        obj.insert(QString("ExpressionAttributeNames"), ::OpenAPI::toJsonValue(m_expression_attribute_names));
    }
    if (m_expression_attribute_values.isSet()) {
        obj.insert(QString("ExpressionAttributeValues"), ::OpenAPI::toJsonValue(m_expression_attribute_values));
    }
    if (m_return_values_on_condition_check_failure.isSet()) {
        obj.insert(QString("ReturnValuesOnConditionCheckFailure"), ::OpenAPI::toJsonValue(m_return_values_on_condition_check_failure));
    }
    return obj;
}

QMap OAITransactWriteItem_Put::getItem() const {
    return m_item;
}
void OAITransactWriteItem_Put::setItem(const QMap &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAITransactWriteItem_Put::is_item_Set() const{
    return m_item_isSet;
}

bool OAITransactWriteItem_Put::is_item_Valid() const{
    return m_item_isValid;
}

QString OAITransactWriteItem_Put::getTableName() const {
    return m_table_name;
}
void OAITransactWriteItem_Put::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAITransactWriteItem_Put::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAITransactWriteItem_Put::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAITransactWriteItem_Put::getConditionExpression() const {
    return m_condition_expression;
}
void OAITransactWriteItem_Put::setConditionExpression(const QString &condition_expression) {
    m_condition_expression = condition_expression;
    m_condition_expression_isSet = true;
}

bool OAITransactWriteItem_Put::is_condition_expression_Set() const{
    return m_condition_expression_isSet;
}

bool OAITransactWriteItem_Put::is_condition_expression_Valid() const{
    return m_condition_expression_isValid;
}

QMap OAITransactWriteItem_Put::getExpressionAttributeNames() const {
    return m_expression_attribute_names;
}
void OAITransactWriteItem_Put::setExpressionAttributeNames(const QMap &expression_attribute_names) {
    m_expression_attribute_names = expression_attribute_names;
    m_expression_attribute_names_isSet = true;
}

bool OAITransactWriteItem_Put::is_expression_attribute_names_Set() const{
    return m_expression_attribute_names_isSet;
}

bool OAITransactWriteItem_Put::is_expression_attribute_names_Valid() const{
    return m_expression_attribute_names_isValid;
}

QMap OAITransactWriteItem_Put::getExpressionAttributeValues() const {
    return m_expression_attribute_values;
}
void OAITransactWriteItem_Put::setExpressionAttributeValues(const QMap &expression_attribute_values) {
    m_expression_attribute_values = expression_attribute_values;
    m_expression_attribute_values_isSet = true;
}

bool OAITransactWriteItem_Put::is_expression_attribute_values_Set() const{
    return m_expression_attribute_values_isSet;
}

bool OAITransactWriteItem_Put::is_expression_attribute_values_Valid() const{
    return m_expression_attribute_values_isValid;
}

OAIReturnValuesOnConditionCheckFailure OAITransactWriteItem_Put::getReturnValuesOnConditionCheckFailure() const {
    return m_return_values_on_condition_check_failure;
}
void OAITransactWriteItem_Put::setReturnValuesOnConditionCheckFailure(const OAIReturnValuesOnConditionCheckFailure &return_values_on_condition_check_failure) {
    m_return_values_on_condition_check_failure = return_values_on_condition_check_failure;
    m_return_values_on_condition_check_failure_isSet = true;
}

bool OAITransactWriteItem_Put::is_return_values_on_condition_check_failure_Set() const{
    return m_return_values_on_condition_check_failure_isSet;
}

bool OAITransactWriteItem_Put::is_return_values_on_condition_check_failure_Valid() const{
    return m_return_values_on_condition_check_failure_isValid;
}

bool OAITransactWriteItem_Put::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_attribute_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_values_on_condition_check_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactWriteItem_Put::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_item_isValid && m_table_name_isValid && true;
}

} // namespace OpenAPI
