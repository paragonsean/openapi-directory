/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportTableToPointInTimeOutput_ExportDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportTableToPointInTimeOutput_ExportDescription::OAIExportTableToPointInTimeOutput_ExportDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportTableToPointInTimeOutput_ExportDescription::OAIExportTableToPointInTimeOutput_ExportDescription() {
    this->initializeModel();
}

OAIExportTableToPointInTimeOutput_ExportDescription::~OAIExportTableToPointInTimeOutput_ExportDescription() {}

void OAIExportTableToPointInTimeOutput_ExportDescription::initializeModel() {

    m_export_arn_isSet = false;
    m_export_arn_isValid = false;

    m_export_status_isSet = false;
    m_export_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_export_manifest_isSet = false;
    m_export_manifest_isValid = false;

    m_table_arn_isSet = false;
    m_table_arn_isValid = false;

    m_table_id_isSet = false;
    m_table_id_isValid = false;

    m_export_time_isSet = false;
    m_export_time_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_s3_bucket_owner_isSet = false;
    m_s3_bucket_owner_isValid = false;

    m_s3_prefix_isSet = false;
    m_s3_prefix_isValid = false;

    m_s3_sse_algorithm_isSet = false;
    m_s3_sse_algorithm_isValid = false;

    m_s3_sse_kms_key_id_isSet = false;
    m_s3_sse_kms_key_id_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_message_isSet = false;
    m_failure_message_isValid = false;

    m_export_format_isSet = false;
    m_export_format_isValid = false;

    m_billed_size_bytes_isSet = false;
    m_billed_size_bytes_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;
}

void OAIExportTableToPointInTimeOutput_ExportDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportTableToPointInTimeOutput_ExportDescription::fromJsonObject(QJsonObject json) {

    m_export_arn_isValid = ::OpenAPI::fromJsonValue(m_export_arn, json[QString("ExportArn")]);
    m_export_arn_isSet = !json[QString("ExportArn")].isNull() && m_export_arn_isValid;

    m_export_status_isValid = ::OpenAPI::fromJsonValue(m_export_status, json[QString("ExportStatus")]);
    m_export_status_isSet = !json[QString("ExportStatus")].isNull() && m_export_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_export_manifest_isValid = ::OpenAPI::fromJsonValue(m_export_manifest, json[QString("ExportManifest")]);
    m_export_manifest_isSet = !json[QString("ExportManifest")].isNull() && m_export_manifest_isValid;

    m_table_arn_isValid = ::OpenAPI::fromJsonValue(m_table_arn, json[QString("TableArn")]);
    m_table_arn_isSet = !json[QString("TableArn")].isNull() && m_table_arn_isValid;

    m_table_id_isValid = ::OpenAPI::fromJsonValue(m_table_id, json[QString("TableId")]);
    m_table_id_isSet = !json[QString("TableId")].isNull() && m_table_id_isValid;

    m_export_time_isValid = ::OpenAPI::fromJsonValue(m_export_time, json[QString("ExportTime")]);
    m_export_time_isSet = !json[QString("ExportTime")].isNull() && m_export_time_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("S3Bucket")]);
    m_s3_bucket_isSet = !json[QString("S3Bucket")].isNull() && m_s3_bucket_isValid;

    m_s3_bucket_owner_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_owner, json[QString("S3BucketOwner")]);
    m_s3_bucket_owner_isSet = !json[QString("S3BucketOwner")].isNull() && m_s3_bucket_owner_isValid;

    m_s3_prefix_isValid = ::OpenAPI::fromJsonValue(m_s3_prefix, json[QString("S3Prefix")]);
    m_s3_prefix_isSet = !json[QString("S3Prefix")].isNull() && m_s3_prefix_isValid;

    m_s3_sse_algorithm_isValid = ::OpenAPI::fromJsonValue(m_s3_sse_algorithm, json[QString("S3SseAlgorithm")]);
    m_s3_sse_algorithm_isSet = !json[QString("S3SseAlgorithm")].isNull() && m_s3_sse_algorithm_isValid;

    m_s3_sse_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_s3_sse_kms_key_id, json[QString("S3SseKmsKeyId")]);
    m_s3_sse_kms_key_id_isSet = !json[QString("S3SseKmsKeyId")].isNull() && m_s3_sse_kms_key_id_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("FailureCode")]);
    m_failure_code_isSet = !json[QString("FailureCode")].isNull() && m_failure_code_isValid;

    m_failure_message_isValid = ::OpenAPI::fromJsonValue(m_failure_message, json[QString("FailureMessage")]);
    m_failure_message_isSet = !json[QString("FailureMessage")].isNull() && m_failure_message_isValid;

    m_export_format_isValid = ::OpenAPI::fromJsonValue(m_export_format, json[QString("ExportFormat")]);
    m_export_format_isSet = !json[QString("ExportFormat")].isNull() && m_export_format_isValid;

    m_billed_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_billed_size_bytes, json[QString("BilledSizeBytes")]);
    m_billed_size_bytes_isSet = !json[QString("BilledSizeBytes")].isNull() && m_billed_size_bytes_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("ItemCount")]);
    m_item_count_isSet = !json[QString("ItemCount")].isNull() && m_item_count_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportTableToPointInTimeOutput_ExportDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_export_arn_isSet) {
        obj.insert(QString("ExportArn"), ::OpenAPI::toJsonValue(m_export_arn));
    }
    if (m_export_status.isSet()) {
        obj.insert(QString("ExportStatus"), ::OpenAPI::toJsonValue(m_export_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_export_manifest_isSet) {
        obj.insert(QString("ExportManifest"), ::OpenAPI::toJsonValue(m_export_manifest));
    }
    if (m_table_arn_isSet) {
        obj.insert(QString("TableArn"), ::OpenAPI::toJsonValue(m_table_arn));
    }
    if (m_table_id_isSet) {
        obj.insert(QString("TableId"), ::OpenAPI::toJsonValue(m_table_id));
    }
    if (m_export_time_isSet) {
        obj.insert(QString("ExportTime"), ::OpenAPI::toJsonValue(m_export_time));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_s3_bucket_isSet) {
        obj.insert(QString("S3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_s3_bucket_owner_isSet) {
        obj.insert(QString("S3BucketOwner"), ::OpenAPI::toJsonValue(m_s3_bucket_owner));
    }
    if (m_s3_prefix_isSet) {
        obj.insert(QString("S3Prefix"), ::OpenAPI::toJsonValue(m_s3_prefix));
    }
    if (m_s3_sse_algorithm.isSet()) {
        obj.insert(QString("S3SseAlgorithm"), ::OpenAPI::toJsonValue(m_s3_sse_algorithm));
    }
    if (m_s3_sse_kms_key_id_isSet) {
        obj.insert(QString("S3SseKmsKeyId"), ::OpenAPI::toJsonValue(m_s3_sse_kms_key_id));
    }
    if (m_failure_code_isSet) {
        obj.insert(QString("FailureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_message_isSet) {
        obj.insert(QString("FailureMessage"), ::OpenAPI::toJsonValue(m_failure_message));
    }
    if (m_export_format.isSet()) {
        obj.insert(QString("ExportFormat"), ::OpenAPI::toJsonValue(m_export_format));
    }
    if (m_billed_size_bytes_isSet) {
        obj.insert(QString("BilledSizeBytes"), ::OpenAPI::toJsonValue(m_billed_size_bytes));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("ItemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    return obj;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getExportArn() const {
    return m_export_arn;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setExportArn(const QString &export_arn) {
    m_export_arn = export_arn;
    m_export_arn_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_arn_Set() const{
    return m_export_arn_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_arn_Valid() const{
    return m_export_arn_isValid;
}

OAIExportStatus OAIExportTableToPointInTimeOutput_ExportDescription::getExportStatus() const {
    return m_export_status;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setExportStatus(const OAIExportStatus &export_status) {
    m_export_status = export_status;
    m_export_status_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_status_Set() const{
    return m_export_status_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_status_Valid() const{
    return m_export_status_isValid;
}

QDateTime OAIExportTableToPointInTimeOutput_ExportDescription::getStartTime() const {
    return m_start_time;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIExportTableToPointInTimeOutput_ExportDescription::getEndTime() const {
    return m_end_time;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getExportManifest() const {
    return m_export_manifest;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setExportManifest(const QString &export_manifest) {
    m_export_manifest = export_manifest;
    m_export_manifest_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_manifest_Set() const{
    return m_export_manifest_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_manifest_Valid() const{
    return m_export_manifest_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getTableArn() const {
    return m_table_arn;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setTableArn(const QString &table_arn) {
    m_table_arn = table_arn;
    m_table_arn_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_table_arn_Set() const{
    return m_table_arn_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_table_arn_Valid() const{
    return m_table_arn_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getTableId() const {
    return m_table_id;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setTableId(const QString &table_id) {
    m_table_id = table_id;
    m_table_id_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_table_id_Set() const{
    return m_table_id_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_table_id_Valid() const{
    return m_table_id_isValid;
}

QDateTime OAIExportTableToPointInTimeOutput_ExportDescription::getExportTime() const {
    return m_export_time;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setExportTime(const QDateTime &export_time) {
    m_export_time = export_time;
    m_export_time_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_time_Set() const{
    return m_export_time_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_time_Valid() const{
    return m_export_time_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getClientToken() const {
    return m_client_token;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setS3Bucket(const QString &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getS3BucketOwner() const {
    return m_s3_bucket_owner;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setS3BucketOwner(const QString &s3_bucket_owner) {
    m_s3_bucket_owner = s3_bucket_owner;
    m_s3_bucket_owner_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_bucket_owner_Set() const{
    return m_s3_bucket_owner_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_bucket_owner_Valid() const{
    return m_s3_bucket_owner_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getS3Prefix() const {
    return m_s3_prefix;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setS3Prefix(const QString &s3_prefix) {
    m_s3_prefix = s3_prefix;
    m_s3_prefix_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_prefix_Set() const{
    return m_s3_prefix_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_prefix_Valid() const{
    return m_s3_prefix_isValid;
}

OAIS3SseAlgorithm OAIExportTableToPointInTimeOutput_ExportDescription::getS3SseAlgorithm() const {
    return m_s3_sse_algorithm;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setS3SseAlgorithm(const OAIS3SseAlgorithm &s3_sse_algorithm) {
    m_s3_sse_algorithm = s3_sse_algorithm;
    m_s3_sse_algorithm_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_sse_algorithm_Set() const{
    return m_s3_sse_algorithm_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_sse_algorithm_Valid() const{
    return m_s3_sse_algorithm_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getS3SseKmsKeyId() const {
    return m_s3_sse_kms_key_id;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setS3SseKmsKeyId(const QString &s3_sse_kms_key_id) {
    m_s3_sse_kms_key_id = s3_sse_kms_key_id;
    m_s3_sse_kms_key_id_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_sse_kms_key_id_Set() const{
    return m_s3_sse_kms_key_id_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_s3_sse_kms_key_id_Valid() const{
    return m_s3_sse_kms_key_id_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getFailureCode() const {
    return m_failure_code;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setFailureCode(const QString &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIExportTableToPointInTimeOutput_ExportDescription::getFailureMessage() const {
    return m_failure_message;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setFailureMessage(const QString &failure_message) {
    m_failure_message = failure_message;
    m_failure_message_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_failure_message_Set() const{
    return m_failure_message_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_failure_message_Valid() const{
    return m_failure_message_isValid;
}

OAIExportFormat OAIExportTableToPointInTimeOutput_ExportDescription::getExportFormat() const {
    return m_export_format;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setExportFormat(const OAIExportFormat &export_format) {
    m_export_format = export_format;
    m_export_format_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_format_Set() const{
    return m_export_format_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_export_format_Valid() const{
    return m_export_format_isValid;
}

qint32 OAIExportTableToPointInTimeOutput_ExportDescription::getBilledSizeBytes() const {
    return m_billed_size_bytes;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setBilledSizeBytes(const qint32 &billed_size_bytes) {
    m_billed_size_bytes = billed_size_bytes;
    m_billed_size_bytes_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_billed_size_bytes_Set() const{
    return m_billed_size_bytes_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_billed_size_bytes_Valid() const{
    return m_billed_size_bytes_isValid;
}

qint32 OAIExportTableToPointInTimeOutput_ExportDescription::getItemCount() const {
    return m_item_count;
}
void OAIExportTableToPointInTimeOutput_ExportDescription::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::is_item_count_Valid() const{
    return m_item_count_isValid;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_export_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_sse_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_sse_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billed_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportTableToPointInTimeOutput_ExportDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
