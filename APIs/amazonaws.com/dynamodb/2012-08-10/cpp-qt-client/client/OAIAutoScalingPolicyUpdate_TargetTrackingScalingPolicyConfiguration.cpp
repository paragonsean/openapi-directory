/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration() {
    this->initializeModel();
}

OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::~OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration() {}

void OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::initializeModel() {

    m_disable_scale_in_isSet = false;
    m_disable_scale_in_isValid = false;

    m_scale_in_cooldown_isSet = false;
    m_scale_in_cooldown_isValid = false;

    m_scale_out_cooldown_isSet = false;
    m_scale_out_cooldown_isValid = false;

    m_target_value_isSet = false;
    m_target_value_isValid = false;
}

void OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::fromJsonObject(QJsonObject json) {

    m_disable_scale_in_isValid = ::OpenAPI::fromJsonValue(m_disable_scale_in, json[QString("DisableScaleIn")]);
    m_disable_scale_in_isSet = !json[QString("DisableScaleIn")].isNull() && m_disable_scale_in_isValid;

    m_scale_in_cooldown_isValid = ::OpenAPI::fromJsonValue(m_scale_in_cooldown, json[QString("ScaleInCooldown")]);
    m_scale_in_cooldown_isSet = !json[QString("ScaleInCooldown")].isNull() && m_scale_in_cooldown_isValid;

    m_scale_out_cooldown_isValid = ::OpenAPI::fromJsonValue(m_scale_out_cooldown, json[QString("ScaleOutCooldown")]);
    m_scale_out_cooldown_isSet = !json[QString("ScaleOutCooldown")].isNull() && m_scale_out_cooldown_isValid;

    m_target_value_isValid = ::OpenAPI::fromJsonValue(m_target_value, json[QString("TargetValue")]);
    m_target_value_isSet = !json[QString("TargetValue")].isNull() && m_target_value_isValid;
}

QString OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_scale_in_isSet) {
        obj.insert(QString("DisableScaleIn"), ::OpenAPI::toJsonValue(m_disable_scale_in));
    }
    if (m_scale_in_cooldown_isSet) {
        obj.insert(QString("ScaleInCooldown"), ::OpenAPI::toJsonValue(m_scale_in_cooldown));
    }
    if (m_scale_out_cooldown_isSet) {
        obj.insert(QString("ScaleOutCooldown"), ::OpenAPI::toJsonValue(m_scale_out_cooldown));
    }
    if (m_target_value_isSet) {
        obj.insert(QString("TargetValue"), ::OpenAPI::toJsonValue(m_target_value));
    }
    return obj;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::getDisableScaleIn() const {
    return m_disable_scale_in;
}
void OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::setDisableScaleIn(const bool &disable_scale_in) {
    m_disable_scale_in = disable_scale_in;
    m_disable_scale_in_isSet = true;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::is_disable_scale_in_Set() const{
    return m_disable_scale_in_isSet;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::is_disable_scale_in_Valid() const{
    return m_disable_scale_in_isValid;
}

qint32 OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::getScaleInCooldown() const {
    return m_scale_in_cooldown;
}
void OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::setScaleInCooldown(const qint32 &scale_in_cooldown) {
    m_scale_in_cooldown = scale_in_cooldown;
    m_scale_in_cooldown_isSet = true;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::is_scale_in_cooldown_Set() const{
    return m_scale_in_cooldown_isSet;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::is_scale_in_cooldown_Valid() const{
    return m_scale_in_cooldown_isValid;
}

qint32 OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::getScaleOutCooldown() const {
    return m_scale_out_cooldown;
}
void OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::setScaleOutCooldown(const qint32 &scale_out_cooldown) {
    m_scale_out_cooldown = scale_out_cooldown;
    m_scale_out_cooldown_isSet = true;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::is_scale_out_cooldown_Set() const{
    return m_scale_out_cooldown_isSet;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::is_scale_out_cooldown_Valid() const{
    return m_scale_out_cooldown_isValid;
}

double OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::getTargetValue() const {
    return m_target_value;
}
void OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::setTargetValue(const double &target_value) {
    m_target_value = target_value;
    m_target_value_isSet = true;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::is_target_value_Set() const{
    return m_target_value_isSet;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::is_target_value_Valid() const{
    return m_target_value_isValid;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_scale_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_in_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_out_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoScalingPolicyUpdate_TargetTrackingScalingPolicyConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_value_isValid && true;
}

} // namespace OpenAPI
