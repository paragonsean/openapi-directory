/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupDescription_SourceTableDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupDescription_SourceTableDetails::OAIBackupDescription_SourceTableDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupDescription_SourceTableDetails::OAIBackupDescription_SourceTableDetails() {
    this->initializeModel();
}

OAIBackupDescription_SourceTableDetails::~OAIBackupDescription_SourceTableDetails() {}

void OAIBackupDescription_SourceTableDetails::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_table_id_isSet = false;
    m_table_id_isValid = false;

    m_table_arn_isSet = false;
    m_table_arn_isValid = false;

    m_table_size_bytes_isSet = false;
    m_table_size_bytes_isValid = false;

    m_key_schema_isSet = false;
    m_key_schema_isValid = false;

    m_table_creation_date_time_isSet = false;
    m_table_creation_date_time_isValid = false;

    m_provisioned_throughput_isSet = false;
    m_provisioned_throughput_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_billing_mode_isSet = false;
    m_billing_mode_isValid = false;
}

void OAIBackupDescription_SourceTableDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupDescription_SourceTableDetails::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_table_id_isValid = ::OpenAPI::fromJsonValue(m_table_id, json[QString("TableId")]);
    m_table_id_isSet = !json[QString("TableId")].isNull() && m_table_id_isValid;

    m_table_arn_isValid = ::OpenAPI::fromJsonValue(m_table_arn, json[QString("TableArn")]);
    m_table_arn_isSet = !json[QString("TableArn")].isNull() && m_table_arn_isValid;

    m_table_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_table_size_bytes, json[QString("TableSizeBytes")]);
    m_table_size_bytes_isSet = !json[QString("TableSizeBytes")].isNull() && m_table_size_bytes_isValid;

    m_key_schema_isValid = ::OpenAPI::fromJsonValue(m_key_schema, json[QString("KeySchema")]);
    m_key_schema_isSet = !json[QString("KeySchema")].isNull() && m_key_schema_isValid;

    m_table_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_table_creation_date_time, json[QString("TableCreationDateTime")]);
    m_table_creation_date_time_isSet = !json[QString("TableCreationDateTime")].isNull() && m_table_creation_date_time_isValid;

    m_provisioned_throughput_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput, json[QString("ProvisionedThroughput")]);
    m_provisioned_throughput_isSet = !json[QString("ProvisionedThroughput")].isNull() && m_provisioned_throughput_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("ItemCount")]);
    m_item_count_isSet = !json[QString("ItemCount")].isNull() && m_item_count_isValid;

    m_billing_mode_isValid = ::OpenAPI::fromJsonValue(m_billing_mode, json[QString("BillingMode")]);
    m_billing_mode_isSet = !json[QString("BillingMode")].isNull() && m_billing_mode_isValid;
}

QString OAIBackupDescription_SourceTableDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupDescription_SourceTableDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_table_id_isSet) {
        obj.insert(QString("TableId"), ::OpenAPI::toJsonValue(m_table_id));
    }
    if (m_table_arn_isSet) {
        obj.insert(QString("TableArn"), ::OpenAPI::toJsonValue(m_table_arn));
    }
    if (m_table_size_bytes_isSet) {
        obj.insert(QString("TableSizeBytes"), ::OpenAPI::toJsonValue(m_table_size_bytes));
    }
    if (m_key_schema.isSet()) {
        obj.insert(QString("KeySchema"), ::OpenAPI::toJsonValue(m_key_schema));
    }
    if (m_table_creation_date_time_isSet) {
        obj.insert(QString("TableCreationDateTime"), ::OpenAPI::toJsonValue(m_table_creation_date_time));
    }
    if (m_provisioned_throughput.isSet()) {
        obj.insert(QString("ProvisionedThroughput"), ::OpenAPI::toJsonValue(m_provisioned_throughput));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("ItemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_billing_mode.isSet()) {
        obj.insert(QString("BillingMode"), ::OpenAPI::toJsonValue(m_billing_mode));
    }
    return obj;
}

QString OAIBackupDescription_SourceTableDetails::getTableName() const {
    return m_table_name;
}
void OAIBackupDescription_SourceTableDetails::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIBackupDescription_SourceTableDetails::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIBackupDescription_SourceTableDetails::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIBackupDescription_SourceTableDetails::getTableId() const {
    return m_table_id;
}
void OAIBackupDescription_SourceTableDetails::setTableId(const QString &table_id) {
    m_table_id = table_id;
    m_table_id_isSet = true;
}

bool OAIBackupDescription_SourceTableDetails::is_table_id_Set() const{
    return m_table_id_isSet;
}

bool OAIBackupDescription_SourceTableDetails::is_table_id_Valid() const{
    return m_table_id_isValid;
}

QString OAIBackupDescription_SourceTableDetails::getTableArn() const {
    return m_table_arn;
}
void OAIBackupDescription_SourceTableDetails::setTableArn(const QString &table_arn) {
    m_table_arn = table_arn;
    m_table_arn_isSet = true;
}

bool OAIBackupDescription_SourceTableDetails::is_table_arn_Set() const{
    return m_table_arn_isSet;
}

bool OAIBackupDescription_SourceTableDetails::is_table_arn_Valid() const{
    return m_table_arn_isValid;
}

qint32 OAIBackupDescription_SourceTableDetails::getTableSizeBytes() const {
    return m_table_size_bytes;
}
void OAIBackupDescription_SourceTableDetails::setTableSizeBytes(const qint32 &table_size_bytes) {
    m_table_size_bytes = table_size_bytes;
    m_table_size_bytes_isSet = true;
}

bool OAIBackupDescription_SourceTableDetails::is_table_size_bytes_Set() const{
    return m_table_size_bytes_isSet;
}

bool OAIBackupDescription_SourceTableDetails::is_table_size_bytes_Valid() const{
    return m_table_size_bytes_isValid;
}

QList OAIBackupDescription_SourceTableDetails::getKeySchema() const {
    return m_key_schema;
}
void OAIBackupDescription_SourceTableDetails::setKeySchema(const QList &key_schema) {
    m_key_schema = key_schema;
    m_key_schema_isSet = true;
}

bool OAIBackupDescription_SourceTableDetails::is_key_schema_Set() const{
    return m_key_schema_isSet;
}

bool OAIBackupDescription_SourceTableDetails::is_key_schema_Valid() const{
    return m_key_schema_isValid;
}

QDateTime OAIBackupDescription_SourceTableDetails::getTableCreationDateTime() const {
    return m_table_creation_date_time;
}
void OAIBackupDescription_SourceTableDetails::setTableCreationDateTime(const QDateTime &table_creation_date_time) {
    m_table_creation_date_time = table_creation_date_time;
    m_table_creation_date_time_isSet = true;
}

bool OAIBackupDescription_SourceTableDetails::is_table_creation_date_time_Set() const{
    return m_table_creation_date_time_isSet;
}

bool OAIBackupDescription_SourceTableDetails::is_table_creation_date_time_Valid() const{
    return m_table_creation_date_time_isValid;
}

OAISourceTableDetails_ProvisionedThroughput OAIBackupDescription_SourceTableDetails::getProvisionedThroughput() const {
    return m_provisioned_throughput;
}
void OAIBackupDescription_SourceTableDetails::setProvisionedThroughput(const OAISourceTableDetails_ProvisionedThroughput &provisioned_throughput) {
    m_provisioned_throughput = provisioned_throughput;
    m_provisioned_throughput_isSet = true;
}

bool OAIBackupDescription_SourceTableDetails::is_provisioned_throughput_Set() const{
    return m_provisioned_throughput_isSet;
}

bool OAIBackupDescription_SourceTableDetails::is_provisioned_throughput_Valid() const{
    return m_provisioned_throughput_isValid;
}

qint32 OAIBackupDescription_SourceTableDetails::getItemCount() const {
    return m_item_count;
}
void OAIBackupDescription_SourceTableDetails::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIBackupDescription_SourceTableDetails::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIBackupDescription_SourceTableDetails::is_item_count_Valid() const{
    return m_item_count_isValid;
}

OAIBillingMode OAIBackupDescription_SourceTableDetails::getBillingMode() const {
    return m_billing_mode;
}
void OAIBackupDescription_SourceTableDetails::setBillingMode(const OAIBillingMode &billing_mode) {
    m_billing_mode = billing_mode;
    m_billing_mode_isSet = true;
}

bool OAIBackupDescription_SourceTableDetails::is_billing_mode_Set() const{
    return m_billing_mode_isSet;
}

bool OAIBackupDescription_SourceTableDetails::is_billing_mode_Valid() const{
    return m_billing_mode_isValid;
}

bool OAIBackupDescription_SourceTableDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupDescription_SourceTableDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && m_table_id_isValid && m_key_schema_isValid && m_table_creation_date_time_isValid && m_provisioned_throughput_isValid && true;
}

} // namespace OpenAPI
