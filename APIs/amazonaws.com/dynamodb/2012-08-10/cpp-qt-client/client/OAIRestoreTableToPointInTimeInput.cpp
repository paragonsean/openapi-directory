/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreTableToPointInTimeInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreTableToPointInTimeInput::OAIRestoreTableToPointInTimeInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreTableToPointInTimeInput::OAIRestoreTableToPointInTimeInput() {
    this->initializeModel();
}

OAIRestoreTableToPointInTimeInput::~OAIRestoreTableToPointInTimeInput() {}

void OAIRestoreTableToPointInTimeInput::initializeModel() {

    m_source_table_arn_isSet = false;
    m_source_table_arn_isValid = false;

    m_source_table_name_isSet = false;
    m_source_table_name_isValid = false;

    m_target_table_name_isSet = false;
    m_target_table_name_isValid = false;

    m_use_latest_restorable_time_isSet = false;
    m_use_latest_restorable_time_isValid = false;

    m_restore_date_time_isSet = false;
    m_restore_date_time_isValid = false;

    m_billing_mode_override_isSet = false;
    m_billing_mode_override_isValid = false;

    m_global_secondary_index_override_isSet = false;
    m_global_secondary_index_override_isValid = false;

    m_local_secondary_index_override_isSet = false;
    m_local_secondary_index_override_isValid = false;

    m_provisioned_throughput_override_isSet = false;
    m_provisioned_throughput_override_isValid = false;

    m_sse_specification_override_isSet = false;
    m_sse_specification_override_isValid = false;
}

void OAIRestoreTableToPointInTimeInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreTableToPointInTimeInput::fromJsonObject(QJsonObject json) {

    m_source_table_arn_isValid = ::OpenAPI::fromJsonValue(m_source_table_arn, json[QString("SourceTableArn")]);
    m_source_table_arn_isSet = !json[QString("SourceTableArn")].isNull() && m_source_table_arn_isValid;

    m_source_table_name_isValid = ::OpenAPI::fromJsonValue(m_source_table_name, json[QString("SourceTableName")]);
    m_source_table_name_isSet = !json[QString("SourceTableName")].isNull() && m_source_table_name_isValid;

    m_target_table_name_isValid = ::OpenAPI::fromJsonValue(m_target_table_name, json[QString("TargetTableName")]);
    m_target_table_name_isSet = !json[QString("TargetTableName")].isNull() && m_target_table_name_isValid;

    m_use_latest_restorable_time_isValid = ::OpenAPI::fromJsonValue(m_use_latest_restorable_time, json[QString("UseLatestRestorableTime")]);
    m_use_latest_restorable_time_isSet = !json[QString("UseLatestRestorableTime")].isNull() && m_use_latest_restorable_time_isValid;

    m_restore_date_time_isValid = ::OpenAPI::fromJsonValue(m_restore_date_time, json[QString("RestoreDateTime")]);
    m_restore_date_time_isSet = !json[QString("RestoreDateTime")].isNull() && m_restore_date_time_isValid;

    m_billing_mode_override_isValid = ::OpenAPI::fromJsonValue(m_billing_mode_override, json[QString("BillingModeOverride")]);
    m_billing_mode_override_isSet = !json[QString("BillingModeOverride")].isNull() && m_billing_mode_override_isValid;

    m_global_secondary_index_override_isValid = ::OpenAPI::fromJsonValue(m_global_secondary_index_override, json[QString("GlobalSecondaryIndexOverride")]);
    m_global_secondary_index_override_isSet = !json[QString("GlobalSecondaryIndexOverride")].isNull() && m_global_secondary_index_override_isValid;

    m_local_secondary_index_override_isValid = ::OpenAPI::fromJsonValue(m_local_secondary_index_override, json[QString("LocalSecondaryIndexOverride")]);
    m_local_secondary_index_override_isSet = !json[QString("LocalSecondaryIndexOverride")].isNull() && m_local_secondary_index_override_isValid;

    m_provisioned_throughput_override_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput_override, json[QString("ProvisionedThroughputOverride")]);
    m_provisioned_throughput_override_isSet = !json[QString("ProvisionedThroughputOverride")].isNull() && m_provisioned_throughput_override_isValid;

    m_sse_specification_override_isValid = ::OpenAPI::fromJsonValue(m_sse_specification_override, json[QString("SSESpecificationOverride")]);
    m_sse_specification_override_isSet = !json[QString("SSESpecificationOverride")].isNull() && m_sse_specification_override_isValid;
}

QString OAIRestoreTableToPointInTimeInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreTableToPointInTimeInput::asJsonObject() const {
    QJsonObject obj;
    if (m_source_table_arn_isSet) {
        obj.insert(QString("SourceTableArn"), ::OpenAPI::toJsonValue(m_source_table_arn));
    }
    if (m_source_table_name_isSet) {
        obj.insert(QString("SourceTableName"), ::OpenAPI::toJsonValue(m_source_table_name));
    }
    if (m_target_table_name_isSet) {
        obj.insert(QString("TargetTableName"), ::OpenAPI::toJsonValue(m_target_table_name));
    }
    if (m_use_latest_restorable_time_isSet) {
        obj.insert(QString("UseLatestRestorableTime"), ::OpenAPI::toJsonValue(m_use_latest_restorable_time));
    }
    if (m_restore_date_time_isSet) {
        obj.insert(QString("RestoreDateTime"), ::OpenAPI::toJsonValue(m_restore_date_time));
    }
    if (m_billing_mode_override.isSet()) {
        obj.insert(QString("BillingModeOverride"), ::OpenAPI::toJsonValue(m_billing_mode_override));
    }
    if (m_global_secondary_index_override.isSet()) {
        obj.insert(QString("GlobalSecondaryIndexOverride"), ::OpenAPI::toJsonValue(m_global_secondary_index_override));
    }
    if (m_local_secondary_index_override.isSet()) {
        obj.insert(QString("LocalSecondaryIndexOverride"), ::OpenAPI::toJsonValue(m_local_secondary_index_override));
    }
    if (m_provisioned_throughput_override.isSet()) {
        obj.insert(QString("ProvisionedThroughputOverride"), ::OpenAPI::toJsonValue(m_provisioned_throughput_override));
    }
    if (m_sse_specification_override.isSet()) {
        obj.insert(QString("SSESpecificationOverride"), ::OpenAPI::toJsonValue(m_sse_specification_override));
    }
    return obj;
}

QString OAIRestoreTableToPointInTimeInput::getSourceTableArn() const {
    return m_source_table_arn;
}
void OAIRestoreTableToPointInTimeInput::setSourceTableArn(const QString &source_table_arn) {
    m_source_table_arn = source_table_arn;
    m_source_table_arn_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_source_table_arn_Set() const{
    return m_source_table_arn_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_source_table_arn_Valid() const{
    return m_source_table_arn_isValid;
}

QString OAIRestoreTableToPointInTimeInput::getSourceTableName() const {
    return m_source_table_name;
}
void OAIRestoreTableToPointInTimeInput::setSourceTableName(const QString &source_table_name) {
    m_source_table_name = source_table_name;
    m_source_table_name_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_source_table_name_Set() const{
    return m_source_table_name_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_source_table_name_Valid() const{
    return m_source_table_name_isValid;
}

QString OAIRestoreTableToPointInTimeInput::getTargetTableName() const {
    return m_target_table_name;
}
void OAIRestoreTableToPointInTimeInput::setTargetTableName(const QString &target_table_name) {
    m_target_table_name = target_table_name;
    m_target_table_name_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_target_table_name_Set() const{
    return m_target_table_name_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_target_table_name_Valid() const{
    return m_target_table_name_isValid;
}

bool OAIRestoreTableToPointInTimeInput::getUseLatestRestorableTime() const {
    return m_use_latest_restorable_time;
}
void OAIRestoreTableToPointInTimeInput::setUseLatestRestorableTime(const bool &use_latest_restorable_time) {
    m_use_latest_restorable_time = use_latest_restorable_time;
    m_use_latest_restorable_time_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_use_latest_restorable_time_Set() const{
    return m_use_latest_restorable_time_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_use_latest_restorable_time_Valid() const{
    return m_use_latest_restorable_time_isValid;
}

QDateTime OAIRestoreTableToPointInTimeInput::getRestoreDateTime() const {
    return m_restore_date_time;
}
void OAIRestoreTableToPointInTimeInput::setRestoreDateTime(const QDateTime &restore_date_time) {
    m_restore_date_time = restore_date_time;
    m_restore_date_time_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_restore_date_time_Set() const{
    return m_restore_date_time_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_restore_date_time_Valid() const{
    return m_restore_date_time_isValid;
}

OAIBillingMode OAIRestoreTableToPointInTimeInput::getBillingModeOverride() const {
    return m_billing_mode_override;
}
void OAIRestoreTableToPointInTimeInput::setBillingModeOverride(const OAIBillingMode &billing_mode_override) {
    m_billing_mode_override = billing_mode_override;
    m_billing_mode_override_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_billing_mode_override_Set() const{
    return m_billing_mode_override_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_billing_mode_override_Valid() const{
    return m_billing_mode_override_isValid;
}

QList OAIRestoreTableToPointInTimeInput::getGlobalSecondaryIndexOverride() const {
    return m_global_secondary_index_override;
}
void OAIRestoreTableToPointInTimeInput::setGlobalSecondaryIndexOverride(const QList &global_secondary_index_override) {
    m_global_secondary_index_override = global_secondary_index_override;
    m_global_secondary_index_override_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_global_secondary_index_override_Set() const{
    return m_global_secondary_index_override_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_global_secondary_index_override_Valid() const{
    return m_global_secondary_index_override_isValid;
}

QList OAIRestoreTableToPointInTimeInput::getLocalSecondaryIndexOverride() const {
    return m_local_secondary_index_override;
}
void OAIRestoreTableToPointInTimeInput::setLocalSecondaryIndexOverride(const QList &local_secondary_index_override) {
    m_local_secondary_index_override = local_secondary_index_override;
    m_local_secondary_index_override_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_local_secondary_index_override_Set() const{
    return m_local_secondary_index_override_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_local_secondary_index_override_Valid() const{
    return m_local_secondary_index_override_isValid;
}

OAIRestoreTableFromBackupInput_ProvisionedThroughputOverride OAIRestoreTableToPointInTimeInput::getProvisionedThroughputOverride() const {
    return m_provisioned_throughput_override;
}
void OAIRestoreTableToPointInTimeInput::setProvisionedThroughputOverride(const OAIRestoreTableFromBackupInput_ProvisionedThroughputOverride &provisioned_throughput_override) {
    m_provisioned_throughput_override = provisioned_throughput_override;
    m_provisioned_throughput_override_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_provisioned_throughput_override_Set() const{
    return m_provisioned_throughput_override_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_provisioned_throughput_override_Valid() const{
    return m_provisioned_throughput_override_isValid;
}

OAIRestoreTableFromBackupInput_SSESpecificationOverride OAIRestoreTableToPointInTimeInput::getSseSpecificationOverride() const {
    return m_sse_specification_override;
}
void OAIRestoreTableToPointInTimeInput::setSseSpecificationOverride(const OAIRestoreTableFromBackupInput_SSESpecificationOverride &sse_specification_override) {
    m_sse_specification_override = sse_specification_override;
    m_sse_specification_override_isSet = true;
}

bool OAIRestoreTableToPointInTimeInput::is_sse_specification_override_Set() const{
    return m_sse_specification_override_isSet;
}

bool OAIRestoreTableToPointInTimeInput::is_sse_specification_override_Valid() const{
    return m_sse_specification_override_isValid;
}

bool OAIRestoreTableToPointInTimeInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_latest_restorable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_mode_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_secondary_index_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_secondary_index_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_specification_override.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreTableToPointInTimeInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_table_name_isValid && true;
}

} // namespace OpenAPI
