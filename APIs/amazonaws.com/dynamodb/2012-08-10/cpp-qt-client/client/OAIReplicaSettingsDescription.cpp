/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicaSettingsDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicaSettingsDescription::OAIReplicaSettingsDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicaSettingsDescription::OAIReplicaSettingsDescription() {
    this->initializeModel();
}

OAIReplicaSettingsDescription::~OAIReplicaSettingsDescription() {}

void OAIReplicaSettingsDescription::initializeModel() {

    m_region_name_isSet = false;
    m_region_name_isValid = false;

    m_replica_status_isSet = false;
    m_replica_status_isValid = false;

    m_replica_billing_mode_summary_isSet = false;
    m_replica_billing_mode_summary_isValid = false;

    m_replica_provisioned_read_capacity_units_isSet = false;
    m_replica_provisioned_read_capacity_units_isValid = false;

    m_replica_provisioned_read_capacity_auto_scaling_settings_isSet = false;
    m_replica_provisioned_read_capacity_auto_scaling_settings_isValid = false;

    m_replica_provisioned_write_capacity_units_isSet = false;
    m_replica_provisioned_write_capacity_units_isValid = false;

    m_replica_provisioned_write_capacity_auto_scaling_settings_isSet = false;
    m_replica_provisioned_write_capacity_auto_scaling_settings_isValid = false;

    m_replica_global_secondary_index_settings_isSet = false;
    m_replica_global_secondary_index_settings_isValid = false;

    m_replica_table_class_summary_isSet = false;
    m_replica_table_class_summary_isValid = false;
}

void OAIReplicaSettingsDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicaSettingsDescription::fromJsonObject(QJsonObject json) {

    m_region_name_isValid = ::OpenAPI::fromJsonValue(m_region_name, json[QString("RegionName")]);
    m_region_name_isSet = !json[QString("RegionName")].isNull() && m_region_name_isValid;

    m_replica_status_isValid = ::OpenAPI::fromJsonValue(m_replica_status, json[QString("ReplicaStatus")]);
    m_replica_status_isSet = !json[QString("ReplicaStatus")].isNull() && m_replica_status_isValid;

    m_replica_billing_mode_summary_isValid = ::OpenAPI::fromJsonValue(m_replica_billing_mode_summary, json[QString("ReplicaBillingModeSummary")]);
    m_replica_billing_mode_summary_isSet = !json[QString("ReplicaBillingModeSummary")].isNull() && m_replica_billing_mode_summary_isValid;

    m_replica_provisioned_read_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_replica_provisioned_read_capacity_units, json[QString("ReplicaProvisionedReadCapacityUnits")]);
    m_replica_provisioned_read_capacity_units_isSet = !json[QString("ReplicaProvisionedReadCapacityUnits")].isNull() && m_replica_provisioned_read_capacity_units_isValid;

    m_replica_provisioned_read_capacity_auto_scaling_settings_isValid = ::OpenAPI::fromJsonValue(m_replica_provisioned_read_capacity_auto_scaling_settings, json[QString("ReplicaProvisionedReadCapacityAutoScalingSettings")]);
    m_replica_provisioned_read_capacity_auto_scaling_settings_isSet = !json[QString("ReplicaProvisionedReadCapacityAutoScalingSettings")].isNull() && m_replica_provisioned_read_capacity_auto_scaling_settings_isValid;

    m_replica_provisioned_write_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_replica_provisioned_write_capacity_units, json[QString("ReplicaProvisionedWriteCapacityUnits")]);
    m_replica_provisioned_write_capacity_units_isSet = !json[QString("ReplicaProvisionedWriteCapacityUnits")].isNull() && m_replica_provisioned_write_capacity_units_isValid;

    m_replica_provisioned_write_capacity_auto_scaling_settings_isValid = ::OpenAPI::fromJsonValue(m_replica_provisioned_write_capacity_auto_scaling_settings, json[QString("ReplicaProvisionedWriteCapacityAutoScalingSettings")]);
    m_replica_provisioned_write_capacity_auto_scaling_settings_isSet = !json[QString("ReplicaProvisionedWriteCapacityAutoScalingSettings")].isNull() && m_replica_provisioned_write_capacity_auto_scaling_settings_isValid;

    m_replica_global_secondary_index_settings_isValid = ::OpenAPI::fromJsonValue(m_replica_global_secondary_index_settings, json[QString("ReplicaGlobalSecondaryIndexSettings")]);
    m_replica_global_secondary_index_settings_isSet = !json[QString("ReplicaGlobalSecondaryIndexSettings")].isNull() && m_replica_global_secondary_index_settings_isValid;

    m_replica_table_class_summary_isValid = ::OpenAPI::fromJsonValue(m_replica_table_class_summary, json[QString("ReplicaTableClassSummary")]);
    m_replica_table_class_summary_isSet = !json[QString("ReplicaTableClassSummary")].isNull() && m_replica_table_class_summary_isValid;
}

QString OAIReplicaSettingsDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicaSettingsDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_region_name_isSet) {
        obj.insert(QString("RegionName"), ::OpenAPI::toJsonValue(m_region_name));
    }
    if (m_replica_status.isSet()) {
        obj.insert(QString("ReplicaStatus"), ::OpenAPI::toJsonValue(m_replica_status));
    }
    if (m_replica_billing_mode_summary.isSet()) {
        obj.insert(QString("ReplicaBillingModeSummary"), ::OpenAPI::toJsonValue(m_replica_billing_mode_summary));
    }
    if (m_replica_provisioned_read_capacity_units_isSet) {
        obj.insert(QString("ReplicaProvisionedReadCapacityUnits"), ::OpenAPI::toJsonValue(m_replica_provisioned_read_capacity_units));
    }
    if (m_replica_provisioned_read_capacity_auto_scaling_settings.isSet()) {
        obj.insert(QString("ReplicaProvisionedReadCapacityAutoScalingSettings"), ::OpenAPI::toJsonValue(m_replica_provisioned_read_capacity_auto_scaling_settings));
    }
    if (m_replica_provisioned_write_capacity_units_isSet) {
        obj.insert(QString("ReplicaProvisionedWriteCapacityUnits"), ::OpenAPI::toJsonValue(m_replica_provisioned_write_capacity_units));
    }
    if (m_replica_provisioned_write_capacity_auto_scaling_settings.isSet()) {
        obj.insert(QString("ReplicaProvisionedWriteCapacityAutoScalingSettings"), ::OpenAPI::toJsonValue(m_replica_provisioned_write_capacity_auto_scaling_settings));
    }
    if (m_replica_global_secondary_index_settings.isSet()) {
        obj.insert(QString("ReplicaGlobalSecondaryIndexSettings"), ::OpenAPI::toJsonValue(m_replica_global_secondary_index_settings));
    }
    if (m_replica_table_class_summary.isSet()) {
        obj.insert(QString("ReplicaTableClassSummary"), ::OpenAPI::toJsonValue(m_replica_table_class_summary));
    }
    return obj;
}

QString OAIReplicaSettingsDescription::getRegionName() const {
    return m_region_name;
}
void OAIReplicaSettingsDescription::setRegionName(const QString &region_name) {
    m_region_name = region_name;
    m_region_name_isSet = true;
}

bool OAIReplicaSettingsDescription::is_region_name_Set() const{
    return m_region_name_isSet;
}

bool OAIReplicaSettingsDescription::is_region_name_Valid() const{
    return m_region_name_isValid;
}

OAIReplicaStatus OAIReplicaSettingsDescription::getReplicaStatus() const {
    return m_replica_status;
}
void OAIReplicaSettingsDescription::setReplicaStatus(const OAIReplicaStatus &replica_status) {
    m_replica_status = replica_status;
    m_replica_status_isSet = true;
}

bool OAIReplicaSettingsDescription::is_replica_status_Set() const{
    return m_replica_status_isSet;
}

bool OAIReplicaSettingsDescription::is_replica_status_Valid() const{
    return m_replica_status_isValid;
}

OAIReplicaSettingsDescription_ReplicaBillingModeSummary OAIReplicaSettingsDescription::getReplicaBillingModeSummary() const {
    return m_replica_billing_mode_summary;
}
void OAIReplicaSettingsDescription::setReplicaBillingModeSummary(const OAIReplicaSettingsDescription_ReplicaBillingModeSummary &replica_billing_mode_summary) {
    m_replica_billing_mode_summary = replica_billing_mode_summary;
    m_replica_billing_mode_summary_isSet = true;
}

bool OAIReplicaSettingsDescription::is_replica_billing_mode_summary_Set() const{
    return m_replica_billing_mode_summary_isSet;
}

bool OAIReplicaSettingsDescription::is_replica_billing_mode_summary_Valid() const{
    return m_replica_billing_mode_summary_isValid;
}

qint32 OAIReplicaSettingsDescription::getReplicaProvisionedReadCapacityUnits() const {
    return m_replica_provisioned_read_capacity_units;
}
void OAIReplicaSettingsDescription::setReplicaProvisionedReadCapacityUnits(const qint32 &replica_provisioned_read_capacity_units) {
    m_replica_provisioned_read_capacity_units = replica_provisioned_read_capacity_units;
    m_replica_provisioned_read_capacity_units_isSet = true;
}

bool OAIReplicaSettingsDescription::is_replica_provisioned_read_capacity_units_Set() const{
    return m_replica_provisioned_read_capacity_units_isSet;
}

bool OAIReplicaSettingsDescription::is_replica_provisioned_read_capacity_units_Valid() const{
    return m_replica_provisioned_read_capacity_units_isValid;
}

OAIReplicaSettingsDescription_ReplicaProvisionedReadCapacityAutoScalingSettings OAIReplicaSettingsDescription::getReplicaProvisionedReadCapacityAutoScalingSettings() const {
    return m_replica_provisioned_read_capacity_auto_scaling_settings;
}
void OAIReplicaSettingsDescription::setReplicaProvisionedReadCapacityAutoScalingSettings(const OAIReplicaSettingsDescription_ReplicaProvisionedReadCapacityAutoScalingSettings &replica_provisioned_read_capacity_auto_scaling_settings) {
    m_replica_provisioned_read_capacity_auto_scaling_settings = replica_provisioned_read_capacity_auto_scaling_settings;
    m_replica_provisioned_read_capacity_auto_scaling_settings_isSet = true;
}

bool OAIReplicaSettingsDescription::is_replica_provisioned_read_capacity_auto_scaling_settings_Set() const{
    return m_replica_provisioned_read_capacity_auto_scaling_settings_isSet;
}

bool OAIReplicaSettingsDescription::is_replica_provisioned_read_capacity_auto_scaling_settings_Valid() const{
    return m_replica_provisioned_read_capacity_auto_scaling_settings_isValid;
}

qint32 OAIReplicaSettingsDescription::getReplicaProvisionedWriteCapacityUnits() const {
    return m_replica_provisioned_write_capacity_units;
}
void OAIReplicaSettingsDescription::setReplicaProvisionedWriteCapacityUnits(const qint32 &replica_provisioned_write_capacity_units) {
    m_replica_provisioned_write_capacity_units = replica_provisioned_write_capacity_units;
    m_replica_provisioned_write_capacity_units_isSet = true;
}

bool OAIReplicaSettingsDescription::is_replica_provisioned_write_capacity_units_Set() const{
    return m_replica_provisioned_write_capacity_units_isSet;
}

bool OAIReplicaSettingsDescription::is_replica_provisioned_write_capacity_units_Valid() const{
    return m_replica_provisioned_write_capacity_units_isValid;
}

OAIReplicaSettingsDescription_ReplicaProvisionedWriteCapacityAutoScalingSettings OAIReplicaSettingsDescription::getReplicaProvisionedWriteCapacityAutoScalingSettings() const {
    return m_replica_provisioned_write_capacity_auto_scaling_settings;
}
void OAIReplicaSettingsDescription::setReplicaProvisionedWriteCapacityAutoScalingSettings(const OAIReplicaSettingsDescription_ReplicaProvisionedWriteCapacityAutoScalingSettings &replica_provisioned_write_capacity_auto_scaling_settings) {
    m_replica_provisioned_write_capacity_auto_scaling_settings = replica_provisioned_write_capacity_auto_scaling_settings;
    m_replica_provisioned_write_capacity_auto_scaling_settings_isSet = true;
}

bool OAIReplicaSettingsDescription::is_replica_provisioned_write_capacity_auto_scaling_settings_Set() const{
    return m_replica_provisioned_write_capacity_auto_scaling_settings_isSet;
}

bool OAIReplicaSettingsDescription::is_replica_provisioned_write_capacity_auto_scaling_settings_Valid() const{
    return m_replica_provisioned_write_capacity_auto_scaling_settings_isValid;
}

QList OAIReplicaSettingsDescription::getReplicaGlobalSecondaryIndexSettings() const {
    return m_replica_global_secondary_index_settings;
}
void OAIReplicaSettingsDescription::setReplicaGlobalSecondaryIndexSettings(const QList &replica_global_secondary_index_settings) {
    m_replica_global_secondary_index_settings = replica_global_secondary_index_settings;
    m_replica_global_secondary_index_settings_isSet = true;
}

bool OAIReplicaSettingsDescription::is_replica_global_secondary_index_settings_Set() const{
    return m_replica_global_secondary_index_settings_isSet;
}

bool OAIReplicaSettingsDescription::is_replica_global_secondary_index_settings_Valid() const{
    return m_replica_global_secondary_index_settings_isValid;
}

OAITableClassSummary OAIReplicaSettingsDescription::getReplicaTableClassSummary() const {
    return m_replica_table_class_summary;
}
void OAIReplicaSettingsDescription::setReplicaTableClassSummary(const OAITableClassSummary &replica_table_class_summary) {
    m_replica_table_class_summary = replica_table_class_summary;
    m_replica_table_class_summary_isSet = true;
}

bool OAIReplicaSettingsDescription::is_replica_table_class_summary_Set() const{
    return m_replica_table_class_summary_isSet;
}

bool OAIReplicaSettingsDescription::is_replica_table_class_summary_Valid() const{
    return m_replica_table_class_summary_isValid;
}

bool OAIReplicaSettingsDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_region_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_billing_mode_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_provisioned_read_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_provisioned_read_capacity_auto_scaling_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_provisioned_write_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_provisioned_write_capacity_auto_scaling_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_global_secondary_index_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_table_class_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicaSettingsDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_region_name_isValid && true;
}

} // namespace OpenAPI
