/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTableInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTableInput::OAICreateTableInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTableInput::OAICreateTableInput() {
    this->initializeModel();
}

OAICreateTableInput::~OAICreateTableInput() {}

void OAICreateTableInput::initializeModel() {

    m_attribute_definitions_isSet = false;
    m_attribute_definitions_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_key_schema_isSet = false;
    m_key_schema_isValid = false;

    m_local_secondary_indexes_isSet = false;
    m_local_secondary_indexes_isValid = false;

    m_global_secondary_indexes_isSet = false;
    m_global_secondary_indexes_isValid = false;

    m_billing_mode_isSet = false;
    m_billing_mode_isValid = false;

    m_provisioned_throughput_isSet = false;
    m_provisioned_throughput_isValid = false;

    m_stream_specification_isSet = false;
    m_stream_specification_isValid = false;

    m_sse_specification_isSet = false;
    m_sse_specification_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_table_class_isSet = false;
    m_table_class_isValid = false;

    m_deletion_protection_enabled_isSet = false;
    m_deletion_protection_enabled_isValid = false;
}

void OAICreateTableInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTableInput::fromJsonObject(QJsonObject json) {

    m_attribute_definitions_isValid = ::OpenAPI::fromJsonValue(m_attribute_definitions, json[QString("AttributeDefinitions")]);
    m_attribute_definitions_isSet = !json[QString("AttributeDefinitions")].isNull() && m_attribute_definitions_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_key_schema_isValid = ::OpenAPI::fromJsonValue(m_key_schema, json[QString("KeySchema")]);
    m_key_schema_isSet = !json[QString("KeySchema")].isNull() && m_key_schema_isValid;

    m_local_secondary_indexes_isValid = ::OpenAPI::fromJsonValue(m_local_secondary_indexes, json[QString("LocalSecondaryIndexes")]);
    m_local_secondary_indexes_isSet = !json[QString("LocalSecondaryIndexes")].isNull() && m_local_secondary_indexes_isValid;

    m_global_secondary_indexes_isValid = ::OpenAPI::fromJsonValue(m_global_secondary_indexes, json[QString("GlobalSecondaryIndexes")]);
    m_global_secondary_indexes_isSet = !json[QString("GlobalSecondaryIndexes")].isNull() && m_global_secondary_indexes_isValid;

    m_billing_mode_isValid = ::OpenAPI::fromJsonValue(m_billing_mode, json[QString("BillingMode")]);
    m_billing_mode_isSet = !json[QString("BillingMode")].isNull() && m_billing_mode_isValid;

    m_provisioned_throughput_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput, json[QString("ProvisionedThroughput")]);
    m_provisioned_throughput_isSet = !json[QString("ProvisionedThroughput")].isNull() && m_provisioned_throughput_isValid;

    m_stream_specification_isValid = ::OpenAPI::fromJsonValue(m_stream_specification, json[QString("StreamSpecification")]);
    m_stream_specification_isSet = !json[QString("StreamSpecification")].isNull() && m_stream_specification_isValid;

    m_sse_specification_isValid = ::OpenAPI::fromJsonValue(m_sse_specification, json[QString("SSESpecification")]);
    m_sse_specification_isSet = !json[QString("SSESpecification")].isNull() && m_sse_specification_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_table_class_isValid = ::OpenAPI::fromJsonValue(m_table_class, json[QString("TableClass")]);
    m_table_class_isSet = !json[QString("TableClass")].isNull() && m_table_class_isValid;

    m_deletion_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection_enabled, json[QString("DeletionProtectionEnabled")]);
    m_deletion_protection_enabled_isSet = !json[QString("DeletionProtectionEnabled")].isNull() && m_deletion_protection_enabled_isValid;
}

QString OAICreateTableInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTableInput::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_definitions.isSet()) {
        obj.insert(QString("AttributeDefinitions"), ::OpenAPI::toJsonValue(m_attribute_definitions));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_key_schema.isSet()) {
        obj.insert(QString("KeySchema"), ::OpenAPI::toJsonValue(m_key_schema));
    }
    if (m_local_secondary_indexes.isSet()) {
        obj.insert(QString("LocalSecondaryIndexes"), ::OpenAPI::toJsonValue(m_local_secondary_indexes));
    }
    if (m_global_secondary_indexes.isSet()) {
        obj.insert(QString("GlobalSecondaryIndexes"), ::OpenAPI::toJsonValue(m_global_secondary_indexes));
    }
    if (m_billing_mode.isSet()) {
        obj.insert(QString("BillingMode"), ::OpenAPI::toJsonValue(m_billing_mode));
    }
    if (m_provisioned_throughput.isSet()) {
        obj.insert(QString("ProvisionedThroughput"), ::OpenAPI::toJsonValue(m_provisioned_throughput));
    }
    if (m_stream_specification.isSet()) {
        obj.insert(QString("StreamSpecification"), ::OpenAPI::toJsonValue(m_stream_specification));
    }
    if (m_sse_specification.isSet()) {
        obj.insert(QString("SSESpecification"), ::OpenAPI::toJsonValue(m_sse_specification));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_table_class.isSet()) {
        obj.insert(QString("TableClass"), ::OpenAPI::toJsonValue(m_table_class));
    }
    if (m_deletion_protection_enabled_isSet) {
        obj.insert(QString("DeletionProtectionEnabled"), ::OpenAPI::toJsonValue(m_deletion_protection_enabled));
    }
    return obj;
}

QList OAICreateTableInput::getAttributeDefinitions() const {
    return m_attribute_definitions;
}
void OAICreateTableInput::setAttributeDefinitions(const QList &attribute_definitions) {
    m_attribute_definitions = attribute_definitions;
    m_attribute_definitions_isSet = true;
}

bool OAICreateTableInput::is_attribute_definitions_Set() const{
    return m_attribute_definitions_isSet;
}

bool OAICreateTableInput::is_attribute_definitions_Valid() const{
    return m_attribute_definitions_isValid;
}

QString OAICreateTableInput::getTableName() const {
    return m_table_name;
}
void OAICreateTableInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAICreateTableInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAICreateTableInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QList OAICreateTableInput::getKeySchema() const {
    return m_key_schema;
}
void OAICreateTableInput::setKeySchema(const QList &key_schema) {
    m_key_schema = key_schema;
    m_key_schema_isSet = true;
}

bool OAICreateTableInput::is_key_schema_Set() const{
    return m_key_schema_isSet;
}

bool OAICreateTableInput::is_key_schema_Valid() const{
    return m_key_schema_isValid;
}

QList OAICreateTableInput::getLocalSecondaryIndexes() const {
    return m_local_secondary_indexes;
}
void OAICreateTableInput::setLocalSecondaryIndexes(const QList &local_secondary_indexes) {
    m_local_secondary_indexes = local_secondary_indexes;
    m_local_secondary_indexes_isSet = true;
}

bool OAICreateTableInput::is_local_secondary_indexes_Set() const{
    return m_local_secondary_indexes_isSet;
}

bool OAICreateTableInput::is_local_secondary_indexes_Valid() const{
    return m_local_secondary_indexes_isValid;
}

QList OAICreateTableInput::getGlobalSecondaryIndexes() const {
    return m_global_secondary_indexes;
}
void OAICreateTableInput::setGlobalSecondaryIndexes(const QList &global_secondary_indexes) {
    m_global_secondary_indexes = global_secondary_indexes;
    m_global_secondary_indexes_isSet = true;
}

bool OAICreateTableInput::is_global_secondary_indexes_Set() const{
    return m_global_secondary_indexes_isSet;
}

bool OAICreateTableInput::is_global_secondary_indexes_Valid() const{
    return m_global_secondary_indexes_isValid;
}

OAIBillingMode OAICreateTableInput::getBillingMode() const {
    return m_billing_mode;
}
void OAICreateTableInput::setBillingMode(const OAIBillingMode &billing_mode) {
    m_billing_mode = billing_mode;
    m_billing_mode_isSet = true;
}

bool OAICreateTableInput::is_billing_mode_Set() const{
    return m_billing_mode_isSet;
}

bool OAICreateTableInput::is_billing_mode_Valid() const{
    return m_billing_mode_isValid;
}

OAICreateTableInput_ProvisionedThroughput OAICreateTableInput::getProvisionedThroughput() const {
    return m_provisioned_throughput;
}
void OAICreateTableInput::setProvisionedThroughput(const OAICreateTableInput_ProvisionedThroughput &provisioned_throughput) {
    m_provisioned_throughput = provisioned_throughput;
    m_provisioned_throughput_isSet = true;
}

bool OAICreateTableInput::is_provisioned_throughput_Set() const{
    return m_provisioned_throughput_isSet;
}

bool OAICreateTableInput::is_provisioned_throughput_Valid() const{
    return m_provisioned_throughput_isValid;
}

OAICreateTableInput_StreamSpecification OAICreateTableInput::getStreamSpecification() const {
    return m_stream_specification;
}
void OAICreateTableInput::setStreamSpecification(const OAICreateTableInput_StreamSpecification &stream_specification) {
    m_stream_specification = stream_specification;
    m_stream_specification_isSet = true;
}

bool OAICreateTableInput::is_stream_specification_Set() const{
    return m_stream_specification_isSet;
}

bool OAICreateTableInput::is_stream_specification_Valid() const{
    return m_stream_specification_isValid;
}

OAICreateTableInput_SSESpecification OAICreateTableInput::getSseSpecification() const {
    return m_sse_specification;
}
void OAICreateTableInput::setSseSpecification(const OAICreateTableInput_SSESpecification &sse_specification) {
    m_sse_specification = sse_specification;
    m_sse_specification_isSet = true;
}

bool OAICreateTableInput::is_sse_specification_Set() const{
    return m_sse_specification_isSet;
}

bool OAICreateTableInput::is_sse_specification_Valid() const{
    return m_sse_specification_isValid;
}

QList OAICreateTableInput::getTags() const {
    return m_tags;
}
void OAICreateTableInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTableInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTableInput::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITableClass OAICreateTableInput::getTableClass() const {
    return m_table_class;
}
void OAICreateTableInput::setTableClass(const OAITableClass &table_class) {
    m_table_class = table_class;
    m_table_class_isSet = true;
}

bool OAICreateTableInput::is_table_class_Set() const{
    return m_table_class_isSet;
}

bool OAICreateTableInput::is_table_class_Valid() const{
    return m_table_class_isValid;
}

bool OAICreateTableInput::getDeletionProtectionEnabled() const {
    return m_deletion_protection_enabled;
}
void OAICreateTableInput::setDeletionProtectionEnabled(const bool &deletion_protection_enabled) {
    m_deletion_protection_enabled = deletion_protection_enabled;
    m_deletion_protection_enabled_isSet = true;
}

bool OAICreateTableInput::is_deletion_protection_enabled_Set() const{
    return m_deletion_protection_enabled_isSet;
}

bool OAICreateTableInput::is_deletion_protection_enabled_Valid() const{
    return m_deletion_protection_enabled_isValid;
}

bool OAICreateTableInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_secondary_indexes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_secondary_indexes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTableInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_definitions_isValid && m_table_name_isValid && m_key_schema_isValid && true;
}

} // namespace OpenAPI
